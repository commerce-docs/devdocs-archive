// Credits to https://thomascfoulds.com/2020/07/27/jekyll-static-site-search-lunr.html
window.store = {
  
  
    "guides-v2-0-release-notes-2-0-ce-release-notes-parent-html": {
      "title": "Magento Open Source 2.0.x Release Notes",
      "content": "\n",
      "url": "/guides/v2.0/release-notes/2.0-ce-release-notes-parent.html"
    }
    ,
  
    "guides-v2-0-release-notes-2-0-ee-release-notes-parent-html": {
      "title": "Magento Commerce 2.0.x Release Notes",
      "content": "\n",
      "url": "/guides/v2.0/release-notes/2.0-ee-release-notes-parent.html"
    }
    ,
  
    "guides-v2-0-release-notes-2-0-rc-release-notes-parent-html": {
      "title": "Magento Release Candidate Notes",
      "content": "\n",
      "url": "/guides/v2.0/release-notes/2.0-rc-release-notes-parent.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-abasics-intro-html": {
      "title": "Architectural basics overview",
      "content": "Magento incorporates the core architectural principles of object-oriented, PHP-based applications. Comprehensive discussions of these general principles exist both on-line and in printed form.\n\nThe following discussion focuses on how these topics apply directly to Magento:\n\n\n  Magento technology stack\n  Magento View Model\n  Extensibility\n  Modularity\n  Event-driven architecture\n  Security\n\n\nRelated topics\n\nArchitectural diagrams\n\nTechnology stack\n\nStack basics\n\nVersioning\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/ABasics_intro.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-acomponents-html": {
      "title": "Magento Components",
      "content": "Magento components\n\nMagento has several core components that are used to build custom web sites, applications, and integrated systems. When you change the appearance or behavior of your Magento store, you are inevitably changing one or more of these core Magento components, which include modules, themes, and language packages. Together, these core components determine much of server-side and storefront (frontend) appearance and behavior.\n\n\n  Throughout the Magento documentation set, we also use the term component in its generic sense to mean element or part. However, the term Magento component explicitly refers to either a module, theme, or language package.\n\n\nFor more information about individual Magento components, see:\n\n\n  \n    Modules\n  \n  \n    Themes\n  \n  \n    Language packages\n  \n\n\nRelated topics\n\nLogical view\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/AComponents.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-alayers-intro-html": {
      "title": "Architectural layers overview",
      "content": "Magento as layered software\n\nAt its highest level, Magento’s product architecture consists of the core product code plus optional modules. These optional modules enhance or replace the basic product code.\n\nIf you are substantially customizing the basic Magento product, module development will be your central focus. Modules organize code that supports a particular task or feature. A module can include code to change the look-and-feel of your storefront as well as its fundamental behavior.\n\nYour modules function with the core Magento product code, which is organized into layers. Understanding layered software pattern is essential for understanding basic Magento product organization.\n\nLayered software is a popular, widely discussed principle in software development. Many resources exist for this topic, but consider consulting Pattern-Oriented Software Architecture for a general discussion.\n\nAdvantages of layered application design\n\nLayered application design offers many advantages, but users of Magento will appreciate:\n\n\n  \n    Stringent separation of business logic from presentation logic simplifies the customization process. For example, you can alter your storefront appearance without affecting any of the backend business logic.\n  \n  \n    Clear organization of code predictably points extension developers to code location.\n  \n\n\nRelated topics\n\nArchitectural diagrams\n\nPresentation layer\n\nService layer\n\nDomain layer\n\nPersistence layer\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/ALayers_intro.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes-html": {
      "title": "Magento Commerce (Cloud) 2.0.x Release Notes",
      "content": "Release Notes provide important information about changes, fixes, and known issues in Magento Commerce (Cloud) releases.\n\nThe following Release Notes are available:\n\n\n  magento-cloud-configuration release 101.9.x Release Notes\n  magento-cloud-configuration release 101.8.x Release Notes\n  magento-cloud-configuration release 101.7.x Release Notes\n  magento-cloud-configuration release 101.6.x Release Notes\n  magento-cloud-configuration release 101.5.x Release Notes\n  magento-cloud-configuration release 101.4.x Release Notes\n  Magento Enterprise Cloud Edition version 2.1.4 and 2.0.12\n  Magento Enterprise Cloud Edition version 2.1.3 and 2.0.11\n  Magento Enterprise Cloud Edition version 2.1.2 and 2.0.10\n\n\nTest your upgrade locally\nTo test and implement your Magento Commerce (Cloud) upgrade, see Test a Magento upgrade.\n\nMagento Enterprise Edition Release Notes\nFor information about Magento Commerce, see Magento 2.1 Release Notes.\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes101-4-html": {
      "title": "magento-cloud-configuration release 101.4.x Release Notes",
      "content": "These Release Notes provide up-to-date information about changes, additions, and fixes to the Magento Commerce (Cloud) version 2.1.4, magento-cloud-configuration release 101.4.1, 101.4.4, and 101.4.5.\n\n101.4.5 changes\nIn magento-cloud-configuration release 101.4.5 on Magento Commerce (Cloud) 2.1.4, we provide the following improvements:\n\n\n\n  We’ve added support for the latest version of Redis and for PHP-Redis 3.1.3. For more information on this update, and for guidance on Redis troubleshooting on Magento Commerce (Cloud), see Redis troubleshooting.\n\n\n101.4.4 changes\n\nIn magento-cloud-configuration release 101.4.4 on Magento Commerce (Cloud) 2.1.4, we provide the following improvements:\n\n\n\n  Magento no longer automatically disables Google Analytics when deployed in the master branch.\n\n\n\n\n  HTML minification now works as expected on Cloud.\n\n\n101.4.1 changes\n\nIn magento-cloud-configuration release 101.4.1 on Magento Commerce (Cloud) 2.1.4, we provide the following improvements:\n\n\n  \n    Better way to manage the configuration so your integration, staging, and production systems stay in synchronization with each other more easily.\n\n    \n  \n  \n    Less time required to build and deploy your project by reducing the time required for static file deployment.\n  \n\n\nFor details, see Overview of configuration management.\n\nHow to get magento-cloud-configuration release 101.4.x\nMagento Commerce (Cloud) periodically provides patch releases in components like magento-cloud-configuration.\n\nTo test and implement your Magento Commerce (Cloud) upgrade, see Test a Magento upgrade.\n\nMagento Commerce Release Notes\nThis Magento Commerce (Cloud) release has no corresponding Magento Commerce release.\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes101.4.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes2-1-2-html": {
      "title": "Magento Commerce (Cloud) 2.1.2 and 2.0.10 Release Notes",
      "content": "Changes in this release\nWe made the following change in this release:\n\n\n  Added a new environment variable, UPDATE_URLS, which if set to enabled causes Magento base URLs in the database with to be replaced with Cloud project URLs. By default, UPDATE_URLS is set to enabled. This is useful for local development, where base URLs are set up for your local environment. When you deploy to a Cloud environment, we change the URLs so you can access your storefront and Magento Admin using project URLs. You should set this variable to disabled only in staging or production, where the base URLs can’t change.\n  Staging and Production environments in the UI for Pro projects. You can enter a ticket to have your project updated. For more information, see Add Staging and Production to Pro projects UI.\n\n\nFunctional fixes and enhancements\nWe made the following fixes in this release:\n\n\n  Improved the performance of static file deployment.\n  You can now upgrade to version 2.1.2 if you enabled static file signatures.\n  You no longer need a pub/front-static.php in your template.\n  We now back up env.php before disabling the Redis cache during deployment.\n  Patches are now applied in alphabetical order.\n  Staging and Production environments in the UI for Pro projects. Starting October 23, 2017, all projects created using the free 30-day trial or provisioned for new accounts includes Staging and Production environments in the Project Web Interface. Existing accounts created before October 23, 2017 can enter a ticket to be updated. For more information, see Add Staging and Production to Pro projects UI.\n\n\nKnown issues\nNote the following issue in this release:\n\nThe magento setup:install command (used for deployment) fails in either a staging or production environment if a Magento database already exists in the following scenario:\n\n\n  You installed or updated a component in your integration environment that modifies the database (especially if the component adds tables).\n  Your staging or production environment has an existing database.\n\n\nThis is a known issue with Magento core software; we’re actively working to address this issue. If you encounter this issue, contact Magento Enterprise Cloud Edition Support:\n\n\n  Log in to your Magento Cloud account.\n  Click Support &gt; Submit ticket from the top menu.\n  Follow the prompts to open an issue with Support.\n\n\n\n    This issue affects Staging and Production environments only. There are no issues in an Integration environment. For a discussion of these terms, see Architecture.\n\n\nMagento Commerce Release Notes\n\n  Magento Commerce 2.0.10 Release Notes\n  Magento Commerce 2.1.2 Release Notes\n\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes2.1.2.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes2-1-3-html": {
      "title": "Magento Commerce (Cloud) 2.1.3 and 2.0.11 Release Notes",
      "content": "These Release Notes provide up-to-date information about changes, additions, and fixes to the Magento Enterprise Cloud Edition for versions 2.1.3 and 2.0.11.\n\nChanges in this release\n\n\n  Staging and Production environments in the UI for Pro projects. You can enter a ticket to have your project updated. For more information, see Add Staging and Production to Pro projects UI.\n\n\nRequired update to .magento.app.yaml\nBefore you upgrade to version 2.1.3 or 2.0.11, you must add a rule to the web section of your .magento.app.yaml file. You must make the change in your local system, push it to your integration server, then, after upgrading, push the changes to staging and production.\n\nGet started\n\nTo get started: \n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n\n\nUpdate .magento.app.yaml\n\nTo update `.magento.app.yaml`: \n  Open &lt;Magento root dir&gt;/.magento.app.yaml in a text editor.\n  Locate the web: section, and the /static location in it.\n  \n    Add the following to the rules: clause:\n\n    ^/static/version\\d+/(?&lt;resource&gt;.*)$:\n     passthru: \"/static/$resource\"\n    \n\n    The /static location should look like this after the change:\n\n    \"/static\":\n    root: \"pub/static\"\n    allow: true\n    scripts: false\n    passthru: \"/front-static.php\"\n    rules:\n        ^/static/version\\d+/(?&lt;resource&gt;.*)$:\n            passthru: \"/static/$resource\"\n    \n  \n  Save your changes to .magento.app.yaml and exit the text editor.\n  You may now upgrade to version 2.1.3 or 2.0.11.\n\n\n\nUpdate your Elasticsearch configuration\nThis section discusses how to update your integration system to replace Solr with Elasticsearch. Currently, all Magento Enterprise Cloud Edition upgrades to 2.1.3 must perform these tasks.\n\nElasticsearch is supported by Magento Cloud Enterprise Edition 2.1.x only.\n\nIf you installed Magento Enterprise Cloud Edition 2.1.3 for the first time, you don’t need to do this because Elasticsearch is already the default search engine.\n\nTo use Elasticsearch on a staging or production system, open a Support ticket and request Elasticsearch.\n\n\n  After installing Elasticsearch, you must do a full index of your fulltext index.\nThis process can take a while if the index is large.\n\n  The search functionality will be unavailable until the process completes.\n\n\nTo use Elasticsearch, you must perform all the tasks discussed in this section.\n\nGet started\n\nTo get started: \n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n\n\nStep 1: Update .magento.app.yaml\n\nTo update .magento.app.yaml: \n  \n    Open .magento.app.yaml in a text editor.\n\n    It’s located in your Magento Enterprise Cloud Edition project root directory.\n  \n  In the relationships: section, delete solr: \"solr:solr\" if it exists.\n  \n    Add elasticsearch: \"elasticsearch:elasticsearch\"\n\n    A sample follows:\n\n    relationships:\n   database: \"mysql:mysql\"\n   elasticsearch: \"elasticsearch:elasticsearch\"\n   redis: \"redis:redis\"\n    \n  \n  Save your changes to .magento.app.yaml and exit the text editor.\n\n\n\nStep 2: Update .magento/services.yaml\n\nTo update .magento/services.yaml: \n  Open .magento/services.yaml in a text editor.\n  Remove the entire solr: section.\n  \n    Add a new elasticsearch: section with the following contents:\n\n    elasticsearch:\n   type: elasticsearch:&lt;version&gt;\n   disk: 1024\n    \n  \n  Save your changes to .magento/services.yaml and exit the text editor.\n\n\n\nStep 3: Push the changes and redeploy the environment\n\nTo push the changes: \n  \n    Add, commit, and push the changes:\n\n    git add -A &amp;&amp; git commit -m \"Add Elasticsearch\"\ngit push origin &lt;branch name&gt;\n    \n  \n  \n    Wait for the project to deploy.\n  \n\n\n\nStep 4: Get Elasticsearch connection information\nThis section discusses how to get connection information for Elasticsearch so you can configure the Magento application to use it as your search engine.\n\nTo get Elasticsearch connection information: \n  \n    Open an SSH tunnel to your integration environment.\n\n    magento-cloud environment:ssh\n    \n  \n  \n    Enter the following command to get Elasticsearch connection details:\n\n    echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | json_pp\n    \n\n    A sample follows:\n\n     \"elasticsearch\" : [\n   {\n      \"host\" : \"elasticsearch.internal\",\n      \"ip\" : \"250.0.97.96\",\n      \"scheme\" : \"http\",\n      \"port\" : \"9200\"\n   }\n],\n    \n  \n  Write down the connection information.\n  Enter exit to close the SSH tunnel.\n  \n    Log in to the Magento Admin as an administrator.\n\n    To view the Magento Admin connection details, enter the following commands:\n\n    magento-cloud environment:url\nmagento-cloud variable:list\n    \n\n    These two commands provide you with the environment’s base URL and Admin login information, respectively.\n\n    An example follows:\n\n    magento-cloud environment:url\nEnter a number to choose a URL\n   [0] https://mybranch-vyaprfq-dyrupdn6bw82h.us.magentosite.cloud/\n   [1] http://mybranch-vyaprfq-dyrupdn6bw82h.us.magentosite.cloud/\n   &gt; 1\nhttp://mybranch-vyaprfq-dyrupdn6bw82h.us.magentosite.cloud/\n\nmagento-cloud variable:list\n+----------------+---------------+-----------+------+\n| ID             | Value         | Inherited | JSON |\n+----------------+---------------+-----------+------+\n| ADMIN_PASSWORD | admin_A456    | Yes       | No   |\n| ADMIN_URL      | magento_A8v10 | Yes       | No   |\n| ADMIN_USERNAME | meister_x2U8  | Yes       | No   |\n+----------------+---------------+-----------+------+\n    \n  \n  Continue with the next section.\n\n\n\nStep 5: Configure the Magento application to use Elasticsearch\n\nConfigure Magento using the instructions in the Magento configuration for Elasticsearch guide.\n\nFixed issue\n\nNote the following issue in this release:\n\n\n  The magento setup:install command (used for deployment) succeeds in either a staging or production system if a Magento database already exists.\n\n\nMagento Commerce Release Notes\n\n  Magento Commerce 2.0.11 Release Notes\n  Magento Commerce 2.1.3 Release Notes\n\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes2.1.3.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes2-1-4-html": {
      "title": "Magento Commerce (Cloud) 2.1.4 and 2.0.12 Release Notes",
      "content": "These Release Notes provide up-to-date information about changes, additions, and fixes to the Magento Enterprise Cloud Edition for versions 2.1.4 and 2.0.12.\n\nChanges in this release\n\n  Removed the MDVA-913 patch because the issue is now fixed in Magento Enterprise Edition 2.1.4.\n  Staging and Production environments in the UI for Pro projects. You can enter a ticket to have your project updated. For more information, see Add Staging and Production to Pro projects UI.\n\n\nFixes in this release\n\n\n  We fixed an issue that was causing the wrong products to be indexed in 2.1.4. Previously, the mview.xml configuration used row_id  instead of entity_id when collecting information from changelogs.\n\n\n\n\n  We fixed an issue that was preventing merchants from using AMQP and search services. Previously, the deployment process was overwriting these settings in the env.php file if the QUEUE_CONFIGURATION and/or SEARCH_CONFIGURATION environment variables were not set in 2.1.4.\n\n\n\n\n  The RabbitMQ configuration process now obtains all required parameters automatically in 2.1.4.\n\n\n\n\n  AMQP settings in the app/etc/env.php file are no longer empty after enabling the RabbitMQ service in 2.1.4.\n\n\n\n\n  \n    We fixed an issue with Elasticsearch configuration settings on deployment in 2.1.4.\n  \n  \n    When you disable a module and deploy it to the remote Cloud server, the module stays disabled.\n  \n  \n    You can now successfully upgrade from Magento Enterprise Cloud Edition 2.0.x to 2.1.x.\n  \n\n\nMagento Commerce Release Notes\n\n  Magento Commerce 2.0.12 Release Notes\n  Magento Commerce 2.1.4 Release Notes\n\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes2.1.4.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes2-1-5-html": {
      "title": "Magento Commerce (Cloud) 2.1.5 and 2.0.13 Release Notes",
      "content": "These Release Notes provide up-to-date information about changes, additions, and fixes to the Magento Enterprise Cloud Edition for versions 2.1.5 and 2.0.13.\n\nChanges in this release\n\n\n  This release updates the copyright date in every file. It does not contain any functional changes or security improvements. Isolating these changes in a single release is intended to simplify future updates and developer workflow.\n  Staging and Production environments in the UI for Pro projects. You can enter a ticket to have your project updated. For more information, see Add Staging and Production to Pro projects UI.\n\n\nFixes in this release\n\n\n  We fixed an issue that was causing the wrong products to be indexed in 2.1.5. Previously, the mview.xml configuration used row_id  instead of entity_id when collecting information from changelogs.\n\n\n\n\n  We fixed an issue that was preventing merchants from using AMQP and search services. Previously, the deployment process was overwriting these settings in the env.php file if the QUEUE_CONFIGURATION and/or SEARCH_CONFIGURATION environment variables were not set in 2.1.5.\n\n\n\n\n  The RabbitMQ configuration process now obtains all required parameters automatically in 2.1.5.\n\n\n\n\n  AMQP settings in the app/etc/env.php file are no longer empty after enabling the RabbitMQ service in 2.1.5.\n\n\n\n\n  We fixed an issue with Elasticsearch configuration settings on deployment in 2.1.5.\n\n\nMagento Commerce Release Notes\n\n  Magento Commerce 2.0.13 Release Notes\n  Magento Commerce 2.1.5 Release Notes\n\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes2.1.5.html"
    }
    ,
  
    "guides-v2-0-cloud-release-notes-cloudreleasenotes2-1-6-2-1-11-html": {
      "title": "Magento Commerce (Cloud) 2.1.6 through 2.1.11 Release Notes",
      "content": "These Release Notes provide up-to-date information about changes, additions, and fixes to the Magento Commerce (Cloud) for versions 2.1.6 through 2.1.11.\n\nFixes in this release\n\n\n  We removed var/view_preprocessed symlinking to fix an issue that was causing JavaScript minification conflicts in 2.1.9 through 2.1.11.\n\n\n\n\n  We fixed an issue that was causing the wrong products to be indexed. Previously, the mview.xml configuration used row_id  instead of entity_id when collecting information from changelogs.\n\n\n\n\n  We fixed an issue that was preventing merchants from using AMQP and search services. Previously, the deployment process was overwriting these settings in the env.php file if the QUEUE_CONFIGURATION and/or SEARCH_CONFIGURATION environment variables were not set.\n\n\n\n\n  We fixed an issue that was causing inordinately long down times during deployment in 2.1.9 through 2.1.11.\n\n\n\n\n  We fixed an issue that was causing exceptions when running autoload.php in 2.1.10 through 2.1.11.\n\n\n\n\n  The RabbitMQ configuration process now obtains all required parameters automatically.\n\n\n\n\n  AMQP settings in the app/etc/env.php file are no longer empty after enabling the RabbitMQ service.\n\n\n\n\n  We fixed an issue with Elasticsearch configuration settings on deployment.\n\n\n\n\n  We fixed an issue causing errors during the static content generation step of deployment on Production environments.\n\n",
      "url": "/guides/v2.0/cloud/release-notes/CloudReleaseNotes2.1.6-2.1.11.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-contribute-edg-html": {
      "title": "Contribute to Magento DevDocs",
      "content": "We encourage our users to add or correct Magento DevDoc content. Write a full topic, add a new section to an existing topic, or even just add a few sentences about something you know on an existing topic. Don’t worry about grammar or form; we can fix that for you!\n\nMagento Devdocs site content is written in Markdown, and is kept in Github. If you know how to use Github, you can contribute to our docs.\n\nReview the Table of Contents in the left pane of the Guide, and determine which topic areas you can contribute to, or any that might be missing.\n\nTo add to Magento Docs:\n\n\n  edit your local version of an existing file\n  use the generic template and write a brand new topic, we will find the right home for it in the appropriate Guide.\n  use an existing, empty template to write about a topic that we know we need, but haven’t yet gotten around to writing\n  Create a Pull Request to have your contribution reviewed by the DevDocs team.\n\n\nYour contributions to Magento Docs informed by your experience with using Magento are highly valued and appreciated. Let us know if you have any questions!\n\n",
      "url": "/guides/v2.0/extension-dev-guide/Contribute_edg.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-logicalview-intro-html": {
      "title": "Logical view overview",
      "content": "This document is not ready yet, but we are working on it.\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/LogicalView_intro.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-10ce-html": {
      "title": "Magento Open Source 2.0.10 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.10. This release includes multiple security and functional enhancements as well as enhancements to the Sales API. New Sales API methods allow third party solutions, such as shipping or ERP applications, to use APIs when they create an invoice or shipment.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nHighlights\n\n\n  \n    Patch 2.0.10 is now compatible with MySQL 5.7.\n  \n  \n    Patch 2.0.10 introduces two new web APIs (or service contracts) for the Sales module that incorporate functionality into the Sales API that is currently available in the Admin interface. After you install this patch, you’ll be able to use the Sales API ShipOrder and InvoiceOrder methods to capture payment and ship product. For more information on these API enhancements, see the Sales API discussion in the Module Reference Guide.\n  \n\n\nWhy are we adding new APIs in a patch release?\n\nThese new interfaces will not break any existing customizations or extensions.   See Alan Kent’s blog about Magento for more information about these features and Magento’s use of semantic versioning.\n\nSecurity enhancements\n\nThis release includes  enhancements to improve the security of your Magento software. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\nGeneral security\n\n\n\n  You can no longer delete a currently logged-in user.\n\n\n\n\n  Fixed issue that occurred during update with disclosure of the application’s internal path.\n\n\n\n\n  Fixed issue that occurred during setup with disclosure of the application’s internal path.\n\n\n\n\n  Sessions now expire as expected after logout.\n\n\n\n\n  Fixed issue with using the Magento Enterprise Edition invitations feature to insert malicious JavaScript and subsequently execute it in the Admin context.\n\n\n\n\n  You can no longer change or fake a product price from the Magento storefront and then complete an order with that fake price.\n\n\n\n\n  A user with lesser privileges can no longer use a JSON call to force an Admin user to add his private or public key.\n\n\n\n\n  Fixed remote code execution issue in checkout.\n\n\n\n\n  Upgrade now places stores in maintenance mode as expected. (GITHUB-3191)\n\n\n\n\n  Resolved issue with potential SQL injection through the use of the ordering or grouping parameters.\n\n\n\n\n  Fixed issue with retrieving potentially sensitive information through the use of backend media.\n\n\nDenial-of-service (DoS) attacks and brute force attacks\n\n\n\n  The Guest order view protection code is no longer vulnerable to brute force attacks.\n\n\n\n\n  Fixed vulnerability to DoS attacks by full page cache poisoning.\n\n\nCross-Site Request Forgery  (CSRF)\n\n\n\n  Removed vulnerability in cart checkout experience by enhancing server-side CSRF validation.\n\n\n\n\n  Resolved a potential  vulnerability in which customer addresses could be deleted. You can no longer deceive a user into deleting his store address book entries.\n\n\nCross-site scripting  (XSS)\n\n\n\n  Fixed issue with XSS reflection in the loading section of REST requests.\n\n\n\n\n  Fixed issue with potential storage of malicious XSS code in the body of an email template. (A malicious user could use this this script to steal user information and cookies, or to bypass cross-site request forgery protection.)\n\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nSales API enhancements\n\n\n\n  \n    We’ve added the ability to change the status of a shipment through the web API.  The new ShipOrder interface support tasks you can already do through the Admin dashboard, including the ability to:\n\n    \n      \n        create a shipment document (full or partial)\n      \n      \n        add details about shipped items into an order\n      \n      \n        change status and state of an order according to performed actions\n      \n      \n        notify customer about new shipment document\n      \n    \n  \n\n\n\n\n  \n    We’ve added the ability to change the status of an invoice through the web API.  The new InvoiceOrder interface supports tasks you can already do through the Admin dashboard, including the ability to:\n\n    \n      \n        create an invoice document (full or partial)\n      \n      \n        capture money placed with order payment\n      \n      \n        notify a customer about document creation\n      \n      \n        change order status and state\n      \n    \n  \n\n\nFor more information on these API enhancements, see Magento Sales API.\n\nPerformance\n\n\n\n  We’ve improved the load speed of the configurable product form.\n\n\n\n\n  We’ve improved the load speed of the review step for the wizard used to create a configurable product.\n\n\nTracking and shipping\n\n\n\n  Changing the city field of an order now affects the shipping rate as expected. Previously, the shipping rate was not updated when you changed the city on your order form.\n\n\n\n\n  Magento now returns UPS shipping rates for Puerto Rico.\n\n\n\n\n  Magento no longer throws an exception if you enter an invalid FedEx shipment tracking number.\n\n\nCart and checkout\n\n\n\n  Magento now updates the mini cart as expected when you reorder an item. Previously, Magento added the reordered items to the shopping cart, but the mini cart did not update its item count. (GITHUB-6121)\n\n\n\n\n  You can now use an alternative Merchant Account ID when using Braintree as a payment method. (GITHUB-5910)\n\n\nGeneral fixes\n\n\n\n  Magento now returns you to the Admin dashboard after you’ve successfully changed your Admin password. Previously, Magento prompted you to change your password even after you just successfully changed it. (GITHUB-4331)\n\n\n\n\n  You can now update multiselect attribute values for multiple products from the server side.  (GITHUB-5459)\n\n\n\n\n  State/Province field is now displayed as required on the Add New Address page. (GITHUB-5279)\n\n\n\n\n  Maestro credit card now passes validation.\n\n\n\n\n  The cursor now appears as expected when you edit a product description.\n\n\n\n\n  Visual swatches are now displayed when in search results.\n\n\n\n\n  GiftRegistry *.less file is not properly packaged in the composer package\n\n\n\n\n  Delete paging functionality for configurable product variations.\n\n\n\n\n  The order comment timestamp now correctly reflects the time that the comment was submitted, not when the page was last refreshed. (GITHUB-5719), (GITHUB-5890)\n\n\n\n\nKnown issues\n\n\n  Issue:  Logo Email for transactional emails can not be uploaded successfully (GITHUB-6275). Workaround: Create a header template and reference the image location absolutely.\n\n\n\n\n\n  Issue: Cannot save a custom transactional email logo. Workaround: None.\n\n\n\n\n\n  Issue: The scope selector on the Product page does not display all websites associated with a restricted user. Workaround: None.\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.10CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-10ee-html": {
      "title": "Magento Commerce 2.0.10 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.10. This release includes multiple security and functional enhancements as well as enhancements to the Sales API. New Sales API methods allow third party solutions, such as shipping or ERP applications, to use APIs when they create an invoice or shipment.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nHighlights\n\n\n  \n    Patch 2.0.10 is now compatible with MySQL 5.7.\n  \n  \n    Patch 2.0.10 introduces two new web APIs (or service contracts) for the Sales module that incorporate functionality into the Sales API that is currently available in the Admin interface. After you install this patch, you’ll be able to use the Sales API ShipOrder and InvoiceOrder methods to capture payment and ship product. For more information on these API enhancements, see the Sales API discussion in the Module Reference Guide.\n  \n\n\nWhy are we adding new APIs in a patch release?\n\nThese new interfaces will not break any existing customizations or extensions.   See Alan Kent’s blog about Magento for more information about these features and Magento’s use of semantic versioning.\n\nSecurity enhancements\n\nThis release includes enhancements to improve the security of your Magento software. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\nGeneral security\n\n\n\n  You can no longer delete a currently logged-in user.\n\n\n\n\n  Fixed issue that occurred during update with disclosure of the application’s internal path.\n\n\n\n\n  Fixed issue that occurred during setup with disclosure of the application’s internal path.\n\n\n\n\n  Sessions now expire as expected after logout.\n\n\n\n\n  Fixed issue with using the Magento Enterprise Edition invitations feature to insert malicious JavaScript and subsequently execute it in the Admin context.\n\n\n\n\n  You can no longer change or fake a product price from the Magento storefront and then complete an order with that fake price.\n\n\n\n\n  A user with lesser privileges can no longer use a JSON call to force an Admin user to add his private or public key.\n\n\n\n\n  Fixed remote code execution issue in checkout.\n\n\n\n\n  Upgrade now places stores in maintenance mode as expected. (GITHUB-3191)\n\n\n\n\n  Resolved issue with potential SQL injection through the use of the ordering or grouping parameters.\n\n\n\n\n  Fixed issue with retrieving potentially sensitive information through the use of backend media.\n\n\nDenial-of-service (DoS) attacks and brute force attacks\n\n\n\n  The Guest order view protection code is no longer vulnerable to brute force attacks.\n\n\n\n\n  Fixed vulnerability to DoS attacks by full page cache poisoning.\n\n\nCross-Site Request Forgery (CSRF)\n\n\n\n  Removed vulnerability in cart checkout experience by enhancing server-side CSRF validation.\n\n\n\n\n  Resolved a potential  vulnerability in which customer addresses could be deleted. You can no longer deceive a user into deleting his store address book entries.\n\n\nCross-site scripting (XSS)\n\n\n\n  Fixed issue with XSS reflection in the loading section of REST requests.\n\n\n\n\n  Fixed issue with potential storage of malicious XSS code in the body of an email template. (A malicious user could use this this script to steal user information and cookies, or to bypass cross-site request forgery protection.)\n\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nSales API enhancements\n\n\n\n  \n    We’ve added the ability to change the status of a shipment through the web API.  The new ShipOrder interface support tasks you can already do through the Admin dashboard, including the ability to:\n\n    \n      \n        create a shipment document (full or partial)\n      \n      \n        add details about shipped items into an order\n      \n      \n        change status and state of an order according to performed actions\n      \n      \n        notify customer about new shipment document\n      \n    \n  \n\n\n\n\n  \n    We’ve added the ability to change the status of an invoice through the web API.  The new InvoiceOrder interface supports tasks you can already do through the Admin dashboard, including the ability to:\n\n    \n      \n        create an invoice document (full or partial)\n      \n      \n        capture money placed with order payment\n      \n      \n        notify a customer about document creation\n      \n      \n        change order status and state\n      \n    \n  \n\n\nFor more information on these API enhancements, see Magento Sales API.\n\nPerformance\n\n\n\n  We’ve improved the load speed of the configurable product form.\n\n\n\n\n  We’ve improved the load speed of the review step for the wizard used to create a configurable product.\n\n\nTracking and shipping\n\n\n\n  Changing the city field of an order now affects the shipping rate as expected. Previously, the shipping rate was not updated when you changed the city on your order form.\n\n\n\n\n  Magento now returns UPS shipping rates for Puerto Rico.\n\n\n\n\n  Magento no longer throws an exception if you enter an invalid FedEx shipment tracking number.\n\n\nCart and checkout\n\n\n\n  Magento now updates the mini cart as expected when you reorder an item. Previously, Magento added the reordered items to the shopping cart, but the mini cart did not update its item count. (GITHUB-6121)\n\n\n\n\n  You can now use an alternative Merchant Account ID when using Braintree as a payment method. (GITHUB-5910)\n\n\nGeneral fixes\n\n\n\n  Magento now returns you to the Admin dashboard after you’ve successfully changed your Admin password. Previously, Magento prompted you to change your password even after you just successfully changed it. (GITHUB-4331)\n\n\n\n\n  You can now update multiselect attribute values for multiple products from the server side.  (GITHUB-5459)\n\n\n\n\n  State/Province field is now displayed as required on the Add New Address page. (GITHUB-5279)\n\n\n\n\n  Maestro credit card now passes validation.\n\n\n\n\n  The cursor now appears as expected when you edit a product description.\n\n\n\n\n  Visual swatches are now displayed when in search results.\n\n\n\n\n  GiftRegistry *.less file is not properly packaged in the composer package\n\n\n\n\n  Delete paging functionality for configurable product variations.\n\n\n\n\n  The order comment timestamp now correctly reflects the time that the comment was submitted, not when the page was last refreshed. (GITHUB-5719), (GITHUB-5890)\n\n\n\n\nKnown issues\n\n\n  Issue:  Logo Email for transactional emails can not be uploaded successfully (GITHUB-6275). Workaround: Create a header template and reference the image location absolutely.\n\n\n\n\n\n  Issue: Cannot save a custom transactional email logo. Workaround: None.\n\n\n\n\n\n  Issue: The scope selector on the Product page does not display all websites associated with a restricted user. Workaround: None.\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.10EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-11ce-html": {
      "title": "Magento Open Source 2.0.11 Release Notes",
      "content": "We are pleased to present Magento Open Source Edition 2.0.11.\n\n\n  We republished these Release Notes with clarifications on December 16th, 2016.\n\n\nHighlights\nMagento 2.0.11 contains more than 70 bug fixes and enhancements, including these highlights:\n\n\n  \n    Management of configurable products with many variations in the Magento Admin interface without degrading performance.\n  \n  \n    Successful import or export CSV files with data that contains special symbols (that is, symbols that are not escaped during file processing, such as , or |).\n  \n  \n    The Sales module provides two new web API endpoints that allow you to process refunds from an order or invoice. Previously, these actions could only be performed from Admin. After you install this patch, you can:\n\n    \n      \n        Create a credit memo (complete or partial) for a particular order or invoice.\n      \n      \n        Add details about refunded items to an order or invoice.\n      \n      \n        Update the status and state of an order or invoice after actions are performed.\n      \n      \n        Notify a customer about refunded items or order or invoice.\n      \n    \n\n    REST integrators can use POST /V1/invoice/{invoiceId}/refund and /V1/order/{orderId}/refund to perform these actions. SOAP integrators can call salesRefundInvoiceV1 and salesRefundOrderV1.\n  \n\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nCart and checkout\n\n\n\n  You can now reload a page during checkout without unintentionally changing shipping information.\n\n\n\n\n  Magento no longer displays the spinning loader widget after you click the Place Order button. Previously, Magento displayed the spinning loader, even after you’d successfully placed an order.\n\n\n\n\n  The number of items in the minicart is now updated correctly when you run Magento in mixed HTTP/HTTPS mode. (GITHUB-6487)\n\n\n\n\n  Refreshing your browser page while on the Review and Payments page of the checkout process no longer clears information from form fields. Previously, Magento cleared information from the Ship to field if you refreshed your browser page during this process.\n\n\n\n\n  We’ve resolved an issue that prevented you from adding more than one product from the wishlist to your shopping cart. (GITHUB-5282)\n\n\n\n\n  Magento now displays the product add validation message (“Product was added to the cart”) only after you have successfully added a product to your cart.\n\n\n\n\n  You can now reload a page during checkout without unintentionally changing shipping information.\n\n\n\n\n  You can now successfully reorder a product. Previously, if you tried to reorder a product, the checkout page did not load, and Magento displayed this error: “Uncaught TypeError: Cannot read property ‘length’ of undefined”.\n\n\n\n\n  A cart rule with a coupon code no longer overrides a cart rule without a coupon code when multiple cart rules are applied. Previously, when you created two cart rules and applied them to a cart, the rule with a coupon was applied, but the second rule was not. (GITHUB-6294)\n\n\nConfigurable products\n\n\n\n  We’ve improved the performance of the review step to create a configurable product.\n\n\n\n\n  You can now successf==ully reorder a configurable product. Previously, if you created an order that includes multiple products, one of which is a reorder, options for these products were confused. (GITHUB-3654), (GITHUB-3820)\n\n\n\n\n  You can now successfully edit configuration options when creating a configurable product. Previously, the Edit Configuration button did not work as expected.\n\n\n\n\n  You can now successfully add a simple child product to a configurable product with advanced configurations.\n\n\n\n\n  We no longer apply one simple product’s special price to another simple product of the same configurable product. Previously, when you set both a regular and a special price for a child product, all products associated with the same configurable product displayed a regular and special price, even when these amounts were the same. (GITHUB-4442), (GITHUB-5097), (GITHUB-6645)\n\n\n\n\n  Magento no longer displays the as low as price for a configurable product’s simple options if the options are disabled.\n\n\n\n\n  You can now edit a single product attribute and apply it to multiple configurable products. Previously, when you tried to bulk-edit an attribute on a collection of filtered, configurable products, Magento would complete the process without incorporating your edits, then incorrectly tell you that the products had been edited.\n\n\n\n\n  A price change to a custom option affects only that option. Previously, changing the price of a custom option also affected the price of related products. (GITHUB-4588)\n\n\n\n\n  Configurable product option price is displayed correctly per website.\n\n\n\n\n  You can now successfully disable the lowest price of a configurable product and its associated simple products. Previously, Magento displayed a configurable product’s lowest price even after you disabled that price. (GITHUB-4419)\n\n\nEmail\n\n\n\n  The Send Welcome Email From field now accurately identifies the store that the customer is associated with.\n\n\n\n\n  You can now save a gift message when ordering a gift while logged in as a guest. Previously, Magento did not save this information, and you encountered an error. (GITHUB-3804)\n\n\n\n\n  The Disable Email Communication option of Store &gt; Configuration &gt; Advanced &gt; System &gt; Email Sending Settings now works as expected. Previously, Magento sent email even if you disabled this feature. (GITHUB-5988)\n\n\nGeneral fixes\n\n\n\n  Magento now creates a URL rewrite for the new URL key of a product as expected. Previously, after you saved a change to the URL key of a product by selecting the Create Permanent Redirect for old URL option, Magento did not rewrite the old URL to the new URL.\n\n\n\n\n  The Product page now displays swatches based on the color swatch attribute. Previously, the Product page did not display swatches.\n\n\n\n\n  Magento no longer displays a “Wrong request parameters” error when you try to assign products to a category at the store view level. Previously, you encountered a levelWrong request parameters error when you assigned products to a category.\n\n\n\n\n  The Magento Framework now makes its dependencies explicit in the composer.json file. (GITHUB-6442)\n\n\n\n\n  Magento now decrements stock as expected in a multi-website environment.\n\n\n\n\n  The search field now works as expected on iOS devices using the Safari browser. Previously on these devices, the search box closed randomly.\n\n\n\n\n  We’ve removed the duplicate PHP settings from the sample web server configuration files.\n\n\n\n\n  The Compare Products page now works as expected. Previously, you were erroneously redirected to another page when you removed an item from the Compare Products sidebar.\n\n\n\n\n  You can now return to the Magento Admin from the Web Setup Wizard (System &gt; Tools &gt; Web Setup Wizard). Previously, you had to log back in to the Magento Admin after you ran the Web Setup Wizard.\n\n\n\n\n  Magento no longer redirects users to the Checkout page after login. Now, if you set Redirect Customer to Account Dashboard after Logging in  value to Yes, users will be redirected to the Account Dashboard page. If you set this value to No, then users will stay on the home page after login.\n\n\n\n\n  Customers can now continue shopping after selecting an unavailable bundle product. Previously, if a customer selected a bundle product that was no longer available, he would encounter a fatal error.\n\n\n\n\n  The Magento storefront now reflects changes in the swatch attribute properties as expected.\n\n\n\n\n  The Sales Order object can now contain more than one extension_attribute.  (GITHUB-3967)\n\n\n\n\n  We’ve removed the sample password from the Setup wizard.\n\n\n\n\n  Customers are now redirected as expected to the destination URL identified in the Redirect to My Account After Log-in setting. Previously, customers were redirected to the My Account page, no matter which URL you identified in this setting.\n\n\n\n\n  Lengthy Order Status tables are now paginated as expected.\n\n\n\n\n  We’ve fixed a problem with custom zip code masks in previous versions of Magento. (GITHUB-4131)\n\n\n\n\n  You can now upload changes to the robots.txt file from the Magento Admin.\n\n\n\n\n  We’ve fixed an error with an unexpected empty default website during website creation.\n\n\n\n\n  The Need to Confirm option on Stores &gt; Configuration &gt; Customers &gt; Newsletter now requires a customer to confirm his subsciption.\n\n\nImages\n\n\n\n  We’ve added a new way to import images: You can now successfully import images when you set  your document root to  &lt;your Magento install dir&gt;/pub. Previously, you needed to set document root to /magento to import images. Both ways of importing now work. (GITHUB-5359)\n\n\n\n\n  You can now preview uploaded images.\n\n\nImport/Export\n\n\n\n  You can now export a bundle product that contains a custom text attribute. Previously, if you tried to export this type of bundle product, the export failed, and Magento displayed the message, “There is no data for the export”.\n\n\n\n\n  You can now successfully import multiselect attributes that contain special characters or delimiters. Previously, when you tried to import attributes that contained delimiters, data validation (and the import) failed.\n\n\n\n\n  Importing customer data no longer sets the Gender attribute to a blank field.\n\n\n\n\n  You can now import negative quantities.\n\n\n\n\n  Magento now prompts you to log in before attempting to upgrade. Previously, it was not clear that you needed to log in first before initiating an upgrade.  (GITHUB-3059)\n\n\n\n\n  Magento no longer randomly displays the following error during import after a file passes the data check: “Maximum error count has been reached or system error is occurred!”.\n\n\n\n\n  We’ve fixed an issue with the representation of date and time zones of items in the product catalog during import or export. Previously, Magento converted all data into the default format (UTC-8), including values that you set to be displayed using another standard.\n\n\nInstallation, upgrade, and deployment\n\n\n\n  The Component Manager now shows a list of all available versions of an extension for installation. Previously, the Web Setup component manager showed only the latest version of the extension.\n\n\n\n\n  During upgrade, we now check directory permissions recursively except for the var/session directory. We skip that directory because the web server usually owns those files.\n\n\n\n\n  Magento 2.0.x now supports the use of table prefixing during installation. Previously, when you used table prefixing, your Magento installation failed with this error: “Duplicate key on write or update”. (GITHUB-5688)\n\n\n\n\n  We’ve fixed an issue with how information in the sales_order_item attribute is handled after upgrade.\n\n\nOrders\n\n\n\n  \n    We’ve added PHP interfaces that add the ability to change the status of a shipment. The new Creditmemo interface supports tasks you can already do through the Magento Admin, including the ability to:\n\n    \n      \n        support returning multiple units of a configurable product. Previously, when you tried to refund an order, you could refund only one unit of a configurable product, not the amount in the original order.\n      \n      \n        return the product to stock\n      \n      \n        change order status after a credit memo has been created.\n      \n    \n  \n\n\n\n\n  You can now reorder an item that is currently invoiced or being shipped. Previously, if you tried to reorder, Magento did not add the item to your shopping cart, and displayed an error. (GITHUB-6278)\n\n\n\n\n  We’ve removed redundancy in the orders comment history display. Previously, Magento would display the time at which the customer entered the comment twice.\n\n\nPayment methods\n\n\n\n  You can now successfully place an order using the Payflow Pro payment method.\n\n\n\n\n  We’ve fixed an issue with how Magento captures and validates payment information. Previously, after you entered valid credit card information, Magento prompted you to re-enter the information, and displayed this error: “Please  enter a valid credit card expiration date”. (GITHUB-4741)\n\n\n\n\n  Magento now saves credit card information as expected after a customer checks out using a Braintree credit card with Vault.\n\n\n\n\n  PayPal Payflow Pro now uses the currency you have specified in your store. Previously, under some conditions, PayPal Payflow Pro defaulted to calculating charges in U.S. dollars, no matter which currency you specified.\n\n\nPerformance\n\n\n\n  \n    We’ve improved the performance of these tasks:\n\n    \n      \n        Loading the Configurable Product page\n      \n      \n        Creating many (2500 - 5000) product variations\n      \n      \n        Calculating batch sizes while indexing categories\n      \n      \n        Compiling. (We’ve optimized compiler performance to run faster.)\n      \n    \n  \n\n\n\n\n  We’ve also streamlined the JavaScript bundling process, which reduces the size of bundled files. (GITHUB-4506)\n\n\nScope\n\n\n\n  You can now successfully assign products to a category on the store view level. Previously, Magento displayed this error when you tried to assign products to a category: “Wrong request parameters”.\n\n\n\n\n  A restricted user can now change the attributes (either at the store view or website level) attributes that are defined in his scope. Previously, Admin users with access to only one website could not edit a product, no matter how their scope was set.\n\n\n* We’ve fixed an issue with the scope selector on the Catalog page. Previously, Magento did not display the scope selector when using Mass Actions, but now you can specify the scope of the action that will be applied to the products when using Mass Actions.\n\nStatic file processing\n\n\n\n  Static asset signing now works under nginx. For more information, see Using Static File Signatures.\n\n\nKnown issues\n\n\n  Issue: When editing a product, you cannot edit customizable options on the store view level. That is, a change to one option affects products on all stores. Also, the ‘Use Default Value’ checkbox for the option title does not work. Unchecking this box and then changing the title affects all store views.\n\n\n\n\n  \n    Issue: When you add a new product and re-index using Varnish, Magento does not display the product on the frontend, even after you purge the cache and re-index. Workaround: Purge the Varnish cache using the Varnish admin CLI.\n  \n  \n    Issue: A Paypal SSL CURL communication error can occur if your Magento installation is not running the minimal required TLS version. Older versions of Magento might not run the minimal version, which is TLS 1.2. If your version doesn’t, then Magento displays this error: curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s). Workaround: Upgrade CURL to a minimum version of 7.39.0.\n  \n  \n    Issue: Mass actions can be slow and consume excessive memory unless you increase the default PHP settings for your installation. These default settings for your Magento installation typically support the processing of about 1,000 variables. If you try a mass action that involves 1000 or more variables, the mass action might fail. Workaround: You can reduce processing time and performance by increasing your default PHP memory settings to 1 GB.\n  \n  \n    Issue: Gallery doesn’t show all images added to configurable options.\n  \n  \n    Issue: The Add Products Manually link is not available after removing all variations. Workaround: Retain at least one variation or use the Choose a different product option option.\n  \n  \n    Issue: When you log in to run a system upgrade, Magento displays this error: Encountered end of file.  Workaround: Upgrade your SSL protocol to a minimum of TLS 1.0.\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.11CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-11ee-html": {
      "title": "Magento Commerce 2.0.11 Release Notes",
      "content": "We are pleased to present Magento Commerce 2.0.11. This release includes many functional fixes and enhancements.\n\n\n  We republished these Release Notes with clarifications on December 16th, 2016.\n\n\nHighlights\nMagento 2.0.11 contains more than 70 bug fixes and enhancements, including these highlights:\n\n\n  \n    Management of configurable products with many variations in the Admin interface without degrading performance.\n  \n  \n    Upgrade to Magento 2.0.11 without issue when using multiple master databases for checkout, order management, and product data.\n  \n  \n    Successful import or export CSV files with data that contains special symbols (that is, symbols that are not escaped during file processing, such as ,&lt;/&gt; or |).\n  \n  \n    The Sales module provides two new web API endpoints that allow you to process refunds from an order or invoice. Previously, these actions could only be performed from Admin. After you install this patch, you can:\n\n    \n      \n        Create a credit memo (complete or partial) for a particular order or invoice.\n      \n      \n        Add details about refunded items to an order or invoice.\n      \n      \n        Update the status and state of an order or invoice after actions are performed.\n      \n      \n        Notify a customer about refunded items or order or invoice.\n      \n    \n\n    REST integrators can use POST /V1/invoice/{invoiceId}/refund and /V1/order/{orderId}/refund to perform these actions. SOAP integrators can call salesRefundInvoiceV1 and salesRefundOrderV1.\n  \n\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nCart and checkout\n\n\n\n  You can now reload a page during checkout without unintentionally changing shipping information.\n\n\n\n\n  Magento no longer displays the spinning loader widget after you click the Place Order button. Previously, Magento displayed the spinning loader, even after you’d successfully placed an order.\n\n\n\n\n  Magento now indicates that a product is out-of-stock if you disable it. Previously, Magento did not display the name of an out-of-stock product at all.\n\n\n\n\n  The number of items in the minicart is now updated correctly when you run Magento in mixed HTTP/HTTPS mode. (GITHUB-6487)\n\n\n\n\n  Refreshing your browser page while on the Review and Payments page of the checkout process no longer clears information from form fields. Previously, Magento cleared information from the Ship to field if you refreshed your browser page during this process.\n\n\n\n\n  We’ve resolved an issue that prevented you from adding more than one product from the wishlist to your shopping cart. (GITHUB-5282)\n\n\n\n\n  Magento now displays the product add validation message (“Product was added to the cart”) only after you’ve successfully added a product to your cart.\n\n\n\n\n  You can now reload a page during checkout without unintentionally changing shipping information.\n\n\n\n\n  You can now successfully reorder a product. Previously, if you tried to reorder a product, the checkout page would not load, and Magento would display this error: “Uncaught TypeError: Cannot read property ‘length’ of undefined”.\n\n\n\n\n  A cart rule with a coupon code no longer overrides a cart rule without a coupon code when multiple cart rules are applied. Previously, when you created two cart rules and applied them to a cart, the rule with a coupon was applied, but the second rule was not. (GITHUB-6294)\n\n\nConfigurable products\n\n\n\n  We’ve improved the performance of the review step to create a configurable product.\n\n\n\n\n  You can now successfully reorder a configurable product. Previously, if you created an order that includes multiple products, one of which is a reorder, options for these products were confused. (GITHUB-3654), (GITHUB-3820)\n\n\n\n\n  You can now successfully edit configuration options when creating a configurable product. Previously, the Edit Configuration button did not work as expected.\n\n\n\n\n  You can now successfully add a simple child product to a configurable product with advanced configurations.\n\n\n\n\n  We no longer apply one simple product’s special price to another simple product of the same configurable product. Previously, when you set both a regular and a special price for a child product, all products associated with the same configurable product displayed a regular and special price, even when these amounts were the same. (GITHUB-4442), (GITHUB-5097), (GITHUB-6645)\n\n\n\n\n  Magento no longer displays the as low as price for a configurable product’s simple options if the options are disabled.\n\n\n\n\n  You can now edit a single product attribute and apply it to multiple configurable products. Previously, when you tried to bulk-edit an attribute on a collection of filtered, configurable products, Magento would complete the process without incorporating your edits, then incorrectly tell you that the products had been edited.\n\n\n\n\n  A price change to a custom option affects only that option. Previously, changing the price of a custom option also affected the price of related products. (GITHUB-4588)\n\n\n\n\n  Configurable product option price is displayed correctly per website.\n\n\n\n\n  You can now successfully disable the lowest price of a configurable product and its associated simple products. Previously, Magento displayed a configurable product’s lowest price even after you disabled that price. (GITHUB-4419)\n\n\nEmail\n\n\n\n  Order emails now specify the amount of the gift card that you’ve purchased.\n\n\n\n\n  The Send Welcome Email From field now accurately identifies the store that the customer is associated with.\n\n\n\n\n  The Disable Email Communication option of Store &gt; Configuration &gt; Advanced &gt; System &gt; Email Sending Settings now works as expected. Previously, Magento sent email even if you disabled this feature. (GITHUB-5988)\n\n\nGeneral fixes\n\n\n\n  We fixed an issue where Magento unexpectedly removed categories from a store when an Admin with rights restricted to only one store saves a product.\n\n\n\n\n  Magento now creates a URL rewrite for the new URL key of a product as expected. Previously, after you saved a change to the URL key of a product by selecting the Create Permanent Redirect for old URL option, Magento did not rewrite the old URL to the new URL.\n\n\n\n\n  The Product page now displays swatches based on the color swatch attribute. Previously, the Product page did not display swatches.\n\n\n\n\n  Magento no longer displays a “Wrong request parameters” error when you try to assign products to a category at the store view level. Previously, Magento displayed a levelWrong request parameters error when you assigned products to a category.\n\n\n\n\n  The Magento Framework now makes its dependencies explicit in the composer.json file. (GITHUB-6442)\n\n\n\n\n  Magento now decrements stock as expected in a multi-website environment.\n\n\n\n\n  Magento now correctly manages the maximum number of messages a message queue consumer can process. Previously, the consumer would stop processing messages before reaching the specified maximum number.\n\n\n\n\n  The catalog category now retrieves prices from the price index update as expected.\n\n\n\n\n  The search field now works as expected on iOS devices using the Safari browser. Previously on these devices, the search box closed randomly.\n\n\n\n\n  We’ve removed the duplicate PHP settings from the sample web server configuration files.\n\n\n\n\n  The Compare Products page now works as expected. Previously, you were erroneously redirected to another page when you removed an item from the Compare Products sidebar.\n\n\n\n\n  You can now return to the Magento Admin from the Web Setup Wizard (System &gt; Tools &gt; Web Setup Wizard). Previously, you had to log back in to the Magento Admin after you ran the Web Setup Wizard.\n\n\n\n\n  Magento no longer redirects users to the Checkout page after login. Now, if you set Redirect Customer to Account Dashboard after Logging in value to Yes, users will be redirected to the Account Dashboard page. If you set this value to No, then users will stay on the home page after login.\n\n\n\n\n  We’ve eliminated difficulties saving product information when logged in as admin. Previously, the Product Save feature worked erratically for some Admin users.\n\n\n\n\n  Customers can now continue shopping after selecting an unavailable bundle product. Previously, if a customer selected a bundle product that was no longer available, he encountered a fatal error.\n\n\n\n\n  The Magento storefront now reflects changes in the swatch attribute properties as expected.\n\n\n\n\n  The Sales Order object can now contain more than one extension_attribute.  (GITHUB-3967)\n\n\n\n\n  We’ve removed the sampassword from the Setup wizard.\n\n\n\n\n  Customers are now redirected as expected to the destination URL identified in the Redirect to My Account After Log-in setting. Previously, customers were redirected to the My Account page, no matter which URL you identified in this setting.\n\n\n\n\n  The order of products in a category display no longer changes when you add a new product to the category.\n\n\n\n\n  Lengthy Order Status tables are now paginated as expected.\n\n\n\n\n  We’ve fixed a problem with custom zip code masks in previous versions of Magento. (GITHUB-4131)\n\n\n\n\n  We’ve fixed an issue with how the Customer Segments report calculates the same customer on two websites.\n\n\n\n\n  You can now make Return Merchandise Authorization (RMA) comments visible from the storefront by setting Stores &gt; Configuration &gt; Sales &gt; RMA Settings &gt; Enable RMA on Storefront.\n\n\n\n\n  You can now upload changes to the robots.txt file from the Magento Admin.\n\n\n\n\n  Users need view permission to the store to which the customers belong in order to see information about those customers. Previously, a user could see information about customers that belonged to websites or stores for which the user did not have explicit permission to view.\n\n\n\n\n  We’ve fixed an issue with how information in the sales_order_item attribute is handled after upgrade.\n\n\n\n\n  We’ve fixed an error with an unexpected empty default website during website creation.\n\n\n\n\n  The Need to Confirm option on Stores &gt; Configuration &gt; Customers &gt; Newsletter now works as expected.\n\n\nGift cards\n\n\n\n  You can now complete the purchase of a gift card in environments where you have set the Braintree payment method Payment Action to Authorize and Capture. Previously, any order made under these conditions would remain indefinitely in the processing stage.\n\n\n\n\n  You can now save a gift message when ordering a gift while logged in as a guest. Previously, Magento would not save this information, and displayed an error. (GITHUB-3804)\n\n\nImages\n\n\n\n  We’ve added a new way to import images: You can now successfully import images when you set  your document root to  &lt;your Magento install dir&gt;/pub. Previously, you needed to set document root to /magento to import images. Both ways of importing now work. (GITHUB-5359)\n\n\n\n\n  You can now preview uploaded images.\n\n\nImport/Export\n\n\n\n  You can now export a bundle product that contains a custom text attribute. Previously, if you tried to export this type of bundle product, the export failed, and Magento displayed the message, “There is no data for the export”.\n\n\n\n\n  You can now successfully import multiselect attributes that contain special symbols or delimiters. Previously, when you tried to import attributes that contained delimiters, data validation (and the import) failed.\n\n\n\n\n  Importing customer data no longer sets the Gender attribute to a blank field.\n\n\n\n\n  You can now import negative quantities.\n\n\n\n\n  Magento no longer randomly displays this error during import after a file passes the data check: “Maximum error count has been reached or system error is occurred!”.\n\n\n\n\n  We’ve fixed an issue with the representation of date and time zones of items in the product catalog during import or export. Previously, Magento converted all data into the default format (UTC-8), including values that you set to be displayed using another standard.\n\n\nInstallation, upgrade, and deployment\n\n\n\n  The Component Manager now shows a list of all available versions of an extension for installation. Previously, the Web Setup component manager showed only the latest version of the extension.\n\n\n\n\n  During upgrade, we now check directory permissions recursively except for the var/session directory. We skip that directory because the web server usually owns those files.\n\n\n\n\n  Magento 2.0.x now supports the use of table prefixing during installation. Previously, when you used table prefixing, your Magento installation failed with this error: “Duplicate key on write or update”. (GITHUB-5688)\n\n\n\n\n  Magento now requires you to log in with your Magento Marketplace account credentials before attempting to upgrade. Previously, it was not clear that you needed to log in first before initiating an upgrade.  (GITHUB-3059)\n\n\nOrders\n\n\n\n  You can now reorder an item that is currently invoiced or being shipped. Previously, if you tried to reorder, Magento did not add the item to your shopping cart, and displayed an error. (GITHUB-6278)\n\n\n\n\n  A user can view orders only on stores to which they’ve been assigned permission. Previously, an Admin user with permissions for only one store could view orders from all stores on the same website.\n\n\n\n\n  \n    We’ve added PHP interfaces that add the ability to change the status of a shipment. The new Creditmemo interface supports tasks you can already do through the Magento Admin, including the ability to:\n\n    \n      \n        support returning multiple units of a configurable product. Previously, when you tried to refund an order, you could refund only one unit of a configurable product, not the amount in the original order.\n      \n      \n        return the product to stock\n      \n      \n        change order status after a credit memo has been created.\n      \n    \n  \n\n\n\n\n  We’ve removed redundancy in the orders comment history display. Previously, Magento would display the time at which the customer entered the comment twice.\n\n\nPayment methods\n\n\n\n  You can now successfully place an order using the Payflow Pro payment method.\n\n\n\n\n  We’ve fixed an issue with how Magento captures and validates payment information. Previously, after you entered valid credit card information, Magento prompted you to re-enter the information, and displayed this error: “Please  enter a valid credit card expiration date”. (GITHUB-4741)\n\n\n\n\n  Magento now saves credit card information as expected after a customer checks out using a Braintree credit card with Vault.\n\n\n\n\n  PayPal Payflow Pro now uses the currency you have specified in your store. Previously, under some conditions, PayPal Payflow Pro defaulted to calculating charges in U.S. dollars, no matter which currency you specified.\n\n\nPerformance\n\n\n\n  \n    We’ve improved the performance of these tasks:\n\n    \n      \n        Loading the Configurable Product page.\n      \n      \n        Creating many (2500 - 5000) product variations.\n      \n      \n        Calculating batch sizes while indexing categories.\n      \n      \n        Compiling. (We’ve optimized compiler performance to run faster.)\n      \n    \n  \n\n\n\n\n  We’ve also streamlined the JavaScript bundling process, which reduces the size of bundled files. (GITHUB-4506)\n\n\nScope\n\n\n\n  You can now successfully assign products to a category on the store view level. Previously, Magento displayed this error when you tried to assign products to a category: “Wrong request parameters”.\n\n\n\n\n  A restricted user can now change the attributes (either at the store view or website level) attributes that are defined in his scope. Previously, Admin users with access to only one website could not edit a product, no matter how their scope was set.\n\n\n\n\n  The scope selector on the Product page now accurately displays all related websites for a restricted user.\n\n\n* We’ve fixed an issue with the scope selector on the Catalog page. Previously, Magento did not display the scope selector when using Mass Actions, but now you can specify the scope of the action that will be applied to the products when using Mass Actions.\n\nStatic file processing\n\n\n\n  Versioning of static files (including CSS, JavaScript, fonts, and images) is now enabled by default.\n\n\n\n\n  Static asset signing now works under nginx. For more information, see Using Static File Signatures.\n\n\nWeb APIs\n\n\n\n  The Swagger documentation erroneously indicated that search queries can return detailed information about multiple objects. The description of these APIs now state which API to use to return detailed information about a single object.\n\n\nKnown issues\n\n\n  Issue: When editing a product, you cannot edit customizable options on the store view level. That is, a change to one option affects products on all stores. Also, the ‘Use Default Value’ checkbox for the option title does not work. Unchecking this box and then changing the title affects all store views.\n\n\n\n\n  \n    Issue: When you add a new product and re-index using Varnish, Magento does not display the product on the frontend, even after you purge the cache and re-index. Workaround: Purge the Varnish cache using the Varnish admin CLI.\n  \n  \n    Issue: A Paypal SSL CURL communication error can occur if your Magento installation is not running the minimal required TLS version. Older versions of Magento might not run the minimal version, which is TLS 1.2.  If it isn’t, then Magento displays this error: curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s).  Workaround: Upgrade your version of CURL to the latest possible version that will enable the use of TLS 1.2 by default.\n  \n  \n    Issue: Mass actions can be slow and consume excessive memory unless you increase the default PHP settings for your installation. These default settings for your Magento installation typically support the processing of about 1,000 variables. If you try a mass action that involves 1000 or more variables, the mass action might fail. Workaround: You can reduce processing time and performance by increasing your default PHP memory settings to 1 GB.\n  \n  \n    Issue: Gallery doesn’t show all images added to configurable options.\n  \n  \n    Issue: The Add Products Manually link is not available after removing all variations. Workaround: Retain at least one variation or use the Choose a different product option option.\n  \n  \n    Issue: When you log in to run a system upgrade, Magento displays this error: Encountered end of file.  Workaround: Upgrade your SSL protocol to a minimum of TLS 1.0.\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.11EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-12ce-html": {
      "title": "Magento Open Source 2.0.12 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.12.\n\nHighlights\n\nMagento 2.0.12 contains more than 20 functional fixes and enhancements, and one security enhancement. Look for the following highlights in this release:\n\n\n  \n    Removal of vulnerability with the Zend framework Zend_Mail library. For more information, see New Zend Framework 1 Security Vulnerability.\n  \n  \n    Updates to the catalog, payment, and sales modules\n  \n\n\nSecurity enhancement\n\nThis release includes an important enhancement to the security of your Magento software. While there are no confirmed attacks related to the Zend framework Zend_Mail library vulnerability to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nCatalog\n\n\n\n  You can now directly add a configurable product (with all possible options defined) to your shopping cart from the category page. Previously,  you had to review a product on the product page before completing the process of adding it to your shopping cart. (GITHUB-2574), (GITHUB-5850), (GITHUB-5882), (GITHUB-6572),  (GITHUB-5558)\n\n\n\n\n  Admin users can no longer create an empty URL key for a category. Previously, Magento let Admin users create an empty URL key, which lead to category-related errors.\n\n\n\n\n  Magento now successfully saves a product even when you include an empty Custom Options row (Products &gt; Catalog &gt; Custom Options). Previously, under these conditions, Magento displayed the Invalid option value error message, and did not save the product.\n\n\nCheckout\n\n\n\n  The Use Default Checkboxes for Custom Options option now works as expected. Previously, the checkboxes under the option title and value title were not rendered correctly, and the feature did not work.\n\n\n\n\n  Magento now displays the Thank you for your purchase! message after a customer successfully checks out. Previously,  Magento did not display this message, even though the HTML code was present. (GITHUB-6968)\n\n\n\n\n  You can now create a new order from the Magento Admin. (GITHUB-5533),  (GITHUB-6855)\n\n\nImport/export\n\n\n\n  Magento can now import additional_images that are tagged with labels that contain a comma separator.\n\n\n\n\n  Magento  no longer deletes a product after you select the Replace option while importing a product. Previously,  Magento deleted the product rather than replacing it.\n\n\n\n\n  You can now use Extension Manager to uninstall extensions that were installed using Composer.\n\n\nMiscellaneous\n\n\n\n  Magento now redirects you to the Setup page as expected when you specify a particular port when installing the application using Nginx. Previously, Magento did not redirect you to the Setup page, and instead displayed this message in var/report: You cannot install Magento using the Setup Wizard because the Magento setup directory cannot be accessed.\n\n\n\n\n  Requests to Edge Side Includes (ESI) now return data. Previously, requests to ESI did not return data because the requested block was absent in the layout.\n\n\n\n\n  Admin users now need view permission to the store to which the customers belong in order to see information about those customers. Previously, an Admin user could see information about customers that belonged to websites or stores for which the user did not have explicit permission to view.\n\n\n\n\n  You can now change a category’s display mode to Static Block Only when the flat indexer is on. Previously, Magento experienced a fatal error under these conditions.\n\n\n\n\n  \n    You can now use Composer to install Magento 2.0.x with sample data, and use deploy:mode:set production, without incurring an error. Previously, Magento displayed this error when you tried to use deploy:mode:set production under these conditions:\n\n      Start compilation\n  Command returned non-zero exit code:\n  `php -f /var/www/html/20ce/bin/magento setup:di:compile-multi-tenant 2&gt;&amp;1`\n    \n  \n\n\nPayment methods\n\n\n\n  You can now ship items to a country from which you have not authorized payment. Previously, when a customer tried to ship an order to a country from which the store was not authorized to receive payment, Magento displayed this message, No Payment method available.\n\n\nSales\n\n\n\n  Magento now displays an error message as expected when a user tries to add less than the specified minimum quantity of a product to his shopping cart.\n\n\n\n\n  The Free Shipping method now shows up as an available option when you create an order from the Magento Admin. (GITHUB-2939)\n\n\n\n\n  Magento no longer assigns all orders a status of Suspected Fraud in multi-currency store configurations. (GITHUB-4263)\n\n\n\n\n  An Admin user with restricted permissions no longer has access to all orders.\n\n\nTravis builds\n\n\n\n  We’ve fixed a fatal issue that occurred if you ran Travis builds on imagettfbbox 2.1.2. Previously, you’d receive this error: PHP Fatal error: Call to undefined function Magento\\Framework\\Image\\Adapter\\imagettfbbox() in /home/travis/build/magento/magento2/lib/internal/Magento/Framework/Image/Adapter/Gd2.php.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnown issues\n\n\n\n  Issue: Customers cannot view all images that are associated with a configurable product. (The gallery does not show all the images that are associated with a configurable option.) (GITHUB-6195), (GITHUB-4101)\n\n\n\n\n  Issue: You cannot use the Web Setup wizard to uninstall a module.\n\n\n\n\n  \n    Issue: Magento does not save a configurable product with specific attribute options under the following conditions:\n\n    \n      the configurable product price is derived from its children\n      the children have been previously created and are in stock\n    \n  \n\n\n\n\n  Issue: After you’ve removed all variations of a configurable product (Admin &gt; Configuration &gt; Remove Product), the Add Products Manually link is not available. Workaround: Retain at least one variation or use the Choose a different product option option.\n\n\n\n\n  Issue:  Magento saves images and videos as global values, not per store view. This can potentially result in the unwanted duplication of product images across store views.\n\n\n\n\n  Issue: Magento does not consistently save video information for a product after you edit the information.\n\n\n\n\n  Issue: Client-side LESS compilation is not working properly. Consequently, page load performance is not optimal.\n\n\n\n\n  Issue: You encounter an error when you try to install Magento with the magento/module-cms-sample-data 100.0.5 sample data set: Error in update!\n\n\n\n\n  Issue: Magento does not always display the accurate price for a configurable product when running Magento in an environment that contains multiple store views and websites.\n\n\n\n\n  Issue: You cannot successfully create and save a dropdown attribute using Stores &gt; Attributes &gt; Product &gt; Add New Attribute. Workaround: Save the attribute with values required set to no first, before re-saving it with values required set to yes.\n\n\n\n\n  Issue: Magento experiences a fatal error when you try to get a refund on an invoice. (Specifically, a fatal error occurs when calling LocalizedException in CreditmemoService.)\n\n\n\n\n  Issue: Search synonyms are not working as expected. Typically, Magento redirects users to the URL set in the search term. Currently, Magento ignores the synonym, and searches for the term that the customer enters.\n\n\n\n\n  Issue: Magento does not enforce the value that specifies the minimum quantity of a product that a customer can add to the shopping cart. Instead of displaying a message that prompts the user to enter the required minimum, Magento permits a customer to order as few items as they’d like.\n\n\n\n\n  Issue: When editing a product description, you cannot delete a product image across multiple stores. When you try to save your edits, Magento displays this message: The image cannot be removed as it has been assigned to the other image role.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.12CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-12ee-html": {
      "title": "Magento Commerce 2.0.12 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.12. This release includes many functional fixes and enhancements.\n\nLooking for the Magento Commerce (Cloud) 2.1.4 and 2.0.12 Release Notes?\n\nHighlights\n\nMagento 2.0.12 contains more than 20 functional fixes and enhancements, and one security enhancement. Look for the following highlights in this release:\n\n\n  \n    Removal of vulnerability with the Zend framework Zend_Mail library. For more information, see New Zend Framework 1 Security Vulnerability.\n  \n  \n    Updates to the catalog, payment, and sales modules\n  \n\n\nSecurity enhancement\n\nThis release includes an important enhancement to the security of your Magento software. While there are no confirmed attacks related to the Zend framework Zend_Mail library vulnerability to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\nFunctional fixes\n\nWe address the following functional issues in this release.\n\nCatalog\n\n\n\n  You can now directly add a configurable product (with all possible options defined) to your shopping cart from the category page. Previously,  you had to review a product on the product page before completing the process of adding it to your shopping cart. (GITHUB-2574), (GITHUB-5850), (GITHUB-5882), (GITHUB-6572),  (GITHUB-5558)\n\n\n\n\n  Admin users can no longer create an empty URL key for a category. Previously, Magento let Admin users create an empty URL key, which lead to category-related errors.\n\n\n\n\n  Magento now successfully saves a product even when you include an empty Custom Options row (Products &gt; Catalog &gt; Custom Options). Previously, under these conditions, Magento displayed the Invalid option value error message, and did not save the product.\n\n\n\n\n  The Match products by rule option in the Admin interface now works as expected.\n\n\n\n\n  You can now successfully match products by rule with an AND condition on Category Rule. Previously, this operation did not return any matched products.\n\n\nCheckout\n\n\n\n  Magento now displays custom address attributes on the checkout summary.\n\n\n\n\n  The Use Default Checkboxes for Custom Options option now works as expected. Previously, the checkboxes under the option title and value title were not rendered correctly, and the feature did not work.\n\n\n\n\n  Magento now displays the Thank you for your purchase! message after a customer successfully checks out. Previously,  Magento did not display this message, even though the HTML code was present. (GITHUB-6968)\n\n\n\n\n  You can now create a new order from the Magento Admin. (GITHUB-5533),  (GITHUB-6855)\n\n\nCustomer\n\n\n\n  When you add an address, new custom attributes are now displayed together, along with other address details.\n\n\nGift card\n\n\n\n  You can now use a gift card to complete payment for an order that contains gift wrap. Previously, when you paid for an order with a gift card, the gift wrap amount remained as a balance, even when the gift card contained sufficient funds to cover the expense of gift wrapping.\n\n\nImport/export\n\n\n\n  Magento can now import additional_images that are tagged with labels that contain a comma separator.\n\n\n\n\n  Magento no longer deletes a product after you select the Replace option while importing a product. Previously,  Magento deleted the product rather than replacing it.\n\n\n\n\n  You can now use Extension Manager to uninstall extensions that were installed using Composer.\n\n\nMiscellaneous\n\n\n\n  Magento now redirects you to the Setup page as expected when you specify a particular port when installing the application using Nginx. Previously, Magento did not redirect you to the Setup page, and instead displayed this message in var/report: You cannot install Magento using the Setup Wizard because the Magento setup directory cannot be accessed.\n\n\n\n\n  Requests to Edge Side Includes (ESI) now return data. Previously, requests to ESI did not return data because the requested block was absent in the layout.\n\n\n\n\n  Admin users need view permission to the store to which the customers belong in order to see information about those customers. Previously, an Admin user could see information about customers that belonged to websites or stores for which the user did not have explicit permission to view.\n\n\n\n\n  You can now change a category’s display mode to Static Block Only when the flat indexer is on. Previously, Magento experienced a fatal error under these conditions.\n\n\n\n\n  \n    You can now use Composer to install Magento 2.0.x with sample data, and use deploy:mode:set production, without incurring an error. Previously, Magento displayed this error when you tried to use deploy:mode:set production under these conditions:\n\n      Start compilation\n  Command returned non-zero exit code:\n  `php -f /var/www/html/20ce/bin/magento setup:di:compile-multi-tenant 2&gt;&amp;1`\n    \n  \n\n\nPayment methods\n\n\n\n  You can now ship items to a country from which you have not authorized payment. Previously, when a customer tried to ship an order to a country from which the store was not authorized to receive payment, Magento displays this message, No Payment method available.\n\n\nSales\n\n\n\n  Magento now displays an error message as expected when a user tries to add less than the specified minimum quantity of a product to his shopping cart.\n\n\n\n\n  The Free Shipping method now shows up as an available option when you create an order from the Magento Admin. (GITHUB-2939)\n\n\n\n\n  Magento no longer assigns all orders a status of Suspected Fraud in multi-currency store configurations. (GITHUB-4263)\n\n\n\n\n  An Admin user with restricted permissions no longer has access to all orders.\n\n\nTravis builds\n\n\n\n  We’ve fixed a fatal issue that occurred if you ran Travis builds on imagettfbbox 2.1.2. Previously, you’d receive this error: PHP Fatal error: Call to undefined function Magento\\Framework\\Image\\Adapter\\imagettfbbox() in /home/travis/build/magento/magento2/lib/internal/Magento/Framework/Image/Adapter/Gd2.php.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnown issues\n\n\n\n  Issue: You cannot cancel check out of an order you are making with the Worldpay payment option without emptying your shopping cart. Currently, when you cancel a checkout operation while using this payment method, Magento empties your shopping cart.\n\n\n\n\n  Issue: Customers cannot view all images that are associated with a configurable product. The gallery does not show all the images that are associated with a configurable option. (GITHUB-6195), (GITHUB-4101)\n\n\n\n\n  Issue: You cannot use the Web Setup wizard to uninstall a module.\n\n\n\n\n  \n    Issue: Magento does not save a configurable product with specific attribute options under the following conditions:\n\n    \n      the configurable product price is derived from its children\n      the children have been previously created and are in stock\n    \n  \n\n\n\n\n  Issue: After you’ve removed all variations of a configurable product (Admin &gt; Configuration &gt; Remove Product), the Add Products Manually link is not available. Workaround: Retain at least one variation or use the Choose a different product option option.\n\n\n\n\n  Issue:  Magento saves images and videos as global values, not per store view. This can potentially result in the unwanted duplication of product images across store views.\n\n\n\n\n  Issue: Magento does not consistently save video information for a product after you edit the information.\n\n\n\n\n  Issue: Client-side LESS compilation is not working properly. Consequently, page load performance is not optimal.\n\n\n\n\n  Issue: You encounter an error when you try to install Magento with the magento/module-cms-sample-data 100.0.5 sample data set: Error in update!\n\n\n\n\n  Issue: Magento does not always display the accurate price for a configurable product when running Magento in an environment that contains multiple store views and websites.\n\n\n\n\n  Issue: You cannot use Braintree PayPal to successfully complete the purchase of a gift card. Instead, your purchase stays in the processing stage.\n\n\n\n\n  Issue: You cannot successfully create and save a dropdown attribute using Stores &gt; Attributes &gt; Product &gt; Add New Attribute. Workaround: Save the attribute with values required set to no first, before re-saving it with values required set to yes.\n\n\n\n\n  Issue: Magento experiences a fatal error when you try to get a refund on an invoice. (Specifically, a fatal error occurs when calling LocalizedException in CreditmemoService.)\n\n\n\n\n  Issue: Search synonyms not working as expected. Typically, Magento redirects users to the URL set in the search term. Currently, Magento ignores the synonym, and searches for the term that  the customer enters.\n\n\n\n\n  Issue: Magento does not enforce the value that specifies the minimum quantity of a product that a customer can add to the shopping cart. Instead of displaying a message that prompts the user to enter the required minimum, Magento permits a customer to order as few items as they’d like.\n\n\n\n\n  Issue: When editing a product description, you cannot delete a product image across multiple stores. When you try to save your edits, Magento displays this message: The image cannot be removed as it has been assigned to the other image role.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.12EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-13ce-html": {
      "title": "Magento Open Source 2.0.13 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.13.\n\n\n  This release updates the copyright date in every file. It does not contain any functional changes or security improvements. Isolating these changes in a single release is intended to simplify future updates and developer workflow.\n\n\nLooking for the Magento Commerce (Cloud)  Release Notes?\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.13CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-13ee-html": {
      "title": "Magento Commerce 2.0.13 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.13.\n\n\n  This release updates the copyright date in every file. It does not contain any functional changes or security improvements. Isolating these changes in a single release is intended to simplify future updates and developer workflow.\n\n\nLooking for the Magento Commerce (Cloud)  Release Notes?\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.13EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-14ce-html": {
      "title": "Magento Open Source 2.0.14 Release Notes",
      "content": "Patch code and release notes were published on May 31, 2017.\n\nWe are pleased to present Magento Open Source (formerly Community Edition) 2.0.14. This release includes critical enhancements to the security of your Magento software.\n\n\n  While there are no confirmed attacks related to these vulnerabilities to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\n\nHighlights\n\nMagento 2.0.14 contains over 15 security enhancements as well as one significant functional enhancement. Look for the following highlights in this release:\n\n\n\n  \n    Support for MasterCard BIN number expansion. MasterCard recently added a new series of Bank Identification Numbers (BIN), and this release of Magento provides support for transactions made with cards using these new BINs. MasterCard describes the issue here.\n  \n  \n    Resolution of multiple high priority and critical security issues. These critical issues include remote code execution for authenticated admin users, access control bypass, and CSRF issues. See Magento 2.0.14 and 2.1.7 Security Patches for a comprehensive discussion of these issues.\n  \n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.14CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-14ee-html": {
      "title": "Magento Commerce 2.0.14 Release Notes",
      "content": "Patch code and release notes were published on May 31, 2017.\n\nWe are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.14. This release includes critical enhancements to the security of your Magento software.\n\n\n  While there are no confirmed attacks related to these vulnerabilities to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\n\nLooking for the Magento Commerce (Cloud) Release Notes?\n\nHighlights\n\nMagento 2.0.14 contains more than 15 security enhancements as well as one significant functional enhancement. Look for the following highlights in this release:\n\n\n\n  \n    Support for MasterCard BIN number expansion. MasterCard recently added a new series of Bank Identification Numbers (BIN), and this release of Magento provides support for transactions made with cards using these new BINs. MasterCard describes the issue here.\n  \n  \n    Resolution of multiple high priority and critical security issues. These critical issues include remote code execution for authenticated Admin users, access control bypass, and cross-site request forgery issues. See Magento 2.0.14 and 2.1.7 Security Patches for a comprehensive discussion of these issues.\n  \n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.14EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-15ce-html": {
      "title": "Magento Open Source 2.0.15 Release Notes",
      "content": "Patch code and release notes were published on June 21, 2017.\n\nWe are pleased to present Magento Open Source  (formerly Community Edition) 2.0.15. This release includes only one enhancement: Support for changes in PayPal’s Instant Payment Notification (IPN) service.\n\nFor increased security, merchants using PayPal’s Instant Payment Notification (IPN) service will be able to use only HTTPS when posting messages back to PayPal for verification. In the past, PayPal has allowed the use of HTTP for these postbacks. PayPal provides more information at IPN Verification Postback to HTTPS Microsite.\n\n\n  You must upgrade or apply this patch by June 30, 2017 to avoid any disruption to this service.\n\n\nLooking for the Magento Commerce (Cloud) Release Notes?\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.15CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-15ee-html": {
      "title": "Magento Commerce 2.0.15 Release Notes",
      "content": "Patch code and release notes were published on June 21, 2017.\n\nWe are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.15. This release includes only one enhancement: Support for changes in PayPal’s Instant Payment Notification (IPN) service.\n\nFor increased security, merchants using PayPal’s Instant Payment Notification (IPN) service will be able to use only HTTPS when posting messages back to PayPal for verification. In the past, PayPal has allowed the use of HTTP for these postbacks. PayPal provides more information at IPN Verification Postback to HTTPS Microsite.\n\n\n  You must upgrade or apply this patch by June 30, 2017 to avoid any disruption to this service.\n\n\nLooking for the Magento Commerce (Cloud) Release Notes?\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.15EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-16ce-html": {
      "title": "Magento Open Source 2.0.16 Release Notes",
      "content": "Patch code and release notes were published on September 14, 2017.\n\nWe are pleased to present Magento Open Source (formerly Community Edition) 2.0.16. This release includes almost 40 security fixes and enhancements to your Magento software.\n\n\n  While there are no confirmed attacks related to these vulnerabilities to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\n\nHighlights\n\nMagento 2.0.16 contains almost 40 security fixes and enhancements.  Look for the following highlights in this release:\n\n\n  \n    enhancements that help close cross-site request forgery (CSRF), unauthorized data leak, and authenticated Admin user remote code execution \nvulnerabilities. See Magento 2.0.16 and 2.1.9 Security Patches for a comprehensive discussion of these issues.\n  \n  \n    support for changes to the USPS API that USPS implemented on September 1, 2017\n  \n  \n    change to how Magento displays status updates during upgrade.\n  \n\n\nFixed issue\n\n\n  We’ve added support for the change to the USPS API that USPS implemented on September 1, 2017. After installing or upgrading to this release, the discontinued First-Class Mail Parcel service will change to First-Class Package Service – Retail. Previously, the USPS First-Class Mail Parcel option was not available after September 1, 2017 on installations running Magento 2.x unless you applied the workaround described here.\n\n\n\n\n  We’ve changed how Magento displays status updates during a product upgrade. Previously, potentially vulnerable information such as full paths and module names were displayed in the product GUI, potentially exposing this information to a malicious user. Magento now restricts this potentially vulnerable information to logs that are available to administrators only.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.16CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-16ee-html": {
      "title": "Magento Commerce 2.0.16 Release Notes",
      "content": "Patch code and release notes were published on September 14, 2017.\n\nWe are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.16. This release includes almost 40 security fixes and enhancements to your Magento software.\n\n\n  While there are no confirmed attacks related to these vulnerabilities to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento software to the latest version as soon as possible.\n\n\nHighlights\n\nMagento 2.0.16 contains almost 40 security fixes and enhancements.  Look for the following highlights in this release:\n\n\n  \n    enhancements that help close cross-site request forgery (CSRF), unauthorized data leak, and authenticated Admin user remote code execution \nvulnerabilities. See Magento 2.0.16 and 2.1.9 Security Patches for a comprehensive discussion of these issues.\n  \n  \n    support for changes to the USPS API that USPS implemented on September 1, 2017\n  \n  \n    change to how Magento displays status updates during upgrade.\n  \n\n\nFixed issue\n\n\n  We’ve added support for the change to the USPS API that USPS implemented on September 1, 2017. After installing or upgrading to this release, the discontinued First-Class Mail Parcel service will change to First-Class Package Service – Retail. Previously, the USPS First-Class Mail Parcel option was not available after September 1, 2017 on installations running Magento 2.x unless you applied the workaround described here.\n\n\n\n\n  We’ve changed how Magento displays status updates during a product upgrade. Previously, potentially vulnerable information such as full paths and module names were displayed in the product GUI, potentially exposing this information to a malicious user. Magento now restricts this potentially vulnerable information to logs that are available to administrators only.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.16EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-17ce-html": {
      "title": "Magento Open Source 2.0.17 Release Notes",
      "content": "Patch code and release notes were published on November 7, 2017.\n\nWe are pleased to present Magento Open Source 2.0.17. This release includes almost 40 security fixes and enhancements to your Magento software.\n\nHighlights\n\nMagento 2.0.17 contains almost 40 security fixes and enhancements.  Look for the following highlights in this release:\n\n\n  \n    ability to implement translations from themes. We’ve also significantly reduced JavaScript-related translation issues.\n  \n  \n    improvements to how the PayPal Express Checkout payment method processes virtual products.\n  \n  \n    multiple enhancements to product security. See Magento Security Center for more information.\n  \n\n\nSecurity enhancements\nMagento 2.0.17 includes multiple security enhancements. Although this release includes these enhancements, no confirmed attacks related to these issues have occurred to date. However, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions, so we recommend that you upgrade your Magento software to the latest version as soon as possible.\n\nSee Magento Security Center for more information.\n\nKnown issue\n\n\n\n  Magento continues to display the Close button after you open an image in the Product page in fullscreen mode, then close it.\n\n\nFixed issues\n\nCart\n\n\n  Magento now permits a customer to share a shopping cart between the store views of the same website, but not between store views of different websites. Previously, Magento did not clear the contents of a shopping cart  when the customer switched between store views on different websites.\n\n\nCatalog\n\n\n\n  You can now create a blank attribute option using the drop-down input option on products that do not require an attribute. \nGitHub-3545, GitHub-5485, GitHub-4910\n\n\n\n\n  The category/product indexer now successfully completes a full reindexing of all indexes on large profiles with 500,000 or more products. Previously, Magento successfully generated a large profile, but failed to complete the reindexing of the categories or products, and displayed the following error: Error 1114: Table is full.\n\n\n\n\n  The storefront now displays images that Magento resizes during product save operations, rather than resizing the product on the storefront. Previously, the image path contained store_id, and during save operations, Magento resized images for  the default store only. \n\n\n\n\n  When you delete an image in the Admin, Magento no longer deletes it on the server. Previously, Magento deleted it from the server as well, which caused errors for other products (example error message: Cannot gather stats! Warning!stat(): stat failed for).\n\n\n\n\n  You can now use the WYSIWYG editor to update product descriptions. Previously, when you used the editor to update descriptions, Magento did not apply your changes.\n\n\n\n\n  The product attribute category_ids can have only Global scope. Previously, you could change the scope value of category_ids to Store.\n\n\n\n\n  The \\Magento\\CatalogInventory\\Model\\Stock\\Status::getStockId() call now returns the stock ID as expected. Previously, it returned the website ID.\n\n\nConfigurable products\n\n\n  Sorting configurable products by price now works as expected when a simple product has a special price. GitHub-4778\n\n\n\n\n  Magento now saves and filters configurable products by their specific options.\n\n\n\n\n  Magento now displays all images associated with a selected swatch before it displays other images associated with the configurable product. Previously, Magento did not display all images.   GitHub-6195,   GitHub-4101\n\n\n\n\n  The Add Products Manually option now lets you add existing products as well as generate new variations.\n\n\nFramework\n\n\n  Widgets now accept UTF-8 special characters type as input parameters. Previously, you could successfully create a widget, but UTF-8 special characters were broken. GitHub-4232 Fix submitted by community member Pieter Hoste in pull request 9333.\n\n\n\n\n  Static file generation is no longer affected by a race condition that affected merging CSS files. Previously, this race condition interfered with the proper generation of the product front end.\n\n\nGeneral\n\n\n\n  When you edit a product list widget on a CMS page, Magento now shows previously set conditions. Previously, when you tried to edit a product list widget, the condition parameter was empty. GitHub-6616\n\n\n\n\n  The Print Shipping Label link now displays on the product front end. Previously, the layout for the “Shipping and Tracking” block did not work properly.\n\n\n\n\n  Enabling  Admin &gt; Stores &gt; Configuration &gt; Advanced &gt; Developer &gt; Merge CSS files no longer degrades product performance. Previously, enabling this setting slowed down both frontend and Admin processes. GitHub-4321\n\n\n\n\n  Magento no longer generates incorrect URLs in the site map when the Use Secure URLs in Admin setting is set to Yes. GitHub-8644 \n\n\n\n\n  Directive values can now be escaped with quotation marks. Previously, all characters after quotation marks were removed after a save, which resulted in the failure to save widget conditions. GitHub-3860 \n\n\n\n\n  We’ve resolved multiple issues with inline translations in the checkout page.\n\n\n\n\n  Magento now correctly calculates a bundle product’s price even when it contains only one product in a required product option. Previously, if a bundle product contained only one product in an option, Magento did not update the price. GitHub-4446\n\n\n\n\n  We’ve fixed an issue with the PayPal ExpressCheckout functional test.\n\n\n\n\n  Magento no longer uses the wrong address template for shipping, invoice and credit memo emails when second website has a different template.\n\n\n\n\n  Inline translation is now available for button elements.\n\n\n\n\n  Log entries no longer show the current_password field, which should be hidden.\n\n\n\n\n  Backtrace information no longer appears on the frontend.\n\n\nImport/export\n\n\n  We’ve improved the performance of importing up to 100,000 products from the Admin.\n\n\n\n\n  Magento now maintains super attribute ordering of configurable products with multiple super attributes after export or import. Previously, after import or export, the ordering of super attributes was not maintained. GitHub-6079\n\n\n\n\n  We’ve fixed an issue where product URL keys (for SKUs) were not auto-generated as expected during import.\n\n\n\n\n  Magento now imports customer data as expected after the data passes the pre-import validation step. Previously, although data passed this validation step, an error would occur during import, and Magento displayed this message: Invalid data for insert. GitHub-4921, GitHub-9469\n\n\nOrder management\n\n\n  Magento now uses the address template from the store-view level of the placed order (similar to how order confirmation email works). Previously, Magento used the wrong address template for order e-mails.\n\n\nShipping\n\n\n  The Free Shipping rule now works correctly with the table shipping method. Previously, Magento displayed an error at checkout (This shipping method is not available. To use this shipping method, please contact us.) instead of assigning a $0 shipping rate. GitHub-6346\n\n\nTargetRule\n\n\n  Magento now saves a new product rule when its SKU attribute is enabled for Use for Promo Rule Conditions. Previously, you could not save a new rule under these conditions. \n\n\n\n\n  You can now base a Related Product rule on a product attribute, such as color.\n\n\nWeb API Framework\n\n\n\n  The SOAP API no longer fails after you run bin/magento setup:di:compile.\n\n\n\n\n  You can now use REST to successfully update customer information without unintentionally deleting default billing and shipping address information.\n\n\n\n\n  You can now use REST to add a video to a product description. GitHub-7153\n\n\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.17CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-17ee-html": {
      "title": "Magento Commerce 2.0.17 Release Notes",
      "content": "Patch code and release notes were published on November 7, 2017.\n\nWe are pleased to present Magento Commerce 2.0.17. This release includes almost 40 security fixes and enhancements to your Magento software.\n\nHighlights\n\nMagento 2.0.17 contains almost 40 security fixes and enhancements.  Look for the following highlights in this release:\n\n\n  \n    ability to implement translations from themes. We’ve also significantly reduced JavaScript-related translation issues.\n  \n  \n    improvements to how the PayPal Express Checkout payment method processes virtual products.\n  \n  \n    multiple enhancements to product security. See Magento Security Center for more information.\n  \n\n\nSecurity enhancements\nMagento 2.0.17 includes multiple security enhancements. Although this release includes these enhancements, no confirmed attacks related to these issues have occurred to date. However, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions, so we recommend that you upgrade your Magento software to the latest version as soon as possible.\n\nSee Magento Security Center for more information.\n\nKnown issue\n\n\n\n  Magento continues to display the Close button after you open an image in the Product page in fullscreen mode, then close it.\n\n\nFixed issues\n\nCart\n\n\n  Magento now permits a customer to share a shopping cart between the store views of the same website, but not between store views of different websites. Previously, Magento did not clear the contents of a shopping cart  when the customer switched between store views on different websites.\n\n\nCatalog\n\n\n\n  You can now create a blank attribute option using the drop-down input option on products that do not require an attribute. \nGitHub-3545, GitHub-5485, GitHub-4910\n\n\n\n\n  The category/product indexer now successfully completes a full reindexing of all indexes on large profiles with 500,000 or more products. Previously, Magento successfully generated a large profile, but failed to complete the reindexing of the categories or products, and displayed the following error: “Error 1114: Table is full”.\n\n\n\n\n  The storefront now displays images that Magento resizes during product save operations, rather than resizing the product on the storefront. Previously, the image path contained store_id, and during save operations, Magento resized images for  the default store only. \n\n\n\n\n  When you delete an image in the Admin, Magento no longer deletes it on the server. Previously, Magento deleted it from the server as well, which caused errors for other products (example error message: Cannot gather stats! Warning!stat(): stat failed for).\n\n\n\n\n  You can now use the WYSIWYG editor to update product descriptions. Previously, when you used the editor to update descriptions, Magento did not apply your changes.\n\n\n\n\n  The product attribute category_ids can have only Global scope. Previously, you could change the scope value of category_ids to Store.\n\n\n\n\n  The \\Magento\\CatalogInventory\\Model\\Stock\\Status::getStockId() call now returns the stock ID as expected. Previously, it returned the website ID.\n\n\nConfigurable products\n\n\n  Sorting configurable products by price now works as expected when a simple product has a special price. GitHub-4778\n\n\n\n\n  Magento now saves and filters configurable products by their specific options.\n\n\n\n\n  Magento now displays all images associated with a selected swatch before it displays other images associated with the configurable product. Previously, Magento did not display all images.   GitHub-6195,   GitHub-4101\n\n\n\n\n  The Add Products Manually option now lets you add existing products as well as generate new variations.\n\n\nFramework\n\n\n  Widgets now accept UTF-8 special characters type as input parameters. Previously, you could successfully create a widget, but UTF-8 special characters were broken. GitHub-4232\n\n\n\n\n  Static file generation is no longer affected by a race condition that affected merging CSS files. Previously, this race condition interfered with the proper generation of the product front end.\n\n\nGeneral\n\n\n  Magento now moves the sequence_* table to the correct database after implementing a split database.\n\n\n\n\n  When you edit a product list widget on a CMS page, Magento now shows previously set conditions. Previously, when you tried to edit a product list widget, the condition parameter was empty. GitHub-6616\n\n\n\n\n  The Print Shipping Label link now displays on the product front end. Previously, the layout for the Shipping and Tracking block did not work properly.\n\n\n\n\n  Enabling  Admin &gt; Stores &gt; Configuration &gt; Advanced &gt; Developer &gt; Merge CSS files no longer degrades product performance. Previously, enabling this setting slowed down both frontend and Admin processes. GitHub-4321\n\n\n\n\n  Magento no longer generates incorrect URLs in the site map when the Use Secure URLs in Admin setting is set to Yes. GitHub-8644 \n\n\n\n\n  Directive values can now be escaped with quotation marks. Previously, all characters after quotation marks were removed after a save, which resulted in the failure to save widget conditions. GitHub-3860 \n\n\n\n\n  We’ve resolved multiple issues with inline translations in the checkout page.\n\n\n\n\n  Magento now correctly calculates a bundle product’s price even when it contains only one product in a required product option. Previously, if a bundle product contained only one product in an option, Magento did not update the price. GitHub-4446\n\n\n\n\n  Cron errors no longer occur when reward points are avaiable and the Subscribe for Points Expiration Notifications setting is set.\n\n\n\n\n  We’ve fixed an issue with the PayPal ExpressCheckout functional test.\n\n\n\n\n  Magento no longer uses the wrong address template for shipping, invoice and credit memo emails when second website has a different template.\n\n\n\n\n  Inline translation is now available for button elements.\n\n\n\n\n  Log entries no longer show the current_password field, which should be hidden.\n\n\n\n\n  Backtrace information no longer appears on the frontend.\n\n\nGift card\n\n\n  Customers can no longer exceed a gift card balance by using the gift card twice.\n\n\nGift message\n\n\n  Gift message options are no longer available at the order level when you’ve disabled them in the Admin.\n\n\nGift wrap\n\n\n  Your gift wrapping selection now appears in the shopping cart regardless of whether you’ve selected a shipping method. Previously, Magento did not display your gift wrapping choice until you selected a shipping method.\n\n\n\n\n  Magento no longer displays the gift wrap tax when no gift wrap is selected.\n\n\nImport/export\n\n\n  We’ve improved the performance of importing up to 100,000 products from the Admin.\n\n\n\n\n  Magento now maintains super attribute ordering of configurable products with multiple super attributes after export or import. Previously, after import or export, the ordering of super attributes was not maintained. GitHub-6079\n\n\n\n\n  We’ve fixed an issue where product URL keys (for SKUs) were not auto-generated as expected during import.\n\n\n\n\n  Magento now imports customer data as expected after the data passes the pre-import validation step. Previously, although data passed this validation step, an error would occur during import, and Magento displayed this message: Invalid data for insert. GitHub-4921, GitHub-9469\n\n\nOrder management\n\n\n  Magento now uses the address template from store view level of the placed order (similar to how order confirmation email works). Previously, Magento used the wrong address template for order e-mails.\n\n\nShipping\n\n\n  The Free Shipping rule now works correctly with the table shipping method. Previously, Magento displayed an error at checkout (This shipping method is not available. To use this shipping method, please contact us.) instead of assigning a $0 shipping rate. GitHub-6346\n\n\nTargetRule\n\n\n  Magento now saves a new product rule when its SKU attribute is enabled for Use for Promo Rule Conditions. Previously, you could not save a new rule under these conditions. \n\n\n\n\n  You can now base a Related Product rule on a product attribute, such as color.\n\n\nWeb API Framework\n\n\n\n  The SOAP API no longer fails after you run bin/magento setup:di:compile.\n\n\n\n\n  You can now use REST to successfully update customer information without unintentionally deleting default billing and shipping address information.\n\n\n\n\n  You can now use REST to add a video to a product description. GitHub-7153\n\n\n\n\n\n\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.17EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-18ce-html": {
      "title": "Magento Open Source 2.0.18 Release Notes",
      "content": "Patch code and release notes were published on February 27, 2018.\n\nWe are pleased to present Magento Open Source 2.0.18. This release includes 35 enhancements to product security, a change to the Magento Admin to recent upcoming USPS shipping changes, and a copyright update. See Magento Security Center  for more information.\n\nAlthough this release includes these enhancements, no confirmed attacks related to these issues have occurred to date. However, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions, so we recommend that you upgrade your Magento software to the latest version as soon as possible.\n\n\n  The Magento Open Source 2.0.18 software release marks the final supported software release for Magento Open Source version 2.0.X. Magento Open Source 2.0.X will no longer receive security updates or product quality fixes now that its support window has expired.\n\n  To maintain the performance and security of your site, we advise you to upgrade to the latest version of Magento Open Source. We encourage you to reach out to your partners, developers, or Magento Customer Success contact for more information on upgrading your site.\n\n\nHighlights\n\nLook for the following highlights in this release:\n\n\n  \n    Enhancements that help close authenticated Admin user remote code execution, unauthorized data leaks, and cross-site request forgery (CSRF) vulnerabilities. See Magento Security Center for more information.\n  \n  \n    Change to Magento Admin to support upcoming USPS shipping changes. On February 23, 2018, USPS  removed APIs that support the creation of shipping labels without postage. In response, we’ve removed this functionality from the Magento Admin. Consequently, you cannot create and print shipping labels that do not have postage applied. If you require USPS postage printing capabilities, please visit Magento Shipping to learn more, and explore various shipping extensions on Magento Marketplace.\n  \n  \n    Updated copyright for 2018.\n  \n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For more information, see\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.18CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-18ee-html": {
      "title": "Magento Commerce 2.0.18 Release Notes",
      "content": "Patch code and release notes were published on February 27, 2018.\n\nWe are pleased to present Magento Commerce 2.0.18. This release includes 35 enhancements to product security, a change to the Magento Admin to support recent USPS shipping changes, and a copyright update. See Magento Security Center  for more information.\n\nAlthough this release includes these enhancements, no confirmed attacks related to these issues have occurred to date. However, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions, so we recommend that you upgrade your Magento software to the latest version as soon as possible.\n\n\n  The Magento Commerce 2.0.18 software release marks the final supported software release for Magento Commerce version 2.0.X. Magento Commerce 2.0.X will no longer receive security updates or product quality fixes now that its support window has expired, as defined by our Magento Commerce Support Service Terms.\n\n  To maintain the performance and security of your site, we advise you to upgrade to the latest version of Magento Commerce. We encourage you to reach out to your partners, developers, or Magento Customer Success contact for more information on upgrading your site.\n\n\nHighlights\n\nLook for the following highlights in this release:\n\n\n  \n    Enhancements that help close authenticated Admin user remote code execution, unauthorized data leaks, and cross-site request forgery (CSRF) vulnerabilities. See Magento Security Center for more information.\n  \n  \n    Change to Magento Admin to support upcoming USPS shipping changes. On February 23, 2018, USPS  removed APIs that support the creation of shipping labels without postage. In response, we’ve removed this functionality from the Magento Admin. Consequently, you cannot create and print shipping labels that do not have postage applied. If you require USPS postage printing capabilities, please visit Magento Shipping to learn more, and explore various shipping extensions on Magento Marketplace.\n  \n  \n    Updated copyright for 2018.\n  \n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. See\nSystem Requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    An updated version of this toolkit is typically available several days after the patch release.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n    Credits\n\n    Dear community members, thank you for your suggestions and bug reports.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.18EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-3ce-html": {
      "title": "Magento Open Source 2.0.3 Release Notes",
      "content": "Please note that Magento Open Source Edition 2.0.3 has been replaced by Magento 2.0.4. This release includes all of the security enhancements and performance improvements of Magento 2.0.3, in improved packaging. You must download and install 2.0.4 to ensure that you receive all the security enhancements of 2.0.3. Please see  Magento Open Source Release Notes 2.0.4 for download information.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.3CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-3ee-html": {
      "title": "Magento Commerce 2.0.3 Release Notes",
      "content": "Please note that Magento Commerce 2.0.3 has been replaced by Magento 2.0.4. This release includes all of the security enhancements and performance improvements of Magento 2.0.3, in improved packaging. You must download and install 2.0.4 to ensure that you receive all the security enhancements of 2.0.3. Please see  Magento Commerce Release Notes for download information.\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.3EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-4ce-html": {
      "title": "Magento Open Source 2.0.4 Release Notes",
      "content": "We are pleased to present Magento Open Source 2.0.4. This release includes all of the security enhancements and performance improvements of Magento 2.0.3, in improved packaging. You must download and install 2.0.4 to ensure that you receive all the security enhancements of 2.0.3.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n Upgrade and Installation\n\n\n  Magento no longer creates store data inconsistently during installation.\n\n\n\n\n  During upgrade, the setup:config:set script no longer deletes values in the env.php file.\n\n\nImport\n\n\n  Magento now successfully imports existing products as well as products that use custom URLs.\n\n\nAPIs\n\n\n  The Orders API now exposes the shipping address. This corrects an issue with using this API to integrate with third-party systems.\n\n\n\n\n  The SOAP API now returns attributes of type “text swatch” and “visual swatch” when you use the API to add attribute options. Previously, this feature did not work for these attribute types.\n\n\nPHP\n\n\n  Magento now allows you to use arguments of url type in nested arrays. Previously, you could pass route parameters only if the url argument was declared at the top level.\n\n\nMiscellaneous\n\n\n  Magento no longer displays HTML tags in messages.\n\n\n\n\n  Product performance has been enhanced when loading catalog products with multiple color swatches.\n\n\n\n\n  Magento now successfully saves and displays new customer attributes.\n\n\n\n\n  Magento performance has been improved by the removal of redundant get requests that previously occurred during shopping cart refresh.\n\n\nSecurity enhancements\nThis release includes several enhancements to improve the security of your Magento 2.0 installation. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento 2.0 installation to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\n\n\n  Issue with persistent cross-site scripting through a user account has been resolved.\n\n\n\n\n  Magento now supports setting limits on password attempts. Previously, Admin and Customer Token API access did not limit the number of attempts to enter a password, inadvertently allowing brute force attempts to guess passwords.\n\n\n\n\n  APIs that previously granted access to anonymous users are now configured to require a higher permission level.  Default product behavior does not permit anonymous access to Catalog, Store and CMS APIs. However, if you would like to allow anonymous access, you can change this setting.\n\n\n\n\n  Magento now prevents the arbitrary execution of PHP code through the language package CSV file.\n\n\n\n\n  The encryption keys that are generated in System &gt; Manage Encryption Key have been strengthened.\n\n\n\n\n  Reflected XSS can no longer occur through the Authorizenet module’s redirect data.\n\n\nWe recommend that you review Magento’s Security Best Practices, and confirm that all safeguards are in place to protect your system from compromise. Use this occasion to examine your system for indications of possible attack, such as strange administrator accounts, unfamiliar files on the server, etc. To receive direct notification from our security team regarding any emerging issues and solutions, sign up for the Security Alert Registry.\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later support PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Open Source 2.0.4 from an archive file on the Download page.\n\nDownload a new installation#####\n\n\n  \n    Go to the Magento Community Edition Download page.\n  \n  \n    Under Full Release, select a format for the download archive file. Then, click Download.\n  \n  \n    Follow the Magento installation instructions.\n  \n\n\nInstall a new installation with Composer#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Download with Composer, click Download.\n  \n  \n    Follow the instructions to download Composer, and get the Magento Open Source metapackage.\n  \n\n\nUpgrade existing installations\nIf you installed Magento Open Source 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to Admin with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nUpgrade an existing installation from the GitHub repository#####\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update Composer.\n  \n\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.4CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-4ee-html": {
      "title": "Magento Commerce 2.0.4 Release Notes",
      "content": "We are pleased to present Magento Commerce 2.0.4. This release includes all of the security enhancements and performance improvements of Magento 2.0.3, in improved packaging. You must download and install 2.0.4 to ensure that you receive all the security enhancements of 2.0.3.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n Upgrade and Installation\n\n\n  Magento no longer creates store data inconsistently during installation.\n\n\n\n\n  During upgrade, the setup:config:set script no longer deletes values in the env.php file.\n\n\nImport\n\n\n  Magento now successfully imports existing products as well as products that use custom URLs.\n\n\nAPIs\n\n\n  The Orders API now exposes the shipping address. This corrects an issue with using this API to integrate with third-party systems.\n\n\n\n\n  The SOAP API now returns attributes of type “text swatch” and “visual swatch” when you use the API to add attribute options. Previously, this feature did not work for these attribute types.\n\n\nPHP\n\n\n  Magento now allows you to use arguments of url type in nested arrays. Previously, you could pass route parameters only if the url argument was declared at the top level.\n\n\nMiscellaneous\n\n\n  Magento no longer displays HTML tags in messages.\n\n\n\n\n  Product performance has been enhanced when loading catalog products with multiple color swatches.\n\n\n\n\n  Magento now successfully saves and displays new customer attributes.\n\n\n\n\n  The Google Tag Manager module now sends impressions to the Magento Data layer.\n\n\n\n\n  Admin users can now view orders only from stores for which they have view  permission.\n\n\n\n\n  Magento performance has been improved by the removal of redundant get requests that previously occurred during shopping cart refresh.\n\n\nSecurity enhancements\nThis release includes several enhancements to improve the security of your Magento 2.0 installation. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento 2.0 installation to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\n\n\n  Issue with persistent cross-site scripting through a user account has been resolved.\n\n\n\n\n  Magento now supports setting limits on password attempts. Previously, Admin and Customer Token API access did not limit the number of attempts to enter a password, inadvertently allowing brute force attempts to guess passwords.\n\n\n\n\n  APIs that previously granted access to anonymous users are now configured to require a higher permission level.  Default product behavior does not permit anonymous access to Catalog, Store and CMS APIs. However, if you would like to allow anonymous access, you can change this setting.\n\n\n\n\n  Magento now prevents the arbitrary execution of PHP code through the language package CSV file.\n\n\n\n\n  The encryption keys that are generated in System &gt; Manage Encryption Key have been strengthened.\n\n\n\n\n  Reflected cross-site scripting (XSS) can no longer occur through the Authorizenet module’s redirect data.\n\n\nWe recommend that you review Magento’s Security Best Practices, and confirm that all safeguards are in place to protect your system from compromise. Use this occasion to examine your system for indications of possible attack, such as strange administrator accounts, unfamiliar files on the server, etc. To receive direct notification from our security team regarding any emerging issues and solutions, sign up for the Security Alert Registry.\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later supports PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Enterprise Edition 2.0.4 from an archive file.\n\nDownload a new installation#####\n\n  Go to the Magento website, and click My Account. Then, log in to your account.\n  \n    In the panel on the left, choose Downloads. Choose Magento Enterprise Edition 2.x, and do the following:\n\n    a.\tClick Magento Enterprise Edition 2.x Release.\n\n    b.\tIn the list, choose Version 2.0.4.\n\n    c.\tClick Download.\n  \n  Follow the instructions to upgrade and verify your installation. If you need help, go to the Support tab of your Magento account, and Open a Ticket.\n\n\nUpgrade existing installations\nIf you installed Magento Commerce 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to the Admin panel with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nMagento Partners#####\nMagento partners can download the release and the release notes in PDF format from the Partner Portal.\n\n\n  Log in to the Partner Portal.\n  Under Magento Commerce, choose Magento Commerce 2.x.\n  Find the Magento Commerce 2.x Release, and choose Version 2.0.4.\n\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.4EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-5ce-html": {
      "title": "Magento Open Source 2.0.5 Release Notes",
      "content": "We are pleased to present Magento Open Source 2.0.5. This release includes miscellaneous functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n Upgrade and Installation\n\n\n\n  Magento no longer assumes hard-coded root category IDs or default category IDs. Previously, Magento used hard-coded IDs for these values, which could produce inconsistent data during store installation.\n\n\nImport/Export\n\n\n\n  Product import now works successfully in a multi-store environment. Previously, Magento would display the following error message,  “URL key for specified store already exists”, when importing products into a multi-store configuration.\n\n\n\n\n  Export performance has been enhanced.  Pages no longer hang randomly, and CPU usage is no longer pegged.  (GITHUB-3217)\n\n\nDatabase\n\n\n\n  Magento no longer duplicates queries to the database from the Catalog page. Instead, if Magento has already loaded specific data during request processing, it re-uses it instead of duplicating the query.\n\n\n\n\n  Magento no longer duplicates SQL queries on CMS and Category pages. Previously, significant duplications occurred.\n\n\nMiscellaneous\n\n\n\n  Selecting the Use Aggregated Data option now correctly displays Dashboard data. (GITHUB-3459)\n\n\n\n\n  Magento now displays the expected color swatch when you select a color swatch for a configurable product. Previously, Magento did not change the color when you selected a swatch.\n\n\n\n\n  HTML template minification now properly handles commented code.\n\n\n\n\n  Deleting one of several custom options no longer deletes all options. Previously, deleting one option from the Product page also deleted all other custom options. (GITHUB-2989)\n\n\n\n\n  When Full Page Cache (FPC) is enabled, the CAPTCHA image differs for every user. Previously, the CAPTCHA image on the registration page remained the same for every customer after FPC was enabled.\n\n\n\n\n  Google no longer indexes the Admin URL. Previously, Google indexed the Admin side meta tag. The frontend meta tag was not affected.\n\n\n\n\n  Magento no longer sends a subscription success email whenever a customer enters his email address to subscribe to a newsletter. Users receive a “thank you for your subscription” message and a subscription success email only when registering for the first time.\n\n\n\n\n  Guests can now successfully click on the product page link for any item in an emailed shared wishlist.\n\n\n\n\n  Custom customer attributes are now saved at checkout.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later support PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Open Source 2.0.5 from an archive file on the Download page.\n\nDownload a new installation#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Full Release, select a format for the download archive file. Then, click Download.\n  \n  \n    Follow the Magento installation instructions.\n  \n\n\nInstall a new installation with Composer#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Download with Composer, click Download.\n  \n  \n    Follow the instructions to download Composer, and get the Magento Open Source metapackage.\n  \n\n\nUpgrade existing installations\nIf you installed Magento Open Source 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3/2.0.4 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to Admin with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nUpgrade an existing installation from the GitHub repository#####\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update Composer.\n  \n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.5CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-5ee-html": {
      "title": "Magento Commerce 2.0.5 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.5. This release includes miscellaneous functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n Upgrade and Installation\n\n\n\n  Magento no longer assumes hard-coded root category IDs or default category IDs. Previously, Magento used hard-coded IDs for these values, which could produce inconsistent data during store installation.\n\n\nImport/Export\n\n\n\n  Product import now works successfully in a multi-store environment. Previously, Magento would display the following error message,  “URL key for specified store already exists”, when importing products into a multi-store configuration.\n\n\n\n\n  Export performance has been enhanced.  Pages no longer hang randomly, and CPU usage is no longer pegged.  (GITHUB-3217)\n\n\nDatabase\n\n\n\n  Magento no longer duplicates queries to the database from the Catalog page. Instead, if Magento has already loaded specific data during request processing, it re-uses it instead of duplicating the query.\n\n\n\n\n  Magento no longer duplicates SQL queries on CMS and Category pages. Previously, significant duplications occurred.\n\n\nMiscellaneous\n\n\n\n  Selecting the Use Aggregated Data option now correctly displays Dashboard data. (GITHUB-3459)\n\n\n\n\n  Magento now displays the expected color swatch when you select a color swatch for a configurable product. Previously, Magento did not change the color when you selected a swatch.\n\n\n\n\n  HTML template magnification now properly handles commented code.\n\n\n\n\n  Deleting one of several custom options no longer deletes all options. Previously, deleting one option from the Product page also deleted all other custom options. (GITHUB-2989)\n\n\n\n\n  When Full Page Cache (FPC) is enabled, the CAPTCHA image differs for every user. Previously, the CAPTCHA image on the registration page remained the same for every customer after FPC was enabled.\n\n\n\n\n  Google no longer indexes the Admin URL. Previously, Google indexed the Admin side meta tag. The frontend meta tag was not affected.\n\n\n\n\n  Magento no longer sends a subscription success email whenever a customer enters his email address to subscribe to a newsletter. Users receive a “thank you for your subscription” message and a subscription success email only when registering for the first time.\n\n\n\n\n  Guests can now successfully click on the product page link for any item in an emailed shared wishlist.\n\n\n\n\n  Custom customer attributes are now saved at checkout.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later supports PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Commerce 2.0.5 from an archive file.\n\nDownload a new installation#####\n\n  Go to the Magento website, and click My Account. Then, log in to your account.\n  \n    In the panel on the left, choose Downloads. Choose Magento Commerce 2.x, and do the following:\n\n    a.\tClick Magento Commerce 2.x Release.\n\n    b.\tIn the list, choose Version 2.0.5.\n\n    c.\tClick Download.\n  \n  Follow the instructions to upgrade and verify your installation. If you need help, go to the Support tab of your Magento account, and Open a Ticket.\n\n\nUpgrade existing installations\nIf you installed Magento Commerce 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3/2.0.4 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to the Admin panel with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nMagento Partners#####\nMagento partners can download the release and the release notes in PDF format from the Partner Portal.\n\n\n  Log in to the Partner Portal.\n  Under Magento Commerce, choose Magento Commerce 2.x.\n  Find the Magento Commerce 2.x Release, and choose Version 2.0.5.\n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.5EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-6ce-html": {
      "title": "Magento Open Source 2.0.6 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.6. This release includes security enhancements as well as several functional fixes and enhancements.\n\n\n    2.0.6 contains important security updates. Please update to this version or use the latest available Magento version when starting a new project.\n\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n\n\n  Varnish no longer returns a 400 bad request error message when clearing its cache. Previously, this issue occurred with Magento instances running on GoDaddy.\n\n\nFunctional enhancements\n\n\n\n  Starting with Magento 2.0.6, Magento provides a more flexible way for you to set file ownership and permissions. Instead of setting permissions explicitly, you only need to make sure files and directories are writable for installation. We provide different suggestions for doing this, depending on whether you access your Magento server with one user account (typical of shared hosting) or two user accounts (typical of private hosting or having your own server). After installation, to further restrict access to files and directories, you can optionally create a file named magento_umask in your Magento root directory. By default, the umask is 002, which means that directories have 775 permissions and files have 664 permissions. For more details, see  Magento file system ownership and permissions.\n\n\n\n\n  You can now use the Redis adapter to provide session storage in Magento 2.0.6. For more information, see Redis for session storage.\n\n\nSecurity enhancements\nThis release includes  enhancements to improve the security of your Magento installation. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento installation to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\n\n\n  Magento no longer permits an unauthenticated user to remotely execute code on the server through APIs.\n\n\n\n\n  Magento no longer allows authenticated customers to change other customers’ account information using either SOAP or REST calls.  Magento  now confirms that the ID of the customer whose account is being edited matches the authentication token in use.\n\n\n\n\n  Anonymous users can no longer retrieve the private data of registered customers. To prevent malicious attacks of this type, the quote_id_mask table of the Quote API no longer includes a cart id mask value.\n\n\n\n\n  Several parameters in the Authorize.net payment module are vulnerable to reflected Cross-Site Scripting (XSS) attacks. Existing protection against such malicious parameters is not enough to stop all types of attacks.\n\n\n\n\n  Magento no longer allows users with minimum privileges (for example,  access to the dashboard only) to force re-installation of Magento, which could allow them to potentially execute malicious code.\n\n\n\n\n  The Magento installation code is no longer accessible once the installation process has completed.\n\n\n\n\n  When an integration is created, Magento now bases the OAuth consumer key expiration from when the token exchange begins instead of when the consumer key is created. (GITHUB-3449)\n\n\n\n\n  Only a registered customer can assign a guest cart to himself. Previously, an anonymous user could modify the state  (that is, set an active quote) of a registered customer.\n\n\n\n\n  Magento no longer discloses information about its internal path during installation.\n\n\n\n\n  Magento no longer discloses the administrator URL to an unauthenticated user during setup.\n\n\n\n\n  Application error messages no longer include the path to the file where the error occurred.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later support PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Open Source 2.0.6 from an archive file on the Download page.\n\nDownload a new installation#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Full Release, select a format for the download archive file. Then, click Download.\n  \n  \n    Follow the Magento installation instructions.\n  \n\n\nInstall a new installation with Composer#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Download with Composer, click Download.\n  \n  \n    Follow the instructions to download Composer, and get the Magento Open Source metapackage.\n  \n\n\nUpgrade existing installations\nIf you installed Magento Open Source 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3/2.0.4/2.0.5 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to Admin with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nUpgrade an existing installation from the GitHub repository#####\nDevelopers who contribute to the Open Source code base can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update Composer.\n  \n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.6CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-6ee-html": {
      "title": "Magento Commerce 2.0.6 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.6. This release includes security enhancements as well as several functional fixes and enhancements.\n\n\n    2.0.6 contains important security updates. Please update to this version or use the latest available Magento version when starting a new project.\n\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n\n\n  Varnish no longer returns a 400 bad request error message when clearing its cache. Previously, this issue occurred with Magento instances running on GoDaddy.\n\n\nFunctional enhancements\n\n\n\n  Starting with Magento 2.0.6, Magento provides a more flexible way for you to set file ownership and permissions. Instead of setting permissions explicitly, you only need to make sure files and directories are writable for installation. We provide different suggestions for doing this, depending on whether you access your Magento server with one user account (typical of shared hosting) or two user accounts (typical of private hosting or having your own server). After installation, to further restrict access to files and directories, you can optionally create a file named magento_umask in your Magento root directory. By default, the umask is 002, which means that directories have 775 permissions and files have 664 permissions. For more details, see  Magento file system ownership and permissions.\n\n\n\n\n  You can now use the Redis adapter to provide session storage in Magento 2.0.6. For more information, see Redis for session storage.\n\n\nSecurity enhancements\nThis release includes  enhancements to improve the security of your Magento installation. While there are no confirmed attacks related to these issues to date, certain vulnerabilities can potentially be exploited to access customer information or take over administrator sessions. We recommend that you upgrade your existing Magento installation to the latest version as soon as possible.\n\nThe following list provides an overview of the security issues fixed in this release. We describe each issue in greater detail in the Magento Security Center.\n\n\n\n  Magento no longer permits an unauthenticated user to remotely execute code on the server through APIs.\n\n\n\n\n  Magento no longer allows authenticated customers to change other customers’ account information using either SOAP or REST calls.  Magento  now confirms that the ID of the customer whose account is being edited matches the authentication token in use.\n\n\n\n\n  Anonymous users can no longer retrieve the private data of registered customers. To prevent malicious attacks of this type, the quote_id_mask table of the Quote API no longer includes a cart id mask value.\n\n\n\n\n  Several parameters in the Authorize.net payment module are vulnerable to reflected Cross-Site Scripting (XSS) attacks. Existing protection against such malicious parameters is not enough to stop all types of attacks.\n\n\n\n\n  Magento no longer allows users with minimum privileges (for example,  access to the dashboard only) to force re-installation of Magento, which could allow them to potentially execute malicious code.\n\n\n\n\n  The Magento installation code is no longer accessible once the installation process has completed.\n\n\n\n\n  When an integration is created, Magento now bases the OAuth consumer key expiration from when the token exchange begins instead of when the consumer key is created. (GITHUB-3449)\n\n\n\n\n  Only a registered customer can assign a guest cart to himself. Previously, an anonymous user could modify the state  (that is, set an active quote) of a registered customer.\n\n\n\n\n  Magento no longer discloses information about its internal path during installation.\n\n\n\n\n  Magento no longer discloses the administrator URL to an unauthenticated user during setup.\n\n\n\n\n  Application error messages no longer include the path to the file where the error occurred.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later supports PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Commerce 2.0.6 from an archive file.\n\nDownload a new installation#####\n\n  Go to the Magento website, and click My Account. Then, log in to your account.\n  \n    In the panel on the left, choose Downloads. Choose Magento Commerce 2.x, and do the following:\n\n    a.\tClick Magento Commerce 2.x Release.\n\n    b.\tIn the list, choose Version 2.0.6.\n\n    c.\tClick Download.\n  \n  Follow the instructions to upgrade and verify your installation. If you need help, go to the Support tab of your Magento account, and Open a Ticket.\n\n\nUpgrade existing installations\nIf you installed Magento Commerce 2.0.0 from an archive, you must perform some additional tasks before you can upgrade your installation. Current users of Magento 2.0.0/2.0.1/2.0.2/2.0.3/2.0.4/2.0.5 must first update the installer from the command line. Then, update the installation from the Web Setup Wizard or command line. For detailed instructions, see the technical bulletin.\n\nUpgrade an existing installation from the Setup Wizard#####\n\n\n  \n    Log in to the Admin panel with Administrator privileges.\n  \n  \n    On the Admin sidebar, click System. Under Tools,  choose Web Setup Wizard.\n  \n  \n    Click  System Upgrade. Follow the onscreen instructions to complete the upgrade.\n  \n\n\nFor more information, see Upgrade the Magento installation and components.\n\nMagento Partners#####\nMagento partners can download the release and the release notes in PDF format from the Partner Portal.\n\n\n  Log in to the Partner Portal.\n  Under Magento Commerce, choose Magento Commerce 2.x.\n  Find the Magento Commerce 2.x Release, and choose Version 2.0.6.\n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.6EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-7ce-html": {
      "title": "Magento Open Source 2.0.7 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.7. This release includes one functional fix.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issue\n\nThe payment gateway now works as expected in a Magento installation running PHP 7.0.3. Previously, when you would place an order in an installation running PHP 7.0.3, the checkout page would become unresponsive, and the transaction would not appear in the payment gateway. (GITHUB-2984, GITHUB-2878, GITHUB-3305, GITHUB-4076).\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later support PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Open Source 2.0.7 from an archive file on the Download page.\n\nDownload a new installation#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Full Release, select a format for the download archive file. Then, click Download.\n  \n  \n    Follow the Magento installation instructions.\n  \n\n\nInstall a new installation with Composer#####\n\n\n  \n    Go to the Magento Open Source Download page.\n  \n  \n    Under Download with Composer, click Download.\n  \n  \n    Follow the instructions to download Composer, and get the Magento Open Source metapackage.\n  \n\n\nUpgrade existing installations\n\nThis section discusses how to upgrade to 2.0.7.\n\nUpgrade using the Setup Wizard#####\nUse the instructions in Start System Upgrade. When prompted to choose a version, choose 2.0.7.\n\nUpgrade an existing installation from the GitHub repository#####\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nUpgrade using the command line#####\nTo upgrade to 2.0.7 using the command line:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the directory in which you installed the Magento software.\n\n    For example, cd /var/www/html/magento2\n  \n  \n    Enter the following command to disable the cache:\n\n    php bin/magento cache:disable\n    \n  \n  \n    Enter the following commands in the order shown:\n\n    composer require &lt;product&gt; 2.0.7 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Open Source 2.0.7, enter:\n\n    composer require magento/product-community-edition 2.0.7 --no-update\ncomposer update\n    \n  \n  \n    If prompted, enter your authentication keys.\n  \n  \n    Update the database schema and data:\n\n     php bin/magento setup:upgrade\n    \n  \n  \n    Enter the following command to enable the cache:\n\n    php bin/magento cache:enable\n    \n  \n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.7CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-7ee-html": {
      "title": "Magento Commerce 2.0.7 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.7. This release includes  several functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\n\n  \n    Resolved multiple issues with the accurate display of the contents of the cart, mini cart, and checkout,  including:\n\n    \n      \n        Estimated shipping and taxes. Previously, these values were not always displayed consistently.\n      \n      \n        Checkout. Previously, the checkout process did not display all items.\n      \n      \n        Contents of the mini cart. Previously, mini cart sometimes appeared empty when it actually contained items.\n      \n      \n        When a user first logged in, the User menu did not display the expected information about him.\n      \n    \n  \n  \n    The payment gateway now works as expected in a Magento installation running PHP 7.0.3. Previously, when you would place an order in an installation running PHP 7.0.3, the checkout page would become unresponsive, and the transaction would not appear in the payment gateway.  (GITHUB-2984, GITHUB-2878, GITHUB-3305, GITHUB-4076).\n  \n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. Magento 2.0.1 and later supports PHP 5.5, 5.6, 7.0.2, and MySQL 5.6. For more information, see \nSystem Requirements.\n\nInstallation instructions\n\nNew installations\nNew users can now complete a full installation of Magento Commerce 2.0.7 from an archive file.\n\nDownload a new installation#####\n\n  Go to the Magento website, and click My Account. Then, log in to your account.\n  \n    In the panel on the left, choose Downloads. Choose Magento Commerce 2.x, and do the following:\n\n    a.\tClick Magento Commerce 2.x Release.\n\n    b.\tIn the list, choose Version 2.0.7.\n\n    c.\tClick Download.\n  \n  Follow the instructions to upgrade and verify your installation. If you need help, go to the Support tab of your Magento account, and Open a Ticket.\n\n\nUpgrade existing installations\n\nThis section discusses how to upgrade to Magento Commerce 2.0.7.\n\nUpgrade using the Setup Wizard#####\nUse the instructions in Start System Upgrade. When prompted to choose a version, choose 2.0.7.\n\nUpgrade an existing installation from the GitHub repository#####\nDevelopers who contribute to the codebase can upgrade manually from the Magento Commerce GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nUpgrade using the command line#####\nTo upgrade to Magento Commerce 2.0.7 using the command line:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the directory in which you installed the Magento software.\n\n    For example, cd /var/www/html/magento2\n  \n  \n    Enter the following command to disable the cache:\n\n    php bin/magento cache:disable\n    \n  \n  \n    Enter the following commands in the order shown:\n\n    composer require &lt;product&gt; 2.0.7 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Commerce 2.0.7, enter:\n\n    composer require magento/product-enterprise-edition 2.0.7 --no-update\ncomposer update\n    \n  \n  If prompted, enter your authentication keys.\n  \n    Update the database schema and data:\n\n     php bin/magento setup:upgrade\n    \n  \n  \n    Enter the following command to enable the cache:\n\n    php bin/magento cache:enable\n    \n  \n\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\nThe Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.7EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-8ce-html": {
      "title": "Magento Open Source 2.0.8 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.8. This release includes  several functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\nInstallation and upgrade\n\n\n\n  Magento no longer throws a fatal error when you run the setup upgrade command in environments running PHP 7.0.5.\n\n\nProduct creation\n\n\n  Magento  no longer duplicates URL keys during the creation of a configurable product.\n\n\n\n\n  Magento now supports GLOB_BRACE on non-GNU Linux systems. (GITHUB-3490)\n\n\nMiscellaneous\n\n\n  You can now successfully reset the Product Attributes mass update Admin form.\n\n\n\n\n  We’ve improved the implementation of the Magento\\Sales\\Model\\OrderRepository::getList() function.  (GITHUB-3018)\n\n\n\n\n  Magento now displays error messages on the page where the error occurred. Previously, error messages invoked by actions on the login page were not displayed until you left that page.\n\n\n\n\n  Magento now sends email using a store’s specific email address when an Admin sends email. Previously, Magento would send email from the default instance email address instead of the store address.\n\n\n\n\n  Magento now correctly displays the customer address on the storefront. Previously,  when you selected a default billing address when creating a new customer account, Magento would not display the  address.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For details, see Technology stack requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.8CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-8ee-html": {
      "title": "Magento Commerce 2.0.8 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.8. This release includes several functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\nInstallation and upgrade\n\n\n\n  You can now successfully uninstall Magento_CustomerBalanceSampleData.\n\n\n\n\n  Magento no longer throws a fatal error when you run the setup upgrade command in environments running PHP 7.0.5.\n\n\nProduct creation\n\n\n  Magento  no longer duplicates URL keys during the creation of a configurable product.\n\n\n\n\n  Magento now supports GLOB_BRACE on non-GNU Linux systems. (GITHUB-3490)\n\n\nMiscellaneous\n\n\n\n  Magento now correctly displays the customer address on the storefront. Previously,  when you selected a default billing address when creating a new customer account, Magento would not display the  address.\n\n\n\n\n  You can now successfully reset the Product Attributes mass update Admin form.\n\n\n\n\n  The Admin Action Log archive is now formatted as expected.\n\n\n\n\n  We’ve improved the implementation of the Magento\\Sales\\Model\\OrderRepository::getList() function.  (GITHUB-3018)\n\n\n\n\n  Magento now displays error messages on the page where the error occurred. Previously, error messages invoked by actions on the login page were not displayed until you left that page.\n\n\n\n\n  Magento now sends email using a store’s specific email address when an Admin sends email. Previously, Magento would send email from the default instance email address instead of the store address.\n\n\n\n\n  Solr search now returns search results as expected from both English and Spanish stores. Previously, Solr returned results for the English site but not for the Spanish site.\n\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For details, see Technology stack requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.8EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-9ce-html": {
      "title": "Magento Open Source 2.0.9 Release Notes",
      "content": "We are pleased to present Magento Open Source (formerly Community Edition) 2.0.9. This release includes several functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\nShopping cart\n\n\n\n  Magento no longer displays an incorrect price in the shopping cart when using multiple shipping addresses.\n\n\n\n\n  The Minicart Maximum Display Recently Added Item setting now works as expected.  Previously, Magento displayed all the items in the shopping cart, even when the number of items exceeded this limit. (GITHUB-4750)\n\n\nPerformance\n\n\n\n  We’ve improved storefront performance when you use many variations of a configurable product.\n\n\nMiscellaneous\n\n\n\n  Cart Price Rules are now applied as expected to Payment method conditions. Previously, discounts set in Cart Price Rules were not applied during checkout.\n\n\n\n\n  You can now save a product for which you’ve entered no Swatch attribute value when this attribute is not required.  Previously, during product creation, Magento would not save the product unless you added a value to the swatch attribute even with “Values Required” set to No.\n\n\n\n\n  Attributes of the salesInvoiceRepository methods are now correctly type cast. (The datatype is now a float – not nullable float.)  Previously, due to the use of an incorrect data type cast, Magento would produce an error when calling the salesInvoiceRepositoryV1GetList methods. (GITHUB-3605)\n\n\n\n\n  We’ve renamed the Tier Price option on the Advanced Pricing tab to Customer Group Price option.\n\n\n\n\n  Tier pricing now works correctly with full page cache. (GITHUB-5364)\n\n\n\n\nKnown issue\n\n\nThe Sales API does not currently support all the update operations on objects that you can execute from the Admin panel. (Objects in this context include orders, invoices, shipments, credit memos, and return merchandise authorizations.)\n\nThe Sales API\n\n\n  \n    supports create, read, delete, and search operations on objects\n  \n  \n    does not support updates to order status or payment status. (Order status includes change to processing, shipped, processed, and hold, while payment status includes authorized, charged, reject, and refund.)\n  \n\n\nYou can run these operations from the Admin panel.\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For details, see Technology stack requirements\n{:target=”_blank”}.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Open Source using Composer\n    Get Magento Open Source using a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  This software is available from repo.magento.com. Before installing the Open Source software using Composer, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install Magento Open Source 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.0.10 magento2\n  \n\n  Get Magento Open Source using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.9CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-0-9ee-html": {
      "title": "Magento Commerce 2.0.9 Release Notes",
      "content": "We are pleased to present Magento Commerce (formerly Enterprise Edition) 2.0.9. This release includes several functional fixes.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nFixed issues\n\nShopping cart\n\n\n\n  Magento no longer displays an incorrect price in the shopping cart when using multiple shipping addresses.\n\n\n\n\n  The Minicart Maximum Display Recently Added Item setting now works as expected.  Previously, Magento displayed all the items in the shopping cart, even when the number of items exceeded this limit. (GITHUB-4750)\n\n\nPerformance\n\n\n\n  We’ve improved storefront performance when you use many variations of a configurable product.\n\n\nMiscellaneous\n\n\n\n  \n    Cart Price Rules are now applied as expected to Payment method conditions. Previously, discounts set in Cart Price Rules were not applied during checkout.\n  \n  \n    You can now select Gift Wrapping when purchasing a Grouped product. Previously, Magento did not permit you to select Gift Wrapping for a Grouped product.  (GITHUB-4852)\n  \n\n\n\n\n  You can now save a product for which you’ve entered no Swatch attribute value when this attribute is not required.  Previously, during product creation, Magento would not save the product unless you added a value to the swatch attribute even with “Values Required” set to No.\n\n\n\n\n  Attributes of the salesInvoiceRepository methods are now correctly type cast. (The datatype is now a float – not nullable float.)  Previously, due to the use of an incorrect data type cast, Magento would produce an error when calling the salesInvoiceRepositoryV1GetList methods. (GITHUB-3605)\n\n\n\n\n  We’ve renamed the Tier Price option on the Advanced Pricing tab to Customer Group Price option.\n\n\n\n\n  Tier pricing now works correctly with full page cache. (GITHUB-5364)\n\n\n\n\nKnown issue\n\n\nThe Sales API does not currently support all the update operations on objects that you can execute from the Admin panel. (Objects in this context include orders, invoices, shipments, credit memos, and return merchandise authorizations.)\n\nThe Sales API\n\n\n  \n    supports create, read, delete, and search operations on objects\n  \n  \n    does not support updates to order status or payment status. (Order status includes change to processing, shipped, processed, and hold, while payment status includes authorized, charged, reject, and refund.)\n  \n\n\nYou can run these operations from the Admin panel.\n\nSystem requirements\nOur technology stack is built on PHP and MySQL. For details, see Technology stack requirements.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  This software is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; matches the version you want (for example, 2.0.10)\n\n  For example, to install 2.0.10 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.0.10 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the Magento software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to version 2.0.x from an earlier version:\n\n    \n      Web Setup Wizard (System Upgrade)\n      Command-line upgrade\n    \n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n    The Code Migration Toolkit helps transfer existing Magento 1.x store extensions and customizations to Magento 2.0.x. The command-line interface includes scripts for converting Magento 1.x modules and layouts.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.0.9EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc1ce-html": {
      "title": "Magento Open Source 2.1 Release Candidate 1 (RC1) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 1 (RC1). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against  2.1\n  \n\n\nWe welcome your participation in this process!  Please open any Open Source issues or Pull Requests on the Open Source GitHub repository. For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nHighlights\nMagento Open Source 2.1 includes several new features:\n\n\n  \n    PayPal in-context checkout helps to increase conversion rates by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit card capabilities allow merchants to securely store credit cards with PayPal so shoppers can make future purchases without re-entering their credit card information.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive card holder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin interface, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nKnown issue\n\nIssue: Enabling Varnish causes the category menu to switch from http to https (GITHUB-4540)\n\nWork-around: To use Varnish caching with an HTTP site, add rewrite rules such as the following in Magento’s root .htaccess:\n\nRewriteCond %{HTTPS} on\nRewriteCond %{REQUEST_URI} /yellow-fruit.html\nRewriteRule (.*) http://%{HTTP_HOST}%{REQUEST_URI} [L]\n\nRewriteCond %{HTTPS} on\nRewriteCond %{REQUEST_URI} /red-fruit.html\nRewriteRule (.*) http://%{HTTP_HOST}%{REQUEST_URI} [L]\n\nFixed issues\n\nThis release includes fixes for the following GitHub issues:\n\n\n\n  Integration test syntax error has been fixed. (GITHUB-4343)\n\n\n\n\n  Web APIs no longer allow anonymous access by default. (GITHUB-3786)\n\n\n\n\n  The OAuth Token exchange expiration period is now calculated correctly. (GITHUB-3449)\n\n\n\n\n  Shipping Address is now exposed for the Orders API. (GITHUB-2628)\n\n\n\n\n  A Credit Memo REST API issue with updating attributes has been fixed. Previously, certain attributes (such as Order Status) were not updated when the user took action through the API. However, Magento updates these attributes when the same action is completed in the Admin interface. (GITHUB-4329)\n\n\n\n\n  Varnish caching performance has been enhanced. (GITHUB-3926)\n\n\n\n\n  Product update operations by either customers or store administrators no longer result in locking queries on catalog category product index. (GITHUB-4342)\n\n\n\n\n  The Order Repository getList method no longer returns the same shipping address for all orders. (GITHUB-4019)\n\n\n\n\n  A configurable product’s last attribute with price of zero (0) no longer results in an error. The user can configure the product, and the correct price results. (GITHUB-3912)\n\n\n\n\n  An error message that users typically received during upgrade has been improved. The message now clearly states when a user must login first to magento.com before continuing the upgrade process. (GITHUB-3059)\n\n\n\n\n  Magento now displays the correct product prices on the Configurable product page when catalog prices include tax. (GITHUB-2471)\n\n\n\n\n  The i18n:collect-phrases -m command now works correctly. Previously, this command would not find all important Magento phrases. (GITHUB-2630)\n\n\n\n\n  Plugins/interceptors now work with early stage single instance objects in Developer mode. (GITHUB-2674)\n\n\n\n\n  Admin order creation no longer fails when the “Include Tax In Order Total” option is set to yes. (GITHUB-2675)\n\n\n\n\n  The setup:di:compile script now compiles all files as expected. (GITHUB-2888)\n\n\n\n\n  Synonyms now work as expected with Magento 2.x.  (GITHUB-2519)\n\n\n\n\n  Attribute ‘setup_version’ is missing for module error when defined as optional. (GITHUB-1493)\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\nInstallation and upgrade instructions\nYou can install Magento Open Source 2.1 Release Candidate 1 (RC1) from either Github or by using Composer.\nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\nSee one of the following sections:\n\n\n  Install from GitHub\n  Install using Composer\n  Upgrade existing installations\n\n\nInstall from GitHub\nBefore proceeding, please familiarize yourself with these prerequisites, then run\n\ngit clone git@github.com:magento/magento2.git\n\ngit checkout tags/2.1.0-rc1 [-b 2.1.0-rc1]\n\nInstall using Composer\nThis Release Candidate is available from repo.magento.com. Before installing this Release Candidate using Composer,  familiarize yourself with the Composer metapackage  prerequisites, then run\n\ncomposer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.1.0-rc1 &lt;installation directory name&gt;\n\n\nUpgrade existing installations\nThis section discusses how to upgrade to a Release Candidate.\n\n\n    Do not upgrade to a Release Candidate on a production system. Upgrade to a Release Candidate on a development system only.\n\n\nUpgrade an existing installation from the GitHub repository\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nOther upgrades\nOther types of upgrades are discussed in Upgrade to Magento version 2.1 (June 22, 2016).\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC1CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc1ee-html": {
      "title": "Magento Commerce 2.1 Release Candidate 1 (RC1) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 1 (RC1). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against  2.1\n  \n\n\nWe welcome your participation in this process! Magento Commerce customers can provide feedback in these two ways:\n\n\n  \n    Magento Commerce GitHub repository.  For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n  \n  \n    Email to DL-Magento-2.1-Feedback@magento.com.\n  \n\n\nThis Release Candidate is available from repo.magento.com if you have an Magento Commerce license or GitHub  if you have previously signed an agreement to access Magento Commerce 2.0 beta software on GitHub.\n\nBackward-incompatible changes are documented in Magento 2.0 Backward Incompatible Changes.\n\nHighlights\n\nMagento Commerce (formerly Enterprise Edition) 2.1 includes several new features:\n\n\n  \n    Content Staging and Preview improves productivity by enabling business teams to easily create, preview, and schedule a wide range of content updates without involving IT. Merchants can make updates to products, categories, CMS content, promotions, and pricing and can preview these changes based on specific dates and times or store views. User-friendly dashboards provide greater visibility into all planned site changes and updates can be automatically deployed at scheduled times.\n  \n  \n    Elasticsearch is a next-generation search technology that is replacing Solr in Magento Commerce 2.1. It is simpler to set up, able to handle large catalogs, and can easily scale as search volume grows. It supports 33 languages out-of-the-box, and merchants can configure stop words and synonyms to ensure high quality search results.\n  \n  \n    PayPal in-context checkout helps to increase conversion rates by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit card capabilities allow merchants to securely store credit cards with PayPal so shoppers can make future purchases without re-entering their credit card information.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive cardholder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nKnown issue\n\nIssue: Enabling Varnish causes the category menu to switch from http to https (GITHUB-4540)\n\nWork-around: To use Varnish caching with an HTTP site, add rewrite rules such as the following in Magento’s root .htaccess:\n\nRewriteCond %{HTTPS} on\nRewriteCond %{REQUEST_URI} /yellow-fruit.html\nRewriteRule (.*) http://%{HTTP_HOST}%{REQUEST_URI} [L]\n\nRewriteCond %{HTTPS} on\nRewriteCond %{REQUEST_URI} /red-fruit.html\nRewriteRule (.*) http://%{HTTP_HOST}%{REQUEST_URI} [L]\n\nFixed issues\n\nThis release includes fixes for the following GitHub issues:\n\n\n\n  Integration test syntax error has been fixed. (GITHUB-4343)\n\n\n\n\n  Web APIs no longer allow anonymous access by default. (GITHUB-3786)\n\n\n\n\n  The OAuth Token exchange expiration period is now calculated correctly. (GITHUB-3449)\n\n\n\n\n  Shipping Address is now exposed for the Orders API. (GITHUB-2628)\n\n\n\n\n  A Credit Memo REST API issue with updating attributes has been fixed. Previously, certain attributes (such as Order Status) were not updated when the user took action through the API. However, Magento updates these attributes when the same action is completed in the Admin interface. (GITHUB-4329)\n\n\n\n\n  Varnish caching performance has been enhanced. (GITHUB-3926)\n\n\n\n\n  Product update operations by either customers or store administrators no longer result in locking queries on catalog category product index. (GITHUB-4342)\n\n\n\n\n  The Order Repository GetList method no longer returns the same shipping address for all orders. (GITHUB-4019)\n\n\n\n\n  A configurable product’s last attribute with price of zero (0) no longer results in an error. The user can configure the product, and the correct price results. (GITHUB-3912)\n\n\n\n\n  An error message that users typically received during upgrade has been improved. The message now clearly states when a user must login first to magento.com before continuing the upgrade process. (GITHUB-3059)\n\n\n\n\n  Magento now displays the correct product prices on the Configurable product page when catalog prices include tax. (GITHUB-2471)\n\n\n\n\n  The i18n:collect-phrases -m command now works correctly. Previously, this command would not find all important Magento phrases. (GITHUB-2630)\n\n\n\n\n  Plugins/interceptors now work with early stage single instance objects in Developer mode. (GITHUB-2674)\n\n\n\n\n  Admin order creation no longer fails when the “Include Tax In Order Total” option is set to yes. (GITHUB-2675)\n\n\n\n\n  The setup:di:compile script now compiles all files as expected. (GITHUB-2888)\n\n\n\n\n  Synonyms now work as expected with Magento 2.x.  (GITHUB-2519)\n\n\n\n\n  Attribute ‘setup_version’ is missing for module error when defined as optional. (GITHUB-1493)\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\n\nInstallation and upgrade instructions\nYou can install Magento Commerce 2.1 Release Candidate 1 (RC1) using Composer.\n\nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\nSee one of the following sections:\n\n\n  Install using Composer\n  Upgrade existing installations\n  Upgrade to an RC with sample data\n\n\nInstall using Composer\nThis Release Candidate is available from repo.magento.com. Before installing this Release Candidate using Composer,  familiarize yourself with these  prerequisites, then run:\n\n\tcomposer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.1.0-rc2 &lt;installation directory name&gt;\n\n\nUpgrade existing installations\nThis section discusses how to upgrade to a Release Candidate without sample data.\n\nIf you installed optional sample data, see Upgrade to an RC with sample data instead.\n\n\n    Do not upgrade to a Release Candidate on a production system. Upgrade to a Release Candidate on a development system only.\n\n\nUpgrade using the Setup Wizard\nUse the instructions in Start System Upgrade. When prompted to choose a version, choose a Release Candidate.\n\nUpgrade an existing installation from the GitHub repository\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nUpgrade using the command line\n\nTo upgrade to a Release Candidate using the command line: \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the directory in which you installed the Magento software.\n\n    For example, cd /var/www/html/magento2\n  \n  \n    Enter the following commands in the order shown:\n\n    composer require &lt;product&gt; 2.1.0-rc1 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Open Source 2.1 RC1, enter:\n\n    composer require magento/product-community-edition 2.1.0-rc1 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Commerce 2.1 RC1, enter:\n\n    composer require magento/product-enterprise-edition 2.1.0-rc1 --no-update\ncomposer update\n    \n  \n  If prompted, enter your authentication keys.\n  \n    Update the database schema and data:\n\n     php bin/magento setup:upgrade\n    \n  \n\n\n\nUpgrade to an RC with sample data\n\n\n\n  These instructions apply to Magento Community Edition (CE) and Magento Enterprise Edition (EE) users only if all of the following are true:\n\n  \n    You have installed optional sample data\n    You’re upgrading to Magento 2.1 (including a Release Candidate) from any earlier version using the command line\n  \n\n  Click to expand/collapse content To upgrade to Magento 2.1 sample data using the command line:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to the Magento installation directory.\n  \n    Back up your current composer.json:\n\n    cp composer.json composer.json.bak\n    \n  \n  \n    Enter one of the following commands to upgrade the Magento software version to 2.1.0 (GA release):\n\n    composer require &lt;product&gt; &lt;version&gt; --no-update\ncomposer require &lt;sample data module-1&gt;:&lt;version&gt; ... &lt;sample data module-n&gt;:&lt;version&gt; --no-update\n    \n\n    \n      \n        Magento Open Source:\n\n        composer require magento/product-community-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 --no-update \n        \n      \n      \n        Magento EE:\n\n        composer require magento/product-enterprise-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 magento/module-gift-card-sample-data:100.1.0 magento/module-customer-balance-sample-data:100.1.0 magento/module-target-rule-sample-data:100.1.0 magento/module-gift-registry-sample-data:100.1.0 magento/module-multiple-wishlist-sample-data:100.1.0 --no-update\n        \n      \n    \n\n    \n  \t\tTo upgrade to a Release Candidate, append -rc&lt;x&gt; to the version of each module. For example, -rc3.\n\n  \n  \n    Update dependencies:\n\n    composer update\n    \n  \n  If prompted, enter your authentication keys.\n  Wait for dependencies to update.\n\n\nFinish your upgrade\nAfter you’ve reset file system permissions:\n\n\n  If you haven’t done so already, log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to your Magento installation directory.\n  \n    Manually clear the var/cache, var/page_cache, and var/generation directories.\n\n    A sample command follows:\n\n    rm -rf var/cache/* var/page_cache/* var/generation/*\n    \n  \n  \n    Enter the following command from your Magento installation directory:\n\n    php bin/magento setup:upgrade\n    \n  \n\n\n\n\n  Apply file system permissions and ownership\n  As part of the sample data upgrade process, you must apply current file system permission and ownership as discussed in the following sections. Failure to do so will cause your upgrade to fail.\n\n  For more information about file system ownership and permissions since the Magento 2.0.6 release, see Overview of ownership and permissions.\n\n  One-user ownership and permissions\n  If you run the Magento application as one user (which is typical of shared hosting environments), change file system permissions and ownership as follows:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\;\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\; &amp;&amp; chmod u+x bin/magento\n  \n\n  After you set file system permissions, manually clear the var/cache, var/page_cache, and var/generation directories.\n\n  A sample command follows:\n\n  rm -rf var/cache/* var/page_cache/* var/generation/*\n  \n\n  Two-user ownership and permissions\n  If you run the Magento application with two users, enter the following commands as a user with root privileges:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nchown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n\n\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC1EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc2ce-html": {
      "title": "Magento Open Source 2.1 Release Candidate 2 (RC2) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 2 (RC2). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against  2.1\n  \n\n\nWe welcome your participation in this process!  Please open any Open Source  issues or Pull Requests on the Open Source GitHub repository. For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n\nBackward-incompatible changes are documented in Magento 2.1 Backward Incompatible Changes.\n\nHighlights\n\nMagento Open Source (formerly Community Edition) 2.1 includes several new and exciting features:\n\n\n  \n    PayPal enhancements include PayPal in-context checkout and saved credit cards. In-context checkout helps to increase conversion rates 69 bps by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit cards boost repeat purchases by allowing merchants to securely store credit card information with PayPal so customers do not need to re-enter it in checkout or when reordering items from the Admin interface.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive cardholder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin interface.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nKnown issues\nMagento Open Source 2.1, Release Candidate 2 includes the following known issues:\n\n\n\n  Magento does not apply the Cart Price or Catalog Price sales rules accordingly to the store  website’s timezone, as expected.\n\n\n\n\n  You cannot update from Magento 2.0.x to Magento 2.1.x with Sample Data.\n\n\nFixed issues\n\n\nCheckout\n\n\n  Several address-related issues associated with Checkout have been resolved.\n\n\n\n\n  Customers with an existing saved address can now add a new address during checkout.\n\n\n\n\n  Clicking the Reorder button now loads products as expected when persistent shopping cart is enabled.\n\n\n\n\n  The Go to Checkout button now works as expected. Previously, when you clicked the Go to Checkout button, Magento would display a login pop-up window.\n\n\n\n\n  Checkout now works as expected when purchasing products during a persisted session.\n\n\nBundle products\n\n\n\n  The Add Products to Option button now works as expected when you create a new update for a Bundle product.\n\n\n\n\n  Quotation marks can now be included in Bundle product names.  (GITHUB-4414)\n\n\nMiscellaneous\n\n\n  Reflected cross-site scripting (XSS) can no longer occur through the Authorizenet module’s redirect data.\n\n\n\n\n  Admin User sessions no longer expire prematurely in installations running Redis for session storage. Previously, you were directed back to the login page after logging in to the Admin panel, waiting a short period time (less than the Admin Session Lifetime value), and trying to navigate to the Dashboard.\n\n\n\n\n  Magento now returns available services in WSDL schema.  Previously, you could not process SOAP requests as expected.\n\n\n\n\n  Fatal errors no longer occur when running CLI commands after compilation in some regression environments.\n\n\n\n\n  You can now save a product after applying an update for it.\n\n\n\n\n  Newly created categories now appear as expected on the Navigation menu.\n\n\n\n\n  Magento no longer references empty targets in other targets.\n\n\n\n\n  You can now run all integration tests in developer mode.\n\n\n\n\n  Category pages now display swatches of configurable products based on color swatch attribute.\n\n\n\n\n  Magento now successfully saves future special dates in the Advanced Price page.\n\n\n\n\n  You can now filter entries in the Product Reviews report by date.\n\n\n\n\n  Catalog Price Rules are now applied as expected, depending upon the time frame  stated in the Price Rule.\n\n\n\n\n  The permissions set for a category are now applied as expected.\n\n\n\n\n  After you install and enable a module, the System &gt; Extensions &gt; Integrations page lists the new Integration generated by the module.  (GITHUB-4023)\n\n\n\n\n  Phrases with escaped slash characters are now translated. Previously, if a phrase were wrapped with single quotes, Magento would not display it correctly.\n\n\n\n\n  Downloadable products are no longer shown as out of stock on the Category page.\n\n\n\n\n  Changes to Customer group are now immediately applied to logged-in customers.\n\n\n\n\n  You can now successfully save products with custom options.\n\n\n\n\n  You can now configure a product whose last attribute has a price of zero, and the correct total price results.  (GITHUB-3912)\n\n\n\n\n  Optional dropdown product attributes can now be left blank.\n\n\n\n\n  Magento now successfully migrates data when Google Analytics’s “Content Experiments” is enabled.\n\n\n\n\n  Cart now updates and lists rates for custom shipping methods as expected when you change the shipping address.  (GITHUB-4679)\n\n\n\n\n  You can now view configurable products when using sample data.\n\n\n\n\n  Layered navigation now includes a list of all product attributes.\n\n\n\n\n  The collectRates() method now obtains the full address details for a registered customer.\n\n\n\n\n  The Customer Address tab is populated as expected after you create a new order. Previously, Magento did not list addresses on this tab when you’d create a new order.\n\n\n\n\n  Logo folders have been added to the list of allowed resources.  (GITHUB-4078)\n\n\n\n\n  The Force Sign-in button now works as expected.\n\n\n\n\n  Magento no longer makes unexpected calls when you view a product in the storefront.\n\n\n\n\n  You can now reorder a product with a required custom option (type = file). Previously, if you tried to reorder a product under these conditions, you would encounter an error when opening the shopping cart.\n (GITHUB-4058)\n\n\n\n\n  Gift Message information is now present as expected in the extension_attributes when you request this list by Web API.  Previously, if you placed an order with a Gift Message, and then performed a Web API request to get the list of orders, Gift Message information would be absent in the extension_attributes.  (GITHUB-4309)\n\n\n\n\n  The getPassword() and getPasswordConfirm() methods now return the password and passwordconfirm parameters as strings.  (GITHUB-4355)\n\n\nMessages and documentation\n\n\n\n  The getList method documentation has been enhanced.\n\n\n\n\n  Error messages associated with cron processes are now more helpful.  (GITHUB-3189)\n\n\n\n\n  Magento now displays an appropriate  message when you add less than the required minimum items in your cart.\n\n\n\n\n  Message serialization now complies with AMPQ specifications.\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\n\nInstallation and upgrade instructions\nYou can install Magento Open Source 2.1 Release Candidate 1 (RC1) from either Github or by using Composer.\nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\nSee one of the following sections:\n\n\n  Install from GitHub\n  Install using Composer\n  Upgrade existing installations\n  Upgrade to an RC with sample data\n\n\nInstall from GitHub\nBefore proceeding, please familiarize yourself with these prerequisites, then run\n\ngit clone git@github.com:magento/magento2.git\n\ngit checkout tags/2.1.0-rc2 [-b 2.1.0-rc2]\n\n\nInstall using Composer\nThis Release Candidate is available from repo.magento.com. Before installing this Release Candidate using Composer,  familiarize yourself with the Composer metapackage  prerequisites, then run\n\ncomposer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.1.0-rc1 &lt;installation directory name&gt;\n\n\nUpgrade existing installations\nThis section discusses how to upgrade to a Release Candidate.\n\n\n    Do not upgrade to a Release Candidate on a production system. Upgrade to a Release Candidate on a development system only.\n\n\nUpgrade an existing installation from the GitHub repository\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nOther upgrades\nOther types of upgrades are discussed in Upgrade to Magento version 2.1 (June 22, 2016).\n\nMigration toolkits\nThe Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC2CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc2ee-html": {
      "title": "Magento Commerce 2.1 Release Candidate 2 (RC2) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 2 (RC2). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against  2.1\n  \n\n\nWe welcome your participation in this process! Enterprise Edition customers can provide feedback in these two ways:\n\n\n  \n    Magento Commerce GitHub repository.  For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n  \n  \n    Email to DL-Magento-2.1-Feedback@magento.com.\n  \n\n\nThis Release Candidate is available from repo.magento.com if you have a Magento Commerce license or GitHub  if you have previously signed an agreement to access Magento Commerce 2.0 beta software on GitHub.\n\nBackward-incompatible changes are documented in Magento 2.1 Backward Incompatible Changes.\n\nHighlights\n\nMagento Commerce 2.1 includes several new and exciting features:\n\n\n  \n    Content Staging and Preview improves productivity by enabling business teams to easily create, preview, and schedule a wide range of content updates without involving IT. Merchants can make updates to products, categories, CMS content, promotions, and pricing and can preview these changes based on specific dates and times or store views. User-friendly dashboards provide greater visibility into all planned site changes and updates can be automatically deployed at scheduled times.\n  \n  \n    Elasticsearch is a next-generation search technology that is replacing Solr in Magento Enterprise Edition 2.1. It is simpler to set up, able to handle large catalogs, and can easily scale as search volume grows. It supports 33 languages out-of-the-box and merchants can configure stop words and synonyms to ensure high quality search results.\n  \n  \n    PayPal enhancements include PayPal in-context checkout and saved credit cards. In-context checkout helps to increase conversion rates 69 bps by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit cards boost repeat purchases by allowing merchants to securely store credit card information with PayPal so customers do not need to re-enter it in checkout or when reordering items from the Admin interface.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive cardholder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin interface.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nKnown issues\nMagento 2.1 RC2 includes the following known issues:\n\n\n\n  Magento does not apply the Cart Price or Catalog Price sales rules accordingly to the store  website’s timezone, as expected.\n\n\n\n\n  You cannot update from Magento 2.0.x to Magento 2.1.x with Sample Data.\n\n\nFixed issues\n\n\nSolr search\n\n\n  Solr search no longer produces a fatal error when you use it to perform an advanced search on products by Size.\n\n\n\n\n  Solr search results now displays all products as expected in search results.\n\n\nCheckout\n\n\n  Several address-related issues associated with Checkout have been resolved.\n\n\n\n\n  Customers with an existing saved address can now add a new address during checkout.\n\n\n\n\n  Clicking the Reorder button now loads products as expected when persistent shopping cart is enabled.\n\n\n\n\n  The Go to Checkout button now works as expected. Previously, when you clicked the Go to Checkout button, Magento would display a login pop-up window.\n\n\n\n\n  Checkout now works as expected when purchasing products during a persisted session.\n\n\nBundle products\n\n\n\n  The Add Products to Option button now works as expected when you create a new update for a Bundle product.\n\n\n\n\n  Quotation marks can now be included in Bundle product names.  (GITHUB-4414)\n\n\nMiscellaneous\n\n\n  Reflected cross-site scripting (XSS) can no longer occur through the Authorizenet module’s redirect data.\n\n\n\n\n  Admin User sessions no longer expire prematurely in installations running Redis for session storage. Previously, you were directed back to the login page after logging in to the Admin panel, waiting a short period time (less than the Admin Session Lifetime value), and trying to navigate to the Dashboard.\n\n\n\n\n  Magento now returns available services in WSDL schema.  Previously, you could not process SOAP requests as expected.\n\n\n\n\n  Fatal errors no longer occur when running CLI commands after compilation in some regression environments.\n\n\n\n\n  You can now save a product after applying an update for it.\n\n\n\n\n  Newly created categories now appear as expected on the Navigation menu.\n\n\n\n\n  Magento no longer references empty targets in other targets.\n\n\n\n\n  You can now run all integration tests in developer mode.\n\n\n\n\n  Category pages now display swatches of configurable products based on color swatch attribute.\n\n\n\n\n  Magento now successfully saves future special dates in the Advanced Price page.\n\n\n\n\n  You can now filter entries in the Product Reviews report by date.\n\n\n\n\n  Catalog Price Rules are now applied as expected, depending upon the time frame  stated in the Price Rule.\n\n\n\n\n  The permissions set for a category are now applied as expected.\n\n\n\n\n  After you install and enable a module, the System &gt; Extensions &gt; Integrations page lists the new Integration generated by the module.  (GITHUB-4023)\n\n\n\n\n  Phrases with escaped slash characters are now translated. Previously, if a phrase were wrapped with single quotes, Magento would not display it correctly.\n\n\n\n\n  Downloadable products are no longer shown as out of stock on the Category page.\n\n\n\n\n  Changes to Customer group are now immediately applied to logged-in customers.\n\n\n\n\n  You can now successfully save products with custom options.\n\n\n\n\n  You can now configure a product whose last attribute has a price of zero, and the correct total price results.  (GITHUB-3912)\n\n\n\n\n  Optional dropdown product attributes can now be left blank.\n\n\n\n\n  Magento now successfully migrates data when Google Analytics’s “Content Experiments” is enabled.\n\n\n\n\n  Cart now updates and lists rates for custom shipping methods as expected when you change the shipping address.  (GITHUB-4679)\n\n\n\n\n  You can now view configurable products when using sample data.\n\n\n\n\n  Layered navigation now includes a list of all product attributes.\n\n\n\n\n  The collectRates() method now obtains the full address details for a registered customer.\n\n\n\n\n  The Customer Address tab is populated as expected after you create a new order. Previously, Magento did not list addresses on this tab when you’d create a new order.\n\n\n\n\n  Logo folders have been added to the list of allowed resources.  (GITHUB-4078)\n\n\n\n\n  The Force Sign-in button now works as expected.\n\n\n\n\n  Magento no longer makes unexpected calls when you view a product in the storefront.\n\n\n\n\n  You can now reorder a product with a required custom option (type = file). Previously, if you tried to reorder a product under these conditions, you would encounter an error when opening the shopping cart.\n (GITHUB-4058)\n\n\n\n\n  Gift Message information is now present as expected in the extension_attributes when you request this list by Web API.  Previously, if you placed an order with a Gift Message, and then performed a Web API request to get the list of orders, Gift Message information would be absent in the extension_attributes.  (GITHUB-4309)\n\n\n\n\n  The getPassword() and getPasswordConfirm() methods now return the password and passwordconfirm parameters as strings.  (GITHUB-4355)\n\n\nMessages and documentation\n\n\n\n  The getList method documentation has been enhanced.\n\n\n\n\n  Error messages associated with cron processes are now more helpful.  (GITHUB-3189)\n\n\n\n\n  Magento now displays an appropriate  message when you add less than the required minimum items in your cart.\n\n\n\n\n  Message serialization now complies with AMPQ specifications.\n\n\nStaging\n\n\n\n  You can now successfully change an entity’s Schedule Update End Time from none to a particular time. Previously, attempting to change an End Time from none to a specific time would result in an error. (Sample message: “Update (or link, if we are using downloadable product) does not exists”.)\n\n\n\n\n  You can now edit the Schedule Update of a CMS page as expected. Previously, Magento would duplicate the page when you would click on the CMS Page Schedule Update button after editing it.\n\n\n\n\n  You can now successfully add an end date to an existing permanent update.\n\n\n\n\n  Magento no longer duplicates a campaign each time you edit it. Previously, Magento would duplicate a campaign record whenever you selected it from its existing Scheduled Update.\n\n\n\n\n  Product update is now applied as expected in Catalog Staging.\n\n\n\n\n  You can now successfully save an update that was created for a category with a changed name.\n\n\n\n\n  Magento no longer creates a new single update when you edit an existing update.\n\n\n\n\n  You can now create and successfully save a future update for a downloadable product associated with links and file content.\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\n\nInstallation and upgrade instructions\nYou can install Magento Commerce 2.1 Release Candidate 2 (RC2) using Composer.\n\nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\nSee one of the following sections:\n\n\n  Install using Composer\n  Upgrade existing installations\n  Upgrade to an RC with sample data\n\n\nInstall using Composer\nThis Release Candidate is available from repo.magento.com. Before installing this Release Candidate using Composer,  familiarize yourself with these  prerequisites, then run:\n\n\tcomposer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.1.0-rc2 &lt;installation directory name&gt;\n\n\nUpgrade existing installations\nThis section discusses how to upgrade to a Release Candidate without sample data.\n\nIf you installed optional sample data, see Upgrade to an RC with sample data instead.\n\n\n    Do not upgrade to a Release Candidate on a production system. Upgrade to a Release Candidate on a development system only.\n\n\nUpgrade using the Setup Wizard\nUse the instructions in Start System Upgrade. When prompted to choose a version, choose a Release Candidate.\n\nUpgrade an existing installation from the GitHub repository\nDevelopers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n\n  \n    Go to the Contributing Developers page.\n  \n  \n    Follow the instructions to pull the updates from the repository and update using Composer.\n  \n\n\nUpgrade using the command line\n\nTo upgrade to a Release Candidate using the command line: \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the directory in which you installed the Magento software.\n\n    For example, cd /var/www/html/magento2\n  \n  \n    Enter the following commands in the order shown:\n\n    composer require &lt;product&gt; 2.1.0-rc2 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Open Source 2.1 RC2, enter:\n\n    composer require magento/product-community-edition 2.1.0-rc2 --no-update\ncomposer update\n    \n\n    To upgrade to Magento Commerce 2.1 RC2, enter:\n\n    composer require magento/product-enterprise-edition 2.1.0-rc2 --no-update\ncomposer update\n    \n  \n  If prompted, enter your authentication keys.\n  \n    Update the database schema and data:\n\n     php bin/magento setup:upgrade\n    \n  \n\n\n\nUpgrade to an RC with sample data\n\n\n\n  These instructions apply to Magento Community Edition (CE) and Magento Enterprise Edition (EE) users only if all of the following are true:\n\n  \n    You have installed optional sample data\n    You’re upgrading to Magento 2.1 (including a Release Candidate) from any earlier version using the command line\n  \n\n  Click to expand/collapse content To upgrade to Magento 2.1 sample data using the command line:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to the Magento installation directory.\n  \n    Back up your current composer.json:\n\n    cp composer.json composer.json.bak\n    \n  \n  \n    Enter one of the following commands to upgrade the Magento software version to 2.1.0 (GA release):\n\n    composer require &lt;product&gt; &lt;version&gt; --no-update\ncomposer require &lt;sample data module-1&gt;:&lt;version&gt; ... &lt;sample data module-n&gt;:&lt;version&gt; --no-update\n    \n\n    \n      \n        Magento Open Source:\n\n        composer require magento/product-community-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 --no-update \n        \n      \n      \n        Magento EE:\n\n        composer require magento/product-enterprise-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 magento/module-gift-card-sample-data:100.1.0 magento/module-customer-balance-sample-data:100.1.0 magento/module-target-rule-sample-data:100.1.0 magento/module-gift-registry-sample-data:100.1.0 magento/module-multiple-wishlist-sample-data:100.1.0 --no-update\n        \n      \n    \n\n    \n  \t\tTo upgrade to a Release Candidate, append -rc&lt;x&gt; to the version of each module. For example, -rc3.\n\n  \n  \n    Update dependencies:\n\n    composer update\n    \n  \n  If prompted, enter your authentication keys.\n  Wait for dependencies to update.\n\n\nFinish your upgrade\nAfter you’ve reset file system permissions:\n\n\n  If you haven’t done so already, log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to your Magento installation directory.\n  \n    Manually clear the var/cache, var/page_cache, and var/generation directories.\n\n    A sample command follows:\n\n    rm -rf var/cache/* var/page_cache/* var/generation/*\n    \n  \n  \n    Enter the following command from your Magento installation directory:\n\n    php bin/magento setup:upgrade\n    \n  \n\n\n\n\n  Apply file system permissions and ownership\n  As part of the sample data upgrade process, you must apply current file system permission and ownership as discussed in the following sections. Failure to do so will cause your upgrade to fail.\n\n  For more information about file system ownership and permissions since the Magento 2.0.6 release, see Overview of ownership and permissions.\n\n  One-user ownership and permissions\n  If you run the Magento application as one user (which is typical of shared hosting environments), change file system permissions and ownership as follows:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\;\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\; &amp;&amp; chmod u+x bin/magento\n  \n\n  After you set file system permissions, manually clear the var/cache, var/page_cache, and var/generation directories.\n\n  A sample command follows:\n\n  rm -rf var/cache/* var/page_cache/* var/generation/*\n  \n\n  Two-user ownership and permissions\n  If you run the Magento application with two users, enter the following commands as a user with root privileges:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nchown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n\n\n  Migration toolkits\n  The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC2EE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc3ce-html": {
      "title": "Magento Open Source 2.1 Release Candidate 3 (RC3) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 3 (RC3). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against 2.1\n  \n\n\nWe welcome your participation in this process!  Please open any Magento Open Source  issues or Pull Requests on the Open Source GitHub repository. For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n\nBackward-incompatible changes are documented in Magento 2.1 Backward Incompatible Changes.\n\nHighlights\n\nMagento Open Source 2.1 includes several new and exciting features:\n\n\n  \n    PayPal enhancements include PayPal in-context checkout and saved credit cards. In-context checkout helps to increase conversion rates 69 bps by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit cards boost repeat purchases by allowing merchants to securely store credit card information with PayPal so customers do not need to re-enter it in checkout or when reordering items from the Admin interface.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive cardholder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin interface.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nFixed issues\n\nSecurity enhancement\n\n\n\n  Magento no longer discloses sensitive information about the server when an invalid URL has been requested.\n\n\nPerformance enhancements\n\n\n  Category page performance has significantly improved when categories contain more than 30000 items.\n\n\n\n\n  Setting the Merge CSS Files option to Yes no longer reduces product performance. (GITHUB-4710)\n\n\nImport/Export\n\n\n\n  Magento now successfully imports products with  a “gift_message_available” parameter. Previously, Magento exported the wrong “gift_message_available” parameter, which resulted in a validation error.\n\n\nCache\n\n\n\n  Category menus now display as expected for installations using Varnish. (GITHUB-4540)\n\n\n\n\n  Varnish cache is no longer disabled due to HTML requests.\n\n\n\n\n  Magento now enables caches by default when upgrading by the command-line interface.  (GITHUB-4707)\n\n\n\n\n  Magento no longer disables all cache types after you use the command-line interface to enable or disable modules. Previously, all cache types were disabled after you disabled or enabled  modules through the command line interface.\n\n\nMessages and documentation\n\n\n  Media Uploader error messages now make it clear the SVG file format is not supported. (GITHUB-2958)\n\n\n\n\n  The Swagger-generated docs for the REST API now display the property identifiers formatted as camelCaseFormat. (GITHUB-4925)\n\n\n\n\n  Magento now displays enhanced messages for cache management exceptions.\n\n\nPayment methods\n\n\n\n  Magento no longer displays the Payflow Pro option for the Vault Provider field for countries where that option is unavailable.\n\n\n\n\n  Problems placing an order using the Payflow Pro payment method have been resolved.\n\n\n\n\n  You can now place an order using the Braintree Credit card as the payment method when 3D Secure Verification is enabled.\n\n\nMiscellaneous\n\n\n\n  You can now re-install Magento and use a different Admin email address than you had previously used.\n\n\n\n\n  Using the Web Setup wizard to disable a module no longer results in a backup error. (GITHUB-3562)\n\n\n\n\n  The ProductsList widget now returns the identities of the products displayed by this widget.\n\n\n\n\n  Magento now retains special prices as expected for grouped products.\n\n\n\n\n  You can now use a custom template to successfully create New Account email for a new customer.\n\n\n\n\n  Magento now  displays the thousand separator for a product’s price  price, weight, and custom option price fields.\n\n\n\n\n  You can now remove products from the shopping cart as expected. Previously, if the number of products being removed exceeded half the quantity of products in stock, Magento would throw an error.\n\n\n\n\n  You can successfully complete an order for a quantity of product that exceeds half of the product stock.\n\n\n\n\n  You can now successfully save new order status. Previously, you could not save new order status when selecting Create New Status from the Go to Stores &gt; Order Status menu. (GITHUB-4146)\n\n\n\n\n  JavaScript validation now works as expected when you add a product to a shopping cart. Previously, if a validation error occurred during this task, Magento would still submit the form.\n\n\n\n\n  Grid view pagination (as configured from Stores &gt; Configuration &gt; Catalog &gt; Catalog &gt;Storefront)  now works as expected. (GITHUB-3861)\n\n\n\n\n  Magento now correctly displays prices for products with several configurable price options.\n\n\n\n\n  You can now generate a new simple product without changing the names of already existing products.  (GITHUB-4951)\n\n\n\n\n  The Stock Status attribute now works as expected during creation of configurable products.\n\n\n\n\n  You can successfully delete an Admin user without breaking integration if the Admin user shares the same ID as an integration user. Previously, if you deleted an Admin user who shared an ID with an integration user, the integration would be permanently broken.\n\n\n\n\n  Problems related to login when inline translation is enabled have been resolved.  (GITHUB-4925)\n\n\n\n\n  Magento now generates URL rewrites for a new store view as expected during a mass update to a new website.\n\n\n\n\n  Magento no longer prompts you to select a dropdown attribute when adding a product to the shopping cart if you have already selected an attribute. (GITHUB-4899)\n\n\n\n\n  You can now drag values as expected when working in the Customizable Options window.\n\n\n\n\n  Tax Report now displays records as expected.\n\n\n\n\n\n\n\n\n\n\nKnown issues\nMagento Community Edition 2.1, Release Candidate 3 includes the following known issues:\n\n\n\n  The process of uninstalling modules using command-line tools unexpectedly stalls. \nWorkaround: Ensure that your &lt;magento root&gt;/var/composer_home/auth.json file contains your authentication keys. You can create an auth.json file in one of two ways:\n\n\nMethod 1: If you ran Composer commands from CLI before and specified your repo.magento.com credentials, you can copy the existing auth.json file from your home directory under \"~/.composer/\"\n\nMethod 2: You can manually create the file using this format:\n\n{\n    \"http-basic\": {\n        \"repo.magento.com\": {\n            \"username\": \"&lt;public key&gt;\",\n            \"password\": \"&lt;private key&gt;\"\n        }\n    }\n}\n\n\n\n  The Category page displays the former price instead of the current price during scheduled updates.\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\n\nInstallation and upgrade instructions\nYou can install Magento Community Edition 2.1 Release Candidate 3 (RC3) from either Github or by using Composer. \nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\n\n\n  Install the Magento software\n\n  You can get Magento Open Source (formerly Community Edition) 2.1 from Github, Composer, or using a compressed archive.\n\n  See one of the following sections for more information:\n\n  \n    Get the Magento Open Source software using Composer\n    Get a compressed archive\n    Complete the installation\n  \n\n  Get the Magento Open Source software using Composer\n\n  The Open Source software is available from repo.magento.com. Before getting the Open Source software, familiarize yourself with the Composer metapackage  prerequisites, then run\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; is 2.1.0, 2.1.1, and so on\n\n  For example, to install Magento Open Source 2.1.1 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.1.1 magento2\n  \n\n  Get a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Open Source software only\n      Magento Open Source software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Open Source software archive:\n\n    \n      Go to http://magento.com/download.\n      \n        Choose either the software or the software and sample data:\n\n        \n          Magento-CE-&lt;version&gt;.* (without sample data)\n          Magento-CE-&lt;version&gt;+Samples.* (with sample data)\n        \n\n        &lt;version&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on).\n      \n    \n\n    Complete the installation\n\n    After you get the Open Source software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    See the following sections for more information.\n\n    Upgrade an existing installation from the GitHub repository\n\n    Developers who contribute to the Open Source codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n    \n      \n        Go to the Contributing Developers page.\n      \n      \n        Follow the instructions to pull the updates from the repository and update using Composer.\n      \n    \n\n    Other upgrades\n\n    Other types of upgrades are discussed in Upgrade to Magento version 2.1 (June 22, 2016).\n\n    Upgrade an existing installation from the GitHub repository\n    Developers who contribute to the CE codebase can upgrade manually from the Magento Open Source GitHub repository.\n\n    \n      \n        Go to the Contributing Developers page.\n      \n      \n        Follow the instructions to pull the updates from the repository and update using Composer.\n      \n    \n\n    Other upgrades\n    Other types of upgrades are discussed in Upgrade to Magento version 2.1 (June 22, 2016).\n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC3CE.html"
    }
    ,
  
    "guides-v2-0-release-notes-releasenotes2-1-rc3ee-html": {
      "title": "Magento Commerce 2.1 Release Candidate 3 (RC3) Release Notes",
      "content": "We are pleased to present Magento 2.1 Release Candidate 3 (RC3). This release candidate build is not intended for production purposes. Instead, it provides the development community opportunities to:\n\n\n  \n    preview the new features and fixes that Magento 2.1 GA will contain\n  \n  \n    contribute to the Magento 2.1 code base by identifying unresolved issues\n  \n  \n    test your 2.0 extensions against  2.1\n  \n\n\nWe welcome your participation in this process! Enterprise Edition customers can provide feedback in these two ways:\n\n\n  \n    Commerce GitHub repository.  For more information on how to provide feedback and contribute on GitHub, see Code contributions.\n  \n  \n    Email to DL-Magento-2.1-Feedback@magento.com.\n  \n\n\nThis Release Candidate is available from repo.magento.com if you have a Commerce license or GitHub  if you have previously signed an agreement to access Magento Commerce 2.0 beta software on GitHub.\n\nBackward-incompatible changes are documented in Magento 2.1 Backward Incompatible Changes.\n\nHighlights\n\nMagento Enterprise Edition 2.1 includes several new and exciting features:\n\n\n  \n    Content Staging and Preview improves productivity by enabling business teams to easily create, preview, and schedule a wide range of content updates without involving IT. Merchants can make updates to products, categories, CMS content, promotions, and pricing and can preview these changes based on specific dates and times or store views. User-friendly dashboards provide greater visibility into all planned site changes and updates can be automatically deployed at scheduled times.\n  \n  \n    Elasticsearch is a next-generation search technology that is replacing Solr in Magento Commerce 2.1. It is simpler to set up, able to handle large catalogs, and can easily scale as search volume grows. It supports 33 languages out-of-the-box and merchants can configure stop words and synonyms to ensure high quality search results.\n  \n  \n    PayPal enhancements include PayPal in-context checkout and saved credit cards. In-context checkout helps to increase conversion rates 69 bps by allowing shoppers to pay with PayPal without leaving the merchant’s site. PayPal saved credit cards boost repeat purchases by allowing merchants to securely store credit card information with PayPal so customers do not need to re-enter it in checkout or when reordering items from the Admin interface.\n  \n  \n    Braintree enhancements enable merchants to qualify for the simplest set of PCI compliance requirements by using Braintree Hosted Fields to collect all sensitive cardholder information in checkout. Merchants retain complete control over their checkout style and layout because Braintree uses small, transparent iframes to replace individual payment fields. Merchants can now also access Braintree settlement reports from within the Magento Admin interface.\n  \n  \n    Improved management interfaces make it faster and easier to search for information in the Admin, set up global search synonyms, and create new product, category, and CMS content.\n  \n\n\nFixed issues\n\nSecurity enhancement\n\n\n\n  Magento no longer discloses sensitive information about the server when an invalid URL has been requested.\n\n\nPerformance enhancements\n\n\n  Category page performance has significantly improved when categories contain more than 30000 items.\n\n\n\n\n  Setting the Merge CSS Files option to Yes no longer reduces product performance. (GITHUB-4710)\n\n\nStaging\n\n\nChanging the update start or end time on one entity no longer overwrites update settings on other stores. Previously, changing the update start or end time on one page would overwrite settings on other stores.\n\n\n\n  The product update preview now works as expected.\n\n\n\n\n  You can now filter products by Category ID as expected.\n\n\nGoogle Tag Manager\n\n\n\n  The Update Cart Quantity event now correctly observes add or remove cart actions.\n\n\nImport/Export\n\n\n\n  Magento now successfully imports products with a “gift_message_available” parameter. Previously, Magento exported the wrong “gift_message_available” parameter, which resulted in a validation error. (54200)\n\n\nCache\n\n\n\n  Category menus now display as expected for installations using Varnish. (GITHUB-4540)\n\n\n\n\n  Varnish cache is no longer disabled due to HTML requests.\n\n\n\n\n  Magento now enables caches by default when upgrading by the command-line interface.  (GITHUB-4707)\n\n\n\n\n  Magento no longer disables all cache types after you use the command-line interface to enable or disable modules. Previously, all cache types were disabled after you disabled or enabled  modules through the command line interface.\n\n\nMessages and documentation\n\n\n  Media Uploader error messages now make it clear the SVG file format is not supported. (GITHUB-2958)\n\n\n\n\n  The Swagger-generated docs for the REST API now display the property identifiers formatted as camelCaseFormat. (GITHUB-4925)\n\n\n\n\n  Magento now displays enhanced messages for cache management exceptions.\n\n\nPayment methods\n\n\n\n  Magento no longer displays the Payflow Pro option for the Vault Provider field for countries where that option is unavailable.\n\n\n\n\n  Problems placing an order using the Payflow Pro payment method have been resolved.\n\n\n\n\n  You can now place an order using the Braintree Credit card as the payment method when 3D Secure Verification is enabled.\n\n\nMiscellaneous\n\n\n\n  You can now re-install Magento and use a different Admin email address than you had previously used.\n\n\n\n\n  Using the Web Setup wizard to disable a module no longer results in a backup error. (GITHUB-3562)\n\n\n\n\n  Magento no longer disables all cache types after you use the command-line interface to enable or disable modules. Previously, all cache types were disabled after you disabled or enabled  modules through the command line interface.\n\n\n\n\n  The ProductsList widget now returns the identities of the products displayed by this widget.\n\n\n\n\n  Magento now retains special prices as expected for grouped products.\n\n\n\n\n  You can now use a custom template to successfully create New Account email for a new customer.\n\n\n\n\n  Magento now  displays the thousand separator for a product’s price  price, weight, and custom option price fields.\n\n\n\n\n  You can now remove products from the shopping cart as expected. Previously, if the number of products being removed exceeded half the quantity of products in stock, Magento would throw an error.\n\n\n\n\n  You can now successfully save new order status. Previously, you could not save new order status when selecting Create New Status from the Go to Stores &gt; Order Status menu. (GITHUB-4146)\n\n\n\n\n  JavaScript validation now works as expected when you add a product to a shopping cart. Previously, if a validation error occurred during this task, Magento would still submit the form.\n\n\n\n\n  Grid view pagination (as configured from Stores &gt; Configuration &gt; Catalog &gt; Catalog &gt;Storefront)  now works as expected. (GITHUB-3861)\n\n\n\n\n  Magento now correctly displays prices for products with several configurable price options.\n\n\n\n\n  You can successfully complete an order  for a quantity of product that exceeds half of the product stock.\n\n\n\n\n  You can now generate a new simple product without changing the names of already existing products.  (GITHUB-4951)\n\n\n\n\n  The Stock Status attribute now works as expected during creation of configurable products.\n\n\n\n\n  You can successfully delete an Admin user without breaking integration if the Admin user shares the same ID as an integration user. Previously, if you deleted an Admin user who shared an ID with an integration user, the integration would be permanently broken.\n\n\n\n\n  Problems related to login when inline translation is enabled have been resolved.  (GITHUB-4925)\n\n\n\n\n  Magento now generates URL rewrites for a new store view as expected during a mass update to a new website.\n\n\n\n\n  Magento no longer prompts you to select a dropdown attribute when adding a product to the shopping cart if you have already selected an attribute. (GITHUB-4899)\n\n\n\n\n  You can now drag values as expected when working in the Customizable Options window.\n\n\n\n\n  Tax Report now displays records as expected.\n\n\n\n\n\n\n\n\n\n\n\n\nKnown issues\nMagento Commerce 2.1, Release Candidate 3 includes the following known issues:\n\n\n\n  The process of uninstalling modules using command-line tools unexpectedly stalls. \nWorkaround: Ensure that your &lt;magento root&gt;/var/composer_home/auth.json file contains your authentication keys. You can create an auth.json file in one of two ways:\n\n\nMethod 1: If you ran Composer commands from CLI before and specified your repo.magento.com credentials, you can copy the existing auth.json file from your home directory under \"~/.composer/\"\n\nMethod 2: You can manually create the file using this format:\n\n{\n    \"http-basic\": {\n        \"repo.magento.com\": {\n            \"username\": \"&lt;public key&gt;\",\n            \"password\": \"&lt;private key&gt;\"\n        }\n    }\n}\n\n\n\n  The Category page displays the former price instead of the current price during scheduled updates.\n\n\nTechnology stack\n\nOur technology stack is built on PHP and MySQL. Magento 2.1 RC3 supports:\n\n\n  PHP 5.6\n  PHP 7.0.2\n  PHP 7.0.6 + up until 7.1\n  MySQL 5.6.\n\n\nWe do not support PHP 5.5.x or 7.0.5.\n\nInstallation and upgrade instructions\n\nYou can install Magento Commerce 2.1 Release Candidate 3 (RC3) using Composer.\n\nThis Release Candidate is for test purposes only. Do not install it in a production environment.\n\n\n\n  Install the Magento software\n  See one of the following sections:\n\n  \n    Get Magento Commerce using Composer\n    Get Magento Commerce using a compressed archive\n    Complete the installation\n  \n\n  Get Magento Commerce using Composer\n\n  Magento Commerce (formerly Enterprise Edition) is available from repo.magento.com. Before installing the Magento Commerce software using Composer,  familiarize yourself with these  prerequisites, then run:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=&lt;version&gt; &lt;installation directory name&gt;\n  \n\n  where &lt;version&gt; is 2.1.0, 2.1.1, and so on\n\n  For example, to install 2.1.1 in the magento2 directory:\n\n  composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.1.1 magento2\n  \n\n  Get Magento Commerce using a compressed archive\n\n  \n\n    The following table discusses where to get the Magento software. We provide the following downloads:\n\n    \n      Magento Commerce software only\n      Magento Commerce software with sample data (designed to help you learn Magento faster)\n    \n\n    These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n    Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n    To get the Magento Commerce archive:\n\n    \n      Go to your account on magento.com.\n      Log in with your Magento user name and password.\n      In the left navigation bar, click Downloads.\n      In the right pane, click Magento Commerce 2.X &gt; Full Release or Magento Commerce 2.X &gt; Full Release + Sample Data for the software.\n      \n        Follow the instructions on your screen to complete the Magento Commerce download:\n\n        \n          Magento-EE-&lt;version&gt;.* (without sample data)\n          Magento-EE-&lt;version&gt;+Samples.* (with sample data)\n        \n      \n      Transfer the installation package to your development system.\n    \n\n    Complete the installation\n\n    After you get the Commerce software:\n\n    \n      Set file system ownership and permissions.\n      \n        Install the software:\n\n        \n          Web Setup Wizard\n          Command line\n        \n      \n    \n\n    Upgrade from an earlier version\n    To upgrade to Magento Commerce 2.1 from an earlier version, see Upgrade to Magento version 2.1 (June 22, 2016).\n\n    Upgrades\n    To upgrade to Magento 2.1 (including a Release Candidate), see Upgrade to Magento version 2.1 (June 22, 2016).\n\n    Migration toolkits\n    The Data Migration Tool helps transfer existing Magento 1.x store data to Magento 2.x. This command-line interface includes verification, progress tracking, logging, and testing functions. For installation instructions, see  Install the Data Migration Tool. Consider exploring or contributing to the  Magento Data Migration repository.\n  \n\n",
      "url": "/guides/v2.0/release-notes/ReleaseNotes2.1_RC3EE.html"
    }
    ,
  
    "guides-v2-0-mrg-ce-sales-html": {
      "title": "Magento_Sales module",
      "content": "Magento_Sales module is responsible for order processing and appearance in system.\n\nMagento_Sales module manages next system entities and flows:\n\n\n  order management\n  invoice management\n  shipment management (including track management)\n  credit memos management\n\n\nMagento_Sales module is required for Magento_Checkout module to perform checkout operations.\n\nSystem requirements\n\nThe Magento_Sales module does not have any specific system requirements.\n\nDepending on how many orders are being placed, there might be consideration for the database size.\n\nInstallation\n\nThe Magento_Sales module is installed automatically during Magento installation.\n\nInvoiceOrder\n\nThe InvoiceOrder service introduces a capability to execute Magento native business flow of the Sales module using API.\n\nWith this service you can:\n\n\n  create an invoice document (full or partial)\n  capture money placed with order payment\n  notify a customer about document creation\n  change order status and state\n\n\nParameters\n\n\n  \n    \n      Name\n      Description\n      Format\n      Example\n      Required / Optional\n      Default value\n    \n  \n  \n    \n      orderId\n      An identifier of a target order for operation.\n      Integer\n      &nbsp;\n      Required\n      &nbsp;\n    \n    \n      items\n      An array of order items that will be included to invoice. By default, the invoice will contain all order items.\n      Array of items with a format according to \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface.\n      \n      \n      [\n          {\n              \"order_item_id\": 1,\n              \"qty\": 2\n          },\n          {\n          \"order_item_id\": 2,\n          \"qty\": 0.5\n          }\n          ]\n      \n\n      \n      Optional (required, when invoice must contain particular order items.\n      []\n    \n    \n      capture\n      Flag that sets whether the customer’s payment can be captured using an online payments system (for example, PayPal). IMPORTANT: If you created Invoice with the flag set to default value (false), you will not be able to capture money in Magento on the corresponding Invoice.\n      Boolean\n      &nbsp;\n      Optional\n      false\n    \n    \n      notify\n      Flag that activates e-mail notification about new invoice for a customer. If true, the service will notify a customer. If false, the service won’t notify a customer.\n      Boolean\n      &nbsp;\n      Optional\n      false\n    \n    \n      appendComment\n      Flag that determines whether a comment argument must be included in an e-mail notification. If true, the service adds the comment.\n      Boolean\n      &nbsp;\n      Optional\n      false\n    \n    \n      comment\n      The comment to add to an invoice. Specify a comment if appendComment is set to true.\n      A format according to \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface.\n      \n      \n      {\n          \"comment\": \"The first Invoice\",\n          \"is_visible_on_front\": true\n      }\n      \n\n      \n      Optional\n      null\n    \n    \n      arguments\n      Additional arguments. Reserved for use by extension modules.\n      A format according to \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface.\n      &nbsp;\n      Optional\n      null\n    \n  \n\n\nReturn values\n\nThe service returns an identifier of the created Invoice.\n\nREST\n\nPOST Endpoint\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/V1/&lt;orderId&gt;/invoice\n\nREST declaration\n\netc/webapi.xml\n\n&lt;route url=\"/V1/order/:orderId/invoice\" method=\"POST\"&gt;\n    &lt;service class=\"Magento\\Sales\\Api\\InvoiceOrderInterface\" method=\"execute\"/&gt;\n    &lt;resources&gt;\n        &lt;resource ref=\"Magento_Sales::sales\" /&gt;\n    &lt;/resources&gt;\n&lt;/route&gt;\n\nSOAP\n\nSOAP Endpoint\n\nhttp://&lt;magento_host&gt;/soap/&lt;store_code&gt;?wsdl&amp;services=salesInvoiceOrderV1\n\nPHP interface\n\n\\Magento\\Sales\\Api\\InvoiceOrderInterface\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Sales\\Api;\n\n/**\n * Class InvoiceOrderInterface\n *\n * @api\n */\ninterface InvoiceOrderInterface\n{\n    /**\n     * @param int $orderId\n     * @param bool|false $capture\n     * @param \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface[] $items\n     * @param bool|false $notify\n     * @param bool|false $appendComment\n     * @param Data\\InvoiceCommentCreationInterface|null $comment\n     * @param Data\\InvoiceCreationArgumentsInterface|null $arguments\n     * @return int\n     */\n    public function execute(\n        $orderId,\n        $capture = false,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface $comment = null,\n        \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface $arguments = null\n    );\n}\n\n\nPHP implementation\n\n\\Magento\\Sales\\Model\\InvoiceOrder\n\nClick to show/hide included code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Sales\\Model;\n\nuse Magento\\Framework\\App\\ResourceConnection;\nuse Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface;\nuse Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface;\nuse Magento\\Sales\\Api\\InvoiceOrderInterface;\nuse Magento\\Sales\\Api\\OrderRepositoryInterface;\nuse Magento\\Sales\\Model\\Order\\Config as OrderConfig;\nuse Magento\\Sales\\Model\\Order\\Invoice\\InvoiceValidatorInterface;\nuse Magento\\Sales\\Model\\Order\\Invoice\\NotifierInterface;\nuse Magento\\Sales\\Model\\Order\\InvoiceDocumentFactory;\nuse Magento\\Sales\\Model\\Order\\InvoiceRepository;\nuse Magento\\Sales\\Model\\Order\\OrderStateResolverInterface;\nuse Magento\\Sales\\Model\\Order\\OrderValidatorInterface;\nuse Magento\\Sales\\Model\\Order\\PaymentAdapterInterface;\nuse Magento\\Sales\\Model\\Order\\Validation\\InvoiceOrderInterface as InvoiceOrderValidator;\nuse Psr\\Log\\LoggerInterface;\nuse Magento\\Framework\\App\\ObjectManager;\n\n/**\n * Class InvoiceOrder\n * @SuppressWarnings(PHPMD.CouplingBetweenObjects)\n */\nclass InvoiceOrder implements InvoiceOrderInterface\n{\n    /**\n     * @var ResourceConnection\n     */\n    private $resourceConnection;\n\n    /**\n     * @var OrderRepositoryInterface\n     */\n    private $orderRepository;\n\n    /**\n     * @var InvoiceDocumentFactory\n     */\n    private $invoiceDocumentFactory;\n\n    /**\n     * @var PaymentAdapterInterface\n     */\n    private $paymentAdapter;\n\n    /**\n     * @var OrderStateResolverInterface\n     */\n    private $orderStateResolver;\n\n    /**\n     * @var OrderConfig\n     */\n    private $config;\n\n    /**\n     * @var InvoiceRepository\n     */\n    private $invoiceRepository;\n\n    /**\n     * @var InvoiceOrderValidator\n     */\n    private $invoiceOrderValidator;\n\n    /**\n     * @var NotifierInterface\n     */\n    private $notifierInterface;\n\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    /**\n     * InvoiceOrder constructor.\n     * @param ResourceConnection $resourceConnection\n     * @param OrderRepositoryInterface $orderRepository\n     * @param InvoiceDocumentFactory $invoiceDocumentFactory\n     * @param InvoiceValidatorInterface $invoiceValidator\n     * @param OrderValidatorInterface $orderValidator\n     * @param PaymentAdapterInterface $paymentAdapter\n     * @param OrderStateResolverInterface $orderStateResolver\n     * @param OrderConfig $config\n     * @param InvoiceRepository $invoiceRepository\n     * @param NotifierInterface $notifierInterface\n     * @param LoggerInterface $logger\n     * @param InvoiceOrderValidator|null $invoiceOrderValidator\n     * @SuppressWarnings(PHPMD.ExcessiveParameterList)\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function __construct(\n        ResourceConnection $resourceConnection,\n        OrderRepositoryInterface $orderRepository,\n        InvoiceDocumentFactory $invoiceDocumentFactory,\n        InvoiceValidatorInterface $invoiceValidator,\n        OrderValidatorInterface $orderValidator,\n        PaymentAdapterInterface $paymentAdapter,\n        OrderStateResolverInterface $orderStateResolver,\n        OrderConfig $config,\n        InvoiceRepository $invoiceRepository,\n        NotifierInterface $notifierInterface,\n        LoggerInterface $logger,\n        InvoiceOrderValidator $invoiceOrderValidator = null\n    ) {\n        $this-&gt;resourceConnection = $resourceConnection;\n        $this-&gt;orderRepository = $orderRepository;\n        $this-&gt;invoiceDocumentFactory = $invoiceDocumentFactory;\n        $this-&gt;paymentAdapter = $paymentAdapter;\n        $this-&gt;orderStateResolver = $orderStateResolver;\n        $this-&gt;config = $config;\n        $this-&gt;invoiceRepository = $invoiceRepository;\n        $this-&gt;notifierInterface = $notifierInterface;\n        $this-&gt;logger = $logger;\n        $this-&gt;invoiceOrderValidator = $invoiceOrderValidator ?: ObjectManager::getInstance()-&gt;get(\n            InvoiceOrderValidator::class\n        );\n    }\n\n    /**\n     * @param int $orderId\n     * @param bool $capture\n     * @param array $items\n     * @param bool $notify\n     * @param bool $appendComment\n     * @param \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface|null $comment\n     * @param \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface|null $arguments\n     * @return int\n     * @throws \\Magento\\Sales\\Api\\Exception\\DocumentValidationExceptionInterface\n     * @throws \\Magento\\Sales\\Api\\Exception\\CouldNotInvoiceExceptionInterface\n     * @throws \\Magento\\Framework\\Exception\\InputException\n     * @throws \\Magento\\Framework\\Exception\\NoSuchEntityException\n     * @throws \\DomainException\n     */\n    public function execute(\n        $orderId,\n        $capture = false,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        InvoiceCommentCreationInterface $comment = null,\n        InvoiceCreationArgumentsInterface $arguments = null\n    ) {\n        $connection = $this-&gt;resourceConnection-&gt;getConnection('sales');\n        $order = $this-&gt;orderRepository-&gt;get($orderId);\n        $invoice = $this-&gt;invoiceDocumentFactory-&gt;create(\n            $order,\n            $items,\n            $comment,\n            ($appendComment &amp;&amp; $notify),\n            $arguments\n        );\n        $errorMessages = $this-&gt;invoiceOrderValidator-&gt;validate(\n            $order,\n            $invoice,\n            $capture,\n            $items,\n            $notify,\n            $appendComment,\n            $comment,\n            $arguments\n        );\n        if ($errorMessages-&gt;hasMessages()) {\n            throw new \\Magento\\Sales\\Exception\\DocumentValidationException(\n                __(\"Invoice Document Validation Error(s):\\n\" . implode(\"\\n\", $errorMessages-&gt;getMessages()))\n            );\n        }\n        $connection-&gt;beginTransaction();\n        try {\n            $order = $this-&gt;paymentAdapter-&gt;pay($order, $invoice, $capture);\n            $order-&gt;setState(\n                $this-&gt;orderStateResolver-&gt;getStateForOrder($order, [OrderStateResolverInterface::IN_PROGRESS])\n            );\n            $order-&gt;setStatus($this-&gt;config-&gt;getStateDefaultStatus($order-&gt;getState()));\n            $invoice-&gt;setState(\\Magento\\Sales\\Model\\Order\\Invoice::STATE_PAID);\n            $this-&gt;invoiceRepository-&gt;save($invoice);\n            $this-&gt;orderRepository-&gt;save($order);\n            $connection-&gt;commit();\n        } catch (\\Exception $e) {\n            $this-&gt;logger-&gt;critical($e);\n            $connection-&gt;rollBack();\n            throw new \\Magento\\Sales\\Exception\\CouldNotInvoiceException(\n                __('Could not save an invoice, see error log for details')\n            );\n        }\n        if ($notify) {\n            if (!$appendComment) {\n                $comment = null;\n            }\n            $this-&gt;notifierInterface-&gt;notify($order, $invoice, $comment);\n        }\n        return $invoice-&gt;getEntityId();\n    }\n}\n\n\nExceptions\n\nIn case of failure, it returns an error object. Example in REST:\n\n{\n    \"message\": \"Creditmemo Document Validation Error(s):\\nWe can't create creditmemo for the order.\\nThe most money available to refund is 0.\"\n}\n\nExtension points\n\nThe service implementation contains extension points marked with @api annotation. Extension developers can use APIs to extend service logic.\n\n\n  \n    \n      Extension point\n      Description\n    \n  \n  \n    \n      \\Magento\\Sales\\Api\\OrderRepositoryInterface\n      An interface for saving and retrieving Orders.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\OrderStateResolverInterface\n      An interface which provides a correct state of an Order according to performed operation.\n    \n    \n      \\Magento\\Sales\\Api\\InvoiceRepositoryInterface\n      An interface for saving and retrieving Shipments.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\InvoiceDocumentFactory\n      A factory for creating an Invoice data object. The factory uses the arguments parameter to process the extension attributes of a new Invoice.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Invoice\\NotifierInterface\n      An interface for sending notifications about new Invoice creation.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Validation\\InvoiceOrderInterface\n      An interface for validating service parameters and Invoice data object.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\PaymentAdapterInterface\n      An interface for a payment according to a selected option (online/offline). It returns Order with modified state, which contains payment specific information.\n    \n  \n\n\nRefundInvoice\n\nThe RefundInvoice service introduces a capability to execute Magento native business flow of the Sales module using API.\n\nPlease note, that current service is available only for invoices created using online payment methods. If you try to apply it to an Invoice created using offline payment method, system will throw a validation error.\n\nWith this service you can:\n\n\n  create a Credit Memo (complete or partial) for particular Invoice\n  add details about refunded items to an Order\n  change status and state of an Order according to performed actions\n  notify a customer about performed refund operation\n\n\nService parameters\n\n\n  \n    \n      \n        Name\n      \n      \n        Description\n      \n      \n        Format\n      \n      \n        Example\n      \n      \n        Required/Optional\n      \n      \n        Default value\n      \n    \n  \n  \n    \n      \n        invoiceId\n      \n      \n        An identifier of a target Invoice for operation.\n      \n      \n        Integer\n      \n      \n        &nbsp;\n      \n      \n        Required\n      \n      \n        &nbsp;\n      \n    \n    \n      \n        items\n      \n      \n        An array of invoice items included to a Credit Memo. By\n        default, the service will create a Credit Memo for all\n        invoice items.\n      \n      \n        Array of items with a format according to \n        \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface.\n      \n      \n        \n        [\n            {\n                 \"order_item_id\": 1,\n                 \"qty\": 2\n            },\n            {\n            \"order_item_id\": 2,\n            \"qty\": 0.5\n            }\n        ]\n        \n\n      \n      \n        Optional (required, when a Credit Memo must contain\n        particular order items)\n      \n      \n        []\n      \n    \n    \n      \n        isOnline\n      \n      \n        Flag that determines whether funds should be returned to a\n        customer via online payment system (PayPal for example) or\n        not.\n      \n      \n        Boolean\n      \n      \n        &nbsp;\n      \n      \n        Optional\n      \n      \n        false\n      \n    \n    \n      \n    \n    \n      \n        notify\n      \n      \n        Flag that activates e-mail notification about Credit Memo\n        creation. If true, the service notifies a\n        customer; if false, it doesn't.\n      \n      \n        Boolean\n      \n      \n        &nbsp;\n      \n      \n        Optional\n      \n      \n        false\n      \n    \n    \n      \n        appendComment\n      \n      \n        Flag that activates addition of a comment\n        argument to the e-mail notification. If true\n        and comment contains data, the service will\n        add the comment to an e-mail notification.\n      \n      \n        Boolean\n      \n      \n        &nbsp;\n      \n      \n        Optional\n      \n      \n        false\n      \n    \n    \n      \n        comment\n      \n      \n        A comment to Credit Memo.\n      \n      \n        A format according to the \n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface.\n      \n      \n        \n        {\n            \"comment\": \"The first Credit Memo\",\n            \"is_visible_on_front\": true\n        }\n        \n\n      \n      \n        Optional\n      \n      \n        null\n      \n    \n    \n      \n        arguments\n      \n      \n        Additional arguments for the service. Can be used by\n        extension modules.\n      \n      \n        A format according to \n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface.\n      \n      \n        \n        {\n        \"shipping_amount\": 10.00,\n        \"adjustment_positive\": 5.00,\n        \"adjustment_negative\": 5.00\n        }\n        \n\n        A parameter shipping_amount\n        behaves like at the Credit Memo creation page in the Admin\n        area. If shipping amount is not specified, then shipping\n        amount from a target Invoice is refunded automatically. To\n        specify a shipping amount, consider shipping tax displays\n        settings.\n      \n      \n        Optional\n      \n      \n        null\n      \n    \n  \n\n\nReturn values\n\nThe service returns an identifier of a created Credit Memo.\n\nREST\n\nPOST Endpoint\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/V1/&lt;invoiceId&gt;/refund\n\nREST Declaration\n\netc/webapi.xml\n\n&lt;route url=\"/V1/invoice/:invoiceId/refund\" method=\"POST\"&gt;\n    &lt;service class=\"Magento\\Sales\\Api\\RefundInvoiceInterface\" method=\"execute\"/&gt;\n    &lt;resources&gt;\n        &lt;resource ref=\"Magento_Sales::sales\" /&gt;\n    &lt;/resources&gt;\n&lt;/route&gt;\n\nSOAP\n\nSOAP Endpoint\n\nhttp://&lt;magento_host&gt;/soap/&lt;store_code&gt;?wsdl&amp;services=salesRefundInvoiceV1\n\nPHP interface\n\n\\Magento\\Sales\\Api\\RefundInvoiceInterface\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Api;\n\n/**\n * Interface RefundInvoiceInterface\n */\ninterface RefundInvoiceInterface\n{\n    /**\n     * Create refund for invoice\n     *\n     * @param int $invoiceId\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface[] $items\n     * @param bool|null $isOnline\n     * @param bool|null $notify\n     * @param bool|null $appendComment\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface|null $comment\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface|null $arguments\n     * @return int\n     */\n    public function execute(\n        $invoiceId,\n        array $items = [],\n        $isOnline = false,\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface $comment = null,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface $arguments = null\n    );\n}\n\n\nPHP implementation\n\n\\Magento\\Sales\\Model\\RefundInvoice\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Model;\n\nuse Magento\\Framework\\App\\ResourceConnection;\nuse Magento\\Sales\\Api\\CreditmemoRepositoryInterface;\nuse Magento\\Sales\\Api\\InvoiceRepositoryInterface;\nuse Magento\\Sales\\Api\\OrderRepositoryInterface;\nuse Magento\\Sales\\Api\\RefundInvoiceInterface;\nuse Magento\\Sales\\Model\\Order\\Config as OrderConfig;\nuse Magento\\Sales\\Model\\Order\\Creditmemo\\NotifierInterface;\nuse Magento\\Sales\\Model\\Order\\CreditmemoDocumentFactory;\nuse Magento\\Sales\\Model\\Order\\Validation\\RefundInvoiceInterface as RefundInvoiceValidator;\nuse Magento\\Sales\\Model\\Order\\OrderStateResolverInterface;\nuse Magento\\Sales\\Model\\Order\\RefundAdapterInterface;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * Class RefundInvoice\n * @SuppressWarnings(PHPMD.CouplingBetweenObjects)\n */\nclass RefundInvoice implements RefundInvoiceInterface\n{\n    /**\n     * @var ResourceConnection\n     */\n    private $resourceConnection;\n\n    /**\n     * @var OrderStateResolverInterface\n     */\n    private $orderStateResolver;\n\n    /**\n     * @var OrderRepositoryInterface\n     */\n    private $orderRepository;\n\n    /**\n     * @var InvoiceRepositoryInterface\n     */\n    private $invoiceRepository;\n\n    /**\n     * @var CreditmemoRepositoryInterface\n     */\n    private $creditmemoRepository;\n\n    /**\n     * @var RefundAdapterInterface\n     */\n    private $refundAdapter;\n\n    /**\n     * @var CreditmemoDocumentFactory\n     */\n    private $creditmemoDocumentFactory;\n\n    /**\n     * @var NotifierInterface\n     */\n    private $notifier;\n\n    /**\n     * @var OrderConfig\n     */\n    private $config;\n\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    /**\n     * @var RefundInvoiceValidator\n     */\n    private $validator;\n\n    /**\n     * RefundInvoice constructor.\n     *\n     * @param ResourceConnection $resourceConnection\n     * @param OrderStateResolverInterface $orderStateResolver\n     * @param OrderRepositoryInterface $orderRepository\n     * @param InvoiceRepositoryInterface $invoiceRepository\n     * @param RefundInvoiceValidator $validator\n     * @param CreditmemoRepositoryInterface $creditmemoRepository\n     * @param RefundAdapterInterface $refundAdapter\n     * @param CreditmemoDocumentFactory $creditmemoDocumentFactory\n     * @param NotifierInterface $notifier\n     * @param OrderConfig $config\n     * @param LoggerInterface $logger\n     * @SuppressWarnings(PHPMD.ExcessiveParameterList)\n     */\n    public function __construct(\n        ResourceConnection $resourceConnection,\n        OrderStateResolverInterface $orderStateResolver,\n        OrderRepositoryInterface $orderRepository,\n        InvoiceRepositoryInterface $invoiceRepository,\n        RefundInvoiceValidator $validator,\n        CreditmemoRepositoryInterface $creditmemoRepository,\n        RefundAdapterInterface $refundAdapter,\n        CreditmemoDocumentFactory $creditmemoDocumentFactory,\n        NotifierInterface $notifier,\n        OrderConfig $config,\n        LoggerInterface $logger\n    ) {\n        $this-&gt;resourceConnection = $resourceConnection;\n        $this-&gt;orderStateResolver = $orderStateResolver;\n        $this-&gt;orderRepository = $orderRepository;\n        $this-&gt;invoiceRepository = $invoiceRepository;\n        $this-&gt;validator = $validator;\n        $this-&gt;creditmemoRepository = $creditmemoRepository;\n        $this-&gt;refundAdapter = $refundAdapter;\n        $this-&gt;creditmemoDocumentFactory = $creditmemoDocumentFactory;\n        $this-&gt;notifier = $notifier;\n        $this-&gt;config = $config;\n        $this-&gt;logger = $logger;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function execute(\n        $invoiceId,\n        array $items = [],\n        $isOnline = false,\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface $comment = null,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface $arguments = null\n    ) {\n        $connection = $this-&gt;resourceConnection-&gt;getConnection('sales');\n        $invoice = $this-&gt;invoiceRepository-&gt;get($invoiceId);\n        $order = $this-&gt;orderRepository-&gt;get($invoice-&gt;getOrderId());\n        $creditmemo = $this-&gt;creditmemoDocumentFactory-&gt;createFromInvoice(\n            $invoice,\n            $items,\n            $comment,\n            ($appendComment &amp;&amp; $notify),\n            $arguments\n        );\n\n        $validationMessages = $this-&gt;validator-&gt;validate(\n            $invoice,\n            $order,\n            $creditmemo,\n            $items,\n            $isOnline,\n            $notify,\n            $appendComment,\n            $comment,\n            $arguments\n        );\n        if ($validationMessages-&gt;hasMessages()) {\n            throw new \\Magento\\Sales\\Exception\\DocumentValidationException(\n                __(\"Creditmemo Document Validation Error(s):\\n\" . implode(\"\\n\", $validationMessages-&gt;getMessages()))\n            );\n        }\n        $connection-&gt;beginTransaction();\n        try {\n            $creditmemo-&gt;setState(\\Magento\\Sales\\Model\\Order\\Creditmemo::STATE_REFUNDED);\n            $order-&gt;setCustomerNoteNotify($notify);\n            $order = $this-&gt;refundAdapter-&gt;refund($creditmemo, $order, $isOnline);\n            $order-&gt;setState(\n                $this-&gt;orderStateResolver-&gt;getStateForOrder($order, [])\n            );\n            $order-&gt;setStatus($this-&gt;config-&gt;getStateDefaultStatus($order-&gt;getState()));\n            if (!$isOnline) {\n                $invoice-&gt;setIsUsedForRefund(true);\n                $invoice-&gt;setBaseTotalRefunded(\n                    $invoice-&gt;getBaseTotalRefunded() + $creditmemo-&gt;getBaseGrandTotal()\n                );\n            }\n            $this-&gt;invoiceRepository-&gt;save($invoice);\n            $order = $this-&gt;orderRepository-&gt;save($order);\n            $creditmemo = $this-&gt;creditmemoRepository-&gt;save($creditmemo);\n            $connection-&gt;commit();\n        } catch (\\Exception $e) {\n            $this-&gt;logger-&gt;critical($e);\n            $connection-&gt;rollBack();\n            throw new \\Magento\\Sales\\Exception\\CouldNotRefundException(\n                __('Could not save a Creditmemo, see error log for details')\n            );\n        }\n        if ($notify) {\n            if (!$appendComment) {\n                $comment = null;\n            }\n            $this-&gt;notifier-&gt;notify($order, $creditmemo, $comment);\n        }\n\n        return $creditmemo-&gt;getEntityId();\n    }\n}\n\n\nExceptions\n\nIn case of failure, it returns an error object. Example in REST:\n\n{\n    \"message\": \"Creditmemo Document Validation Error(s):\\nWe can't create creditmemo for the order.\\nThe most money available to refund is 0.\"\n}\n\nExtension points\n\nThe service contains extension points marked with @api annotation. Extension developers can use APIs to extend service logic.\n\n\n  \n    \n      Extension point\n      Description\n    \n  \n  \n    \n      \\Magento\\Sales\\Api\\OrderRepositoryInterface\n      An interface for saving and retrieving Orders.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\OrderStateResolverInterface\n      An interface providing a correct state of an Order according to performed operation.\n    \n    \n      \\Magento\\Sales\\Api\\InvoiceRepositoryInterface\n      An interface for saving and retrieving Invoices.\n    \n    \n      \\Magento\\Sales\\Api\\CreditmemoRepositoryInterface\n      An interface for saving and retrieving Credit Memos.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\CreditmemoDocumentFactory\n      A factory for creating an Credit Memo data object. The factory uses the arguments parameter to process the extension attributes of a new Credit Memo.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Creditmemo\\NotifierInterface\n      An interface for sending notifications about new Credit Memo creation.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Validation\\RefundInvoiceInterface\n      An interface for validating service parameters and Credit Memo data object.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\RefundAdapterInterface\n      An interface for a payment according to a selected option (online/offline). It returns Order with modified state, which contains payment specific information.\n    \n  \n\n\nRefundOrder\n\nWith the RefundOrder service you can:\n\n\n  create a Credit Memo (complete or partial) for a particular Order\n  add details about refunded items to an Order\n  change status and state of an Order according to performed actions\n  notify a customer about performed refund operation\n\n\nService parameters\n\n\n  \n    \n      \n        Name\n      \n      \n        Description\n      \n      \n        Format\n      \n      \n        Example\n      \n      \n        Required/Optional\n      \n      \n        Default value\n      \n    \n  \n  \n    \n      \n        orderId\n      \n      \n        An identifier of a target Order for operation.\n      \n      \n        Integer\n      \n      \n        &nbsp;\n      \n      \n        Required\n      \n      \n        &nbsp;\n      \n    \n    \n      \n        items\n      \n      \n        An array of Order items included to a Credit Memo. By\n        default, the service will create a Credit Memo for all\n        Order items.\n      \n      \n        Array of items with a format according to \n        \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface.\n      \n      \n        \n        [\n            {\n                 \"order_item_id\": 1,\n                 \"qty\": 2\n            },\n            {\n                 \"order_item_id\": 2,\n                 \"qty\": 0.5\n            }\n        ]\n        \n\n      \n      \n        Optional (required, when a Credit Memo must contain\n        particular order items)\n      \n      \n        []\n      \n    \n    \n      \n        notify\n      \n      \n        Flag that activates e-mail notification about Credit Memo\n        creation. If true, the service notifies a\n        customer; if false, it doesn't.\n      \n      \n        Boolean\n      \n      \n        &nbsp;\n      \n      \n        Optional\n      \n      \n        false\n      \n    \n    \n      \n        appendComment\n      \n      \n        Flag that activates addition of a comment\n        argument to the e-mail notification. If true\n        and comment contains data, the service will\n        add the comment to an e-mail notification.\n      \n      \n        Boolean\n      \n      \n        &nbsp;\n      \n      \n        Optional\n      \n      \n        false\n      \n    \n    \n      \n        comment\n      \n      \n        A comment to Credit Memo.\n      \n      \n        A format according to the \n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface.\n      \n      \n        \n        {\n            \"comment\": \"The first Credit Memo\",\n            \"is_visible_on_front\": true\n        }\n        \n\n      \n      \n        Optional\n      \n      \n        null\n      \n    \n    \n      \n        arguments\n      \n      \n        Additional arguments for the service. Can be used by\n        extension modules.\n      \n      \n        A format according to \n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface.\n      \n      \n        \n        {\n        \"shipping_amount\": 10.00,\n        \"adjustment_positive\": 5.00,\n        \"adjustment_negative\": 5.00\n        }\n        \n\n        A parameter shipping_amount\n        behaves like at the Credit Memo creation page in the Admin\n        area. If shipping amount is not specified, then shipping\n        amount from a target Invoice is refunded automatically. To\n        specify a shipping amount, consider shipping tax displays\n        settings.\n      \n      \n        Optional\n      \n      \n        null\n      \n    \n  \n\n\nReturn values\n\nThe service returns an identifier of a created Credit Memo.\n\nREST\n\nPOST Endpoint\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/V1/&lt;orderId&gt;/refund\n\nREST Declaration\n\netc/webapi.xml\n\n&lt;route url=\"/V1/order/:orderId/refund\" method=\"POST\"&gt;\n    &lt;service class=\"Magento\\Sales\\Api\\RefundOrderInterface\" method=\"execute\"/&gt;\n    &lt;resources&gt;\n        &lt;resource ref=\"Magento_Sales::sales\" /&gt;\n    &lt;/resources&gt;\n&lt;/route&gt;\n\nSOAP\n\nSOAP Endpoint\n\nhttp://&lt;magento_host&gt;/soap/&lt;store_code&gt;?wsdl&amp;services=salesRefundOrderV1\n\nPHP interface\n\n\\Magento\\Sales\\Api\\RefundOrderInterface\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Api;\n\n/**\n * Interface RefundOrderInterface\n */\ninterface RefundOrderInterface\n{\n    /**\n     * Create offline refund for order\n     *\n     * @param int $orderId\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface[] $items\n     * @param bool|null $notify\n     * @param bool|null $appendComment\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface|null $comment\n     * @param \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface|null $arguments\n     * @return int\n     */\n    public function execute(\n        $orderId,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface $comment = null,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface $arguments = null\n    );\n}\n\n\nPHP implementation\n\n\\Magento\\Sales\\Model\\RefundOrder\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Model;\n\nuse Magento\\Framework\\App\\ResourceConnection;\nuse Magento\\Sales\\Api\\CreditmemoRepositoryInterface;\nuse Magento\\Sales\\Api\\OrderRepositoryInterface;\nuse Magento\\Sales\\Api\\RefundOrderInterface;\nuse Magento\\Sales\\Model\\Order\\Config as OrderConfig;\nuse Magento\\Sales\\Model\\Order\\Creditmemo\\NotifierInterface;\nuse Magento\\Sales\\Model\\Order\\CreditmemoDocumentFactory;\nuse Magento\\Sales\\Model\\Order\\OrderStateResolverInterface;\nuse Magento\\Sales\\Model\\Order\\RefundAdapterInterface;\nuse Magento\\Sales\\Model\\Order\\Validation\\RefundOrderInterface as RefundOrderValidator;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * Class RefundOrder\n * @SuppressWarnings(PHPMD.CouplingBetweenObjects)\n */\nclass RefundOrder implements RefundOrderInterface\n{\n    /**\n     * @var ResourceConnection\n     */\n    private $resourceConnection;\n\n    /**\n     * @var OrderStateResolverInterface\n     */\n    private $orderStateResolver;\n\n    /**\n     * @var OrderRepositoryInterface\n     */\n    private $orderRepository;\n\n    /**\n     * @var CreditmemoRepositoryInterface\n     */\n    private $creditmemoRepository;\n\n    /**\n     * @var RefundAdapterInterface\n     */\n    private $refundAdapter;\n\n    /**\n     * @var CreditmemoDocumentFactory\n     */\n    private $creditmemoDocumentFactory;\n\n    /**\n     * @var RefundOrderValidator\n     */\n    private $validator;\n\n    /**\n     * @var NotifierInterface\n     */\n    private $notifier;\n\n    /**\n     * @var OrderConfig\n     */\n    private $config;\n\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    /**\n     * RefundOrder constructor.\n     *\n     * @param ResourceConnection $resourceConnection\n     * @param OrderStateResolverInterface $orderStateResolver\n     * @param OrderRepositoryInterface $orderRepository\n     * @param CreditmemoRepositoryInterface $creditmemoRepository\n     * @param RefundAdapterInterface $refundAdapter\n     * @param CreditmemoDocumentFactory $creditmemoDocumentFactory\n     * @param RefundOrderValidator $validator\n     * @param NotifierInterface $notifier\n     * @param OrderConfig $config\n     * @param LoggerInterface $logger\n     * @SuppressWarnings(PHPMD.ExcessiveParameterList)\n     */\n    public function __construct(\n        ResourceConnection $resourceConnection,\n        OrderStateResolverInterface $orderStateResolver,\n        OrderRepositoryInterface $orderRepository,\n        CreditmemoRepositoryInterface $creditmemoRepository,\n        RefundAdapterInterface $refundAdapter,\n        CreditmemoDocumentFactory $creditmemoDocumentFactory,\n        RefundOrderValidator $validator,\n        NotifierInterface $notifier,\n        OrderConfig $config,\n        LoggerInterface $logger\n    ) {\n        $this-&gt;resourceConnection = $resourceConnection;\n        $this-&gt;orderStateResolver = $orderStateResolver;\n        $this-&gt;orderRepository = $orderRepository;\n        $this-&gt;creditmemoRepository = $creditmemoRepository;\n        $this-&gt;refundAdapter = $refundAdapter;\n        $this-&gt;creditmemoDocumentFactory = $creditmemoDocumentFactory;\n        $this-&gt;validator = $validator;\n        $this-&gt;notifier = $notifier;\n        $this-&gt;config = $config;\n        $this-&gt;logger = $logger;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function execute(\n        $orderId,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface $comment = null,\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface $arguments = null\n    ) {\n        $connection = $this-&gt;resourceConnection-&gt;getConnection('sales');\n        $order = $this-&gt;orderRepository-&gt;get($orderId);\n        $creditmemo = $this-&gt;creditmemoDocumentFactory-&gt;createFromOrder(\n            $order,\n            $items,\n            $comment,\n            ($appendComment &amp;&amp; $notify),\n            $arguments\n        );\n        $validationMessages = $this-&gt;validator-&gt;validate(\n            $order,\n            $creditmemo,\n            $items,\n            $notify,\n            $appendComment,\n            $comment,\n            $arguments\n        );\n        if ($validationMessages-&gt;hasMessages()) {\n            throw new \\Magento\\Sales\\Exception\\DocumentValidationException(\n                __(\"Creditmemo Document Validation Error(s):\\n\" . implode(\"\\n\", $validationMessages-&gt;getMessages()))\n            );\n        }\n        $connection-&gt;beginTransaction();\n        try {\n            $creditmemo-&gt;setState(\\Magento\\Sales\\Model\\Order\\Creditmemo::STATE_REFUNDED);\n            $order-&gt;setCustomerNoteNotify($notify);\n            $order = $this-&gt;refundAdapter-&gt;refund($creditmemo, $order);\n            $order-&gt;setState(\n                $this-&gt;orderStateResolver-&gt;getStateForOrder($order, [])\n            );\n            $order-&gt;setStatus($this-&gt;config-&gt;getStateDefaultStatus($order-&gt;getState()));\n\n            $order = $this-&gt;orderRepository-&gt;save($order);\n            $creditmemo = $this-&gt;creditmemoRepository-&gt;save($creditmemo);\n            $connection-&gt;commit();\n        } catch (\\Exception $e) {\n            $this-&gt;logger-&gt;critical($e);\n            $connection-&gt;rollBack();\n            throw new \\Magento\\Sales\\Exception\\CouldNotRefundException(\n                __('Could not save a Creditmemo, see error log for details')\n            );\n        }\n        if ($notify) {\n            if (!$appendComment) {\n                $comment = null;\n            }\n            $this-&gt;notifier-&gt;notify($order, $creditmemo, $comment);\n        }\n\n        return $creditmemo-&gt;getEntityId();\n    }\n}\n\n\nExceptions\n\nIn case of failure, it returns an error object. Example in REST:\n\n{\n    \"message\": \"Creditmemo Document Validation Error(s):\\nWe can't create creditmemo for the order.\\nThe most money available to refund is 0.\"\n}\n\nExtension points\n\nThe service contains extension points marked with @api annotation. Extension developers can use APIs to extend service logic.\n\n\n  \n    \n      Extension point\n      Description\n    \n  \n  \n    \n      \\Magento\\Sales\\Api\\OrderRepositoryInterface\n      An interface for saving and retrieving Orders.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\OrderStateResolverInterface\n      An interface providing a correct state of an Order according to performed operation.\n    \n    \n      \\Magento\\Sales\\Api\\CreditmemoRepositoryInterface\n      An interface for saving and retrieving Credit Memos.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\CreditmemoDocumentFactory\n      A factory for creating an Credit Memo data object. The factory uses the arguments parameter to process the extension attributes of a new Credit Memo.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Creditmemo\\NotifierInterface\n      An interface for sending notifications about new Credit Memo creation.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Validation\\RefundOrderInterface\n      An interface for validating service parameters and Credit Memo data object.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\RefundAdapterInterface\n      An interface for a payment according to a selected option (online/offline). It returns Order with modified state, which contains payment specific information.\n    \n  \n\n\nShipOrder\n\nWith the ShipOrder service you can:\n\n\n  create a shipment document (full or partial)\n  add details about shipped items into an order\n  change status and state of an order according to performed actions\n  notify the customer of a new shipment document\n\n\nService parameters\n\n\n  \n    \n      Name\n      Description\n      Format\n      Example\n      Required/Optional\n      Default value\n    \n  \n  \n    \n      orderId\n      An identifier of a target order for operation.\n      Integer\n      &nbsp;\n      Required\n      &nbsp;\n    \n    \n      items\n      An array of order items included to a shipment. By default, the service will create a shipment for all order items.\n      Array of items with a format according to \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface.\n      \n        \n        [\n            {\n                \"order_item_id\": 1,\n                \"qty\": 2\n            },\n            {\n                \"order_item_id\": 2,\n                \"qty\": 0.5\n            }\n        ]\n        \n\n      \n      Optional (required, when a shipment document must contain particular order items)\n      []\n    \n    \n      notify\n      Flag that activates e-mail notification about shipment details. If true, the service notifies a customer; if false, it doesn't.\n      Boolean\n      &nbsp;\n      Optional\n      false\n    \n    \n      appendComment\n      Flag that activates addition of a comment argument to the e-mail notification. If true and comment contains data, the service will add the comment to an e-mail notification.\n      Boolean\n      &nbsp;\n      Optional\n      false\n    \n    \n      comment\n      A comment about a shipment.\n      A format according to the\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface\n        interface.\n      \n      \n      {\n          \"comment\": \"The first Invoice\",\n          \"is_visible_on_front\": true\n      }\n      \n\n      \n       Optional \n       null \n    \n    \n       tracks \n       A list of track numbers attached to a shipment. \n       Array of objects with a format according to\n        \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface&gt;. \n      \n      \n      [\n          {\n              \"track_number\": \"132456789\",\n              \"title\": \"United States Postal Service\",\n              \"carrier_code\": \"usps\"\n          }\n      ]\n      \n\n      \n       Optional \n       [] \n    \n    \n       packages \n       A list of packages attached to a shipment. \n       Array of objects with a format according to\n        \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface. \n      \n      \n      [\n          {\n              \"extension_attributes\":\n              {\n                  \"ups\":\n                      {\n                          \"weight\": 20,\n                          \"height\": 15,\n                          \"width\": 20\n                      }\n              }\n           }\n      ]\n      \n\n      \n      Optional\n      []\n    \n    \n      arguments\n      Additional arguments for the service. Can be used by\n        extension modules.\n      A format according to the\n        \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface\n        interface.\n      &nbsp;\n      Optional\n      null\n    \n  \n\n\nReturn values\n\nThe service returns the identifier of a created shipment.\n\nREST\n\nPOST Endpoint\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/V1/&lt;orderId&gt;/ship\n\nREST Declaration\n\netc/webapi.xml\n\n&lt;route url=\"/V1/order/:orderId/ship\" method=\"POST\"&gt;\n    &lt;service class=\"Magento\\Sales\\Api\\ShipOrderInterface\" method=\"execute\"/&gt;\n    &lt;resources&gt;\n        &lt;resource ref=\"Magento_Sales::sales\" /&gt;\n    &lt;/resources&gt;\n&lt;/route&gt;\n\nSOAP\n\nSOAP Endpoint\n\nhttp://&lt;magento_host&gt;/soap/&lt;store_code&gt;?wsdl&amp;services=salesShipOrderV1\n\nPHP interface\n\n\\Magento\\Sales\\Api\\ShipOrderInterface\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Api;\n\n/**\n * Class ShipOrderInterface\n *\n * @api\n */\ninterface ShipOrderInterface\n{\n    /**\n     * Creates new Shipment for given Order.\n     *\n     * @param int $orderId\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface[] $items\n     * @param bool $notify\n     * @param bool $appendComment\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface|null $comment\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface[] $tracks\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface[] $packages\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface|null $arguments\n     * @return int Id of created Shipment.\n     */\n    public function execute(\n        $orderId,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface $comment = null,\n        array $tracks = [],\n        array $packages = [],\n        \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface $arguments = null\n    );\n}\n\n\nPHP implementation\n\n\\Magento\\Sales\\Model\\ShipOrder\n\nClick to show/hide a code &lt;?php\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Sales\\Model;\n\nuse Magento\\Framework\\App\\ResourceConnection;\nuse Magento\\Sales\\Api\\OrderRepositoryInterface;\nuse Magento\\Sales\\Api\\ShipmentRepositoryInterface;\nuse Magento\\Sales\\Api\\ShipOrderInterface;\nuse Magento\\Sales\\Model\\Order\\Config as OrderConfig;\nuse Magento\\Sales\\Model\\Order\\OrderStateResolverInterface;\nuse Magento\\Sales\\Model\\Order\\OrderValidatorInterface;\nuse Magento\\Sales\\Model\\Order\\ShipmentDocumentFactory;\nuse Magento\\Sales\\Model\\Order\\Shipment\\NotifierInterface;\nuse Magento\\Sales\\Model\\Order\\Shipment\\ShipmentValidatorInterface;\nuse Magento\\Sales\\Model\\Order\\Shipment\\OrderRegistrarInterface;\nuse Magento\\Sales\\Model\\Order\\Validation\\ShipOrderInterface as ShipOrderValidator;\nuse Psr\\Log\\LoggerInterface;\nuse Magento\\Framework\\App\\ObjectManager;\n\n/**\n * Class ShipOrder\n * @SuppressWarnings(PHPMD.CouplingBetweenObjects)\n */\nclass ShipOrder implements ShipOrderInterface\n{\n    /**\n     * @var ResourceConnection\n     */\n    private $resourceConnection;\n\n    /**\n     * @var OrderRepositoryInterface\n     */\n    private $orderRepository;\n\n    /**\n     * @var ShipmentDocumentFactory\n     */\n    private $shipmentDocumentFactory;\n\n    /**\n     * @var OrderStateResolverInterface\n     */\n    private $orderStateResolver;\n\n    /**\n     * @var OrderConfig\n     */\n    private $config;\n\n    /**\n     * @var ShipmentRepositoryInterface\n     */\n    private $shipmentRepository;\n\n    /**\n     * @var ShipOrderValidator\n     */\n    private $shipOrderValidator;\n\n    /**\n     * @var NotifierInterface\n     */\n    private $notifierInterface;\n\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n    /**\n     * @var OrderRegistrarInterface\n     */\n    private $orderRegistrar;\n\n    /**\n     * @param ResourceConnection $resourceConnection\n     * @param OrderRepositoryInterface $orderRepository\n     * @param ShipmentDocumentFactory $shipmentDocumentFactory\n     * @param ShipmentValidatorInterface $shipmentValidator\n     * @param OrderValidatorInterface $orderValidator\n     * @param OrderStateResolverInterface $orderStateResolver\n     * @param OrderConfig $config\n     * @param ShipmentRepositoryInterface $shipmentRepository\n     * @param NotifierInterface $notifierInterface\n     * @param OrderRegistrarInterface $orderRegistrar\n     * @param LoggerInterface $logger,\n     * @param ShipOrderValidator|null $shipOrderValidator\n     * @SuppressWarnings(PHPMD.ExcessiveParameterList)\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function __construct(\n        ResourceConnection $resourceConnection,\n        OrderRepositoryInterface $orderRepository,\n        ShipmentDocumentFactory $shipmentDocumentFactory,\n        ShipmentValidatorInterface $shipmentValidator,\n        OrderValidatorInterface $orderValidator,\n        OrderStateResolverInterface $orderStateResolver,\n        OrderConfig $config,\n        ShipmentRepositoryInterface $shipmentRepository,\n        NotifierInterface $notifierInterface,\n        OrderRegistrarInterface $orderRegistrar,\n        LoggerInterface $logger,\n        ShipOrderValidator $shipOrderValidator = null\n    ) {\n        $this-&gt;resourceConnection = $resourceConnection;\n        $this-&gt;orderRepository = $orderRepository;\n        $this-&gt;shipmentDocumentFactory = $shipmentDocumentFactory;\n        $this-&gt;shipmentValidator = $shipmentValidator;\n        $this-&gt;orderValidator = $orderValidator;\n        $this-&gt;orderStateResolver = $orderStateResolver;\n        $this-&gt;config = $config;\n        $this-&gt;shipmentRepository = $shipmentRepository;\n        $this-&gt;notifierInterface = $notifierInterface;\n        $this-&gt;logger = $logger;\n        $this-&gt;orderRegistrar = $orderRegistrar;\n        $this-&gt;shipOrderValidator = $shipOrderValidator ?: ObjectManager::getInstance()-&gt;get(\n            ShipOrderValidator::class\n        );\n    }\n\n    /**\n     * @param int $orderId\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface[] $items\n     * @param bool $notify\n     * @param bool $appendComment\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface|null $comment\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface[] $tracks\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface[] $packages\n     * @param \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface|null $arguments\n     * @return int\n     * @throws \\Magento\\Sales\\Api\\Exception\\DocumentValidationExceptionInterface\n     * @throws \\Magento\\Sales\\Api\\Exception\\CouldNotShipExceptionInterface\n     * @throws \\Magento\\Framework\\Exception\\InputException\n     * @throws \\Magento\\Framework\\Exception\\NoSuchEntityException\n     * @throws \\DomainException\n     */\n    public function execute(\n        $orderId,\n        array $items = [],\n        $notify = false,\n        $appendComment = false,\n        \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface $comment = null,\n        array $tracks = [],\n        array $packages = [],\n        \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface $arguments = null\n    ) {\n        $connection = $this-&gt;resourceConnection-&gt;getConnection('sales');\n        $order = $this-&gt;orderRepository-&gt;get($orderId);\n        $shipment = $this-&gt;shipmentDocumentFactory-&gt;create(\n            $order,\n            $items,\n            $tracks,\n            $comment,\n            ($appendComment &amp;&amp; $notify),\n            $packages,\n            $arguments\n        );\n        $validationMessages = $this-&gt;shipOrderValidator-&gt;validate(\n            $order,\n            $shipment,\n            $items,\n            $notify,\n            $appendComment,\n            $comment,\n            $tracks,\n            $packages\n        );\n        if ($validationMessages-&gt;hasMessages()) {\n            throw new \\Magento\\Sales\\Exception\\DocumentValidationException(\n                __(\"Shipment Document Validation Error(s):\\n\" . implode(\"\\n\", $validationMessages-&gt;getMessages()))\n            );\n        }\n        $connection-&gt;beginTransaction();\n        try {\n            $this-&gt;orderRegistrar-&gt;register($order, $shipment);\n            $order-&gt;setState(\n                $this-&gt;orderStateResolver-&gt;getStateForOrder($order, [OrderStateResolverInterface::IN_PROGRESS])\n            );\n            $order-&gt;setStatus($this-&gt;config-&gt;getStateDefaultStatus($order-&gt;getState()));\n            $this-&gt;shipmentRepository-&gt;save($shipment);\n            $this-&gt;orderRepository-&gt;save($order);\n            $connection-&gt;commit();\n        } catch (\\Exception $e) {\n            $this-&gt;logger-&gt;critical($e);\n            $connection-&gt;rollBack();\n            throw new \\Magento\\Sales\\Exception\\CouldNotShipException(\n                __('Could not save a shipment, see error log for details')\n            );\n        }\n        if ($notify) {\n            if (!$appendComment) {\n                $comment = null;\n            }\n            $this-&gt;notifierInterface-&gt;notify($order, $shipment, $comment);\n        }\n        return $shipment-&gt;getEntityId();\n    }\n}\n\n\nExceptions\n\nIn case of failure, it returns an error object. Example in REST:\n\n{\n    \"message\": \"Creditmemo Document Validation Error(s):\\nWe can't create creditmemo for the order.\\nThe most money available to refund is 0.\"\n}\n\nExtension points\n\nThe service contains extension points marked with @api annotation. Extension developers can use APIs to extend service logic.\n\n\n  \n    \n      Extension point\n      Description\n    \n  \n  \n    \n      \\Magento\\Sales\\Api\\OrderRepositoryInterface\n      An interface for saving and retrieving Orders.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\OrderStateResolverInterface\n      An interface providing a correct state of an Order according to performed operation.\n    \n    \n      \\Magento\\Sales\\Api\\ShipmentRepositoryInterface\n      An interface for saving and retrieving Shipments.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\ShipmentDocumentFactory\n      A factory creating a Shipment data object. The factory uses the arguments parameter to process the extension attributes of a new shipment document.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Shipment\\NotifierInterface\n      An interface for sending notifications about new Shipment creation.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Validation\\ShipOrderInterface\n      An interface for validating the service parameters and created Shipment data object.\n    \n    \n      \\Magento\\Sales\\Model\\Order\\Shipment\\OrderRegistrarInterface\n      An interface for registering a Shipment in Order to update amount of shipped items in a given Order according to Shipment. The execute method returns an updated Order.\n    \n  \n\n\n\n\n",
      "url": "/guides/v2.0/mrg/ce/Sales.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-xsd-xml-validation-html": {
      "title": "URN schema validation",
      "content": "Each Magento module can contain XSD files for XML validation.\n\nMagento uses Uniform Resource Names (URNs) to reference XML schema declarations.\n\nMagento supported URNs begin with urn:magento. Magento supports two XSD reference types:\n\n\n  Module XSD\n  Framework XSD\n\n\n\n\n  You cannot change the XSD for any XML files provided with the Magento application.\n\n\nModule XSD\nThe syntax for the module XSD is a colon separated declaration. An example follows:\n\nurn:magento:module:Magento_Flow:flows/content.xsd\n\nwhere\n\n\n  urn:magento is the URN identifier\n  module is the reference type identifier\n  Magento_Flow is the name of the module. This must be exactly the same as the module specified by ComponentRegistrar in the registration.php file.\n  flows/content.xsd is the relative path to the module’s directory.\n\n\nFramework XSD\nThe syntax for the framework XSD is a colon separated declaration. An example follows:\n\nurn:magento:framework:Api/etc/extension_attributes.xsd\n\nwhere\n\n\n  urn:magento is the URN identifier\n  framework is the reference type identifier. You can also add additional framework libraries as separate components with framework-&lt;sub-name&gt;\n  Api/etc/extension_attributes.xsd is the relative path to the framework’s directory.\n\n\nReferencing a XSD from another XSD\nUse URN notation to reference schema from inside a XSD document:\n\n&lt;xs:redefine schemaLocation=\"urn:magento:framework:Config/etc/view.xsd\"&gt;\n\nThe URN resolution is invoked automatically by the libxml engine. Register the URN resolver by using libxml_set_external_entity_loader:\n\nlibxml_set_external_entity_loader(['Magento\\Framework\\Config\\Dom\\UrnResolver', 'registerEntityLoader']);\n\n\n\n  The relative path to other XSDs cannot be used from inside the XSD file, because the entity loader fails to resolve the relative path.\n\n\nNext\nName your component\n",
      "url": "/guides/v2.0/extension-dev-guide/build/XSD-XML-validation.html"
    }
    ,
  
    "guides-v2-0-pattern-library-general-accessibilityguideline-accessibilityguideline-html": {
      "title": "Admin Design Pattern Library",
      "content": "Accessibility guidelines\nThe Magento application should be accessible for all people, whatever their hardware, software, language, culture, location, or physical or mental ability. These are general guidelines that when adhere to, people with diverse range of hearing, movement, sight, and cognitive ability should be able to use.\n\nVisual\n1. Be mindful of text length\n\nDon’t make textual content too long or too short.\n\n2. Provide adequate contrast\n\nBe extra careful with light shades of gray, orange, and yellow. Check your contrast levels here:\nhttp://webaim.org/resources/contrastchecker/ \nor here:\nhttp://www.paciellogroup.com/resources/contrastAnalyser\n\nAcceptable\t\n\n\nNot Acceptable\t\t \n\n\n3. Limit the use of CAPS\n\nAll caps can be difficult to read and can be read incorrectly by screen readers.\n\n4. Use appropriate font size\n\nLarge text: 18 px Bold (22 px Regular) or larger\n\nNormal text: 13-14 px\n\n5. Consider reading order\n\nThe reading order should match the visual order.\n\n6. Keep the focus indicator visible\n\nEnsure keyboard users can visually identify a focused link.\n\n7. Design a “skip to main content” link\n\nA link for keyboard users to skip navigation should be at the top of the page. It can be hidden, but should be visible when in keyboard focus.\n\nExamples\n\n http://www.nomensa.com/ \n\n https://www.paypal.com/ \n\n http://www.standardchartered.com/en/ \n\n http://nemesisdesign.net/blog/accessibility/nice-css-skip-links-appearing-focus/ \n\nSkip-To Widget\n\n8. Use animation, video and audio with caution\n\nIf used, provide a play/pause button. Avoid flashing or strobing content, which can cause seizures.Provide captions and other alternatives for multimedia.\n\n9. Don’t convey content with color alone\n\nEvaluate the design in grayscale. Make sure to use both shapes and color to differentiate icons.\n\n10. Use images to enhance the experience for users with full vision\n\n11. Make sure links are obvious\n\nDifferentiate link text from other text.\n\n12. Do not use content that causes seizures.\n\nContent\n1. Ensure that link text makes sense by itself\n\nAvoid “Click Here” in link text. Ambiguous links such as “More” or “Continue” can also be confusing.\n\n2. Provide text alternatives for non-text content.\n\n3. Content should be present-able in different ways without losing meaning.\n\n4. Content should appear and operate in predictable ways.\n\nUser Interaction\n\n1. Use animation, video and audio with caution.\n\nIf used, provide a play/pause button. Avoid flashing or strobing content, which can cause seizures.\n\n2. Create design that adapts to phone and tablet form factors\n\nDon’t override native accessibility features.\n\n3. Design accessible form controls\n\nEnsure form controls have descriptive labels and instructions. Pay close attention to form validation errors and recovery mechanisms.\n\n4. Give users enough time to read and use content.\n\n5. Help users navigate and find content.\n\nDevelopment\n\n(This section is high level only and is no way a complete list for engineering.)\n\n1. Ensure that all content can be accessed with just the keyboard in a logical way using tab order\n\nMake sure dynamic interactions (hide/show, open/close, update) can be used with the keyboard itself, without any peripheral devices. The reading order should match the visual order.\n\n2. Plan heading structure early\n\nEnsure all content and design fits under a logical heading structure.\n\n3. Use true text whenever possible\n\nTrue text enlarges better, loads faster, and is easier to translate. Use CSS to add visual style.\n\n4. Support the link focus indicator\n\nMake sure keyboard users can always visually identify a focused link.\n\n5. Support a “skip to main content” link\n\nA link for keyboard users to skip navigation should be at the top of the page. It can be hidden, but should be visible when in keyboard focus.\n\n6. Code accessible form controls\n\nEnsure form controls have descriptive labels and instructions. Pay close attention to form validation errors and recovery mechanisms.\n\n7. Provide alt text if icons or glyphs are used without text\n\nCascading style sheets (CSS) for purely decorative images. Hyperlinked images without supporting text must be inline, with alternative text.\n\nResources\nOverview:  http://www.w3.org/WAI/WCAG20/glance/ \n\nAuthoring Tool Accessibility Guidelines (ATAG) 1.0:  http://www.w3.org/TR/WCAG10-HTML-TECHS/\n\nAuthoring Tool Accessibility Guidelines (ATAG) 2.0:  http://www.w3.org/TR/WCAG20-HTML-TECHS/\n",
      "url": "/guides/v2.0/pattern-library/general/accessibilityguideline/accessibilityGuideline.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-adapters-html": {
      "title": "Adapters",
      "content": "Overview\n\nAdapter classes follow the adapter pattern and wrap around classes from third-party libraries.\nThese classes allow you to use functionality from third-party libraries in your code by converting the third-party class interfaces into an interface that is expected by your native code.\n\nWhen to use\n\nYou should always use adapter classes instead of directly using classes from third-party libraries.\nThis reduces the change impact on your code when the API changes in a third-party library.\n\nWe recommend using adapter classes for dependency injection to get access to the functionality provided by third-party classes.\n\nHow to write\n\nA common approach in developing an adapter is to create an interface named AdapterInterface to describe the functionality the third-party class provides.\nThis class is typically found in a directory labeled Adapter.\nClasses implementing this adapter interface use the third-party class directly to provide indirect functionality.\n\nThis approach allows you to update or substitute different implementations provided by other third-party classes without the need to update code that uses your adapter.\n\nExamples of adapters in Magento\n\nMagento/Framework/Code/Minifier\n\nThe minifier functionality provided by the Magento/Framework/Code library involves the use of third-party libraries for code compression.\n\nThe AdapterInterface for this class contains a minify($content) function that the CSSmin and JShrink implementation class define.\n\nThe jshrink(tedivm/jshrink) and cssmin(tubalmartin/cssmin) libraries registered in the composer.json file provide the functionalities for the implementation classes.\n\nMagento/Framework/Image\n\nThe Magento/Framework/Image library uses adapters to access functionality provided by GD(php-gd2) and ImageMagick(php-imagick) third-party libraries.\n\nThe AdapterInterface class defines the available functionality, and the Gd2 and ImageMagick adapter classes provides the concrete implementation using the third-party libraries.\n\nExample Code\n\nThe code below describes an interface for an adapter that parses markdown.\n\n/**\n * Interface for markdown library adapters\n */\nnamespace MyCompany\\MyModule\\Markdown\\Parser\\Adapter;\n\ninterface AdapterInterface\n{\n    /**\n     * Converts markdown text into another format\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text);\n}\n\n\n\nThe code below is an implementation class of the AdapterInterface that uses the php-markdown library to convert markdown into HTML.\n\nnamespace MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\PhpMarkdown;\n\nuse \\Michelf\\Markdown;\nuse MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\AdapterInterface;\n\n/**\n * Adapter for php-markdown library\n */\nclass PhpMarkdown implements AdapterInterface\n{\n    /**\n     * Convert markdown into HTML\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text)\n    {\n        return Markdown::defaultTransform($text);\n    }\n}\n\n\n\nTo configure the ObjectManager to use the PhpMarkdown implementation when the AdapterInterface class is requested as a dependency, add the following code in your di.xml file.\n\n&lt;preference for=\"MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\AdapterInterface\" type=\"MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\PhpMarkdown\\PhpMarkdown\" /&gt;\n\n\n\nThe code below is an alternate implementation class of the AdapterInterface that uses the Ciconia library to parse markdown into HTML.\nThis code differs from the previous implementations in that an instance of the Ciconia class is a constructor dependency.\n\nnamespace MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\Ciconia;\nuse Ciconia\\Ciconia;\nuse MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\AdapterInterface;\n\n/**\n * Adapter for the Ciconia library\n */\nclass CiconiaParser implements AdapterInterface\n{\n    /**\n     * @var Ciconia\n     */\n     protected $parser;\n\n    /**\n     * @param Ciconia\n     */\n    public function __construct(Ciconia $parser)\n    {\n        $this-&gt;parser = $parser;\n    }\n\n    /**\n     * Convert markdown into HTML\n     *\n     * @param string $text\n     * @return string\n     */\n    public function parse($text)\n    {\n        return $this-&gt;parser-&gt;render($text);\n    }\n}\n\n\n\nThe following dependency injection entries belong in the di.xml file.\nThey describe to the ObjectManager how to create the third-party and adapter classes.\n\n&lt;virtualType name=\"defaultCiconia\" type=\"Ciconia\\Ciconia\" shared=\"false\"&gt;\n   &lt;arguments&gt;\n       &lt;argument name=\"renderer\" xsi:type=\"null\"/&gt;\n   &lt;/arguments&gt;\n&lt;/virtualType&gt;\n&lt;type name=\"MyCompany\\MyModule\\Markdown\\Parser\\Adapter\\Ciconia\\CiconiaParser\"&gt;\n   &lt;arguments&gt;\n       &lt;argument name=\"parser\" xsi:type=\"object\"&gt;defaultCiconia&lt;/argument&gt;\n   &lt;/arguments&gt;\n&lt;/type&gt;\n\n",
      "url": "/guides/v2.0/extension-dev-guide/adapters.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-extension-attributes-adding-attributes-html": {
      "title": "Adding extension attributes to entity",
      "content": "Third party developers cannot change API Data interface in the Magento Core, so the one way to affect interfaces\nusing configuration is to add extension attributes.\n\n\n  We will demonstrate this on Product entity, Product Repository and Web Api example. \n\n\nIn order to get product or list of products by Magento API you need to do API request to appropriate service (Product Repository in our case).\nIn Response we got object with next structure:\n\nProduct response:\n\n&lt;product&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;sku&gt;some-sku&lt;/sku&gt;\n    &lt;custom_attributes&gt;&lt;!-- Custom Attributes Data --&gt;&lt;/custom_attributes&gt;\n    &lt;extension_attributes&gt;&lt;!-- Here should we add extension attributes data --&gt;&lt;/extension_attributes&gt;\n&lt;/product&gt;\n\nProduct list response:\n\n&lt;products&gt;\n    &lt;item&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;sku&gt;some-sku&lt;/sku&gt;\n        &lt;custom_attributes&gt;&lt;!-- Custom Attributes Data --&gt;&lt;/custom_attributes&gt;\n        &lt;extension_attributes&gt;&lt;!-- Here should we add extension attributes data --&gt;&lt;/extension_attributes&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;sku&gt;some-sku-2&lt;/sku&gt;\n        &lt;custom_attributes&gt;&lt;!-- Custom Attributes Data --&gt;&lt;/custom_attributes&gt;\n        &lt;extension_attributes&gt;&lt;!-- Here should we add extension attributes data --&gt;&lt;/extension_attributes&gt;\n    &lt;/item&gt;\n&lt;/products&gt;\n\nAdd plugin to product repository\n\nIn order to add attributes, we need to use after plugin on Product Repository.\nPlugin should listen next methods: save, get, getList.\n\nWe can add scalar and non-scalar extension attributes.\n\n\n  Scalar is simple attribute. \n  Non-scalar attribute can be represented by Data Object. \n\n\npublic function afterGet\n(\n    \\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject,\n    \\Magento\\Catalog\\Api\\Data\\ProductInterface $entity\n) {\n    $ourCustomData = $this-&gt;customDataRepository-&gt;get($entity-&gt;getId());\n\n    $extensionAttributes = $entity-&gt;getExtensionAttributes(); /** get current extension attributes from entity **/\n    $extensionAttributes-&gt;setOurCustomData($ourCustomData);\n    $entity-&gt;setExtensionAttributes($extensionAttributes);\n\n    return $entity;\n}\n\nIt is the easiest way to add custom attributes. Because we need to know if entity already has extension attributes.\nAlso we need to check whether we already has our extension attribute.\n\nAfterGetList is similar to afterGet.\n\nLikewise afterSave plugin should take data from entity and do some manipulations:\n\npublic function afterSave\n(\n    \\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject,\n    \\Magento\\Catalog\\Api\\Data\\ProductInterface $entity\n) {\n    $extensionAttributes = $entity-&gt;getExtensionAttributes(); /** get current extension attributes from entity **/\n    $ourCustomData = $extensionAttributes-&gt;getOurCustomData();\n    $this-&gt;customDataRepository-&gt;save($ourCustomData);\n\n    return $entity;\n}\n\nBut if some entity doesn’t have implementation to fetch extension attributes, we will always retrieve null and each time when we fetch extension atrributes we need to check if they are null - need to create them. To avoid such code duplication, we need to create afterGet plugin for our entity with extension attributes.\n\nLet’s assume the product entity doesn’t have any implementation of extension attributes, so our plugin might looks like this:\n\n\nuse Magento\\Catalog\\Api\\Data\\ProductExtensionInterface;\nuse Magento\\Catalog\\Api\\Data\\ProductInterface;\nuse Magento\\Catalog\\Api\\Data\\ProductExtensionFactory;\n\nclass ProductAttributesLoad\n{\n    /**\n     * @var ProductExtensionFactory\n     */\n    private $extensionFactory;\n\n    /**\n     * @param ProductExtensionFactory $extensionFactory\n     */\n    public function __construct(ProductExtensionFactory $extensionFactory)\n    {\n        $this-&gt;extensionFactory = $extensionFactory;\n    }\n\n    /**\n     * Loads product entity extension attributes\n     *\n     * @param ProductInterface $entity\n     * @param ProductExtensionInterface|null $extension\n     * @return ProductExtensionInterface\n     */\n    public function afterGetExtensionAttributes(\n        ProductInterface $entity,\n        ProductExtensionInterface $extension = null\n    ) {\n        if ($extension === null) {\n            $extension = $this-&gt;extensionFactory-&gt;create();\n        }\n\n        return $extension;\n    }\n}\n\n\n\nAnd now need to bind our plugin to ProductInterface:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Catalog\\Api\\Data\\ProductInterface\"&gt;\n        &lt;plugin name=\"ProductExtensionAttributeOperations\" type=\"Magento\\Catalog\\Plugin\\ProductAttributesLoad\"/&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nExtension Attributes Configuration:\n\nFor scalar attributes we can use next configuration:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\"&gt;\n    &lt;extension_attributes for=\"Magento\\Catalog\\Api\\Data\\ProductInterface\"&gt;\n        &lt;attribute code=\"first_custom_attribute\" type=\"Magento\\SomeModule\\Api\\Data\\CustomDataInterface\" /&gt;\n        &lt;attribute code=\"second_custom_attribute\" type=\"Magento\\SomeModule\\Api\\Data\\CustomDataInterface\" /&gt;\n    &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nFor non-scalar attributes:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\"&gt;\n    &lt;extension_attributes for=\"Magento\\Catalog\\Api\\Data\\ProductInterface\"&gt;\n        &lt;attribute code=\"our_custom_data\" type=\"Magento\\SomeModule\\Api\\Data\\CustomDataInterface[]\" /&gt;\n    &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nIn first case we will get the next result:\n\n&lt;product&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;sku&gt;some-sku&lt;/sku&gt;\n    &lt;custom_attributes&gt;&lt;!-- Custom Attributes Data --&gt;&lt;/custom_attributes&gt;\n    &lt;extension_attributes&gt;\n        &lt;first_custom_attribute&gt;1&lt;/first_custom_attribute&gt;\n        &lt;second_custom_attribute&gt;2&lt;/second_custom_attribute&gt;\n    &lt;/extension_attributes&gt;\n&lt;/product&gt;\n\nIn second one:\n\n&lt;product&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;sku&gt;some-sku&lt;/sku&gt;\n    &lt;custom_attributes&gt;&lt;!-- Custom Attributes Data --&gt;&lt;/custom_attributes&gt;\n    &lt;extension_attributes&gt;\n        &lt;our_custom_data&gt;\n                &lt;first_custom_attribute&gt;1&lt;/first_custom_attribute&gt;\n                &lt;second_custom_attribute&gt;2&lt;/second_custom_attribute&gt;\n        &lt;/our_custom_data&gt;\n    &lt;/extension_attributes&gt;\n&lt;/product&gt;\n\nSample module on github\n",
      "url": "/guides/v2.0/extension-dev-guide/extension_attributes/adding-attributes.html"
    }
    ,
  
    "guides-v2-0-pattern-library-templates-address-form-address-form-html": {
      "title": "Admin Design Pattern Library",
      "content": "Address Form\n\n Contents \nThis article discusses  standards and rules for an address entry forms.\n\nFor solutions not described in this article, please refer to other related patterns or contact the Magento UX Design team.\n\nWhen to Use / When Not to Use\nThe address entry fields should be used whenever an address needs to be captured. This set of form elements will be universal across the Magento user experience. This pattern should follow rules established in the Form Elements and related patterns.\n\nVariations\nThe only variation of this pattern at this time is the North American Address Entry format. Users have the ability to create address entry formats for other locales within the system.\n\nFields That Make Up Address Entry (in order)\n\n\n\t\n\t\t Label\n\t\t Input Type \n\t\t Required? \n\t\n\t\n\t\t\n\t\t\tAddress Line 1\n\t\t\tText Field\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tAddress Line 2\n\t\t\tText Field\n\t\t\tNo\n\t\t\n\t\t\n\t\t\tCity\n\t\t\tText Field\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tState/Province\n\t\t\tDropdown (Default can be localized)\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tZIP/Postal Code\n\t\t\tText Field\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tCountry\n\t\t\tDropdown (Default can be localized)\n\t\t\tYes\n\t\t\n\t\n\n\n\n\nStyling\nThis pattern will follow the Form standards established in the Form Elements and related patterns. Refer to the Form Elements and related patterns for style information.\n\nUsage Example\n\n\nAssets\nSource files associated with this article are currently attached the Form Elements Pattern.\n",
      "url": "/guides/v2.0/pattern-library/templates/address-form/address-form.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-admin-admin-best-practices-html": {
      "title": "Admin",
      "content": "This section of the Best Practices Guide discusses the Admin, the UI panel used by Magento administrators. It is where Magento system and storefront parameters can be modified and configured. Third-party extensions installed by the system admin or merchant are also found in this area, along with any of their configuration settings.\n\nThis is an important section to read, because what extension developers choose to do (or not do) when coding to integrate their extensions has a big impact on the look and feel of the Admin UI.\n\n\n  Remember that most merchants have multiple extensions installed, and most of these extensions are exposed through the Admin. In order to prevent a cluttered Admin, please follow the guidelines, and communicate with Magento and the community when you have questions.\n\n\nFor additional information on design topics for the Admin, read the Admin Pattern Library and the Admin Style Guide.\n\nArticles\n\n\n  \n    Admin\n  \n  \n    Admin Panel Placement and Design\n  \n  \n    Admin FAQ\n  \n\n\n",
      "url": "/guides/v2.0/ext-best-practices/admin/admin-best-practices.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-admin-theme-apply-html": {
      "title": "Apply an Admin theme",
      "content": "What's in this topic\n\nThis topic describes how to apply your custom theme for Magento Admin.\n\nPrerequisites\n\n\n  Set your Magento application to the developer mode. The application mode influences the way static files are cached by Magento.\n  Create a custom theme for the Admin panel.\n  Add a new custom module or decide to use existing custom module. The module must load after the Magento_Theme module. To ensure this, add the following code in &lt;your_custom_module_dir&gt;/etc/module.xml (replace placeholders with your module information):\n\n\n    &lt;module name=\"%YourVendor_YourModule%\" setup_version=\"2.0.1\"&gt; &lt;!-- Example: \"Magento_Backend --&gt;\"\n        &lt;sequence&gt;\n            &lt;module name=\"Magento_Theme\"/&gt;\n            &lt;module name=\"Magento_Enterprise\"/&gt; &lt;!-- For Enterprise versions only --&gt;\n        &lt;/sequence&gt;\n    &lt;/module&gt;\n\n\n If you choose to create a separate dedicated module, you can use the Magento_SampleMinimal module from the Magento 2 sample modules repository as example of a minimal module you need. If you will copy and use Magento_SampleMinimal, do not forget to enter your vendor and module naming, instead the ones used in the sample, in the &lt;your_module_dir&gt;/etc/module.xml, &lt;your_module_dir&gt;/registration.php, and &lt;your_module_dir&gt;/composer.json files .\nIf you decide to use the existing module, keep in mind, that theme declaring might be affected when the module is changed.\n\n\nApply a custom theme in Admin: Overview\n\nTo apply the Admin theme, take the following steps:\n\n\n  Specify the new Admin theme in your module’s di.xml\n  Update the components by running the bin/magento setup:upgrade command.\n  Open the Admin in browser and view the new theme applied.\n\n\nEach step is described further with more details.\n\nSpecify the custom Admin theme in di.xml\n\nYou need to specify the admin theme to be used in the &lt;your_module_dir&gt;/etc/adminhtml/di.xml file. Add it, if the file does not yet exist in your module.\n\nIn &lt;your_module_dir&gt;/etc/adminhtml/di.xml add the following (replace the placeholders with the vendor name and theme code of your Admin theme):\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n\n    &lt;!-- Admin theme. Start --&gt;\n    &lt;type name=\"Magento\\Theme\\Model\\View\\Design\"&gt;\n        &lt;arguments&gt;\n             &lt;argument name=\"themes\" xsi:type=\"array\"&gt;\n                 &lt;item name=\"adminhtml\" xsi:type=\"string\"&gt;%Your_vendor_dir%/%your_theme_code%&lt;/item&gt; &lt;!-- Example: \"Magento/backend\" --&gt;\n             &lt;/argument&gt;\n         &lt;/arguments&gt; \n    &lt;/type&gt;\n    &lt;!-- Admin theme. End --&gt;\n&lt;/config&gt;\n\nUpdate components to actually apply the Admin theme\n\nFor your changes to take effect, you need to update Magento components. For this, \nrun the bin/magento setup:upgrade command in your command line. If prompted, also run bin/magento setup:di:compile.\n\nFor details about performing command line tasks, view the following topics:\n\n  Command line configuration\n  Uninstall or reinstall Magento: Optionally keeping generated files\n\n\nOpen Admin in browser\n\nThe last step is to open the Admin in browser and view the new theme applied.\n\nSee also\n\n\n  Uninstall a theme\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/admin_theme_apply.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-admin-theme-create-html": {
      "title": "Create an Admin theme",
      "content": "What's in this topic\n\nThis topic describes how to create your custom theme for Magento Admin, referencing the similar flow for creating a custom storefront theme.\n\nPrerequisites\n\nSet your Magento application to the developer mode. The application mode influences the way static files are cached by Magento.\n\nOverview\n\nTo create a custom Admin theme, take the following steps:\n\n\n  Create a theme directory.\n  Add a declaration theme.xml.\n  Add registration.php.\n  Optionally add composer.json.\n  Optionally change theme logo.\n\n\nEach step is described further.\n\nCreate a theme directory\nIn the app/design/adminhtml directory create a new &lt;Vendor&gt;/&lt;admin_theme&gt; directory.\n\nAdd a declaration theme.xml\n\nIn the theme directory, add theme.xml containing at least the theme name and the parent theme name (if the theme inherits from one). We recommend you to inherit from the default Magento Admin theme: Magento/backend.\n\nAdd or copy from an existing theme.xml to your theme directory app/design/adminhtml/&lt;Vendor&gt;/&lt;admin_theme&gt;.\n\nConfigure it using the following example (replace placeholders with your theme information):\n\n&lt;theme xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\"&gt;\n     &lt;title&gt;%Theme title%&lt;/title&gt; &lt;!-- your theme's name --&gt;\n     &lt;parent&gt;%vendor_dir%/%parent_theme_dir%&lt;/parent&gt; &lt;!-- the parent theme. Example: Magento/backend --&gt;\n &lt;/theme&gt;\n\nIf you change the theme title or parent theme information in theme.xml after a theme was already registered, you need to open or reload any Magento Admin page for your changes to be saved in the database.\n\nAdd registration.php\nIn your theme directory, create a registration.php file.\nIn this file, add the following code, having replaced placeholders with your theme information:\n\n&lt;?php\n/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::THEME,\n    'adminhtml/%vendor_dir/your_theme_dir%', // Example: 'adminhtml/Magento/backend'\n    __DIR__\n);  \n\nOptionally add composer.json\nSee the Make your theme a Composer package (optional)\n\nAdmin theme logo (optional)\n\nIn the default Magento/backend theme lib/web/images/magento-logo.svg is used as theme logo. \nTo override it, in your theme directory, create a web/images sub-directory, and add your custom file named magento-logo.svg. \nIf you want to use the file with other name and/or format, you need to additionally declare it as described in Declaring theme logo.\n\nTheme registration\n\nOnce you open the Magento Admin (or reload any  Magento Admin page) having added the theme files to the files system, your theme gets registered and added to the database.\n\nApply the Admin theme\n\nSee the Apply a custom Admin theme topic.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/admin_theme_create.html"
    }
    ,
  
    "guides-v2-0-test-integration-annotations-html": {
      "title": "Using DocBlock Annotations",
      "content": "DocBlock annotations help to declare context in your code. In addition to built-in PHPUnit annotations, the Integration testing framework provides custom annotations described in this topic.\n\nQuick overview\n\nThe following annotations are available in integration tests:\n\n\n  \n    \n      Name\n      Annotation\n      Format\n      Description\n    \n  \n  \n    \n      Application Isolation\n      @magentoAppIsolation\n      @magentoAppIsolation enabled|disabled\n      Enables or disables application isolation when you run tests. When enabled, an application state after a test run will be the same as before the test run. For example, you should enable it, when you want to create sessions in a test, but you don’t want them to affect other tests.\n    \n    \n      Configuration Fixture\n      @magentoConfigFixture\n      @magentoConfigFixture [&lt;store_code&gt;_store] &lt;config_path&gt; &lt;config_value&gt;\n      Sets up configuration settings for a particular test. The list of settings is stored in the core_config_data database table. After the test execution, the settings revert to their original state.\n    \n    \n      Database Isolation\n      @magentoDbIsolation\n      @magentoDbIsolation enabled|disabled\n      Enables or disables database isolation. Disabled by default, unless you are using @magentoDataFixture, in which case it is enabled by default. All data, required for a test, live during transaction only. Any test results won’t be written in a database.\n    \n    \n      Data Fixture\n      @magentoDataFixture\n      @magentoDataFixture &lt;script_filename&gt;|&lt;method_name&gt;\n      Points to a class or a method which creates testing entities (fixtures) for test execution.\n    \n    \n      Application Area\n      @magentoAppArea\n      @magentoAppArea adminhtml|frontend|global\n      Configures test environment in the context of specified application area.\n    \n    \n      Enable/Disable Cache\n      @magentoCache\n      @magentoCache &lt;type&gt;|all enabled|disabled\n      Enables or disables certain cache segment or all of them to prevent isolation problems.\n    \n    \n      Register Components\n      @magentoComponentsDir\n      @magentoComponentsDir &lt;dir_path&gt;\n      Registers fixture components from specified directory (recursively). Unregisters the components after the test is finished.\n    \n  \n\n\nApplying annotations\n\nThe Magento-specific annotations for integration tests are applied in the following order:\n\n\n  @magentoAppIsolation\n  @magentoDbIsolation\n  @magentoDataFixture\n  @magentoComponentsDir\n  @magentoAppArea\n  @magentoCache\n  @magentoConfigFixture\n\n\nThis order is necessary to meet the requirement of setting up the store-scoped configuration values for fixture stores (stores that are created by data fixtures).\n\n\n\n",
      "url": "/guides/v2.0/test/integration/annotations.html"
    }
    ,
  
    "guides-v2-0-rest-anonymous-api-security-html": {
      "title": "Restricting access to anonymous web APIs",
      "content": "Magento 2 allows some web APIs to be accessed by unauthenticated (anonymous) users. Many of these APIs allow a customer to have a robust shopping experience on the website without having to log in.\n\nA subset of these APIs can return information about products, promotions, and storefronts that a merchant might consider proprietary. For example, Catalog module APIs can provide information about an item’s pricing and quantity, as well as items that are currently not for sale. The CMS module could reveal information about upcoming promotional landing pages and coupons. The Store module can reveal too much information about individual websites.\n\nFor this reason, by default, Magento 2 now prevents anonymous users from accessing the APIs that could reveal sensitive information.  When the feature is enabled, the user must have administrator privileges to execute the affected APIs.\n\nThe following table lists the APIs that are no longer available to an anonymous user by default:\n\n\n  \n    \n      Product\n      Module\n      API\n      Action\n    \n  \n  \n    \n      CE\n      Catalog\n      /V1/products\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attributes/:attributeCode\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/types\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attribute-sets/sets/list\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attribute-sets/:attributeSetId\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attribute-sets/:attributeSetId/attributes\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attribute-sets/groups/list\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/attributes/:attributeCode/options\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/media/types/:attributeSetName\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/media/:entryId\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/media\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/group-prices/:customerGroupId/tiers\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/categories/:categoryId\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/categories\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/options\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/options/:optionId\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/links/types\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/links/:type/attributes\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/products/:sku/links/:type\n      GET\n    \n    \n      CE\n      Catalog\n      /V1/categories/:categoryId/products\n      GET\n    \n    \n      CE\n      CatalogInventory\n      /V1/stockStatuses/:productSku\n      GET\n    \n    \n      CE\n      Cms\n      /V1/cmsPage/:pageId\n      GET\n    \n    \n      CE\n      Cms\n      /V1/cmsBlock/:blockId\n      GET\n    \n    \n      CE\n      ConfigurableProduct\n      /V1/configurable-products/:sku/children\n      GET\n    \n    \n      CE\n      ConfigurableProduct\n      /V1/configurable-products/:sku/options/:id\n      GET\n    \n    \n      CE\n      ConfigurableProduct\n      /V1/configurable-products/:sku/options/all\n      GET\n    \n    \n      CE\n      Store\n      /V1/store/storeViews\n      GET\n    \n    \n      CE\n      Store\n      /V1/store/storeGroups\n      GET\n    \n    \n      CE\n      Store\n      /V1/store/websites\n      GET\n    \n    \n      CE\n      Store\n      /V1/store/storeConfigs\n      GET\n    \n  \n\n\n\n    Preventing anonymous access to these APIs could cause third-party integrations to fail. If a third-party integration calls any of these web APIs, it will receive an authentication error instead of the expected response. In this case, you might need to disable this feature.\n    To disable this feature, log in to the Admin panel and navigate to Stores &gt; Configuration &gt; Services &gt; Magento Web API &gt; Web API Security. Then select Yes from the Allow Anonymous Guest Access menu.\n\n\nIf the list of APIs that are inaccessible to anonymous users must be updated for a third-party extension, an integrator can add to their extension’s di.xml file to update or replace the functionality defined in the WebapiSecurity module.\n\nThe following APIs remain accessible to anonymous users. Most of these must remain accessible to support the checkout and add-to-cart Ajax functionalities.\n\n\n  \n    \n      Product\n      Module\n      API\n      Action\n    \n  \n  \n    \n      CE\n      Checkout\n      /V1/guest-carts/:cartId/shipping-information\n      POST\n    \n    \n      CE\n      Checkout\n      /V1/guest-carts/:cartId/totals-information\n      POST\n    \n    \n      CE\n      Checkout\n      /V1/guest-carts/:cartId/payment-information\n      POST\n    \n    \n      CE\n      Checkout\n      /V1/guest-carts/:cartId/payment-information\n      GET\n    \n    \n      CE\n      Checkout\n      /V1/guest-carts/:cartId/set-payment-information\n      POST\n    \n    \n      CE\n      Customer\n      /V1/customers\n      POST\n    \n    \n      CE\n      Customer\n      /V1/customers/:customerId/password/resetLinkToken/:resetPasswordLinkToken\n      GET\n    \n    \n      CE\n      Customer\n      /V1/customers/password\n      PUT\n    \n    \n      CE\n      Customer\n      /V1/customers/isEmailAvailable\n      POST\n    \n    \n      CE\n      Directory\n      /V1/directory/currency\n      GET\n    \n    \n      CE\n      Directory\n      /V1/directory/countries\n      GET\n    \n    \n      CE\n      Directory\n      /V1/directory/countries/:countryId\n      GET\n    \n    \n      CE\n      GiftMessage\n      /V1/guest-carts/:cartId/gift-message\n      GET\n    \n    \n      CE\n      GiftMessage\n      /V1/guest-carts/:cartId/gift-message/:itemId\n      GET\n    \n    \n      CE\n      GiftMessage\n      /V1/guest-carts/:cartId/gift-message\n      POST\n    \n    \n      CE\n      GiftMessage\n      /V1/guest-carts/:cartId/gift-message/:itemId\n      POST\n    \n    \n      CE\n      Integration\n      /V1/integration/admin/token\n      POST\n    \n    \n      CE\n      Integration\n      /V1/integration/customer/token\n      POST\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts\n      POST\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/order\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/shipping-methods\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/estimate-shipping-methods\n      POST\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/items\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/items\n      POST\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/items/:itemId\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/items/:itemId\n      DELETE\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/selected-payment-method\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/selected-payment-method\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/payment-methods\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/billing-address\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/billing-address\n      POST\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/coupons\n      GET\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/coupons/:couponCode\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/coupons\n      DELETE\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/collect-totals\n      PUT\n    \n    \n      CE\n      Quote\n      /V1/guest-carts/:cartId/totals\n      GET\n    \n    \n      CE\n      Search\n      /V1/search\n      GET\n    \n    \n      EE\n      GiftCardAccount\n      /V1/carts/guest-carts/:cartId/giftCards/:giftCardCode\n      DELETE\n    \n    \n      EE\n      GiftCardAccount\n      /V1/carts/guest-carts/:cartId/giftCards\n      POST\n    \n    \n      EE\n      GiftCardAccount\n      /V1/carts/guest-carts/:cartId/checkGiftCard/:giftCardCode\n      GET\n    \n    \n      EE\n      GiftRegistry\n      /V1/guest-giftregistry/:cartId/estimate-shipping-methods\n      POST\n    \n  \n\n",
      "url": "/guides/v2.0/rest/anonymous-api-security.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-apache-html": {
      "title": "Apache",
      "content": "Apache versions supported\n\nMagento requires Apache 2.2.x or 2.4.x.\n\nHelp if you're just starting out\nIf you’re new to all this and need some help getting started, we suggest the following:\n\n\n  Is the Magento software installed already?\n  What is the software that the Magento server needs to run?\n  What operating system is my server running?\n  How do I log in to my Magento server using a terminal, command prompt, or SSH?\n\n\nImportant: Apache rewrites and .htaccess\nThis topic discusses how to enable Apache 2.2 rewrites and specify a setting for the distributed configuration file, .htaccess.\n\nMagento uses server rewrites and .htaccess to provide directory-level instructions for Apache. The following instructions are included in all of the other sections in this topic as well.\n\nClick to show Apache 2.4 instructions \n\n  Use this section to enable Apache 2.4 rewrites and specify a setting for the distributed configuration file, .htaccess\n  Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n  \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n  To enable the Apache rewrite module, enter the following command:\na2enmod rewrite\nTo enable Magento to use the distributed configuration file .htaccesssee the guidelines in the Apache 2.4 documentation.\n\tNote that in Apache 2.4, the server's default site configuration file is /etc/apache2/sites-available/000-default.conf\n\tFor example, you can add the following to the end of 000-default.conf:\n\t\n&lt;Directory \"/var/www/html\"&gt;\n\tAllowOverride  &lt;value from Apache site&gt;\n&lt;/Directory&gt;\n\t\n\t\t\n\t\tIn some cases, additional parameters might be required. For more information, see the Apache 2.4 documentation.\n\t\n\nIf you changed Apache settings, restart Apache:\n\tservice apache2 restart\n\n  \n\t\n\tIf you upgraded from an earlier Apache version, first look for &lt;Directory \"/var/www/html\"&gt; or &lt;Directory \"/var/www\"&gt; in 000-default.conf.\n\tYou must change the value of AllowOverride in the directive for the directory to which you expect to install the Magento software. For example, to install in the web server docroot, edit the directive in &lt;Directory /var/www&gt;.\n\n\n\n\nClick to show Apache 2.2 instructions \n\n  Use this section to enable Apache 2.2 rewrites and specify a setting for the distributed configuration file, .htaccess\n\n  Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n\n  \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n\n  \n    \n      Open the following file for editing.\n\n      \n        Ubuntu: vim /etc/apache2/sites-available/default\n        CentOS: vim /etc/httpd/conf/httpd.conf\n      \n    \n    \n      Locate the block that starts with:\n\n      \n        Ubuntu 12: &lt;Directory /var/www/&gt;\n        Ubuntu 14 or CentOS: &lt;Directory /var/www/html&gt;\n      \n    \n    \n      Change the value of AllowOverride to &lt;value from Apache site&gt;.\n\n      An example for Ubuntu 12 follows.\n\n      &lt;Directory /var/www/&gt;\nOptions Indexes FollowSymLinks MultiViews\nAllowOverride &lt;value from Apache site&gt;\nOrder allow,deny\nAllow from all\n&lt;Directory&gt;\n      \n\n      \n    \n    The preceding values for Order might not work in all cases. For more information, see the Apache documentation (2.2, 2.4).\n\n    \n    Save the file and exit the text editor.\n    \n      Ubuntu only. Configure Apache to use the mod_rewrite module.\n\n          cd /etc/apache2/mods-enabled\n    ln -s ../mods-available/rewrite.load\n      \n    \n    \n      If you changed Apache settings, restart Apache.\n\n      service apache2 restart\n      \n    \n  \n\n\n\n\n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n\nVerify the Apache version\nTo verify the Apache version you’re currently running, enter:\n\napache2 -v\n\n\nThe result displays similar to the following:\n\nServer version: Apache/2.2.22 (Ubuntu)\nServer built:   Jul 22 2014 14:35:32\n\n\n\n  If Apache is not installed, see:\n    \n      Installing or upgrading Apache on Ubuntu\n      Installing Apache on CentOS\n    \n  \n  If Apache 2.2 is installed on Ubuntu 12 and you want to use PHP 5.6, see the next section\n\n\nInstalling or upgrading Apache on Ubuntu\nThe following sections discusses how to install or upgrade Apache:\n\n\n  Install Apache\n  Upgrade to Apache 2.4 on Ubuntu 12 to use PHP 5.6 or PHP 7\n\n\nInstalling Apache on Ubuntu 16, 14, or 12\nClick to show/hide content To install the default version of Apache (Ubuntu 14, 16—Apache 2.4, Ubuntu 12—Apache 2.2):\n\n\n  \n    Install Apache\n\n    apt-get -y install apache2\n    \n  \n  \n    Verify the installation.\n\n    apache2 -v\n    \n\n    The result displays similar to the following:\n\n    Server version: Apache/2.4.18 (Ubuntu)\nServer built:   2016-04-15T18:00:57\n    \n  \n  \n    Enable rewrites and .htaccess as discussed in the following sections.\n  \n\n\nEnable rewrites and .htaccess for Apache 2.4\n\n\n  Use this section to enable Apache 2.4 rewrites and specify a setting for the distributed configuration file, .htaccess\n  Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n  \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n  To enable the Apache rewrite module, enter the following command:\na2enmod rewrite\nTo enable Magento to use the distributed configuration file .htaccesssee the guidelines in the Apache 2.4 documentation.\n\tNote that in Apache 2.4, the server's default site configuration file is /etc/apache2/sites-available/000-default.conf\n\tFor example, you can add the following to the end of 000-default.conf:\n\t\n&lt;Directory \"/var/www/html\"&gt;\n\tAllowOverride  &lt;value from Apache site&gt;\n&lt;/Directory&gt;\n\t\n\t\t\n\t\tIn some cases, additional parameters might be required. For more information, see the Apache 2.4 documentation.\n\t\n\nIf you changed Apache settings, restart Apache:\n\tservice apache2 restart\n\n  \n\t\n\tIf you upgraded from an earlier Apache version, first look for &lt;Directory \"/var/www/html\"&gt; or &lt;Directory \"/var/www\"&gt; in 000-default.conf.\n\tYou must change the value of AllowOverride in the directive for the directory to which you expect to install the Magento software. For example, to install in the web server docroot, edit the directive in &lt;Directory /var/www&gt;.\n\n\n  Enable rewrites and .htaccess for Apache 2.2\n  \n\n    Use this section to enable Apache 2.2 rewrites and specify a setting for the distributed configuration file, .htaccess\n\n    Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n\n    \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n\n    \n      \n        Open the following file for editing.\n\n        \n          Ubuntu: vim /etc/apache2/sites-available/default\n          CentOS: vim /etc/httpd/conf/httpd.conf\n        \n      \n      \n        Locate the block that starts with:\n\n        \n          Ubuntu 12: &lt;Directory /var/www/&gt;\n          Ubuntu 14 or CentOS: &lt;Directory /var/www/html&gt;\n        \n      \n      \n        Change the value of AllowOverride to &lt;value from Apache site&gt;.\n\n        An example for Ubuntu 12 follows.\n\n        &lt;Directory /var/www/&gt;\nOptions Indexes FollowSymLinks MultiViews\nAllowOverride &lt;value from Apache site&gt;\nOrder allow,deny\nAllow from all\n&lt;Directory&gt;\n        \n\n        \n    \n    The preceding values for Order might not work in all cases. For more information, see the Apache documentation (2.2, 2.4).\n\n      \n      Save the file and exit the text editor.\n      \n        Ubuntu only. Configure Apache to use the mod_rewrite module.\n\n            cd /etc/apache2/mods-enabled\n    ln -s ../mods-available/rewrite.load\n        \n      \n      \n        If you changed Apache settings, restart Apache.\n\n        service apache2 restart\n        \n      \n    \n\n    Next steps\n    \n      Solving 403 (Forbidden) errors\n      Continue with the next prerequisite (PHP Ubuntu)\n      Determine your installation or upgrade path\n    \n  \n\n\n\nUpgrading Apache on Ubuntu 12\nClick to show/hide content To use PHP 5.6 on Ubuntu 12, you must upgrade Apache to version 2.4. (By default, Ubuntu 12 comes with Apache 2.2.)\n\nTo upgrade to Apache 2.4:\n\n\n  \n    Add the ppa:ondrej repository, which has Apache 2.4:\n\n    apt-get -y update\napt-add-repository ppa:ondrej/apache2\napt-get -y update\n    \n  \n  \n    Install Apache 2.4:\n\n    apt-get install -y apache2\n    \n\n    \n\nIf the apt-get install command fails because of unmet dependencies, consult a resource like http://askubuntu.com.\n\n  \n  \n    Verify the installation.\n\n    apache2 -v\n    \n\n    Messages similar to the following should display:\n\n    Server version: Apache/2.4.10 (Ubuntu)\nServer built:   Jul 22 2014 22:46:25\n    \n  \n  \n    Continue with the next section.\n  \n\n\nEnable rewrites and .htaccess for Apache 2.4\n\n\n  Use this section to enable Apache 2.4 rewrites and specify a setting for the distributed configuration file, .htaccess\n  Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n  \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n  To enable the Apache rewrite module, enter the following command:\na2enmod rewrite\nTo enable Magento to use the distributed configuration file .htaccesssee the guidelines in the Apache 2.4 documentation.\n\tNote that in Apache 2.4, the server's default site configuration file is /etc/apache2/sites-available/000-default.conf\n\tFor example, you can add the following to the end of 000-default.conf:\n\t\n&lt;Directory \"/var/www/html\"&gt;\n\tAllowOverride  &lt;value from Apache site&gt;\n&lt;/Directory&gt;\n\t\n\t\t\n\t\tIn some cases, additional parameters might be required. For more information, see the Apache 2.4 documentation.\n\t\n\nIf you changed Apache settings, restart Apache:\n\tservice apache2 restart\n\n  \n\t\n\tIf you upgraded from an earlier Apache version, first look for &lt;Directory \"/var/www/html\"&gt; or &lt;Directory \"/var/www\"&gt; in 000-default.conf.\n\tYou must change the value of AllowOverride in the directive for the directory to which you expect to install the Magento software. For example, to install in the web server docroot, edit the directive in &lt;Directory /var/www&gt;.\n\n\n  Next steps\n  \n    Solving 403 (Forbidden) errors\n    Continue with the next prerequisite (PHP Ubuntu)\n    Determine your installation or upgrade path\n  \n\n\n\nInstalling Apache on CentOS 6 or 7\n\nClick to install Apache on CentOS 6 or 7 Magento requires Apache use server rewrites. You must also specify the type of directives that can be used in .htaccess, which Magento uses to specify rewrite rules.\n\nInstalling and configuring Apache is basically a three-step process: install the software, enable rewrites, and specify .htaccess directives.\n\nInstalling Apache\n\n  \n    Install Apache 2 if you haven’t already done so.\n\n    yum -y install httpd\n    \n  \n  \n    Verify the installation:\n\n    httpd -v\n    \n\n    Messages similar to the following display to confirm the installation was successful:\n\n    Server version: Apache/2.2.15 (Unix)\nServer built:   Oct 16 2014 14:48:21\n    \n  \n  \n    Continue with the next section.\n  \n\n\n\n\t\n\tEven though Apache 2.4 is provided by default with CentOS 7, you configure it like Apache 2.2. See the following section.\n\n\nEnable rewrites and .htaccess for Apache 2.2 (including CentOS 7)\n\n\n  Use this section to enable Apache 2.2 rewrites and specify a setting for the distributed configuration file, .htaccess\n\n  Magento uses server rewrites and .htaccess to provide directory-level instructions for Apache.\n\n  \n\t\n\tFailure to enable these settings typically results in no styles displaying on your storefront or Admin.\n\n\n  \n    \n      Open the following file for editing.\n\n      \n        Ubuntu: vim /etc/apache2/sites-available/default\n        CentOS: vim /etc/httpd/conf/httpd.conf\n      \n    \n    \n      Locate the block that starts with:\n\n      \n        Ubuntu 12: &lt;Directory /var/www/&gt;\n        Ubuntu 14 or CentOS: &lt;Directory /var/www/html&gt;\n      \n    \n    \n      Change the value of AllowOverride to &lt;value from Apache site&gt;.\n\n      An example for Ubuntu 12 follows.\n\n      &lt;Directory /var/www/&gt;\nOptions Indexes FollowSymLinks MultiViews\nAllowOverride &lt;value from Apache site&gt;\nOrder allow,deny\nAllow from all\n&lt;Directory&gt;\n      \n\n      \n    \n    The preceding values for Order might not work in all cases. For more information, see the Apache documentation (2.2, 2.4).\n\n    \n    Save the file and exit the text editor.\n    \n      Ubuntu only. Configure Apache to use the mod_rewrite module.\n\n          cd /etc/apache2/mods-enabled\n    ln -s ../mods-available/rewrite.load\n      \n    \n    \n      If you changed Apache settings, restart Apache.\n\n      service apache2 restart\n      \n    \n  \n\n  Next steps\n  \n    Solving 403 (Forbidden) errors\n    Continue with the next prerequisite (PHP Ubuntu)\n    Determine your installation or upgrade path\n  \n\n\n\nSolving 403 (Forbidden) errors\n\nClick to install solve 403 errors If you encounter 403 Forbidden errors when trying to access the Magento site, you can update your Apache configuration or your virtual host configuration to enable visitors to the site as discussed in one of the following sections:\n\n\n  Solving 403 Forbidden errors for Apache 2.4\n  Solving 403 Forbidden errors for Apache 2.2\n\n\nSolving 403 Forbidden errors for Apache 2.4\nTo enable web site visitors to access your site, use one of the Require directives.\n\nFor example:\n\n&lt;Directory /var/www/&gt;\n\tOptions Indexes FollowSymLinks MultiViews\n\tAllowOverride &lt;value from Apache site&gt;\n\tOrder allow,deny\n\tRequire all granted\n&lt;/Directory&gt;\n\n\n\n\t\n\tThe preceding values for Order might not work in all cases. For more information, see the Apache documentation.\n\n\nSolving 403 Forbidden errors for Apache 2.2\nTo enable web site visitors to access your site, use the Allow directive.\n\nFor example:\n\n&lt;Directory /var/www/&gt;\n\tOptions Indexes FollowSymLinks MultiViews\n\tAllowOverride &lt;value from Apache site&gt;\n\tOrder allow,deny\n\tAllow from all\n&lt;/Directory&gt;\n\n\n\n\t\n\tThe preceding values for Order might not work in all cases. For more information, see the Apache documentation.\n\n\n\nRelated topics:\n\n\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  MySQL\n  Configuring security options\n  Installing optional software\n  Determine your installation or upgrade path\n\n\n",
      "url": "/guides/v2.0/install-gde/prereq/apache.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-api-concepts-html": {
      "title": "Public interfaces &amp; APIs",
      "content": "What is a public interface?\nA public interface is a set of code that third-party developers can call, implement, or build as a plug-in. Magento guarantees that this code will not change in subsequent releases without a major version change.\nPublic interfaces for a module are marked with @api annotation.\n\n\n\n  Third-party developers should use only these interfaces, that is, interfaces with the `@api` annotation. You can use other interfaces but those may be modified or removed in subsequent Magento releases. For more information, see Backward compatibility.\n\n\nWhat is an API?\nAn application programming interface (API) is a set of interfaces and their implementations that a module provides to other modules.\nAPI types\nThe following items are considered types of APIs:\n\n   Directory structure\n   Configuration files structure\n   Events\n   Client API\n   Provider API (SPI)\n\nDirectory structure and configuration file structure are types of APIs because extension developers use them. Developers write configurations, and place their static files in specified folders; so if the configuration file structure or directory structure changes in subsequent releases, modules and extensions may break.\n",
      "url": "/guides/v2.0/extension-dev-guide/api-concepts.html"
    }
    ,
  
    "guides-v2-0-rest-apis-html": {
      "title": "REST APIs (Swagger)",
      "content": "\n",
      "url": "/guides/v2.0/rest/apis.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-arch-diagrams-html": {
      "title": "Architectural diagrams",
      "content": "Magento architecture from different perspectives\n\nDepending upon your role and purpose for learning more about Magento, there are several different ways to view the Magento architecture. For example, a developer who wants to create new modules or perhaps customize an existing module will want to understand the architecture of a module itself, and how it fits into the larger view, with the Magento framework and other components. However, a merchant who wants to quickly build an online store front wants to view the collection of components from a higher level, and understand the components that impact the look, feel, and user interaction components.\n\nArchitecture layers diagram\n\nThe following diagram illustrates the components of Magento, and shows the “layers” or tiers, for all components, as well as the Magento framework, 3rd party libraries, the supported database, and other technologies.\n\n\n\nRelated topics\n\n\n  Architecture layers overview\n\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/arch_diagrams.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-attributes-html": {
      "title": "EAV and extension attributes",
      "content": "Magento provides two types of attributes that integrators can use to extend the functionality provided out-of-the-box:\n\n\n  \n    Custom and EAV (Entity-Attribute-Value) attributes. Custom attributes are those added on behalf of a merchant. For example, a merchant might need to add attributes to describe products, such as shape or volume. A merchant can add these attributes on the admin panel, and these attributes can be displayed. See the merchant documentation for information about managing custom attributes.\n\n    Custom attributes are a subset of EAV attributes. Objects that use EAV attributes typically store values in several MySQL tables. The Customer and Catalog modules have the primary models that use EAV attributes. Other modules, such as ConfigurableProduct, GiftMessage, and Tax, use the EAV functionality for Catalog.\n  \n  \n    Extension attributes. Extension attributes are new in Magento 2. They are used to extend functionality and often use more complex data types than custom attributes. These attributes do not appear on the GUI.\n  \n\n\nEAV and custom attributes\n\nCustomAttributesDataInterface defines the methods that are called to get and set custom attributes, including getCustomAttributes().\n\nA module has a set of built-in attributes that are always available. The Catalog module has several attributes that are defined as EAV attributes, but are treated as built-in attributes. These attributes include:\n\n\n  attribute_set_id\n  created_at\n  group_price\n  media_gallery\n  name\n  price\n  sku\n  status\n  store_id\n  tier_price\n  type_id\n  updated_at\n  visibility\n  weight\n\n\nIn this case, when getCustomAttributes() is called, the system returns only custom attributes that are not in this list.\n\nThe Customer module does not treat its EAV attributes in a special manner. As a result, the getCustomAttributes() method returns all EAV attributes.\n\nExtension attributes\n\nUse ExtensibleDataInterface to implement extension attributes. In your code, you must define getExtensionAttributes() and setExtensionAttributes(*ExtensionInterface param).\n\npublic function getExtensionAttributes();\n\nMost likely, you’ll want to extend interfaces defined in the Api/Data directory of a Magento module.\n\nDeclare extension attributes\n\nYou must create an &lt;Module&gt;/etc/extension_attributes.xml file to define the extension attributes for a module:\n\n&lt;config&gt;\n    &lt;extension_attributes for=\"Path\\To\\Interface\"&gt;\n        &lt;attribute code=\"name_of_attribute\" type=\"datatype\"&gt;\n           &lt;resources&gt;\n              &lt;resource  ref=\"permission\"/&gt;\n           &lt;/resources&gt;\n           &lt;join reference_table=\"\" reference_field=\"\" join_on_field=\"\"&gt;\n              &lt;field&gt;fieldname&lt;/field&gt;\n           &lt;/join&gt;\n        &lt;/attribute&gt;\n    &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nwhere:\n\n\n\nKeyword\nDescription\nExample\n\n\n\nfor\nThe fully-qualified type name with the namespace that processes the extensions. The value must be a type that implements `ExtensibleDataInterface`. The interface can be in a different module. \nMagento\\Quote\\Api\\Data\\TotalsInterface\n\n\ncode\nThe name of the attribute. The attribute name should be in snake case (the first letter in each word should be in lowercase, with each word separated by an underscore). \ngift_cards_amount_used\n\n\ntype\nThe data type. This can be a simple data type, such as string or integer, or complex type, such as an interface.\nfloat Magento\\CatalogInventory\\Api\\Data\\StockItemInterface\n\n\nref\nOptional. Restricts access to the extension attribute to users with the specified permission.\nMagento_CatalogInventory::cataloginventory\n\n\nreference_table\n\nThe table involved in a join operation. See Searching extension attributes for details.\n\nadmin_user\n\n\nreference_field\nColumn in the reference_table\nuser_id\n\n\njoin_on_field\nThe column of the table associated with the interface specified in the for keyword that will be used in the join operation.\nstore_id\n\n\nfield\nOne or more fields present in the interface specified in the type keyword.\nYou can specify the column=\"\" keyword to define the column in the reference_table to use. The field value specifies the property on the interface which should be set.\n&lt;field&gt;firstname&lt;/field&gt;&lt;field&gt;lastname&lt;/field&gt;&lt;field&gt;email&lt;/field&gt;\n&lt;field column=\"customer_group_code\"&gt;code&lt;/field&gt;\n\n\n\n\n\nSearching extension attributes\n\nThe system uses a join directive to add external attributes to a collection and to make the collection filterable. The join element in the extension_attributes.xml file defines which object fields and the database table/column to use as the source of a search.\n\nIn the following example, an attribute named stock_item of type Magento\\CatalogInventory\\Api\\Data\\StockItemInterface added to the Magento\\Catalog\\Api\\Data\\ProductInterface.\n\n&lt;extension_attributes for=\"Magento\\Catalog\\Api\\Data\\ProductInterface\"&gt;\n    &lt;attribute code=\"stock_item\" type=\"Magento\\CatalogInventory\\Api\\Data\\StockItemInterface\"&gt;\n        &lt;join reference_table=\"cataloginventory_stock_item\" reference_field=\"product_id\" join_on_field=\"entity_id\"&gt;\n            &lt;field&gt;qty&lt;/field&gt;\n        &lt;/join&gt;\n    &lt;/attribute&gt;\n&lt;/extension_attributes&gt;\n\nWhen getList() is called, it returns a list of ProductInterfaces. When it does this, the code populates the stock_item with a joined operation in which the StockItemInterface’s qty property come from the cataloginventory_stock_item table where the Product’s entity_Id is joined with the cataloginventory_stock_item.product_id column.\n\nExtension attribute authentication\n\nIndividual fields that are defined as extension attributes can be restricted, based on existing permissions. This feature allows extension developers to restrict access to data. See Web API authentication overview for general information about authentication in Magento.\n\nThe following code sample defines stock_item as an extension attribute of the CatalogInventory module. CatalogInventory is treated as a “third-party extension”. Access to the inventory data is restricted because the quantity of in-stock item may be competitive information.\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\"&gt;\n    &lt;extension_attributes for=\"Magento\\Catalog\\Api\\Data\\ProductInterface\"&gt;\n        &lt;attribute code=\"stock_item\" type=\"Magento\\CatalogInventory\\Api\\Data\\StockItemInterface\"&gt;\n            &lt;resources&gt;\n                &lt;resource ref=\"Magento_CatalogInventory::cataloginventory\"/&gt;\n            &lt;/resources&gt;\n        &lt;/attribute&gt;\n    &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nIn this example, the stock_item attribute is restricted to only the users who have the Magento_CatalogInventory::cataloginventory permission. As a result, an anonymous or unauthenticated user issuing a GET http://&lt;magento_base_url&gt;/rest/V1/products/&lt;sku&gt; request will receive product information similar to the following:\n\n{\n  \"sku\": \"tshirt1\",\n  \"price\": \"20.00\",\n  \"description\": \"New JSmith design\",\n  \"extension_attributes\": {\n    \"logo size\": \"small\"\n  },\n  \"custom_attributes\": {\n    \"artist\": \"James Smith\"\n  }\n}\n\n\nHowever, an authenticated user with the permission Magento_CatalogInventory::cataloginventory receives the additional stock_item field:\n\n{\n  \"sku\": \"tshirt1\",\n  \"price\": \"20.00\",\n  \"description\": \"New JSmith design\",\n  \"extension_attributes\": {\n    \"logo size\": \"small\",\n    \"stock_item\" : {\n      \"status\" : \"in_stock\"\n      \"quantity\": 70\n    }\n  },\n  \"custom_attributes\": {\n    \"artist\": \"James Smith\"\n  }\n}\n\n\nThis only works for extension attributes (those attributes defined in an extension_attributes.xml file). There are no permission restrictions on the rest of the returned data. For example, there is no way to restrict custom_attributes.\n\nExtensionInterfaces\n\nAn ExtensionInterface will be empty if no extension attributes have been added. In the following example, in an unmodified installation, CustomerExtensionInterface will be generated, but will be empty:\n\ninterface CustomerExtensionInterface extends \\Magento\\Framework\\Api\\ExtensionAttributesInterface\n{\n}\n\nHowever, if an extension similar to the following has been defined, the interface will not be empty.\n\n&lt;extension_attributes for=\"Magento\\Customer\\Api\\Data\\CustomerInterface\"&gt;\n    &lt;attribute code=\"attributeName\" type=\"Magento\\Some\\Type[]\" /&gt;\n&lt;/extension_attributes&gt;\n\nTroubleshoot EAV attributes\nIf you have issues when using setup:upgrade to your store environment, verify __construct uses the method EavSetupFactory not EavSetup. You should not directly inject EavSetup in extension code. Check through your custom code and purchased modules and extensions to verify. After changing the methods, you should be able to properly deploy.\n\nRelated topics\n\n    Web API authentication overview\n    Adding extension attributes to an entity\n\n",
      "url": "/guides/v2.0/extension-dev-guide/attributes.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-back-to-guide-html": {
      "title": "Modal widget",
      "content": "Go back to JavaScript section of the Frontend Developer Guide.\n",
      "url": "/guides/v2.0/javascript-dev-guide/back_to_guide.html"
    }
    ,
  
    "guides-v2-0-release-notes-backward-incompatible-changes-html": {
      "title": "Magento 2.0 Backward Incompatible Changes",
      "content": "This topic discusses the most important backward incompatible changes made after Magento 2.0.0 release in scope of 2.0 version.\n\nBe aware that no @api code has been modified.\n\nTo see all backward incompatible changes follow:\n\n\n  Magento Open Source backward incompatible changes\n  Magento Commerce backward incompatible changes\n\n\nFor more information about backward compatibility, see Magento’s backward compatibility policy.\n\nFramework changes\n\n\n  A convertConfigTimeToUtc() method is added to the lib/internal/Magento/Framework/Stdlib/DateTime/TimezoneInterface interface. To implement this interface, please implement the method.\n  A convertConfigTimeToUtc method is added to the  lib/internal/Magento/Framework/Stdlib/DateTime/Timezone.\n\n\nMagento_CatalogRule module changes\n\nDB schema changes\n\n\n  From the catalogrule table the following rows were deleted: sub_is_enable, sub_simple_action, sub_discount_amount.\n  From the catalogrule_product table the following rows were deleted: sub_simple_action, sub_discount_amount.\n\n\nUI changes\n\n\n  The Subproduct discounts dropdown on a catalog price rule was deleted, including Apply and Discount Amount subfields.\n\n\n\n  \n    \n      Setup version 2.0.0\n      Setup version 2.0.1\n    \n  \n  \n    \n      \n      \n    \n  \n\n\nFlow changes\n\n\n  The functionality of adding a price rule to the subproduct was deleted.\n\n\nMagento_Catalog module changes\n\nCode changes\n\n\n  General changes\n    \n      Reset button has been removed.\n    \n  \n  POST data structure changed\n    \n      The parent category ID parent_id is now posted in the general field.\n      The category data from the general array is split to the specific arrays by a field set name.\n    \n  \n\n\n\n  \n    setup_version version 2.0.3\n    setup_version version 2.0.4\n  \n  \n    \n    \n    [\n        'general' =&gt; [\n            'name' =&gt; 'Category',\n            'is_enabled' =&gt; 1,\n            'layout_update' =&gt; '&lt;XML CODE&gt;',\n            'enabled' =&gt; 1\n        ],\n        ...\n    ]\n    \n\n    \n    \n    \n    [\n        'general' =&gt; [\n            'name' =&gt; 'Category',\n            'is_enabled' =&gt; 1,\n            'parent_id' =&gt; 3\n        ],\n        'custom_layout' =&gt; [\n            'layout_update' =&gt; '&lt;XML CODE&gt;',\n            'enabled' =&gt; 1\n        ],\n        ...\n    ]\n    \n\n    \n  \n\n\nYou can find a setup_version parameter in the &lt;your_Magento_module_dir&gt;/etc/module.xml file.\n\n\n  The Google Optimizer POST data moved to a specific array.\n  On/Off fields\n    \n      The input type has been changed from select to switcher.\n      A web page sends POST message with attribute value = \"true\" if the field is checked or value = \"false\" if it is not.\n      A server converts value attribute to the PHP true/false boolean type value.\n    \n  \n\n\n\n  \n    setup_version version 2.0.3\n    setup_version version 2.0.4\n  \n  \n    \n    Select option value (int, string)\n    \n    \n    String:{'true'|'false'}\n    \n  \n\n\n\n  Check boxes and radio buttons work as on/off fields.\n  Category products grid\n    \n      Rendered by a UI component as a standalone block\n      Initialized using the magento-init event\n    \n  \n  To join EAV attributes use linkField.\n\n\nMagento\\Framework\\Model\\Entity\\MetadataPool::getMetadata(Magento\\Catalog\\Api\\Data\\CategoryInterface) -&gt; getLinkField()\n\n\n\n  To set a relation with another entities such as category_product_entity use identifierField.\n\n\nMagento\\Framework\\Model\\Entity\\MetadataPool::getMetadata(Magento\\Catalog\\Api\\Data\\CategoryInterface) -&gt; getIdentifierField()\n\n\nForm initialization changes\n\n\n  A form is built with UI components (more info about a form component).\n  The form is extended using a form configuration file &lt;magento2&gt;/app/code/Magento/Catalog/view/adminhtml/ui_component/category_form.xml (see Overview of UI components).\n  A data provider \\Magento\\Catalog\\Model\\Category\\DataProvider is used to set data and fields metadata for the form.\n  Default form data is now a part of metadata that is fetched from the \\Magento\\Catalog\\Model\\Category\\DataProvider.\n\n\nFlow changes\n\nWhen Products -&gt; Categories menu item in the Magento Admin is chosen, the first root category is selected for editing by default now. You can create a new category or a root category manually only. Use the corresponding button Add Root Category or Add Subcategory.\n\n\n\n\n\n",
      "url": "/guides/v2.0/release-notes/backward-incompatible-changes.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-templates-basic-template-html": {
      "title": "Basic template",
      "content": "Overview\nIntroductory text that gives an overview of the topic you will be writing about.\n\nThe purpose of this page is to provide you with a pre-formatted template and useful markdown references to help you get started writing docs.\n\nYou can start off by editing the local version of this file using markdown language (and HTML where needed). Then, create a Pull Request to have your contribution reviewed by the DevDocs team.\n\nBasic Markdown Syntax\nBelow are some basic examples of what you can do with markdown.\n\nText Effects\n\n\n  \n    \n      Example\n      Output\n    \n  \n  \n    \n      *emphasis*\n      emphasis\n    \n    \n      **bold**\n      bold\n    \n    \n      `inline code`\n      inline code\n    \n  \n\n\nBy indenting your content by at least 4 spaces, you can create a code block.\n\n//This is a code block!\nprint \"Hello World!\";\n\n\nFor more examples of basic markdown please follow this link.\n\nLists\nLists are useful for organizing and displaying related items. Below are examples of a bulleted list and an ordered list.\n\nBulleted List:\n\n* List Item 1\n* List Item 2\n* List Item 3\n\n\nOutput:\n\n\n  List Item 1\n  List Item 2\n  List Item 3\n\n\nOrdered List:\n\n1. First Step\n2. Second Step\n3. Third Step\n\n\nOutput:\n\n\n  First Step\n  Second Step\n  Third Step\n\n\nImages\nPlease add any images you may need to the common/images directory.\n\nOnce the image is added, you can use it in your documentation:\n\nExample: ![Image]({{site.baseurl}}common/images/install_cygwin.png)\n\nOutput:\n\n\n\nYou can even scale the image if it is too large:\n\nExample: ![Scaled Image]({{site.baseurl}}common/images/install_cygwin.png){:width=\"446\" height=\"246\"}\n\nOutput:\n\n\n\nTables\nTables can be useful for displaying different kinds of data in an organized way.\n\nExample:\n\n&lt;!-- Basic Markdown Table Syntax --&gt;\n| Column Heading | Column Heading | Column Heading |\n|----------------|----------------|----------------|\n| Data 1         | Data 2         | Data 3         |\n| Data 4         | Data 5         |                |\n| Data 6         |                |                |\n\n\nOutput:\n\n\n  \n    \n      Column Heading\n      Column Heading\n      Column Heading\n    \n  \n  \n    \n      Data 1\n      Data 2\n      Data 3\n    \n    \n      Data 4\n      Data 5\n       \n    \n    \n      Data 6\n       \n       \n    \n  \n\n\nYou can read more about table syntax here.\n\nAdvanced Syntax\n\nCode blocks\n\nCode blocks can also be defined by surrounding the block of code with ~~~ which can be seen in the table example.\n\nFor highlighted code blocks use the highlight Liquid tag.\n\nExample:\n\n\n{% highlight html %}\n&lt;div class=\"container\"&gt;\n  &lt;h4 class=\"title\"&gt;Title&lt;/h4&gt;\n  &lt;div class=\"content\"&gt;\n    &lt;p&gt;Paragraph content.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n{% endhighlight %}\n\n\n\nOutput:\n\n&lt;div class=\"container\"&gt;\n  &lt;h4 class=\"title\"&gt;Title&lt;/h4&gt;\n  &lt;div class=\"content\"&gt;\n    &lt;p&gt;Paragraph content.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\nCallout Messages\n\nUse these messages to highlight or bring attention to a piece of information.\n\nNotes:\n\n&lt;div class=\"bs-callout bs-callout-info\"&gt;\n  &lt;p&gt;This is a note callout. You can use these to provide important information on a topic.&lt;/p&gt;\n&lt;/div&gt;\n\nOutput:\n\n\n  This is a note callout. You can use these to provide important information on a topic.\n\n\nWarnings:\n\n&lt;div class=\"bs-callout bs-callout-warning\"&gt;\n    &lt;p&gt;This is a warning callout. This is can be used to convey important information to the reader.&lt;/p&gt;\n&lt;/div&gt;\n\nOutput:\n\n\n    This is a warning callout. This is can be used to convey important information to the reader.\n\n\nTips:\n\n&lt;div class=\"bs-callout bs-callout-tip\"&gt;\n  &lt;p&gt;This is a tip callout. These can be used to provide useful tips or interesting fact on a topic.&lt;/p&gt;\n&lt;/div&gt;\n\nOutput:\n\n\n  This is a tip callout. These can be used to provide useful tips or interesting fact on a topic.\n\n\nCollapsible content\nYou can use the collapsible content tag to shorten your documentation.\n\n\n  The {% collapsible %} tag must be preceded by a blank line. \n\n\nExample:\n\n\n{% collapsible This is the title %}\nMarkdown content goes in this area.\n{% endcollapsible %}\n\n\n\nOutput:\n\nThis is the title Markdown content goes in this area.\n\n",
      "url": "/guides/v2.0/contributor-guide/templates/basic_template.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-parent-html": {
      "title": "Just the basics",
      "content": "\n",
      "url": "/guides/v2.0/install-gde/basics/basics-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-docroot-html": {
      "title": "What is a docroot?",
      "content": "The web server document root (often referred to as the docroot) is where you put all the files your website needs to function. You can use your web server’s default docroot or modify it to enhance security. For example, you should restrict browser access to Magento-specific files after installation.\n\nThe path to your web server’s default docroot varies depending on the following:\n\n\n  Operating system\n  Web server software\n  Hosting provider (if you use one)\n\n\n\n  As part of the Magento 2 installation process, you specify a subdirectory (usually magento2) under the docroot. The Magento-specific files are installed in this subdirectory, so knowing where to locate the default docroot is critical.\n\n\nContact your hosting provider\nIf you use one, contact your hosting provider to locate the web server docroot. For example, cPanel typically uses public_html as its docroot, but you should contact your provider to confirm.\n\nFind the docroot yourself\nThis section assumes you’ve already set up a simple web server using Apache virtual hosts or nginx server blocks.\n\n\n  You can use virtual hosts and server blocks to run more than one web site on a single machine (e.g., company1.example.com and company2.example.com) or override the web server’s default docroot without changing it.\n\n\nTo find the docroot on your server:\n\n\n  \n    Open one of the following files in a text editor:\n\n    \n      \n        Ubuntu\n\n        /etc/apache2/sites-available/000-default.conf (Apache)\n/etc/nginx/sites-available/default (nginx)\n        \n      \n      \n        CentOS\n\n        /etc/httpd/conf/httpd.conf (Apache)\n/etc/nginx/nginx.conf (nginx)\n        \n      \n    \n  \n  \n    Search the file for DocumentRoot or root.\n\n    Typically, the default Apache docroot on Ubuntu and CentOS is /var/www/html whereas the default nginx docroot on CentOS is /usr/share/nginx/html. For example:\n\n    \n      \n        Apache + Ubuntu/CentOS\n\n        DocumentRoot \"/var/www/html\"\n        \n      \n      \n        nginx + CentOS\n\n        root      /usr/share/nginx/html\n        \n      \n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_docroot.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-login-html": {
      "title": "How do I log in to my Magento server using a terminal, command prompt, or SSH?",
      "content": "\n\n\nTo complete almost all of the tasks in this guide, you must remotely log in to your Magento server.\n\nPrerequisites: You must have:\n\n\n  \n    A terminal application\n\n    Windows and Mac OS typically use different terminal applications.\n\n    \n      \n        Windows: A partial list: putty, Cygwin\n      \n      \n        Mac OS: You can use the built-in Terminal application or any of the following: iTerm, or these\n      \n    \n  \n  \n    A user name and password for the Magento server\n\n    On a hosted system, this is likely a user who doesn’t have administrative rights to the server; that’s OK as long as the user can install system software, stop and start services like the web server, and so on.\n\n    If you have your own server, you or your system administrator can usually log in as the root user, which on Linux, is the user with full administrative rights over the entire server.\n  \n\n\nTo use a terminal application to remotely access the Magento server:\n\n\n  Set up the terminal application according to its provided documentation.\n  Start the terminal application.\n  When prompted, enter your Magento server’s host name or IP address.\n  Log in to the server with the user name or password you were provided.\n\n\nHere’s what it looks like when you’re logged in to a server as the root user with Cygwin on Windows.\n\n\n\n\n\n  Secure Shell (ssh) is a protocol you can use to securely connect to a remote server without the user name or password being sent over the network.\n\n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_login.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-magento-installed-html": {
      "title": "Is the Magento software installed already?",
      "content": "To determine if the Magento software is installed already, you can access the Magento Admin (administration console) or storefront using a web browser.\n\nPrerequisite: You must know the Magento server’s host name or IP address, and the URL to access the Magento installation. If you’re not sure, find the information from your system administrator or hosting provider.\n\nThen open a web browser and go to the URL you were provided. Some examples follow:\n\nhttp://www.example.com/magento2/admin\nhttps://www.example.com/admin\nhttp://www.example.com\n\n\nIf a 404 (Not Found) error displays, Magento probably isn’t installed. You should confirm that with your system administrator or hosting provider.\n\nIf Magento is installed, you should see something like the following after you log in:\n\nMagento Admin:\n\n\n\nMagento storefront:\n\n\n\nWhat if Magento is installed?\n\nIf Magento is installed and you want to manage or upgrade components, see the following guides instead:\n\n\n  \n    Component Manager Guide\n\n    A Magento component is an extension, language package, or theme. The Component Manager installs, uninstalls, updates, enables, or disables components.\n  \n  \n    Upgrade Guide\n\n    Upgrade the Magento software or components.\n  \n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_magento-installed.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-module-html": {
      "title": "What's the difference between a module and a component?",
      "content": "What’s the difference between a module and a component?\nA module is a type of component. A component can be:\n\n\n  A module (code that extends Magento behavior)\n  A theme (changes the look and feel of your Magento Admin or storefront)\n  Language package (used to translate text and messages in the Magento application)\n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_module.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-os-version-html": {
      "title": "What operating system is my server running?",
      "content": "How can you tell what operating system and version your Magento server runs?\n\nPrerequisites: You must access the server using a command prompt (an application that enables you to enter commands directly).\n\nIf you can log in directly to the machine, the application is usually called Terminal.\n\nIf you cannot log in directly, you can log in remotely.\n\nExact command or process of elimination?\n\nIf you already know you’re running Ubuntu or CentOS but don’t know the version, see one of the following sections. If you don’t know that much, just use the process of elimination—run both commands until you find the one that works.\n\nCentOS\n\nTo find the CentOS version, enter the following command in Terminal:\n\ncat /etc/*release*\n\n\nThe following sample output shows you’re running CentOS 6.5 (you can ignore most of the output):\n\nCentOS release 6.5 (Final)\nLSB_VERSION=base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\ncat: /etc/lsb-release.d: Is a directory\nCentOS release 6.5 (Final)\nCentOS release 6.5 (Final)\n\n\nUbuntu\n\nTo find the Ubuntu version, enter the following command in Terminal:\n\nlsb_release -a\n\n\nThe following sample output shows you’re running Ubuntu 14:\n\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:        14.04\nCodename:       trusty\n\n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_os-version.html"
    }
    ,
  
    "guides-v2-0-install-gde-basics-basics-software-html": {
      "title": "What is the software that the Magento server needs to run?",
      "content": "\n\n\nThe full list of software is listed in System Requirements but here are the essentials:\n\n\n  \n    Web server to display web pages. Currently, we’ve documented Apache and plan to document other web servers in the near future.\n  \n  \n    Database management system for long-term data storage and retrieval. We support MySQL.\n  \n  \n    PHP, an acronym for PHP: Hypertext Preprocessor, an open source scripting language suited for web development because it can be embedded in HTML (the language of the web).\n\n    For more information, see the PHP manual or the Wikipedia page.\n  \n\n\n\n\n  If you use a hosting provider, they might already have installed this software. Contact them if you're not sure.\n\n",
      "url": "/guides/v2.0/install-gde/basics/basics_software.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-project-owner-html": {
      "title": "Prepare project environments",
      "content": "To initially set up your Magento Commerce (Cloud) project, you need the Project Owner to create the project, add a super user, and generate Magento Commerce authentication keys. The account owner has sole authority over the project and account to manage your store, project and Git access, and more.\n\nImportant: The Project Owner is required to complete the following steps:\n\n\n  Step 1: Generate Magento authentication keys\n  Step 2: Add admin variables\n  Step 3: Create the project\n  Step 4: Add a Technical Admin account\n\n\nAfter you have completed those tasks, the Technical Admin can manage development and deployments for you.\n\n\n  If you joined us with a 30-day free trial Magento Commerce (Cloud) account, we completed the following first steps for you:\n\n  \n    Created your Cloud account and project\n    Provisioned the initial environment with a cloned Magento Commerce (Cloud) code base in a master branch\n    Created an environment for the master branch with a web server, database, and services\n    Added Magento authentication keys for the Project Owner\n    Add the ADMIN_EMAIL variable. You can add additional variables for the default admin account to access the Magento Admin panel.\n  \n\n\nStep 1: Generate Magento authentication keys\nAny developers or users that want to access the project require Magento authentication keys. The Project Owner needs to generate Magento authentication keys (includes 1 public and 1 private) through a Magento Marketplace account for the project. When you first create your project, you will be prompted to add them.\n\nTo create authentication keys through the Magento Marketplace:\n\n\n  Log in to the Magento Marketplace. If you don’t have an account, click Register.\n  Click your account name in the top-right of the page and select My Profile.\n  \n    Click Access Keys in the Marketplace tab.\n\n    \n  \n  Click Create A New Access Key. Enter a specific name for the keys, for example CloudProductOwner or the name of the developer receiving the keys.\n  The keys generate a Public and Private key you can click to copy. Save this information or keep the page open when creating your project.\n\n\nStep 2: Add admin variables for Admin access\nBefore creating the project, you must add a project variable for ADMIN_EMAIL. This sets the Magento Admin administrator account email. We use this email when resetting the administrator account password. The variable is added to the entire project and saved with every branch and environment.\n\nYou can set up the following variables:\n\n\n  ADMIN_EMAIL: Required. You must enter an accessible email address for the default Magento Admin administrator account.\n  ADMIN_USERNAME: The default hardcoded value is admin. You can optionally add a variable to change this username.\n  ADMIN_PASSWORD: We generate a random password you are prompted to reset by email. You can optionally change the password by variable or use the Forgot Password? link on the Magento Admin for the store.\n\n\nTo add project variables for the administrator account:\n\n\n  Log in to your Magento Commerce (Cloud) account.\n  \n    Click the Configure environment gear icon  next to the Project name. If you are asked to create the project, click Continue Later.\n\n    \n  \n  Select the Variables tab.\n  Click Add Variable.\n  \n    For the Name, enter ADMIN_EMAIL. For the Value, enter your Project Owner email address or another accessible email for resetting the password for the default admin account.\n\n    \n  \n  Click Add variable. After you add the variable, the environment will deploy. Wait until deployment completes before more edits.\n\n\nOptionally, you can also add variables for ADMIN_USERNAME and ADMIN_PASSWORD. By default, the admin username is admin. You should have changed the admin password as an onboarding task, using an email link the Project Owner received.\n\n\n  Name: ADMIN_USERNAME, Value: admin username of your choice\n  Name: ADMIN_PASSWORD, Value: a password of your choice\n\n\nStep 3: Create the project\nThe project contains all of your code branches, environments from development to Production, and allows you to manage access and configurations. After the Project Owner has signed up for a plan and logged in from the email, they can begin creating and managing the project.\n\nThe Project Owner creates the project, selecting the option for a blank site, which is a fully functional Magento template of a store and code. When created, we do the following:\n\n\n  Generate a master branch of Git code from a Magento template at the magento-cloud-configuration repository\n  Add the authentication key information to auth.json in your master Git branch. When you clone and branch from master, the Magento authentication keys are carried over in auth.json.\n  For Starter, add it to a Production environment for master\n  For Pro, add it to an Integration environment for master\n\n\nIf you are concerned with creating the Project, you can create a Technical Admin and have them create the project. These instructions are for an account with one project. If you are a Magento Solution Partner,\n\n\n  Access your account. You can open the email you received from Magento Cloud (accounts@magento.cloud) and click the Access your project now link. Or you can log in to your Magento Commerce account.\n  \n    Click the This project has no code yet link next to the Project name.\n\n    \n  \n  \n    Enter a name for the project.\n\n    \n  \n  \n    Click Create a blank site from a template and click Continue. We recommend starting with the Magento template as your initial project option. If you have an existing Magento deployment, you can later import code, extensions, themes, and data after fully deploying this base Magento code.\n\n    \n  \n  \n    When prompted, enter your Magento Commerce Magento authentication keys in the provided fields. You created these keys earlier in the Magento Marketplace. Enter the private and public keys and click Finish.\n\n    \n\n    The keys are added to the auth.json file in the repository master branch, required for all created branches and deployments.\n  \n  \n    Wait a few minutes while the project deploys. A status of Pending displays until completed, similar to the following:\n\n    \n  \n  After the project deploys, Success displays next to the name of your project.\n\n\nStep 4: Create project admins and user accounts\nYou can now create user accounts to this project for a Technical Admin (super user), developers, administrators, and consultants that need access to the code. As discussed in more detail in Manage users, Magento Commerce (Cloud) has a number of user roles and permissions available project-wide or per environment.\n\nTypically, the only user the Project Owner must create is the Technical Admin. This user should have the Super User role. Your Technical Admin can create user accounts for developers, set environment permissions, and manage all branches and environments.\n\nBefore you start, create a list of e-mail address for the users you want to add. New accounts receive an invitation to register with Magento Commerce (Cloud) and receive access based on the role. You can add and manage users at any time.\n\nTo create user accounts:\n\n\n  Log in to your Magento Commerce (Cloud) account.\n  \n    Click the configure project button next to project name in the top navigation bar.\n\n    \n  \n  \n    In the right pane, click Add Users.\n\n    \n  \n  \n    Click Add User.\n\n    \n  \n  Enter the user’s e-mail address.\n  \n    Select the access for the account:\n\n    \n      For a project administrator account, select the Super User check box. This provides Admin rights for all settings and environments, including creating the project. If not selected, the account has only view options for all environments on a project and requires branch specific permissions.\n      \n        Select permissions per specific environment (or branch):\n\n        \n          No access\n          Admin (change settings, execute action, merge code)\n          Contributor (push code), or Reader (view only)\n        \n      \n    \n  \n  Click Add User.\n\n\nAs you add environments and branches, you can modify user permissions as needed. Added users receive an e-mail inviting them to join the Magento Commerce (Cloud) project. The user must follow the prompts to register an account and verify their e-mail address. They receive access based on the set project and environment permissions.\n\nRelated topics\n\n\n  Magento Commerce (Cloud) requirements\n  \n    Pro information:\n\n    \n      Pro Architecture\n      Pro Develop and Deploy Workflow\n    \n  \n  \n    Starter information:\n\n    \n      Starter Architecture\n      Starter Develop and Deploy Workflow\n    \n  \n  Manage your project\n  Deployment process\n  First-time local environment setup\n\n",
      "url": "/guides/v2.0/cloud/before/before-project-owner.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-setup-env-2-clone-html": {
      "title": "Clone and branch the project",
      "content": "Previous step:\nSet up the Magento file system owner\n\nThe Magento Commerce project is a Git repository of Magento code with a master origin. Develop your custom code and add extensions in one of eight active Git branches in your local. Each active environment includes a database and services to fully access the Magento site and store in the Integration environment.\n\nTo begin, you need to clone the master environment to your local and add the Magento Admin URL, username, and password (to include with all branches). If you are new to Git workflow, processes, and commands, see Git documentation.\n\nThe commands in these instructions use Magento CLI commands and Git commands to access the master environment. For a full list of Magento Cloud CLI commands, enter magento-cloud list or see the Magento CLI reference.\n\nYou should complete these instructions in the following order:\n\n\n  Clone the project master branch\n  Change the Magento Admin URL, user name, and password on master\n  Branch an environment\n\n\nClone the project master branch\n\nTo clone the project’s master environment to your local:\n\n\n  \n    Log in to your local development machine with a Magento file system owner account.\n  \n  \n    Change to the web server or virtual host docroot.\n  \n  \n    Log in to the Magento Cloud CLI:\n\n    magento-cloud login\n    \n  \n  \n    List your projects:\n\n    magento-cloud project:list\n    \n  \n  \n    Clone a project.\n\n    magento-cloud project:get &lt;project ID&gt;\n    \n\n    When prompted for a directory name, enter magento2.\n  \n  Change to the project directory: cd magento2.\n  \n    List environments in the project:\n\n    magento-cloud environment:list\n    \n\n    \n      magento-cloud environment:list displays environment hierarchies whereas git branch does not. If you have any nested environments, use magento-cloud environment:list.\n    \n  \n  \n    Fetch remote branches:\n\n    git fetch magento\n    \n  \n  \n    Pull updated code:\n\n    git pull magento &lt;environment ID&gt;\n    \n  \n\n\nChange the Magento Admin URL, user name, and password on master\nWe recommend changing the following variables for the Magento Admin URL and administrator account. You should configure these settings for security reasons prior to branching from the cloned master. If you change the variables in the master branch, you only have to make these changes once. All branches inherit the variables from master.\n\n\n  ADMIN_EMAIL: Administrative user’s e-mail address. This value is required for upgrading and patching Magento Commerce (Cloud) and is used to send password reset emails.\n  ADMIN_USERNAME: User name for a Magento administrative user. This user is an administrator and can create other users, including other administrative users. The default hardcoded username is admin. You can use admin or change it to another secure username.\n  ADMIN_PASSWORD: Administrative user’s password. When the project is created, a random password is generated and an email is sent to the Project Owner. During project creation, the Project Owner should have already changed the password. You may need to contact the Project Owner for the updated password.\n  ADMIN_URL: The relative URL by which to access the Magento Admin. For example: /admin. For security reasons, we recommend you choose a value other than `admin` or `backend` or another term that is easy to guess.\n\n\n\n  Make note of any changes you make. You may need them when installing Magento with the command line and when verifying the installation.\n\n\nList and review variables\nIf you’re not sure whether or not the master branch has all Magento Admin variables and settings configured, open a terminal, login to the Magento Cloud CLI, and enter the following command. This command lists any configured and available variables. The Project Owner may have already set some or all of the variables during project creation.\n\nmagento-cloud variable:get -e &lt;environment ID&gt;\n\n\nTo set Admin variables, you will use this command format:\n\nmagento-cloud variable:set &lt;name&gt; &lt;value&gt; -e &lt;environment ID&gt;\n\n\nYou can also log into your project in the Project Web Interface to review project variables entered there. Click the Configure environment gear icon  next to the Project name. Click the Variables tab and review any configured variables there.\n\n\n  Everytime you add or modify a variable using the web interface or the CLI, the branch will redeploy automatically.\n\n\nAdd variables using the CLI\nTo set variables using the CLI (with example values used):\n\n\n  \n    To set the administrator’s user name to admin_A456 in the master environment, enter:\n\n    magento-cloud variable:set ADMIN_USERNAME admin_A456 -e master\n    \n  \n  Wait for the project to redeploy.\n  \n    To set the administrator’s password to admin_A456, enter:\n\n    magento-cloud variable:set ADMIN_PASSWORD admin_A456 -e master\n    \n  \n  Wait for the project to redeploy.\n  \n    To set the Admin URI to magento_A8v10, enter:\n\n    magento-cloud variable:set ADMIN_URL magento_A8v10 -e master\n    \n  \n  Wait for the project to redeploy.\n  \n    Log in to the Magento Admin using the values you just changed.\n\n    The simplest way to do that is to use the environment routes that display when you redeploy the master branch. The following example uses these values:\n\n    &lt;pre class=\"no-copy\"&gt;Building application 'mymagento' (runtime type: php:7.0, tree: 07263ba)\nSlug already built for this tree id, skipping.\n\nRe-deploying environment k4wtvm7ogzr5s-master.\nEnvironment configuration:\n\n    mymagento (type: php:7.0, size: S, disk: 2048)\n    mysql (type: mysql:10.0, size: S, disk: 2048)\n    redis (type: redis:3.0, size: S)\n    solr (type: solr:4.10, size: S, disk: 1024)\n\nEnvironment routes:\n    http://master-k4wtvm7ogzr5s.us.magentosite.cloud/ is served by application `mymagento`&lt;/pre&gt;\n    \n\n    In the preceding example, go to http://master-k4wtvm7ogzr5s.us.magentosite.cloud/magento_A8v10 and log in using the user name admin_A456 and password admin_A456\n  \n  \n    After the project redeploys, take a snapshot of the master branch:\n\n        magento-cloud snapshot:create -e master\n    \n  \n\n\nAdd variables using the Project Web Interface\nTo set variables using the Project Web Interface:\n\n\n  Log in to your Magento Commerce (Cloud) account.\n  \n    Click the Configure environment gear icon  next to the Project name. If you are asked to create the project, click Continue Later.\n\n    \n  \n  Select the Variables tab.\n  Click Add Variable.\n  \n    For the Name, enter ADMIN_EMAIL. For the Value, enter your Project Owner email address or another accessible email for resetting the password for the default admin account.\n\n    \n  \n  Click Add variable. After you add the variable, the environment will deploy. Wait until deployment completes.\n\n\nRepeat to optionally add the following variables using the examples above:\n\n\n  Name: ADMIN_USERNAME, Value: admin_A456\n  Name: ADMIN_PASSWORD, Value: admin_A456\n  Name: ADMIN_URL, Value: magento_A8v10\n\n\nBranch an environment\nWith your project cloned and Magento administrator account configured, you can branch for development.\n\n\n  For Starter, consider creating a branch for staging, than branch from staging for development.\n  For Pro, create branches in the Integration environment for your development.\n\n\nTo branch from master:\n\n\n  \n    Do any of the following:\n\n    \n      \n        To create a new environment, enter the following command:\n\n        magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n        \n      \n      \n        To check out an existing environment, enter the following command:\n\n        magento-cloud environment:checkout\n        \n      \n    \n\n    For example, to create a new branch named sprint1 from master, enter:\n\n    magento-cloud environment:branch sprint1 master\n    \n  \n  \n    After the command completes, update dependencies:\n\n    composer --no-ansi --no-interaction install --no-progress --prefer-dist --optimize-autoloader\n    \n  \n  \n    Create a snapshot of the environment.\n\n    magento-cloud snapshot:create -e &lt;environment ID&gt;\n    \n  \n\n\nNext step:\nInstall Magento\n",
      "url": "/guides/v2.0/cloud/before/before-setup-env-2_clone.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-setup-env-install-html": {
      "title": "Install Magento",
      "content": "Previous step:\nClone and branch the project\n\nWith your workspace prepared, install Magento on your local to verify custom code, extensions, and more. This section includes the installation prep, options, and post-installation configuration you should complete.\n\nPrepare to install Magento\n\nTo be able to customize the Magento software on your local machine, you should install it using the following information:\n\n\n  Host name or IP address of your machine\n  Admin user name, password, and URL you created earlier\n  Magento authentication keys for installing Magento locally\n\n\nGet Magento Admin environment variables\nYou will need the Admin environment variable values for the installation command line.\n\n\n  Log in to your local development system, or switch to, the Magento file system owner.\n  Change to a directory to which the Magento file system owner has write access.\n  \n    Enter the following command in a terminal to log in to your project:\n\n     magento-cloud login\n    \n  \n  \n    Before you begin, list the environment variables.\n\n     magento-cloud variable:get -e &lt;environment ID&gt;\n    \n  \n\n\nThe following results provides an example of variables:\n\n+----------------+---------------+-----------+------+\n| ID             | Value         | Inherited | JSON |\n+----------------+---------------+-----------+------+\n| ADMIN_PASSWORD | admin_A456    | Yes       | No   |\n| ADMIN_URL      | magento_A8v10 | Yes       | No   |\n| ADMIN_USERNAME | admin_A456    | Yes       | No   |\n+----------------+---------------+-----------+------+\n\n\nGet Magento authentication keys\nYou need Magento authentication keys to install Magento locally for your local environment. These are separate to the authentication keys included in the cloud code repository in auth.json.\n\nTo create authentication keys through the Magento Marketplace:\n\n\n  Log in to the Magento Marketplace. If you don’t have an account, click Register.\n  Click your account name in the top-right of the page and select My Profile.\n  \n    Click Access Keys in the Marketplace tab.\n\n    \n  \n  Click Create A New Access Key. Enter a specific name for the keys, for example CloudProductOwner or the name of the developer receiving the keys.\n  The keys generate a Public and Private key you can click to copy. Save this information or keep the page open when installing Magento Commerce.\n\n\nSet the docroot\nSet the docroot to the /magento directory until you complete all setup. If you change the docroot to /magento/pub prior to completion, you will encounter issues running the Web Setup Wizard.\n\nFor the Production environment, you should set the docroot to /magento/pub, which helps restrict access to vulnerable areas of the system. The webserver docroot should be set to /magento/pub only after Magento is installed (including any upgrades and patches), configured, and static files have been generated and populated in /magento/pub. Alternatively, you could also create a subdomain (for example, install.domain.com) and configure your webserver’s docroot to the Magento installed root folder.\n\nSet file system permissions and ownership\nAfter you have installed Magento, you need to set the file system permissions and ownership.\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\n  \tchown -R :&lt;web server group&gt; .\n  \tchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Install Magento\n  Prior to installing, you should Update installation dependencies using Composer commands.\n\n  You should be ready to install Magento using one of the following options:\n\n  \n    Install the Magento software using the command line\n    Install the Magento software using the Web Setup Wizard\n  \n\n  The following example installs using the command line method:\n\n  \n    \n      Switch to the user:\n\n      sudo su - magento\n    \n    \n      Change directories for the installation:\n\n      cd /app/bin\n    \n    \n      Enter a CLI command with options for entering the name, email, admin credentials, URL, and additional information. For a list of all options, see Installer help commands.\n\n      php magento setup:install \\\n   --admin-firstname=John \\\n   --admin-lastname=Smith \\\n   --admin-email=jsmith@mail.com \\\n   --admin-user=admin \\\n   --admin-password=password1 \\\n   --base-url=http://magento.local/ \\\n   --db-host=localhost \\\n   --db-name=magento \\\n   --db-user=magento \\\n   --db-password=magento \\\n   --currency=USD \\\n   --timezone=America/Chicago \\\n   --language=en_US \\\n   --use-rewrites=1\n    \n  \n\n  Post-install configurations\n  After installing Magento, run the commands for compile and deploy for the code:\n\n  \n    \n      If you are not in the correct Magento user, switch:\n\n      sudo su - magento\n    \n    Change directory to app/bin.\n    \n      Run the compile command:\n\n       php magento setup:di:compile\n      \n    \n    \n      When complete, Run the deploy command:\n\n       php magento setup:static:deploy\n      \n    \n  \n\n  Optionally, if you used Vagrant with the hostmanager plugin, update the hosts file:\n\n  \n    Access the localdev root for the Vagrant box.\n    Enter the command vagrant hostmanager to update the hosts file.\n  \n\n  Additional software and services\n  For development and testing in an environment as close to Integration as possible, you may also want to install additional tools, software, and services. These services are configured using services.yaml.\n\n  \n    Redis\n    ElasticSearch\n    RabbitMQ\n    Additional software for Magento\n  \n\n  Verify your local workspace\n  To verify the local, access the store using the URL you passed in the install command. For this example, the local Magento store should load using http://magento.local/. The Admin panel should open using http://magento.local/admin. If you change the URI for the Admin panel, use this command to locate it:\n\n  php bin/magento info:adminuri\n  \n\n  To verify the Integration master branch environment, log into the Project Web Interface and select your named project. In the list of branches, select the Master. Click Access site to pull up a list of URLs (HTTP and HTTPS) and click the preferred link to open the site. To view the admin, add /admin or other configured Admin URI.\n\n  \n\n  With these steps completed, you should have:\n\n  \n    Magento Commerce account and initial project setup and master branch\n    A local workspace configured with installations of required software, Magento Cloud CLI, and Magento\n    SSH keys set up\n    The Magento file system owner configured\n    Your initial code branch\n    Magento authentication keys set up and configured in the project and local\n  \n\n  Next steps:\n  For Pro projects, we strongly recommend fully deploying this base Magento template master branch without any code or configuration changes to Staging and Production. For instructions, see First time deployment.\n\n  For Starter projects, you are ready to start developing.\n\n",
      "url": "/guides/v2.0/cloud/before/before-setup-env-install.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-workspace-file-sys-owner-html": {
      "title": "Set up the Magento file system owner",
      "content": "Previous step:\nEnable SSH keys\n\nThis step is optional if you installed nginx as your web server. The Magento file system owner provides root access and permissions, for security reasons on a hosted system. Apache installations require\n\nTo enable the web server (Apache) to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files, including files created using the Magento Admin or other web-based utilities.\n\nYou need to create a new Magento file system owner and put that user in the web server’s group. If you use an existing user account, we recommend the user account has a strong password for security reasons.\n\nCreate the Magento file system owner\nCreate the Magento file system owner with a strong password. Magento file system owner is another term for the command-line user.\n\nTo create the Magento file system owner, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nFind the web server user’s group\n\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nPut the Magento file system owner in the web server’s primary group\n\nAssuming the typical Apache group name for CentOS and Ubuntu, enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -g apache &lt;username&gt;\n  Ubuntu: usermod -g www-data &lt;username&gt;\n\n\nFor example, to add the user magento_user to the apache primary group on CentOS:\n\nusermod -g apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups &lt;user name&gt;\n\n\nA sample result follows:\n\nmagento_user : apache\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nNext step:\nClone and branch the project\n",
      "url": "/guides/v2.0/cloud/before/before-workspace-file-sys-owner.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-workspace-magento-prereqs-html": {
      "title": "Install Magento prerequisites",
      "content": "Previous step:\nPrepare for local environment setup\n\nInstall the following software packages and tools on your local to prepare for Magento code development. If you already have these packages installed, check for any recommendations or notes and continue to the next step.\n\nTo begin, install and set up a VM on your host computer (Windows, Mac OS, Linux-based system). A VM gives you an environment to install a different Operating System, tools, software, a database, and Magento without requiring a customized system. You only need to install the VM software on your host. All other software can be installed and configured on your VM.\n\nWhen you install and configure software on your local (or VM), you will first SSH into the VM and then complete installations. Follow the SSH instructions and commands for the VM software you install. For example, you would install PHP, nginx, and database on the VM via SSH.\n\n\n  Magento documentation provides installation instructions for installing software on CentOS or Ubuntu only. For installation information on Windows or MacOS, consult a community resource.\n\n\nVirtual machine or container (host)\nTo best develop and manage your host, we recommend using a virtual machine. The VM encapsulates your code, web services, testing and supports a Unix-based environment. Select a virtual system you prefer.\n\nFor your VM, we recommend installing one of the following:\n\n\n  Vagrant for a virtual machine\n  Docker for a container\n\n\nWhen using Vagrant, we also recommend the package hostmanager and using VirtualBox to manage the environment. VirtualBox extends support and features across all OS and platforms to create and manage multiple VMs and operating systems on your local.\n\nDevelopment tools\n\n  Git - Provides code branching and management for accessing Magento Commerce and your code respositories. Use Git command-line commands or applications of your choice to work with Git. You can install this on your local VM or on your host.\n  For more information, see How Cloud uses Git.\n  Composer - Used for dependency management. Composer enables us to manage the Magento components and their dependencies. Install on your local VM.\n  For more information, see How Cloud uses Composer.\n\n\nWeb server (local)\nWe strongly recommend installing nginx for your web server on your local. While Magento Commerce supports Apache, Magento Commerce (Cloud) uses nginx. To have your local as close to cloud installations as possible, install and configure nginx.\n\nPHP (local)\nInstall PHP on your local. We recommend PHP 7.0. For information on installing PHP, see these instructions for CentOS and Ubuntu. For instructions for another OS, see the PHP documentation.\n\nThe following packages may also be helpful for your PHP installation:\n\n\n  bcmath\n  curl\n  ext-dom\n  fpm\n  gd\n  intl\n  json\n  mbstring\n  mcrypt\n  mysql\n  xml\n  zip\n\n\nSet up PHP memory limit\nWhen you’re working with the Magento Cloud CLI, local environment settings come from the machine on which you’re working, not from Magento Commerce. For example, certain actions (like debugging) require a larger PHP memory_limit than most PHP distributions provide by default.\n\nTo set memory_limit:\n\nBefore working with your Magento Commerce (Cloud) project, make sure you set the PHP memory_limit to at least 1G for normal use or at least 2G for debugging.\n\n\n  \n    Find your php.ini file using the following command:\n\n    php --ini\n    \n\n    Use the value of Loaded Configuration File.\n  \n  As a user with root privileges, open php.ini in a text editor.\n  Change the value of memory_limit to at least 1G for normal use or at least 2G for debugging.\n  Save your changes to php.ini and exit the text editor.\n  \n    Restart your web server:\n\n    \n      Apache:\n        \n          CentOS: service httpd restart\n          Ubuntu: service apache2 restart\n        \n      \n      nginx: service nginx restart\n    \n  \n\n\nDatabase (local)\n\nYou have multiple options for databases to use for your local. One database option you may want to consider is MariaDB. The Magento Commerce environments use MariaDB, with a Galera Cluster with triple reducency in the Production environment.\n\nRegardless of database, for Pro plans you need to modify the auto_increment_increment value.\n\n\n  For Pro plans, the Production environment has a three node infrastructure that uses auto-incrementing by 3 for all data IDs. Do not develop using hard-coded database IDs in your development. Due to the incremented data IDs, the referenced data will differ across the three nodes in Production.\n\n\nThese example instructions detail how to install and create a MariaDB database for Magento on your local:\n\n\n  \n    Use this command to create the database:\n\n     apt-get install mariadb-server\n    \n  \n  \n    Secure the database with the following command and completing all prompts:\n\n     mysql_secure_installation\n    \n  \n  Access the MariaDB database.\n  \n    Grant all privileges to the Magento account you created for the local:\n\n     grant all privileges on &lt;database&gt; to '&lt;account&gt;'@'localhost' identified by '&lt;password&gt;';\n    \n  \n  \n    Finally create the database:\n\n     create database magento;\n use magento;\n    \n  \n  Exit when done.\n\n\nPro: Set up the auto-increment for MariaDB\nYou need to set an auto-increment value for the MariaDB installation.\n\n\n  As a user with root privileges, open /etc/mysql/mariadb.conf.d/50-server.cnf in a text editor.\n  In the Basic Settings section, add auto_increment_increment = 3.\n  Restart the service: service mysql restart.\n\n\nPro: Set up the auto-increment for MySQL\nThe MySQL configuration parameter auto_increment_increment is set to 1 by default in a local MySQL installation. You need to change this value to 3.  The Magento Commerce database cluster includes 3 database implementations. The increment ensures data is unique across all databases for consistent data in the High Availability structure.\n\nTo avoid issues, we recommend you set auto_increment_increment=3.\n\nFirst, view the current value and verify if it is set to 3:\n\nmysqladmin variables -u &lt;root user name&gt; -p | grep 'auto_increment'\n\n\nIf necessary, set auto_increment_increment to 3:\n\n\n  \n    As a user with root privileges, open /etc/my.cnf in a text editor.\n\n    \n  \t\tOn Ubuntu 16, the path is typically /etc/mysql/mysql.conf.d/mysqld.cnf.\n    \n  \n  \n    Add or edit the following line in the [mysqld] section:\n\n    auto_increment_increment=3\n    \n\n    Magento Commerce (Cloud) supports a High Availability configuration. This setting increments the database IDs in increments of three to ensure row uniqueness for Galera databases on each of the three HA nodes in production.\n  \n  \n    Restart MySQL:\n\n    service mysqld restart\n    \n  \n\n\nMagento Cloud CLI (local)\nThe Magento Cloud command-line interface (CLI) tool helps you manage your projects and code branches on Magento Commerce (Cloud). For a list of available commands, see Common Magento CLI commands.\n\nThese instructions discuss installation using commands for a Unix environment. For Windows, we recommend using Cygwin or Git Bash.\n\nTo install the Magento Cloud CLI:\n\n\n  \n    Log in to your local development machine or switch to the Magento file system owner.\n  \n  \n    Change to a directory to which the Magento file system owner has write access, such as the home directory.\n  \n  \n    Enter the following command:\n\n    curl -sS https://accounts.magento.cloud/cli/installer | php\n    \n  \n  \n    After the CLI downloads, an operating system-specific command displays.\n\n    For example, on Ubuntu and CentOS, the command is similar to:\n\n    source /home/magento_user/.bashrc\n    \n\n    For more information about the user shell profile, see .bash_profile vs .bashrc\n\n    You can also add the &lt;magento user home dir&gt;/.magento-cloud/bin to the Magento user’s PATH. \tIf the user name is magento_user, the command is similar to the following:\n\n    export PATH=$PATH:/home/magento_user/.magento-cloud/bin\n    \n\n    Consult operating system documentation for details.\n  \n  \n    Verify the magento-cloud command is in your path by entering the following command:\n\n    magento-cloud list\n    \n  \n\n\n\n\nAdditional requirements for Magento Commerce\nThe requirements listed in this topic are specific to Magento Commerce (Cloud) environments. You will also install Magento Commerce on your VM or Docker container. For that installation, you should also review the following:\n\n\n  Magento Commerce requirements\n  (Integrator) Integrator installation\n\n\nAdditional options\nYou can also install additional optional software. These packages should be installed on the local VM.\n\nNext step:\nEnable SSH keys\n",
      "url": "/guides/v2.0/cloud/before/before-workspace-magento-prereqs.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-workspace-ssh-html": {
      "title": "Enable SSH keys",
      "content": "Previous step:\nInstall Magento prerequisites\n\nThe SSH protocol  is designed to maintain a secure connection between two systems—in this case, your local working environment and your Magento Commerce (Cloud) Git project.\n\nWhen initially setting up your local environment, you need to add the SSH keys to the following specific environments:\n\n\n  Starter: Add to Master (Production) and any environments you create by branching from Master\n  Pro: Add to Master Integration environment. After your Staging and Production environments are provisioned, you can add the SSH keys to those environments through the Project Web Interface or via SSH and CLI commands.\n\n\n\n\n  You must create an SSH key pair on every machine and workspace you and your team expect to work with and access Magento Commerce (Cloud) and GitHub branches. The SSH keys connect you to GitHub to manage branches and push code without having to constantly supply your username and password. You can add multiple SSH keys to GitHub per each workspace you use.\n\n  The SSH keys require the following:\n\n  \n    Set up SSH keys as the Magento file system owner.\n    Create the keys using the email address used for the GitHub account.\n  \n\n  For more information on SSH keys, see the following:\n\n  \n    Connecting to GitHub with SSH\n    Manually generating your SSH key in Windows\n    ssh-keygen man page\n  \n\n  Locate an existing SSH key pair\n  An existing SSH key pair is typically located in the .ssh subdirectory of the user’s home directory. This folder is hidden and may not display in the file manager or finder unless configured to display hidden files and folders.\n\n  You can quickly verify if you have SSH keys by entering commands using terminal access.\n\n  To check for SSH keys, enter the following command:\n\n  ls ~/.ssh\n  \n\n  If you have SSH keys, a directory listing is displayed similar to the following:\n\n  id_rsa  id_rsa.pub  known_hosts\n  \n\n  If you don’t have SSH keys, you need to generate the keys for adding to your Magento ECE account and GitHub account. See Create a new SSH key pair.\n\n  If you already have SSH keys, continue to:\n  \n    Add a public SSH key to your Magento account section\n    Add your SSH key to your GitHub account\n  \n\n  Create a new SSH key pair\n  Use the ssh-keygen command to create an SSH key pair. ssh-keygen is typically installed on Linux systems.\n\n  To create an SSH key pair:\n\n  \n    \n      The command syntax follows, entering the email used for your GitHub account:\n\n       ssh-keygen -t rsa\n      \n\n      GitHub also uses the key length -b 4096 in the command.\n Follow the prompts to complete the key.\n    \n    \n      When prompted to “Enter a file in which to save the key,” press Enter to save the file to the default location. The prompt displays the location.\n    \n    \n      When prompted to enter a secure passphrase, enter a phrase to use like a password. Make note of this passphrase. You may be requested to enter it depending on tasks you complete using a terminal during development.\n    \n    \n      After creating the SSH key pair, start the ssh-agent:\n\n      For Mac or Linux:\n\n       $ eval \"$(ssh-agent -s)\"  For Mac, you may also want to edit the  `~/.ssh/config` file to automatically load keys into the ssh-agent and store passphrases in your keychain.\n\n Host *\n     AddKeysToAgent yes\n     UseKeychain yes\n     IdentityFile ~/.ssh/id_rsa\n      \n\n      For Windows:\n\n       $ eval $(ssh-agent -s)\n      \n    \n    \n      Add the SSH key to the ssh-agent. If you used a different name for the key file name, replace id_rsa with that file name.\n\n      For Mac:\n\n       ssh-add -K ~/.ssh/id_rsa\n      \n\n      For Windows or Linux:\n\n       ssh-add ~/.ssh/id_rsa\n      \n    \n    \n      Add your SSH key to your GitHub account. The instructions include Mac, Windows, and Linux.\n    \n  \n\n  Test the SSH keys\n\n  After adding the SSH keys, test the SSH connection to GitHub:\n\n  \n    \n      In the terminal, enter the following command:\n\n       ssh -T git@github.com\n      \n    \n    \n      You may see a warning that the authenticity of the host can’t be established followed by an RSA fingerprint. Enter yes to continue.\n    \n    \n      If successful, you should receive a success message. If you receive a permission denied error, see Error: Permission denied (publickey) troubleshooting on GitHub.\n    \n  \n\n  Add a public SSH key to your Magento account\n  You can add SSH keys to your account in any of the following ways:\n\n  \n    Using the Magento Commerce (Cloud) CLI\n    Using the Magento Commerce (Cloud) Web Interface\n  \n\n  Add a key using the CLI\n  To add an SSH key using the CLI:\n\n  \n    Open a terminal application on your local.\n    \n      If you haven’t done so already, log in (or switch to) the Magento file system owner to the server on which your SSH keys are located.\n    \n    \n      Log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      Add the key:\n\n      magento-cloud ssh-key:add ~/.ssh/id_rsa.pub\n      \n    \n  \n\n  Add a key using the Project Web Interface\n  You will select and add your SSH public key to each environment in your account.\n\n  \n    Starter: Add to Master (Production) and any environments you create by branching from Master\n    Pro: Add to Master Integration environment. After your Staging and Production environments are provisioned, you can add the SSH keys to those environments.\n  \n\n  To add an SSH key using the Project Web Interface:\n\n  \n    \n      Copy your SSH public key to the clipboard.\n\n      If you don’t already have SSH keys on that machine, see GitHub documentation to create them.\n    \n    Login and access your project through the Project Web Interface.\n    \n      In your selected branch, an icon displays if you do not have an SSH key added.\n\n      \n    \n    \n      Copy and paste the content of your public SSH key in the screen.\n\n      \n    \n    Follow the prompts on your screen to complete the task.\n  \n\n  Set global Git variables\n  Set required global Git variables on the machine to commit or push to a Git branch. These variables set Git credentials for accessing your GitHub account.\n\n  To set variables, enter the following commands on every workspace:\n\n  git config --global user.name \"&lt;your name&gt;\"\ngit config --global user.email &lt;your e-mail address&gt;\n  \n\n  For more information, see First-Time Git Setup\n\n  Next step:\n  Set up the Magento file system owner\n\n",
      "url": "/guides/v2.0/cloud/before/before-workspace-ssh.html"
    }
    ,
  
    "guides-v2-0-cloud-before-before-workspace-html": {
      "title": "Prepare for local environment setup",
      "content": "To develop, deploy, and test Magento Commerce (Cloud), you need to setup your local environment and clone your project’s master Git branch. This local environment provides a development system for your custom code, extensions, and configurations to push for active testing in one of of the Integration environments.\n\nThis section walks through the steps for first time merchants with Magento, Magento SIs, and existing Magento merchants moving to the cloud. If you have already completed some of these steps or have an existing Magento developer environment, make sure to review the expected results to continue to the next. Some configurations and workflows differ for Magento Commerce than a typical Enterprise Edition installation.\n\nSet up an account\nTo begin working with a project and develop your store, you should have received an e-mail invitation to create a Magento Commerce (Cloud) account. The account provides access to your project for Magento development and deployment across all supported environments.\n\nYou should receive an e-mail invitation to verify and access the project. If you don’t see the invitation, check your junk e-mail folder. Click the Verify my account option in the email to verify and access your project account.\n\nWhen logged in, your project should open with a master branch to work with.\n\nIf your Cloud account has access to multiple projects, you should see a list of projects. Select the specific project you are preparing to access and work on.\n\nIf the project has no code, the Project Owner or Technical Lead needs to complete creating the project. The project must be set up prior to cloning and branching the Git code. For instructions, see Prepare project environments.\n\n\n\nMagento specific tools\nWhen working on your local, you will be accessing the Magento Cloud CLI to issue commands and programmatically complete tasks and the Magento Admin for the store UI and configurations.\n\nYou need to set up the Magento file system owner on your local to assign that user as the owner for all created files and directories. For more information, see Overview of ownership and permissions.\n\nRecommended tools\nThis guide assumes you’re working on a UNIX system or in a UNIX shell environment. For MAC OS and Linux-based systems, feel free to use any CLI tools of choice for issuing commands. For Windows users, we recommend a UNIX environment like Cygwin, Putty, or Git Bash.\n\nFor development on your local, use any development environment or tools you prefer. For recommendations, many Magento developers use tools including WebStorm, PHPStorm, and Atom.\n\nDeveloping code for Magento Commerce requires working in Git branches. Not everyone remembers Git commands with ease. If you want a Git client, use any client of your choice. Some developers use clients including GitKraken and SmartGit.\n\nPrerequisites\nHave the following prepared to complete your initial workspace and project setup:\n\n\n  Magento Commerce (Cloud) account with an added user account\n  Magento authentication keys from Magento Marketplace. If the Project Owner or Technical Lead created the project according to these instructions, the Magento authentication keys should already be installed and available in the auth.json file in the code repository.\n\n\nGet started\nYou should be ready to go! The following sections provide a link to the previous step, instructions, and a link to the next step to start developing:\n\n\n  Install all prerequisite software and tools on your host system (laptop, desktop, etc) and local workspace (VM)\n  Install Magento Cloud CLI\n  Set up SSH keys\n  Configure the Magento file system owner (optional)\n  Clone and branch the project\n  Install Magento\n  Complete configurations and file/folder permissions\n  Verify install, branches, and get to coding!\n\n\nFor Pro projects, you also should deploy across to Staging and Production as part of your set up.\n\nNext step:\nInstall Magento prerequisites\n",
      "url": "/guides/v2.0/cloud/before/before-workspace.html"
    }
    ,
  
    "guides-v2-0-cloud-project-bitbucket-integration-html": {
      "title": "Bitbucket integration",
      "content": "Use the Bitbucket integration to automatically build and deploy an environment when you push new code to Bitbucket. This integration synchronizes your Bitbucket repository with your Magento Commerce (Cloud) account.\n\nFor Pro projects created before October 23, 2017, this integration works on Integration environments only. You must request an upgrade before you can use this integration on Staging and Production environments.\n\n\n  We strongly recommend using a private Bitbucket repository for your Magento Commerce (Cloud) project.\n\n\nBefore you begin\n\n  You must have a Magento Commerce (Cloud) project and you must be an administrator of the project.\n  You must have a Bitbucket account and administrative access to the Bitbucket repository you want to integrate.\n  You must install the magento-cloud CLI tool in your local environment.\n\n\nPrepare your repository\nThis section shows you how to clone your Magento Commerce (Cloud) project from and existing environment and add that code to a new, empty Bitbucket repository. If you don’t already have an empty Bitbucket repository, create one before proceeding.\n\n\n  \n    Open a terminal and log in to your Magento Commerce (Cloud) project:\n\n    magento-cloud login\n    \n  \n  \n    List your projects. With the project ID, you can complete additional commands:\n\n    magento-cloud project:list\n    \n  \n  \n    Clone a project to your local environment:\n\n    magento-cloud project:get &lt;project ID&gt;\n    \n  \n  \n    Add your Bitbucket repository as a remote. Replace &lt;user-name&gt;/&lt;repo-name&gt; with your Bitbucket information.\n\n    git remote add origin git@bitbucket.org:&lt;user-name&gt;/&lt;repo-name&gt;.git\n    \n  \n  \n    Delete the default magento remote.\n\n    git remote remove magento\n    \n  \n  \n    Verify that you added the Bitbucket remote correctly:\n\n    git remote -v show\n    \n\n    You should see the following:\n\n    origin git@bitbucket.org:&lt;user-name&gt;/&lt;repo-name&gt;.git (fetch)\norigin git@bitbucket.org:&lt;user-name&gt;/&lt;repo-name&gt;.git (push)\n    \n  \n  \n    Push files to your new Bitbucket repository:\n\n    git push -u origin master\n    \n  \n  \n    Verify that your Bitbucket repository contains all of your project files.\n  \n\n\nCreate an OAuth consumer\nThe Bitbucket integration requires an OAuth consumer. This section shows you how to create one in Bitbucket. You’ll need the OAuth key and secret from this consumer to complete the next section.\n\n\n  Log in to your Bitbucket account.\n  Click Settings &gt; Access Management &gt; OAuth.\n  \n    Click Add consumer and configure it as follows:\n\n    \n\n    \n      A valid Callback URL isn’t required, but you must enter a value in this field to successfully complete the integration.\n    \n  \n  Click Save.\n  Click the consumer Name to reveal your OAuth key and secret.\n  Copy your OAuth key and secret. You’ll need it to complete the next section.\n\n\nConfigure the integration\n\n\n  Open a terminal and navigate to your local Magento Commerce (Cloud) project directory.\n  \n    Create a temporary new file called bitbucket.json and add the following:\n\n    {\n  \"type\": \"bitbucket\",\n  \"repository\": \"bitbucket-user-name/bitbucket-repo-name\",\n  \"app_credentials\": {\n    \"key\": \"YOUR OAUTH CONSUMER KEY\",\n    \"secret\": \"YOUR OAUTH CONSUMER SECRET\"\n  },\n  \"prune_branches\": true,\n  \"fetch_branches\": true,\n  \"build_pull_requests\": true,\n  \"resync_pull_requests\": true\n}\n    \n\n    Replace the following values with your information:\n\n    \n      bitbucket-user-name/bitbucket-repo-name\n      YOUR OAUTH CONSUMER KEY\n      YOUR OAUTH CONSUMER SECRET\n    \n\n    \n      Be sure to use the name of your Bitbucket repository and not the URL. The integration will fail if you use the URL.\n    \n  \n  \n    Add the integration to your project using the magento-cloud CLI tool. Replace PROJECT ID with your Magento Commerce (Cloud) project ID.\n\n    \n      Running the following command overwrites all code in your Magento Commerce (Cloud) project with code from your Bitbucket repository. This includes all branches, including the master (production) branch. This action happens instantly and cannot be undone.\n    \n\n    magento-cloud project:curl -p 'PROJECT ID' /integrations -i -X POST -d \"$(&lt; bitbucket.json)\"\n    \n\n    This command returns a long HTTP response, including headers. The first line of the output should contain a 200 or 201 status code indicating successfull integration. A status of 400 or above indicates that an error occurred.\n  \n  \n    Delete the temporary bitbucket.json file.\n\n    rm bitbucket.json\n    \n  \n  \n    Your Magento Commerce (Cloud) project, including all branches, is now synchronized with your Bitbucket repository. List the project’s integration with the following command:\n\n    magento-cloud integrations -p 'PROJECT ID'\n    \n  \n\n\nVerify that it works\nAfter configuring the Bitbucket integration, test it by pushing a simple change to your Bitbucket repository.\n\n\n  \n    Create a test file:\n\n    touch test.md\n    \n  \n  \n    Commit and push it to your Bitbucket repository:\n\n    git add . &amp;&amp; git commit -m \"Testing Bitbucket integration\" &amp;&amp; git push\n    \n  \n  \n    Log in to the Project Web Interface and verify that your commit message is displayed and your project is being deployed.\n\n    \n  \n\n\nBranching\nThe Bitbucket integration cannot create new environments in your project, so you must use the magento-cloud CLI tool to create branches.\n\nAfter creating a new environment, you can push the corresponding branch up to your remote Bitbucket repository using regular git commands. For example, git push -u origin &lt;your-branch&gt;. Subsequent changes to your branch in Bitbucket will automatically build and deploy the environment.\n\nRemove the integration\nYou can safely remove the Bitbucket integration from your project without affecting your code.\n\nTo remove the integration using the magento-cloud CLI tool:\n\n\n  \n    Log in to your project.\n\n    magento-cloud login\n    \n  \n  \n    List your integrations. You need the Bitbucket integration ID to complete the next step.\n\n    magento-cloud integration:list\n    \n  \n  \n    Delete the integration.\n\n    magento-cloud integration:delete &lt;ID&gt;\n    \n  \n\n\nYou can also remove the Bitbucket integration by logging in to your Bitbucket account and revoking the OAuth grant on the Settings page.\n",
      "url": "/guides/v2.0/cloud/project/bitbucket-integration.html"
    }
    ,
  
    "guides-v2-0-architecture-bk-architecture-html": {
      "title": "Architecture Guide",
      "content": "The Architecture Guide provides a high-level introduction and view of the Magento product.\n\nThe Magento platform and components are explained from the perspective of several audiences: merchants, web store developers (frontend developers), extension developers, system admins, installers, and integrators.\n\nMore detailed information about building online stores, using the Magento APIs, installing, configuring, and extending the platform is included in other books in our Magento library.\n\n",
      "url": "/guides/v2.0/architecture/bk-architecture.html"
    }
    ,
  
    "guides-v2-0-cloud-bk-cloud-html": {
      "title": "Welcome to Magento Commerce (Cloud)",
      "content": "Magento Commerce (Cloud), formerly Enterprise Cloud Edition, is a managed and automated hosting platform for Magento specifically created for Cloud infrastructures. This version combines Magento Commerce, Cloud infrastructure hosting, with a few differences and added features including Git integration and key environments for development, staging, and live production.\n\nCode, test, and deploy across Integration, Staging, and finally Production environment for continuous integration of your store.\n\nFor full release notes, see Release Information and Magento Commerce (Cloud) third-party licenses.\n\nMagento Commerce (Cloud) plans and subscriptions\nMagento Commerce (Cloud) provides plan options based on the size of your business. Each plan includes Magento Commerce (Cloud), support, and Cloud-based hosting and infrastructure on a subscription basis. Want to sign up? We encourage starting with a free 30-day trial to begin working with Magento.\n\nFor a list of our plans and breakdown of features, see Subscriptions and plans.\n\nTo start your free 30-day trial, see our Plan Comparison. You can select a plan that fits your business and start a trial with a newly provisioned project and code-base with the latest version of Magento Commerce (Cloud).\n\nDetails about the cloud\n\n  Each plan includes Integration environment for development, testing, and integrating services. Additional active environments are available at additional cost.\n  All environments run with active Git branches of code.\n  You have an unlimited number of inactive Git branches.\n  You can add fully managed services like MySQL, Elasticsearch, Redis, RabbitMQ, and so on, without requiring external add-ons.\n  We use a robust Composer build process.\n  You can increase the amount of memory and CPU as needed.\n\n\nTechnologies and requirements\nYou should become familiar with the following technologies:\n\n\n  Git\n  Composer\n  Secure Shell (SSH)\n  MySQL (including command-line interaction)\n  Basic linux shell usage\n\n\nSee Technologies and requirements, Pro architecture, and Starter architecture for details and additional technologies.\n\nWhere do I get started?\nIf you have experience with Magento Commerce 2 or our cloud implementation, we recommend reviewing content in these DevDocs to understand the differences between Magento Commerce and Magento Commerce (Cloud). If you are new to Magento and the Cloud, this guide introduces all aspects from building a project, setting up your local, continuous deployment across environments, and going live.\n\nIf you create your account with the 30-day trial, we set you up quickly to get started. When you sign-up for the trial, we auto-provision your project with the latest version of Magento Commerce as a base template.\n\nTo get started, see:\n\n\n  Onboarding tasks of first things to do right after signing up.\n  Sign up for status updates for components and services.\n  For new non-trial projects, see prepare your project environments to give your technical staff and solution experts access, create your project, and get started.\n\n\nTo better understand Magento Commerce, your plan, architecture, and workflows, see the following starting points:\n\n\n  Technologies and requirements\n  Starter information:\n\n\n* [Starter architecture](/devdocs-archive/2.0/guides/v2.0/cloud/basic-information/starter-architecture.html)\n*    [Starter develop and deploy workflow](/devdocs-archive/2.0/guides/v2.0/cloud/basic-information/starter-develop-deploy-workflow.html) *    Pro information:\n\n* [Pro architecture](/devdocs-archive/2.0/guides/v2.0/cloud/architecture/pro-architecture.html)\n*    [Pro develop and deploy workflow](/devdocs-archive/2.0/guides/v2.0/cloud/architecture/pro-develop-deploy-workflow.html) *    [Deployment process](/devdocs-archive/2.0/guides/v2.0/cloud/reference/discover-deploy.html) * [Local environment setup](/devdocs-archive/2.0/guides/v2.0/cloud/access-acct/first-time-setup.html)\n\n\nLearn more about Magento 2\nIf you would like to learn more about Magento 2, see the following resources:\n\n\n  All documentation home page\n  User guides (how to use options in the Magento Admin)\n\n\n*    [Magento 2.0.x](http://docs.magento.com/m2/2.0/ee/user_guide/getting-started.html){:target=\"_blank\"}\n*    [Magento 2.1.x](http://docs.magento.com/m2/2.1/ee/user_guide/getting-started.html){:target=\"_blank\"}   *    [Magento 2.2.x](http://docs.magento.com/m2/ee/user_guide/getting-started.html){:target=\"_blank\"} *    Developer documentation\n\n*    [Magento 2 Architecture guide](/devdocs-archive/2.0/guides/v2.0/architecture/bk-architecture.html){:target=\"_blank\"}   *    [Front end development](/devdocs-archive/2.0/guides/v2.0/frontend-dev-guide/bk-frontend-dev-guide.html){:target=\"_blank\"}\n*    [Customizing the Magento software](/devdocs-archive/2.0/guides/v2.0/extension-dev-guide/bk-extension-dev-guide.html){:target=\"_blank\"}\n*    [Installation](/devdocs-archive/2.0/guides/v2.0/install-gde/bk-install-guide.html), though we recommend following [Prepare for local environment setup](/devdocs-archive/2.0/guides/v2.0/cloud/before/before-workspace.html){:target=\"_blank\"}\n*    [Configuration](/devdocs-archive/2.0/guides/v2.0/config-guide/bk-config-guide.html){:target=\"_blank\"}   *    [B2B user guide](http://docs.magento.com/m2/b2b/user_guide/getting-started.html){:target=\"_blank\"}\n\n\nHelpful terms\n\n\n  Project: The project contains all of your code branches, environments from development to Production, and allows you to manage access and configurations. Initially only the Project Owner has access to the project. To gain access to the project, you must receive a user account, with permissions, and a Magento authentication key from the Project Owner.\n  Project Owner: Typically a “business user” in your business or finance organization, they are the point of contact with Magento regarding the account overall. They purchased the subscription plan, create the project, and add users to develop and deploy stores and sites.\n  Active Environment: An active environment is a fully accessible environment in the Integration enviornment. Each active environment provides a database, environment variables, routes, configurations, and one associated Git branch of code. You can access the Magento Admin and store to test as a merchant and customer for each of these environments, allowing you to develop custom code, add extensions, and integrate 3rd party systems in multiple environments for testing.\n  Inactive Environment: An inactive environment is a Git branch you either deleted from the Cloud Git repository or one that is not associated with the Cloud Git repository at all. For example, you might already have several Git branches with Magento code that you don’t need to use for Magento Commerce. As long as you don’t add those environments to the Cloud Git repo, they don’t count against your total of eight active environments.\n  Branch: Magento Commerce is a Git-driven code base and environment. All code is written in branches, with a parent and child structure. These branches allow you to develop new features and modifications in multiple independant branches concurrently with other work, merging up into a parent branch.\n  Local: Your local is a workspace for developing Magento code including added extensions and 3rd party integrations. The local is typically a Virtual Machine (VM) with an entire environment of software, packages, database, web server, and more prerequisites to support an installed Magento and cloned Git branches. We provide full details on how to set up your local for Magento development.\n  Module or Extension: Modules and extensions enhance Magento’s core functionality through custom code. Develop your own modules and extensions or purchase them directly from developers on the Magento Marketplace. We recommend developing custom code as a module to extend Magento functionality.\n  \n    Project Web Interface: The Web Interface is a console for accessing your project, user accounts, and your project environments. You can modify environment settings, environment variables, routes, and manage environments. Access links (store URL, SSH, Git) are provided for active environments through the active Git branches. You use this interface for managing your project. The following environments are available through this interface:\n\n    \n      Starter: Master and all environments branched from it\n      \n        Pro: Integration and all environments branched from it. You may also have Staging and Production. For existing Pro merchants, you may need to have your interface updated to manage all environments.\n\n        \n          New projects provisioned starting October 23, 2017 will already have Staging and Production in their Project Web Interface. Any existing projects created before this date will need to enter a ticket to be converted.\n        \n      \n    \n  \n\n",
      "url": "/guides/v2.0/cloud/bk-cloud.html"
    }
    ,
  
    "guides-v2-0-coding-standards-bk-coding-standards-html": {
      "title": "Coding Standards",
      "content": "\n\n\nLike many large projects, Magento has coding standards.\n\nUse Magento’s coding standards when you contribute to Magento’s codebase or create extensions.\n\n\n  Code demarcation standard\n  PHP coding standard\n  PHP code sniffers\n  JavaScript coding standard\n  jQuery widget coding standard\n  DocBlock standard\n  JavaScript DocBlock standard\n  LESS coding standard\n  HTML style guide\n\n",
      "url": "/guides/v2.0/coding-standards/bk-coding-standards.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-bk-compman-upgrade-guide-html": {
      "title": "Upgrade the Magento application and components",
      "content": "This topic discusses the ways you can:\n\n\n  Upgrade (that is, patch) the Magento software from version 2.0.0 to 2.0.1, for example\n  \n    Update components, which can be any of the following:\n\n    \n      Modules (extend Magento capabilities)\n      Themes (change the look and feel of your storefront and Admin)\n      Language packages (localize the storefront and Admin)\n    \n  \n\n\nUpgrade the Magento application\nThe way you upgrade (that is, patch) the Magento application depends on how you installed it:\n\n\n  Magento Open Source and Magento Commerce: If you used Composer to install the Magento application or if you downloaded an archive, use the System Upgrade utility or the command line.\n  Magento Open Source only: If you cloned the Magento 2 GitHub repository because you are contributing code to the Magento Open Source codebase, upgrade the software manually.\n  \n    If your Magento root directory is &lt;your Magento install directory/pub, you can upgrade in any of the following ways:\n\n    \n      \n        For the upgrade, create another subdomain or docroot that uses the Magento installation directory as its root.\n\n        Run the System Upgrade utility as discussed in this topic using that subdomain or docroot.\n      \n      \n        Upgrade the Magento software using the command line.\n      \n    \n  \n  To upgrade from Magento Open Source to Magento Commerce, see Upgrade from CE to EE.\n\n\n\n\tSystem upgrade refers to updating the Magento 2.x core components and other installed components. To migrate from Magento 1.x to Magento 2, see the Migration Guide.\n\n\n\n    For upgrade or update, you must use the same authentication keys you used to install the Magento software. For example, you cannot use Magento Open Source authentication keys to update or upgrade Magento Commerce or vice versa. You also cannot use:\n    Another user's authentication keys\n    \tShared account authentication keys   \n\n\nUpdate components\nTo update Magento components, use the Component Manager.\n\nNext step\nComplete the tasks discussed in Prerequisites.\n\n\n\n",
      "url": "/guides/v2.0/comp-mgr/bk-compman-upgrade-guide.html"
    }
    ,
  
    "guides-v2-0-config-guide-bk-config-guide-html": {
      "title": "Configuration Guide",
      "content": "Configure the Magento application\nYou can configure the Magento application in any of the following ways:\n\n\n  \n    General configuration\n\n    \n      Using a command-line utility (for example, enable or disable cache types, run indexers, set up translations, and so on)\n      Manually to set up bootstrap parameters\n    \n  \n  \n    Caching\n\n    \n      Set up Varnish\n      Set up caching\n      Set up database caching\n      Set up Redis\n    \n  \n  Session storage\n    \n      memcache\n      Redis\n      How to locate session files\n    \n  \n  \n    Tools and debugging\n\n    \n      Logging\n      Database profiler\n    \n  \n  \n    Magento in production\n\n    \n      Deployment steps\n      Magento ownership and permissions in development and production\n    \n  \n  \n    Magento Commerce only\n\n    \n      Install and configure Solr\n      Split databases\n      Message queues\n    \n  \n\n",
      "url": "/guides/v2.0/config-guide/bk-config-guide.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-bk-ext-best-practices-html": {
      "title": "Best Practices for Extension Developers",
      "content": "\n  DRAFT/PROPOSAL: This Best Practices Guide is a first draft! The guide combines Best Practices that we have heard the community ask for, along with guidelines that our Magento UX, Engineering, and Product teams are working on.\n  \nWe want your feedback; please do a pull request on feedback-placement-and-design.md and let us know what your best practices are, your challenges, and how you would like Magento to help standardize (where needed).\n  \n\n\nMagento consists of the core product code plus optional components that enhance or replace the core product code. There are over 100 out-of-the-box components in the form of modules, themes, and language packages available for Magento 2.\n\nMagento’s architecture allows for enhancements by letting you develop your own component. Keep in mind that in addition to Magento’s own modules, your extension will be running alongside components from other developers. For this reason, it is important that your component behaves correctly in Magento’s modular environment.\n\nThe table below is data from a recent poll that shows the distribution of the amount of extensions installed on a Magento instance for each edition. So for example, 32% of merchants on EE have over 50 different extensions installed!\n\n\n  \n    \n      Edition\n      1-9 extensions\n      10-30 extensions\n      31-50 extensions\n      50+ extensions\n    \n  \n  \n    \n      Community\n      10%\n      53%\n      26%\n      11%\n    \n    \n      Enterprise\n      9%\n      32%\n      27%\n      32%\n    \n  \n\n\nThis guide provides best practices, guidelines, and tips for creating Magento extensions.  We encourage you to follow our best practices when developing code for your Magento components.\n\nSections\n\n\n  \n    Admin\n  \n  \n    Extension Coding\n  \n  \n    Storefront\n  \n\n\nRelated Content\n\n\n  Admin Design Pattern Library - An in depth guide to the design patterns used in the Admin.\n  PHP Developer Guide - An in depth guide to creating Magento components.\n  Frontend Developer Guide - An in depth guide to creating a Magento storefront theme.\n\n",
      "url": "/guides/v2.0/ext-best-practices/bk-ext-best-practices.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-bk-extension-dev-guide-html": {
      "title": "PHP Developer Guide",
      "content": "The PHP Developer Guide contains information for developers who want to know more about developing or modifying Magento components. With this knowledge you can extend or customize any of the existing components in the Magento application. You can also create components that introduce new functionality and distribute them to merchants.\n\nMagento components\n\nThe Magento application is made up of Modules, Themes, and Language Packages:\n\n\n  \n    Modules interact with other parts of the application to accomplish a particular business function or provide a feature. A module can contain a user interface for displaying information or interacting with the user. It can also contain application interfaces that another Magento module or code chunk might call.\n  \n  \n    Themes provide a personalized touch for each Magento installation by changing the look and feel of the storefront or Admin.\n  \n  \n    Language packages assist in internationalization(i18n) and localization by providing translations for strings that display on the storefront and Admin.\n  \n\n\n\nYou must follow a PSR-4 compliant structure when building a module.\n\n\nRelated topics\n\n\n  Developer roadmap\n  Introduction to Composer\n  Glossary of common terms\n\n",
      "url": "/guides/v2.0/extension-dev-guide/bk-extension-dev-guide.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-bk-frontend-dev-guide-html": {
      "title": "Frontend Developer Guide",
      "content": "Introduction\nThis document provides instructions for creating and installing custom storefront themes for a Magento application. It describes Magento’s content rendering process and explains the view layer of the system to the extent required to build a theme efficiently. The document also walks through everyday frontend developer’s tasks.\n\nDeveloping the view part of a custom module and customizing the Magento Admin panel design is out of the scope of this guide.\n\nFrontend developers can use this guide to create custom themes to tailor the Magento storefront for a specific customer.\n\nYou can apply these levels of customization to your site, where the levels require different development skills:\n\nYou can make relatively simple changes to your site using cascading style sheets (CSS) to change colors and the look-and-feel of various interface components, replacing images, and other relatively cosmetic changes.\nNo structural changes are made to pages&mdash;you accept the structure of the site provided by default by modules you load on to your site.\nThis can be a good starting point for a site as it is requires the least effort and knowledge.\nA small step beyond changing CSS and images on your site is to make changes to the HTML generated by existing modules.\nThis requires rudimentary PHP skills to adjust PHTML template files.\nAlthough PHP coding is involved, this is typically copying and pasting small fragments of PHP code from existing template files into a new template file with differently structured HTML.\nThis can be useful if the existing HTML generated does not have sufficient CSS class names or HTML elements to achieve the presentation change you would like to achieve.\nThe next level of sophistication is to make structural changes to your site by moving functionality between places on a page or to completely different pages.\nThis is achieved using the Magento layout engine.  No PHP coding is required to make layout changes, but the layout engine is moderately sophisticated.\nFinally, you can develop new modules to add new custom functionality to your site or to extend functionality provided by existing Magento or third party modules.\nThis third level of customization is not addressed in this guide.\nSee the Developers' Guide for details on how to develop new modules.\nThis requires PHP programming knowledge in addition to knowledge of all of the preceding areas.\n\n\n\nThere have been some inquiries about the status of the Visual Design Editor (VDE), which is currently part of the Magento development code base. The VDE enables assigning and unassigning themes, editing theme CSS and JS files, changing page layouts, and managing blocks and their positions on pages in a WYSIWYG mode. We'd like to clarify that to meet higher priority objectives, the VDE will not be part of the initial Magento release. Future plans for the VDE will be communicated at a later point in time. You are welcome to continue to provide input on the VDE, but please note that we will not be actively reviewing or actioning these comments in the near term.\n\n\nFrontend development prerequisites\n\nTo implement what is discussed in this guide, you need a working Magento installation and the following browser versions installed on your device:\n\n\n\n  Storefront and Admin:\n\n  \n    Internet Explorer 11 or later, Microsoft Edge, latest–1\n    Firefox latest, latest–1 (any operating system)\n    Chrome latest, latest–1 (any operating system)\n    Safari latest, latest–1 (Mac OS)\n    Safari Mobile for iPad 2, iPad Mini, iPad with Retina Display (iOS 7 or later), for desktop storefront\n    Safari Mobile for iPhone 4 or later; iOS 7 or later, for mobile storefront\n    Chrome for mobile latest–1 (Android 4 or later) for mobile storefront\n  \n\n  where latest–1 means one major version earlier than the latest released version.\n\n  To use this guide, you must be familiar with:\n\n  \n    CSS and CSS 3\n    HTML and HTML 5\n    XML\n    JavaScript\n    Responsive Web Design (RWD)\n  \n\n  Related topics:\n\n  \n    Themes\n    Magento UI library\n    Cascading style sheets (CSS) \n    JavaScript coding standard\n    Responsive web design\n    Translations\n  \n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/bk-frontend-dev-guide.html"
    }
    ,
  
    "guides-v2-0-get-started-bk-get-started-api-html": {
      "title": "Getting Started with Magento Web APIs",
      "content": "What are the Magento web APIs?\n\nThe Magento web API framework provides integrators and developers the means to use web services that communicate with the Magento system. Key features include:\n\n\n  \n    Support for both REST (Representational State Transfer) and SOAP (Simple Object Access Protocol). In Magento 2, the web API coverage is the same for both REST and SOAP.\n  \n  Three types of authentication:\n    \n      Third-party applications authenticate with OAuth 1.0a.\n      Mobile applications authenticate using tokens.\n      Administrators and customers are authenticated with login credentials.\n    \n  \n  \n    All accounts and integrations are assigned resources that they have access to. The API framework checks that any call has authorization to perform the request.\n  \n  \n    Any Magento or third-party service can be configured as a web API with a few lines of xml.\n\n    To configure a web API, you define XML elements and attributes in a webapi.xml configuration file. If a service is not defined in a configuration file, it will not be exposed at all.\n  \n  \n    The framework is based on the CRUD (create, read, update, delete) &amp; search model. The system does not currently support web hooks.\n  \n  \n    The framework supports field filtering of web API responses to conserve mobile bandwidth.\n  \n  Integration style web APIs enable a single web API call to run multiple services at once for a more efficient integration.  An example of this behavior can be seen in the Catalog where one web API call can create a product. If your payload includes the stock_item and media_gallery_entries objects, then the framework will also create the product’s inventory &amp; media in that one API call.\n\n\nWhat can I do with the Magento web APIs?\n\nThe APIs can used to perform a wide array of tasks. For example:\n\n\n  \n    Create a shopping app. This can be a traditional app that a user downloads on a mobile device. You could also create an app that an employee uses on a showroom floor to help customers make purchases.\n  \n  \n    Integrate with CRM (Customer Relationship Management) or ERP (Enterprise Resource Planning) back-end systems, such as Salesforce or Xero.\n  \n  \n    Integrate with a CMS (Content Management System). At present, content tagging is not supported.\n  \n  \n    Create JavaScript widgets in the Magento storefront or on the Admin panel. The widget makes AJAX calls to access services.\n  \n\n\nHow do I get started?\n\nYou must register a web service on Magento Admin. Use the following general steps to set up Magento to enable web services.\n\n\n  If you are using token-based authentication, create a web services user on Magento Admin by selecting System &gt; All Users &gt; Add New User. (If you are using session-based or OAuth authentication, you do not need to create the new user in the Admin.)\n  Create a new integration on Magento Admin. To create an integration, click System &gt; Integration &gt; Add New Integration. Be sure to restrict which resources the integration can access.\n  Use a REST or SOAP client to configure authentication.\n\n\nSee the User Guide for more information.\n",
      "url": "/guides/v2.0/get-started/bk-get-started-api.html"
    }
    ,
  
    "guides-v2-0-bk-get-started-magento-html": {
      "title": "Getting started with Magento",
      "content": "Getting started with Magento\n\nWelcome to Magento 2.0 documentation! And welcome to Magento 2.0!\n\nHere we explain the Magento platform and components from the perspective of several audiences: merchants, web store developers (frontend developers), extension developers, system administrators, installers, and integrators.\n\nMagento is a highly-customizable eCommerce platform and content management system that is primarily used to build online storefronts or web sites for selling merchandise.\n\nMagento is written using the PHP programming language, and leverages elements of the Zend framework and the model-view-controller architecture. Magento runs on the MySQL relational database, and Magento schema and tables are included in the Magento installation package.\n\nHelp improve this documentation\n\nMagento 2.0 product documentation is hosted on GitHub, and we welcome your\nfeedback there.\n\nClick the Edit this page on GitHub link at the top of a documentation page to\nopen the file in our GitHub repository, where you are invited to suggest changes\nby creating pull requests, or open a discussion by creating an issue.\n\nFor more information, see our Contributors Guide.\n\nContact us\nFeel free to contact the documentation team directly at\nDL-Magento-Doc-Feedback@magento.com\n\nRelated topics\n\n\n  Release Notes\n  Architecture Guide\n\n",
      "url": "/guides/v2.0/bk-get-started-magento.html"
    }
    ,
  
    "guides-v2-0-howdoi-bk-how-do-i-html": {
      "title": "How To",
      "content": "Tell me how\n\nThis section documents some of the most commonly performed tasks and procedures in Magento 2. New sections are being added each sprint, but we could use your help!\n\nPlease help us keep this list up-to-date by providing feedback in any of the following ways:\n\n\n  Click Edit this page in GitHub to open a pull request with a solution of your own.\n  Open an issue in the devdocs GitHub repository.\n  Send us a tweet or e-mail.\n\n\nIf you’d like to contribute a new topic to the How Do I list, add your name and a topic to our sign-up sheet.\n\nTo sign up to contribute, all you need to do is to submit a pull request on the sign-up page or e-mail us.\n\nUse this template if you’d like. You can get a copy of the .md file  on Github.\n\nSubmissions should be authored in Markdown but HTML is welcome also.\n\n\n  All content submitted to us is subject to internal review. Content should be consistent with Magento practices, including coding standards.\n\n\n",
      "url": "/guides/v2.0/howdoi/bk-how-do-i.html"
    }
    ,
  
    "guides-v2-0-install-gde-bk-install-guide-html": {
      "title": "How to get the Magento software",
      "content": "Magento software installation\n\nHi, we’re glad you’re among the 240,000 merchants worldwide who put their trust in our eCommerce software. We’ve gathered some information to help you get started with Magento and with your Magento installation.\n\nWe have some resources here to help get you started using the eCommerce platform of the future—Magento 2.\n\nIt’s what we do.\n\nHow to get the Magento software\n\nConsult the following table for how to get started installing Magento Open Source or Magento Commerce.\n\n\n\t\n\t\t\n\t\t\tUser needs\n\t\t\tDescription\n\t\t\tHigh-level installation and upgrade steps\n\t\t\tGet started link\n\t\t\n\t\n\t\tEasy installation, command line, have your own server\n\t\tSome technical expertise, command line access to the Magento server.\n\t\t\tEnables you to install the Magento software and extensions using either the Web Setup Wizard or the command line.\n\t\tYou cannot use the Web Setup Wizard to upgrade the Magento software and extensions. You must upgrade using Composer and the command line.\n\t\tDownloads a compressed file that contains the Magento software.\n\t\t\tExtracts it on the Magento server or asks a network administrator to do so.\n\t\t\tInstalls the Magento software using the Web Setup Wizard or command line.\n\t\t\tUpgrades the Magento application and extensions using Composer and the command line.\n\t\t\n\t\tEasy installation (own server)\n\t\n\t\n\t\tIntegrator, packager\n\t\tWants full control over all components installed, has access to the Magento server, highly technical, might repackage Magento Open Source with other components.\n\t\tEnables you to install the Magento software and extensions using either the Web Setup Wizard or the command line.\n\t\tYou can also upgrade the Magento application and extensions using the Web Setup Wizard or command line.\n\t\tCreates a Composer project that contains the list of components to use.\n\t\t\tUses Composer to update package dependencies; uses composer create-project to get the Magento metapackage.\n\t\t\tInstalls the Magento software using either a command line or the Setup Wizard.\n\t\tUpgrades the Magento application and extensions using the Web Setup Wizard or command line.\n\t\tGet the metapackage\n\t\n\n\t\n\t\n\t\tContributing developer\n\t\tContributes to the Magento codebase, files bugs, and customizes the Magento software. Highly technical, has their own Magento development server, understands Composer and GitHub.\n\t\t\tEnables you to install the Magento software and extensions using either the Web Setup Wizard or the command line.\n\t\t\tYou cannot use Magento in a production environment.\n      You cannot use the Web Setup Wizard to upgrade the Magento software and extensions. You must upgrade using Composer and git commands.\n\t\tClones the Magento 2 GitHub repository.\n\t\t\tUses Composer to update package dependencies.\n\t\t\tInstalls the Magento software using either a command line or the Setup Wizard.\n\t\t\tUpgrades the Magento software using Composer and GitHub commands.\n\t\t\tCustomizes code under the app/code directory.\n\t\tClone the Magento repository\n\t\n\n\n\t\n\n\nUseful information\n\nAt any time during your installation, take advantage of our installation quick reference (tutorial) or installation roadmap (reference). They’re really easy to use; the tutorial walks you through a sample installation. The roadmap provides links to common tasks throughout the guide.\n\nUse the links on the left side of the page to navigate topics in each part of the installation.\n\nRequired server permissions\n\nUNIX systems require root privileges to install and configure software like a web server, PHP, and so on. If you need to install this software, make sure you have root access.\n\nYou should not install the Magento software in the web server docroot as the root user because the web server might not be able to interact with those files.\n\nYou’ll also need root privileges to create the Magento file system owner and add that owner to the web server’s group. You’ll use the Magento file system owner to run any commands from the command line and to set up the Magento cron job, which schedules tasks for you.\n\n\n\n",
      "url": "/guides/v2.0/install-gde/bk-install-guide.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-bk-javascript-dev-guide-html": {
      "title": "JavaScript Developer Guide",
      "content": "Introduction\nBy default, the Magento application uses the RequireJS file and module loader to optimize the time of loading pages with included JavaScript files, and to manage dependencies of JavaScript resources.\n\nYou can follow the same approach when customizing Magento JavaScript, or disable all the default scripts and their load by RequireJS.\n\nFor information about how JS resources are located and configured, see the JavaScript resources topic in the Configuration Guide.\n\nWhat's in this guide\nTopics of this book describe the following:\n\n\n  JavaScript initialization: how to initialize JavaScript components and widgets in JavaScript files and .phtml templates\n  Use custom JavaScript: how to extend or replace default JavaScript components/widgets.\n  Locate JavaScript components: how to define which components (scripts) are used on a particular store page.\n  Magento jQuery widgets: Magento jQuery widget API documentation.\n  Customizing JavaScript illustration: practical illustration of custom widgets related tasks.\n\n\nJavaScript automatic testing is described in a separate JavaScript unit testing topic.\n\nTerms used\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\nJavaScript component (JS component)\n\n\nAny separate .js file decorated as AMD module.\n\n\n\n\n\nUi component\n\n\nJS component located in the Magento_Ui module, in the app/code/Magento/Ui/view directory.\n\n\n\n\n\njQuery UI widget\n\n\nA JS component/widget provided by jQuery UI library used in Magento.\n\n\n\n\njQuery widget\n\n\nCustom widget created using jQuery UI Widget Factory and decorated as AMD module. Many Magento JS components are jQuery widget.\n\n\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/bk-javascript-dev-guide.html"
    }
    ,
  
    "guides-v2-0-migration-bk-migration-guide-html": {
      "title": "Migration overview",
      "content": "Welcome!\n\nWe’re pleased you’re considering moving from the world’s #1 commerce platform — Magento 1.x — to the platform for the future, Magento 2. We’re also excited to share the details about this process, which we refer to as migration.\n\nMigration components\n\nMagento 2 migration involves four components: data, extensions and custom code, themes, and customizations.\n\nData\nWe’ve developed the Magento 2 Data Migration Tool to help you efficiently move all of your products, customers, and order data, store configurations, promotions and more to Magento 2. This guide provides information on the tool and best practices for using it to migrate your data.\n\nExtensions and custom code\nWe’ve been working hard with the development community to help you use your Magento 1 extensions in Magento 2. Now we’re proud to present the Magento Marketplace, where you can download or purchase the latest versions of your favourite extensions.\n\nAlso, we have developed the Code Migration Toolkit, which will help to port your extensions and custom code to Magento 2, significantly reducing your efforts.\n\nMore information on developing extensions for Magento 2 is available in the PHP Developer Guide.\n\nThemes and customizations\n\nMagento 2 uses new approaches and technologies that give merchants an unmatched ability to create innovative shopping experiences and scale to new levels. To take advantage of these advances, developers will need to make changes to their themes and customizations. Documentation is available online for creating Magento 2 themes, layouts, and customizations.\n\nMigration efforts\n\nJust like an upgrade between 1.x versions (for example, from v1.12 to v1.14), the level of effort to migrate from Magento 1 to Magento 2 depends upon how you have built your site and its level of customization. Initial estimates indicate that an average Magento 2 migration is only about 20% larger than a Magento 1.x upgrade.\n\nHowever, we are constantly improving the Data Migration Tool (see the Changelog for more details); so the migration efforts are continuously decreasing.\n",
      "url": "/guides/v2.0/migration/bk-migration-guide.html"
    }
    ,
  
    "guides-v2-0-pattern-library-bk-pattern-html": {
      "title": "Admin Design Pattern Library",
      "content": "What is a design pattern?\n\nDesign patterns can be simple elements or complex pieces of functionality - like buttons, scroll bars, data tables and forms - that are standardized to be easily repeated and reused across a website or application.\n\nPatterns include definitions, examples, instructions and specifications that break down spatial relationships and interactions / behaviors.\n\nWhy use patterns?\n\nUsing patterns enhances customer experience through maintaining consistency and ease of use. And, sticking to defined standards simplifies updating patterns across multiple pages when changes are required.\n\nPatterns libraries are designed to evolve over time, never going out of date. Changes should be communicated, as they occur, to the design community.\n\n \nFind more details about the Admin Design Pattern Library in the following topic:\n\nContainer\nStatic Content Container\nSlide-out Panels, Modal Windows, and Overlays\nTabs\n\nControls\nButtons\nButton Bar\n\nDisplaying and Dealing with Data\nTile\nFilters\nData Table\nTree\n\nFeedback to User\nProgress Indicator\n\nGetting User Input\nForm Elements\nImage Uploader\nDate and Time Selector\nUse Default Config\nSelect From List\n\nNavigation\nLinks\nWizard\n\nTemplates\nAddress Form\nSign In Form\n\nGeneral\nAccessibility Guidelines\n",
      "url": "/guides/v2.0/pattern-library/bk-pattern.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-bk-payments-integrations-html": {
      "title": "Payments Integrations",
      "content": "This guide describes the Magento payment provider gateway: a mechanism that allows you to integrate your stores with payment service providers. As a result, you can create and handle transactions based on order details.\n\nThe Magento payment provider gateway overview topic is the entry point of this guide.\n\n",
      "url": "/guides/v2.0/payments-integrations/bk-payments-integrations.html"
    }
    ,
  
    "guides-v2-0-release-notes-bk-release-notes-html": {
      "title": "2.0.x Release Information",
      "content": "Magento 2.0 Release Notes\n\n\n  Magento Open Source 2.0.18 Release Notes\n  \n    Magento Commerce 2.0.18 Release Notes\n  \n  Magento Open Source 2.0.17 Release Notes\n  \n    Magento Commerce 2.0.17 Release Notes\n  \n  Magento Open Source 2.0.16 Release Notes\n  \n    Magento Commerce 2.0.16 Release Notes\n  \n  Magento Open Source 2.0.15 Release Notes\n  \n    Magento Commerce 2.0.15 Release Notes\n  \n  Magento Open Source 2.0.14 Release Notes\n  \n    Magento Commerce 2.0.14 Release Notes\n  \n  Magento Open Source 2.0.13 Release Notes\n  \n    Magento Commerce 2.0.13 Release Notes\n  \n  Magento Open Source 2.0.12 Release Notes\n  \n    Magento Commerce 2.0.12 Release Notes\n  \n  Magento Open Source 2.0.11 Release Notes\n  \n    Magento Commerce 2.0.11 Release Notes\n  \n  Magento Open Source 2.0.10 Release Notes\n  \n    Magento Commerce 2.0.10 Release Notes\n  \n  Magento Open Source 2.0.9 Release Notes\n  \n    Magento Commerce 2.0.9 Release Notes\n  \n  Magento Open Source 2.0.8 Release Notes\n  \n    Magento Commerce 2.0.8 Release Notes\n  \n  Magento Open Source 2.0.7 Release Notes\n  \n    Magento Commerce 2.0.7 Release Notes\n  \n  Magento Open Source 2.0.6 Release Notes\n  \n    Magento Commerce 2.0.6 Release Notes\n  \n  Magento Open Source 2.0.5 Release Notes\n  \n    Magento Commerce 2.0.5 Release Notes\n  \n  Magento Open Source 2.0.4 Release Notes\n  \n    Magento Commerce 2.0.4 Release Notes\n  \n  Magento Open Source 2.0.3 Release Notes\n  Magento Commerce 2.0.3 Release Notes\n\n\nBackward-incompatible changes\n\n\n  Overview of backward-incompatible changes made after Magento 2.0.0 release in scope of 2.0 version: Magento 2.1 Backward Incompatible Changes\n\n\nThird-party license agreements\n\n\n  Magento Open Source third-party licenses\n  Magento Commerce third-party licenses\n  Magento Commerce (Cloud) third-party licenses\n\n",
      "url": "/guides/v2.0/release-notes/bk-release-notes.html"
    }
    ,
  
    "guides-v2-0-rest-bk-rest-html": {
      "title": "Overview",
      "content": "The REST API documentation published here on the Magento 2 Developer Documentation website describes the REST APIs that are available on the latest release of Magento 2.\n\nThis documentation is generated from the code base using Swagger and represents the state of the code at the time the documentation was generated. Swagger displays a list of service names. Click on a service name to display the list of APIs defined within that service. Click on an API name to display detailed information about that API.\n\nYou can also create a dynamic REST API documentation set on your server with live data. On your server, Swagger displays REST APIs for all installed products and allows you to try out the APIs. For more information, see Generate local REST API reference.\n\n\nThe REST API documentation on the Magento Developers website (devdocs.magento.com) is static. It is not running an instance of Magento, and therefore it does not have live data.\n\n",
      "url": "/guides/v2.0/rest/bk-rest.html"
    }
    ,
  
    "guides-v2-0-soap-bk-soap-html": {
      "title": "SOAP Reference",
      "content": "Contents\n\nSoap WSDL Endpoint Format\n\nhttp://&lt;magento_host&gt;/soap/&lt;store_code&gt;?wsdl&amp;services=&lt;serviceName1,serviceName2,..&gt;\n\n\n  The value of store_code can be one of the following:\n  \n  default\n  The assigned store code\n  all. This value only applies to the CMS and Product modules. If this value is specified, the API call affects all the merchant's stores. getoperations cannot be performed when you specify all.\n\n\n\nList of Service Names per Module\n\nThe entire list can be retrieved here: http://&lt;magento_host&gt;/soap/default?wsdl_list=1\n\nBackend\nbackendModuleServiceV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=backendModuleServiceV1\n\nBundle\nbundleProductLinkManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=bundleProductLinkManagementV1\n\nbundleProductOptionRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=bundleProductOptionRepositoryV1\n\nbundleProductOptionTypeListV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=bundleProductOptionTypeListV1\n\nbundleProductOptionManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=bundleProductOptionManagementV1\n\nCatalog\ncatalogProductRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductRepositoryV1\n\ncatalogProductAttributeTypesListV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeTypesListV1\n\ncatalogProductAttributeRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeRepositoryV1\n\ncatalogCategoryAttributeRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryAttributeRepositoryV1\n\ncatalogCategoryAttributeOptionManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryAttributeOptionManagementV1\n\ncatalogProductTypeListV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductTypeListV1\n\ncatalogAttributeSetRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogAttributeSetRepositoryV1\n\ncatalogAttributeSetManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogAttributeSetManagementV1\n\ncatalogProductAttributeManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeManagementV1\n\ncatalogProductAttributeGroupRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeGroupRepositoryV1\n\ncatalogProductAttributeOptionManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeOptionManagementV1\n\ncatalogProductMediaAttributeManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductMediaAttributeManagementV1\n\ncatalogProductAttributeMediaGalleryManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductAttributeMediaGalleryManagementV1\n\ncatalogProductGroupPriceManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductGroupPriceManagementV1\n\ncatalogProductTierPriceManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductTierPriceManagementV1\n\ncatalogCategoryRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryRepositoryV1\n\ncatalogCategoryManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryManagementV1\n\ncatalogProductCustomOptionTypeListV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductCustomOptionTypeListV1\n\ncatalogProductCustomOptionRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductCustomOptionRepositoryV1\n\ncatalogProductLinkTypeListV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductLinkTypeListV1\n\ncatalogProductLinkManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductLinkManagementV1\n\ncatalogProductLinkRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogProductLinkRepositoryV1\n\ncatalogCategoryLinkManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryLinkManagementV1\n\ncatalogCategoryLinkRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogCategoryLinkRepositoryV1\n\ncatalogInventoryStockRegistryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=catalogInventoryStockRegistryV1\n\nCheckout\ncheckoutAgreementsCheckoutAgreementsRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=checkoutAgreementsCheckoutAgreementsRepositoryV1\n\nConfigurable\nconfigurableProductLinkManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=configurableProductLinkManagementV1\n\nconfigurableProductConfigurableProductManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=configurableProductConfigurableProductManagementV1\n\nconfigurableProductOptionRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=configurableProductOptionRepositoryV1\n\nCustomer\ncustomerGroupRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerGroupRepositoryV1\n\ncustomerGroupManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerGroupManagementV1\n\ncustomerCustomerMetadataV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerCustomerMetadataV1\n\ncustomerAddressMetadataV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerAddressMetadataV1\n\ncustomerCustomerRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerCustomerRepositoryV1\n\ncustomerAccountManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerAccountManagementV1\n\ncustomerAddressRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=customerAddressRepositoryV1\n\nDownloadable\ndownloadableLinkRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=downloadableLinkRepositoryV1\n\ndownloadableSampleRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=downloadableSampleRepositoryV1\n\nEav\neavAttributeSetRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=eavAttributeSetRepositoryV1\n\neavAttributeSetManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=eavAttributeSetManagementV1\n\nGift Message\ngiftMessageCartRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=giftMessageCartRepositoryV1\n\ngiftMessageItemRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=giftMessageItemRepositoryV1\n\nIntegration\nintegrationAdminTokenServiceV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=integrationAdminTokenServiceV1\n\nintegrationCustomerTokenServiceV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=integrationCustomerTokenServiceV1\n\nQuote\nquoteCartRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCartRepositoryV1\n\nquoteCartManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCartManagementV1\n\nquoteGuestCartRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCartRepositoryV1\n\nquoteGuestCartManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCartManagementV1\n\nquoteShippingMethodManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteShippingMethodManagementV1\n\nquoteGuestShippingMethodManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestShippingMethodManagementV1\n\nquoteCartItemRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCartItemRepositoryV1\n\nquoteGuestCartItemRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCartItemRepositoryV1\n\nquotePaymentMethodManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quotePaymentMethodManagementV1\n\nquoteGuestPaymentMethodManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestPaymentMethodManagementV1\n\nquoteBillingAddressManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteBillingAddressManagementV1\n\nquoteGuestBillingAddressManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestBillingAddressManagementV1\n\nquoteGuestAddressDetailsManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestAddressDetailsManagementV1\n\nquoteCouponManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCouponManagementV1\n\nquoteGuestCouponManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCouponManagementV1\n\nquoteShippingAddressManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteShippingAddressManagementV1\n\nquoteGuestShippingAddressManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestShippingAddressManagementV1\n\nquoteAddressDetailsManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteAddressDetailsManagementV1\n\nquoteCartTotalRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCartTotalRepositoryV1\n\nquoteGuestCartTotalManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCartTotalManagementV1\n\nquoteGuestCartTotalRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteGuestCartTotalRepositoryV1\n\nquoteCartTotalManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=quoteCartTotalManagementV1\n\nSales\nsalesOrderRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesOrderRepositoryV1\n\nsalesOrderManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesOrderManagementV1\n\nsalesOrderAddressRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesOrderAddressRepositoryV1\n\nsalesInvoiceRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesInvoiceRepositoryV1\n\nsalesInvoiceManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesInvoiceManagementV1\n\nsalesInvoiceCommentRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesInvoiceCommentRepositoryV1\n\nsalesInvoiceOrderV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesInvoiceOrderV1\n\nsalesCreditmemoManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesCreditmemoManagementV1\n\nsalesCreditmemoRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesCreditmemoRepositoryV1\n\nsalesCreditmemoCommentRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesCreditmemoCommentRepositoryV1\n\nsalesShipmentRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesShipmentRepositoryV1\n\nsalesShipmentManagementV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesShipmentManagementV1\n\nsalesShipmentCommentRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesShipmentCommentRepositoryV1\n\nsalesShipmentTrackRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesShipmentTrackRepositoryV1\n\nsalesShipOrderV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesShipOrderV1\n\nsalesTransactionRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=salesTransactionRepositoryV1\n\nTax\ntaxTaxRateRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=taxTaxRateRepositoryV1\n\ntaxTaxRuleRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=taxTaxRuleRepositoryV1\n\ntaxTaxClassRepositoryV1: http://&lt;magento_host&gt;/soap/default?wsdl&amp;services=taxTaxClassRepositoryV1\n",
      "url": "/guides/v2.0/soap/bk-soap.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-bk-styleguide-html": {
      "title": "Admin Style Guide",
      "content": "The Magento Admin guide sets our foundational design, writing, and content standards for the Magento Admin software. For more specific user-interface standards, see the Admin Design Pattern Library.\n\nWhy follow the style guide? A style guide is the best tool for designers and writers to establish and maintain consistency, which improves communication throughout the application. A seamless look-and-feel and a steady, encouraging writing style make the application usable and engaging.\n\nTo get started or refresh your knowledge, read the following documents:\n\nDesign\n\n\n  \n    Color — Reflects our brand personality, meeting accessibility standards.\n  \n  \n    Iconography — Provides a visual representation of functionality or content, usually paired and displayed with a label.\n  \n  \n    Page Grid — Establishes global layouts for page templates and how content and design patterns can be placed in the grids’ columns.\n  \n  \n    Typography — Sets page hierarchy and content type specifications.\n  \n\n\nWriting and Content\n\n\n  \n    Voice and Tone — Outlines a set of ground rules to engage and empower users as they navigate the Magento Admin and perform tasks with confidence and ease.\n  \n  \n    Errors and Messages Writing — Establishes how to communicate with users when errors occur or important information needs to be communicated.\n  \n  \n    Buttons and Links Usage — Defines the differences between buttons and links and when they can be used as calls to action.\n  \n  \n    Capitalization — Provides guidance for how we use sentence case, title case, and all caps.\n  \n  \n    Headings and Organization — Prioritizes content and creates a hierarchy for users to easily navigate Magento Admin.\n  \n  \n    Punctuation — Surfaces exceptions to the Associated Press (AP) Stylebook’s punctuation standards and summarizes key stylebook advice.\n  \n  \n    Content Formats — Standardizes abbreviations, acronyms, file-type formats, addresses, and lists.\n  \n  \n    Number Formats — Lists basic numeric and heading standards and covers percentages, money, and dates and times.\n  \n\n\nRelated Links\n\nAdmin Design Pattern Library\n",
      "url": "/guides/v2.0/design-styleguide/bk-styleguide.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-build-html": {
      "title": "Build",
      "content": "Building your component involves laying out the file structure, creating the necessary configuration files, building out any needed API interfaces and services, and adding any frontend parts needed for your component.\n\nPrerequisites\nBefore you begin creating your new component, make sure that you have a working installation of Magento 2.0, and the Magento System Requirements.\n\nAlso, Magento recommends that you disable caching while setting up the component file structure and adding configuration files.\n\nThe following details the component building process:\n\n\n  Create composer.json\n  Define your configuration files\n  Create your component file structure\n  Register your component\n  URN schema validation\n  Name your component\n  Component load order\n  Enable your component\n\n",
      "url": "/guides/v2.0/extension-dev-guide/build/build.html"
    }
    ,
  
    "guides-v2-0-pattern-library-controls-button-bar-button-bar-html": {
      "title": "Admin Design Pattern Library",
      "content": "Button bar\nWithin Magento application, it is often necessary to provide users with page level actions. These actions should be contain in a button bar as described in this guideline.\n\nFor solutions not described in this article, please refer to other related patterns or contact the Magento UX Design team.\n\nWhen to Use\n\n  When page level actions are necessary.\n\n\nWhen Not to Use\n\n  When there is already a button bar.\n  When there is a wizard bar.\n  When buttons are needed but they are not page level buttons.\n\n\nRules \n\n1. General Rules\n\n  Only one button bar is allowed per page.\n  Either use a button bar or a wizard bar. Both cannot be on the page.\n  The buttons within the button bar must be one of the page-level buttons from  buttons pattern.\n  All the buttons in button bar should be visible at all time.\n\n\n2. Location\n\n\n  Button bar can be used in a page or a slide-in panel.\n  Its location in either scenario must be right below the page title or the slide-in panel title.\n\n\n\nButton Bar Position in Page\n\n\n\n\nButton Bar Position in Slide-in Panel\n\n\n3. Page Level Button Order and Priority - General Rules\n\n\n  There should never be more than one primary page level button on a single page.\n  Primary page level buttons should always be placed on the far right of the button order.\n  If a Back button is present, it should always fall on the far left of the button order.\n  Buttons should be ordered by group as specified below. In situations where button groups do not apply, they should be ordered by importance.\n\n\n4. Ordering of Button Bar\n\nPage level buttons can be logically grouped as follows:\n\n\n  Regress\n  Remove\n  Progress\n\n\n\n\nGroups can contain multiple CTAs but only one primary CTA. Groups should follow the below order:\n\n\n\n5. Ordering by Importance\n\nThere should never be more than one primary page level CTA on the same page. Page\nlevel CTAs should assume an ascending order of importance from left to right wherever\npossible, i.e. least important buttons followed by most important.\n\n\n\nStyle\n\nAll buttons should be right aligned. The button bar is spread across 12 columns and should be fluid.\n\n\n\nRecommendation\n\n\n  \n    It is recommended that all buttons in button bar should only be in one line. Because the button bar is in fluid grid, it is possible for the buttons to be wrap around to the next line.\n  \n  \n    If you have multiple page-level buttons. We recommend using the split button rather having too many buttons that will clutter the page.\n  \n\n\n\n\nBehavior\n\nSticky button bar\n\nTo ensure page level actions are always visible, The button bar should stick to the top of a browser as the user scrolls and the top of button bar hits the top of browser.\n\n1.Initial State\n\n\n\n\n\n\n2.After user scrolls, the button bar sticks to the browser.\n\n\n\nAccessibility\nButtons should make use of CSS and HTML so that button text is never dependent on a\ngraphic asset.\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Button Bar PSD source\n\n",
      "url": "/guides/v2.0/pattern-library/controls/button-bar/button-bar.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-buttons-and-links-usage-buttons-and-links-usage-html": {
      "title": "Admin Buttons and Links Usage",
      "content": "Buttons are primarily used for task-based navigation, and links are primarily used for site navigation.\n\nHowever, both buttons and links can function as calls to action (CTAs). Whether button or link, a CTA is used to encourage a user to take an action. CTA labels use title case and active verbs, should be short, and should use labels consistently across the Admin panel.\n\nFor more details, see Title Case standards in Capitalization.\n\nExamples:\n\n\n  No – “Free Demo”\n  Yes – “Sign Up for Free Demo”\n\n\n\n  No – “New Rule”\n  Yes – “Add Rule”\n\n\nButtons\n\nButtons are calls to action, and their labels should be limited to three words (four words maximum, if including a short verb or word).\n\nButtons can be used for:\n\n\n  \n    Calls to action for task flows: to begin, continue, or submit a task\n  \n  \n    Navigation in featured modules of content, like banners and content teasers\n  \n\n\nButton types are primary, secondary, and tertiary. Each page should have a maximum limit of one primary button. Split buttons include multiple actions. Button counts in a Button Bar or any array of buttons should be limited to four buttons, maximum.\n\nFor design specs, see Buttons and Button Bar patterns.\n\nLinks\n\nMinimize the amount of words — within 2-5 words, ideally — in a link label and use best practices in finding optimal keywords.\n\nOther links guidance includes:\n\n\n  \n    Avoid spawning new windows / tabs. As a general rule, new tabs and windows can confuse users and cause them to close their browser windows. However, exceptions for usage do exist.\n  \n  \n    External-link icon. Only use when linking to a non-Magento page. … Correct example: Go to Wikipedia\n  \n\n\nLinks can be used as content links (for site navigation) and non-primary CTAs. When used as CTAs, link labels should be long enough to be understood, but as short as possible. However, a link CTA’s label may sometimes stretch a few words longer than a button label.\n\nFor link typography specs, see Legal and Link Text in Typography standards.\n\nAccessibility\n\n\n  \n    Never use “click here” as a label. Labels should identify and describe the target of the link.\n  \n  \n    Avoid using file names or URLs as link labels.\n  \n  \n    Clearly identify file download links. Indicate in the label that the user is about to “download” a file.\n  \n  \n    For anchor links, use “Jump to” before the link. This identifies the link as an anchor and that it won’t navigate users to another page.\n  \n  \n    Use linked icons with care. Users may not know what the icon means, so for icons that aren’t globally recognized, pair a linked label with a linked icon. See Iconography standards.\n  \n\n\nLabels Best Practices\n\n\n  Parallelism. When linking to a page with a direct reference, match the exact wording of the page title or, for anchor tags, the section heading title.\n  PDFs and other file formats.\n    \n      Append the document-type acronym after the link label and link only the document title.\n      Use all caps case and do not add a period to the acronym. See All Caps case standards in Capitalization.\n      Do not use the file name or URL in the content &#8212; use the title of the document.\n    \n    Example:\n      \n        No – “Download FAQs (.PDF)”\n        No – “Download FAQs (.pdf)”\n        No – “Download faqs-bh-v1.pdf”\n        Yes – “Download FAQs (PDF)”\n      \n  \n\n\nWhen to Verify a Call to Action\n\nFor actions like “Delete” and “Cancel”, always consider the possibility that the user took the action by mistake.\n\nIf the user will lose a lot of work — or if the user’s task is not easily recoverable — after taking the action, create an interstitial verify step that happens first when the action is selected.\n\nLabel and Content Format\n\nUse the following template to create content for a verify step:\n\n\n  \n    Title: Before you [ Task Label ]\n  \n  \n    Explainer content: [ Specify the full implications for the action the user wants to take. ]\n  \n  \n    Verification content: Are you sure you want to continue?\n  \n  \n    Calls to action: [ Task Label ], Cancel … Note: The “Task Label” is the primary call to action and matches the Title’s Task Label.\n  \n\n\nButton Labels Used in Admin\n\nSpecify actions in buttons: Appending a specific label to a call to action’s verb clarifies the action that the user is taking. … Example: “Add Row” is more contextual and understandable than “Add”.\n\nThe following labels are the standards for Admin labels. Refer to these footnotes for call-to-action hierarchy:\n\n  * — A primary call to action.\n  ** — In specific contexts, can be used as a primary call to action.\n\n\n\n  \n    \n      Label\n      Usage Guideline\n    \n    \n      Add*Add [ + Label ]*\n      Use to create a new object or to add an existing object. As a primary call to action, the label usually matches the page title.   \n      “Create [ + Label ]” is also used, but only as an action for creating a new object, not adding an existing one.\n    \n    \n      CancelCancel [ + Label ]\n      In Admin, \"Cancel\" is used as a link in the Button Bar. Use \"Cancel\" to end a task flow, with changes unsaved. If the cancellation is not easily recoverable, then include a verify step.\n    \n    \n      Clear Form\n      Use to erase all entries on a form, not to be confused with “Reset [ + Label ]”.\n      For actions that are not easily recoverable, include a verify step.\n    \n    \n      DeleteDelete [ + Label ]\n      Use to permanently remove an object.\n      If the removal is not easily recoverable, then include a verify step.\n    \n    \n      EditEdit [ + Label ]\n      When to use \"Edit\" vs. \"Change\":\n        \n          Use \"Edit\" when an object's information is edited.\n          Use “Change” when switching from one object to another.\n          What's the difference? When users want to change a payment method, they don’t want to “Edit” the information for the specified payment method.\n        \n      \n    \n    \n      Continue*\n      Use to navigate linear task flows.\n    \n    \n      FilterApply Filter\n      For “Filter”, use to select categories to narrow a data set. For “Apply Filter”, use to activate the selected filters in the data set. Do not confuse with “Sort”.\n    \n    \n      Get Started*\n      Use for a task-entry step (setting expectations and providing prerequisites), before a user has entered a task.\n    \n    \n      Reset [ + Label ]\n      Indicate to users what data is being reset and how the data will reset.\n      For actions that are not easily recoverable, include a verify step.\n      Example: “Reset to Defaults”. Do not confuse with “Clear Form”. \n    \n    \n      Save**Save [ + Label ]**\n      Use to capture changes or to submit an entry. \"Save\" is usually use a secondary task, when a user wants to save changes and not continue, but “Save” can be used as a primary call to action, in Admin.\n    \n    \n      Search*\n      Use for search tasks, not filter tasks.\n    \n    \n      Sort\n      Use to select a category from which to sort data, not to be confused with “Filter”.\n    \n    \n      Submit*Submit [ + Label ]*\n      Use to complete a task or to submit it for completion. Insert the specific name of task as the label to clarify for users what they are submitting.\n    \n  \n\n",
      "url": "/guides/v2.0/design-styleguide/buttons-and-links-usage/buttons-and-links-usage.html"
    }
    ,
  
    "guides-v2-0-pattern-library-controls-buttons-buttons-html": {
      "title": "Admin Design Pattern Library",
      "content": "Buttons\nButtons bring attention to actions on the screen. This article will cover the use of general buttons on Magento.\n\nFor solutions not described in this topic, please refer to other related patterns or contact the Magento UX Design team.\n\nWhen to Use\nButtons should be used anywhere a call to action(CTA) is needed. Discretion should be\nused when deciding when to use a button vs. a hyperlink, icon, or another call to action.\n\nWhen Not to Use\n\n  Do not use buttons to indicate actions that are better suited as hyperlinks such   \nas “Cancel”. Some exceptions may apply.\n  Do not use more than one primary page level action on a single page for\ndifferent actions. Some exceptions may apply.\n  Do not use buttons to indicate a link to more information or to a task not related\nto primary flow.\n\n\nVariations\n\nVariations of this pattern are as follows, and will be detailed in the section on Appearance and behavior:\n\n\n  Page level buttons are to be used for calls to action on pages.\n  Form level buttons are to be used on forms.\n  Table level buttons are to be used within tables or data grids\n\n\n\n\nButtons will be take on one of the below variations.\n\n\n\t\n\t\t Page Level \n\t\t Form Level \n\t\t Table Level \n\t\n\t\n\t\t\n\t\t\tPrimary\n\t\t\tPrimary\n\t\t\tRegular\n\t\t\n\t\t\n\t\t\tSecondary\n\t\t\tSecondary\n\t\t\tIcon\n\t\t\n\t\t\n\t\t\tToggle\n\t\t\tToggle\n\t\t\tToggle\n\t\t\n\t\t\n\t\t\tTertiary\n\t\t\tTertiary\n\t\t\tTertiary\n\t\t\n\t\t\n\t\t\tTable Button\n\t\t\tTable Button\n\t\t\tTable Button\n\t\t\n\t\t\n\t\t\tPrimary Dropdown\n\t\t\tPrimary Dropdown\n\t\t\tPrimary Dropdown\n\t\t\n\t\t\n\t\t\tSecondary Dropdown\n\t\t\tSecondary Dropdown\n\t\t\tSecondary Dropdown\n\t\t\n\t\n\n\nCSS style classes will need to be established for any buttons that require a custom\ndefined style.\n\nStyles and Behavior\n\n1. Page Level Button\n\n\n\nFont details\nFamily: Open Sans Semibold;\nSize: 17px; (or 1.125em based on 14px default font)\nColor: #ffffff\n\nBackground color\nPrimary: #eb5202; (CSS-$magento-orange-color)\nSecondary: #514943; (CSS-$magento-dark-brown)\n\nHover background color\nPrimary: # aa2d00;\nSecondary: # 282421;\n\nDisabled style\nOpacity: 50%\n\nPage Level Button Padding\nTop/Bottom: 11px\nLeft/Right: 20px\n\nMargin Spacing\nTop/Bottom margin spacing should not be less than 10px\nLeft/Right margin spacing should not be less than 20px\n\n\n2. Dropdown Buttons\n\n\n\nFont details\nFamily: Open Sans Semibold;\nSize: 17px; (or 1.125em based on 14px default font)\nColor: #ffffff\n\nBackground color\nPrimary: #eb5202; (CSS-$magento-orange-color)\nSecondary: #514943; (CSS-$magento-dark-brown)\n\n\nHover background color\nPrimary: # aa2d00;\nSecondary: #28242;\nDropdown stroke: #337ab7;\nDropdown Highlight: #eeeeee\n\nDisabled style\nOpacity: 50%\n\nPage Level Button Padding\nTop/Bottom: 11px\nLeft/Right: 20px\n\nMargin Spacing\nTop/Bottom margin spacing should not be less than 10px\nLeft/Right margin spacing should not be less than 20px\n\n\n\n3. Tertiary Buttons\n\n\n\n\nFont details\nFamily: Open Sans Semibold;\nSize: 14px; (or .750em based on 14px default font)\nColor: #ffffff\n\nBackground colors\nSecondary: #514943; (CSS-$magento-dark-brown)\n\nHover background color\nSecondary: #28242;\n\nDisabled style\nOpacity: 50%\n\nTertiary Level Button Padding\nTop/Bottom: 12px\nLeft/Right: 30px\n\nMargin Spacing\nTop/Bottom margin spacing should not be less than 10px\nLeft/Right margin spacing should not be less than 20px\n\n\nTertiary Button Example:\n\n\n\n\n4. Quaternary Buttons\n\n\n\n\nQuaternary buttons are only after all the buttons hierarchy have been used.\n\nFont details\nFamily: Open Sans Semibold;\nSize: 13px; (or .750em based on 14px default font)\nColor: #322923\n\nBackground colors\nLight: #dcdcdc;\n\nBorder\nSolid\nWidth: 1px;\nBorder color: #9d9d9d;\n\nHover background color\nDark:#cccccc;\n\n\nDisabled style\nOpacity: 50%\n\nTertiary Level Button Padding\nTop/Bottom: 12px\nLeft/Right: 15px\n\nMargin Spacing\nTop/Bottom margin spacing should should not be less than 10px\nLeft/Right margin spacing should not be less than 10px\n\nQuaternary Button Example:\n\n\n5. Toggle Buttons\nThe toggle button acts like a checkbox. When you touch/click on it, the state toggles between “yes” and “no” and/or “on” and “off”.\n\nWhen to Use/When Not to Use\nUse toggle for:\n\n  Binary selection (true/false) when only a single option can be set\n  When multiple non-required selections can be set\n  In relation to other form elements when needed\n\nDo not use checkboxes if:\n  Multiple options need visibility\n\n\n\nVariations\nNo additional variations.\n\nFont details\nFamily: Open Sans Semibold;\nSize: 13px; (or .750em based on 14px default font)\nColor: #322923\n\nBackground colors\nLight: #dcdcdc;\n\nBorder\nSolid\nWidth: 1px;\nBorder color: #9d9d9d;\n\nActive background color\nDark:#cccccc;\n\nInactive background color\nDark:#cccccc;\n\nDisabled style\nOpacity: 50%\n\nTertiary Level Button Padding\nTop/Bottom: 12px\nLeft/Right: 15px\n\nMargin Spacing\nTop/Bottom margin spacing should should not be less than 10px\nLeft/Right margin spacing should not be less than 10px\n\nExamples of toggle buttons:\n\n\nAccessibility\n\nPC: https://support.microsoft.com/en-us/help/12445/windows-keyboard-shortcuts\nOS: http://support.apple.com/en-us/HT201236\n(Keyboard shortcut same as checkbox)\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Button PSD source\n",
      "url": "/guides/v2.0/pattern-library/controls/buttons/buttons.html"
    }
    ,
  
    "guides-v2-0-config-guide-cache-cache-options-html": {
      "title": "Low-level cache options",
      "content": "The Magento application uses a low-level cache frontend and backend to provide access to the cache storage.\n\nLow-level frontend cache\nMagento extends Zend_Cache_Core by implementing Magento\\Framework\\Cache\\Core frontend cache.\n\nLow-level backend cache\nIn general, the Magento application works with any backend cache that Zend_Cache Backends supports. However, this guide covers only the following low-level backend caches:\n\n\n  Redis\n  Database\n  File system (default): No configuration is necessary to use file system caching.\n\n\nVarnish doesn’t require setting up a low-level cache backend.\n\n\n  We'll periodically add more low-level cache types so watch this space.\n\n",
      "url": "/guides/v2.0/config-guide/cache/cache-options.html"
    }
    ,
  
    "guides-v2-0-config-guide-cache-cache-types-html": {
      "title": "Associate cache frontends with cache types",
      "content": "Step 1: Define a cache frontend\nThe Magento application has a default cache frontend you can use for any cache type. This section discusses how to optionally define a cache frontend with a different name, which is preferable if you expect to customize your frontend.\n\n\n  To use the default cache type, you don't need to modify env.php at all; you modify Magento's global di.xml. See the topics referenced in Low-level cache options. \n\n\nYou must specify a custom cache frontend either app/etc/env.php or Magento’s global app/etc/di.xml.\n\nThe following example shows how to define it in env.php (which overrides di.xml):\n\n'cache' =&gt; [\n    'frontend' =&gt; [\n        '&lt;unique frontend id&gt;' =&gt; [\n             &lt;cache options&gt;\n        ],\n    ],\n    'type' =&gt; [\n         &lt;cache type 1&gt; =&gt; [\n             'frontend' =&gt; '&lt;unique frontend id&gt;'\n        ],\n    ],\n    'type' =&gt; [\n         &lt;cache type 2&gt; =&gt; [\n             'frontend' =&gt; '&lt;unique frontend id&gt;'\n        ],\n    ],\n],\n\nwhere &lt;unique frontend id&gt; is a unique name to identify your frontend and &lt;cache options&gt; are options discussed in the topics specific to each type of caching (database, Redis, and so on).\n\nStep 2: Configure the cache\nYou can specify frontend and backend cache configuration options in env.php or di.xml. This task is optional.\n\nenv.php example:\n\n'frontend' =&gt; &lt;frontend_type&gt;,\n'frontend_options' =&gt; [\n    &lt;frontend_option&gt; =&gt; &lt;frontend_option_value&gt;,\n    ...\n],\n'backend' =&gt; &lt;backend_type&gt;,\n'backend_options' =&gt; [\n    &lt;backend_option&gt; =&gt; &lt;backend_option_value&gt;,\n    ...\n],\n\nwhere\n\n\n  \n    &lt;frontend_type&gt; is the low-level frontend cache type. Specify the name of a class that is compatible with Zend_Cache_Core.\n\n    If you omit &lt;frontend_type&gt;, Magento\\Framework\\Cache\\Core is used.\n  \n  &lt;frontend_option&gt;, &lt;frontend_option_value&gt; are the name and value of options the Magento framework passes as an associative array to the frontend cache upon its creation.\n  &lt;backend_type&gt; is the low-level backend cache type. Specify the name of a class that is compatible with Zend_Cache_Backend and that implements Zend_Cache_Backend_Interface.\n  &lt;backend_option&gt;, &lt;backend_option_value&gt; are the name and value of options the Magento framework passes as an associative array to backend cache upon its creation.\n\n\nNext step\nLow-level cache options\n",
      "url": "/guides/v2.0/config-guide/cache/cache-types.html"
    }
    ,
  
    "guides-v2-0-config-guide-cache-html": {
      "title": "Configure caching",
      "content": "Magento enables you to configure alternatives to the default file system caching. This guide discusses some of those alternatives; namely,\n\n\n  \n    Set up the following cache mechanisms in the Magento configuration:\n\n    \n      Database\n      Redis\n      File system (default): No configuration is necessary to use file system caching.\n    \n  \n  \n    Set up the Varnish without modifying the Magento configuration.\n  \n\n\n\n  We'll periodically add more cache alternatives so watch this space.\n\n\nMagento uses the following caching terminology:\n\n\n  Frontend: Similar to an interface or gateway to cache storage, implemented by Magento\\Framework\\Cache\\Frontend.\n  Cache types: Can be one of the types provided with Magento or you can create your own.\n  Backend: Specifies details about cache storage, implemented by Magento\\Framework\\Cache\\Backend\n  \n    Two-level backend: Stores cache records in two backends—a faster one and a slower one.\n\n    Two-level backend cache configuration is beyond the scope of this guide at this time.\n  \n\n\nThis topic discusses the following options for configuring caching:\n\n\n  Modifying the provided default cache frontend, which means you modify only &lt;your Magento install dir&gt;/app/etc/di.xml (the Magento application’s global dependency injection configuration)\n  Configuring your own custom cache frontend, which means you modify only &lt;your Magento install dir&gt;/app/etc/env.php because it overrides the equivalent configuration in di.xml\n\n\n\n  Varnish requires no changes to the Magento configuration. For more information, see Configure and use Varnish.\n\n",
      "url": "/guides/v2.0/config-guide/cache.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-cache-for-frontdevs-html": {
      "title": "Magento cache overview",
      "content": "\n\n  Caching is one of the most effective ways to improve website performance. Generally speaking, there are two methods of caching content:\n\n  \n    Client-side (browser)\n    Server-side\n  \n\n  Retrieving stored (cached) content from a previous request for the same client instead of requesting files from your server every time someone visits your site is a more efficient use of network bandwidth.\n\n  The Magento page cache library contains a simple PHP reverse proxy that enables full page caching out of the box. A reverse proxy acts as an intermediary between visitors and your application and can reduce the load on your server.\n\n  We recommend using Varnish, but you can use Magento’s default caching mechanism instead, which stores cache files in any of the following:\n\n  \n    File system (You don’t need to do anything to use file-based caching.)\n    Database\n    Redis\n  \n\n  Cacheable and uncacheable pages\n  Cacheable and uncacheable are terms we use to indicate whether or not a page should be cached at all. (By default, all pages are cacheable.) If any block in a layout is designated as uncacheable, the entire page is uncacheable.\n\n  To create an uncacheable page, mark any block on that page as uncacheable in the layout using cacheable=\"false\".\n\n  Examples of uncacheable pages include the compare products, cart, checkout pages, and so on.\n\n  Example\n\n  \n    Do not configure content pages (i.e., catalog, product, and CMS pages) to be uncacheable. Doing so has an adverse affect on performance.\n  \n\n  Public and private content\n  Reverse proxies serve “public” or shared content to more than one user. However, most Magento websites generate dynamic and personalized “private” content that should only be served to one user, which presents unique caching challenges. To address these challenges, Magento can distinguish between two types of content:\n\n  \n    \n      Public - Public content is stored server side in your reverse proxy cache storage (e.g., file system, database, Redis, or Varnish) and is available to multiple customers. Examples of public content include header, footer, and category listing.\n    \n    \n      Private - Private content is stored client side (e.g., browser) and is specific to an individual customer. Examples of private content include wishlist, shopping cart, customer name, and address. You should limit stored private content to a small portion of the page’s total content.\n    \n  \n\n  Cache types\n  The following cache types mostly have impact on frontend development process:\n\n  \n    \n      \n        Cache type “friendly” name\n        Cache type code name\n        Description\n      \n    \n    \n      \n        Layout\n        layout\n        Compiled page layouts (that is, the layout components from all components). Clean or flush this cache type after modifying layout files.\n      \n      \n        Block HTML output\n        block_html\n        HTML page fragments per block. Clean or flush this cache type after modifying the view layer.\n      \n      \n        Page cache\n        full_page\n        Generated HTML pages. If necessary, Magento cleans up this cache automatically, but third-party developers can put any data in any segment of the cache. Clean or flush this cache type after modifying code level that affects HTML output. It’s recommended to keep this cache enabled because caching HTML improves performance significantly.\n      \n      \n        Translations\n        translate\n        Merged translations from all modules.\n      \n    \n  \n\n  \n    \nThe full list of cache types can be found in the Overview of cache types topic.\n\n  \n\n  Clean cache\n\n  To clean cache, run\n\n  magento cache:clean &lt;type&gt; ... &lt;type&gt;\n  \n\n  To view the status of the cache, run:\n\n  `php bin/magento cache:status`\n  \n\n  For more details about working with cache, see Manage the cache\n\n  Clean static files\n\n  Besides the cached files, in theme development process developers also deal with other saved files - static view files that are preprocessed and published to the var/view_preprocessed and pub/static directories correspondingly. In most cases when working on a custom theme, for example, if you are only working on styles, you do not need to clean cache, but need to clean the previously preprocessed and published static view files. To clean them, run  grunt clean &lt;theme&gt; or manually clear the pub/static and var/view_preprocessed directories.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/cache_for_frontdevs.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-capitalization-capitalization-html": {
      "title": "Admin Capitalization",
      "content": "Magento uses three different cases for content – sentence case, title case, and all-caps.\n\nUse the following standards for usage and keep in mind a few key terms’ capitalization rules.\n\nSentence Case\n\nUse as default content style, where a grammatically correct sentence starts with an initially capitalized word and ends with a punctuation mark. For exceptions, see Title-Case and All-Caps standards that follow.\n\nPay attention to common Magento terms – some may be mistaken for proper nouns.\n\nHowever, many terms use lowercase including: merchant, developer, home page, static blocks, invoice, order, and panel.\n\nTitle Case\n\nUse For …\n\n\n  \n    Headings. See more Headings guidance.\n  \n  \n    Button labels and links. ONLY use title case when a link are used as a call to action. See more Buttons and Links Usage guidance.\n  \n\n\nCapitalize …\n\n\n  The first letter of the first and last words.\n  The second word of a compound, hyphenated word. Exception: When the first word in the hyphenation is not a prefix ... Prefix examples: anti-, pre-, post-\n  Examples:\n    \n      No – \"Best-rated Platform Software\"\n      Yes – \"Best-Rated Platform Software\"\n      \n    \n      No – \"Post-Launch Instructions\"\n      Yes – \"Post-launch Instructions\"\n      \n  \n  All verbs. \n    \n      Capitalize even the little ones.\n      Correct examples: Is, Am, Are, Was, Were, Be, Being, and Been.\n    \n  \n  All parts of verbs. Includes prepositions, if they are part of phrasal verb ... Correct example: \"Turn On\"\n    \n      Tip: if you emphasize the word when reading it aloud, then capitalize it.\"\n      Infinitives are not verbs: See infinitives guidance, jump to the “Do Not capitalize …” section.\n    \n  Examples:\n    \n      No – “Turning Blocks on and off\"\n      Yes – “Turning Blocks On and Off”\n      Yes – “Setting Up a Catalog”\n      Yes – “Turning On the Service”\n    \n    \n\n\nDo Not Capitalize …\n\n\n  Words following prefixes. For guidance, jump to the “Capitalize … “section and find the prefixes and compound, hyphenated words guidance.\n  Articles. ... Correct examples: a, an, the\n  Conjunctions. ... Correct examples: and, but, for, or, nor\n  Prepositions of fewer than four letters. Includes the \"to\" in infinitives. See example:\n    \n      No – “The Key To Customer Service In An Omnichannel World\"\n      Yes – “The Key to Customer Service in an Omnichannel World”\n      \n    \n  Brand or company names that use a lowercase initial letter. ... Tip: Rephrase a heading or sentence to avoid starting with a lowercase letter. See example:\n    \n      No – “EBay, IPod, IPhone\"\n      Yes – “eBay, iPod, iPhone”\n      \n  \n\n\nAll Caps\n\nUse only in and acronyms and address formats. For more details, see:\n\n\n  \n    The Acronyms section in Content Formats.\n  \n  \n    The Address section in Number Formats.\n  \n\n\nTerms to Remember\n\nUse capitalization standards, as specified in the Magento Glossary and Word Usage Bank, and focus on the following rules.\n\nCapitalize …\n\n\n  \n    Numbered items. Capitalize when referring to a numbered object. … Correct examples: Slide 5, Exercise 3, Table 4.2, Figure 9\n  \n  \n    Admin panel. Capitalize the word “Admin” in the term “Admin panel” — but panel remains lowercase.\n  \n  \n    UI names. Use initial caps, where the Magento Glossary and Word Usage Bank specify.\n  \n  \n    Lists’ first word, initial capped. See more “Lists” guidance in Content Formats.\n  \n\n\nDo Not Capitalize …\n\n\n  \n    Steps. Lowercase “page” or “step” when referring to pages in a document or steps in a procedure.\n  \n  \n    Global internet terms. … Correct examples: website, internet, online, email\n  \n\n",
      "url": "/guides/v2.0/design-styleguide/capitalization/capitalization.html"
    }
    ,
  
    "guides-v2-0-rest-modules-catalog-html": {
      "title": "Catalog module",
      "content": "The Catalog module provides functionality for creating and maintaining products and categories.\n\nCategories\n\nWhen you create a category from Admin, you have the option to configure display and search engine optimization settings. To configure these settings using POST V1/categories, you can specify the following parameters as attribute_code values:\n\nall_children\nchildren\nchildren_count\ncustom_apply_to_products\ncustom_design\ncustom_design_from\ncustom_design_to\ncustom_layout_update\ncustom_use_parent_settings\ndefault_sort_by\ndescription\ndisplay_mode\nfilter_price_range\nimage\nis_anchor\nlanding_page\nmeta_description\nmeta_keywords\nmeta_title\npage_layout\npath\npath_in_store\nurl_key\nurl_path\n\n\nThird-party modules may define other custom attributes.\n\nThe following example uses the POST V1/categories call to assign four custom attributes to the “My New Category” category.\n\n{\n\"category\": {\n    \"parent_id\": 2,\n    \"name\": \"My New Category\",\n    \"is_active\": true,\n    \"level\": 2,\n    \"include_in_menu\": true,\n    \"custom_attributes\":[\n         {\n            \"attribute_code\":\"description\",\n            \"value\":\"Women category description\"\n         },\n         {\n            \"attribute_code\":\"meta_title\",\n            \"value\":\"Women meta title\"\n         },\n         {\n            \"attribute_code\":\"meta_keywords\",\n            \"value\":\"Women meta keywords\"\n         },\n         {\n            \"attribute_code\":\"meta_description\",\n            \"value\":\"Women meta description\"\n         },\n         {\n            \"attribute_code\":\"url_key\",\n            \"value\":\"women-test-key\"\n         }\n      ]\n    }\n}\n\n",
      "url": "/guides/v2.0/rest/modules/catalog.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-ce-ee-upgrade-start-html": {
      "title": "Upgrade from Open Source to Commerce",
      "content": "Overview of Magento Open Source to Magento Commerce upgrade\nThis section discusses how to upgrade Magento Open Source to Magento Commerce.\n\n\n\tYou must be authorized for Magento Commerce to perform the tasks discussed in this topic.\n\n\nPrerequisites\nBefore continuing, complete all tasks discussed in Prerequisites.\n\nIn addition, you might need to install the PHP bcmath extension, which is required by Magento Commerce. Examples follow:\n\n\n  CentOS (using the webtatic repository): yum -y install php56w-bcmath\n  Ubuntu (using the ppa:ondrej/php5-5.6 repository): apt-get -y install php5-bcmath\n\n\n\n\tMake sure you are authorized for Magento Commerce access before you continue. Contact Magento Support if you have questions.\n\n\nStart System Upgrade from the Magento Admin\nTo run System Upgrade:\n\n\n  Log in to the Magento Admin as an administrator.\n  Click System &gt; Web Setup Wizard.\nThe following page displays.\n\n  \n    Click System Upgrade.\n\n    Magento begins searching for core module updates immediately. To also search for component updates, click Yes. A sample follows:\n\n    \n\n    The page displays similar to the following when we find components to upgrade.\n\n\n    From the list, click the version to which to upgrade. Typically, you’ll choose the most recent version (indicated by (latest).)\n  \n\n\nAfter the upgrade completes, restart Varnish if you use it for page caching.\n\nservice varnish restart\n\n\nErrors\n\n  \n    The following error can indicate one of several issues, including that you haven’t entered your authentication keys in the Magento Admin:\n\n    \n\n    For suggested solutions to other causes indicated by this message, see troubleshooting.\n  \n  \n    The following error might display:\n\n    [2016-01-19 23:33:24 UTC] An error occurred while executing job \n\"setup:upgrade {\"command\":\"setup:upgrade\"}\": Could not complete \nsetup:upgrade {\"command\":\"setup:upgrade\"} successfully: Source \nclass \"\\Cybersource\" for \"CybersourceLogger\" generation does not exist.\n    \n\n    For more information, see Error upgrading from CE to EE.\n  \n\n\nContinue your upgrade\nFrom here, your upgrade is the same as any other upgrade. Continue with Step 1. Select versions to upgrade.\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/ce-ee-upgrade-start.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-ce-ee-upgrade-html": {
      "title": "Error upgrading from CE to EE",
      "content": "Problem: Error upgrading from CE to EE\nYour upgrade from Magento Open Source (formerly Community Edition) to Magento Commerce (formerly Enterprise Edition) might fail with the following error:\n\n[2016-01-19 23:33:24 UTC] An error occurred while executing job \n\"setup:upgrade {\"command\":\"setup:upgrade\"}\": Could not complete \nsetup:upgrade {\"command\":\"setup:upgrade\"} successfully: Source \nclass \"\\Cybersource\" for \"CybersourceLogger\" generation does not exist.\n\n\nIf this error displays, resolve it as follows:\n\n\n  Log in to your Magento server as the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n  \n    After the command completes, verify your upgrade was successful:\n\n    php bin/magento --version\n    \n  \n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/ce-ee-upgrade.html"
    }
    ,
  
    "guides-v2-0-release-notes-changes-ce-changes-html": {
      "title": "Backward incompatible changes in Magento Open Source",
      "content": "This topic provides details about backward incompatible changes made in Magento Open Source 2.0.\n\nAll changes are generated automatically using the codebase of corresponding releases in magento/magento2 repository.\nThe changes are aggregated into two tables:\n\n\n  Changes in classes that contains backward incompatible changes made to the Magento classes\n  Changes in interfaces that contains backward incompatible changes made to the Magento interfaces\n\n\n\n  Temporary issue: Added docblock tags like @deprecated are defined in How Changed as Class was added or Method has been added.\n\n\n2.0.16 - 2.0.17\n\nNo changes\nNo backward incompatible changes.\n\n2.0.15 - 2.0.16\n\nNo changes\nNo backward incompatible changes.\n\n2.0.14 - 2.0.15\n\nNo changes\nNo backward incompatible changes.\n\n2.0.13 - 2.0.14\n\nNo changes\nNo backward incompatible changes.\n\n2.0.12 - 2.0.13\n\nNo changes\nNo backward incompatible changes.\n\n2.0.11 - 2.0.12\n\nNo changes\nNo backward incompatible changes.\n\n2.0.10 - 2.0.11\n\nChanges in classes\n\n\n    What changed\n    How changed\n\n    \n        Magento\\CatalogInventory\\Observer\\RefundOrderInventoryObserver\n        Class was removed.\n    \n    \n        Magento\\Ui\\DataProvider\\EavValidationRules::$validationRul\n        [protected] Property has been removed.\n    \n    \n        Magento\\GiftMessage\\Model\\Plugin\\OrderGet::aroundGet\n        [public] Method has been removed.\n    \n    \n        Magento\\GiftMessage\\Model\\Plugin\\OrderSave::aroundSave\n        [public] Method has been removed.\n    \n    \n        Magento\\Customer\\Controller\\Adminhtml\\Index\\Save::_extractData\n        [protected] Method parameter changed.\n    \n\n\n2.0.9 - 2.0.10\n\nChanges in classes\n\n\n    What changed\n    How changed\n\n    \n        Magento\\User\\Observer\\Backend\\TrackAdminNewPasswordObserver::__construct\n        [public] Method parameter changed.\n    \n    \n        Magento\\User\\Observer\\Backend\\TrackAdminNewPasswordObserver::$encryptor\n        [protected] Property has been removed.\n    \n    \n        Magento\\Sales\\Model\\Order\\InvoiceDocumentFactory\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\PaymentAdapter\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\ShipmentDocumentFactory\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\CreationArguments\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\Notifier\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\Package\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\PackageCreation\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Invoice\\CreationArguments\n        Class was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Invoice\\Notifier\n        Class was added.\n    \n\n\nChanges in interfaces\n\n\n    What changed\n    How changed\n\n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::getComment\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::getCreatedAt\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::setCreatedAt\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::setEntityId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::getIsVisibleOnFront\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::setIsVisibleOnFront\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::setComment\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::ENTITY_ID\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::IS_VISIBLE_ON_FRONT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::COMMENT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::CREATED_AT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceItemInterface::getOrderItemId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceItemInterface::getQty\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceItemInterface::setQty\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceItemInterface::setOrderItemId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::getComment\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::getCreatedAt\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::setCreatedAt\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::getEntityId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::setEntityId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::getIsVisibleOnFront\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::setIsVisibleOnFront\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::setComment\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::ENTITY_ID\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::IS_VISIBLE_ON_FRONT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::COMMENT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentInterface::CREATED_AT\n        Constant has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentItemInterface::getOrderItemId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentItemInterface::getQty\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentItemInterface::setQty\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentItemInterface::setOrderItemId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::getCarrierCode\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::getTitle\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::getTrackNumber\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::setTrackNumber\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::setTitle\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackInterface::setCarrierCode\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentInterface::getEntityId\n        [public] Method has been removed.\n    \n    \n        Magento\\Sales\\Model\\Order\\InvoiceNotifierInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\InvoiceStatisticInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\OrderStateResolverInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\PaymentAdapterInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\NotifierInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Shipment\\OrderRegistrarInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Model\\Order\\Invoice\\NotifierInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\InvoiceOrderInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\ShipOrderInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Exception\\CouldNotInvoiceExceptionInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Exception\\CouldNotShipExceptionInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Exception\\DocumentValidationExceptionInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\CommentInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\EntityInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\LineItemInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface\n        Interface was added.\n    \n    \n        Magento\\Sales\\Api\\Data\\TrackInterface\n        Interface was added.\n    \n    \n        Magento\\Quote\\Api\\GuestShipmentEstimationInterface\n        Interface was added.\n    \n    \n        Magento\\Quote\\Api\\ShipmentEstimationInterface\n        Interface was added.\n    \n\n\n2.0.8 - 2.0.9\n\nNo changes\nNo backward incompatible changes.\n\n2.0.7 - 2.0.8\n\nNo changes\nNo backward incompatible changes.\n\n2.0.6 - 2.0.7\n\nNo changes\nNo backward incompatible changes.\n\n2.0.5 - 2.0.6\n\nNo changes\nNo backward incompatible changes.\n\n2.0.4 - 2.0.5\n\nNo changes\nNo backward incompatible changes.\n\n2.0.3 - 2.0.4\n\nNo changes\nNo backward incompatible changes.\n\n2.0.2 - 2.0.3\n\nNo changes\nNo backward incompatible changes.\n\n2.0.1 - 2.0.2\n\nNo changes\nNo backward incompatible changes.\n\n2.0.0 - 2.0.1\n\nChanges in classes\n\n\n    What changed\n    How changed\n\n    \n        Magento\\User\\Observer\\Backend\\CheckAdminPasswordChangeObserver\n        Class was removed.\n    \n    \n        Magento\\PageCache\\Model\\App\\FrontController\\MessageBox\n        Class was removed.\n    \n    \n        Magento\\Framework\\Data\\Form\\FormKey::__construct\n        [public] Method parameter changed.\n    \n    \n        Magento\\Swatches\\Helper\\Data::loadFirstVariationWithSwatchImage\n        [public] Method parameter changed.\n    \n    \n        Magento\\Swatches\\Block\\Product\\Renderer\\Configurable::getAllOptionsIdsFromAttributeArray\n        [protected] Method has been removed.\n    \n    \n        Magento\\Store\\Model\\Plugin\\StoreCookie::aroundDispatch\n        [public] Method has been removed.\n    \n    \n        Magento\\CatalogUrlRewrite\\Observer\\AfterImportDataObserver::cleanOverriddenUrlKey\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogUrlRewrite\\Observer\\AfterImportDataObserver::__construct\n        [public] Method parameter changed.\n    \n    \n        Magento\\CatalogUrlRewrite\\Observer\\AfterImportDataObserver::$urlKeyAttribute\n        [protected] Property has been removed.\n    \n    \n        Magento\\CatalogUrlRewrite\\Observer\\AfterImportDataObserver::$entityStoresToCheckOverridden\n        [protected] Property has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::rebuildIndex\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getSearchableProducts\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::deleteIndex\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getProductAttributes\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getProductChildIds\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::prepareProductIndex\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getAttributeValue\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getStoreDate\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::getIterator\n        [protected] Method has been removed.\n    \n    \n        Magento\\CatalogSearch\\Model\\Indexer\\Fulltext\\Action\\Full::__construct\n        [public] Method parameter changed.\n    \n    \n        Magento\\CatalogImportExport\\Model\\Import\\Product::__construct\n        [public] Method parameter changed.\n    \n    \n        Magento\\Catalog\\Model\\Product\\Option\\Type\\File\\ValidatorFile::__construct\n        [public] Method parameter changed.\n    \n\n\n\n\n",
      "url": "/guides/v2.0/release-notes/changes/ce_changes.html"
    }
    ,
  
    "guides-v2-0-install-gde-tutorials-change-docroot-to-pub-html": {
      "title": "Modify docroot to improve security",
      "content": "If you installed Magento in Apache’s default docroot /var/www/html, the Magento file system is vulnerable because it’s accessible from a browser. This topic describes how to change the Apache docroot on an existing Magento instance to serve files from the Magento pub/ directory, which is more secure.\n\nServing files from the pub/ directory prevents site visitors from accessing the Web Setup Wizard and other sensitive areas of the Magento file system from a browser.\n\n\n  If you’re accustomed to using the Web Setup Wizard during development, be aware that you won’t be able to access it when serving files from the pub/ directory.\n\n\n\n  If you’re using nginx and the nginx.conf.sample file included in the Magento installation directory, you’re probably already serving files from the pub/ directory.\n\n  The sample configuration overrides your server’s docroot settings to serve files from Magento’s pub/ directory; assuming you’ve referenced the nginx.conf.sample in the server block that defines your site. For example, see the last line in the following configuration:\n\n  # /etc/nginx/sites-available/magento\n\nupstream fastcgi_backend {\n     server  unix:/run/php/php7.0-fpm.sock;\n }\n\n server {\n\n          listen 80;\n          server_name 192.168.33.10;\n          set $MAGE_ROOT /var/www/html/magento2ce;\n          include /var/www/html/magento2ce/nginx.conf.sample;\n}\n  \n\n\n\nBefore you begin\nTo complete this tutorial, you’ll need access to a working Magento installation running on a LAMP stack:\n\n\n  Linux\n  Apache (2.2+)\n  MySQL (5.6+)\n  PHP (5.6 or 7.0)\n  Magento (2.0+)\n\n\n\n  Refer to Prerequisites and the Installation Guide for more information.\n\n\n1. Edit your server configuration\nThe name and location of your virtual host file depends on which version of Apache you’re running. This example shows the name and location of the virtual host file on Apache v2.4.\n\n\n  Log in to your Magento server.\n  \n    Edit your virtual host file:\n\n    vim /etc/apache2/sites-available/000-default.conf\n    \n  \n  \n    Add the path to your Magento pub/ directory to the DocumentRoot directive:\n\n    &lt;VirtualHost *:80&gt;\n\n        ServerAdmin webmaster@localhost\n        DocumentRoot /var/www/html/magento2ce/pub\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        &lt;Directory \"/var/www/html\"&gt;\n                    AllowOverride all\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n    \n  \n  \n    Restart Apache:\n\n    systemctl restart apache2  \n    \n  \n\n\n2. Update your base URL\nIf you appended a directory name to your server’s hostname or IP address to create the base URL when you installed Magento (for example http://192.168.33.10/magento2), you’ll need to remove it.\n\n\n  Replace 192.168.33.10 with your server’s hostname.\n\n\n\n  \n    Log in to the Magento database:\n\n    mysql -u &lt;user&gt; -p\n    \n  \n  \n    Specify the Magento database you created when you installed Magento:\n\n    use &lt;database-name&gt;\n    \n  \n  \n    Update the base URL:\n\n    UPDATE core_config_data SET value='http://192.168.33.10' WHERE path='web/unsecure/base_url';\n    \n  \n\n\n3. Switch modes\nMagento modes, which include production and developer, are designed to improve security and make development easier. As the names suggest, you should switch to developer mode when extending or customizing Magento and switch to production mode when running Magento in a live environment.\n\nSwitching between modes is an important step in verifying that your server configuration is working properly. You can switch between modes using the Magento CLI tool:\n\n\n  Go to your Magento installation directory.\n  \n    Switch to production mode.\n\n    bin/magento deploy:mode:set production\nbin/magento cache:flush\n    \n  \n  Refresh your browser and verify that the storefront displays properly.\n  \n    Switch to developer mode.\n\n    bin/magento deploy:mode:set developer\nbin/magento cache:flush\n    \n  \n  Refresh your browser and verify that the storefront displays properly.\n\n\n4. Verify the storefront\nGo to the storefront in a web browser to verify that everything is working.\n\n\n  \n    Open a web browser and enter your server’s hostname or IP address in the address bar. For example, http://192.168.33.10.\n\n    The following figure shows a sample storefront page. If it displays as follows, your installation was a success!\n\n    \n\n    Refer to the troubleshooting section if the page displays a 404 (Not Found) or fails to load other assets like images, CSS, and JS.\n  \n  \n    Try accessing the Magento directory for the Web Setup Wizard from a browser. Append “setup/” to your server’s hostname or IP address in the address bar:\n\n    If you see a 404 or the “Access denied” message, you’ve successfully restricted access to the Magento file system.\n\n    \n  \n\n\nCongratulations! You’re finished.\n",
      "url": "/guides/v2.0/install-gde/tutorials/change-docroot-to-pub.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-address-html": {
      "title": "Add a custom shipping address renderer",
      "content": "What’s in this topic\n\nOut of the box, Magento checkout consists of two steps:\n\n\n  Shipping Information\n  Review and Payment Information\n\n\nOn the Shipping Information checkout step Magento renders all addresses previously saved by a shopper. The shopper can then select the one to be used for shipping by clicking it. The default address renderers cover the majority of use cases, but Magento provides way to register custom address renderer for a new address type.\n\nThis topic describes how to implement a custom shipping address renderer.\n\nTo implement shipping address rendering in checkout, you need to take the following steps:\n\n\n  Create the JS renderer component (shipping address renderer).\n  Create a template for the shipping address renderer.\n  Create the JS model for the shipping rate processor.\n  Create the JS model for the shipping address saving processor.\n  Create the JS component registering the processors.\n  Declare the new components in the checkout page layout..\n  Add the shipping address renderer to the “Ship-To” block (optional).\n\n\nAll the steps are described further.\n\nCreate the JS renderer component (shipping address renderer)\n\nYour shipping address renderer must be implemented as a JavaScript UI component. That is, it must be a RequireJS module, and must return a factory function, that takes a configurable object.\n\nFor the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code. Instead add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module must depend on the Magento_Checkout module. Module dependencies are specified in the module’s composer.json. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nIn your custom module directory, create the component’s .js file (shipping address renderer). It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/view/ directory.\n\nThe general view of the shipping address renderer is the following:\n\ndefine([\n    'ko',\n    'uiComponent',\n    'Magento_Checkout/js/action/select-shipping-address',\n    'Magento_Checkout/js/model/quote'\n], function(ko, Component, selectShippingAddressAction, quote) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            template: '%path to your template%'\n        },\n\n        initProperties: function () {\n            this._super();\n            this.isSelected = ko.computed(function() {\n                var isSelected = false;\n                var shippingAddress = quote.shippingAddress();\n                if (shippingAddress) {\n                    isSelected = shippingAddress.getKey() == this.address().getKey();\n                }\n                return isSelected;\n            }, this);\n\n            return this;\n        },\n\n        /** Set selected customer shipping address  */\n        selectAddress: function() {\n            selectShippingAddressAction(this.address());\n        },\n\n        /** additional logic required for this renderer  **/\n\n    });\n});\n\nCreate a template for the shipping address renderer\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/web/template/&lt;your_template&gt;.html file. The template can use Knockout JS syntax.\n\nThe template should contain a button for setting the address to be used for shipping.\n\nYou can use the code from the default template: app/code/Magento/Checkout/view/frontend/web/template/shipping-address/address-renderer/default.html.\n\nCreate the JS model for the shipping rate processor\n\nA shipping rate processor is responsible for retrieving the shipping rates available for the given shipping address.\n\nIn your custom module directory, create the component’s .js file for the processor. It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/model/ directory.\n\nHere you need to specify the URL used for calculating the shipping rates for your custom address type.\n\nThe following is a sample of the shipping rate processor code:\n\ndefine(\n    [\n        'Magento_Checkout/js/model/quote',\n        'Magento_Checkout/js/model/shipping-service',\n        'Magento_Checkout/js/model/shipping-rate-registry',\n        'magento/storage',\n        'Magento_Checkout/js/model/error-processor',\n        // additional dependencies\n    ],\n    function (quote, shippingService, rateRegistry, storage, errorProcessor, ...) {\n        'use strict';\n        return {\n            getRates: function(address) {\n                var cache = rateRegistry.get(address.getKey());\n                if (cache) {\n                    shippingService.setShippingRates(cache);\n                } else {\n                    shippingService.isLoading(true);\n                    storage.post(\n                        %URL for shipping rate estimation%,\n                        JSON.stringify({\n                            %address parameters%\n                        }),\n                        false\n                    ).done(\n                        function (result) {\n                            rateRegistry.set(address.getKey(), result);\n                            shippingService.setShippingRates(result);\n                        }\n                    ).fail(\n                        function (response) {\n                            shippingService.setShippingRates([]);\n                            errorProcessor.process(response);\n                        }\n                    ).always(\n                        function () {\n                            shippingService.isLoading(false);\n                        }\n                    );\n                }\n            }\n        };\n    }\n);\n\nCreate the JS model for the shipping address saving processor\n\nThis processor is responsible for sending the shipping address and the selected rate to the server.\n\nIn your custom module directory, create the component’s .js file for the processor. It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/model/ directory.\n\nFollowing is a sample of the shipping rate processor code:\n\ndefine(\n    [\n        'Magento_Checkout/js/model/quote',\n        'Magento_Checkout/js/model/resource-url-manager',\n        'mage/storage',\n        'Magento_Checkout/js/model/payment-service',\n        'Magento_Checkout/js/model/error-processor',\n        'Magento_Checkout/js/model/payment/method-converter'\n    ],\n    function (quote, resourceUrlManager, storage, paymentService, errorProcessor, methodConverter) {\n        'use strict';\n        return {\n            saveShippingInformation: function() {\n                var shippingAddress = {},\n                    payload;\n\n                shippingAddress.extension_attributes = {\n                    %address extension attributes%\n                };\n\n                payload = {\n                    addressInformation: {\n                        shipping_address: shippingAddress,\n                        shipping_method_code: quote.shippingMethod().method_code,\n                        shipping_carrier_code: quote.shippingMethod().carrier_code\n                    }\n                };\n\n                return storage.post(\n                    resourceUrlManager.getUrlForSetShippingInformation(quote),\n                    JSON.stringify(payload)\n                ).done(\n                    function (response) {\n                        paymentService.setPaymentMethods(methodConverter(response.payment_methods));\n                        quote.setTotals(response.totals)\n                    }\n                ).fail(\n                    function (response) {\n                        errorProcessor.process(response);\n                    }\n                );\n            }\n        }\n    }\n);\n\nCreate the JS component registering the processors\n\nIn your custom module directory, create the .js UI component that registers the rate processor and the saving processor. It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/view/ directory.\n\nThe file content must be similar to the following:\n\ndefine(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/shipping-rate-service',\n        %custom shipping rate processor%,\n        'Magento_Checkout/js/model/shipping-save-processor',\n        %custom shipping save processor%\n    ],\n    function (\n        Component,\n        shippingRateService,\n        customShippingRateProcessor,\n        shippingSaveProcessor,\n        customShippingSaveProcessor\n    ) {\n        'use strict';\n\n        /** Register rate processor */\n        shippingRateService.registerProcessor(%address type%, customShippingRateProcessor);\n\n        /** Register save shipping address processor */\n        shippingSaveProcessor.registerProcessor(%address type%, custormShippingSaveProcessor);\n\n        /** Add view logic here if needed */\n        return Component.extend({});\n    }\n);\n\nDeclare the new components in the checkout page layout\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file. In this file, add the following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"shipping-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;!-- Declare the component that registers the shipping address and rates processors --&gt;\n                                                &lt;item name=\"custom-address-provider\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"component\" xsi:type=\"string\"&gt;%component that registers address/rate processors%&lt;/item&gt;\n                                                &lt;/item&gt;\n                                                &lt;!-- Declare the component that renders the shipping address --&gt;\n                                                &lt;item name=\"shippingAddress\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;item name=\"rendererTemplates\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"%address type%\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"component\" xsi:type=\"string\"&gt;%address renderer JS component%&lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                           &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nThe address_type you need to specify in the layout, is the value you set in the JS model of your custom address type.\n\nAdd the shipping address renderer to the “Ship-To” block (optional)\n\nOn the Review and Payment Information step of checkout, the shipping address is displayed in the Ship-To section for customer to make sure everything is set correctly.\n\nIf you want your custom address type to be displayed here as well, you need to create an .html template for rendering it, and declare in the corresponding location in layout.\n\nAdd template for displaying the address in the Ship-To section\n\nIn your custom module directory create a new &lt;your_module_dir&gt;/view/frontend/web/template/&lt;your_template&gt;.html file. The template can use Knockout JS syntax.\n\nYou can use the code from the default template: app/code/Magento/Checkout/view/frontend/web/template/shipping-information/address-renderer/default.html.\n\nDeclare the address to be used in the Ship-To section in layout\n\nIn your &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file add the following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceContainer name=\"content\"&gt;\n            &lt;block class=\"Magento\\Checkout\\Block\\Onepage\" name=\"checkout.root\" template=\"onepage.phtml\" cacheable=\"false\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"sidebar\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"shipping-information\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"ship-to\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"rendererTemplates\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"%address type%\" xsi:type=\"array\"&gt;\n                                                        &lt;item name=\"component\" xsi:type=\"string\"&gt;uiComponent&lt;/item&gt;\n                                                            &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"template\" xsi:type=\"string\"&gt;%custom template%&lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/argument&gt;\n                &lt;/arguments&gt;\n            &lt;/block&gt;\n        &lt;/referenceContainer&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_address.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-carrier-html": {
      "title": "Add custom shipping carrier validations",
      "content": "What's in this topic\nThis topic describes how to add shipping address validations for a custom shipping carrier to the Magento checkout. This is an essential part of the bigger task of adding a custom shipping method to your Magento store.\n\nOverview\n\nTo add new shipping carrier validations to the Magento checkout, do the following:\n\n\n  Create validation rules.\n  Create validator.\n  Register validator and rules in the validators pool.\n  Add the the validators and rules to the checkout layout.\n\n\nMore details about each step follow.\n\n\nDuring checkout, when a customer fills the shipping address form, shipping carrier validations trigger the shipping rates request. That is why adding shipping carrier validations for your custom shipping method is mandatory.\n\n\nCreate validation rules\nShipping carrier validation rules declare which fields of the shipping address are required for the corresponding shipping method to be available. The validation itself is performed by the validator.\n\nDuring checkout, if the shipping address fields declared in the rules are filled, the further validation of fields’ values (for example, whether a carrier is available for the specified country) is carried on the server side.\n\nFor the sake of compatibility, upgradability, and easy maintenance, do not edit the default Magento code, add your customization in a separate module. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nIn your &lt;your_module_dir&gt;/view/frontend/web/js/model directory, create a .js file implementing the validation rules.\n\nThe script must implement the getRules() method.\n\nFor example, the FedEx shipping method requires only two fields of the shipping address to be filled: Country and Zip Code. This is how the validation rules for FedEx look:\n\n&lt;Magento_Fedex_dir&gt;/view/frontend/web/js/model/shipping-rates-validation-rules.js\n\n\ndefine(\n    [],\n    function () {\n        'use strict';\n        return {\n            getRules: function() {\n                return {\n                    'postcode': {\n                        'required': true\n                    },\n                    'country_id': {\n                        'required': true\n                    }\n                };\n            }\n        };\n    }\n)\n\nTriggering the shipping rates request correlates directly with the fields you specify in the validation rules: the request is triggered once all these fields are populated and pass the validation.\n\nCreate validator\n\nCreate the validator .js script that checks if the fields defined by the validation rules are filled. The script must be located in the &lt;your_module_dir&gt;/view/frontend/web/js/model directory.\n\nA sample validator script follows:\n\ndefine(\n    [\n        'jquery',\n        'mageUtils',\n\n        './shipping-rates-validation-rules',\n        'mage/translate'\n    ],\n    function ($, utils, validationRules, $t) {\n        'use strict';\n        return {\n            validationErrors: [],\n            validate: function(address) {\n                var self = this;\n                this.validationErrors = [];\n                $.each(validationRules.getRules(), function(field, rule) {\n                    if (rule.required &amp;&amp; utils.isEmpty(address[field])) {\n                        var message = $t('Field ') + field + $t(' is required.');\n                        self.validationErrors.push(message);\n                    }\n                });\n                return !Boolean(this.validationErrors.length);\n            }\n        };\n    }\n);\n\nYou can use this sample for your validator, but you need to specify your validation rules script instead of ./shipping-rates-validation-rules in the list of used modules.\n\nRegister validator and rules in the validators pool\n\nYour custom validator must be added to the pool of validators. To do this, in the &lt;your_module_dir&gt;/view/frontend/web/js/view directory create a new &lt;your-validation&gt;.js file with the following content (having replaced the &lt;your_validator&gt; and &lt;your_validation_rules&gt; with your values):\n\ndefine(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/shipping-rates-validator',\n        'Magento_Checkout/js/model/shipping-rates-validation-rules',\n        '../model/&lt;your_validator&gt;',\n        '../model/&lt;your_validation_rules&gt;'\n    ],\n    function (\n        Component,\n        defaultShippingRatesValidator,\n        defaultShippingRatesValidationRules,\n        shippingRatesValidator,\n        shippingRatesValidationRules\n    ) {\n        'use strict';\n        defaultShippingRatesValidator.registerValidator('carrierName', shippingRatesValidator);\n        defaultShippingRatesValidationRules.registerRules('carrierName', shippingRatesValidationRules);\n        return Component;\n    }\n);\n\nAdd the validation to the checkout layout\n\nThe last step is specifying the script you created on the previous step in the checkout page layout.\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file.\nIn this file, add the following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"shipping-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"step-config\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;item name=\"shipping-rates-validation\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"&lt;your-validation-name&gt;\" xsi:type=\"array\"&gt;\n                                                                    &lt;item name=\"component\" xsi:type=\"string\"&gt;%your_module%/js/view/%your-validation%&lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_carrier.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-custom-checkbox-html": {
      "title": "Add custom fields that influence other Checkout fields",
      "content": "This topic describes how to add a custom field that influences other fields on the checkout page.\n\nLet’s consider a case where you need to add a check box whose state (selected or cleared) changes the state of other fields: when the check box is selected, the Shipping Address fields get prepopulated with a certain address. To implement such a check box, take the following steps:\n\n\n  Create a plugin for the process method of the &lt;Magento_Checkout_module_dir&gt;/Block/Checkout/LayoutProcessor.php class.\n  Declare the plugin in your module’s di.xml.\n  Create a JS component for the check box with custom logic.\n\n\nCreate a plugin for the LayoutProcessor’s process method\n\nIn your custom module directory, create the following new file: &lt;your_module_dir&gt;/Block/Checkout/SomeProcessor.php. In this file, add the following code sample. This is a plugin that adds a check box, makes the street labels trackable, and assigns dependencies to the check box.\n\nnamespace Magento\\Checkout\\Block\\Checkout;\n\nclass SomeProcessor\n{\n    /**\n     * Checkout LayoutProcessor after process plugin.\n     *\n     * @param \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor $processor\n     * @param array $jsLayout\n     * @return array\n     */\n    public function afterProcess(\\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor $processor, $jsLayout)\n    {\n        $shippingConfiguration = &amp;$jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']\n            ['children']['shippingAddress']['children']['shipping-address-fieldset']['children'];\n        $billingConfiguration = &amp;$jsLayout['components']['checkout']['children']['steps']['children']['billing-step']\n        ['children']['payment']['children']['payments-list']['children'];\n\n        //Checks if shipping step available.\n        if (isset($shippingConfiguration)) {\n            $shippingConfiguration = $this-&gt;processAddress(\n                $shippingConfiguration,\n                'shippingAddress',\n                [\n                    'checkoutProvider',\n                    'checkout.steps.shipping-step.shippingAddress.shipping-address-fieldset.street',\n                    'checkout.steps.shipping-step.shippingAddress.shipping-address-fieldset.city',\n                    'checkout.steps.shipping-step.shippingAddress.shipping-address-fieldset.country_id'\n                ]\n            );\n        }\n\n        //Checks if billing step available.\n        if (isset($billingConfiguration)) {\n            //Iterate over billing forms.\n            foreach($billingConfiguration as $key =&gt; &amp;$billingForm) {\n                //Exclude not billing forms\n                if (!strpos($key, '-form')) {\n                    continue;\n                }\n\n                $billingForm['children']['form-fields']['children'] = $this-&gt;processAddress(\n                    $billingForm['children']['form-fields']['children'],\n                    $billingForm['dataScopePrefix'],\n                    [\n                        'checkoutProvider',\n                        'checkout.steps.billing-step.payment.payments-list.' . $key . '.form-fields.street',\n                        'checkout.steps.billing-step.payment.payments-list.' . $key . '.form-fields.city',\n                        'checkout.steps.billing-step.payment.payments-list.' . $key . '.form-fields.country_id'\n                    ]\n                );\n            }\n        }\n\n        return $jsLayout;\n    }\n\n    /**\n     * Process provided address to contains checkbox and have trackable address fields.\n     *\n     * @param $addressFieldset - Address fieldset config.\n     * @param $dataScope - data scope\n     * @param $deps - list of dependencies\n     * @return array\n     */\n    private function processAddress($addressFieldset, $dataScope, $deps)\n    {\n        //Creates checkbox.\n        $addressFieldset['custom_checkbox'] = [\n            'component' =&gt; 'Magento_Checkout/js/single-checkbox',\n            'config' =&gt; [\n                'customScope' =&gt; $dataScope,\n                'template' =&gt; 'ui/form/field',\n                'prefer' =&gt; 'checkbox'\n            ],\n            'dataScope' =&gt; $dataScope . '.custom_checkbox',\n            'deps' =&gt; $deps,\n            'label' =&gt; __('Army Address'),\n            'provider' =&gt; 'checkoutProvider',\n            'visible' =&gt; true,\n            'initialValue' =&gt; false,\n            'sortOrder' =&gt; 10,\n            'valueMap' =&gt; [\n                'true' =&gt; true,\n                'false' =&gt; false\n            ]\n        ];\n\n        //Makes each address field label trackable.\n        if (isset($addressFieldset['street']['children'])) {\n            foreach($addressFieldset['street']['children'] as $key =&gt; $street) {\n                $street['tracks']['label'] = true;\n                //Remove .additional class. Can be removed, but style fix provided instead.\n                $street['additionalClasses'] = '';\n                $addressFieldset['street']['children'][$key] = $street;\n            }\n        }\n\n        return $addressFieldset;\n    }\n}\n\nDeclare plugin in di.xml\n\nIn &lt;your_module_dir&gt;/etc/frontend/di.xml, declare the plugin you created on the previous step. The plugin name is arbitrary, in our example it’s ProcessAddressConfiguration:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Checkout\\Block\\Checkout\\LayoutProcessor\"&gt;\n        &lt;plugin name=\"ProcessAddressConfiguration\" type=\"Magento\\Checkout\\Block\\Checkout\\SomeProcessor\"/&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nCreate a JS component for the check box\n\nIn your custom module directory, create the following new file: &lt;your_module_dir&gt;/view/frontend/web/js/single-checkbox.js. In this file, add the following code. This is  a JS component that extends Magento_Ui/js/form/element/single-checkbox.js. The onCheckedChanged method calls the methods that update street labels, change the city and country values, and disable these fields:\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox',\n    'mage/translate'\n], function (AbstractField, $t) {\n    'use strict';\n\n    return AbstractField.extend({\n        defaults: {\n            streetLabels: [$t('Company / Section / Unit'), $t('Post Sector Type'), $t('Post Sector')],\n            modules: {\n                street: '${ $.parentName }.street',\n                city: '${ $.parentName }.city',\n                country: '${ $.parentName }.country_id'\n            }\n        },\n\n        updateStreetLabels: function () {\n            if (this.value()) {\n                this.street().elems.each(function (street, key) {\n                    this.street().elems()[key].set('label', this.streetLabels[key]);\n                }.bind(this));\n            } else {\n                this.street().elems.each(function (street, key) {\n                    this.street().elems()[key].set('label', '');\n                }.bind(this));\n            }\n        },\n\n        updateCity: function () {\n            if (this.value()) {\n                this.city().value('Kyiv');\n                this.city().disabled(true);\n            } else {\n                this.city().value('');\n                this.city().disabled(false);\n            }\n        },\n\n        updateCountry: function () {\n            if (this.value()) {\n                this.country().value('UA');\n                this.country().disabled(true);\n            } else {\n                this.country().value('');\n                this.country().disabled(false);\n            }\n        },\n\n        onCheckedChanged: function () {\n            this._super();\n            this.updateStreetLabels();\n            this.updateCity();\n            this.updateCountry();\n        }\n    });\n});\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_custom_checkbox.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-customize-html": {
      "title": "Customize the view of a checkout step",
      "content": " What's in this topic\n\nThis topic contains the basic information about how to customize the view of an existing checkout step. In the Magento application, checkout is implemented using UI components. You can customize each step by changing the JavaScript implementation or template for a component, adding, removing or disabling a component.\n\nChange the component’s .js implementation and template\n\nTo change the .js implementation and template used for components rendering, you need to declare the new files in the checkout page layout. To do this, take the following steps:\n\n\n  In your custom module directory, create the following new file: &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml. (For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module.)\n  In this file, add the following:\n\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                        &lt;!-- Your customization will be here --&gt;\n                        ...\n                    &lt;/argument&gt;\n                &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\n\n  \n    In the &lt;Magento_Checkout_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file, find the component that you need to customize. Copy the corresponding node and all parent nodes up to &lt;argument&gt;. There is no need to leave all the attributes and values of parente nodes, as you are not going to change them.\n  \n  \n    Change the path to the component’s .js file, template or any other property.\n  \n\n\nExample:\n\nThe Magento_Shipping module adds a component rendered as a link to the Shipping Policy info to the Shipping step:\n\n&lt;Magento_Shipping_module_dir&gt;/view/frontend/layout/checkout_index_index.xml looks like following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"shipping-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"shippingAddress\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;item name=\"before-shipping-method-form\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"shipping_policy\" xsi:type=\"array\"&gt;\n                                                                    &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Shipping/js/view/checkout/shipping/shipping-policy&lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nAdd the new component to the checkout page layout\n\nAny UI component is added in the checkout_index_index.xml similar to the way a checkout step component is added.\n\nMake sure that you declare a component so that it is rendered correctly by the parent component. If a parent component is a general UI component (referenced by the uiComponent alias), its child components are rendered without any conditions. But if a parent component is a an extension of a general UI components, then children rendering might be restricted in certain way. For example a component can render only children from a certain displayArea.\n\nDisable a component\nTo disable the component in your checkout_index_index.xml use the following instructions:\n\n&lt;item name=\"%the_component_to_be_disabled%\" xsi:type=\"array\"&gt;\n    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n        &lt;item name=\"componentDisabled\" xsi:type=\"boolean\"&gt;true&lt;/item&gt;\n    &lt;/item&gt;\n&lt;/item&gt;\n\nRemove a component\n\nTo remove a component from layout rendering, you need to create a plugin for the \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor::process method. In your plugin, implement the around method removing the corresponding layout nodes at run-time.\n\nThe following sample is an example of the around method removing a component:\n\nunset($jsLayout['components']['checkout']['children']['steps'][%path_to_target_node%]); //%path_to_target_node% is the path to the component's node in checkout_index_index.xml\nreturn $jsLayout;\n\n(If you want to use this sample in your code, replace the %path_to_target_node% placeholder with real value.)\n\n\n  Disable vs remove a component \nIf you disable a component, it is loaded but not rendered. If you remove a component, it is not loaded.\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_customize.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-edit-form-html": {
      "title": "Add a custom template for a form field on Checkout page",
      "content": " What's in this topic\nThis topic describes how to replace the HTML template for a form field on the Checkout page. You might need to replace the template in order to add elements displayed with the field, change the CSS class assigned to it, add attributes and so on.\n\n Overview \n\nThe forms used on the Checkout page are implemented using Knockout JS.\n\nTo change the template of the form field, do the following:\n\n\n  Create a custom HTML template for knockout JS script that will render the form field.\n  Specify the new template in the Checkout page layout.\n\n\nThere are more details about each step in the following sections.\n\nPrerequisites\n\nSet Magento to the developer mode while you perform all customizations and debugging.\n\nFor the sake of compatibility, upgradability, and easy maintenance, do not edit the default Magento code. Instead, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module.\n\nDo not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nImplement the HTML template for the field\n\nCreate a new &lt;your_template&gt;.html template in the following directory: &lt;your_module_dir&gt;/view/frontend/web/template/form/element\n\nExample of a field template:\n\n&lt;!-- input field element and corresponding bindings --&gt;\n&lt;input class=\"input-text\" type=\"text\" data-bind=\"\n    value: value,\n    valueUpdate: 'keyup',\n    hasFocus: focused,\n    attr: {\n        name: inputName,\n        placeholder: placeholder,\n        'aria-describedby': noticeId,\n        id: uid,\n        disabled: disabled\n    }\" /&gt;\n&lt;!-- additional content --&gt;\n&lt;img src=\"%path_to_image%\" alt=\"image_de\"/&gt;\n\n\nThe original templates of all form field types are located in the app/code/Magento/Ui/view/base/web/templates/form/element directory.\n\n\nSpecify the new template in layout\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file.\nIn this file, add content similar to the following:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"shipping-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"shippingAddress\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;!-- The name of the form the field belongs to --&gt;\n                                                        &lt;item name=\"shipping-address-fieldset\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;!-- the field you are customizing --&gt;\n                                                                &lt;item name=\"telephone\" xsi:type=\"array\"&gt;\n                                                                    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                                                                        &lt;!-- Assigning a new template --&gt;\n                                                                        &lt;item name=\"elementTmpl\" xsi:type=\"string\"&gt;%Vendor_Module%/form/element/%your_template%&lt;/item&gt;\n                                                                    &lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nModifying the custom template after it was applied\n\nIf you modify your custom .html template after it was applied on the store pages, the changes will not apply until you do the following:\n\n\n  Delete all files in the pub/static/frontend and var/view_preprocessed directories.\n  Reload the pages.\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_edit_form.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-form-html": {
      "title": "Add a new input form to checkout",
      "content": "What’s in this topic\n\nThis topic describes how to add a custom input form (implemented as a UI component) to the Checkout page.\n\nMost of the elements, including the default forms on the Checkout page are implemented as UI components. And we recommend your custom form to be a UI component, extending the default Magento_Ui/js/form/form component.\n\nOverview\n\nMagento provides the ability to add a custom form to any of the checkout steps: Shipping Information, Review and Payment Information, or custom. In order to add a custom form that is a UI component, take the following steps:\n\n\n  Create the JS implementation of the form UI component.\n  Create the knockout.js HTML template for rendering the form.\n  Declare the form in the checkout page layout.\n\n\nPrerequisites\n\nSet Magento to developer mode while you perform all customizations and debugging.\n\nFor the sake of compatibility, upgradability, and easy maintenance, do not edit the default Magento code. Instead, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nCreate the JS implementation of the form UI component\n\nIn your &lt;your_module_dir&gt;/view/frontend/web/js/view/ directory, create a .js file implementing the form.\n\nExample of extending the default form component:\n\n/*global define*/\ndefine([\n    'Magento_Ui/js/form/form'\n], function(Component) {\n    'use strict';\n    return Component.extend({\n        initialize: function () {\n            this._super();\n            // component initialization logic\n            return this;\n        },\n\n        /**\n         * Form submit handler\n         *\n         * This method can have any name.\n         */\n        onSubmit: function() {\n            // trigger form validation\n            this.source.set('params.invalid', false);\n            this.source.trigger('customCheckoutForm.data.validate');\n\n            // verify that form data is valid\n            if (!this.source.get('params.invalid')) {\n                // data is retrieved from data provider by value of the customScope property\n                var formData = this.source.get('customCheckoutForm');\n                // do something with form data\n                console.dir(formData);\n            }\n        }\n    });\n});\n\nCreate the HTML template\nAdd the knockout.js HTML template for the form component under the &lt;your_module_dir&gt;/view/frontend/web/template directory.\n\nExample:\n\n&lt;div&gt;\n    &lt;form id=\"custom-checkout-form\" class=\"form\" data-bind=\"attr: {'data-hasrequired': $t('* Required Fields')}\"&gt;\n        &lt;fieldset class=\"fieldset\"&gt;\n            &lt;legend data-bind=\"i18n: 'Custom Checkout Form'\"&gt;&lt;/legend&gt;\n            &lt;!-- ko foreach: getRegion('custom-checkout-form-fields') --&gt;\n            &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;\n            &lt;!--/ko--&gt;\n        &lt;/fieldset&gt;\n        &lt;button type=\"reset\"&gt;\n            &lt;span data-bind=\"i18n: 'Reset'\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;button type=\"button\" data-bind=\"click: onSubmit\" class=\"action\"&gt;\n            &lt;span data-bind=\"i18n: 'Submit'\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\nModifying the custom template after it was applied\n\nIf you modify your custom .html template after it was applied on the store pages, the changes will not apply until you do the following:\n\n\n  Delete all files in the pub/static/frontend and var/view_preprocessing directories.\n  Reload the pages.\n\n\nDeclare the form in the checkout page layout\n\nCertain default checkout templates declare regions where additional content can be inserted. You can add your custom form in any of these regions. These regions are provided with corresponding comments in the default Checkout page layout file &lt;Checkout_module_dir&gt;/view/frontend/layout/checkout_index_index.xml.\n\nAlso you locate the regions in the .html templates of the blocks used in this layout file.\nFor example, the shipping JS component (see &lt;Magento_Checkout_module_dir&gt;/view/frontend/web/template/shipping.html) provides the before-form region and corresponding UI container.\n\nAny content added here is rendered before the Shipping Address form on the Shipping Information step. To add content to this region, create a checkout_index_index.xml layout update in the &lt;your_module_dir&gt;/view/frontend/layout/. It should be similar to the following:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"shipping-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"shippingAddress\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;item name=\"before-form\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;!-- Your form declaration here --&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nStatic forms\n\nThe term static refers to the forms where all the fields are already known/predefined and do not depend on any settings in the Admin. (compare to dynamic forms)\n\nThe fields of static forms are not generated dynamically, so they can be defined in a layout.\n\nThe following code sample shows configuration of the form that contains four fields: text input, select, checkbox, and date. This form uses checkout data provider (checkoutProvider) that is introduced in the Magento_Checkout module:\n\n&lt;item name=\"custom-checkout-form-container\" xsi:type=\"array\"&gt;\n    &lt;item name=\"component\" xsi:type=\"string\"&gt;%your_module_dir%/js/view/custom-checkout-form&lt;/item&gt;\n    &lt;item name=\"provider\" xsi:type=\"string\"&gt;checkoutProvider&lt;/item&gt;\n    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n        &lt;item name=\"template\" xsi:type=\"string\"&gt;%your_module_dir%/custom-checkout-form&lt;/item&gt;\n    &lt;/item&gt;\n    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n        &lt;item name=\"custom-checkout-form-fieldset\" xsi:type=\"array\"&gt;\n            &lt;!-- uiComponent is used as a wrapper for form fields (its template will render all children as a list) --&gt;\n            &lt;item name=\"component\" xsi:type=\"string\"&gt;uiComponent&lt;/item&gt;\n            &lt;!-- the following display area is used in template (see below) --&gt;\n            &lt;item name=\"displayArea\" xsi:type=\"string\"&gt;custom-checkout-form-fields&lt;/item&gt;\n            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                &lt;item name=\"text_field\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Ui/js/form/element/abstract&lt;/item&gt;\n                    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                        &lt;!-- customScope is used to group elements within a single form (e.g. they can be validated separately) --&gt;\n                        &lt;item name=\"customScope\" xsi:type=\"string\"&gt;customCheckoutForm&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;ui/form/field&lt;/item&gt;\n                        &lt;item name=\"elementTmpl\" xsi:type=\"string\"&gt;ui/form/element/input&lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;item name=\"provider\" xsi:type=\"string\"&gt;checkoutProvider&lt;/item&gt;\n                    &lt;item name=\"dataScope\" xsi:type=\"string\"&gt;customCheckoutForm.text_field&lt;/item&gt;\n                    &lt;item name=\"label\" xsi:type=\"string\"&gt;Text Field&lt;/item&gt;\n                    &lt;item name=\"sortOrder\" xsi:type=\"string\"&gt;1&lt;/item&gt;\n                    &lt;item name=\"validation\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"required-entry\" xsi:type=\"string\"&gt;true&lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n                &lt;item name=\"checkbox_field\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Ui/js/form/element/boolean&lt;/item&gt;\n                    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                        &lt;!--customScope is used to group elements within a single form (e.g. they can be validated separately)--&gt;\n                        &lt;item name=\"customScope\" xsi:type=\"string\"&gt;customCheckoutForm&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;ui/form/field&lt;/item&gt;\n                        &lt;item name=\"elementTmpl\" xsi:type=\"string\"&gt;ui/form/element/checkbox&lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;item name=\"provider\" xsi:type=\"string\"&gt;checkoutProvider&lt;/item&gt;\n                    &lt;item name=\"dataScope\" xsi:type=\"string\"&gt;customCheckoutForm.checkbox_field&lt;/item&gt;\n                    &lt;item name=\"label\" xsi:type=\"string\"&gt;Checkbox Field&lt;/item&gt;\n                    &lt;item name=\"sortOrder\" xsi:type=\"string\"&gt;3&lt;/item&gt;\n                &lt;/item&gt;\n                &lt;item name=\"select_field\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Ui/js/form/element/select&lt;/item&gt;\n                    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                        &lt;!--customScope is used to group elements within a single form (e.g. they can be validated separately)--&gt;\n                        &lt;item name=\"customScope\" xsi:type=\"string\"&gt;customCheckoutForm&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;ui/form/field&lt;/item&gt;\n                        &lt;item name=\"elementTmpl\" xsi:type=\"string\"&gt;ui/form/element/select&lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;item name=\"options\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"0\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"label\" xsi:type=\"string\"&gt;Please select value&lt;/item&gt;\n                            &lt;item name=\"value\" xsi:type=\"string\"&gt;&lt;/item&gt;\n                        &lt;/item&gt;\n                        &lt;item name=\"1\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"label\" xsi:type=\"string\"&gt;Value 1&lt;/item&gt;\n                            &lt;item name=\"value\" xsi:type=\"string\"&gt;value_1&lt;/item&gt;\n                        &lt;/item&gt;\n                        &lt;item name=\"2\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"label\" xsi:type=\"string\"&gt;Value 2&lt;/item&gt;\n                            &lt;item name=\"value\" xsi:type=\"string\"&gt;value_2&lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;!-- value element allows to specify default value of the form field --&gt;\n                    &lt;item name=\"value\" xsi:type=\"string\"&gt;value_2&lt;/item&gt;\n                    &lt;item name=\"provider\" xsi:type=\"string\"&gt;checkoutProvider&lt;/item&gt;\n                    &lt;item name=\"dataScope\" xsi:type=\"string\"&gt;customCheckoutForm.select_field&lt;/item&gt;\n                    &lt;item name=\"label\" xsi:type=\"string\"&gt;Select Field&lt;/item&gt;\n                    &lt;item name=\"sortOrder\" xsi:type=\"string\"&gt;2&lt;/item&gt;\n                &lt;/item&gt;\n                &lt;item name=\"date_field\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Ui/js/form/element/date&lt;/item&gt;\n                    &lt;item name=\"config\" xsi:type=\"array\"&gt;\n                        &lt;!--customScope is used to group elements within a single form (e.g. they can be validated separately)--&gt;\n                        &lt;item name=\"customScope\" xsi:type=\"string\"&gt;customCheckoutForm&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;ui/form/field&lt;/item&gt;\n                        &lt;item name=\"elementTmpl\" xsi:type=\"string\"&gt;ui/form/element/date&lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;item name=\"provider\" xsi:type=\"string\"&gt;checkoutProvider&lt;/item&gt;\n                    &lt;item name=\"dataScope\" xsi:type=\"string\"&gt;customCheckoutForm.date_field&lt;/item&gt;\n                    &lt;item name=\"label\" xsi:type=\"string\"&gt;Date Field&lt;/item&gt;\n                    &lt;item name=\"validation\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"required-entry\" xsi:type=\"string\"&gt;true&lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/item&gt;\n        &lt;/item&gt;\n    &lt;/item&gt;\n&lt;/item&gt;\n\nDynamically defined forms\n\nDynamically defined, or dynamic, forms are the forms where the set or type of fields can change. For example, the fields displayed on the checkout form depend on the Admin settings: depending on the Admin &gt; Stores &gt; Configuration &gt; Customers &gt; Customer Configuration &gt; Name and Address Options\nFor such forms, you must implement a plugin for the \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor::process method.\nA plugin can add custom fields definitions to layout at run-time. The format of the field definition is the same as for fields defined in layout.\n\nFor example:\n\n$textField = [\n    'component' =&gt; 'Magento_Ui/js/form/element/abstract',\n    'config' =&gt; [\n        'customScope' =&gt; 'customCheckoutForm',\n        'template' =&gt; 'ui/form/field',\n        'elementTmpl' =&gt; 'ui/form/element/input',\n    ],\n    'provider' =&gt; 'checkoutProvider',\n    'dataScope' =&gt; 'customCheckoutForm.text_field',\n    'label' =&gt; 'Text Field',\n    'sortOrder' =&gt; 1,\n    'validation' =&gt; [\n        'required-entry' =&gt; true,\n    ],\n];\n\nIllustration\nIf you use the code samples provided as examples in this topic, this would result in adding the following form to the Shipping Information step:\n\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_form.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-new-field-html": {
      "title": "Add a new field in address form",
      "content": "This topic describes how to add new fields to default checkout forms: shipping address or billing address form. For illustration we use a case of adding a field to the shipping address form.\n\nAdd the field to layout and handle its value on the client side\n\nTo add your custom field to the checkout address form and access its value on the client side,\ntake the steps described further.\n\nStep 1\n\nAdd the field to layout. Both shipping address and billing address forms are generated dynamically. So to modify its layout, you need to create a plugin for the \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessor::process method.\n\nFollowing is a sample logic for a plugin method adding a field named Custom Attribute to the shipping address form:\n\n&lt;?php\n$customAttributeCode = 'custom_field';\n$customField = [\n    'component' =&gt; 'Magento_Ui/js/form/element/abstract',\n    'config' =&gt; [\n        // customScope is used to group elements within a single form (e.g. they can be validated separately)\n        'customScope' =&gt; 'shippingAddress.custom_attributes',\n        'customEntry' =&gt; null,\n        'template' =&gt; 'ui/form/field',\n        'elementTmpl' =&gt; 'ui/form/element/input',\n        'tooltip' =&gt; [\n            'description' =&gt; 'this is what the field is for',\n        ],\n    ],\n    'dataScope' =&gt; 'shippingAddress.custom_attributes' . '.' . $customAttributeCode,\n    'label' =&gt; 'Custom Attribute',\n    'provider' =&gt; 'checkoutProvider',\n    'sortOrder' =&gt; 0,\n    'validation' =&gt; [\n       'required-entry' =&gt; true\n    ],\n    'options' =&gt; [],\n    'filterBy' =&gt; null,\n    'customEntry' =&gt; null,\n    'visible' =&gt; true,\n];\n\n$jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']['shippingAddress']['children']['shipping-address-fieldset']['children'][$customAttributeCode] = $customField;\n\nThis way, your field is added to the customAttributes property of 'Magento_Checkout/js/model/new-customer-address.js, a JS object that lists all predefined address attributes and matches the corresponding server-side interface \\Magento\\Quote\\Api\\Data\\AddressInterface. The customAttributes property was designed to contain custom EAV address attributes and is related to \\Magento\\Quote\\Model\\Quote\\Address\\CustomAttributeListInterface::getAttributes method. The code above will automatically handle local storage persistence on frontend.\n\nOptionally, instead of adding a plugin, you can use dependency injection (DI). For this, in &lt;your_module_dir&gt;/Block/Checkout/ directory, add the LayoutProcessor class adding the custom field to the address form. The class must implement the \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessorInterface interface. You can use the code sample above as an example of the \\Magento\\Checkout\\Block\\Checkout\\LayoutProcessorInterface::process() method implementation. To add your LayoutProcessor class the corresponding pool of processors, in the &lt;your_module_dir&gt;/etc/frontend/di.xml file specify the following:\n\n&lt;type name=\"Magento\\Checkout\\Block\\Onepage\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"layoutProcessors\" xsi:type=\"array\"&gt;\n                &lt;item name=\"%unique_name%\" xsi:type=\"object\"&gt;%path\\to\\your\\LayoutProcessor%&lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n&lt;/type&gt;\n\nwhere %unique_name% and %path\\to\\your\\LayoutProcessor% must be replaced by your real values.\n\nStep 2\n\nAdd a JS mixin to change the behavior of the component responsible for the data submission to the server side. For this, in your custom module, define a mixin as a separate AMD module that returns a callback function. Add the mixin file anywhere in the &lt;your_module_dir&gt;/view/frontend/web directory. There are no strict requirements for the mixin file naming.\n\nFollowing is a sample mixin modifying the behavior of Magento_Checkout/js/action/set-shipping-information (this component is responsible for data submission between shipping and billing checkout steps):\n\n/*jshint browser:true jquery:true*/\n/*global alert*/\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote'\n], function ($, wrapper, quote) {\n    'use strict';\n\n    return function (setShippingInformationAction) {\n\n        return wrapper.wrap(setShippingInformationAction, function (originalAction) {\n            var shippingAddress = quote.shippingAddress();\n            if (shippingAddress['extension_attributes'] === undefined) {\n                shippingAddress['extension_attributes'] = {};\n            }\n\n            shippingAddress['extension_attributes']['custom_field'] = shippingAddress.customAttributes['custom_field'];\n            // pass execution to original action ('Magento_Checkout/js/action/set-shipping-information')\n            return originalAction();\n        });\n    };\n});\n\nWhen adding a field to the billing address form, you need to modify the behavior of one of the following components: Magento_Checkout/js/action/place-order or Magento_Checkout/js/action/set-payment-information, depending on when do you need the custom field valued to be passed to the server side. For example of a mixin, modifying one of these components, see the place-order-mixin.js in the Magento_CheckoutAgreements module.\n\nStep 3\n\nTell Magento to load your mixin for the corresponding JS component. For this, in the &lt;YourModule_dir&gt;/view/frontend/ directory, add the requirejs-config.js.\n\nFollowing is a sample of such requirejs-config.js for the sample mixin added earlier:\n\nvar config = {\n    config: {\n        mixins: {\n            'Magento_Checkout/js/action/set-shipping-information': {\n                '&lt;YourNamespace_YourModule&gt;/js/action/set-shipping-information-mixin': true\n            }\n        }\n    }\n};\n\nStep 4\n\nTo add the field to the address model on the server side, add the extension_attributes.xml file in the &lt;YourModule_dir&gt;/etc/ directory.\n\nFollowing is a sample extension_attributes.xml:\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Api/etc/extension_attributes.xsd\"&gt;\n    &lt;extension_attributes for=\"Magento\\Quote\\Api\\Data\\AddressInterface\"&gt;\n        &lt;attribute code=\"custom_field\" type=\"string\" /&gt;\n    &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nAccess the value of the custom field on server side\nIf you took all the steps described in the previous paragraphs,\nMagento will generate the interface that includes your custom attribute and you can access your field value like this:\n\n$value = $address-&gt;getExtensionAttributes()-&gt;getCustomField();\n\n\nRelated reading\n\n\n  EAV and extension attributes\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_new_field.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-new-step-html": {
      "title": "Add a new checkout step",
      "content": "What’s in this topic\nThe default Magento Checkout consists of two steps:\n\n\n  Shipping Information\n  Review and Payments Information\n\n\nYou can add a custom checkout step, it should be implemented as a UI component. For the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code, add your customizations in a separate module.\n\nThis topic describes how to create the frontend part of the component, implementing a checkout step, and how to add it to the checkout flow.\n\nCreate the view part of the checkout step component\n\nTo create the view part of the new checkout step:\n\n\n  Add a module directory (not covered in this topic). See Build your module for details). All custom files must be stored there. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n  Create the .js file implementing the view model.\n  Create an .html template for the component.\n\n\nEach step is described in details in the following paragraphs.\n\nAdd the JavaScript file implementing the new step\n\nA new checkout step must be implemented as UI component. That is, its JavaScript implementation must be a JavaScript module.\n\nThe file must be stored under the &lt;your_module_dir&gt;/view/frontend/web/js/view directory.\n\n\n&lt;your_module_dir&gt; notation stands for the path to your module directory from the root directory. Usually it will be one of the following: app/code/&lt;YourVendor&gt;/&lt;YourModule&gt; or vendor/&lt;yourvendor&gt;/module-&lt;module&gt;-&lt;name&gt;. For more details see Conventional notations for paths to modules and themes\n\n\nA sample my-step-view.js with comments follows:\n\ndefine(\n    [\n        'ko',\n        'uiComponent',\n        'underscore',\n        'Magento_Checkout/js/model/step-navigator'\n    ],\n    function (\n        ko,\n        Component,\n        _,\n        stepNavigator\n    ) {\n        'use strict';\n        /**\n        *\n        * mystep - is the name of the component's .html template,\n        * &lt;Vendor&gt;_&lt;Module&gt;  - is the name of the your module directory.\n        *\n        */\n        return Component.extend({\n            defaults: {\n                template: '&lt;Vendor&gt;_&lt;Module&gt;/mystep'\n            },\n\n            //add here your logic to display step,\n            isVisible: ko.observable(true),\n\n            /**\n\t\t\t*\n\t\t\t* @returns {*}\n\t\t\t*/\n            initialize: function () {\n                this._super();\n                // register your step\n                stepNavigator.registerStep(\n                    //step code will be used as step content id in the component template\n                    'step_code',\n                    //step alias\n                    null,\n                    //step title value\n                    'Step Title',\n                    //observable property with logic when display step or hide step\n                    this.isVisible,\n\n                    _.bind(this.navigate, this),\n\n                    /**\n\t\t\t\t\t* sort order value\n\t\t\t\t\t* 'sort order value' &lt; 10: step displays before shipping step;\n\t\t\t\t\t* 10 &lt; 'sort order value' &lt; 20 : step displays between shipping and payment step\n\t\t\t\t\t* 'sort order value' &gt; 20 : step displays after payment step\n\t\t\t\t\t*/\n                    15\n                );\n\n                return this;\n            },\n\n            /**\n\t\t\t* The navigate() method is responsible for navigation between checkout step\n\t\t\t* during checkout. You can add custom logic, for example some conditions\n\t\t\t* for switching to your custom step\n\t\t\t*/\n            navigate: function () {\n\n            },\n\n            /**\n\t\t\t* @returns void\n\t\t\t*/\n            navigateToNextStep: function () {\n                stepNavigator.next();\n            }\n        });\n    }\n);\n\nAdd the .html template\n\nIn the module directory, add the .html template for the component. It must be located under the &lt;your_module_dir&gt;/view/frontend/web/template directory.\n\nA sample mystep.html follows:\n\n&lt;!--The 'step_code' value from the .js file should be used--&gt;\n&lt;li id=\"step_code\" data-bind=\"fadeVisible: isVisible\"&gt;\n&lt;div class=\"step-title\" data-bind=\"i18n: 'Step Title'\" data-role=\"title\"&gt;&lt;/div&gt;\n    &lt;div id=\"checkout-step-title\"\n         class=\"step-content\"\n         data-role=\"content\"&gt;\n\n        &lt;form data-bind=\"submit: navigateToNextStep\" novalidate=\"novalidate\"&gt;\n            &lt;div class=\"actions-toolbar\"&gt;\n                &lt;div class=\"primary\"&gt;\n                    &lt;button data-role=\"opc-continue\" type=\"submit\" class=\"button action continue primary\"&gt;\n                        &lt;span&gt;&lt;!-- ko i18n: 'Next'--&gt;&lt;!-- /ko --&gt;&lt;/span&gt;\n                    &lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/li&gt;\n\nAdd your step to the Checkout page layout\n\nFor the new step to be displayed on the page, you need to declare it in the Checkout page layout, which is defined in checkout_index_index.xml.\n\nSo you need to add an extending checkout_index_index.xml layout file in the following location: &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml\n\nA sample checkout_index_index.xml follows:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                            &lt;!-- The new step you add --&gt;\n                                            &lt;item name=\"my-new-step\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"component\" xsi:type=\"string\"&gt;%Vendor%_%Module%/js/view/my-step-view&lt;/item&gt;\n                                                    &lt;!--To display step content before shipping step \"sortOrder\" value should be &lt; 1--&gt;\n                                                    &lt;!--To display step content between shipping step and payment step  1 &lt; \"sortOrder\" &lt; 2 --&gt;\n                                                    &lt;!--To display step content after payment step \"sortOrder\" &gt; 2 --&gt;\n                                                &lt;item name=\"sortOrder\" xsi:type=\"string\"&gt;2&lt;/item&gt;\n                                                &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                    &lt;!--add here child component declaration for your step--&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/argument&gt;\n                &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nCreate mixins for payment and shipping steps (optional)\n\nIf your new step is the first step, you have to create mixins for the payment and shipping steps. Otherwise two steps will be activated on loading of the checkout.\n\nCreate a mixin as follows:\n\n\n  Create a Vendor/Module/view/base/requirejs-config.js file with these contents;\n\n\nvar config = {\n'config': {\n    'mixins': {\n        'Magento_Checkout/js/view/shipping': {\n            'Vendor_Module/js/view/shipping-payment-mixin': true\n        },\n        'Magento_Checkout/js/view/payment': {\n            'Vendor_Module/js/view/shipping-payment-mixin': true\n        }\n    }\n}\n\n\n  Create the mixin. We’ll use the same mixin for both payment and shipping:\n\n\ndefine(\n    [\n        'ko'\n    ], function (ko) {\n        'use strict';\n\n        var mixin = {\n\n            initialize: function () {\n                this.visible = ko.observable(false); // set visible to be initially false to have your step show first\n                this._super();\n\n                return this;\n            }\n        };\n\n        return function (target) {\n            return target.extend(mixin);\n        };\n    }\n);\n\n\n  For your changes to be applied, you might need to clean layout cache and static view file cache. For more info on mixins go to JS Mixins.\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_new_step.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-order-html": {
      "title": "Add custom validations before order placement",
      "content": "What's in this topic\n\nThis topic describes how to add custom validations to be performed before the order is placed during checkout. Namely, the validations which are performed after a shopper clicks the Place Order button. Writing the validation logic itself is not covered in this topic.\n\nOverview\nTo add custom validations before the order placement action, you must do the following:\n\n\n  Create the validator.\n  Add validator to the validators pool.\n  Declare the validation in the checkout layout.\n\n\nCreate the validator\n\nFor the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nIn your custom module directory, create a .js file implementing the validator. It should be located under &lt;your_module_dir&gt;/view/frontend/web/js/model directory.\n\nFollowing is a sample of the validator .js file. It must necessarily implement the validate() method:\n\ndefine(\n    [],\n    function () {\n        'use strict';\n        return {\n            /**\n             * Validate something\n             *\n             * @returns {boolean}\n             */\n            validate: function() {\n                //Put your validation logic here\n                return true;\n            }\n        }\n    }\n);\n\nAdd validator to the validators pool\n\nYour custom validator must be added to the pool of “additional validators”. To do this, in the &lt;your_module_dir&gt;/view/frontend/web/js/view directory create a new &lt;your-validation&gt;.js file with the following content:\n\ndefine(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/payment/additional-validators',\n        '&lt;your_module&gt;/js/model/your-validator'\n    ],\n    function (Component, additionalValidators, yourValidator) {\n        'use strict';\n        additionalValidators.registerValidator(yourValidator);\n        return Component.extend({});\n    }\n);\n\nDeclare the validation in the checkout layout\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file.\nIn this file, add the following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n&lt;referenceBlock name=\"checkout.root\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n            &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"billing-step\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"payment\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"additional-payment-validators\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;!-- Declare your validation. START --&gt;\n                                                        &lt;item name=\"your-validator\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"component\" xsi:type=\"string\"&gt;%your_module_dir%/js/view/%your-validation%&lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                        &lt;!-- Declare your validation. END --&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_order.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-overview-html": {
      "title": "Customize checkout",
      "content": "Default checkout overview\n\nMagento checkout is implemented using the UI components.\nOut of the box, the checkout consists of two steps:\n\n\n  Shipping Information\n  Review and Payment Information\n\n\nThe checkout totals and the corresponding side-bar are only displayed after the first step is completed.\n\nThe only exception is checkout of virtual and/or downloadable products: if there are only these  types of products in the shopping cart, checkout is automatically transformed to one-step procedure, because shipping information is not required.\n\nList of described customizations\nYou can customize the default checkout in many ways. Here the following customizations are described:\n\n\n  Add a new checkout step\n  Customize the view of an existing step\n  Add a custom payment method to checkout\n  Add custom validations before order placement\n  Add custom shipping carrier validations\n  Add custom input mask for ZIP code\n  Add a custom template for a form field on Checkout page\n  Add a new input form to checkout\n  Add a new field in address form\n  Add custom shipping address renderer\n\n\nFor the sake of compatibility, upgradability, and easy maintenance, do not edit the default Magento code, add your customizations in a custom module.\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_overview.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-payment-html": {
      "title": "Add a custom payment method to checkout",
      "content": " What's in this topic \n\nOut of the box, Magento checkout consists of two steps:\n\n\n  Shipping Information\n  Review and Payment Information\n\n\nOn the Review and Payment Information step the enabled payment methods are rendered. This topic describes how to add your custom payment method to this list.\n\nTo implement a payment method rendering in checkout, you need to take the following steps:\n\n\n  Create the .js file implementing the component (payment method renderer).\n  Create the .js component registering the payment method renderer.\n  Create a template for the payment method renderer.\n  Declare the new payment in the checkout page layout.\n\n\nAll the steps are described further.\n\nCreate the .js component file\n\nYour payment method renderer must be implemented as a UI component. For the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code, add your customizations in a separate module. For your checkout customization to be applied correctly, your custom module should depend on the Magento_Checkout module. Module dependencies are specified in the module’s composer.json. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nIn you custom module directory create the component’s .js file (payment method renderer). It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/view/ directory. For example in the Magento modules, the payment methods renderers are stored in the &lt;Magento_module_dir&gt;/view/frontend/web/js/view/payment/method-renderer/ directory.\n\nUsually, your component will extend the default payment method component (default payment method renderer) implemented in the &lt;Magento_Checkout_module_dir&gt;/view/frontend/web/js/view/payment/default.js file. The following table contains the list of the default component’s methods.\n\n\n   \n      \n         Method\n         Description\n      \n      \n         getCode():string\n         Returns the code of the payment method\n      \n      \n         getData():object\n          Returns an object with the payment data to be sent to the server on selecting a payment method and/or an extension (on pressing Continue button). It must contain data according to \\Magento\\Quote\\Api\\Data\\PaymentInterface. All the payment information except the method code and purchase order number is passed in the additional_data field.\n      \n      \n         placeOrder():bool\n         Places an order if all validations passed.\n      \n      \n         selectPaymentMethod():bool\n          Adds information about the payment method selected by the user to the Quote JS object.\n      \n      \n         isChecked():string\n          Returns the code of the selected payment method.\n      \n      \n         isRadioButtonVisible():bool\n          Returns true if only one payment method is available.\n      \n      \n         getTitle():string\n         Returns the payment method title.\n      \n      \n         validate():bool\n          Used in the placeOrder() method. So you can override validate() in your module, and this validation will be performed in the scope of placeOrder().\n      \n      \n         getBillingAddressFormName():string\n         Gets the unique billing address name.\n      \n\n      \n         disposeSubscriptions()\n         Terminates the object's subscription.\n      \n   \n\n\nThe general view of the payment method renderer is the following:\n\ndefine(\n    [\n        'Magento_Checkout/js/view/payment/default'\n    ],\n    function (Component) {\n        'use strict';\n        return Component.extend({\n            defaults: {\n                template: '%path to template%'\n            },\n            // add required logic here\n        });\n    }\n);\n\nIf your payment method requires credit cards information, you might use the Magento renderer implementing a credit card form: &lt;Magento_Payment_module_dir&gt;/view/frontend/web/js/view/payment/cc-form.js. It also extends the default payment renderer, but has the following own methods:\n\n\n   \n      Method\n      Description\n   \n         \n          getData():object\n           Returns an object with the payment data to be sent to the server on selecting a payment method and/or an extension (on pressing Continue button). It must contain data according to \\Magento\\Quote\\Api\\Data\\PaymentInterface. All the payment information except the method code and purchase order number is passed in the additional_data field. Adds credit card data (type, issue date, number, CVV).\n     \n   \n      getCcAvailableTypes():array\n       Returns the list of available credit card types.\n   \n   \n      getIcons()\n      Returns links to the images for available credit card types.\n   \n   \n      getCcMonths()\n       Retrieves the month of the credit card expiration date.\n   \n   \n      getCcYears()\n       Retrieves the year of the credit card expiration date.\n   \n   \n      hasVerification():bool\n       A flag that shows if the credit card CVV number is required for this payment. \n   \n   \n      hasSsCardType():bool\n      Returns true if the Solo and Switch (Maestro) card types are available.\n   \n   \n      getCvvImageUrl():string\n       Retrieves the CVV tooltip image URL.\n   \n   \n      getCvvImageHtml():string\n       Retrieves the CVV tooltip image HTML.\n   \n   \n      getSsStartYears()\n      Solo or Switch (Maestro) card start year.\n   \n\n\nAccess the system config data\nYour payment method might need to get data that cannot be defined in layout configuration, JS components or templates directly, for example, data from the Magento system config.\nThis configuration is stored in the window.checkoutConfig variable that is defined in root checkout template.\n\nIn order to get access to the system configuration, your payment method or a group of payment methods has to implement the \\Magento\\Checkout\\Model\\ConfigProviderInterface interface, and the class implementing it must be injected to the composite config provider via DI frontend configuration. The following code samples illustrate this.\n\nA sample .php class implementing \\Magento\\Checkout\\Model\\ConfigProviderInterface:\n\nclass MyCustomPaymentConfigProvider implements \\Magento\\Checkout\\Model\\ConfigProviderInterface\n{\n...\n    public function getConfig()\n    {\n        return [\n            // 'key' =&amp;gt; 'value' pairs of configuration\n        ];\n    }\n...\n}\n\n\nA sample DI configuration file of a custom module &lt;your_module_dir&gt;/etc/di.xml:\n\n...\n&lt;type name=\"Magento\\Checkout\\Modерel\\CompositeConfigProvider\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"configProviders\" xsi:type=\"array\"&gt;\n            ...\n            &lt;item name=\"%Custom_provider_name%\" xsi:type=\"object\"&gt;MyCustomPaymentConfigProvider&lt;/item&gt;\n            ...\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n...\n&lt;/type&gt;\n\nAdd other payment-related features\nYou can also add payment-related features (like reward points, gift registry, an so on) to the Review and Payment Information checkout step. They must be implemented as UI components as well, and can be displayed before or after the list of payment methods. This is configured in the checkout page layout file correspondingly.\n\nCreate the .js component that registers the renderer\nIn you custom module directory create the .js UI component that registers the payment method renderer in the renderers list. It must be located under the &lt;your_module_dir&gt;/view/frontend/web/js/view/ directory. For example in the Magento modules, the payment methods renderers are stored in the &lt;Magento_module_dir&gt;/view/frontend/web/js/view/payment/ directory.\n\nThe file content must be similar to the following:\n\ndefine(\n    [\n        'uiComponent',\n        'Magento_Checkout/js/model/payment/renderer-list'\n    ],\n    function (\n        Component,\n        rendererList\n    ) {\n        'use strict';\n        rendererList.push(\n            {\n                type: '%payment_method_code%',\n                component: '%js_renderer_component%'\n            },\n            // other payment method renderers if required\n        );\n        /** Add view logic here if needed */\n        return Component.extend({});\n    }\n);\n\nIf your module adds several payment methods, you can register all payment methods renderers in one file.\n\nCreate the template for the payment method component\nIn your custom module directory create a new &lt;your_module_dir&gt;/view/frontend/web/template/&lt;your_template&gt;.html file. The template can use Knockout JS syntax. You can find a sample .html template in any module implementing payment methods, for example the Magento_Authorizenet module. The template for rendering the Authorize.Net payment method in checkout is &lt;Magento_Authorizenet_module_dir&gt;/view/frontend/web/template/payment/authorizenet-directpost.html.\n\nDeclare the payment method in layout\n\nIn your custom module directory, create a new &lt;your_module_dir&gt;/view/frontend/layout/checkout_index_index.xml file. In this file, add the following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceBlock name=\"checkout.root\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"components\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"checkout\" xsi:type=\"array\"&gt;\n                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                &lt;item name=\"steps\" xsi:type=\"array\"&gt;\n                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                        &lt;item name=\"billing-step\" xsi:type=\"array\"&gt;\n                                            &lt;item name=\"component\" xsi:type=\"string\"&gt;uiComponent&lt;/item&gt;\n                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                &lt;item name=\"payment\" xsi:type=\"array\"&gt;\n                                                    &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                        &lt;!-- Declare additional before payment components. START --&gt;\n                                                        &lt;item name=\"beforeMethods\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"component\" xsi:type=\"string\"&gt;uiComponent&lt;/item&gt;\n                                                            &lt;item name=\"displayArea\" xsi:type=\"string\"&gt;beforeMethods&lt;/item&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"%your_feature_name%\" xsi:type=\"array\"&gt;\n                                                                    &lt;item name=\"component\" xsi:type=\"string\"&gt;%path/to/your/feature_js_component%&lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                        &lt;/item&gt;\n                                                        &lt;!-- Declare additional before payment components. END --&gt;\n                                                        &lt;!-- Declare the payment method (the component that registrates in the list). START --&gt;\n                                                        &lt;item name=\"renders\" xsi:type=\"array\"&gt;\n                                                            &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"%group name of the payment methods%\" xsi:type=\"array\"&gt;\n                                                                    &lt;!-- Example of value: Magento_Authorizenet/js/view/payment/authorizenet--&gt;\n                                                                    &lt;item name=\"component\" xsi:type=\"string\"&gt;%component_that_registers_payment_renderer%&lt;/item&gt;\n                                                                    &lt;item name=\"methods\" xsi:type=\"array\"&gt;\n\n                                                                        &lt;!-- Add this if your payment method requires entering a billing address--&gt;\n                                                                        &lt;item name=\"%payment_method_code%\" xsi:type=\"array\"&gt;\n                                                                            &lt;item name=\"isBillingAddressRequired\" xsi:type=\"boolean\"&gt;true&lt;/item&gt;\n                                                                        &lt;/item&gt;\n                                                                    &lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                            &lt;!-- Declare the payment method (the component that registrates in the list). END --&gt;\n                                                            &lt;!-- Declare additional after payment components. START --&gt;\n                                                            &lt;item name=\"afterMethods\" xsi:type=\"array\"&gt;\n                                                                &lt;item name=\"component\" xsi:type=\"string\"&gt;uiComponent&lt;/item&gt;\n                                                                &lt;item name=\"displayArea\" xsi:type=\"string\"&gt;afterMethods&lt;/item&gt;\n                                                                &lt;item name=\"children\" xsi:type=\"array\"&gt;\n                                                                    &lt;item name=\"%your_feature_name%\" xsi:type=\"array\"&gt;\n                                                                        &lt;item name=\"component\" xsi:type=\"string\"&gt;%path/to/your/feature_js_component%&lt;/item&gt;\n                                                                    &lt;/item&gt;\n                                                                &lt;/item&gt;\n                                                            &lt;/item&gt;\n                                                            &lt;!-- Declare additional after payment components. END --&gt;\n                                                        &lt;/item&gt;\n                                                    &lt;/item&gt;\n                                                &lt;/item&gt;\n                                            &lt;/item&gt;\n                                        &lt;/item&gt;\n                                    &lt;/item&gt;\n                                &lt;/item&gt;\n                            &lt;/item&gt;\n                        &lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/referenceBlock&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nFor an illustration of checkout_index_index.xml where a new payment method is declared, view app/code/Magento/Authorizenet/view/frontend/layout/checkout_index_index.xml\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_payment.html"
    }
    ,
  
    "guides-v2-0-howdoi-checkout-checkout-zip-html": {
      "title": "Add custom input mask for ZIP code",
      "content": "What’s in this topic\n\nWhen a shopper specifies the country and ZIP code in the shipping address during checkout or in the shopping cart, Magento checks if the format of the entered code is valid for the specified country. This validation is implemented using the input masks for the ZIP code field. In Magento, these input masks are regular expressions which define which format is allowed.\nThis topic describes how a developer can add custom input masks.\n\nAdding custom input masks for ZIP code\n\nIn Magento the input masks for the ZIP code field are specified in the &lt;Magento_Directory_module_dir&gt;/etc/zip_codes.xml. Input masks are specified per country, and are entered in the form of regular expressions.\nThe syntax of defined by the zip_code.xsd scheme.\n\nFor the sake of compatibility, upgradability, and easy maintenance, do not edit the default Magento code. Add your customizations in a separate, custom module. For your ZIP code input mask customization to be applied correctly, your custom module should depend on the Magento_Directory module. Do not use Ui for your custom module name, because %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nTo add custom ZIP code input masks or change the default ones, create a new zip_code.xml in the &lt;your_module_dir&gt;/etc directory.\n\nThe content of the file should be similar to the following sample:\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Directory:etc/zip_codes.xsd\"&gt;\n\n\t&lt;!-- Specify the country ISO code--&gt;\n\t&lt;zip countryCode=\"US\"&gt;\n\t\t&lt;!-- You can specify several patterns for one country --&gt;\n    \t&lt;codes&gt;\n\t        &lt;code id=\"pattern_1\" active=\"true\" example=\"12345-6789\"&gt;^[0-9]{5}\\-[0-9]{4}$&lt;/code&gt;\n    \t    &lt;code id=\"pattern_2\" active=\"true\" example=\"12345\"&gt;^[0-9]{5}$&lt;/code&gt;\n    \t&lt;/codes&gt;\n\t&lt;/zip&gt;\n&lt;/config&gt;\n\nTo change (override the default value) the existing mask, open your zip_codes.xml and copy in the related nodes. Then, change the regular expression defining the mask and the value of example correspondingly.\n\nExample of changing the default input mask:\n\nIn the default &lt;Magento_Directory_module_dir&gt;/etc/zip_codes.xml the following mask is set for France:\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Directory:etc/zip_codes.xsd\"&gt;\n...\n\t&lt;zip countryCode=\"FR\"&gt;\n        &lt;codes&gt;\n            &lt;code id=\"pattern_1\" active=\"true\" example=\"12345\"&gt;^[0-9]{5}$&lt;/code&gt;\n        &lt;/codes&gt;\n    &lt;/zip&gt;\n...\n&lt;/config&gt;\n\nTo change this mask, add the following code in your zip_codes.xml:\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Directory:etc/zip_codes.xsd\"&gt;\n...\n\t&lt;zip countryCode=\"FR\"&gt;\n        &lt;codes&gt;\n            &lt;!-- Changed the regexp defining the mask, and the value of \"example\" --&gt;\n            &lt;code id=\"pattern_1\" active=\"true\" example=\"A123\"&gt;^[a-zA-Z]{1}[0-9]{3}$&lt;/code&gt;\n        &lt;/codes&gt;\n    &lt;/zip&gt;\n...\n&lt;/config&gt;\n\nTo remove a mask, in your zip_codes.xml add the corresponding node and set active attribute of &lt;code/&gt; to false.\n",
      "url": "/guides/v2.0/howdoi/checkout/checkout_zip.html"
    }
    ,
  
    "guides-v2-0-howdoi-clean-static-cache-html": {
      "title": "Clean static files cache",
      "content": "You can clean generated static view files in any of the following ways:\n\n\n  \n    In the Magento Admin. Go to System &gt; Tools &gt; Cache Management and click Flush Static Files Cache.\n\n    \n      This option is only availble in developer mode. Refer to the static view files overview for more information.\n\n    \n  \n  \n    Manually by clearing the pub/static and var/view_preprocessed directories and subdirectories except for pub/static/.htaccess.\n\n    To clear the pub/static directory of all files except .htaccess (which is a hidden file), enter the following command:\n\n    rm -R pub/static/*\n    \n  \n  \n    Several commands support an optional parameter --clear-static-content, which cleans generated static view files:\n\n    \n      magento module:enable and magento module:disable\n      magento theme:uninstall\n      magento module:uninstall\n    \n  \n\n",
      "url": "/guides/v2.0/howdoi/clean_static_cache.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cli-cmds-cli-add-html": {
      "title": "Add CLI commands",
      "content": "You module can optionally use Magento 2’s Symfony-based command-line interface (CLI) to provide commands for users to interact with. To use the CLI, see the following topics:\n\n\n  Command naming guidelines\n  How to add CLI commands\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cli-cmds/cli-add.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cli-cmds-cli-howto-html": {
      "title": "How to add CLI commands",
      "content": "Overview of adding CLI commands\nMagento enables your component to add commands to our Symfony-like command-line interface (CLI).\n\nAbout the Magento CLI\nMagento has one command-line interface that performs both installation and configuration tasks: &lt;your Magento install dir&gt;/bin/magento. The new interface performs multiple tasks, including:\nInstalling Magento (and related tasks such as creating or updating the database schema, creating the deployment configuration, and so on)\n\tClearing the cache\n\tManaging indexes, including reindexing\n\tCreating translation dictionaries and translation packages\n\tGenerating non-existent classes such as factories and interceptors for plug-ins, generating the dependency injection configuration for the object manager.\n\tDeploying static view files\n\tCreating CSS from LESS\nOther benefits:\nA single command (php &lt;your Magento install dir&gt;/bin/magento list) lists all available installation and configuration commands\nConsistent user interface based on Symfony\nThe CLI is extensible so third party developers can \"plug in\" to it\nThis has the additional benefit of eliminating users' learning curve\nCommands for disabled modules do not display.\n\nPrerequisites\nBefore you begin, make sure you understand the following:\n\n\n  All Magento command-line interface (CLI) commands rely on the Magento application and must have access to its context, dependency injections, plug-ins, and so on.\n  All CLI commands should be implemented in the scope of your module and should depend on the module’s status.\n  Your command can use the Object Manager and Magento dependency injection features; for example, it can use constructor dependency injection.\n  \n    You must register your commands as discussed in any of the following sections:\n\n    \n      Add CLI commands using dependency injection\n      Add CLI commands using the Composer autoloader\n    \n  \n\n\nAdd CLI commands using dependency injection\nThe Magento 2 sample modules provide a demonstration of many programming techniques, including adding a CLI command using dependency injection. Look at the sample-module-command for an example. The module’s README.md discusses how to install it.\n\nFollowing is a summary of the process:\n\n\n  \n    Create a Command class (the recommended location is &lt;your component root dir&gt;/Console/Command).\n\n    See app/code/Magento/CommandExample/Console/Command for examples.\n  \n  Declare your Command class in Magento\\Framework\\Console\\CommandListInterface using dependency injection (&lt;your component root dir&gt;/etc/di.xml).\n  \n    Clean the cache and compiled code directories:\n\n    cd &lt;your Magento install dir&gt;/var\nrm -rf cache/* page_cache/* di/* generation/* \n    \n  \n\n\nAdd CLI commands using the Composer autoloader\nTo be added at a later time.\n\nRelated topic\nCommand naming guidelines\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cli-cmds/cli-howto.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cli-cmds-cli-naming-guidelines-html": {
      "title": "Command naming guidelines",
      "content": "\n\nNaming guideline overview\nMagento 2 introduces a new command-line interface (CLI) that enables component developers to plug in commands provided by modules.\n\nAs an extension developer, you can now create and distribute your own commands for Magento applications. But as for any implementation, it’s also important to follow some general conventions to keep your commands consistent with commands from other developers. Being consistent in this way reduces the user’s learning curve.\n\nThis topic discusses our recommended naming conventions.\n\nCommand name\nA command name is a part of the command, which defines behavior of the command on the very high level. In the command it goes right after the command’s name.\nFor example, in bin/magento setup:upgrade, bin/magento is the command’s name and setup:upgrade is the name of the command.\n\nIf you have a Magento installation handy, enter the following to display the current list of commands:\n\nphp &lt;your Magento install dir&gt;/bin/magento --list\n\n\nFormat: group:[subject:]action\n\ngroup\ngroup represents a group of related commands. Commands in a group display in a list, which in turn makes it easier for the user to find the desired command. To find a group name for a command, imagine an subject area where it can be used. The subject area can be any of the following:\n\n\n  Domain area (for example, module for actions with modules, info for commands that provide some information)\n  Workflow area (for example, admin for commands that can be used by an administrator, dev for a developer)\n\n\nsubject\nsubject is a subject for the action. The subject is optional, but it can be useful for defining sets of commands that work with the same object. If a subject is represented by a compound word, use a dash or hyphen character to separate the words.\n\naction\naction is an action the command does.\n\nExamples\n// general commands: just a group and an action\nmagento setup:install\nmagento module:status\n\n// set of commands with a subject\nmagento setup:config:set\nmagento setup:config:delete\nmagento setup:db-schema:upgrade\nmagento setup:db-data:upgrade\n\n\n\n  db-schema and db-data are examples of compound words.\n\n\nCommand options and arguments\nOptions and arguments follow the command name and modify the command’s behavior.\n\nFor example, in bin/magento module:disable --force Magento_Catalog, the --force option and the Magento_Catalog argument bypass the restrictions and specify a particular module to be disabled; in this case, regardless of dependencies on other modules.\n\nOptions and arguments create different user experiences. As a developer, you can choose which type of input is better for your particular case.\n\nCommand arguments\nArguments are values passed by the user in a specified order. The argument name is not visible to the user.\n\nFormat: single word or a compound word separated with a dash or hyphen character\n\nExample:\n\nmagento dev:theme:create frontend vendor themename\n\n\nwhere:\n\nfrontend is a subject area argument\n\nvendor is a vendor argument\n\nthemename is a theme name argument\n\nUse arguments when you need required data from the user. We recommend as few arguments as possible (no more then three) so the user will not confuse their order.\n\nTo make it simpler for the user, we recommend the following:\n\n\n  Run the CLI multiple times for providing multiple similar values instead of running it once with 20 values\n  \n    Use default values for required arguments where possible.\n\n    You can then use options instead of arguments to minimize the amount of required data the user must enter.\n  \n  Replace arguments with options: options are named, so the user can provide them in any order. This requires additional data validation (by default, all options are optional).\n\n\nCommand Options\nOptions are name-value pairs. The sequence of entered values doesn’t matter.\n\nAn option can have a value or no value. An option that does not require a value represents a flag (yes or no).\n\nAn option can also have a one-letter shortcut as an alternative to its full name. Enable shortcuts for often-used options or if it’s easy to determine what the shortcut means. Usually it makes sense to enable shortcuts for options similar to the ones used in widely-used commands (for example, -f for --force, -v for --verbose, -h for --help).\n\nFormat: single word or a compound word separated with a dash or hyphen character.\n\nFor example,\n\nmagento dev:theme:create --parent=Magento/luma frontend arg1 arg2\nmagento dev:theme:create -p=Magento/luma frontend vendor themename\nmagento dev:theme:create --extend-from=Magento/luma frontend vendor themename\nmagento module:disable -f Magento_Cms\n\n\nWhere:\n\n--parent is an option that specifies a parent theme\n\n-p is a shortcut for --parent\n\n-f is a shortcut for a non-value option --force\n\narg1, arg2, frontend, vendor and themename are arguments (see Command options and arguments).\n\nUse options for:\n\n\n  Optional data\n  Required data that has a default value\n\n\nExample:\n\n// correct\nmagento dev:theme:create --extend-from=Magento/luma frontend Foo bar\nmagento module:disable --force Magento_Catalog\nmagento module:disable -f Magento_Catalog\n\n//incorrect\nmagento module:disable --force=1 Magento_Catalog\nmagento module:disable -f=yes Magento_Catalog\n\n\nRecommendations to avoid naming collisions\nTo avoid naming your command the same as another command, we recommend:\n\n\n  \n    Looking at other extensions in the Magento Marketplace before you choose a name for your commands. By planning ahead, you can avoid naming collisions entirely.\n  \n  \n    Restricting command names to start with a unique name, such as a vendor name. The usability of the command depends on what you choose for a vendor name.\n\n    For example, myname:dev:theme:create is not obvious and is hard to remember.\n\n    The vendor name doesn’t have to start the command name; it could be in the middle. This way, related commands are grouped together.\n\n    Examples:\n\n    dev:myname:theme:create\ndev:myname:theme:delete\n    \n  \n\n\nRelated topic\nHow to add CLI commands\n",
      "url": "/guides/v2.0/extension-dev-guide/cli-cmds/cli-naming-guidelines.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-cli-cli-rc1-samp-html": {
      "title": "Command-line upgrade to Magento 2.1 with sample data",
      "content": "Command-line upgrade to Magento 2.1 with sample data\n\n\n\n  These instructions apply to Magento Community Edition (CE) and Magento Enterprise Edition (EE) users only if all of the following are true:\n\n  \n    You have installed optional sample data\n    You’re upgrading to Magento 2.1 (including a Release Candidate) from any earlier version using the command line\n  \n\n  Click to expand/collapse content To upgrade to Magento 2.1 sample data using the command line:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to the Magento installation directory.\n  \n    Back up your current composer.json:\n\n    cp composer.json composer.json.bak\n    \n  \n  \n    Enter one of the following commands to upgrade the Magento software version to 2.1.0 (GA release):\n\n    composer require &lt;product&gt; &lt;version&gt; --no-update\ncomposer require &lt;sample data module-1&gt;:&lt;version&gt; ... &lt;sample data module-n&gt;:&lt;version&gt; --no-update\n    \n\n    \n      \n        Magento Open Source:\n\n        composer require magento/product-community-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 --no-update \n        \n      \n      \n        Magento EE:\n\n        composer require magento/product-enterprise-edition 2.1.0 --no-update\n\ncomposer require magento/module-bundle-sample-data:100.1.0 magento/module-widget-sample-data:100.1.0 magento/module-theme-sample-data:100.1.0 magento/module-catalog-sample-data:100.1.0 magento/module-customer-sample-data:100.1.0 magento/module-cms-sample-data:100.1.0  magento/module-catalog-rule-sample-data:100.1.0 magento/module-sales-rule-sample-data:100.1.0 magento/module-review-sample-data:100.1.0 magento/module-tax-sample-data:100.1.0 magento/module-sales-sample-data:100.1.0 magento/module-grouped-product-sample-data:100.1.0 magento/module-downloadable-sample-data:100.1.0 magento/module-msrp-sample-data:100.1.0 magento/module-configurable-sample-data:100.1.0 magento/module-product-links-sample-data:100.1.0 magento/module-wishlist-sample-data:100.1.0 magento/module-swatches-sample-data:100.1.0 magento/sample-data-media:100.1.0 magento/module-offline-shipping-sample-data:100.1.0 magento/module-gift-card-sample-data:100.1.0 magento/module-customer-balance-sample-data:100.1.0 magento/module-target-rule-sample-data:100.1.0 magento/module-gift-registry-sample-data:100.1.0 magento/module-multiple-wishlist-sample-data:100.1.0 --no-update\n        \n      \n    \n\n    \n  \t\tTo upgrade to a Release Candidate, append -rc&lt;x&gt; to the version of each module. For example, -rc3.\n\n  \n  \n    Update dependencies:\n\n    composer update\n    \n  \n  If prompted, enter your authentication keys.\n  Wait for dependencies to update.\n\n\nFinish your upgrade\nAfter you’ve reset file system permissions:\n\n\n  If you haven’t done so already, log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to your Magento installation directory.\n  \n    Manually clear the var/cache, var/page_cache, and var/generation directories.\n\n    A sample command follows:\n\n    rm -rf var/cache/* var/page_cache/* var/generation/*\n    \n  \n  \n    Enter the following command from your Magento installation directory:\n\n    php bin/magento setup:upgrade\n    \n  \n\n\n\n\n  Apply file system permissions and ownership\n  As part of the sample data upgrade process, you must apply current file system permission and ownership as discussed in the following sections. Failure to do so will cause your upgrade to fail.\n\n  For more information about file system ownership and permissions since the Magento 2.0.6 release, see Overview of ownership and permissions.\n\n  One-user ownership and permissions\n  If you run the Magento application as one user (which is typical of shared hosting environments), change file system permissions and ownership as follows:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\;\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\; &amp;&amp; chmod u+x bin/magento\n  \n\n  After you set file system permissions, manually clear the var/cache, var/page_cache, and var/generation directories.\n\n  A sample command follows:\n\n  rm -rf var/cache/* var/page_cache/* var/generation/*\n  \n\n  Two-user ownership and permissions\n  If you run the Magento application with two users, enter the following commands as a user with root privileges:\n\n  cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nchown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n  \n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n\n\n\n",
      "url": "/guides/v2.0/comp-mgr/cli/cli-rc1-samp.html"
    }
    ,
  
    "guides-v2-0-cloud-reference-cli-ref-topic-html": {
      "title": "Magento Cloud CLI reference",
      "content": "The Magento Cloud CLI is a cloud-specific verion of the Magento CLI we provide supporting commands including Magento management and Git interactions. You can install and use these commands for all Starter environments and Pro Integration environments. You cannot use these commands on Pro plan Staging and Production environments.\n\nThis reference lists all available commands, and a list of commonly used commands, for Magento Commerce (Cloud). You can also use Magento CLI commands as needed, using bin/magento for entering commands.\n\nYou will install the Magento Cloud CLI on your local when setting up your local environment for development.\n\n\n  You must install the Magento Cloud CLI to your local workspace to issue commands. For details, see:\n\n  \n    Install Magento prerequisites\n    Enable SSH keys\n  \n\n\nThe following Magento Cloud CLI commands can be run from any directory and run best from a project directory. When run from a project directory, you can omit the -p &lt;project ID&gt; parameter. These commands are meant to be used to manage Integration environments.\n\nYou may notice these commands are similar to Git commands. The magento-cloud Git commands directly connect with Magento Git, the Magento ECE project, with additional features. For example, when you push a Git branch, it is not activated until you access GitHub. The Magento CLI command includes activation.\n\nAll listed commands include only the required information and options. These commands may include additional options. To see all options and help, append --help with any magento-cloud command .\n\n\n  git commit --allow-empty -m \"redeploy\" &amp;&amp; git push &lt;branch name&gt;\n  Push an empty commit to force a redeployment. Some actions, like adding a user for example, don’t result in deployment.\n  magento-cloud login\n  Log in to the project.\n  magento-cloud project:get &lt;project ID&gt; &lt;directory&gt; -e &lt;environment ID&gt;\n  Clone a project to a directory. To clone the master environment, omit -e &lt;environment ID&gt;.\n  magento-cloud environment:list -p &lt;project ID&gt;\n  List the environments in the current project (that is, the project that corresponds to the directory in which you run the command).\n\n\n\n  magento-cloud environment:list displays environment hierarchies whereas git branch does not. If you have any nested environments, use magento-cloud environment:list.\n\n\n\n  magento-cloud environment:branch &lt;name&gt; &lt;parent branch&gt;\n  Create a new branch; the environment has both a name and an ID.\n\n\n\n  The environment name is different from the environment ID only if you use spaces or capital letters in the environment name. An environment ID consists of all lowercase letters, numbers, and allowed symbols. Capital letters in an environment name are converted to lowercase in the ID; spaces in an environment name are converted to dashes.\n\n  An environment name cannot include characters reserved for your Linux shell or for regular expressions. Forbidden characters include curly braces ({ }), parentheses, asterisk (*), angle brackets (&lt; &gt;), ampersand (&amp;), percent (%), and other characters.\n\n\n\n  magento-cloud environment:checkout &lt;environment ID&gt;\n  Check out an existing environment.\n  magento-cloud environment:merge -p &lt;project ID&gt; -e &lt;environment ID&gt;\n  Merge changes in this environment with its parent.\n  magento-cloud environment:synchronize -p &lt;project ID&gt; -e &lt;environment ID&gt; {code|data}\n  Synchronize (that is, git pull) code and/or data from the parent to this environment.\n  magento-cloud variable:list\n  List variables in this environment.\n  magento-cloud variable:set &lt;name&gt; &lt;value&gt;\n  Set a value for an environment variable in this environment.\n\n\nDisplay all commands\n\nThe magento-cloud list displays all available commands.\n\nHelp for a command\nYou can preface or append any command with help or --help to see more information on how to use that command.\n\n$ magento-cloud domain:add --help\nCommand: domain:add\nDescription: Add a new domain to the project\n\nUsage:\n domain:add [--project[=\"...\"]] [--cert=\"...\"] [--key=\"...\"] [--chain=\"...\"] [name]\n\nArguments:\n name                  The name of the domain\n\nOptions:\n --project             The project ID\n --cert                The path to the certificate file for this domain.\n --key                 The path to the private key file for the provided certificate.\n --chain               The path to the certificate chain file or files for the provided certificate. (multiple values allowed)\n \t --help (-h)           Display this help message\n --quiet (-q)          Do not output any message\n --verbose (-v|vv|vvv) Increase the verbosity of messages\n --version (-V)        Display this application version\n --yes (-y)            Answer \"yes\" to all prompts\n --no (-n)             Answer \"no\" to all prompts\n --shell (-s)          Launch the shell\n\n\nList of Magento CLI commands\nThe following table provides an extensive list of Magento CLI commands for ECE accessed with magento-cloud To see a full list of commands, enter magento-cloud list. The listed commands are for Magento Cloud CLI version 1.11.1 and later.\n\nThe following table lists general commands.\n\n\n\t\n\t\t\t\t   \n\t             Command\n\t             Description\n\t         \n\t\n\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tclear-cache\n\t \t\t\t\tClears the cache for only the CLI.\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tdocs\n\t \t\t\t\tProvides a link for documentation. \n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\thelp\n\t \t\t\t\tDisplays help information for the command.\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tlist\n\t \t\t\t\tDisplays a list of all available commands in the Magento Cloud CLI.\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tmulti\n\t \t\t\t\tExecutes a command on multiple projects entered as a command separated list for the -p parameter.\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tweb\n\t \t\t\t\tOpens a web UI based on the parameters you enter.\n\t \t\t\t\t\n\t\t\t\n\n\nThe following table lists all commands for interacting with your environments and projects.\n\n\n\t\t\t\n\t         \n\t             Command\n\t             Description\n\t         \n\t\t\t\n\t     \n\t \t\t\t\t\n\t \t\t\t\tactivity:list (activities)\n\t \t\t\t\tGets a list of activities for an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tactivities:log\n\t \t\t\t\tDisplays the log for an environment activity\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tapp:config-get\n\t \t\t\t\tViews the configuration of an app\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tapp:list (apps)\n\t \t\t\t\tGets a list of all apps in the local repository\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tauth-info\n\t\t\t\t\tDisplay yourt account information\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tauth:login (login)\n\t\t\t\t\tLog in to the Magento Cloud CLI\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tauth:logout (logout)\n\t\t\t\t\tLog out of Magento Cloud CLI\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tcertificate:add\n\t\t\t\t\tAdds an SSL certificate to the project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tcertificate:delete\n\t\t\t\t\tDeletes a certificate from the project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tcertificate:get\n\t\t\t\t\tView a certificate added to the project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tcertificate:list (certificates)\n\t\t\t\t\tLists project certificates\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tclean\n\t \t\t\t\tRemoves old project builds. When using local:build in a separate location from your code, use this command to clear those builds. By default, your latest five builds are not deleted.\n\t \t\t\t\t\n\t\t\t\t\tdb:dump\n\t\t\t\t\tCreates a local dump of the remote database data. You can push the dump to another remote database. For example, you could pull data from the Production environment (products, catalogs, etc) and push it into Staging for testing.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdb:size\n\t\t\t\t\tEstimates the disk usage of the database.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdb:sql (sql)\n\t\t\t\t\tOpens an SQL console on the remote database. You can view tables and dump data from a local to the remote database. For example, you could push a data dump from Production into Staging for testing.\n\t\t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tdomain:add\n\t \t\t\t\tAdds a new domain to the project\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdomain:delete\n\t\t\t\t\tDeletes a domain from the project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdomain:get\n\t\t\t\t\tShows detailed information for a domain including the project ID, hostname, and so on\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdomain:list (domains)\n\t\t\t\t\tGets a list of all domains\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tdomain:update\n\t\t\t\t\tUpdates data for a domain\n\t\t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:activate\n\t \t\t\t\tActivates an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:branch (branch)\n\t \t\t\t\tBranches an environment, or creates a Git branch\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:checkout (checkout)\n\t \t\t\t\tChecks out an environment, or Git branch\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:delete\n\t \t\t\t\tDeletes an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:http-access (httpaccess)\n\t \t\t\t\tUpdates HTTP access settings for an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:info\n\t \t\t\t\tReads or sets properties for an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:list (environments)\n\t \t\t\t\tGets a list of environments\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:logs (log)\n\t \t\t\t\tReads an environment's logs\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:merge (merge)\n\t \t\t\t\tMerges an environment\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tenvironment:push (push)\n\t \t\t\t\tPushes code to an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:relationships (relationships)\n\t \t\t\t\tDisplays an environment's relationships\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:ssh (ssh)\n\t \t\t\t\tOpens an SSH session to the current environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:synchronize (sync)\n\t \t\t\t\tSynchronizes an environment's code and or data from its parent\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tenvironment:url (url)\n\t \t\t\t\tGets the public URLs of an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tintegration:add\n\t \t\t\t\tAdd an integration to the project\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tintegration:delete\n\t \t\t\t\tDeletes an integration from a project\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tintegration:get\n\t\t\t\t\tShows details for an integration\n\t\t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tintegration:list (integrations)\n\t \t\t\t\tViews project integration(s)\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tintegration:update\n\t \t\t\t\tUpdates an integration\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tlocal:build (build)\n\t \t\t\t\tBuilds the current project locally strictly to test the build without the full patch and commit process. This command allows you to build locally without patches just to check the build. We recommend you run this command separately in a different location. You should not commit the files from this build to Git.\n          You should only use this command to test a local build, not to build and deploy.\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tlocal:dir (dir)\n\t \t\t\t\tLocates the root directory. Use the command with a subdirectory argument of local, web, or shared to locate those directories.\n\t \t\t\t\t\n\t\t\t\t\t\n\t \t\t\t\tprohect:get (get)\n\t \t\t\t\tClones a project locally\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tproject:info\n\t \t\t\t\tReads or sets properties for a project\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tproject:list (projects)\n\t \t\t\t\tGets a list of all active projects\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tproject:set-remote\n\t\t\t\t\tSet the remote project for the current Git repository\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tproject:variable:delete\n\t\t\t\t\tDelete a variable from a project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tproject:variable:get (project-variables, pvget)\n\t\t\t\t\tView variable(s) for a project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tproject:variable:set (pvset)\n\t\t\t\t\tSet a variable for a project\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\troute:get\n\t\t\t\t\tView a resolved route\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\troute:list (routes)\n\t\t\t\t\tList all routes for an environment\n\t\t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tself:install\n\t \t\t\t\tInstalls or updates CLI configuration files\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tself:update (self-update)\n\t \t\t\t\tUpdates the CLI tot he latest version\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tsnapshot:create (backup)\n\t \t\t\t\tMakes a snapshot of an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tsnapshot:list (snapshots)\n\t \t\t\t\tList available snapshots of an environment\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tsnapshot:restore\n\t \t\t\t\tRestores an environment snapshot\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tssh-key:add\n\t \t\t\t\tAdds a new SSH key\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tssh-key:delete\n\t \t\t\t\tDeletes an SSH key\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tssh-key:list (ssh-keys)\n\t \t\t\t\tGets a list of SSH keys in your account\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\ttunnel:close\n\t \t\t\t\tCloses SSH tunnels\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\ttunnel:info\n\t \t\t\t\tViews relationships info for SSH tunnels\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\ttunnel:list (tunnels)\n\t \t\t\t\tLists SSH tunnels\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\ttunnel:open\n\t \t\t\t\tOpen SSH tunnels to an app's relationship\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tuser:add\n\t \t\t\t\tAdds a user to the project\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tuser:delete\n\t \t\t\t\tDeletes a user from the project\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tuser:list (users)\n\t \t\t\t\tLists users for the project\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tuser:role\n\t\t\t\t\tView to change a user's role \n\t\t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tvariable:delete\n\t \t\t\t\tDeletes an environment variable for a specific environment/Git branch\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tvariable:get (variables, vget)\n\t \t\t\t\tViews variable(s) for a specific environment/Git branch\n\t \t\t\t\t\n\t \t\t\t\t\n\t \t\t\t\tvariable:set (vset)\n\t \t\t\t\tSets an environment variable for a specific environment/Git branch\n\t \t\t\t\t\n\t \t\t\n\n\nFor a changelog, see the next section.\n\nUpgrade Magento Cloud CLI\nWhen you login to the Magento Cloud CLI, it checks for available updates. You can enter y for yes to upgrade. After upgrading, you can login and use the magento-cloud list command to see a list of all commands.\n\nChangelog for Magento Cloud CLI\nCurrently, we do not have a changelist of changes for this feature. We will add a changelist for current and future updates. For a general changelog, you can review the Platform.sh CLI changelog.\n\n\n\t     \n\t         \n\t             Version\n\t             Change\n\t         \n\t\t\n\t\t\t\n\t \t\t\t\t\n\t \t\t\t\t1.11.X\n\t \t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tlocal:clean command has been changed to clean. Enter magento-cloud clean --help for more information. You may not find the command on the list.\n\t\t\t\t\tAdded local:dir to locate the root directory. You should enter a sub-directory arguement to locate specific information for local, web, or shared.\n\t\t\t\t\t\n\t \t\t\t\t\n\t\t\t\n\n",
      "url": "/guides/v2.0/cloud/reference/cli-ref-topic.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-cli-cli-upgrade-html": {
      "title": "Command-line upgrade",
      "content": "Command-line upgrade\nYou can upgrade Magento from the command line if you installed the software using any of the following:\n\n\n  Downloaded the metapackage using composer create-project\n  Installed the compressed archive\n\n\n\n \tIf you cloned the Magento 2 GitHub repository, you cannot use this method to upgrade; instead, see Update the Magento application.\n \t\tIf you configured Magento use use pub as its root directory, see the next section.\n \t\tIf you're upgrading to Magento 2.1 (including a Release Candidate) from Magento 2.0.7 or earlier and you installed sample data, see Command-line upgrade to Magento 2.1 with sample data instead of this topic.\n\n\n\n    If you're upgrading to version 2.1, see Upgrade to Magento version 2.1 (June 22, 2016).\n    \tIf you're upgrading from Magento Open Source or Magento Commerce 2.0.0 or 2.0.1, you must first perform the tasks discussed in the Technical Bulletin (1/28/16).\n\n\nPrerequisite: pub directory root\nThis section applies to you only if you set the Magento root directory to &lt;your Magento install dir&gt;/pub. If you did not do this, skip this section and continue with the next section.\n\nIf you use pub as your Magento root directory: \n  \n    For the upgrade, create another subdomain or docroot that uses the Magento installation directory as its root.\n\n    Run the System Upgrade utility using that subdomain.\n  \n  \n    Use the following procedure to upgrade Magento using the command line.\n  \n\n\n\nPut your store in maintenance mode\nTo prevent access to your store while it’s being upgraded, put your store in maintenance mode.\n\n\n  \tYou can optionally create a custom maintenance mode page.\n\n\nTo enable maintenance mode: \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following command:\n\n    php &lt;your Magento install dir&gt;/bin/magento maintenance:enable\n    \n\n    For additional options, see Enable or disable maintenance mode.\n  \n\n\n\nUpgrade using the command line\n\nTo upgrade using the command line: \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the directory in which you installed the Magento software.\n\n    For example, cd /var/www/html/magento2\n  \n  \n    Enter the following commands in the order shown:\n\n    composer require &lt;product&gt; &lt;version&gt; --no-update\ncomposer update\n    \n\n    For example, to upgrade to Magento Open Source version 2.0.13, enter:\n\n    composer require magento/product-community-edition 2.0.13 --no-update\ncomposer update\n    \n\n    To upgrade to Magento EE version 2.0.13, enter:\n\n    composer require magento/product-enterprise-edition 2.0.13 --no-update\ncomposer update\n    \n\n    \n  \t\tIf an error displays about a missing .gitignore files, see the Technical Bulletin (1/28/16).\n\n  \n  If prompted, enter your authentication keys.\n  \n    Manually clear var subdirectories:\n\n    rm -rf &lt;Magento install dir&gt;/var/cache/*\nrm -rf &lt;Magento install dir&gt;/var/page_cache/*\nrm -rf &lt;Magento install dir&gt;/var/generation/*\n    \n\n    \n      If you use a cache storage other than filesystem (e.g., Redis, Memcached, etc.) you need to manually clear the cache there too.\n    \n  \n  \n    Update the database schema and data:\n\n     php bin/magento setup:upgrade\n    \n  \n  \n    Put your storefront online (that is, cancel maintenance mode):\n\n    php bin/magento maintenance:disable\n    \n  \n  \n    Restart Varnish if you use it for page caching.\n\n    service varnish restart\n    \n  \n  \n    Access your storefront.\n\n    The following error might display:\n\n    We're sorry, an error has occurred while generating this email.\n    \n\n    If so, perform the following tasks:\n\n    \n      Reset file system ownership and permissions as a user with root privileges.\n      \n        Clear the following directories and try again:\n\n        &lt;your Magento install dir&gt;/var/cache\n&lt;your Magento install dir&gt;/var/page_cache\n&lt;your Magento install dir&gt;/var/generation\n        \n      \n    \n  \n\n\n",
      "url": "/guides/v2.0/comp-mgr/cli/cli-upgrade.html"
    }
    ,
  
    "guides-v2-0-cloud-architecture-cloud-architecture-html": {
      "title": "Magento Commerce (Cloud) architecture",
      "content": "Each plan has a unique architecture to drive your Magento development and deployment process. Both, the Starter plan architecture and the Pro plan architecture, deploy databases, web server, and caching servers across multiple environments for end-to-end testing while supporting continuous integration.\n\nStarter projects\nThe Starter plan architecture has four environments:\n\n\n  Integration—The Integration environment provides three testable environments. Each environment includes an active Git branch, database, web server, caching, services, environment variables, and configurations.\n  Staging—As code and extensions pass your tests, you can merge your Integration branch to a Staging environment, which becomes your pre-Production testing environment. It includes the staging active branch, database, web server, caching, services, environment variables, configurations, and services, such as Fastly and New Relic.\n  Production—When code is ready and tested, all code merges to master for deployment to the Production live site. This environment includes your active master branch, database, web server, caching, third-party services, environment variables, and configurations.\n  Inactive—You can have an unlimited number of inactive branches.\n\n\nPro projects\nThe Pro plan architecture has a global master with three environments:\n\n\n  Integration—The Integration environment provides a testable environment that includes a database, web server, caching, some services, environment variables, and configurations. You can develop, deploy, and test your code before merging to the Staging environment.\n    \n      Inactive—You can have an unlimited number of inactive branches.\n    \n  \n  Staging—The Staging environment is for pre-Production testing and includes a database, web server, caching, services, environment variables, configurations, and services, such as Fastly.\n  Production—The Production environment includes a three-node, high-availability architecture for your data, services, caching, and store. This is your live, public store environment with environment variables, configurations, and third-party services.\n\n\n\n  For Pro projects created before October 23, 2017, the architecture is slightly different. See Pro architecture (legacy).\n\n",
      "url": "/guides/v2.0/cloud/architecture/cloud-architecture.html"
    }
    ,
  
    "guides-v2-0-cloud-reference-cloud-composer-html": {
      "title": "Composer",
      "content": "We use Composer to manage dependencies and upgrades in Magento Commerce (Cloud) and provide context about the included packages, what the packages do, and how they fit together. We highly recommend experience with Composer.\n\nComposer is a dependency manager for PHP. Composer manages the dependencies you require on a project by project basis. This means that Composer will pull in all the required libraries, dependencies and manage them all in one place. For Magento Commerce (Cloud), we use composer.json and composer.lock to manage your modules list, packages, dependencies, and so on for determining upgrades, patches, hotfixes, and more. Magento extension and module developers use composer.json to also manage their product installations and upgrades. For details, see Your project’s Composer files.\n\nThe following sections detail the specifics of Magento Commerce (Cloud) composer packages, how they work, and what they do within the code base.\n\nFor information on what files should and shouldn’t be in source control, see Project structure. We provide a .gitignore file to aid.\n\nYour project’s Composer files\nYour project root directory contains composer.json and composer.lock.\n\nYou edit composer.json to specify dependencies for your Magento Commerce (Cloud) project. For example, when you install an extension or module, you update composer.json to add the extension to the list. You can either edit it manually or the Component Manager can do it for you.\n\nThe file composer.lock stores a set of exact version dependencies that satisfy all of the version constraints of every requirement for every package in the dependency tree of the project.\n\nThe following commands determine what’s in composer.lock:\n\n\n  composer update, which you must run every time you add or remove dependencies in composer.json.\tcomposer update updates composer.lock.\n  composer install reads composer.lock, not composer.json, to download dependencies. You must keep an up-to-date copy of composer.lock in your Cloud Git repository.\n\n\nThe workflow is as follows:\n\n\n  Make a change to composer.json. For example, edit this file when installing an extension or module.\n  Run composer update.\n  Add composer.lock to or update it in your Cloud Git repository.\n  Push the changes to the Cloud environment, which causes Cloud to build and deploy the environment.\n\n\nDuring the build phase, the Cloud environment runs composer install on a fresh clone of your Git branch to retrieve the latest dependencies.\n\nMagento composer commands\nWe use the following commands for Magento:\n\n\n  composer install: Use this command if you know extension and base code is updated. This command uses composer.lock, not composer.json. The command reads the lock file and checks the versions installed and listed in the file. If new lines are included or the file has a later version, the code is installed. After initial install, using the command only installs new code if you add new extensions or versions to composer.lock.\n  composer update: Use this command when you need to perform complete updates of all extensions and base code. This command uses composer.json, not composer.lock.\n\n\nMagento Commerce (Cloud) packages\nThe following sections discuss the Composer packages used by Magento Commerce:\n\n\n  magento/magento-cloud-metapackage\n  magento/magento-cloud-configuration\n  magento/product-enterprise-edition\n\n\nmagento/magento-cloud-metapackage\nmagento/magento-cloud-metapackage should be the only package in the require section of your composer.json. This is a metapackage and does not contain any code.\n\nThe metapackage depends on the appropriate versions of magento/magento-cloud-configuration and magento/product-enterprise-edition. At any given version, this package requires the same version of magento/product-enterprise-edition. Therefore, to use Magento Commerce version 2.1.4, for example, composer.json must specify a requirement for magento/magento-cloud-metapackage version 2.1.4.\n\nThis package depends on a floating version of magento/magento-cloud-configuration (abbreviated MCC). It depends on the major and minor version of MCC that correspond to the specified Magento Commerce version, and floats on the patch version so that compatible updates to this packages can be automatically pulled by running composer update.\n\nmagento/magento-cloud-configuration (MCC)\nThis package contains the following scripts and magento commands that automatically perform building and deployment of the codebase on the cloud environment:\n\n\n  pre-deploy.php\n  bin/magento magento-cloud:deploy\n  bin/magento magento-cloud:build\n\n\nmagento/magento-cloud-configuration also contains patch files that are specific to Cloud.\n\nThere is a many-to-one relationship between the MCC version and Magento versions.\n\nFor Magento Commerce, versions are specified as 2.&lt;x&gt;.&lt;y&gt;.\n\nMCC versions are specified as: &lt;100 + x&gt;.&lt;y&gt;.*. For example, Magento Commerce 2.1.4 is associated with MCC 101.4.0. Subsequently, a new version of MCC could be released that corresponds to the same Magento Commerce version, and it would be 101.4.1.\n\nWe release updated MCC code to add a new patch or to improve the build and deploy hooks.\n\nTo check for patches, you can check the vendor/magento/magento-cloud-configuration/patches folder.\n\nmagento/product-enterprise-edition\nThis metapackage requires Magento application components, including modules, frameworks, themes, and so on.\n\nBase packages and file marshalling\nMagento contains two base packages, magento/magento2-base and magento/magento2-ee-base. These packages contain interstitial files that cannot be classified as extensions, themes, frameworks, or language packages; for example, sample server configuration files, PHP entry points, and so on.\n\nThese files are location-dependent, and cannot reside in the vendor directory. They are distributed as part of the base packages, and they rely on hooks located in the magento/magento-composer-installer package, which marshals them to the appropriate locations.\n\nOne way in which Magento Commerce deploys differently than other Magento installations is that it does not marshal base packages on the Cloud environment. This could change in a future Cloud release, but for now, on the Cloud environment specifically, the marshalling functionality of magento/magento-composer-installer is disabled.\n\nTherefore, when upgrading to a new Cloud version or adding, removing, or changing any packages that rely on file marshalling, you must:\n\n\n  \n    Run composer update locally.\n\n    The new version of the base packages are marshalled out into the Cloud project root directory, which means files are added, removed, and changed.\n\n    File marshalling works on your local system but not on the Cloud server.\n  \n  Add and commit these updated files to your Cloud Git repository.\n  Push the changes to your Cloud integration environment.\n\n\nFor more information, see:\n\n\n  Upgrade and test Magento Commerce for upgrading to a new version of Magento\n  Patch and test Magento Commerce for applying patches\n\n\nThis makes sure that base files are placed in the correct location and are under source control. If you notice any problems after deploying an updated version of Magento, one of the first things to check should be whether all of the base package files were added to source control.\n",
      "url": "/guides/v2.0/cloud/reference/cloud-composer.html"
    }
    ,
  
    "guides-v2-0-cloud-basic-information-cloud-fastly-html": {
      "title": "Fastly",
      "content": "Fastly is a CDN based on Varnish caching, basically a cloud varnish service. When working with Fastly, you are also working directly with a heavily customized version of Varnish (2.1). Fastly with Varnish caches your site pages, assets, CSS, and more in backend datacenters you set up. As customers access your site and stores, the requests hit Fastly to load cached pages faster.\n\nFor Magento Commerce (Cloud), you receive Fastly CDN and DDoS services. When you update products, catalogs, content, and more, Fastly purges that specific cached content to refresh and provide the latest changes.\n\nWe provide Fastly service credentials including a Fastly Service ID and API key pair for your Staging and Production environments. To set up Fastly, you enter credentials, upload VCL snippets, and configure backends (with Origin shields) in Staging and Production environments, not in Integration.\n\nFastly provides the following powerful tools for Magento:\n\n\n  Create edge and ACL dictionaries with VCL snippets (Varnish 2.1 compliant) to modify how caching responds to requests\n  \n    Three types of purges for:\n\n    \n      Quick Purge (by URL)\n      Surrogate/key purge using tags to purge specific HTML, images, categories, and so on\n      Purge all, which clears everything in the cache\n    \n  \n  GeoIP extension support\n  Force unencrypted requests over to TLS\n\n\nWe highly recommend enabling and using Fastly for your caching and CDN. The only situation you may not want to enable is for a headless deployment.\n\nWe strongly recommend installing Fastly module 1.2.33 or later.\n\nFastly and 503 timeouts\nWhen you receive a 503 error from Fastly, it may be due to a lengthy operation or performing bulk actions. Fastly has a default 60 second time out. Any request that takes longer than 60 seconds will return a 503 error.\n\nIf you receive a 503 error, make the request directly to the origin or review logs. For details, see Fastly troubleshooting.\n\nFastly can be bypassed for the Magento Admin to perform long running or bulk actions and API access to avoid 503s. For Fastly module 1.2.22 and later, the timeout for the Magento Admin was extended to three minutes.\n\nWe provide VCL snippet instructions for extending the timeout for the Magento Admin.\n\nBackends and Origin shields\nBackend settings provide fine tuning for Fastly performance with Origin shielding and timeouts. A backend is a specific location (IP or domain) with configured Origin shield and timeout settings for checking and providing cached content.\n\nOrigin shielding routes all requests for your store to a specific Point of Presence (POP). When a request is received, the POP checks for cached content and provides it. If it is not cached, it continues to the Shield POP, then to the Origin server which caches the content. The shields reduces traffic directly to the origin.\n\nWe provide detailed instructions for configuring backends when you configure Fastly.\n\nBasic authentication\nBasic authentication is a feature to protect every page and asset on your site with a username and password. We do not recommend activating basic authentication on your Production environment. You can configure it on Staging to protect your site when completing development.\n\nIf you add user access and enable basic authentication on Staging, you can still access the Magento Admin without requiring additional credentials to enter.\n\nCustom VCLs and actions\nFastly provides an extremely custom code friendly method for creating lists of items like IPs and domains to complete actions via Fastly and Varnish code blocks. For example, with edge and ACL dictionaries and VCL code, you could allow, block, or redirect access for specific users or IPs.\n\nAfter you have set up Fastly, you can create custom VCL snippets using these edge dictionaries and ACLs.\n\nEdge dictionaries\nSave key-value pairs on Fastly Edge nodes of dictionary containers and items to invoke with VCL snippets in your site. You have up to 1,000 entries per dictionary.\n\nYou create an edge dictionary then add items to it of a key and its value. For example, you could create an edge dictionary of banned bad refer sites from accessing your site. The key-value pairs would be the refer site URLs (www.example.com) and a value of 1. Then create a custom VCL snippet to return a 403 Forbidden to those sites when they access your site.\n\nAnother example routes to a different WordPress backend for an edge dictionary of WordPress URLs.\n\nEdge ACLs\nACLs are access control lists that allow you to manage IP addresses to allow or block access to resources. You could use edge ACLs with VCL snippets to block IP addresses or provide access. For example, use edge ACLs and a custom VCL snippet to white list IPs to access your site.\n\nVCL snippets\nWith edge dictionaries and edge ACLs, you can create custom Varnish Configuration Language (VCL) snippets to Fastly and your site. VCL snippets are small chunks of logic and code that can be included directly into your service configuration. They are generated, compiled, and transmitted to all Fastly caches, loaded, and activated without waiting for maintenance windows without server downtime.\n\nFor a few examples, you can create VCL snippets to:\n\n\n  Block access to the site using an edge dictionary of domains\n  Whitelist and allow access using an edge ACL\n  Redirect blog links from your store to a blog site\n  Extend timeouts for Fastly and Magento\n\n\nAfter you have set up Fastly, we provide detailed instructions on creating custom Fastly VCL snippets.\n\nForce TLS\nFastly supports forcing unencrypted requests to TLS through the Force TLS feature. Set up a secure base URL in Magento and turn on the Force TLS option in the Fastly extension. For details and instructions, see Fastly’s Force TLS guide.\n\nGeoIP service support\nFastly provides a GeoIP service and supports some GeoIP functionality. GeoIP handling manages visitor redirection (automatically) and store matching (select from list) based on their obtained country code. For more information, see Fastly’s GeoIP documentation.\n\nInstallation and configuration\nThe installation and configuration process is:\n\n\n  Install the Fastly module in an Integration branch, without configuring settings or entering credentials.\n  Deploy the code to integration then to Staging and Production\n  Configure Fastly in Staging and Production, not in Integration or your local\n  Test Fastly for caching\n\n\nFor instructions, see Set up Fastly. After you have configured it, you can continue with advanced options including custom VCL snippets.\n\nRelated topics\n\n\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/basic-information/cloud-fastly.html"
    }
    ,
  
    "guides-v2-0-cloud-basic-information-cloud-plans-html": {
      "title": "Subscriptions and plans",
      "content": "Magento Commerce (Cloud) includes the following plans with different infrastructures for smaller to larger stores and supported products. For a breakdown of the plans and to start your free 30-day trial, see our Plan Comparison.\n\n\n  \n    \n      \n      Starter\n      Pro\n    \n    \n      Core features\n      \n        \n          All Magento 2 core features\n          PayPal Onboarding Tool\n        \n      \n      \n        \n          All Magento 2 core features\n          PayPal Onboarding Tool\n          \n            B2B module\n          \n          \n            BI Essentials\n          \n        \n      \n    \n    \n      Infrastructure and deployment\n      \n        \n          Platform-as-a-service (PaaS) based Production, Staging, and development environments (4 total active environments) optimized for Magento\n          Continuous cloud integration tools with unlimited users\n          Fastly Content Delivery Network (CDN) and DDoS protection with generous bandwidth allowances\n          \n            New Relic APM (Performance Monitoring) on 3 branches: master and 2 of your choice\n          \n          \n            Blackfire.io Enterprise (Performance Testing)\n          \n        \n      \n      \n        \n          Platform-as-a-service (PaaS) based Integration development environments (8 total active environments) optimized for Magento\n          Infrastructure-as-a-Service (IaaS) dedicated for Production and Staging\n          Continuous cloud integration tools with unlimited users\n          Fastly Content Delivery Network (CDN) and DDoS protection with generous bandwidth allowances\n          \n            New Relic APM (Performance Monitoring) on 3 branches: Integration master, Staging, and Production\n          \n          \n            Blackfire.io Enterprise (Performance Testing)\n          \n        \n      \n    \n    \n      24x7 email support\n      24x7 monitoring and email support for the core application and the cloud infrastructure\n      24x7 monitoring and email support for the core application and the cloud infrastructure\n    \n    \n      Business Intelligence\n      \n      Magento Business Intelligence Essentials giving you full visibility into your data with 75 reports and 5 dashboards available out of the box\n    \n    \n      High availability infrastructure\n      \n      High availability architecture with a three-server setup in the underlying Infrastructure-as-a-Service (IaaS) to provide enterprise grade reliability and availability\n    \n    \n      Dedicated hardware\n      \n      Isolated and dedicated hardware setup in the underlying Infrastructure-as-a-Service (IaaS) to provide even higher levels of reliability and availability\n    \n    \n      Dedicated Launch Manager\n      \n      Dedicated technical account management for the initial launch period, starting with your subscription until your initial site launch\n    \n  \n\n\nAdditional options\nTo further customize your Magento Commerce (Cloud) project and account, you can purchase additional options.\n\nDomain-Validated SSL (HTTP) certificate\nIf you don’t want to use the shared SSL certificate, you can purchase this option as part of your subscription. The cost of the service includes adding and deploying the Domain-Validated SSL certificate to all Fastly servers and services.\n\nThis service is an additional cost for your contract.\n\nAWS Managed VPN Connection Service access\nIf you need access to your own Virtual Private Network (VPN) to access your Magento Commerce environment, you can purchase this option to gain access to the AWS Managed VPN Connection Service. We will provide information required for configurations including the required IPs and modes.\n\nThis service is an additional cost for your contract. VPN configurations require technical resources and requirements for configuring. For information on the AWS service, see their AWS Managed VPN Connections and  VPN Connections.\n",
      "url": "/guides/v2.0/cloud/basic-information/cloud-plans.html"
    }
    ,
  
    "guides-v2-0-cloud-requirements-cloud-requirements-html": {
      "title": "Technologies and requirements",
      "content": "This topic describes technologies, knowledge, accounts, and steps to complete when working with your Magento Commerce (Cloud) code, environments, and store(s) and site(s). If you are not experienced with a technology, we provide additional links and information to get you started.\n\nTechnologies\nThe following technologies are requirements for developing and deploying your store code:\n\n\n  Git\n  Composer\n  Magento 2\n  Continuous Integration\n  Architectures including Starter or Pro architecture\n\n\nHere are some advanced technologies we recommend getting familiar with:\n\n\n  Fastly for CDN and caching (based on Varnish)\n  Blackfire Profiler for performance testing\n  New Relic APM for performance testing\n  GitHub if you need a Git repo\n  Bitbucket if you need a Git repo\n\n\n\n  Magento Commerce (Cloud) does not support the split database performance solution at this time.\n\n\nWhat is Git\nGit is the heart of all your code in repositories. It acts as a version control system through branches from a parent. Multiple developers can work together in personal branches all merging into the same parent. You can also work on features at the same time in multiple branches.\n\nWe hope you have a good working knowledge of Git. Need some help? Don’t worry, we have you covered with some of our favorite links and information. We’ll also include a Git guide to branching and developing soon.\n\n\n  Git documentation and videos from the makers of Git\n  Git cheatsheet and quick guide from Roger Dudler\n  Git video with DevForge to understand how people use the repo and commands with a fun story\n\n\nTo get started with Git, you should have Git installed on your local.\n\n\n  In addition to Git's requirements for valid branch names, Magento Commerce adds two additional requirements:\n  The / character isn't allowed.\n  \tBranch names must be case-insensitively unique. In other words, if you have a branch named _CaSe_, you cannot create another branch named _case_.\n\n\nYou must use Secure Shell (SSH) and not HTTPS to connect to the Git repository. We walk you through the process of setting this up with your local.\n\nSupported software versions\nMagento Commerce (Cloud) uses:\n\n\n  Operating system: Debian GNU/Linux 8 (jessie)\n  Web server: nginx 1.8\n\n\nThis software is not upgradable but versions for the following software is configurable:\n\n\n  PHP -  For Magento Commerce (Cloud) 2.0.X - 2.1.X we support 5.5, 5.6, and 7.0. For Magento Commerce (Cloud) 2.2.X, please use 7.0 at this time. Due to a dependency within the infrastructure, we cannot support PHP 7.1 in Pro plan Staging and Production environments.\n  MySQL 5.6 and 5.7\n  Solr 4.10\n  Redis 2.8 and 3.0\n  RabbitMQ 3.5\n  Elasticsearch 1.4, 1.7, and 2.4\n\n\nFor Staging and Production, you will use Fastly for CDN and caching. We recommend installing Fastly module 1.2.33 or later. For details, see Fastly in Cloud.\n\nFor detailed information on supported versions and extensions, see the following information. These files allow you to configure software versions you want to use in your implementation.\n\n\n  .magento.app.yaml\n  routes.yaml\n  services.yaml\n\n\nRequirements to get started\nTo get started as a developer in a Magento Commerce (Cloud) project, you need to set up the following:\n\n\n  Set up a local development environment. Your local workspace works best as a virtual system (VM or container) with all prerequisities installed and the project master Git branch cloned. You’ll develop in branches to add modules, extensions, 3rd party integrations, and configurations. We recommend reading over develop and deploy process for your Starter or Pro plan.\n  Get repo.magento.com credentials in your account\n  Get a project invite by the Project Owner or a super user to the project\n  Get Magento authentication keys from the Project Owner\n\n\nWe walk you through everything you need to do and know.\n\nMagento configurations\nBefore you test any custom code in your local Magento Commerce environment, you must do all of the following:\n\n\n  For Pro, set the database auto_increment_increment to 3\n  \n    Test with the correct file permissions in PRODUCTION mode\n\n    Correct permissions only allow write access to var, pub/static, pub/media, and app/etc\n  \n  Test with minification for HTML, JavaScript, and CSS enabled\n  Test with Redis enabled for page cache and session cache\n  Install and configure Fastly\n  Test using Varnish for the page cache\n\n\nDevelopment and testing\nFor development and testing, we recommend the following:\n\n\n  \n    Test your site in an Integration (development) and Staging (near-production) environment as you complete modifications\n\n    You can enable and test individual features, new extensions, and 3rd party integration on different environments prior to merging into a single environment.\n  \n  \n    Verify magento setup:install and magento setup:upgrade commands work during the build and deploy process and that any extensions and customizations compile correctly in Production mode\n\n    You can set an environment variable or enter a CLI command for this specific mode.\n  \n  Fully test your site in Staging as a merchant and customer prior to Production deployment\n  Verify the Fastly VCL is uploaded to Fastly\n  Send a ticket with all storefront domains when going live (to be added to the shared SSL (HTTPS) certificate)\n  For custom deploy hooks in Integration, open a Support ticket to have them added to the Staging and Production deployment process\n  Profile key flows and customizations using Blackfire.io\n\n\nLicense and authentication requirements\nThe Account Owner creates the initial Magento Commerce (Cloud) account with a purchased subscription. This owner should invite all technical staff, consultants, and Magento partners involved in the code and production of the stores to the project. The invitation provides access to the Git code, environments, and ticketing for the project.\n\nTo work with and deploy stores, you need the following:\n\n\n  Magento Commerce (Cloud) account already created or created via an invitation\n  Project invitiation for contributing developers from the Account Owner or a super user\n  Magento authentication key for each user who contributes to the project\n\n\nYour Magento Commerce account must authenticate using any of the following:\n\n\n  GitHub\n  Bitbucket\n  Google\n  Create your own Cloud account\n\n\nRelated topics\n\n  Cloud Architecture\n  First-time local environment setup\n  Develop and Deploy Workflow\n  Go live and launch\n\n",
      "url": "/guides/v2.0/cloud/requirements/cloud-requirements.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-cloud-vcl-custom-snippets-html": {
      "title": "Custom Fastly VCL snippets",
      "content": "Fastly and Magento Commerce (Cloud) support creating custom Varnish Configuration Language (VCL) snippets. For best results, we recommend creating Edge Dictionaries and Edge ACLs for your VCL snippets. You are free to customize your Fastly VCL snippets to complete custom code. The following examples and instructions walk through creating edge dictionaries, edge ACLs, and VCL snippets.\n\nUse the terminal application to create and upload VCL snippets. You do not need an SSH connection into a specific environment. The following walk-through show you how to create regular VCL snippet files using JSON code.\n\nGather the following information:\n\n\n  Fastly Service ID for Staging and Production to assign the snippets to a specific service or environment\n  Fastly API key used for the FASTLY_API_TOKEN in the commands\n\n\nReview the following sections:\n\n\n  Understand VCL snippet values—Provides an overview of values for Fastly VCL JSON.\n  The custom VCL snippet process—Walks you through the entire process, including links to custom VCL snippets you can create with ease.\n\n\nUnderstand VCL snippet values\nYou can use the following key/value pairs in JSON snippets in VCL files and in cURL commands.\n\n\n  \n    Value\n    Description\n  \n  \n    service_id\n    The ID of a specific Staging or Production environment. We provide this value. Add the SERVICE_ID key to set up your bash script for custom VCL snippets.\n  \n  \n    API_KEY\n    The API Key to access your Fastly account. We provide this value. Add this value to your bash script.\n  \n  \n    version\n    The version of service for validating and activating. Fastly uses Editable Version # in their example values. Add the SERVICE_ID_VERSION key in the bash script.\n  \n  \n    type\n    \n      Specifies a location for the generated snippet, such as init (above subroutines) and recv (within subroutines). See Fastly VCL snippet object values for information on these values.\n    \n  \n  \n    content\n    The snippet of VCL code to run. We recommend keeping this code in a single line. The VCL snippet code, cURL commands, and bash script require the content code in a single line.\n  \n  \n    priority\n    \n      Determines the order VCL snippets call. Lower values run first, from `1` to `100`. All uploaded snippets from a Magento module have a value of `50`. If you want an action to occur last or to override Magento default VCL snippets, use a higher number, such as `100`. To have code occur immediately, use a lower value, such as `5`.\n      Any VCL snippet with a priority value of `5` runs immediately, which is best for blacklists, whitelists, and redirects. Priority `100` is best for overriding default VCL snippet code and for extending timeouts. If you do not set a priority with your cURL command, the default value set is `100`.\n    \n  \n  \n    dynamic\n    \n      Indicates if this is a dynamic snippet or regular snippet.\n    \n  \n  \n    active\n    Indicates if the snippet or version is activated and in use. Returns true or false. Make note of the version number for an active snippet. Use this to clone the version.\n  \n\n\nThe following is an example of a returned JSON for a customer VCL snippet:\n\n{\n  \"id\": \"62Yd1WfiCBPENLloXfXmlO\",\n  \"service_id\": \"{FASTLY_SERVICE_ID}\",\n  \"version\": \"{Editable Version #}\",\n  \"name\": \"apply_acl\",\n  \"priority\": \"100\",\n  \"dynamic\": \"1\",\n  \"type\": \"hit\",\n  \"content\": \"if ((client.ip ~ {ACLNAME}) &amp;&amp; !req.http.Fastly-FF){ error 403; }\",\n  \"created_at\": \"2016-08-15T09:37:10+00:00\",\n  \"updated_at\": \"2016-08-15T09:37:10+00:00\",\n  \"deleted_at\": null\n}\n\n\nThe custom VCL snippet process\nTo create custom VCL snippets, prepare the VCL configurations, save them to files, and continue with the following:\n\n\n  Locate the active VCL version. Use this version to clone.\n  Clone the active VCL version. All changes save to this new version. It remains inactive until you activate it.\n  Create VCL snippets in VCL files. We provide a number of examples to get you started.\n  Add VCL snippets to Fastly configuration. Repeat this step for all JSON files.\n  Validate and activate the new configuration and all associated VCL snippets.\n\n\nThe following are best practices and recommendations:\n\n\n  The default VCL snippets you uploaded include a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also, consider the priority of your custom snippets and whether they should override the default snippets.\n  Do not forget to always locate and clone the active version, and edit the bash script with the new version! Version is not part of your VCL snippet files.\n  If you want to override values and settings from the default Fastly VCL snippets, we recommend creating a new snippet with updated values and code with a higher priority value of 100. You should not try to override default VCLs. We provide an example for Custom extend Admin timeout VCL.\n\n\nExport Fastly Service ID and API Token\nYou can save Fastly service credentials into the bash environment variables and use them in cURL commands:\n\nexport FASTLY_SERVICE_ID=&lt;Service ID&gt;\nexport FASTLY_API_TOKEN=&lt;API Token&gt;\n\n\nThe exported environment variables are available only in the current bash session and are lost when you close the terminal. You can redefine variables simply by exporting a new value. To view the list of exported variables related to Fastly:\n\nexport | grep FASTLY\n\n\nLocate the currently active VCL snippet version\nTo view a list of all VCL snippets by version:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/active\n\n\nLook for the active key from the returned list. You need the version to perform a clone in the next section.\n\nFor more information on this Fastly API, see this get version command.\n\nClone the active VCL version and all snippets\nClone the version using the active version number. This creates a copy of all existing VCL snippets for that version using a new version number. After you clone the version, you can modify and add VCL snippets. Save the new version number for the bash script.\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/{Current Active Version #}/clone -X PUT\n\n\nYou can save the new version into a bash environment variable for use in cURL commands:\n\nexport FASTLY_VERSION=&lt;Version&gt;\n\n\nFor more information on this Fastly API, see this clone command.\n\nCreate custom VCL snippets\nCreate a JSON file with the following content and format:\n\n{\n  \"name\": \"&lt;name&gt;\",\n  \"dynamic\": \"0\",\n  \"type\": \"&lt;type&gt;\",\n  \"priority\": \"100\",\n  \"content\": \"&lt;code all in one line&gt;\"\n}\n\n\nThe values include:\n\n\n  name—Name for the VCL snippet.\n  dynamic—Indicates if this is a dynamic snippet or regular snippet.\n  type—Specifies a location for the generated snippet, such as init (above subroutines) and recv (within subroutines). See Fastly VCL snippet object values for information on these values.\n  priority—Determines the order VCL snippets call. Lower values run first, from 1 to 100. All uploaded snippets from a Magento module have a value of 50. If you want an action to occur last or to override Magento default VCL snippets, use a higher number, such as 100. To have code occur immediately, use a lower value, such as 5.\n  content—The snippet of VCL code to run in one line, without line breaks.\n\n\nFor detailed examples and custom code, see the following:\n\n\n  Custom whitelist VCL\n  Custom blacklist VCL\n  Custom extend Admin timeout VCL\n  Custom redirect to Wordpress VCL\n  Custom block bad referer VCL\n\n\nAdd VCL snippets to Fastly configuration\nTo upload a prepared VCL snippet:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/snippet -H 'Content-Type: application/json' -X POST --data @&lt;filename.json&gt;\n\n\nThe &lt;filename.vcl&gt; is the name of the file you prepared in the previous step. Repeat this command for each VCL snippet.\n\nIf you receive a 500 Internal Server Error response from the Fastly service, check if you are trying to upload a valid JSON file.\n\nValidate and activate snippets for a version\nWhen you add the VCL snippets to the version, Fastly creates and assigns it to your service according to the version number. Next, validate the VCL snippets for the version using with Fastly:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/validate\n\n\nIf you received \"status\": \"ok\", activate the version for that service.\n\nAssuming there were no errors (if there are errors, fix them before proceeding), activate the version:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/activate -X PUT\n\n\nAll VCL snippets associated with the version become active. This deactivates snippets using a previous version.\n\nManage regular VCL snippets with curl\nTo list all regular VCL snippets attached to a service:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/snippet\n\n\nTo review an individual snippet:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/snippet/&lt;snippet_name&gt;\n\n\nThe &lt;snippet_name&gt; is the name of a snippet, such as my_regular_snippet.\n\nTo update a snippet, modify the JSON file you prepared on the Create VCL snippets step and send the following request:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/snippet/&lt;snippet_name&gt; -H 'Content-Type: application/json' -X PUT --data @&lt;filename.json&gt;\n\n\nIf you want to override values and settings from the default Fastly VCL snippets, we recommend creating a new snippet with updated values and code that use a priority of 100.\n\nTo delete an individual VCL snippet using the API, get a list of snippets and enter a curl command with the specific snippet name to delete:\n\ncurl -H \"Fastly-Key: ${FASTLY_API_TOKEN}\" https://api.fastly.com/service/${FASTLY_SERVICE_ID}/version/${FASTLY_VERSION}/snippet/&lt;snippet_name&gt; -X DELETE\n\n\nFastly resources\nYou can learn more about creating VCL snippets with the following Fastly resources:\n\n\n  All Fastly VCL content\n  Fastly VCL guide\n  Mixing and matching Fastly VCL with custom VCL\n  Fastly VCL snippet object values\n\n\nFastly supports two types of snippets:\n\n\n  Regular snippets are versioned VCL snippets. The code and settings are locked per version to create, modify, and deploy with the Fastly service.\n  Dynamic snippets are snippets you can only create via API calls. These snippets do not have a version and deploy separately from your Fastly service.\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/cloud-vcl-custom-snippets.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-code-generation-html": {
      "title": "Code generation",
      "content": "Overview of code generation\nThe Magento application generates code to create non-existent classes. As an example, look at the \\Magento\\Customer\\Model\\Resource\\AddressRepository constructor. A snippet follows:\n\n...\n    public function __construct(\n        \\Magento\\Customer\\Model\\AddressFactory $addressFactory,\n...\n\n\nThe first constructor parameter has a type of Magento\\Customer\\Model\\AddressFactory. However, this class does not exist in \\Magento\\Customer\\Model in the Magento 2 codebase. The Magento application generates this class because its name uses a recognized convention (in this case, because the name ends with Factory).\n\nUnlike some other languages or libraries, you can look at the generated code on the file system to see what really happens and still debug the code.\n\nWhen is code generated?\nProvided the Magento application is not set for production mode, code is generated when the Magento application cannot find a class when executing code.\n\nIn particular,\n\n\n  \n    A Factory class creates instances of a type. See Instantiating objects with factories for more information. Factories are directly referenced within application code.\n  \n  \n    You can designate a Proxy to be generated for a type in order to ensure the type is not instantiated until it is needed. See Proxies for more information. Proxies are directly referenced within DI configuration.\n  \n  \n    Interceptor classes are automatically generated to facilitate Magento’s plugin system. An interceptor class extends a type and is returned by the Object Manager to allow multiple plugin classes to inject logic into different methods. Interceptors work behind the scenes and are not directly referenced in application code.\n  \n\n\nYou can also use the code compiler to generate code at any time.  In Magento 2, “compiling” your application means performing code generation for any eligible class encountered by the configuration/code scanner, as well as performing a number of different dependency injection optimizations.\n\nWhy should you regenerate code?\nSuppose a Customer or Proxy class for a Customer class is generated and the Customer class has new methods added to it. Because a Customer or Proxy exists on the file system, it is not regenerated. However, the Customer or Proxy implementation is incomplete now because it does not have the new methods. In this case, you must regenerate the Customer or Proxy class.\n\nIf the code generator implementation itself is changed, you must regenerate all the classes. This is rare, however.\n\nAdvantages of generating code\nCode generation is required in Magento 2. Generating code assures you of the following:\n\n\n  The code is correct. You don’t have to worry that the generated code is delegating to the wrong method or forgetting a semicolon, and you don’t have to write tests for the generated code.\n  Code generation writes the boilerplate code to enable you to write more challenging and interesting code.\n  \n    Consistent implementation.\n\n    All generated Factories work the same way. After you know how one Factory works, you know how they all work.\n  \n\n\nObject Manager responsibility for code compilation\nWhen code changes as discussed in the preceding section, one of two Object Manager classes compiles it. The class is chosen based on whether or not the single-tenant compiler or the multi-tenant compiler has been run before.\n\nThe single-tenant and multi-tenant compiler create var/di/global.ser, which is a PHP serialized map of all constructor definitions mixed with object linking configuration defined in di.xml. di.xml is the dependency injection configuration. There is a global app/etc/di.xml and there can be one defined for every module.\n\n\n\nIf you&#8217;re preparing to deploy to production, you must use the multi-tenant compiler. There is a known issue with the single-tenant compiler that prevents it from compiling proxies.\n\n\nDepending on whether or not one of the compilers has been run before, the Magento application consumes the compilation using one of the following classes:\n\n\n  \n    Magento\\Framework\\Interception\\ObjectManager\\Config\\Compiled, which is used if global.ser exists.\n  \n  \n    Magento\\Framework\\Interception\\ObjectManager\\Config\\Developer, which is used if global.ser does not exist.\n\n    This class is slower than Magento\\Framework\\Interception\\ObjectManager\\Config\\Compiled.\n  \n\n\n\n\n  The Developer class has nothing to do with Magento's developer mode.\n\n",
      "url": "/guides/v2.0/extension-dev-guide/code-generation.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-demarcation-html": {
      "title": "Code demarcation standard",
      "content": "Magento core developers must follow the Magento code demarcation standard.\nThis standard is recommended for third-party extension developers.\nSome parts of Magento code might not comply with the standard, but we are working to gradually improve this.\nThe standard was developed in the scope of our efforts to ensure the following:\n\n   Decouple visual (CSS) layer from the functional (JavaScript) layer.\n   Decouple functional (JavaScript) layer from the markup (HTML).\n   Reinstate emphasis on using of jQuery templates.\n   Reinstate emphasis on decoupling HTML, CSS and JS from PHP classes.\n\nUse RFC 2119 to interpret the \"MUST,\" \"MUST NOT,\" \"REQUIRED,\" \"SHALL,\" \"SHALL NOT,\" \"SHOULD,\" \"SHOULD NOT,\" \"RECOMMENDED,\" \"MAY,\" and \"OPTIONAL\" keywords.\n\nSemantics\n\nFor attribute names and values you must use meaningful unabbreviated lowercase words comprised of Latin characters concatenated with a hyphen (-)\n\n   Helps simplify and unify naming conventions that are used to apply visual styles to page elements.\n\n\nAcceptable\n\n&lt;section id=\"information-dialog-tree\"&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n&lt;/section&gt;\n&lt;a href=\"#information-dialog-tree\"&gt;Scroll to text&lt;/a&gt;&lt;/a&gt;\n\nUnacceptable\n\n&lt;section id=\"заголовок\"&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"some_id\"&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n   &lt;p&gt; ... &lt;/p&gt;\n&lt;/section&gt;\n&lt;a href=\"#some_id\"&gt;Scroll to text&lt;/a&gt;\n\nSemantic representation may rely on ID attribute\n\n   Forces engineers to think about reusable page components instead of unique singleton components.\n   Reduces long-term maintenance efforts.\n\n\nAcceptable PHTML template\n\nThe following acceptable example is terse and uses an Accessible Rich Internet Applications (ARIA) approach.\n\n&lt;ul&gt;\n   &lt;li class=\"first\" type=\"button\" aria-pressed=\"false\" aria-controls=\"some-id\"&gt;button 1&lt;/li&gt;\n   &lt;li type=\"button\" aria-pressed=\"false\" aria-controls=\"some-id\"&gt;button 2&lt;/li&gt;\n   &lt;li type=\"button\" aria-pressed=\"true\" aria-controls=\"some-id\"&gt;button 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;\n   &lt;label for=\"some-id\"&gt;Enter text&lt;/label&gt;\n   &lt;textarea id=\"some-id\"&gt;&lt;/textarea&gt;\n&lt;/div&gt;\n&lt;a href=\"#some-id\"&gt;Scroll to text&lt;/a&gt;\n\nUnacceptable combination of PHTML, JavaScript, and CSS files\n\nThe following unacceptable example replaces a single PHTML file with a combination of a PHTML, JavaScript, and CSS files.\nPHTML file\n\n&lt;ul id=\"my-special-menu\"&gt;\n   &lt;li id=\"buttonId1\" class=\"first\" type=\"button\"&gt;button 1&lt;/li&gt;\n   &lt;li id=\"buttonId2\" type=\"button\"&gt;button 2&lt;/li&gt;\n   &lt;li id=\"buttonId3\" type=\"button\"&gt;button 3&lt;/li&gt;\n&lt;/ul&gt;\n\nJavaScript file\n\n$('#my-special-menu').on('click','li[id^=\"button\"]', function() { ... })\n\nCSS file\n\n#my-special-menu { ... }\n#my-special-menu &gt; li { ... }\n\nYou must follow the separation of presentation and content methodology.\n\nThe following list will help you make a distinction between the actual meaning of a document, and how this meaning is presented to its readers:\n\nContent (Semantics) includes:\n\n\n  logic\n  information\n  data\n  model\n  outline\n  message\n\n\nPresentation includes:\n\n\n  aesthetic\n  graphics\n  design\n  style\n  visualization\n  view\n\n\nYou must use semantic HTML markup only, and must not use presentation markup.\n\nAcceptable:\n\n&lt;p&gt;HTML has been created to &lt;b&gt;semantically&lt;/b&gt; represent documents.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Following the procedure described below may irreparably damage your equipment.&lt;/p&gt;\n\nUnacceptable:\n\n&lt;p&gt;HTML has been created to &lt;strong&gt;semantically&lt;/strong&gt; represent documents.&lt;/p&gt;\n&lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Following the procedure described below may irreparably damage your equipment.&lt;/p&gt;\n\nCode demarcation\n\nVisual representation must rely only on HTML class attributes, CSS pseudo-classes and pseudo-elements, HTML tags, and form element’s type attribute and form elements state attributes (example: disabled, checked).\n\nAs the first option, you are required to use HTML class attributes. In case this option is not applicable then it is recommended to use HTML tags and form element’s type attribute.\n\n\n   Enforces clean, strict separation between visual and business logic layers.\n   Allows frontend and backend teams to work independently.\n   Allows changing look and feel without affecting business functionality, and vice versa.\n   Enables frontend teams to clean up old styles quickly and easily when refactoring.\n\n\nAcceptable CSS selectors\n\n.notices-wrapper { ... }\n.page-header:after { ... }\n.payment-list:first-child { ... }\n.caution { ... }\n.caution.link { ... }\nform input[type=\"password\"] { ... }\n.control-text:focus { ... }\na:hover { ... }\nnav li._active { ... }\n\nUnacceptable CSS selectors\n\n#header { ... }\n[data-action=\"delete\"] { ... }\nform input[name=\"password\"] { ... }\nsection[role=\"main\"] { ... }\n[role=\"menu] [role=\"menuitem\"] { ... }\n[role=\"menu] [role=\"menuitem\"].active { ... }\n\nYou must not hard-code CSS styles in JavaScript files\n\n   Exception: CSS attributes where values must be calculated beyond the css-topics/LESS code.\n\n\n   Simplifies change of the default look and feel by adding CSS classes to and removing them from elements.\n   Improves style extensibility.\n   Reduces long-term maintenance efforts by containing CSS styles in a single place.\n\n\nAcceptable JavaScript widget file\n\n...\n   options: {\n      hOffset: 0,\n      myCustomElement: '[data-container=\"my-custom-element\"]',\n hiddenClass: '_hidden'\n  }\n...\n   this.element.toggleClass(this.options.hiddenClass);\n...\n   this.options.hOffset = /* calculation based on dimensions of some DOM elements within a widget */\n   this.element.find(this.options.myCustomElement).css({'margin-top', this.options.hOffset + 'px'})\n...\n\nUnacceptable JavaScript file\n\nthis.element.on('click', function() {\n   if ($(this).is(':visible')) {\n      $(this).css({ visibility: 'hidden' });\n   } else {\n      $(this).css({ visibility: 'visible' });\n   }\n});\n\nYou must not use inline CSS styles inside HTML tags\n\nImproves style extensibility allowing engineers to overload styles easier by toggling classes.\nEnforces clean, strict separation between visual presentation and markup.\nEnables frontend teams quickly and easily clean up old styles.\n\nAcceptable PHTML template\n\n&lt;div class=\"no-display\"&gt; ... &lt;/div&gt;\n\nUnacceptable PHTML template\n\n&lt;div style=\"display: none;\"&gt; ... &lt;/div&gt;\n\nBusiness logic and JavaScript\n\nBusiness logic must rely on only the form, form element name attributes, or data attributes\n\n\nEnforces clean, strict separation between visual and business logic layers.\nAllows frontend and backend teams to work independently.\nAllows changing business logic without affecting styling and vice versa.\n\nAcceptable PHTML template\n\n&lt;div data-action=\"delete\" data-mage-init=\"{myWidget: [option1: 'string']}\"&gt;&lt;/div&gt;\n&lt;div data-role=\"tooltip\"&gt;More details&lt;/div&gt;\n\nAcceptable JavaScript file\n\noptions {\n deleteAction:  '[data-action=\"delete\"]',\n tooltip: '[data-role=\"tooltip]'\n}\n...\nthis.element.find(this.options.deleteAction).on( ... );\nthis.element.on('click', this.options.deleteAction , function() { ... });\n...\n// Globally initialized widgets\n$( this.options.tooltip).tooltip();  // Globally for ALL tooltip elements\n...\n\nUnacceptable PHTML file\n\n&lt;div id=\"my-widget\"&gt;&lt;/div&gt;\n\nUnacceptable JavaScript file\n\n$('#my-widget').doSomething();\n$('.parent').on('click', '.button', function() { ... });\n$('form').validate();\n$('[role=\"menu\"]').navigation();\n\nYou must assign HTML helper classes in JavaScript to modify presentation layer.\n\nHTML helper class names added in JavaScript REQUIRE underscore symbol (“_”) at the beginning and must be written in lowercase.\n\nAcceptable\n\n&lt;div class=\"tab-element _active\"&gt;Content&lt;/div&gt;\n&lt;div class=\"sales-transactions _open\"&gt;Content&lt;/div&gt;\n&lt;div class=\"billing-agreement _expanded\"&gt;Content&lt;/div&gt;\n&lt;div class=\"sales-report _hidden\"&gt;Content&lt;/div&gt;\n\nUnacceptable\n\n&lt;div class=\"tab-element active\"&gt;Content&lt;/div&gt;\n&lt;div class=\"sales-transactions open\"&gt;Content&lt;/div&gt;\n&lt;div class=\"billing-agreement expanded\"&gt;Content&lt;/div&gt;\n&lt;div class=\"sales-report hidden\"&gt;Content&lt;/div&gt;\n\nYou must not select DOM elements based on HTML structure\n\nAllows frontend teams to modify markup and themes without affecting business logic.\n\nAcceptable JavaScript file\n\nthis.element.find('[data-action=\"edit\"]');\nthis.elements.closest('[data-container]');\n\nUnacceptable JavaScript file\n\nthis.element.children().children().html('hello world');\nthis.element.parent().find('[data-action=\"edit\"]').data('entity_id');\n\nYou must use jQuery templates to insert recurring markup into DOM structure\n\nReinstates emphasis on jQuery templates. For more information, see JavaScript Coding Best Practices.\nReduces long-term maintenance efforts by having markup code stored in one place.\nSimplifies frontend debugging efforts.\n\nYou must not hard-code inline JavaScript in PHP classes\n\nReduces long term maintenance by having frontend business logic stored in one place.\nReduces the number of files to be modified.\n\nAcceptable PHP file\n\n...\npublic function getSelectorOptions()\n{\n    return $selectorOptions;\n}\n...\n\nAcceptable PHTML template\n\n...\n&lt;div data-mage-init=\"{treeSuggest: [&lt;?php echo $this-&gt;getSelectorOptions(); ?&gt;]}\"&gt;&lt;/div&gt;\n...\n\nor\n\nAcceptable PHTML template\n\n...\n&lt;div data-role=\"treeSuggest\"&gt;&lt;/div&gt;\n&lt;script type=\"text/x-magento-init\"&gt;\n{\n    \"[data-role='treeSuggest']\": {\n        \"treeSuggest\": &lt;?php echo $this-&gt;getSelectorOptions(); ?&gt;\n    }\n}\n&lt;/script&gt;\n...\n\nUnacceptable PHP file\n\n...\npublic function getAfterElementHtml()\n{\n    return &lt;&lt;&lt;HTML\n&lt;script&gt;\njQuery('#{$htmlId}-suggest').treeSuggest({$selectorOptions});\n&lt;/script&gt;\n...\n\nUnacceptable PHTML template\n\n&lt;?php echo $this-&gt;getAfterElementHtml(); ?&gt;\n\nPHTML templates and PHP files\n\nYou must not hard-code inline CSS styles in PHP classes\n\nReduces long-term maintenance efforts by having styles stored in one place.\nSimplifies debugging and reduces number of files to be modified.\nMakes styles more extensible and easier to override when needed.\n\nAcceptable PHP file\n\n...\n$fieldset-&gt;addField('new_category_parent', 'text', array(\n    'label'    =&gt; Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Parent Category'),\n    'title'    =&gt; Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Parent Category'),\n    'required' =&gt; true,\n    'class'    =&gt; 'parent category',\n));\n...\n\nUnacceptable PHP file\n\n...\n$fieldset-&gt;addField('new_category_parent', 'text', array(\n    'label'    =&gt; Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Parent Category'),\n    'title'    =&gt; Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Parent Category'),\n    'required' =&gt; true,\n    'style'    =&gt; 'border: 1px solid #ccc;',\n));\n...\n\nYou must not hard-code inline JavaScript in PHP classes\n\nReduces long term maintenance by having frontend business logic stored in one place.\nReduces the number of files to be modified.\n\nAcceptable PHP file\n\n...\npublic function getSelectorOptions()\n{\n    return $selectorOptions;\n}\n...\n\nAcceptable PHTML template\n\n...\n&lt;div data-mage-init=\"{treeSuggest: [&lt;?php echo $this-&gt;getSelectorOptions(); ?&gt;]}\"&gt;&lt;/div&gt;\n...\n\nUnacceptable PHP file\n\n...\npublic function getAfterElementHtml()\n{\n    return &lt;&lt;&lt;HTML\n&lt;script&gt;\njQuery('#{$htmlId}-suggest').treeSuggest({$selectorOptions});\n&lt;/script&gt;\n...\n\nUnacceptable PHTML template\n\n&lt;?php echo $this-&gt;getAfterElementHtml(); ?&gt;\n\nYou must not hard-code HTML markup (used in the &lt;body&gt; tag) in PHP classes\n\nReduces long-term maintenance efforts by having markup stored in one place.\nReduces the number of files to be modified.\n\nAcceptable PHP file\n\npublic function getAttributeName($element)\n{\n    return ($element-&gt;getExtType() === 'multiple') ? $element-&gt;getId() . '_checkbox' : NULL;\n}\n\npublic function getAttributeId($element)\n{\n    return $element-&gt;getId();\n}\n\n\nAcceptable PHTML template\n\n&lt;span class=\"attribute-change-checkbox\"&gt;\n&lt;label&gt;\n   &lt;input type=\"checkbox\"\n      &lt;?php echo ($this-&gt;getAttributeName($element)) ? ' name=\"' . $this-&gt;getAttributeName($element) . '\"' : NULL; ?&gt;\n      data-mage-init=\"{customToggleWidget: [elementSelector: \"input[name='someCustomName']\"]}\" /&gt;\n   &lt;?php echo Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Change'); ?&gt;\n&lt;/label&gt;\n&lt;/span&gt;\n&lt;!-- jQuery.hide() code can be either located in the widget itself OR can ask PHP Block class whether or not 'weight_and_type_switcher' should be visible. Based on this condition CSS can be applied to hide/show those elements. --&gt;\n\nUnacceptable PHP file\n\n...\n public function getCheckbox($elementName){\n    $elementNameTag = $this-&gt;getAttributeName($elementName) ? 'name=\"' . $this-&gt;getAttributeName($elementName) . '\"' : NULL;\n    $tpl = \"&lt;input type=\\\"checkbox\\\" {$elementNameTag} data-mage-init=\\\"{customToggleWidget: [elementSelector: \\\"input[name='someCustomName']\\\"]}\\\" /&gt;\";\n    return $tpl;\n}\n...\n\nUnacceptable PHTML template\n\n&lt;span class=\"attribute-change-checkbox\"&gt;\n\t&lt;label&gt;\n\t\t&lt;?php echo $this-&gt;getCheckbox($element)?&gt;\n\t\t&lt;?php echo Mage::helper('Mage_Catalog_Helper_Data')-&gt;__('Change'); ?&gt;\n\t&lt;/label&gt;\n&lt;/span&gt;\n&lt;!-- jQuery.hide() code can be either located in the widget itself OR can ask PHP Block class whether or not 'weight_and_type_switcher' should be visible. Based on this condition CSS can be applied to hide/show those elements. --&gt;\n\n",
      "url": "/guides/v2.0/coding-standards/code-standard-demarcation.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-html-html": {
      "title": "HTML style guide",
      "content": "This style guide defines Magento internal requirements for HTML code style for teams that develop LESS and CSS code. We recommend that developers who create Magento extensions and customizations also use these standards.\n\nThe guide is based on the Google HTML/CSS Style Guide with certain modifications that are described further.\n\nIndentations\n\nUse only spaces for indentation:\n\n\n  Tab size: 4 spaces\n  Indent size: 4 spaces\n  Continuation indent: 4 spaces\n\n\nRecommended\n\n&lt;ul&gt;\n    &lt;li&gt;One&lt;/li&gt;\n    &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n\nEnd of file\nAdd a blank line at the end of file.\n\nSelf-closing tags\nAlways close self-closing tags.\n\nInappropriate\n\n&lt;br&gt;\n&lt;img src=\"image.png\" alt=\"image\"&gt;\n&lt;input type=\"text\" name=\"username\"&gt;\n\nRecommended\n\n&lt;br /&gt;\n&lt;img src=\"image.png\" alt=\"image\" /&gt;\n&lt;input type=\"text\" name=\"username\" /&gt;\n\nLine length\nAvoid code lines longer than 120 characters. When using an editor, it is inconvenient to scroll right and left to read the HTML code. Align tag attributes one under another to increase code readability.\n\nInappropriate\n\n&lt;input data-bind=\"attr: { id: 'cart-item-'+item_id+'-qty', 'data-cart-item': item_id, 'data-item-qty': qty }, value: qty\" type=\"number\" size=\"4\" class=\"item-qty cart-item-qty\" maxlength=\"12\"/&gt;\n\nRecommended\n\n&lt;input data-bind=\"attr: {\n       id: 'cart-item-'+item_id+'-qty',\n       'data-cart-item': item_id,\n       'data-item-qty': qty\n       }, value: qty\"\n       type=\"number\"\n       size=\"4\"\n       class=\"item-qty cart-item-qty\"\n       maxlength=\"12\"/&gt;\n\nSpaces around equals sign (“=”)\nSpaces around equals sign (“=”) are acceptable, but not recommended. The code without spaces is easier to read.\n\nNot recommended\n\n&lt;link rel = \"stylesheet\" href = \"styles.css\"&gt;\n\nRecommended\n\n&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n\nSpaces and colon in attributes\nUse no space before the colon and one space after the colon for the sake of readability.\n\nNot recommended\n\n&lt;span data-bind=\"i18n : 'Update'\"&gt;&lt;/span&gt;\n&lt;span data-bind=\"i18n:'Update'\"&gt;&lt;/span&gt;\n\nRecommended\n\n&lt;span data-bind=\"i18n: 'Update'\"&gt;&lt;/span&gt;\n\nBlock-level elements\nUse appropriate HTML5 elements for blocks. The following diagram shows how to define which HTML5 element to use for a block:\n\n\n\nClass names\nUse semantic class names and IDs. Avoid presentational class names.\n\nInappropriate\n\n&lt;button type=\"submit\" class=\"button-green\"&gt;Submit&lt;/button&gt;\n\nRecommended\n\n&lt;button type=\"submit\" class=\"action-primary\"&gt;Submit&lt;/button&gt;\n\nAccessibility\nAll pages should comply with the Web Content Accessibility Guidelines (WCAG) 2.0.\n\nMicrodata\nAll crucial pages (like product page) should contain microdata. Please pay attention to this recommendation when adding new functionality.\n",
      "url": "/guides/v2.0/coding-standards/code-standard-html.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-javascript-html": {
      "title": "JavaScript coding standard",
      "content": "Use Magento’s ESLint Rules to make sure your code adheres to Magento’s coding standards.\nDevelopers writing JavaScript and jQuery code for Magento must adhere to these guidelines and follow the standards listed in this document.\n\nUse RFC 2119 to interpret the “must,” “must not,” “required,” “shall,” “shall not,” “should,” “should not,” “recommended,” “may,” and “optional” keywords.\n\nMagento uses the jQuery library including standard and custom jQuery widgets.\nFor the jQuery widget coding standard, see jQuery widget coding standard.\n\nEslint and JSCS tools\n\nUse ESLint and JSCS to ensure the quality of your JavaScript code.\n\nESLint is a community-driven tool that detects errors and potential problems in JavaScript code.\nIt can use custom rules to enforce specific coding standards.\n\n\n  Magento ESLint Rules\n  Magento JSCS Rules\n\n\nAdditional formatting standards\n\nAnonymous function calls\n\nWhen you declare an anonymous function as an argument in a function call, indent the body of the function by four spaces from the left edge of the statement or function keyword to increase readability.\n\nmyObject.myFunction(param1, function (a,b) {\n  //Function logic\n  return a &gt; b;\n});\n\nEnd of file\n\nThe last line in a file must end with a single linefeed(LF) character(i.e. an empty line).\n\nThis reduces the quantity of the changed lines in a diff and makes code safer in file concatenation processes.\n\nIndentation\n\nIndentation in Magento code uses two spaces.\n\nTabs are not allowed as indentation.\n\nWrapped lines\n\nIndent wrapped lines two spaces or left-aligned to the expression above.\n\nMax line length\n\nThe recommended max line length is 80 characters.\n\nSource code lines must not exceed 120 characters.\n\nComment lines that contain an example command or a literal URL longer than 120 characters may exceed the 120 character limit for ease of cutting and pasting.\n\nDo not be concerned about header guards that exceed 120 characters.\n\nLine termination\n\nLine termination follows the UNIX text file convention.\n\nLines must end with a single linefeed(LF) character represented as ordinal 10 or hexadecimal (0x0A).\n\nDo not use carriage the Mac OS convention of carriage returns(CR or 0x0D) or the carriage return-linefeed combination(CRLF or 0x0D and 0x0A) standard for Windows OS.\n\nMulti-line string literals\n\nUse string concatenation for multi-line string literals:\n\nvar myString = 'JavaScript was originally developed in Netscape, by Brendan Eich. ' +\n    'Battling with Microsoft over the Internet, Netscape considered their client-server solution ' +\n    'as a distributed OS, running a portable version of Sun Microsystem&amp;#8217;s Java. ' +\n    'Because Java was a competitor of C++ and aimed at professional programmers, ' +\n    'Netscape also wanted a lightweight interpreted language that would complement Java ' +\n    'by appealing to nonprofessional programmers, like Microsoft&amp;#8217;s VB.[9] (see JavaScript and Java)';\n\nParentheses\n\nUse sparingly and in general where required by the syntax and semantics.\n\nNever use parentheses for:\n\n\n  Unary operators (e.g. delete, typeof, and void)\n  After keywords such as return, throw\n  For case, in, or new, and others keywords like them\n\n\nBlocks\n\nUse braces with all multiline blocks. May only omit braces if entire block can be written in one line and improves readability.\n\n// Wrong\nif (true)\n  blah();\n\nfunction () { return false; }\n\n// Correct\nif (true) return;\n\nif (true) {\n  return;\n}\n\nif (true) {\n  blah();\n}\n\nfunction () {\n  return false;\n}\n\nSemicolons\nAlways put semicolons as statement terminators.\n\nThe following code examples show the dangers of missing semicolons:\n\n// Example 1: JavaScript Error\nMyClass.prototype.myMethod = function() {\n   return 42;\n}  // &lt;-- Missing semicolon\n\n(function() {\n  // Some initialization code wrapped in a function to create a scope for locals.\n})();\n\nSince there is semicolon to end the first statement, the first function returns 42 and the script interprets 42 as a function.\nWhen the script tries to call 42 as a function with the second function as a parameter, an error occurs.\n\n// Example 2: Trying to do one thing on Internet Explorer and another on Firefox.\nvar x = {\n  'i': 1,\n  'j': 2\n }  // &lt;-- Missing semicolon\n\n[normalVersion, ffVersion][isIE]();\n\nA ‘no such property in undefined’ error appears during runtime when the script tries to call x[ffVersion][isIE]().\n\n// Example 3: Conditional execution a la bash\nvar THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  // &lt;-- Missing semicolon\n\n-1 == resultOfOperation() || die();\n\nThe script calls die unless resultOfOperation)_ is NaN and assigns THING_TO_EAT the result of die().\n\nExplanation\n\nJavaScript requires statements to end with a semicolon, except when it thinks it can safely infer their existence.\n\nIn each of the examples above, a function declaration, or an object, or an array literal is used inside a statement.\n\nThe closing brackets are not enough to indicate the end of the statement.\nJavaScript never ends a statement if the next token is an infix or bracket operator.\n\nStrings\n\nUse single quotes instead of double quotes for consistency.\n\nThis is helpful when creating strings that include HTML:\n\nvar msg = '&amp;lt;span class=\"text\"&gt;Hello World!&amp;lt;/div&gt;';\n\nAdditional naming convention standards\n\nGeneral naming conventions\n\n\n  Avoid underscores and numbers in names.\n  Variables or methods should have names that accurately describe their purpose or behavior.\n  Object methods or variables that are declared private or protected should start with an underscore(_).\n\n\nFunctions and methods\n\n\n  Class method names should start with an English verb in its infinitive form that describes the method.\n  Names for accessors for instance or static variables should always have the get or set prefix.\n  In design pattern classes, implementation method names should contain the pattern name where practical to provide better behavior description.\n  Methods that return status flags or Boolean values should have the has or is prefix.\n\n\nVariables and properties\n\n\n  Do not use short variable names such as i or n except in small loop contexts\n  If a loop contains more than 20 lines of code, the index variables should have more descriptive names.\n\n\nAdditional coding construct standards\n\nBinary and ternary operators\n\nAlways put the operator on the preceding line to avoid implicit semi-colon insertion issues.\n\nCustom toString() method\n\nThis method must always succeed without side effects.\n\nFunction declarations within blocks\n\nUse a variable initialized with a function expression to define a function within a block.\n\n// Wrong\nif (x) {\n  function foo() {}\n}\n\n// Correct\nif (x) {\n  var foo = function() {}\n}\n\nExceptions and custom exceptions\n\nYou cannot avoid exceptions if you are doing something non-trivial (using an application development framework, and so on).\n\nWithout custom exceptions, returning error information from a function that also returns a value can be tricky, not to mention inelegant.\nBad solutions include passing in a reference type to hold error information or always returning Objects with a potential error member.\n\nThese basically amount to a primitive exception handling hack.\nFeel free to use custom exceptions when appropriate.\n\nStandard features\n\nFor maximum portability and compatibility, use standard features whenever possible.\n\nFor example, string.charAt(3) instead of string[3], and element access with DOM functions instead of using an application-specific shorthand.\n\nMethod definitions\n\nThere are several ways to attach methods and properties to a constructor, but the preferred style is:\n\nFoo.prototype.bar = function() {\n    // ...\n};\n\nDo not use:\n\nFoo.prototype = {\n    bar: function() {\n        // ...\n    },\n    circle: function() {\n        // ...\n    }\n};\n\nAssignment operations to constructor prototypes creating temporal coupling and sometimes other unwanted side effects.\n\nClosures\n\nA closure keeps a pointer to its enclosing scope, so attaching a closure to a DOM element can create a circular reference and thus, a memory leak.\n\n// Wrong\nfunction foo(element, a, b) {\n  element.onclick = function() {\n    // uses a and b\n  };\n}\n\nThe function closure keeps references to elements “a” and “b” even if it never uses them.\n\nBecause elements also keep references to the closure, it is a cycle that will not be cleaned up by garbage collection.\nIn these situations, the code can be structured as follows:\n\n// Correct\nfunction foo(element, a, b) {\n  element.onclick = bar(a, b);\n}\n\nfunction bar(a, b) {\n  return function() {\n    // uses a and b\n  }\n}\n\nAdditional general standards\n\nArray and object initializers\n\nSingle-line array and object initializers are allowed when they fit on a line as follows:\n\n    var arr = [1, 2, 3];  // No space after [ or before ].\n    var obj = {a: 1, b: 2, c: 3};  // No space after { or before }.  \n\nLong identifiers or values present problems for aligned initialization lists, so always prefer non-aligned initialization.\n\nFor example:\n\nObject.prototype = {\n    a: 0,\n    b: 1,\n    lengthyName: 2\n};\n\nAssociative arrays\n\nUse Object instead of Array for associative arrays.\n\nDeferred initialization\n\nUse deferred initialization when it is not possible to initialize variables at the point of declaration.\n\nExplicit scope\n\nUse explicit scope to increase code portability and clarity.\n\nBuilt-in objects\n\nModifying built-in like Object.prototype and Array.prototype is strictly forbidden.\n\nModifying other built-ins like Function.prototype is less dangerous but leads to debugging issue in production.\n\nVariable declarations\n\nDeclare a variable with var wherever possible to avoid overwriting existing global values.\n\nUsing only one var per scope promotes readability.\n\nvar foo = 'bar',\n    num = 1,\n    arr = [1, 2, 3];\n\n",
      "url": "/guides/v2.0/coding-standards/code-standard-javascript.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-jquery-widgets-html": {
      "title": "jQuery widget coding standard",
      "content": "In the Magento system, all jQuery UI widgets and interactions are built on a simple, reusable base—the jQuery UI Widget Factory.\n\nThe factory provides a flexible base for building complex, stateful plug-ins with a consistent API.\nIt is designed not only for plug-ins that are part of jQuery UI, but for general usage by developers who want to create object-oriented components without reinventing common infrastructure.\n\nFor more information, see the jQuery Widget API documentation.\n\nThis standard is mandatory for Magento core developers and recommended for third-party extension developers.\nSome parts of Magento code might not comply with the standard, but we are working to gradually improve this.\n\nUse RFC 2119 to interpret the “must,” “must not,” “required,” “shall,” “shall not,” “should,” “should not,” “recommended,” “may,” and “optional” keywords.\n\nNaming conventions\n\n\n  Widget names must consist of one or more non-abbreviated English word and in camelcase format.\n\n\n(function($) {\n    $.widget('mage.accordion', $.ui.accordion, {\n        // ... My custom code ...\n    });\n  \n\n\n  Widget names should be verbose enough to fully describe their purpose and behavior.\n\n\n// Declaration of the frontend.advancedEventTrigger widget\n(function($) {\n    \"use strict\";\n\n    $.widget('mage.advancedEventTrigger', $.ui.button, {\n        // ... My custom code ...\n    });\n}) (jQuery);\n  \n\nInstantiation and resources\n\n\n  Additional JavaScript files used as a resources must be dynamically loaded using the $.mage.components() method and must not be included in the &lt;head&gt; block.\n  Use the $.mage.components() method to load additional JavaScript resource files not included in the &lt;head&gt; block.\n  You must use $.mage.extend() to extend an existing set of widget resources.\n  \n    You must instantiate widgets using the data-mage-init attribute.\nYou can use the .mage() plug-in to instantiate widgets that use callback methods.\n\n    Benefits:\n\n    \n      You leverage the benefits of $.mage.extend() and $.mage.components().\n      Using data-mage-init minimizes the inline JavaScript code footprint.\n      You can modify widget initialization parameters.\n    \n  \n\n\n// Widget initialization using the data-mage-init attribute\n&lt;form data-mage-init=\"{form:[], validation:{ignore:':hidden'}}\"&gt;&lt;/form&gt;\n\n// Widget initialization using the mage plug-in\n(function($) {\n    $('selector').mage('dialog', {\n        close: function(e) {\n            $(this).dialog('destroy');\n        }\n    });\n})(jQuery);\n  \n\n\n  You can declare callback methods inline JavaScript but not methods and widgets.\n\n\n// Widget initialization and configuration\n$('selector').mage('dialog', {\n    close: function(e) {\n        $(this).dialog('destroy');\n    }\n});\n\n// Widget initialization and binding event handlers\n$('selector').mage('dialog').on('dialogclose', {\n    $(this).dialog('destroy');\n});\n\n// Extension for widget in a JavaScript file\n$.widget('mage.dialog', $.ui.dialog, {\n    close: function() {\n        this.destroy();\n    }\n});\n\n// Extension of widget resources\n(function($) {\n    $.mage\n        .extend('dialog', 'dialog',\n            '&lt;?php echo $this-&gt;getViewFileUrl('Enterprise_\\*Module\\*::page/js/dialog.js') ?&gt;')\n})(jQuery);\n  \n\nDevelopment standards\n\n\n  \n    Widgets should comply with the single responsibility principle.\n\n    Widgets should not have responsibilities not related to the entity described by the widget.\n  \n\n\n// Widget \"dialog\" that is responsible\n// only for opening content in an interactive overlay.\n$.widget('mage.dialog', {\n    // Code logic\n});\n\n// Widget \"validation\" that is responsible\n// only for validating the form fields.\n$.widget('mage.validation', $.ui.sortable, {\n    // Code logic\n});\n\n$('selector')\n    .mage('dialog')\n        .find('form')\n            .mage('validation');\n  \n\n\n  Widget properties that modify the widget’s behavior must be located in the widget’s options to make them configurable and reusable.\n\n\n//Declaration of the backend.dialog widget\n$.widget('mage.dialog', {\n    options: {\n        modal: false,\n        autoOpen: true,\n        // Additional widget options\n    },\n    // Additional widget properties\n});\n\n// Initializing\n$('selector').mage('dialog', {\n    modal: true,\n    autoOpen: false\n});\n  \n\n\n  Widget communications must be handled by jQuery events\n\n\n&lt;body&gt;\n  ...\n  &lt;button data-mage-init=\"{button: {event: 'save', target:'[data-role=edit-form]'}}\" /&gt;\n  ...\n  &lt;form data-role=\"edit-form\"&gt;\n        ...\n  &lt;/form&gt;\n  ...\n&lt;/body&gt;\n\n  \n\n// Declaration of the mage.form widget\n$.widget(\"mage.form,\" {\n    _create: function() {\n        this._bind();\n    },\n    _bind: function() {\n        this._on({\n            save: this._submit\n        })\n    },\n    _submit: function(e, data) {\n        this._rollback();\n        if (false !== this._beforeSubmit(e.type, data)) {\n            this.element.trigger('submit', e);\n        }\n    }\n});\n\n  \n\n\n  \n    You must use DOM event bubbling to perform one-way communication between a child widget and its parent widget.\n  \n  \n    Widgets must comply with the Law of Demeter principle.\nDo not instantiate a widget or call a widget’s methods inside another widget.\n  \n  \n    Make widgets abstract enough so that they can be used anywhere in Magento.\n\n    For example, the mage.dropdown widget is applicable in many other scenarios, unlike mage.topShoppingCart.\n  \n  \n    Place abstract, share-able widgets under the &lt;install dir&gt;/pub/lib/&lt;your company&gt; directory so non-Magento applications can access them.\n\n    For example:\n\n    /pub\n/lib\n/magento\n  dropdown.js\n  validation.js\n  dialog.js \n    \n  \n  \n    Place Magento-specific widgets under the &lt;install dir&gt;/app/code/&lt;namespace&gt;/&lt;module-name&gt;/view/&lt;area-name&gt;/js directory.\n\n    For example:\n\n    /app\n/code\n  /Mage\n    /DesignEditor\n      /view\n        /frontend\n          /js\n            vde-block.js\n            vde-container.js\n    \n  \n\n\nArchitecture\n\n\n  \n    Use an underscore prefix to declare private widget methods.\n\n    Properties without an underscore prefix are accessible using the jQuery Widget factory public API.\n  \n\n\n// Declaration of the backend.accordion widget\n$.widget('mage.accordion', {\n    _create: function() {\n        this.header = this.element.find(this.options.header);\n        this.icon = $(this.options.icon).prependTo(this.header);\n      }\n});\n    \n\n\n  Start a widget’s element selection with this.element\n  \n    Widgets must not interact with DOM elements selected using this.element.parent(), this.element('selector'), or this.element.closest('selector').\n\n    This reduces the number of widget conflicts because widgets interact only with their child elements.\n  \n  Widget options should have default values.\nUse a null value if there is no default value for an option.\n  Pass as widget options all DOM selectors used by that widget.\n  Use the _setOption method to process required, immediate state changes.\n  Use the public widget API to call widget methods to allow chaining widget methods.\n\n\n// Call the 'open' method on the menu widget using the public widgets API\n$('selector')\n.menu('open')\n.addClass('ui-state-active');\n  \n\n\n  \n    Handle widget initialization if there is a logical action to perform on successive calls to the widget with no arguments.\n\n    The widget factory automatically fires the _create() and _init() methods during initialization, in that order and prevents multiple instantiations of the same element.\n\n    The _create() method is called only once for each widget instance and _init() is called each time the widget is called without arguments.\n  \n  \n    When a widget is destroyed, the attached element should be left exactly like it was before attachment.\n\n    Common tasks for this include:\n\n    \n      Removing or adding any CSS classes the widget added/removed to the element.\n      Detaching any elements the widget added to the DOM.\n      Destroying any widgets that the widget applied to other elements.\n    \n  \n  Bind event handlers using the _bind() method to make it easy to find what events the widget reacts on.\n  \n    Bind events using the on() method.\n\n    Benefits:\n\n    \n      Delegation is supported using selectors in the event names.\nFor example: click.foo.\n      Maintains proper this context inside the handlers, so it is not necessary to use the $.proxy() method.\n      Event handlers are automatically namespaced and cleaned up on destruction.\n    \n  \n\n\n",
      "url": "/guides/v2.0/coding-standards/code-standard-jquery-widgets.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-less-html": {
      "title": "LESS coding standard",
      "content": "This standard defines Magento internal requirements for code formatting and style for teams that develop LESS and CSS code.\n\nSome parts of Magento code might not comply with this coding standard yet, but we are working to gradually improve this.\n\nThis coding standard is optional for third-party Magento developers.\n\nGeneral rules\n\nIndentation\n\nUse only spaces for indentation:\n\n\n  Tab size: 4 spaces\n  Indent size: 4 spaces\n  Continuation indent: 4 spaces\n\n\nCorrect:\n\n.nav {\n    .nav-item {\n        ...\n    }\n}\n\n\nFormatting\n\nBraces\n\nAdd one space before opening braces and a line break after. Add a line break before closing braces.\n\nCorrect:\n\n.nav {\n    color: @nav__color;\n}\n\n\nIncorrect:\n\n.nav{color: @nav__color;}\n\n\nSelector delimiters\n\nAdd a line break after each selector delimiter. Do not add spaces before or after delimiters.\n\nCorrect:\n\n.nav,\n.bar {\n    color: @color__base;\n}\n\n\nIncorrect:\n\n.nav, .bar {\n    color: @color__base;\n}\n\n\nQuotes\n\nUse single quotes.\n\nCorrect:\n\n.nav {\n    content: 'lorem ipsum';\n}\n\n\nIncorrect:\n\n.nav {\n    content: \"lorem ipsum\";\n}\n\n\nCombinator indents\n\nAdd spaces before and after combinators.\n\nCorrect:\n\n.nav + .bar {\n    color: @bar__color;\n}\n\n\nIncorrect:\n\n.nav+.bar {\n    color: @bar__color;\n}\n\n.nav +.bar {\n    color: @bar__color;\n}\n\n.nav+ .bar {\n    color: @bar__color;\n}\n\n\nProperties line break\n\nStart each property declaration in a new line.\n\nCorrect:\n\n.nav {\n    background-color: @nav__background-color;\n    color: @nav__color;\n}\n\n\nIncorrect:\n\n.nav {\n    color: @nav__color; background-color: @nav__background-color;\n}\n\n\nProperties colon indents\n\nAdd space after but not before the colon that separates property names from values.\n\nCorrect:\n\n.nav {\n    color: @nav__color;\n}\n\n\nIncorrect:\n\n.nav {\n    color : @nav__color;\n}\n\n.bar {\n    color:@bar__color;\n}\n\n.item {\n    color :@item__color;\n}\n\n\nEnd of file\n\nAdd a blank line at the end of file.\n\nEnd of selector\n\nAdd a blank line after a selector.\n\nCorrect:\n\ncss\n    .nav {\n        background-color: @nav__background-color;\n    }\n\n    .bar {\n        background-color: @bar__background-color;\n    }\n\n\nIncorrect:\n\ncss\n    .nav {\n        background-color: @nav__background-color;\n    }\n    .bar {\n        background-color: @bar__background-color;\n    }\n\n\nEnd of the property line\n\nAdd a semicolon after property.\n\nCorrect:\n\n.nav {\n    background-color: @nav__background-color;\n}\n\n\nIncorrect:\n\n.nav {\n    background-color: @nav__background-color\n}\n\n\n!important property\n\nAvoid using the !important property if possible. If it is required, add a space before the property.\n\nCorrect\n\n.jquery-ui-calendar-item {\n    background-color: @nav__background-color !important;\n}\n\n\nIncorrect:\n\n    .jquery-ui-calendar-item {\n        background-color: @nav__background-color!important;\n    }\n\n\nComments\n\nFirst and second level comments must be surrounded by empty lines.\nFirst, second and third level comments should have two spaces after “//”. Inline comments should have one space after “//”.\n\nCorrect\n\n//\n//  First level comment\n//  _____________________________________________\n\n.nav {\n    background-color: @nav__background-color;\n}\n\n//\n//  Second level comment\n//  ---------------------------------------------\n\n.nav {\n    background-color: @nav__background-color;\n}\n\n//  Comment\n.nav {\n    //  New line comment\n    background-color: @nav__background-color; // ToDo UI: todo inline comment\n    color: @nav__color; // inline comment\n}\n\n\nSelectors\n\nTypes\n\nMagento supports the two most recent versions of all major browsers. Internet Explorer is supported from version 9 and later.\n\nYou can use almost all CSS3 selectors: descendants, attributes, pseudo classes, structural, pseudo elements, and so on.\n\nException: Avoid the id selector.\n\nCorrect:\n\n.nav {\n    ...\n}\n\n.nav + bar {\n    ...\n}\n\n.nav:not(.bar) {\n    ...\n}\n\n\nIncorrect:\n\n#foo {\n    ...\n}\n\n\nClasses Naming\n\nStandard classes\n\nClass names should be lowercase, start with a letter (except helper classes), words should be separated with dash ‘-‘.\n\nCorrect:\n\n.nav-bar {\n    ...\n}\n\n\nIncorrect:\n\n.navBar {\n   ...\n}\n\n\nIncorrect: underscore separation\n\n.nav_bar {\n   ...\n}\n\n\nHelper classes\n\nHelper class names should be lowercase and start with underscore (“_”).\n\nSome parts of Magento code might not comply with this standard yet. You might still find helper names with no underscores. We are working to gradually remove the inconsistency.\n\nExample:\n\n._active {\n    ...\n}\n\n\nSize\n\nUse class names that are as short as possible, but as long as necessary.\nTry to convey what class is about while being as brief as possible.\n\nCorrect:\n\n.nav-bar {\n    ...\n}\n\n\nIncorrect: too long\n\n.navigation-panel-in-footer {\n   ...\n}\n\n\nIncorrect: too short\n\n.nvpf {\n   ...\n}\n\n\nMeaning\n\nUse meaningful, specific class names that reflect the purpose of the element. Class names should not be presentational or cryptic.\n\nCorrect: specific\n\n.category {\n    ...\n}\n.category-title {\n    ...\n}\n\n\nIncorrect: cryptic\n\n.foo-1901 {\n    ...\n}\n\n\nIncorrect: presentational\n\n.button-green {\n   ...\n}\n\n.clear {\n   ...\n}\n\n\nSelectors naming\n\nType selectors\n\nAvoid qualifying class names with type selectors.\n\nUnless necessary (for example with helper classes), do not use element names in conjunction with IDs or classes.\n\nCorrect:\n\n.error {\n    ...\n}\n\n\nIncorrect:\n\ndiv.error {\n   ...\n}\n\n\nType selectors must be lowercase.\n\nCorrect:\n\n.nav &gt; li {\n    ...\n}\n\n\nIncorrect:\n\n.nav &gt; LI {\n   ...\n}\n\n\nFormatting\n\nWrite selector in one line, do not use concatenation.\n\nCorrect:\n\n.product-list-item {\n    ...\n}\n\n\nIncorrect:\n\n.product {\n    ...\n    &amp;-list {\n        ...\n        &amp;-item {\n            ...\n        }\n    }\n}\n\n\nNesting\n\nAvoid using more than three levels of nesting.\n\nExceptions are pseudo elements and states.\n\nCorrect:\n\n.footer {\n    ...\n    .nav {\n        ...\n    }\n    .nav-list {\n        ...\n        .nav-list-item {\n            ...\n        }\n    }\n}\n\n\nIncorrect:\n\n.footer {\n    ...\n    .nav {\n        ...\n        .nav-list {\n            ...\n            .nav-list-item {\n                ...\n            }\n        }\n    }\n}\n\n\nProperties\n\nSorting\n\nSort all properties in the alphabetical order. Mixins, variables, and so on should go first.\n\nCorrect:\n\n.nav {\n    background-color: @nav__background-color;\n    color: @nav__color;\n    text-align: center;\n}\n\n\nIncorrect:\n\n.nav {\n    color: @nav__color;\n    text-align: center;\n    background-color: @nav__background-color;\n}\n\n\nShorthand\n\nUse shorthand properties where possible.\n\nCSS offers a variety of shorthand properties that should be used whenever possible, even in cases where only one value is explicitly set.\n\nCorrect:\n\nborder-top: 0;\npadding: 0 1em 2em;\n\n\nIncorrect:\n\nborder-top-style: none;\npadding-bottom: 2rem;\npadding-left: 1rem;\npadding-right: 1rem;\npadding-top: 0;\n\n\n0 and units\n\nDo not specify units “0” value.\n\nCorrect:\n\nborder-width: 0;\nmargin: 0;\n\n\nIncorrect:\n\nborder-width: 0px;\nmargin: 0rem;\n\n\nFloating values\n\nOmit leading “0”s in values, use dot instead.\n\nCorrect:\n\n margin-left: .5rem;\n\n\nIncorrect:\n\nmargin-left: 0.5rem;\n\n\nHexadecimal notation\n\n\n  Use lowercase only.\n  Use three-character hexadecimal notation where possible.\n  Avoid using hexadecimal values for color in properties, use only variables instead.\n\n\nCorrect:\n\n@nav__color: #fafafa;\n@nav-item__color: #f00;\n...\ncolor: @nav-item__color;\n\n\nIncorrect:\n\ncolor: #ff0000;\n@nav__color: #FAFAFA;\n@nav-item__color: red;\n\n\nVariables\n\nLocation\n\nLocal variables\n\nIf variables are local and used only in a module scope, they should be located in the module file, in the beginning of the general comment.\n\nExample _module.less:\n\n...\n\n//\n//  Variables\n//  _____________________________________________\n\n    //  Colors\n@btn__color: @color-brownie;\n@btn-primary__color: @color-white;\n@btn-secondary__color: @color-white;\n...\n\n\nTheme variables\n\nIf variables are common for several modules they should be specified in the _theme.less file\n\nNaming\n\nAll variable names must be lowercase.\n\nValue variables\n\nGeneral model is the following:\n\n@property-name\n\n\nExamples:\n\n@primary__color: @color-phoenix;\n@indent__base: 2rem;\n@border-radius-round: 100%;\n\n\nParameter variables\n\nGeneral model is the following:\n\n@component-element__state__property__modifier\n\n\nComponent name must meaningful. It can contain the primary, secondary, tertiary names.\n\nbase is a modifier.\n\nExamples:\n\n@color-orange: '';\n\n@link__hover__color: '';\n\n@nav-element__background-color: '';\n\n@secondary__color: '';\n\n@side-nav__indent__s: '';\n\n@side-nav-el__background-color: '';\n\n@side-nav-el__active__background-color: '';\n\n@side-nav-el__active-focus__background-color: '';\n\n@side-nav-el__active-focus__font-size__xl: '';\n\n@text__color__base: '';\n\n\nMixins\n\nLocation\n\nTheme mixins (except extends) should be located in the source/utilities directory.\n\nNaming\n\nFor mixin naming apply the class naming rules.\n\nFor mixins grouping use the double underscore “__” prefix.\n\nExample:\n\n.extend__clearfix (...) {\n    ...\n}\n\n.vendor-prefix__flex-direction (...) {\n    ...\n}\n\n\nExtends\n\nLocation\n\nLocal extends used only in one file, should be specified in this file.\nExtends that are used in several files should be specified in the theme’s source/_extend.less file.\n\nNaming\n\nExtend names should start with the .abs- prefix.\n\n@import directive\n\nAlways add the file extension of the imported resource.\n\nCorrect:\n\n@import 'source/lib/_lib.less';\n@import (css) 'styles.css';\n\n\nIncorrect:\n\n@import 'source/lib/_lib';\n@import (css) 'styles';\n\n\nUse single quotes.\n\nCorrect:\n\n@import 'source/lib/_lib.less';\n\n\nIncorrect:\n\n@import \"source/lib/_lib.less\";\n\n",
      "url": "/guides/v2.0/coding-standards/code-standard-less.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-php-html": {
      "title": "PHP coding standard",
      "content": "The Magento core development team uses the PSR-1: Basic Coding Standard and PSR-2: Coding Style Guide.\nMagento recommends that developers who create Magento extensions and customizations also use these standards.\n\nWhere possible, use PHP_CodeSniffer to automatically enforce these standards.\nOtherwise, you must apply these standards and requirements through rigorous code review.\n\nClass name resolution standard\n\nFor class name resolution, use the ::class keyword instead of a string literal for every class name reference outside of that class.\nThis includes references to:\n\n\n  Fully qualified class name\n  Imported/non-imported class name\n  Namespace relative class name\n  Import relative class name\n\n\nExamples:\n\n  $this-&gt;get(ClassName::class);\n\n  $this-&gt;get(\\Magento\\Path\\To\\Class::class);\n\n",
      "url": "/guides/v2.0/coding-standards/code-standard-php.html"
    }
    ,
  
    "guides-v2-0-coding-standards-code-standard-sniffers-html": {
      "title": "Code sniffers",
      "content": "PHP code sniffers\n\nWe recommend the consistent use of a code sniffer to enhance the readability of your code and help ensure that it meets Magento code standards.  A code sniffer is a tool that automates the process of identifying code irregularities. Although a sniffer will identify many more inconsistencies and errors than a manual edit, we recommend that you evaluate and make any fixes that your sniffer program identifies.\n\nMagento recommends the use of PHP_CodeSniffer, the most popular code sniffer in use throughout the PHP development community.\nPHP_CodeSniffer 1.4.0+ includes PSR-1 and PSR-2 standards, which are followed by Magento 2.\nYou can configure PHP_CodeSniffer to use your own rules, too. The Magento Extension Quality Program Coding Standard provides specifications that you can use to configure your code sniffer of choice to bring your PHP coding style closer to Magento PHP standards.\n\nCode standards\n\nMagento supports the PSR-1 and PSR-2 standards.\n\nThe Coding standards overview introduces Magento-specific practices for PHP, JavaScript, and JQuery.\n",
      "url": "/guides/v2.0/coding-standards/code-standard-sniffers.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-versioning-codebase-changes-html": {
      "title": "Codebase changes",
      "content": "Every Magento version release include a change in the codebase.\nThe scope of the change determines whether the MAJOR, MINOR, or PATCH number increases in the version.\n\nPublic vs private code changes\n\nA Magento module’s codebase consists of public and private code.\n\nChanges in public code always trigger MINOR or MAJOR version increases.\n\nIn most cases, modifications to private code will trigger PATCH version increases.\nOn rare occasions, if the Magento development team made significant modifications to private code, they will increase the MINOR or MAJOR version.\n\nThird-party modules should not use or change private code.\nIf this is unavoidable, you must depend on the patch version of the core modules used.\n\nAPI and customization points\n\nPublic code includes Public API(indicated by the @api docblock tag) and Public Customization Points.\n\nModules call APIs to create new application scenarios.\nModifications that break the API will trigger an increase in a module’s MAJOR version.\n\nModules customize or replace Customization Points to customize existing application scenarios.\nModifications that break Customization Points will trigger an increase in a module’s MINOR version.\n\nAn interface or a virtual type represent either an API or Customization Point.\n\nThis policy allows third-party module developers to declare more granular dependencies depending on their module’s interaction with Magento modules.\n\nDeprecation\n\nMarking public code with @deprecated on a MINOR release indicates that Magento plans to remove that code in a future MINOR release.\n\nWhen Magento deprecates the API or customization point in favor of a new implementation, the @see annotation points to the new implementation.\n\nDeprecated Code Example\n\n/**\n * @deprecated since 2.1.0\n * @see \\Magento\\Framework\\Model\\ResourceModel\\Db\\AbstractDb::save()\n */\npublic function save()\n{\n    // ...\n}\n\nVersion increase scenarios\n\nThis table lists code change scenarios and which version number it affects.\nUse this table to understand what changes Magento can make and which version number gets increased for that change.\n\n\n  \n    \n      API/Customization Point\n      Code Change\n      Version Change\n    \n  \n  \n    \n      PHP Interface (marked with @api)\n      New interface\n      MINOR\n    \n    \n       \n      New method added\n      MINOR\n    \n    \n       \n      Interface removed\n      MAJOR\n    \n    \n       \n      Method removed\n      MAJOR\n    \n    \n       \n      New required method argument\n      MAJOR\n    \n    \n       \n      Removed the last argument for a method\n      MINOR\n    \n    \n       \n      Changed a method signature (excluding last argument removal)\n      MAJOR\n    \n  \n  \n    \n      PHP Class (marked with @api)\n      New Class\n      MINOR\n    \n    \n       \n      New method added\n      MINOR\n    \n    \n       \n      Class removed\n      MAJOR\n    \n    \n       \n      Method removed\n      MAJOR\n    \n    \n       \n      New required method argument\n      MAJOR\n    \n    \n       \n      Removed a non-last argument\n      MAJOR\n    \n    \n       \n      New required constructor object argument\n      MINOR\n    \n    \n       \n      New required constructor scalar argument (without pre-configured value)\n      MAJOR\n    \n    \n       \n      Removed a non-last constructor argument\n      MAJOR\n    \n    \n       \n      Removed a last constructor argument\n      PATCH\n    \n    \n       \n      Changed format of the returned method result\n      MAJOR\n    \n  \n  \n    \n      JavaScript Interface (marked with @api)\n      New interface\n      MINOR\n    \n    \n       \n      New method added\n      MINOR\n    \n    \n       \n      Interface removed\n      MAJOR\n    \n    \n       \n      Method removed\n      MAJOR\n    \n    \n       \n      New required method argument\n      MAJOR\n    \n    \n       \n      Changed method signature\n      MAJOR\n    \n    \n       \n      Last argument added\n      MINOR\n    \n  \n  \n    \n      Javascript class (marked with @api\n      New class\n      MINOR\n    \n    \n       \n      New method added\n      MINOR\n    \n    \n       \n      Class removed\n      MAJOR\n    \n    \n       \n      Method removed\n      MAJOR\n    \n    \n       \n      New required method argument\n      MAJOR\n    \n    \n       \n      New last method argument\n      MINOR\n    \n    \n       \n      New event\n      MINOR\n    \n    \n       \n      Renamed event\n      MAJOR\n    \n    \n       \n      Removed event\n      MAJOR\n    \n    \n       \n      New event property\n      MINOR\n    \n    \n       \n      Changed event property\n      MAJOR\n    \n    \n       \n      Removed event property\n      MAJOR\n    \n    \n       \n      Changed event ordering\n      MAJOR\n    \n  \n  \n    \n      Virtual Type\n      Virtual type removed\n      MAJOR\n    \n    \n       \n      Virtual type added\n      MINOR\n    \n  \n  \n    \n      URL Paths\n      Path removed\n      MAJOR\n    \n    \n       \n      Removed/renamed a request parameter\n      MAJOR\n    \n    \n       \n      New required request parameter\n      MAJOR\n    \n    \n       \n      New optional request parameter\n      MINOR\n    \n  \n  \n    \n      Console commands and their arguments\n      Command removed\n      MAJOR\n    \n    \n       \n      New required argument\n      MAJOR\n    \n    \n       \n      Removed/renamed argument\n      MAJOR\n    \n    \n       \n      New command exit code\n      MINOR\n    \n    \n       \n      New command\n      MINOR\n    \n  \n  \n    \n      Less variables and mixins\n      Removed variable\n      MAJOR\n    \n    \n       \n      Removed mixin\n      MAJOR\n    \n    \n       \n      New required mixin argument\n      MAJOR\n    \n  \n  \n    \n      Message queue topics and data types\n      Topic removed\n      MAJOR\n    \n    \n       \n      Topic arguments modified\n      MAJOR\n    \n    \n       \n      Consumer removed\n      MINOR\n    \n    \n       \n      New topic published\n      MINOR\n    \n  \n  \n    \n      Layout handles declared by modules\n      New layout page handle\n      MINOR\n    \n    \n       \n      New container/block added to handle\n      MINOR\n    \n    \n       \n      Removed/renamed container/block\n      MAJOR\n    \n    \n       \n      Removed layout handle\n      MAJOR\n    \n  \n  \n    \n      Static and dynamic events triggered by a component\n      Event argument removed\n      MAJOR\n    \n    \n       \n      Event removed\n      MAJOR\n    \n  \n  \n    \n      Schema of configuration types introduced by module\n      Schema file or configuration type renamed/removed\n      MAJOR\n    \n    \n       \n      Obligatory node/attribute added\n      MAJOR\n    \n    \n       \n      Node/attribute removed\n      MAJOR\n    \n    \n       \n      New optional node/attribute added\n      MINOR\n    \n  \n  \n    \n      Structure of System Configuration fields used by module\n      Config path removed/renamed\n      MAJOR\n    \n  \n  \n    \n      Database structure\n      Table removed\n      MAJOR\n    \n    \n       \n      Table added\n      MINOR\n    \n    \n       \n      Column removed\n      MAJOR\n    \n    \n       \n      Column added\n      MINOR\n    \n    \n       \n      Compatible changes in column configuration (soften column constraints: increase size, make optional)\n      PATCH\n    \n    \n       \n      Incompatible changes in column configuration\n      MAJOR\n    \n    \n       \n      Primary key column added/removed\n      MAJOR\n    \n    \n       \n      Added column to unique key\n      MAJOR\n    \n    \n       \n      Removed column from unique key\n      MAJOR\n    \n    \n       \n      Unique key added/removed\n      MAJOR\n    \n    \n       \n      Index added/changed\n      PATCH\n    \n    \n       \n      Foreign key added\n      MAJOR\n    \n    \n       \n      Temporary tables added/removed/changed\n      PATCH\n    \n  \n\n",
      "url": "/guides/v2.0/extension-dev-guide/versioning/codebase-changes.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-coding-best-practices-html": {
      "title": "Extension Coding",
      "content": "The coding best practices presented in this section should be known and understood by you, the developer, when creating or maintaining your extensions. This ensures that the extension you develop behaves and functions correctly within the Magento application architecture. This guide is not only meant to educate you about coding best practices, but to also highlight some pitfalls we have seen other extension developers fall into so that you may avoid them.\n\nFor in depth content about creating extensions, see the PHP Developer Guide.\n\nArticles\n\n\n  \n    Extension Coding\n  \n  \n    Programming best practices\n  \n  \n    Working with the Architecture\n  \n  \n    Security, performance, and data handling\n  \n  \n    Observers best practices\n  \n  \n    Coding FAQ\n  \n  \n    Creating a Magento admin page\n  \n\n\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/coding-best-practices.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-coding-faq-html": {
      "title": "Coding FAQ",
      "content": "This page is a compilation of frequently asked coding questions by the Magento Community.\n\nWhat do I need to know to work with the framework?\n\n\n  SOLID principles - The essential principles needed to create maintainable and extendible code.\n  PHP - This is the programming language used for developing Magento 2 code.\n  HTML, CSS, and JavaScript - Languages used for frontend development.\n  Magento architecture - Developers should be familiar with the architectural concepts used in Magento such as the Model-View-Controller pattern and the Command Query Responsibility Segregation principle.\n  Dependency Injection - An important design pattern used in Magento to handle dependencies across classes and modules.\n\n\nIn Magento 2, how can my extension distinguish between the Community Edition and the Enterprise Edition?\n\nThe correct edition can be obtained through \\Magento\\Framework\\App\\ProductMetadataInterface::getEdition.\n\nIn Magento Open Source that interface maps to the concrete implementation Magento\\Framework\\AppInterface\\ProductMetadata.\nHowever, in Magento Commerce, the Commerce module will override that mapping and the interface will be implemented by \\Magento\\Enterprise\\Model\\ProductMetadata.\n\nJust relying on the interface through dependency injection will get you the right class, and calling “getEdition” will return the right answer.\n\nHow do I configure my module so that it appears in a specific place on the Admin?\n\nUse the &lt;Module Directory&gt;/etc/adminhtml/menu.xml file to configure from where on the Admin your extension is accessible.\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/coding-faq.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-color-color-html": {
      "title": "Admin Color",
      "content": "Our color palette reflects our brand personality. It meets accessibility standards and provides clear legibility, hierarchy, navigation, and messaging.\n\n\n",
      "url": "/guides/v2.0/design-styleguide/color/color.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-command-pool-html": {
      "title": "Gateway Command Pool",
      "content": "Gateway command pool\n\nAll gateway commands implemented for a particular payment provider, should be added to a command pool for this provider. A command pool is a set of gateway commands available for integration with a particular payment provider. The pool is added to the configuration of the payment provider using dependency injection.\n\nInterface\nThe basic interface for a command pool is \\Magento\\Payment\\Gateway\\Command\\CommandPoolInterface. It implements the Pool pattern\n\nDefault implementation\nThe default CommandPool\nimplements CommandPoolInterface and takes a list of commands as an optional argument for the constructor.\n\nCommand pool configuration for a particular provider\nFollowing is an example of the command pool configuring for the Braintree payment provider, and adding it to the provider’s payment method configuration (app/code/Magento/Braintree/etc/di.xml).\n\n...\n&lt;!-- BrainreeCommandPool - a command pool for the Braintree payments provider --&gt;\n&lt;virtualType name=\"BraintreeCommandPool\" type=\"Magento\\Payment\\Gateway\\Command\\CommandPool\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"commands\" xsi:type=\"array\"&gt;\n            &lt;item name=\"authorize\" xsi:type=\"string\"&gt;BraintreeAuthorizeCommand&lt;/item&gt;\n            &lt;item name=\"sale\" xsi:type=\"string\"&gt;BraintreeSaleCommand&lt;/item&gt;\n            &lt;item name=\"capture\" xsi:type=\"string\"&gt;BraintreeCaptureStrategyCommand&lt;/item&gt;\n\t\t\t...\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n...\n&lt;!-- Adding BrainreeCommandPool to the Braintree payment method configuration:--&gt;\n&lt;virtualType name=\"BraintreeFacade\" type=\"Magento\\Payment\\Model\\Method\\Adapter\"&gt;\n    &lt;arguments&gt;\n        ...\n        &lt;argument name=\"commandPool\" xsi:type=\"object\"&gt;BraintreeCommandPool&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n...\n\n(The code sample is from Magento Open Source v2.1. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1.)\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/command-pool.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-common-programming-bp-html": {
      "title": "Programming Best Practices",
      "content": "You should do your best to adhere to common programming best practices to reduce the amount of bugs and improve the quality and maintainability of your extensions.\nThe following list of best practices addresses commonly reported issues found in third party extensions.\n\nFollow a set of coding standards\nCoding standards are a set of guidelines that describe how code should be written.\nThese standards define coding practices that determine the style of the code.\nWhether you are a solo developer or part of a team, following a set of coding standards will help make your code consistent and maintainable.\n\nMagento’s Coding Standards are based on the following:\n\n\n  Zend Coding standards\n  PSR2\n  PSR4\n\n\nTo help you stick to coding standards, we recommend using the PHP_CodeSniffer tool.\n\nWrite and utilize re-usable code\nAvoid using redundant or duplicate code, which can be hard to maintain.\nInstead of copying and pasting the same code throughout application, create a single class or method and reference it when needed.\nAs a general rule of thumb, be sure to reuse code as much as possible to save yourself the from the costs of duplication.\n\nThe code you write should be small, focused, and provides a generic solution.\nThis will let you re-use these pieces again in future development.\n\nDesign your code to be replaceable\nDesigning and writing your code to be replaceable is just as important as making it re-usable.\nHaving a replaceable design means your code is modular and loosely coupled, therefore allowing easy updates and improvements in the future.\n\nIt is common practice to replace parts of your codebase with newer and better pieces as bugs are found or newer strategies become available.\nWriting replaceable code in your codebase makes this practice easier and more efficient.\n\nAvoid creating helper classes\nHelper or utility classes are classes filled with static methods that do not quite fit anywhere else.\nThese classes are considered an antipattern and go against the principles of object oriented programming.\nIf you have ClassA and a ClassAHelper with static functions that work on ClassA, you should consider refactoring those functions into ClassA.\n\nA helper class that functions as a catch-all for random methods breaks the single responsibility principle because it is an attempt to solve multiple problems in a single class.\nYou should refactor your code and move those functions into the appropriate classes they work on.\n\nBe consistent with case and naming conventions\nYou should be consistent in your naming conventions for files, folder names, Classes, and Methods.\nFollowing standard conventions will make your code look professional and easy to read.\n\nNot following this practice is a code standards violation and impacts your extension’s readability and  maintainability.\n\nComposition over inheritance\nClass inheritance is the object-oriented programming concept that allows code reuse and extending of the behavior of a base class.\nThis was favored for Magento 1 development.\n\nObject composition is the programming concept of combining class objects and data types to create a more complex class.\nThe classes and data types are used together to produce a desired functionality.\n\nFor Magento 2 extension development, we encourage the use of object composition over class inheritance.\nUsing composition over inheritance makes your extension easier to maintain when class changes occur and update when new features need to be implemented.\n\nUsing around plugins\nAvoid using around method plugins when they are not required because they increase stack traces and affect performance.\n\nThe only use case for around method plugins is when the execution of all further plugins and original methods need termination.\n\nUse after method plugins if you require arguments for replacing or altering function results.\n\nTest your code\n\nWrite testable code and follow the Magento Testing Guide to create tests for your code.\nTests help describe what your code does under different conditions and define its functionality.\n\nMake sure your tests cover a variety of conditions to prevent the introduction of bugs when you add new code.\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/common-programming-bp.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-backup-html": {
      "title": "Step 2. Back up the file system and database",
      "content": "\n\n  After you pass all readiness checks, you can back up:\n\n  \n    The Magento 2 file system (excluding var and pub/static directories)\n    The pub/media directory\n    The Magento 2 database\n  \n\n  Backups are stored in the var/backups directory and can be restored at any time using the magento setup:rollback or using the Magento Admin.\n\n  To back up:\n\n  \n    \n      Select the check box of each item to back up and click Create Backup.\n\n      The following figure shows an example of backing up everything.\n\n      \n\n      (If you choose not to back up, clear all check boxes and click Next.)\n\n      \n  We strongly recommend you do back up in the event of issues.\n\n    \n    \n      Wait while backups are created and continue with any of the following:\n    \n  \n\n  The following page displays to confirm a successful backup.\n\n  \n\n  If errors display, see Troubleshoot backups\n\n  Next step\n  After your backup is complete, continue with any of the following:\n\n  \n    Installing new purchases or updates: Step 3. Component Install\n    Updating components: Step 3. Component Update\n    Enabling or disabling components: Step 3. Enable/disable components\n    Uninstalling components: Step 3. Data Option\n  \n\n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-backup.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-checklist-html": {
      "title": "Run the Component Manager",
      "content": "Overview of the Component Manager\nThis section discusses how to start the Component Manager, which updates or uninstalls Magento components:\n\n\n  Modules (extend Magento capabilities)\n  Themes (change the look and feel of your storefront and Admin)\n  Language packages (localize the storefront and Admin)\n\n\n\n    If you installed the Magento application by cloning the GitHub repository, you cannot use the Component Manager utility to update components. Instead, you must update them manually.\n\n\nPrerequisites\nBefore continuing, complete all tasks discussed in Prerequisites.\n\nComponent Manager checklist\n\n\n  Before you continue, to avoid errors during your installation or update, make sure you verify all of the following:\n\n  \n    You set up a Magento file system owner and shared that owner’s group with the web server user group\n    Your cron jobs are set up and running\n    File system permissions are set properly\n  \n\n  \n    Do not continue without performing these checks. Failure to do so could result in errors.\n\n\n  Magento file system owner and group\n  The Magento file system owner group must have write access to Magento directories and files.\n\n  Cron jobs are running\n  Magento requires three cron jobs, all running as the Magento file system owner.\n\n  To verify your cron jobs are set up properly, enter the following command as a user with root privileges:\n\n  crontab -u &lt;magento file system owner&gt; -l\n  \n\n  For example, if your Magento file system owner is named magento_user, enter:\n\n  crontab -u magento_user -l\n  \n\n  Results similar to the following should display:\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n* * * * * /usr/bin/php /var/www/magento2/update/cron.php &gt;&gt; /var/www/magento2/var/log/update.cron.log\n* * * * * /usr/bin/php /var/www/magento2/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log\n  \n\n  Another symptom of cron not running is the following error in the Magento Admin:\n\n  \n\n  To see the error, you might need to click System Messages at the top of the window as follows:\n\n  \n\n  For details, see Set up cron.\n\n  File system permissions\n  For security reasons, Magento requires certain permissions on the file system. Permissions are different from ownership. Ownership determines who can perform actions on the file system; permissions determine what the user can do.\n\n  Directories in the Magento file system must be writable by the Magento file system owner’s group.\n\n  To verify your file system permissions are set properly, either log in to the Magento server or use your hosting provider’s file manager application.\n\n  For example, enter the following commands on a Linux system if the Magento application is installed in /var/www/html/magento2:\n\n  ls -al /var/www/html/magento2\n  \n\n  A sample result follows:\n\n  total 1028\ndrwxrwx---. 12 magento_user apache   4096 Jun  7 07:55 .\ndrwxr-xr-x.  3 root         root     4096 May 11 14:29 ..\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 app\ndrwxrwx---.  2 magento_user apache   4096 Jun  7 07:53 bin\n-rw-rw----.  1 magento_user apache 439792 Apr 27 21:23 CHANGELOG.md\n-rw-rw----.  1 magento_user apache   3422 Apr 27 21:23 composer.json\n-rw-rw----.  1 magento_user apache 425214 Apr 27 21:27 composer.lock\n-rw-rw----.  1 magento_user apache   3425 Apr 27 21:23 CONTRIBUTING.md\n-rw-rw----.  1 magento_user apache  10011 Apr 27 21:23 CONTRIBUTOR_LICENSE_AGREEMENT.html\n-rw-rw----.  1 magento_user apache    631 Apr 27 21:23 COPYING.txt\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 dev\n-rw-rw----.  1 magento_user apache   2926 Apr 27 21:23 Gruntfile.js\n-rw-rw----.  1 magento_user apache   7592 Apr 27 21:23 .htaccess\n-rw-rw----.  1 magento_user apache   6419 Apr 27 21:23 .htaccess.sample\n-rw-rw----.  1 magento_user apache   1358 Apr 27 21:23 index.php\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 lib\n-rw-rw----.  1 magento_user apache  10376 Apr 27 21:23 LICENSE_AFL.txt\n-rw-rw----.  1 magento_user apache  30634 Apr 27 21:23 LICENSE_EE.txt\n-rw-rw----.  1 magento_user apache  10364 Apr 27 21:23 LICENSE.txt\n-rw-rw----.  1 magento_user apache   4108 Apr 27 21:23 nginx.conf.sample\n-rw-rw----.  1 magento_user apache   1427 Apr 27 21:23 package.json\n-rw-rw----.  1 magento_user apache   1659 Apr 27 21:23 .php_cs\n-rw-rw----.  1 magento_user apache    804 Apr 27 21:23 php.ini.sample\ndrwxrwx---.  2 magento_user apache   4096 Jun  7 07:53 phpserver\ndrwxrwx---.  6 magento_user apache   4096 Jun  7 07:53 pub\n-rw-rw----.  1 magento_user apache   2207 Apr 27 21:23 README_EE.md\ndrwxrwx---.  7 magento_user apache   4096 Jun  7 07:53 setup\n-rw-rw----.  1 magento_user apache   3731 Apr 27 21:23 .travis.yml\ndrwxrwx---.  7 magento_user apache   4096 Jun  7 07:53 update\ndrwxrws---. 11 magento_user apache   4096 Jun 13 16:05 var\ndrwxrws---. 29 magento_user apache   4096 Jun  7 07:53 vendor\n\n  In the preceding example, the Magento file system owner is magento_user. Directories in the Magento file system have drwxrwx--- permissions (775) and files have -rw-rw-rw- permissions (664).\n\n  To get more detailed information, you can optionally enter the following command:\n\n  ls -al /var/www/html/magento2/pub\n  \n\n  Because Magento deploys static file assets to subdirectories of pub, it’s a good idea to verify permissions and ownership there as well.\n\n  For more information, see File system permissions and ownership.\n\n  Next step\n  Run the Component Manager\n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-checklist.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-enable-disable-html": {
      "title": "Step 3. Enable/Disable",
      "content": "To enable or disable your component, click the appropriate button. The following figure shows an example of disabling a component, in which case you click Disable\n\n      \n\nIf successful, a page similar to the following displays.\n\n      \n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-enable-disable.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-main-pg-html": {
      "title": "Manage your components",
      "content": "Component Management options\nTo choose whether to upgrade or uninstall components:\n\n\n  After you run the Component Manager, a page similar to the following displays:\n\n  You have the following options:\n    \n\n\n    Item\n    Meaning\n\n\n    Magento Marketplace Account section\n    Shows when you last synchronized with your Magento Marketplace account. To get the latest information about available component versions, you must synchronize with Connect.\n        Last Sync shows the last time you synchronized and Sync Status shows whether or not you're currently synchronized.\n        New Updates and New Purchases displays the number of each to install; click Install to select updates or purchases to install and see Install new purchases.\n        Click Reset to log in with a different set of Marketplace credentials.\n    \n\n\n    Sync button\n    Click Sync to compare the component versions you're currently using with those available on Magento Marketplace.\n\n\n    List of components\n    For each component, one of the following status indicators displays in the left column:\n        Green, which means the component is enabled and its status was current the last time you synchronized with Magento Marketplace.\n            An update is available.\n            The component is disabled. \n            Middle columns display information about the component we obtained from its Composer package.\n            The right column displays available actions for each component. \n\n\n    Actions\n    Displays a list of actions available for that component type. Details about available actions.\n        The following figure shows an example.\n        \n\t\t\t\n\n    Pagination\n    Enables you to:\n        Specify the number of items to display on a page.\n        From left to right, move back one page, go to a specific page, or move forward one page.\n\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\n  \n\nInstall new purchases\nA new purchase can be any of the following:\n\n\n  \n    Magento Open Source or Magento Commerce sample data if it hasn’t been installed yet.\n\n    You don’t need to go to Magento Marketplace and request sample data; you can install it at any time.\n  \n  A free component you selected on Magento Marketplace\n  A component you paid for on Magento Marketplace\n\n\nTo install a new purchase:\n\n\n  \n    Click Install under the number of new purchases as the following figure shows.\n\n    \n  \n  \n    On the next page, select the components to install.\n\n    To install all of them, click Select all from the list.\n\n    To install components individually, either select the check box next to the component or click Install in the Action column.\n\n    The following figure shows an example of selecting all components.\n\n    \n  \n  Click Install.\n  Continue with Readiness check.\n\n\nUpdate a component\nTo see if any of your components can be updated, click Sync.\n\n displays in the left column of each component that you can update.\n\nThe following figure shows an example.\n\n\n\nTo update the component, click Update from the Actions list. A sample follows.\n\n\n\nContinue with Readiness check.\n\nEnable or disable a component\nTo enable or disable a component, click the appropriate choice from the Actions list.\n\nThe following figure shows an example of disabling a component.\n\n\n\nContinue with Readiness check.\n\nUninstall a component\nTo uninstall a component, click Uninstall from the Actions list as the following figure shows.\n\n\n\nContinue with Readiness check.\n\nSupported actions for each component type\nWe define the following components:\n\n\n  module for a module or extension (that is, PHP code that modifies Magento behavior)\n  language for a language package used to translate the Magento storefront and Admin\n  theme for a collection of styles that affect the look of the storefront or Admin\n  library for a library—such as a shared third-party library\n  component for any type of component that must be installed in the Magento root directory (this is a relatively uncommon type)\n\n\nWe also use metapackage to group components; Magento Community Edition (CE) and Magento Enterprise Edition (EE) are examples of metapackages.\n\nYou can perform actions on components differently, depending on whether the component is part of a metapackage or not.\n\nThe following sections provide details:\n\n\n  Actions available for metapackage components\n  Actions available for non-metapackage components\n\n\nActions available for metapackage components\nMagento requires any component that has more than one type to be a metapackage. For example, we require a component that contains a module and a theme to be packaged as a metapackage.\n\n\n      We currently do not support uninstalling a metapackage.\n\n\nThe following table shows which actions are available for components that are part of a metapackage.\n\n\n\t\n  \t\n  \t\n  \t\n  \t\n\t\t\n\t\t\n\t\t\tType\n\t\t\tEnable\n\t\t\tDisable\n\t\t\tUpdate\n\t\t\tUninstall\n\t\t\n\t\t\n\t\t\tmodule\n\t\t\tYes\n\t\t\tYes\n\t\t\tNo\n\t\t\tNo\n\t\t\n\t\t\n\t\t\tlanguage and theme\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tlibrary\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tcomponent\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\n\n\n      Update displays as an action only if an update is available for that component.\n\n\nActions available for non-metapackage components\nTypically, a component that you download from Magento Marketplace is not part of a metapackage; in other words, a single module is probably not part of a metapackage.\n\nThe following table shows which actions are supported for each non-metapackage component.\n\n\n\t\n  \t\n  \t\n  \t\n  \t\n\t\t\n\t\t\n\t\t\tType\n\t\t\tEnable\n\t\t\tDisable\n\t\t\tUpdate\n\t\t\tUninstall\n\t\t\n\t\t\n\t\t\tmodule\n\t\t\tYes\n\t\t\tYes\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tlanguage and theme\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tlibrary\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\t\tcomponent\n\t\t\tNo\n\t\t\tNo\n\t\t\tYes\n\t\t\tYes\n\t\t\n\t\t\n\t\n\nNext\nStep 1: Readiness check\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-main-pg.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-new-purchase-html": {
      "title": "Step 3. Component Install",
      "content": "When you’re installing new purchases from Magento Marketplace, the page displays similar to the following:\n\n\n\nIf the list of purchases is correct, click Install.\n\nMessages display in the Console Log as your new purchases are installed. Following is a sample of some of these messages:\n\n[2016-04-07 09:37:06 CDT] Job \"maintenance_mode {\"enable\":true}\" has been started\n[2016-04-07 09:37:06 CDT] Magento maintenance mode is enabled.\n[2016-04-07 09:37:06 CDT] Job \"maintenance_mode {\"enable\":true}\" has successfully completed\n[2016-04-07 09:37:06 CDT] Job \"update {\"components\":{\"addshoppers/magento2-connector\":{\"name\":\"addshoppers/magento2-connector\",\"version\":\"2.0.1\"},\"addshoppers/purchase-sharing\":{\"name\":\"addshoppers/purchase-sharing\",\"version\":\"2.0.1\"},\"fooman/printorderpdf-m2\":{\"name\":\"fooman/printorderpdf-m2\",\"version\":\"2.0.2\"}}}\" has been started\n[2016-04-07 09:37:06 CDT] Starting composer update...\n[2016-04-07 09:37:07 CDT] ./composer.json has been updated\n\n[2016-04-07 09:37:45 CDT] Loading composer repositories with package information\nUpdating dependencies (including require-dev)\n- Installing addshoppers/magento2-connector (2.0.1)\nDownloading: Connecting... Downloading: 0%.............. Downloading: 10%................\nDownloading: 15% ............ 100%\n\n- Installing fooman/printorderpdf-m2 (2.0.2)\nDownloading: Connecting......... Downloading: 0% ............ Downloading: 40%........... Downloading: 75% ........... Downloading: 100%\n\nWriting lock file\nGenerating autoload files\n\n[2016-04-07 09:37:45 CDT] Composer update completed successfully\n[2016-04-07 09:37:45 CDT] Job \"update {\"components\":{\"addshoppers/magento2-connector\":{\"name\":\"addshoppers/magento2-connector\",\"version\":\"2.0.1\"},\"addshoppers/purchase-sharing\":{\"name\":\"addshoppers/purchase-sharing\",\"version\":\"2.0.1\"},\"fooman/printorderpdf-m2\":{\"name\":\"fooman/printorderpdf-m2\",\"version\":\"2.0.2\"}}}\" has successfully completed\n[2016-04-07 14:38:06 UTC] Job \"setup:upgrade []\" has started\nCache cleared successfully\nFile system cleanup:\n/var/www/html/magento2/var/generation/Composer\n/var/www/html/magento2/var/generation/Magento\n/var/www/html/magento2/var/generation/Symfony\nThe directory '/var/www/html/magento2/var/di/' doesn't exist - skipping cleanup\nUpdating modules:\nSchema creation/updates:\nModule 'Magento_Store':\n\n... more ...\n\nModule 'Magento_WishlistSampleData':\nData install/update:\nModule 'Magento_Store':\n... more ...\n\nPlease re-run Magento compile command\n\n[2016-04-07 14:38:14 UTC] Job \"setup:upgrade {\"command\":\"setup:upgrade\"}\" has been successfully completed\n[2016-04-07 14:38:14 UTC] Job \"setup:static:regenerate []\" has started\n\n[2016-04-07 14:38:15 UTC] Cleaning generated files...\n[2016-04-07 14:38:15 UTC] Clearing cache...\n[2016-04-07 14:38:15 UTC] Cleaning static view files\n[2016-04-07 14:38:15 UTC] Job \"setup:static:regenerate []\" has been successfully completed\n\nWhen the installation is complete, a page similar to the following displays:\n\n\n\nClick Back to Setup Tool.\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-new-purchase.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-readiness-html": {
      "title": "Step 1. Readiness check",
      "content": "The readiness check makes sure your server and environment are set up correctly for updating, enabling, or disabling components. In the event of errors, you can consult troubleshooting suggestions in this guide.\n\nTo start, click either Start Readiness Check or Next. A sample follows.\n\n\n\n\n\n  After the readiness check completes, see one of the following:\n\n  \n    Readiness check success\n    Readiness check failure\n  \n\n  Readiness check success\n  The following figure shows an example of a successful readiness check. If all tests passed, click Next and continue with the next step.\n\n  \n\n  Readiness check failure\n  Messages similar to the following display if any readiness check fails.\n\n  \n\n  In the event of failure, see one of the following sections:\n\n  \n    Updater check failure\n    Cron script check failure\n    Component dependency check failure\n    PHP version readiness check issues\n    PHP settings errors\n    PHP extensions check failure\n  \n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-readiness.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-start-html": {
      "title": "Start the Component Manager",
      "content": "Start the Component Manager from the Magento Admin\nTo run the Component Manager:\n\n\n  Log in to the Magento Admin as an administrator.\n  Click System &gt; Web Setup Wizard.\nThe following page displays.\n\n  Click System Configuration.\n  \n    If you haven’t already done so, enter your authentication keys in the provided fields.\n\n    The following figure shows an example if you have already entered your keys.\n\n    \n\n    \n\tFor upgrade or update, you must use the same authentication keys you used to install the Magento software. For example, you cannot use Magento Open Source authentication keys to update or upgrade Magento EE or vice versa. You also cannot use:\n\tAnother user's authentication keys\n\tShared account authentication keys   \n\n  \n  Click Save Config.\n  \n    Click Component Manager and continue with Manage your components.\n\n    To upgrade Magento system software instead, see Run System Upgrade.\n  \n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-start.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-uninst-data-html": {
      "title": "Step 3. Data Option",
      "content": "This step displays if you’re uninstalling a component.\n\nAfter backing up, you have the choice of removing component data from the Magento 2 database.\n\nIf the component has no data to remove, the following message displays. (If a component has data but no uninstall script, the same prompt displays. In that case, you must remove database data manually.)\n\nThe selected component has no data to remove.\n\n\nIf the component has data to remove, a page similar to the following displays.\n\n      \n\nClick one of the following:\n\n\n  Keep data: Click to keep the component’s data in the database.\n  \n    Remove data: Click to remove component’s data from the database.\n\n    You can click Back to back up the database first if you did not do so already.\n  \n\n\nContinue with Step 4. Uninstall\n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-uninst-data.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-uninst-final-html": {
      "title": "Step 4. Uninstall",
      "content": "Step 4. Uninstall\nTo uninstall your component, click Uninstall as the following figure shows.\n\n      \n\nIf successful, a page similar to the following displays.\n\n      \n\nMessages similar to the following display in the Console Log:\n\n[2015-08-15 13:01:02 CDT] Job \"setup:component:uninstall {\"components\":[{\"name\":\"example/module\"}],\"dataOption\":false}\" has started\nRemoving from module registry in database\nRemoving from module list in deployment configuration\nCleaning cache\nCleaning generated files\nCleaning static view files\n\n[2015-08-15 13:01:02 CDT] Job \"setup:component:uninstall {\"components\":[{\"name\":\"example/module\"}],\n\"dataOption\":false}\" has been successfully completed\n[2015-08-15 13:01:03 CDT] Job \"uninstall {\"components\":[{\"name\":\"example/module\"}]}\" has been started\n[2015-08-15 13:01:03 CDT] Starting composer remove...\n\n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-uninst-final.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-compman-update-html": {
      "title": "Step 3. Component Update",
      "content": "This step displays if you’re updating components. The following figure shows an example.\n\n      \n\nTo complete the update, click Update.\n\nSuccess\nIf the update is successful, a page similar to the following displays.\n\n      \n\nMessages similar to the following display in the Console Log:\n\n[2015-07-31 19:41:02 CDT] Job \"update {\"require\":[{\"name\":\"magento/sample-module-updater-wizard\",\"version\":\"3.0.0.0\"}]}\" has been started\n[2015-07-31 19:41:02 CDT] Starting composer update...\n[2015-07-31 19:41:02 CDT] ./composer.json has been updated\n\n[2015-07-31 19:42:05 CDT] Loading composer repositories with package information\nUpdating dependencies (including require-dev)\n\t- Removing magento/sample-module-updater-wizard (2.0.2)\n\t- Installing magento/sample-module-updater-wizard (3.0.0)\nDownloading: Connecting... Downloading: 100%\n\nWriting lock file\nGenerating autoload files\n\n[2015-07-31 19:42:05 CDT] Composer update completed successfully\n[2015-07-31 19:42:05 CDT] Job \"update {\"require\":[{\"name\":\"magento/sample-module-updater-wizard\",\"version\":\"3.0.0.0\"}]}\" has successfully completed\n\n\nFailure\nIf the update fails, click Rollback to restore an earlier backup. Messages display in the Console Log as shown in the following figure.\n\n\n\n",
      "url": "/guides/v2.0/comp-mgr/module-man/compman-update.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-component-depend-html": {
      "title": "Resolve component dependency readiness check issues",
      "content": "\n\n  Resolve component dependency conflicts\n  We suggest you try the following solutions in the order shown:\n\n  \n    Conflicting dependencies\n    File system permissions issues\n    The Component Dependency Check status never changes\n  \n\n  Conflicting dependencies\n  The message We found conflicting component dependencies displays if Composer cannot determine which components to install or update. To resolve component dependency issues, you should be a technical person who thoroughly understands how Composer works.\n\n  Following is a sample failure message:\n\n  We found conflicting component dependencies. \n\nYou are trying to update package(s) magento/module-sample-data to 1.0.0-beta\nWe've detected conflicts with the following packages:\n- magento/sample-data version 0.74.0-beta15. Please try to update it to one of the following package versions: 0.74.0-beta16, 0.74.0-beta14, 0.74.0-beta13, 0.74.0-beta12, 0.74.0-beta11, 0.74.0-beta10, 0.74.0-beta9, 0.74.0-beta8, 0.74.0-beta7\n  \n\n  \n  The message you see will likely be different.\n\n\n  Typically, component dependency conflicts result from someone manually editing the Magento 2 composer.json file. It can also be caused by third-party modules that depend on earlier Magento components than the ones you have installed.\n\n  In the preceding example, the installed package magento/sample-data version 0.74.0-beta15 cannot be upgraded to 1.0.0-beta. However, 0.74.0-beta15 can be upgraded to 0.74.0-beta16 (or others).\n\n  Edit composer.json to make any of these changes and try the readiness check again.\n\n  File system permissions issues\n  If the Magento file system owner doesn’t have permissions to write to directories on the Magento file system, a message similar to the following displays:\n\n  file_put_contents(/var/www/html/magento2ce/var/composer_home/cache/repo/https---\npackagist.org/provider-doctrine$instantiator.json): failed to open stream: Permission denied\n  \n\n  Make sure you set file system permissions as discussed in Overview of ownership and permissions.\n\n  The Component Dependency Check status never changes\n  In some cases, the status of the Component Dependency Check doesn’t change, even after you try to correct issues. In that case, you can either delete or rename files named &lt;your Magento install dir&gt;/var/.update_cronjob_status and &lt;your Magento install dir&gt;/var/.setup_cronjob_status and try running the Component Manager again.\n\n  Renaming or removing these files forces the Component Manager to run the checks again.\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/component-depend.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-component-registration-html": {
      "title": "Register your component",
      "content": "Registration overview\nMagento components, including modules, themes, and language packages, must be registered in the Magento system through the Magento ComponentRegistrar class.\n\nEach component must have a file called registration.php in its root directory. For example, here is the registration.php file for Magento’s AdminNotification module. Depending on the type of component, registration is performed through registration.php by adding to it as follows:\n\nRegister modules\nRegister modules with:\n\n ComponentRegistrar::register(ComponentRegistrar::MODULE, '&lt;VendorName_ModuleName&gt;', __DIR__);\n\n\nwhere &lt;VendorName&gt; is the name of the company providing the module and &lt;ModuleName&gt; is the name of the module.\n\nDo not use “Ui” for your custom module name because the %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nExample\nuse \\Magento\\Framework\\Component\\ComponentRegistrar;\nComponentRegistrar::register(ComponentRegistrar::MODULE, 'Magento_AdminNotification', __DIR__);\n\n\nRegister themes\nRegister themes with:\n\n ComponentRegistrar::register(ComponentRegistrar::THEME, '&lt;area&gt;/&lt;vendor&gt;/&lt;theme name&gt;', __DIR__);\n\n\nwhere &lt;area&gt; is the functional area of the module (frontend, controller, and so on.), &lt;vendor&gt; is the name of the company providing the theme, and &lt;theme name&gt; is the name of the theme.\n\nExample\n ComponentRegistrar::register(ComponentRegistrar::THEME, 'frontend/Magento/luma', __DIR__);\n\n\n&nbsp;\n\nRegister language packages\nRegister language packages with:\n\n ComponentRegistrar::register(ComponentRegistrar::LANGUAGE, '&lt;VendorName&gt;_&lt;packageName&gt;', __DIR__);\n\n\nwhere &lt;VendorName&gt; is the name of the company providing the package and &lt;packageName&gt; is the name of the package.\n\nExample\n ComponentRegistrar::register(ComponentRegistrar::LANGUAGE, 'magento_de_de', __DIR__);\n\n\n&nbsp;\n\nInvoke registration.php in composer.json with autoload\nAfter you create your registration.php file and you are creating your component’s composer.json file, invoke your registration.php file in the autoload section of composer.json:\n\n {\n\"name\": \"Acme-vendor/bar-component\",\n\"autoload\": {\n    \"psr-4\": { \"AcmeVendor\\\\BarComponent\\\\\": \"\" },\n    \"files\": [ \"registration.php\" ]\n} }\n\n\n&nbsp;\n\nSample registration.php file\n\n&lt;?php\n\nuse \\Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(ComponentRegistrar::MODULE, 'Magento_AdminNotification', __DIR__);\n\nNext\nURN schema validation\n",
      "url": "/guides/v2.0/extension-dev-guide/build/component-registration.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-html": {
      "title": "Magento Components",
      "content": "This document is not ready yet, but we are working on it.\n\nMeanwhile, see Magento Components.\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-composer-integration-html": {
      "title": "The composer.json file",
      "content": "Overview\nMagento 2 uses Composer, a PHP dependency manager, to package components and product editions.\n\nComposer reads a composer.json file in Magento’s root directory to download third-party dependencies listed in the file.\n\nThe Component Manager uses the composer.json file in an extension’s root directory to perform the following actions:\n\n\n  The Component Manager can update, uninstall, enable, or disable an extension if installed using Composer (including from Packagist, Magento Marketplace, or other source) and it has a composer.json file.\n  The Component Manager can still enable or disable an extension not installed using Composer (e.g. custom code) if it has a composer.json file.\n\n\nWe recommend you include composer.json in your component’s root directory even if you do not intend to distribute it to other merchants using Magento.\n\n\n  Magento does not support the path repository.\n\n\nComposer binary location\nMagento uses the composer binary in the &lt;Magento root&gt;/vendor/composer directory instead of a globally installed composer.\n\nKeep this in mind while customizing, updating, or troubleshooting composer while working with Magento 2.\n\nProject vs product\n\nIn Composer, a “project” package is a template used by the composer create-project to set up the project structure.\nThe installation instructions for system integrators use the Magento Open Source and Magento Commerce project packages to set up the Magento directory structure.\n\nA “product” package is the actual application pointed to by the composer.json file after you download and install the project package using composer create-project.\n\nDescriptions of different composer.json files\nThe following Magento components and product editions use a composer.json file.\n\nMagento Root\nLocation: composer.json\n\nName: magento/magento2ce\n\nType: project\n\nThis is Magento’s main composer.json file which declares dependencies and third-party components.\n\nOther root composer.json files use this file as a template.\n\n\n\nCommunity Edition project\nLocation: composer.json\n\nName: magento/project-community-edition\n\nType: project\n\nMagento system integrators use this composer.json file to deploy the Magento Community Edition product and its dependencies.\n\n\n\nEnterprise Edition project\nLocation: composer.json\n\nName: magento/product-enterprise-edition\n\nType: metapackage\n\nMagento system integrators use this composer.json file to deploy the Magento Enterpries Edition product and its dependencies.\n\n\n\nMagento Framework\nLocation: lib/internal/Magento/Framework/composer.json\n\nName: magento/framework\n\nType: magento2-library\n\nThe Magento application uses this composer.json file for its framework packages.\n\n\n\nModule\nLocations:\n\n\n  app/code/&lt;vendor-name&gt;/&lt;module-name&gt;/composer.json\n  vendor/&lt;vendor-name&gt;/&lt;module-name&gt;/composer.json\n\n\nName: &lt;vendor-name&gt;/&lt;package-name&gt;\n\nType: magento2-module\n\nThe composer.json file for a module extension declares external dependencies that it needs to function.\n\n\n\nTheme\nLocations:\n\n\n  app/design/frontend/&lt;vendor-name&gt;/&lt;theme-name&gt;/composer.json\n  app/design/adminhtml/&lt;vendor-name&gt;/&lt;theme-name&gt;/composer.json\n\n\nName: &lt;vendor-name&gt;/&lt;package-name&gt;\n\nType: magento2-theme\n\nThe composer.json file for a theme component contains parent theme dependencies the extension needs to inherit.\n\n\n\nLanguage Package\nLocation:\napp/i18n/&lt;vendor-name&gt;/&lt;language-code&gt;/composer.json\n\nName: &lt;vendor-name&gt;/&lt;package-name&gt;\n\nType: magento2-language\n\nFor language packages, you must use the correct ISO code for the language code in the composer.json file.\n\n\n\nMagento-specific package types\n\nMagento extensions can be any of the following types:\n\n\n  magento2-module for modules\n  magento2-theme for themes\n  magento2-language for language packages\n  magento2-component for general extensions that do not fit any of the other types\n\n\nThe extension type tells the system where to install the directories and files of each extension in the Magento directory structure.\n\nNaming conventions\n\nSince the namespace of a Composer package is global within a package repository, e.g. packagist.org, use the following format when naming your package:\n\n&lt;vendor-name&gt;/&lt;package-name&gt;\n\nUsing the Composer naming convention helps distinguish packages from different vendors with a low risk of overlapping.\n\nvendor-name\n\nAll letters in the vendor name must be in lowercase.\nFor example, the vendor name format for extensions released by Magento Inc is magento.\n\nMagento Marketplace Extensions\n\nMagento Marketplace uses vendor-name to match an extension to a vendor during the extension submission process.\nIf you plan to submit your extension to the Magento Marketplace, you must use the unique Vendor Name created or assigned to you when you created your marketplace account.\n\nIn the composer.json file, use the value of ‘Vendor Name’ in your profile for the vendor-name part of the extension name.\n\nPlease see the Marketplace Documentation for more information about your unique vendor name.\n\npackage-name\n\nAll letters in the package-name must be in lowercase.\n\nIf the name contains more than one word, the Composer specification recommends separating them with dashes.\n\nThe convention for Magento package names is the following\n\nmagento/&lt;type-prefix&gt;-&lt;suffix&gt;[-&lt;suffix&gt;]...\n\n\n  Where:\n  \n    type-prefix is any of the Magento extension types:\n\n    \n      module- for module extensions\n      theme- for theme extensions\n      language- for language extensions\n      product- for metapackages such as Magento Open Source or Magento Commerce\n    \n  \n  \n    suffix is a unique identifier for extensions of that type.\n  \n\n\nVersioning\n\n\n  Components have the following types of versions:\n\n  \n    \n      Marketing version; in other words, the version the merchant interacts with.\n\n      Your initial version might be 1.0.0 or 2.0.0, for example. You should follow our versioning policy guidelines when setting your version.\n    \n    \n      Composer version; in other words, the version of each module, theme, language package, third-party package, and dependencies.\n    \n  \n\n  Using Magento code as an example, Magento Open Source marketing version 2.0.0 includes component versions such as 100.0.1, 100.0.2, and so on. These versioning strategy prevents collisions between the marketing version and component versions.\n\n  \n\n  Next:\nDefine your configuration files\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/build/composer-integration.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-composer-html": {
      "title": "Composer",
      "content": "This document is not ready yet, but we are working on it.\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/composer.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-cache-html": {
      "title": "Manage the cache",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of cache types\n  Magento 2 has the following cache types:\n\n  \n  \n    \n      Cache type \"friendly\" name\n      Cache type code name\n      Description\n    \n    \n      Configuration\n      config\n      Magento collects configuration from all modules, merges it, and saves the merged result to the cache. This cache also contains store-specific settings stored in the file system and database. \n\tClean or flush this cache type after modifying configuration files or settings within the admin panel.\n    \n    \n      Layout\n      layout\n      Compiled page layouts (that is, the layout components from all components).\n\tClean or flush this cache type after modifying layout files.\n    \n    \n      Block HTML output\n      block_html\n      HTML page fragments per block.\n\tClean or flush this cache type after modifying the view layer.\n    \n    \n      Collections data\n      collections\n      Results of database queries.\n      \tIf necessary, Magento cleans up this cache automatically, but third-party developers can put any data in any segment of the cache. \n      \tClean or flush this cache type if your custom module uses logic that results in cache entries that Magento cannot clean.\n    \n    \n      DDL\n      db_ddl\n      Database schema. \n      \tIf necessary, Magento cleans up this cache automatically, but third-party developers can put any data in any segment of the cache. \n      \tClean or flush this cache type after you make custom changes to the database schema. (In other words, updates that Magento does not make itself.)\n      \tOne way to update the database schema automatically is using the magento setup:db-schema:upgrade command.\n    \n    \n      Entity attribute value (EAV)\n      eav\n      Metadata related to EAV attributes (for example, store labels, links to related PHP code, attribute rendering, search settings, and so on).\n        You should not typically need to clean or flush this cache type.\n    \n    \n      Page cache\n      full_page\n      Generated HTML pages. \n      \tIf necessary, Magento cleans up this cache automatically, but third-party developers can put any data in any segment of the cache. \n      \tClean or flush this cache type after modifying code level that affects HTML output. It’s recommended to keep this cache enabled because caching HTML improves performance significantly.\n    \n    \n      Reflection\n      reflection\n      Removes a dependency between the Webapi module and the Customer module.\n    \n    \n      Translations\n      translate\n      Merged translations from all modules.\n    \n    \n      Integration configuration\n      config_integration\n      Compiled integrations.\n      \tClean or flush this cache after changing or adding integrations.\n    \n    \n      Integration API configuration\n      config_integration_api\n      Compiled integration APIs.\n    \n    \n      Web services configuration\n      config_webservice\n      Web API structure.\n    \n\n  \n\n\n  View the cache status\n  To view the status of the cache, enter\n\n  magento cache:status\n  \n\n  \n\n  A sample follows:\n\n              config: 1\n            layout: 1\n        block_html: 1\n       collections: 1\n            db_ddl: 1\n               eav: 1\n         full_page: 1\n         translate: 1\nconfig_integration: 1 config_integration_api: 1\n config_webservice: 1\n  \n\n  Enable or disable cache types\n  This command enables you to enable or disable all cache types or only the ones you specify. Disabling cache types is useful during development because you see the results of your changes without having to flush the cache; however, disabling cache types has an adverse affect on performance.\n\n  Command options:\n\n  magento cache:enable [type] ... [type]\nmagento cache:disable [type] ... [type]\n  \n\n  Where omitting [type] enables or disables all cache types at the same time. The type option is a space-separated list of cache types.\n\n  \n\n  To list cache types and their status:\n\n  magento cache:status\n  \n\n  For example, to disable the full page cache and the DDL cache:\n\n  magento cache:disable db_ddl full_page\n  \n\n  Sample result:\n\n  Changed cache status:\n                    db_ddl: 1 -&gt; 0\n                 full_page: 1 -&gt; 0\n  \n\n  \n    Enabling a cache type automatically clears that cache type.\n  \n\n  Clean and flush cache types\n  To purge out-of-date items from the cache, you can clean or flush cache types:\n\n  \n    \n      Cleaning a cache type deletes all items from enabled Magento cache types only. In other words, this option does not affect other processes or applications because it cleans only the cache that Magento uses.\n\n      Disabled cache types are not cleaned.\n    \n    \n      Flushing a cache type purges the cache storage, which might affect other processes applications that are using the same storage.\n    \n  \n\n  Flush cache types if you’ve already tried cleaning the cache and you’re still having issues that you cannot isolate.\n\n  Command usage:\n\n  magento cache:clean [type] ... [type]\nmagento cache:flush [type] ... [type]\n  \n\n  Where [type] is a space-separated list of cache types. Omitting [type] cleans or flushes all cache types at the same time. For example, to flush all cache types:\n\n  magento cache:flush\n  \n\n  Sample result:\n\n  Flushed cache types:\nconfig\nlayout\nblock_html\ncollections\ndb_ddl\neav\nfull_page\ntranslate\nconfig_integration\nconfig_integration_api\nconfig_webservice\n  \n\n  \n    You can also clean and flush cache types in the Magento Admin. Go to System &gt; Tools &gt; Cache Management. Flush Cache Storage is equivalent to magento cache:flush. Flush Magento Cache is equivalent to magento cache:clean.\n  \n\n  Related topics\n\n  \n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-cache.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-compiler-html": {
      "title": "Code compiler",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of code compilation\n  This section discusses the basics of code compilation. Code compilation consists of all of the following (in no particular order):\n\n  \n    Application code generation (factories, proxies, and so on)\n    Area configuration aggregation (that is, optimized dependency injection configurations per area)\n    Interceptor generation (that is, optimized code generation of interceptors)&lt;/li&gt;\n    Interception cache generation\n    Repositories code generation (that is, generated code for APIs)\n    Service data attributes generation (that is, generated extension classes for data objects)\n  \n\n  You can find code compilation in classes in the \\Magento\\Setup\\Module\\Di\\App\\Task\\Operation namespace.\n\n  Run the single-tenant compiler\n  Run the command as follows (there are no options):\n\n  magento setup:di:compile\n  \n\n  The following message displays to confirm success:\n\n  Generated code and dependency injection configuration successfully.\n  \n\n  \n    In Magento versions 2.0.5 and earlier, there is a known issue with the single-tenant compiler; it does not currently compile proxies. Therefore, if you’re preparing to deploy to production, you must use the multi-tenant compiler.\n\n    The issue was resolved in Magento versions 2.0.6 and later.\n  \n\n  Run the multi-tenant compiler\n  Use this command if you have multiple tenants, which means more than one independent Magento application. In other words:\n\n  \n    There is one Magento 2 code base instance\n    There is one database instance per tenant\n    Independent configurations in the Magento Admin per tenant\n    The storefronts are independent of each other\n  \n\n  If you do not have multiple tenants, use the single-tenant compiler instead.\n\n  Command options:\n\n  magento setup:di:compile-multi-tenant [--serializer=\"{serialize|igbinary}\"] [--extra-classes-file=\"&lt;path&gt;\"] [--generation=\"&lt;path and\nfilename&gt;\"] [--di=\"&lt;path and filename&gt;\"] [--exclude-pattern=\"&lt;regex&gt;\"]\n  \n\n  The following table discusses the meanings of this command’s parameters and values.\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tParameter\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\n\t\n\t\t--serializer\n\t\tSpecify either serialize or igbinary. Default is serialize.\n\t\tNo\n\t\n\t\n\t\t--extra-classes-file\n\t\tSpecify the absolute file system path to proxies and factories that are not declared in the dependency injection or code..\n\t\tNo\n\t\n\t\n\t\t--generation\n\t\tAbsolute file system path to a directory for generated classes. Default is &lt;your Magento install dir&gt;/var/generation\n\t\tNo\n\t\n\t\n\t\t--di\n\t\tAbsolute file system path to a directory to generate the object manager configuration. Default is &lt;your Magento install dir&gt;/var/di\n\t\tNo\n\t\n\t\n\t\t--exclude-pattern\n\t\tRegular expression that enables you to exclude paths from compilation. Default is #[\\\\/]m1[\\\\/]#i)\n\t\tNo\n\t\n\n\t\n\n\n  For example, to run the compiler and specify the igbinary serializer:\n\n  magento setup:di:compile-multi-tenant --serializer=igbinary\n  \n\n  Messages similar to the following display:\n\n  Generated classes:\n    Magento\\Rss\\Controller\\Adminhtml\\Feed\\Interceptor\n    Magento\\Quote\\Model\\Quote\\Config\\Interceptor\n    Magento\\Checkout\\Block\\Cart\\Shipping\\Interceptor\n    Magento\\Framework\\View\\Layout\\Interceptor\n    Magento\\Integration\\Service\\V1\\Integration\\Interceptor\n    Magento\\Catalog\\Block\\Product\\Compare\\ListCompare\\Interceptor\n    Magento\\Framework\\View\\TemplateEngineFactory\\Interceptor\n    Magento\\Catalog\\Model\\Product\\Attribute\\Backend\\Price\\Interceptor\n    Magento\\Catalog\\Api\\ProductRepositoryInterface\\Interceptor\n    Magento\\Catalog\\Model\\Product\\Interceptor\n    Magento\\Quote\\Model\\Quote\\Item\\ToOrderItem\\Interceptor\n    Magento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Interceptor\n    Magento\\Catalog\\Model\\Product\\CartConfiguration\\Interceptor\n    Magento\\Catalog\\Model\\Product\\TypeTransitionManager\\Interceptor\n    Magento\\Catalog\\Model\\Product\\Type\\Interceptor\n    ... more messages ...\n    On \\*nix systems, verify the Magento application has permissions to modify files created by the compiler in the \"var\" directory.\n    For instance, if you run the Magento application using Apache, the owner of the files in the \"var\" directory should be the Apache user\n    (example command: \"chown -R www-data:www-data &lt;MAGENTO_ROOT&gt;/var\" where MAGENTO_ROOT is the Magento root directory).\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-compiler.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-cron-html": {
      "title": "Configure and run cron",
      "content": "Overview of cron\n\n\n  Several Magento features require at least one cron job, which schedules activities to occur in the future. A partial list of these activities follows:\n\n  \n    Catalog price rules\n    Newsletters\n    Generating Google sitemaps\n    Customer Alerts/Notifications (product price change, product back in stock)\n    Reindexing\n    Private sales (Magento Commerce only)\n    Automatic updating of currency rates\n    All Magento e-mails (including order confirmation and transactional)\n  \n\n  We recommend you run cron as the Magento file system owner. Do not run cron as root; we also recommend against running cron as the web server user.\n\n  \n    You can no longer run dev/tools/cron.sh because the script has been removed.\n\n\n  \n    Magento depends on proper cron job configuration for many important system functions, including indexing. Failure to set it up properly means Magento won’t function as expected.\n  \n\n  UNIX systems schedule tasks to be performed by particular users using a crontab, which is a file that contains instructions to the cron daemon that tell the daemon in effect to “run this command at this time on this date”. Each user has its own crontab, and commands in any given crontab are executed as the user who owns it.\n\n  To run cron in a web browser, see Secure cron.php to run in a browser\n\n  Run cron from the command line\n  Command options:\n\n  magento cron:run [--group=\"&lt;cron group name&gt;\"]\n  \n\n  Where --group specifies the cron group to run. Omit this option to run cron for all groups.\n\n  To set up custom cron jobs and groups, see Configure custom cron jobs and cron groups.\n\n  \n    You must run cron twice: the first time to discover tasks to run and the second time to run the tasks themselves. The second cron run must occur on or after the scheduled_at time for every task.\n  \n\n  Run cron in the background\n  This section discusses how to run all Magento cron jobs every minute, which is the recommended interval for both Magento Open Source and Magento Commerce.\n\n  Run Magento cron jobs as the Magento file system owner.\n\n  \n\n    Prerequisites\n    Magento uses cron for two sets of tasks, and for each, cron can run with a different configuration:\n\n    \n      \n        PHP command-line configuration: The general cron job that reindexes indexers, generates e-mails, generates the sitemap, and so on.\n\n        You can find the command-line configuration using the command php --ini.\n      \n      \n        Web server PHP plug-in configuration: Two other cron jobs are used by the Component Manager and System Upgrade utilities.\n\n        You can find the web server plug-in configuration using phpinfo.php.\n      \n    \n\n    \n      \n        To avoid issues during installation and upgrade, we strongly recommend you apply the same PHP settings to both the PHP command-line configuration and to the PHP web server plug-in’s configuration. \nFor more information, see Required PHP settings.\n        \n          In a multi-node system, crontab can run on only one node.\n\n          This applies to you only if you set up more than one webnode for reasons related to performance or scalability.\n        \n      \n    \n\n    Find the PHP binary and php.ini path\n    To display the path to your PHP binary, enter\n\n    which php\n    \n\n    A sample result follows:\n\n    /usr/bin/php\n    \n\n    Create the cron job\n\n    To create a cron job for the Magento file system owner, enter the following command as a user with root privileges:\n\n    crontab -u &lt;Magento file system owner user name&gt; -e\n    \n\n    For example,\n\n    crontab -u magento_user -e\n    \n\n    A text editor displays. (You might need to choose a text editor first.)\n\n    * * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; &lt;magento install dir&gt;/var/log/magento.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/update/cron.php &gt;&gt; &lt;magento install dir&gt;/var/log/update.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento setup:cron:run &gt;&gt; &lt;magento install dir&gt;/var/log/setup.cron.log\n\n    where\n\n    \n      &lt;path to php binary&gt; is the absolute file system path to your PHP binary\n      &lt;magento install dir&gt; is the directory in which you installed the Magento software; for example, /var/www\n      | grep -v \"Ran jobs by schedule\" filters this message from the log, making any errors easier to spot\n    \n\n    The first command (magento cron:run) reindexes indexers, sends automated e-mails, generates the sitemap, and so on. Usually it’s associated with the PHP command line .ini file. The other two commands are used by the Component Manager and System Upgrade.\n\n    \n  If you're a contributing developer (that is, you cloned the Magento 2 GitHub repository), only the first line applies to you. See the examples that follow for details.\n\n\n    Example 1: Everyone except contributing developers\n\n    For example, if the PHP binary is located in /usr/bin, you installed Magento in /var/www/magento2, enter\n\n    Example:\n\n    * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n* * * * * /usr/bin/php /var/www/magento2/update/cron.php &gt;&gt; /var/www/magento2/var/log/update.cron.log\n* * * * * /usr/bin/php /var/www/magento2/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log\n    \n\n    Example 2: Contributing developers only (that is, you cloned the Magento 2 GitHub repository):\n\n    * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n    \n\n    The preceding works for contributing developers because if you cloned the GitHub repository you don’t have an update directory and errors result if you run magento setup:cron:run. These cron jobs work in the Web Setup Wizard, which contributing developers cannot use for installing or updating the Magento application or components.\n\n    Save your changes to the crontab and exit the editor.\n\n    Related topics\n\n    \n      Manage the cache\n      Manage the indexers\n      Code compiler\n      Set the Magento mode\n      URN highlighter\n      Dependency reports\n      Translation dictionaries and language packages\n      Deploy static view files\n      Create symlinks to LESS files\n      Run unit tests\n      Convert layout XML files\n      Generate data for performance testing\n    \n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-cron.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-depen-html": {
      "title": "Dependency reports",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of dependency reports\n  You can run the following types of reports:\n\n  \n    Module dependencies: Shows the total number of dependencies between modules and whether the dependencies are hard or soft.\n    Circular dependencies: Shows the total number of dependency chains and the number and list of circular dependencies for each module.\n    Framework dependencies: Shows the total number of dependencies on the Magento framework by module (including the total number of framework entries for each library).\n  \n\n  A dependency in a comment is also a dependency.\n\n  Run dependency reports\n  Command options:\n\n  magento info:dependencies:{show-modules|show-modules-circular|show-framework} [-d|--directory=\"&lt;path&gt;\"] [-o|--output=\"&lt;path and filename\"]\n  \n\n  The following table explains this command’s options, parameters, and values.\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tParameter\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\t\n\t\tshow-modules\n\t\tModule dependencies report.\n\t\tYes\n\t\n\t\n\t\tshow-modules-circular\n\t\tCircular dependencies report.\n\t\tYes\n\t\n\t\n\t\tshow-framework\n\t\tFramework dependencies report.\n\t\tYes\n\t\n\t\n\t\t-d|--directory\n\t\tPath to the base directory to start searching for report data.\n\t\tNo\n\t\n\t\n\t\t-o|--output\n\t\tSpecifies the absolute file system path and file name of the comma-separated value (csv) output file for the report.\n\t\t\n\t\t\n\t\t\tNo\n\t\t\n\t\n\t\n\n\n  If no directory or filename is passed as an argument, the following application root is used as the default directory, and the following default filenames are used:\n\n  \n\t\n\t\n\t\n\t\t\n\t\t\tCommand\n\t\t\tFilename\n\t\t\n\t\t\n\t\t\tmagento info:dependencies:show-modules\n\t\t\tmodules-dependencies.csv\n\t\t\n\t\t\n\t\t\tmagento info:dependencies:show-modules-circular\n\t\t\tmodules-circular-dependencies.csv\n\t\t\n\t\t\n\t\t\tmagento info:dependencies:show-framework\n\t\t\tframework-dependencies.csv\n\t\t\n\t\n\n\n  Sample module dependencies report\n  The following is a portion of the output for a sample module dependencies report:\n\n  \"\",\"All\",\"Hard\",\"Soft\"\n\"Total number of dependencies\",\"602\",\"587\",\"15\"\n\n\"Dependencies for each module:\",\"All\",\"Hard\",\"Soft\"\n\"magento/module-cron\",\"2\",\"2\",\"0\"\n\" -- magento/module-config\",\"\",\"1\",\"0\"\n\" -- magento/module-store\",\"\",\"1\",\"0\"\n\n\"magento/module-catalog-rule\",\"8\",\"8\",\"0\"\n\" -- magento/module-store\",\"\",\"1\",\"0\"\n\" -- magento/module-rule\",\"\",\"1\",\"0\"\n\" -- magento/module-catalog\",\"\",\"1\",\"0\"\n\" -- magento/module-customer\",\"\",\"1\",\"0\"\n\" -- magento/module-backend\",\"\",\"1\",\"0\"\n\" -- magento/module-eav\",\"\",\"1\",\"0\"\n\" -- magento/module-indexer\",\"\",\"1\",\"0\"\n\" -- magento/module-import-export\",\"\",\"1\",\"0\"\n  \n\n  Sample circular dependencies report\n  The following is a portion of the output for a sample circular dependencies report:\n\n  \"Circular dependencies:\",\"Total number of chains\"\n\"\",\"848\"\n\n\"Circular dependencies for each module:\",\"\"\n\"magento/module-config\",\"70\"\n\"magento/module-config-&gt;magento/module-store-&gt;magento/module-directory-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-store-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-cron-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-email-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-theme-&gt;magento/module-customer-&gt;magento/module-eav-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-reports-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-catalog-&gt;magento/module-theme-&gt;magento/module-eav-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-catalog-&gt;magento/module-log-&gt;magento/module-eav-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-customer-&gt;magento/module-checkout-&gt;magento/module-catalog-inventory-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-customer-&gt;magento/module-checkout-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-customer-&gt;magento/module-theme-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-payment-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-checkout-&gt;magento/module-customer-&gt;magento/module-review-&gt;magento/module-catalog-&gt;magento/module-themeax-&gt;magento/module-config\"\n\"magento/module-config-&gt;magento/module-backend-&gt;magento/module-sales-&gt;magento/module-checkout-&gt;magento/module-customer-&gt;magento/module-review-&gt;magento/module-catalog-&gt;magento/module-catalog-rule-&gt;magento/module-rule-&gt;magento/module-eav-&gt;magento/module-config\"\n  \n\n  Sample framework dependencies report\n  The following is a portion of the output for a sample framework dependencies report:\n\n  \"Dependencies of framework:\",\"Total number\"\n\"\",\"111\"\n\n\"Dependencies for each module:\",\"\"\n\"Magento\\Cron\",\"1\"\n\" -- Magento\\Framework\",\"143\"\n\n\"Magento\\CatalogRule\",\"1\"\n\" -- Magento\\Framework\",\"234\"\n\n\"Magento\\Webapi\",\"2\"\n\" -- Magento\\Framework\",\"347\"\n\" -- Magento\\Server\",\"1\"\n\n\"Magento\\Checkout\",\"1\"\n\" -- Magento\\Framework\",\"759\"\n\n\"Magento\\Reports\",\"1\"\n\" -- Magento\\Framework\",\"553\"\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-depen.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-i18n-html": {
      "title": "Translation dictionaries and language packages",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of translations\n  Magento translations enable you to customize and localize your store for multiple regions and markets. We improved the localization and customization of Magento instances by making translation dictionaries easier to update and maintain and reduced the amount of code coupling and duplication.\n\n  This topic discusses how to generate:\n\n  \n    Translation dictionaries, which are a convenient way to translate some words and phrases, such as those for a custom module or theme.\n    Language packages, which enable you to translate any or all words and phrases in the Magento application.\n  \n\n  For more information, see Translation.\n\n  Generate a translation dictionary\n  You can generate a translation dictionary to use by itself (for example, to translate words and phrases in a custom module) or for use by a language package. See one of the following sections:\n\n  \n    About translation dictionaries\n    Work with translation dictionaries\n  \n\n  Work with translation dictionaries\n  To translate words and phrases, you must:\n\n  \n    Run the translation collection command to extract translatable words and phrases from enabled components.\n    Translate the words and phrases.\n  \n\n  After that:\n\n  \n    You can package the translation dictionaries into a language package and provide the package to the Magento store administrator.\n    In the Magento Admin, the store administrator configures the translations.\n  \n\n  Command options:\n\n  magento i18n:collect-phrases [-o|--output=\"&lt;csv file path and name&gt;\"] [-m|--magento] &lt;path to directory to translate&gt;\n  \n\n  The following table explains this command’s parameters and values:\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tParameter\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\n\t\n\t\t&lt;path to directory to translate&gt;\n\t\tPath to a directory that has translatable code; in other words, PHP, PHTML, or XML files that have phrases to translate.\n\t\tThe tool starts searching at the path you enter and searches all files and subdirectories it contains. \n\tDo not use this parameter if you use -m|--magento.\n\n\t\tYes (dictionaries), no (packages).\n\t\n\t\n\t\t-m|--magento\n\t\tRequired to create a language package from this translation dictionary. If used, searches the directories that contain bin/magento. This option adds themes or modules to each line in the dictionary. \n\t\t\tA sample follows:\n\t\t\t\"No Items Found\",\"No Items Found\",module,Magento_Wishlist\n\t\t\tNo\n\n\n\t\t-o|--output=\"&lt;path&gt;\"\n\t\tSpecifies the absolute file system path and file name of the translation dictionary .csv file to create. The value you enter is case-sensitive. The name of the .csv file must exactly match the locale name, including the characters' case.\n\t\t\tIf you omit this parameter, the output is directed to stdout.\n\t\t\n\t\t\n\t\t\tNo\n\t\t\n\t\n\t\n\n\n  \n    To create a language pack from a translation dictionary, you must use the -m|--magento option.\n  \n\n  Translation guidelines\n  Use the following guidelines when translating words and phrases:\n\n  \n    Change the contents of the second column only. Translate the phrases from English (US) to the desired language.\n    \n      While translating, pay attention to placeholders like %1, %2 and so on.\n\n      They are used by the Magento application to insert context values; they are not used for translations. For example:\n\n      Product '%1' has been added to shopping cart.\n-&gt;\nProduct 'Multimeter-2000' has been added to shopping cart.\n      \n\n      The resulting phrase must contain at least one of each placeholder. For example, suppose there are placeholders from %1 to %3 in the original phrase. The translation can have as many of these placeholders in any order, but there must be at least one occurrence of %1, %2, or %3. The translation cannot contain placeholder values not present in the original value (for example, %4, %5, and so on).\n\n      An example of translating a phrase:\n\n      \"Buy %1 for %2 (%3 incl. tax) each\",\"Compre %1 por %2 (%3 incl. imposto) cada\"\n      \n    \n  \n\n  Create a language package\n  As opposed to a translation dictionary, you can translate any or all words and phrases in the Magento application using a language package. (You can translate a particular component—like a module or a theme—using a translation dictionary.) Learn more about language packages.\n\n  This section discusses how to create a language package, which writes .csv files to modules and themes. To create a language package, you must perform the tasks discussed in the following sections:\n\n  \n    \n      Collect and translate words and phrases.\n\n      (The --magento parameter is required.)\n    \n    Run the language package command.\n    Create directories and files.\n    (Optional.) Configure multiple packages for a language.\n  \n\n  Run the language package command\n  Command usage:\n\n  magento i18n:pack [-m|--mode={merge|replace}] [-d|--allow-duplicates] &lt;source&gt; &lt;locale&gt;\n  \n\n  The following table explains this command’s parameters and values:\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tParameter\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\n\t\n\t\t&lt;source&gt;\n\t\tAbsolute file system path and file name of a .csv file that contains the combined translation dictionary and meta-information necessary for breakdown into a language package.\n\t\tUse magento i18n:collect-phrases to create the .csv file then create the language package as discussed in Create directories and files. \n\t\tYes\n\t\n\t\n\t\t&lt;locale&gt;\n\t\tISO 639-1 (language) and ISO 3166 (country) identifier of language used as file name for all resulting .csv files. Examples: de_DE, pt_PT, pt_BR. \n\t\t\n\t\t\n\t\t\tYes\n\t\t\n\t\n\t\n\t\t-m|--mode\n\t\tIf a target file already exists, specifies whether to replace the existing language package or merge with the new language pack. Merging overrides any phrases that existed and adds new ones. \n\t\t\tValues: merge or replace (the default).\n\t\t\n\t\t\n\t\t\tNo\n\t\t\n\t\n\t\n\t\t-d|--allow-duplicates\n\t\tInclude this option to allow duplicates in the language pack. Otherwise, the command fails with an error if it encounters the same phrase is translated in different ways in different lines.\n\n\t\t\n\t\t\n\t\t\tNo\n\t\t\n\t\n\t\n\n\n  Create directories and files\n  A language package is a directory under app/i18n/&lt;VendorName&gt; in the Magento file system with the following contents:\n\n  \n    Required license files\n    composer.json\n    registration.php that registers the language package\n    language.xml meta-information file\n  \n\n  \n    The entire path must be all lowercase.\n  \n\n  For an example, see the de_de language package.\n\n  To create these files:\n\n  \n    \n      Create a directory under app/i18n.\n\n      For example, Magento language packages are located in app/i18n/magento\n    \n    Add any license files you require.\n    Add composer.json that specifies dependencies for your language package.\n    Register the language package with registration.php\n    Add language.xml meta-information file as discussed in the next section.\n  \n\n  Language package language.xml\n  When declaring a language package in the language.xml configuration file, you must specify the sequence of the language inheritance for this package.\n\n  Language inheritance enables you to create a new translation based on an existing one (the existing translation is referred to as the parent). The child translations override the parent. However, if the child translation fails to upload or display, the parent is used instead. If a child translation lacks a phrase or a word, this phrase or word is taken from the parent locale. Examples of language package inheritance.\n\n  To declare a package, specify the following information:\n\n  &lt;?xml version=\"1.0\"?&gt;\n&lt;language xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/Language/package.xsd\"&gt;\n    &lt;code&gt;en_GB&lt;/code&gt;\n    &lt;vendor&gt;magento&lt;/vendor&gt;\n    &lt;package&gt;en_gb&lt;/package&gt;\n    &lt;sort_order&gt;100&lt;/sort_order&gt;\n    &lt;use vendor=\"oxford-university\" package=\"en_us\"/&gt;\n&lt;/language&gt;\n  \n\n  Where:\n\n  \n    &lt;code&gt;: Language package locale (required)\n    &lt;vendor&gt;: Module’s vendor name (required)\n    &lt;package&gt;: Language package name (required)\n    &lt;sort_order&gt;: Priority of uploading a package when there are several language packages available for a store\n    &lt;use&gt;: Parent language package locale from which to inherit dictionaries\n  \n\n  If necessary, you can specify several parent packages. The parent packages are applied on a first listed, first used basis.\n\n  Example of language inheritance\n  Suppose a language package descends from two other packages, and that those packages also have parent and “grandparent” packages.\n\n  If a language package descends from two packages, its language.xml might look like the following:\n\n  &lt;language xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/Language/package.xsd\"&gt;\n    &lt;code&gt;en_GB&lt;/code&gt;\n    &lt;vendor&gt;magento&lt;/vendor&gt;\n    &lt;package&gt;language_pack&lt;/package&gt;\n    &lt;sort_order&gt;100&lt;/sort_order&gt;\n    &lt;use vendor=\"parent-package-one\" package=\"language_package_one\"/&gt;\n    &lt;use vendor= \"parent-package-two\" package=\"language_package_two\"/&gt;\n&lt;/language&gt;\n  \n\n  In the preceding example:\n\n  \n    language_package_one descends from en_au_package and en_au_package descends from en_ie_package\n    language_package_two descends from en_ca_package and en_ca_package descends from en_us_package\n  \n\n  If the Magento application cannot find word or phrase in the en_GB package, it looks in other packages in following sequence:\n\n  \n    parent-package-one/language_package_one\n    &lt;vendorname&gt;/en_au_package\n    &lt;vendorname&gt;/en_ie_package\n    parent-package-two/language_package_two\n    &lt;vendorname&gt;/en_ca_package\n    &lt;vendorname&gt;/en_us_package\n  \n\n  Specifying all inheritances between the language packages might result in creating circular inheritance chains. Use Magento\\Test\\Integrity\\App\\Language\\CircularDependencyTest test to locate and fix such chains.\n\n  Configure multiple packages for a language\n  To help you to make your store more flexible, you can upload several language packages for the same language in your store. Thus, you can use different custom packages for different parts of your store because the system compiles a single package from all packages that are available for a language.\n\n  To enable an additional package for an existing language, name the new package any name except for an existing language code name (to avoid confusion). Specify configurations of a package in the language package’s language.xml meta-information file as discussed in the the next section.\n\n  Examples of using translation commands\n  The following sections provide end-to-end examples of using the commands discussed in this topic to create translation dictionaries and translation packages:\n\n  \n    Example: Create a translation dictionary for a module or theme\n    Example: Create a language package\n  \n\n  Example: Create a translation dictionary for a module or theme\n  To add a German translation to a module or theme that you want to distribute to other merchants:\n\n  \n    \n      Collect phrases from your module:\n\n      magento i18n:collect-phrases -o \"/var/www/html/magento2/app/code/ExampleCorp/SampleModule/i18n/xx_YY.csv\" /var/www/html/magento2/app/code/ExampleCorp/SampleModule\n      \n\n      \n        The .csv file name must exactly match the locale, including the characters’ case.\n      \n    \n    Translate the words and phrases using these guidelines.\n    If necessary, copy xx_YY.csv to /var/www/html/magento2/app/code/ExampleCorp/SampleModule/i18n or to the module’s theme directory (depending on whether the translation dictionary is for a module or a theme).\n  \n\n  Example: Create a language package\n  Similar to the preceding example, generate a .csv file, but instead of specifying a module or theme directory, specify the entire Magento application root directory. The resulting .csv contains any phrases that the command could find in the code.\n\n  \n    \n      Collect phrases from your module:\n\n      magento i18n:collect-phrases -o \"/var/www/html/magento2/xx_YY.csv\" -m\n      \n\n      \n        The .csv file name must exactly match the locale, including the characters’ case.\n      \n    \n    Translate the words and phrases using these guidelines.\n    \n      Create the language package.\n\n      magento i18n:pack /var/www/html/magento2/xx_YY.csv -d xx_YY\n    \n    \n      Create a directory for the language package.\n\n      For example, /var/www/html/magento2/app/i18n/ExampleCorp/xx_yy\n    \n    \n      In that directory, add all of the following:\n\n      \n        A license, if required\n        composer.json (sample following)\n        registration.php (sample following)\n        language.xml (sample following)\n      \n\n      Sample composer.json:\n\n      {\n    \"name\": \"examplecorp/language-xx_yy\",\n    \"description\": \"Sample language\",\n    \"version\": \"100.0.2\",\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ],\n    \"require\": {\n        \"magento/framework\": \"100.0.*\"\n    },\n    \"type\": \"magento2-language\",\n    \"autoload\": {\n        \"files\": [\n            \"registration.php\"\n        ]\n    }\n}\n      \n\n      Sample registration.php:\n\n      /**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::LANGUAGE,\n    'magento_xx_yy',\n    __DIR__\n);\n      \n\n      Sample language.xml:\n\n      &lt;?xml version=\"1.0\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;language xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/Language/package.xsd\"&gt;\n    &lt;code&gt;xx_YY&lt;/code&gt;\n    &lt;vendor&gt;examplecorp&lt;/vendor&gt;\n    &lt;package&gt;xx_yy&lt;/package&gt;\n&lt;/language&gt;\n      \n    \n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-i18n.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-index-html": {
      "title": "Manage the indexers",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  View a list of indexers\n  To view a list of all indexers:\n\n  magento indexer:info\n  \n\n  The list displays as follows:\n\n  catalog_category_product                 Category Products\ncatalog_product_category                 Product Categories\ncatalog_product_price                    Product Price\ncatalog_product_attribute                Product EAV\ncataloginventory_stock                   Stock\ncatalogrule_rule                         Catalog Rule Product\ncatalogrule_product                      Catalog Product Rule\ncatalogsearch_fulltext                   Catalog Search\n  \n\n  View indexer status\n  Use this command to view the status of all indexers or specific indexers. For example, find out if an indexer needs to be reindexed.\n\n  Command options:\n\n  magento indexer:status [indexer]\n  \n\n  Where [indexer] is a space-separated list of indexers. Omit [indexer] to view the status of all indexers.\n\n  To list all indexers:\n\n  magento indexer:info\n  \n\n  A sample follows:\n\n  magento indexer:status\n  \n\n  Sample result:\n\n  Category Products:                                 Reindex required\nProduct Categories:                                Reindex required\nProduct Price:                                     Reindex required\nProduct EAV:                                       Reindex required\nStock:                                             Reindex required\nCatalog Rule Product:                              Reindex required\nCatalog Product Rule:                              Reindex required\nCatalog Search:                                    Reindex required\n  \n\n  Reindex\n  USe this command to reindex all or selected indexers one time only.\n\n  \n    This command reindexes one time only. To keep indexers up-to-date, you must set up a cron job.\n  \n\n  Command options:\n\n  magento indexer:reindex [indexer]\n  \n\n  Where [indexer] is a space-separated list of indexers. Omit [indexer] to reindex all indexers.\n\n  To view a list of all indexers:\n\n  magento indexer:info\n  \n\n  A sample follows:\n\n  magento indexer:reindex\n  \n\n  Sample result:\n\n  Category Products index has been rebuilt successfully in &lt;time&gt;\nProduct Categories index has been rebuilt successfully in &lt;time&gt;\nProduct Price index has been rebuilt successfully in &lt;time&gt;\nProduct EAV index has been rebuilt successfully in &lt;time&gt;\nStock index has been rebuilt successfully in &lt;time&gt;\nCatalog Rule Product index has been rebuilt successfully in &lt;time&gt;\nCatalog Product Rule index has been rebuilt successfully in &lt;time&gt;\nCatalog Search index has been rebuilt successfully in &lt;time&gt;\n  \n\n  \n    Reindexing all indexers can take a long time for stores with large numbers of products, customers, categories, and promotional rules.\n  \n\n  Configure indexers\n  Use this command to set the following indexer options:\n\n  \n    Update on save (realtime): Indexed data is updated as soon as a change is made in the Admin. (For example, the category products index is reindex after products are added to a category in the Admin.) This is the default.\n    Update by schedule (schedule): Data is indexed according to the schedule set by your Magento cron job.\n  \n\n  Learn more about indexing\n\n  Display the current configuration\n  To view the current indexer configuration:\n\n  magento indexer:show-mode [indexer]\n  \n\n  Where [indexer] is a space-separated list of indexers. Omit [indexer] to show all indexers’ modes. For example, to show the mode of all indexers:\n\n  magento indexer:show-mode\n  \n\n  Sample result:\n\n  Category Products:                                 Update on Save\nProduct Categories:                                Update on Save\nProduct Price:                                     Update on Save\nProduct EAV:                                       Update on Save\nStock:                                             Update on Save\nCatalog Rule Product:                              Update on Save\nCatalog Product Rule:                              Update on Save\nCatalog Search:                                    Update on Save\n  \n\n  Configure indexers\n  To specify the indexer configuration:\n\n  magento indexer:set-mode {realtime|schedule} [indexer]\n  \n\n  Where:\n\n  \n    realtime - Sets the selected indexers to update on save.\n    schedule - Sets the specified indexers to save according to the cron schedule.\n    indexer - Is a space-separated list of indexers. Omit indexer to configure all indexers the same way.\n  \n\n  To view the list of indexers:\n\n  magento indexer:info\n  \n\n  For example, to change only the category products and product categories indexers to update on schedule, enter\n\n  magento indexer:set-mode schedule catalog_category_product catalog_product_category\n  \n\n  Sample result:\n\n  Index mode for Indexer Category Products was changed from 'Update on Save' to 'Update by Schedule'\nIndex mode for Indexer Product Categories was changed from 'Update on Save' to 'Update by Schedule'\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-index.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-layout-xml-html": {
      "title": "Convert layout XML files",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of layout XML conversion\n  Use this command to update your layout XML files if you update the corresponding Extensible Stylesheet Language Transformations (XSLT) stylesheet.\n\n  For more information about layout XML files, see:\n\n  \n    Layout instructions\n    Layout file types\n  \n\n  Convert layout XML files\n  Command options:\n\n  magento dev:xml:convert [-o|--overwrite] {xml file} {xslt stylesheet}\n  \n\n  here:\n\n  \n    {xml file} is the full path and file name of a layout XML file to convert (required)\n    {xslt stylesheet} is the full path and file name of an XSLT stylesheet file to use for conversion (required)\n    -o|--overwrite include this option to overwrite the existing XML file\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-layout-xml.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-less-sass-html": {
      "title": "Create symlinks to LESS files",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Create LESS files\n  Use this command to create symlinks to LESS files.\n\n  Command options:\n\n  magento dev:source-theme:deploy [--type=\"...\"] [--locale=\"...\"] [--area=\"...\"] [--theme=\"...\"] [file1] ... [fileN]\n  \n\n  The following table explains this command’s parameters and values.\n\n  \n\t\n\t\n\t\n\t\n\t\n\t\tParameter\n\t\tValue\n\t\tRequired?\n\t\n\t\n\t\t--type\n\t\tType of source files: [less] (default: \"less\")\n\t\t\tCurrently, LESS is the only file type supported.\n\t\tNo\n\t\n\t\n\t\t--locale\n\t\tLocale code.\n\t\t\tTo display the list of locale codes, enter magento info:language:list\n\t\tNo\n\t\n\t\n\t\t--area\n\t\tArea (adminhtml for the administrative area, frontend for the storefront).\n\t\tNo\n\t\n\t\n\t\t--theme\n\t\tTheme name in &lt;VendorName&gt;/&lt;theme name&gt; format. For example, Magento/blank or Magento/backend.\n\t\tNo\n\t\n\t\n\t\t&lt;file&gt;\n\t\tSpace-separated list of CSS files to convert to LESS without the .css extension. (Default is css/styles-m css/styles-l, for adminhtml type css/styles css/styles-old)\n\t\tNo\n\t\n\t\n\n\n  For example, to create LESS files for the frontend theme named VendorName/themeName in the en_US locale using a CSS file named &lt;your Magento install dir&gt;/pub/static/frontend/VendorName/themeName/en_US/css/styles-l.css, enter the following command:\n\n  magento dev:source-theme:deploy --type=\"less\" --locale=\"en_US\" --area=\"frontend\" --theme=\"VendorName/themeName\" css/styles-l\n  \n\n  The following messages display to confirm success:\n\n  Processed Area: frontend, Locale: en_US, Theme: VendorName/themeName, File type: less.\n-&gt; css/styles-l.less\nSuccessfully processed.\n  \n\n  To create LESS files for the adminhtml, enter the following command:\n\n  magento dev:source-theme:deploy --locale=\"en_US\" --area=\"adminhtml\" --theme=\"Magento/backend\" css/styles css/styles-old\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-less-sass.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-mode-html": {
      "title": "Set the Magento mode",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of setting Magento modes\n  To improve security and ease-of-use, we added a command that switches Magento modes from developer to production and vice versa.\n\n  Production mode also has better performance because static view files are populated in the pub/static directory and because of code compilation.\n\n  \n    \n      In version 2.0.6 and later, Magento does not explicitly set file or directory permissions when you switch between default, develop, and production modes.\n      Unlike other Magento modes, developer and production modes are set in env.php.\n      Magento Commerce (Cloud) supports production mode only.\n    \n  \n\n  Refer to Magento ownership and permissions in development and production for more information.\n\n  When you change to developer or production mode, we clear the contents of following directories:\n\n  var/cache\nvar/di\nvar/generation\nvar/view_preprocessed\npub/static\n  \n\n  Exceptions:\n\n  \n    .htaccess files are not removed\n    pub/static contains a file that specifies the version of static content; this file is not removed\n  \n\n  \n    By default, Magento uses the var directories to store the cache, logs, and compiled code. You can customize this directory but in this guide, it’s assumed to be var.\n  \n\n  Display the current mode\n  The easiest way to do that is to run this command as the Magento file system owner. If you have shared hosting, this is the user your provider gives you to log in to the server. If you have a private server, it’s typically a local user account on the Magento server.\n\n  Command usage:\n\n  magento deploy:mode:show\n  \n\n  A message similar to the following displays:\n\n  Current application mode: developer.\n  \n\n  Change modes\n  Command usage:\n\n  magento deploy:mode:set {mode} [-s|--skip-compilation]\n  \n\n  Where:\n\n  \n    \n      {mode} is required; it can be either developer or production\n    \n    \n      --skip-compilation is an optional parameter you can use to skip code compilation when you change to production mode.\n    \n  \n\n  \nYou cannot currently change from either developer or production mode to default mode.\n\n\n  Examples follow.\n\n  Change to production mode\n\n  magento deploy:mode:set production\n  \n\n  Following is a summary of messages that display:\n\n  Enabled maintenance mode\nRequested languages: en_US\n=== frontend -&gt; Magento/luma -&gt; en_US ===\n... more ...\nSuccessful: 1884 files; errors: 0\n---\n\n=== frontend -&gt; Magento/blank -&gt; en_US ===\n... more ...\nSuccessful: 1828 files; errors: 0\n---\n\n=== adminhtml -&gt; Magento/backend -&gt; en_US ===\n... more ...\n---\n\n=== Minify templates ===\n... more ...\nSuccessful: 897 files modified\n---\n\nNew version of deployed files: 1440461332\nStatic content deployment complete Gathering css/styles-m.less sources. Successfully processed LESS and/or &lt;span term-uuid=\"45f1f76d-91cd-4789-a8b5-1e3f321a6280\" class=\"glossary-term\" data-toggle=\"popover\"&gt;SASS&lt;/span&gt; files &lt;span term-uuid=\"6c5cb4e9-9197-46f2-ba79-6147d9bfe66d\" class=\"glossary-term\" data-toggle=\"popover\"&gt;CSS&lt;/span&gt; deployment complete Generated classes:\n    Magento\\Sales\\Api\\Data\\CreditmemoCommentInterfacePersistor\n    Magento\\Sales\\Api\\Data\\CreditmemoCommentInterfaceFactory\n    Magento\\Sales\\Api\\Data\\CreditmemoCommentSearchResultInterfaceFactory\n    Magento\\Sales\\Api\\Data\\CreditmemoComment\\Repository\n    Magento\\Sales\\Api\\Data\\CreditmemoItemInterfacePersistor\n    ... more ...\nCompilation complete\nDisabled maintenance mode\nEnabled production mode.\n  \n\n  Change to developer mode\n  When you change from production to developer mode, you should clear generated classes and Object Manager entities like proxies to prevent unexpected errors. After doing so, you can change modes. Use the following steps:\n\n  \n    \n      If you’re changing from production mode to developer mode, delete the contents of the var/generation and var/di directories:\n\n      rm -rf &lt;your Magento install dir&gt;/var/di/* &lt;your Magento install dir&gt;/var/generation/*\n      \n    \n    \n      Set the mode:\n\n      magento deploy:mode:set developer\n      \n\n      The following message displays:\n\n      Switched to developer mode.\n      \n    \n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-mode.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-perf-data-html": {
      "title": "Generate data for performance testing",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of performance testing data\n  To use the Magento Performance Toolkit or another tool for performance testing, you must generate a large amount of data (for example, stores, categories, products, and so on).\n\n  You can adjust the amount of data you create using profiles (small, medium, large, and extra large). The next section discusses profiles in more detail.\n\n  The following figure shows how a product displays on the storefront using the small profile:\n\n  \n\n  This gives you an idea about what the data looks like.\n\n  About profiles\n  The following table provides details about the data generator profiles (small, medium, large, and extra large).\n\n  Profiles are located in &lt;your Magento install dir&gt;/setup/performance-toolkit/profiles/&lt;ce or ee&gt;\n\n  For example, /var/www/html/magento2/setup/performance-toolkit/profiles/ce\n\n  \n    \n        \n            Parameter\n            Small profile\n            Medium profile\n            Large profile\n            Extra large profile\n        \n\n    \n        websites\n        1\n        1\n        3\n        5\n    \n    \n        store_groups\n        1   \n        2\n        3\n        5   \n    \n    \n        store_views\n        1   \n        2\n        3\n        5   \n    \n    \n        simple_products\n        800\n        16,000\n        400,000\n        800,000\n    \n    \n        configurable_products\n        50  \n        1,000\n        25,000\n        50,000  \n    \n    \n        categories\n        30  \n        300\n        1,000\n        3,000   \n    \n    \n        categories_nesting_level\n        3   \n        3\n        3\n        6   \n    \n    \n        catalog_price_rules\n        10  \n        20\n        50\n        100\n    \n    \n        catalog_target_rules\n        2   \n        5\n        10\n        50  \n    \n    \n        cart_price_rules\n        10  \n        20\n        50\n        100     \n    \n    \n        cart_price_rules_floor\n        2   \n        2\n        2\n        5       \n    \n    \n        customers\n        20  \n        200\n        2,000\n        5,000       \n    \n    \n        tax rates\n        40,000  \n        40,000\n        40,000\n        40,000      \n    \n    \n        orders\n        80  \n        1,600\n        40,000\n        80,000      \n    \n    \n\n\n  Run the data generator\n  \n    Before running the data generator, disable all cron jobs running on the server. Disabling cron jobs prevents the data generator from performing actions that conflict with active cron jobs and avoids unnecessary errors.\n  \n\n  Run the command as discussed in this section. After the command runs, you must reindex all indexers.\n\n  Command options:\n\n  magento setup:perf:generate-fixtures {path to profile}\n  \n\n  Where &lt;path to profile&gt; specifies the absolute file system path to, and name of, a profile.\n\n  For example,\n\n  magento setup:perf:generate-fixtures /var/www/html/magento2/setup/performance-toolkit/profiles/ce/small.xml\n  \n\n  Sample output for the small profile:\n\n  Generating profile with following params:\n |- Websites: 1\n |- Store Groups: 1\n |- Store Views: 1\n |- Categories: 30\n |- Simple products: 800\n |- Configurable products: 50\n |- Customers: 20\n |- Cart Price Rules: 10\n |- Catalog Price Rules: 10\n |- Orders: 80\nGenerating websites, stores and store views...  done in &lt;time&gt;\nGenerating categories...  done in &lt;time&gt;\nGenerating simple products...  done in &lt;time&gt;\nGenerating configurable EAV variations...  done in &lt;time&gt;\n... more ...\n  \n\n  Related topics\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-perf-data.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-spt-util-html": {
      "title": "Run the support utilities",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of the support utilities\n  The Magento support utilities (also referred to as the Data Collector) enable Magento Commerce users to gather troubleshooting information about your system that can be used by our Support team.\n\n  Magento Support uses these backups (also referred to as dumps) to analyze issues that require access to your code. A typical scenario follows:\n\n  \n    You’re having an issue with your Magento store and you contact Magento Support.\n    Support determines they need to see your code or database to reproduce the issue.\n    \n      You back up the code to a .tar.gz file.\n\n      This backup excludes your media files to speed up the process and to result in a much smaller file.\n    \n    \n      You back up the database to a .tar.gz file.\n\n      By default, sensitive data is hashed when making the backup.\n    \n    You upload your backups to a file sharing service.\n    Support analyzes your issues without affecting your development or production environment.\n  \n\n  The utilities can take several minutes to complete.\n\n  Create a code backup\n  This command backs up code and compresses it in tar.gz format.\n\n  \n\n    \n      This is not the same code backup performed by the magento setup:backup command. This command is intended to be used to back up code for examination by Magento Support.\n    \n\n    Command options:\n\n    magento support:backup:code [--name=&lt;file name&gt;] [-o|--output=&lt;path&gt;] [-l|--logs]\n    \n\n    Where:\n\n    \n      --name specifies the dump file name (optional). If you omit this parameter, the dump file is time and date-stamped.\n      -o|--output=&lt;path&gt; is the absolute file system path to store the backup (required).\n      -l|--logs includes log files (optional).\n    \n\n    For example, to create a code backup named /var/www/html/magento2/var/log/mycodebackup.tar.gz:\n\n    magento magento support:backup:code --name mycodebackup -o /var/www/html/magento2/var/log\n    \n\n    After the command completes, provide the code backup to Magento Support.\n\n    Create a database backup\n    This command backs up the Magento database and compresses it in tar.gz format.\n\n    \n\n      \n        This is not the same code backup performed by the magento setup:backup command. This command is intended to be used to back up code for examination by Magento Support.\n      \n\n      Command options:\n\n      magento support:backup:db [--name=&lt;name&gt;] [-o|--output=&lt;path&gt;] [-l|--logs] [-i|--ignore-sanitize]\n      \n\n      Where:\n\n      \n        --name specifies the dump file name (optional). If you omit this parameter, the dump file is time and date-stamped.\n        -o|--output=&lt;path&gt; is the absolute file system path to store the backup (required).\n        -l|--logs includes log files (optional).\n        -i|--ignore-sanitize means that data is preserved; omit the flag to hash sensitive data stored in the database when creating the backup (optional).\n      \n\n      After the command completes, provide the database backup to Magento Support.\n\n      \n\n        What is sensitive data?\n        Magento uses your encryption key to encrypt the following:\n\n        \n          Credit card information\n          User names and passwords specified in the Magento Admin configuration  (for example, logins to payment gateways)\n          CAPTCHA values sent over the network\n        \n\n        Magento does not encrypt:\n\n        \n          Administrative and customer user names and passwords (these passwords are hashed)\n          Address\n          Phone number\n          Other types of personally identifiable information except for credit card numbers\n        \n\n        Troubleshooting: display utilities and paths\n        We provide commands that display paths to utilities required by the Data Collector and the command line. You can use these commands, for example, if errors like the following display in the Admin or on the command line:\n\n        Utility lsof not found\n        \n\n        Run the following commands in the order shown to display the paths to the applications used by the support utilities and Data Collector:\n\n        \n          \n            Change to your Magento installation directory.\n\n            For example, cd /var/www/magento2\n\n            \n              The commands run properly only from your Magento installation directory.\n            \n          \n          php bin/magento support:utility:paths creates &lt;your Magento install dir&gt;/var/support/Paths.php, which lists the paths to all application used by the utility.\n          php bin/magento support:utility:check -u displays the file system paths.\n        \n\n        A sample follows:\n\n        gzip =&gt; /bin/gzip\nlsof =&gt; /usr/sbin/lsof\nmysqldump =&gt; /usr/bin/mysqldump\nnice =&gt; /bin/nice\nphp =&gt; /usr/bin/php\ntar =&gt; /bin/tar\nsed =&gt; /bin/sed\nbash =&gt; /bin/bash\nmysql =&gt; /usr/bin/mysql\n        \n\n        To resolve issues with running the tools, make sure these applications are installed and are in the web server user’s $PATH environment variable.\n\n        Related topics\n\n        \n          Manage the cache\n          Manage the indexers\n          Configure and run cron\n          Code compiler\n          URN highlighter\n          Dependency reports\n          Translation dictionaries and language packages\n          Deploy static view files\n          Create symlinks to LESS files\n          Run unit tests\n          Convert layout XML files\n          Generate data for performance testing\n        \n      \n    \n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-spt-util.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-static-view-html": {
      "title": "Deploy static view files",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of static view files deployment\n  The static view files deployment command enables you to write static files to the Magento file system when the Magento software is set for production mode.\n\n  The term static view file refers to the following:\n\n  \n    “Static” means it can be cached for a site (that is, the file is not dynamically generated). Examples include images and CSS generated from LESS.\n    “View” refers to the presentation layer (from MVC).\n  \n\n  Static view files are located in the &lt;your Magento install dir&gt;/pub/static directory, and some are cached in the &lt;your Magento install dir&gt;/var/view_preprocessed directory as well.\n\n  Static view file deployment is affected by Magento modes as follows:\n\n  \n    Default and developer modes: Magento generates them on demand, but the rest are cached in a file for speed of access.\n    Production mode: Static files are not generated or cached.\n  \n\n  You must write static view files to the Magento file system manually using the command discussed in this topic; after that, you can restrict permissions to limit your vulnerabilities and to prevent accidental or malicious overwriting of files.\n\n  \n    Developer mode only: When you install or enable a new module, it might load new JavaScript, CSS, layouts, and so on. To avoid issues with static files, you must clean the old files to make sure you get all the changes for the new module.\n\n    You can clean generated static view files in several ways. Refer to Clean static files cache topic for details for more information.\n  \n\n  Deploy static view files\n  To deploy static view files:\n\n  \n    Log in to the Magento server as, or switch to, the Magento file system owner.\n    Delete the contents of &lt;your Magento install dir&gt;/pub/static.\n    \n      Run the static view files deployment tool &lt;your Magento install dir&gt;/bin/magento setup:static-content:deploy.\n\n\n      \n        If you enable static view file merging in the Magento Admin, the pub/static directory system must be writable.\n      \n    \n  \n\n  Command options:\n\n  magento setup:static-content:deploy &lt;lang&gt; ... &lt;lang&gt; [--dry-run]\n  \n\n  The following table explains this command’s parameters and values.\n\n  \n\t\n\t\t\n\t\t\tOption\n\t\t\tDescription\n\t\t\tRequired?\n\t\t\n\t\n\t\t&lt;languages&gt;\n\t\tSpace-separated list of ISO-639 language codes for which to output static view files. (Default is en_US.)\n\t\tYou can find the list by running magento info:language:list.\n\tNo\n\t\n\t\t\n\t\t--dry-run\n\t\tInclude to view the files output by the tool without outputting anything.\n\t\tNo\n\t\n\t\n\n\n  For example, to deploy static view files for the pt_BR language:\n\n  magento --ansi setup:static-content:deploy pt_BR\n  \n\n  The following are some sample messages that display to indicate successful deployment:\n\n  Requested languages: pt_BR\n=== frontend -&gt; Magento/luma -&gt; pt_BR ===\n... progress indicator ...\nSuccessful: 1613 files; errors: 0\n\n=== frontend -&gt; Magento/blank -&gt; pt_BR ===\n... progress indicator ...\nSuccessful: 1620 files; errors: 0\n\n=== adminhtml -&gt; Magento/backend -&gt; pt_BR ===\n... progress indicator ...\nSuccessful: 1626 files; errors: 0\n\n=== Minify templates ===\n... progress indicator ...\nSuccessful: 858 files modified\n---\nNew version of deployed files: 1430773903\n  \n\n  Troubleshooting the static view files deployment tool\n  Install the Magento software first; otherwise, you cannot run the static view files deployment tool.\n\n  Symptom: The following error is displayed when you run the static view files deployment tool:\n\n  ERROR: You need to install the Magento application before running this utility.\n  \n\n  Solution:\n\n  Use the following steps:\n\n  \n    \n      Install the Magento software in any of the following ways:\n\n      \n        Command line\n        Setup wizard\n      \n    \n    Log in to the Magento server as, or switch to, the Magento file system owner.\n    Delete the contents of &lt;your Magento install dir&gt;/pub/static directory.\n    \n      Run the static view files deployment tool.\n\n\n      \n    \n  \n\n  Tips for developers customizing the static content deployment tool\n  When creating a custom implementation of the static content deployment tool, do not use non atomic writing to files that should be available on the client side. Otherwise, those files might be loaded on the client side with partial content.\n\n  One of the options for making it atomic, is writing to files stored in a temporary directory and copying or moving them to the destination directory (from where they are actually loaded to client side) once writing is over. For details about writing to files see http://php.net/manual/en/function.fwrite.php.\n\n  Please note, that the default Magento implementation of \\Magento\\Framework\\Filesystem\\Directory\\WriteInterface::writeFile uses non-atomic write to file.\n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-static-view.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-test-html": {
      "title": "Run unit tests",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of tests\n  This command runs a set of tests defined in the Magento 2 code base. You can either run all tests or tests you select. Whenever an unsupported type is specified, the program terminates and lists all available types. Following execution, a detailed report displays showing the test run and results.\n\n  Prerequisites\n  Before you run this command, all of the following must be true:\n\n  \n    \n      The Magento_Developer module must be enabled. You can enable it as follows:\n\n      magento module:enable [--force] Magento_Developer\n      \n\n      Use the --force option only if it’s necessary.\n    \n    \n      Your system must be set up to run the desired tests.\n    \n  \n\n  For example, to run integration tests, you should copy dev/tests/integration/etc/install-config-mysql.php.dist to dev/tests/integration/etc/install-config-mysql.php and modify it to suit your environment.\n\n  Running tests\n  Command usage:\n\n  magento dev:tests:run &lt;test&gt;\n  \n\n  To list the available test types:\n\n  magento dev:tests:run --help\n  \n\n  This gives you a list similar to the following:\n\n  all, unit, integration, integration-all, static, static-all, integrity, legacy, default\n  \n\n  For example, to run integration tests:\n\n  magento dev:tests:run integration\n  \n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    URN highlighter\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-test.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-urn-html": {
      "title": "URN highlighter",
      "content": "\n\n  In addition to the command arguments described in this topic, see Common arguments.\n\n  \n    You should be running all Magento CLI commands as the Magento file system owner.\n  \n\n  Overview of URN highlighter\n  Magento code references all XSD schemas as Uniform Resource Names (URNs). If you’re developing code and need to reference XSDs, this command configures your integrated developer environment (IDE) to recognize and highlight URNs. This makes development easier.\n\n  By default, an IDE like PHPStorm is not configured to recognize URNs and, as a result, they display in red text as follows:\n\n  \n\n  The magento dev:urn-catalog:generate command enables your IDE (currently, only PHPStorm) to recognize and highlight URNs like the following:\n\n  \n\n  Specifically, this command creates the following PHPStorm configuration:\n\n  \n\n  Configure your IDE\n  Currently, only PHPStorm is supported.\n\n  Command syntax:\n\n  magento dev:urn-catalog:generate &lt;path&gt;\n  \n\n  Where &lt;path&gt; is the path to your PHPStorm misc.xml file, which is located relative to your project root. Typically, &lt;path&gt; is .idea/misc.xml.\n\n  Related topics\n\n  \n    Manage the cache\n    Manage the indexers\n    Configure and run cron\n    Code compiler\n    Set the Magento mode\n    Dependency reports\n    Translation dictionaries and language packages\n    Deploy static view files\n    Create symlinks to LESS files\n    Run unit tests\n    Convert layout XML files\n    Generate data for performance testing\n  \n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands-urn.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-subcommands-html": {
      "title": "Get started with command-line configuration",
      "content": "Before you configure the Magento application\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nAfter you log in to the Magento server, switch to a user that has permissions to write to the Magento file system. One way to do this is discussed in switch to the Magento file system owner.\n\n\n\nFirst steps\n\n  Log in to the Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the following directory:\n\n    cd &lt;your Magento install dir&gt;/bin\n    \n\n    Examples:\n\n    \n      Ubuntu: cd /var/www/magento2/bin\n      CentOS: cd /var/www/html/magento2/bin\n    \n  \n\n\n\n  You can run the commands in any of the following ways:\n\n  \n    php magento &lt;command&gt;\n    ./magento &lt;command&gt;\n    magento &lt;command&gt; (after adding &lt;your Magento install dir&gt;/bin to your system PATH)\n  \n\n\nCommand summary\nThe following table summarizes the available commands. Commands are shown in summary form only; for more information about a command, click the link in the Command column.\n\n\n  Before you run any of these commands, you must either install the Magento application or enable some modules.\n\n\n\n\t\n  \t\n  \t\n\t\n\t\t\n\t\t\tCommand\n\t\t\tDescription\n\t\t\n\n\t\n\t\tmagento setup:cache:{enable|disable|clean|flush|status}\n\t\tManages the cache\n\t\n\t\n\t\tmagento setup:indexer:{status|show-mode|set-mode|reindex|info}\n\t\tManages the indexers\n\t\n\n\t\n\t\tmagento cron:run\n\t\tRuns Magento cron jobs\n\t\n\t\n\t\tmagento setup:di:compile-multi-tenant\n\t\tUse only if you have multiple independent Magento applications (in other words, one common Magento code base but more than one independent instance of the Magento application).\n\t\tCompiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for multiple stores or websites.\n\t\n\t\n\t\tmagento setup:di:compile\n\t\tUse if you have one instance of the Magento application.\n\t\t\tCompiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for one store and website.\n\t\n\t\n\t\tmagento info:dependencies:{show-modules|show-modules-circular|show-framework}e\n\t\tModule dependencies, circular dependencies, and Magento framework dependencies.\n\t\n\t\n\t\tmagento i18n:{collect-phrases|pack}\n\t\tCreates a translation dictionary or a translation package\n\t\n\t\n\t\tmagento setup:static-content:deploy\n\t\tDeploys static view files\n\t\n\t\n\t\tmagento dev:source-theme:deploy\n\t\tCreates CSS from LESS\n\t\n\t\n\t\tmagento dev:tests:run\n\t\tRuns automated tests\n\t\n\t\n\t\tmagento dev:xml:convert\n\t\tUpdate your layout XML files to match the new Extensible Stylesheet Language Transformations (XSLT) stylesheet\n\t\n\t\n\t\tmagento setup:perf:generate-fixtures\n\t\tGenerate data to use for performance testing.\n\t\n\t\n\t\tmagento sampledata:install\n\t\tInstalls optional Magento sample data after you install the Magento application.\n\t\t\tFor more details about Magento sample data, see Optional Magento sample data.\n\t\n\n\t\n\n\nHelp commands\nTo display a complete list of commands, enter:\nmagento --list\nTo get help for a particular command, enter:\nmagento --help &lt;command&gt;\nFor example,\nmagento --help setup:install\nmagento --help cache:enable\n\nCommon arguments\nThe following arguments are common to all commands. These commands can be run either before or after the Magento software is installed:\n\n\t\n\t\t\n  \t\t\n  \t\t\n\t\t\n\t\t\tLong version\n\t\t\tShort version\n\t\t\tMeaning\n\t\t\n\t\t\n\t\n\t\t--help\n\t\t-h\n\t\tGet help for any command. For example, ./magento help setup:install or ./magento help setup:config:set.\n\t\n\t\n\t\t--quiet\n\t\t-q\n\t\tQuiet mode; no output.\n\t\n\t\n\t\t--no-interaction\n\t\t-n\n\t\tNo interactive questions.\n\t\n\t\n\t\t--verbose=1|2|3\n\t\t-v|vv|vvv\n\t\tVerbosity level. For example, --verbose=3 or -vvv displays debug verbosity, which is the most verbose output. Default is --verbose=1 or -v.\n\t\n\t\n\t\t--version\n\t\t-V\n\t\tDisplay this application version\n\t\n\t\n\t\t--ansi\n\t\tn/a\n\t\tForce ANSI output\n\t\n\t\t\n\t\t--no-ansi\n\t\tn/a\n\t\tDisable ANSI output\n\t\n\t\n\t\n\t\n\n\nCommands\nThe following sections discuss the available commands.\n\n\n  Manage the cache\n  Manage the indexers\n  Configure and run cron\n  Code compiler\n  Set the Magento mode\n  URN highlighter\n  Dependency reports\n  Translation dictionaries and language packages\n  Deploy static view files\n  Create symlinks to LESS files\n  Run unit tests\n  Convert layout XML files\n  Generate data for performance testing\n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli-subcommands.html"
    }
    ,
  
    "guides-v2-0-config-guide-cli-config-cli-html": {
      "title": "Command line configuration",
      "content": "Introducing the Magento command-line interface (CLI)\nMagento has one command-line interface that performs both installation and configuration tasks: &lt;your Magento install dir&gt;/bin/magento. The new interface performs multiple tasks, including:\nInstalling Magento (and related tasks such as creating or updating the database schema, creating the deployment configuration, and so on)\n\tClearing the cache\n\tManaging indexes, including reindexing\n\tCreating translation dictionaries and translation packages\n\tGenerating non-existent classes such as factories and interceptors for plug-ins, generating the dependency injection configuration for the object manager.\n\tDeploying static view files\n\tCreating CSS from LESS\nOther benefits:\nA single command (php &lt;your Magento install dir&gt;/bin/magento list) lists all available installation and configuration commands\nConsistent user interface based on Symfony\nThe CLI is extensible so third party developers can \"plug in\" to it\nThis has the additional benefit of eliminating users' learning curve\nCommands for disabled modules do not display.\n\nThis topic discusses configuring the Magento software using the CLI. For information about installing Magento, see Installation overview.\n\nBefore you start configuring Magento\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nAfter you log in to the Magento server, switch to a user that has permissions to write to the Magento file system. One way to do this is discussed in switch to the Magento file system owner.\n\n\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  Next step\n\n  Get started with command-line configuration\n\n",
      "url": "/guides/v2.0/config-guide/cli/config-cli.html"
    }
    ,
  
    "guides-v2-0-config-guide-config-config-create-html": {
      "title": "Create or extend configuration types",
      "content": "Extend configuration types\nTo extend an existing configuration type, you need only create a configuration file in your module.\n\nFor example, to add an event observer, you create app/etc/events.xml and declare a new observer.\n\nBecause the event configuration type already exists in Magento, the loader and the events.xsd validating schema are already present and functional.\n\nYour new events.xml is automatically collected from your module and merged with other events.xml files for other modules.\n\nCreate configuration types\nTo create new configuration type, you must add at minimum:\n\n\n  XML configuration files\n  XSD validation schema\n  A loader\n\n\nFor example, to introduce an adapter for a new search server that enables extensions to configure how its entities are indexed in that server, create:\n\n\n  A loader.\n  An XSD schema.\n  Any other classes required for your new type to work.\n  \n    An appropriately named configuration file. For example, search.xml. This file is read and validated against your schema.\n\n    If other modules have a search.xml file, they are merged with your file when it loads.\n  \n\n\nTo create a new configuration type, extend the \\Magento\\Framework\\Config\\ReaderInterface, which is Magento\\Framework\\Config\\Reader\\Filesystem to provide the following parameters:\n\n\n  $fileResolver. Implements \\Magento\\Framework\\Config\\FileResolverInterface. This parameter lists the files containing the configurations of your custom type.\n  $converter. Implements \\Magento\\Framework\\Config\\ConverterInterface. This parameter converts the XML into the internal array representation of the configurations.\n  $schemaLocator. Implements \\Magento\\Framework\\Config/SchemaLocatorInterface. This parameter provides the full path to file(s) containing schema(s) for validation of the individual and merged configuration files.&lt;/p&gt;\n  $validationState. Implements \\Magento\\Framework\\Config\\ValidationStateInterface. This parameter defines whether a configuration file should be validated.\n  $fileName. Name of a configuration file. The Reader looks for the file names specified by this parameter in modules’ etc directories.\n  \n    $idAttributes. Array of node attribute IDs.\n\n    For example, to merge the XML files:\n\n    array(\n  '&lt;/path/to/node&gt;' =&gt; '&lt;identifierAttributeName&gt;',\n  '&lt;/path/to/other/node&gt;' =&gt; '&lt;identifierAttributeName&gt;',\n}\n    \n  \n  $defaultScope. Defines the configuration scope to be read by default. The default value for this parameter is global scope.\n\n\nAfter you customize ReaderInterface, you can use it to collect, merge, validate, and convert the configuration files to an internal array representation.\n\nValidate a configuration type\n\nEach configuration file is validated against a schema specific to its configuration type. Example: events, which, in earlier Magento versions, were configured in config.xml, are now configured in events.xml.\n\nConfiguration files can be validated both before (optional) and after any merge of multiple files affecting the same configuration type. Unless the validation rules for the individual and merged files are identical, you should provide two schemas for validating the configuration files:\n\n\n  Schema to validate an individual\n  Schema to validate a merged file\n\n\nNew configuration files must be accompanied by XSD validation schemas. An XML configuration file and its XSD validation file must have the same name.\n\nIf you must use two XSD files for a single XML file, the names of the schemas should be recognizable and associated with the XML file.\n\nIf you have an events.xml file and a first events.xsd file, the XSD files for the merged events.xml file could be named events_merged.xsd.\n\nTo ensure validation of an XML file by appropriate XSD file, you must the Uniform Resource Name (URN) to the XSD file in the XML file. For example:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager:etc/config.xsd\"&gt;\n\n\nYour IDE can validate your configuration files at both runtime and during development.\n\nRelated topics\n\n\n  Module configuration files\n  Magento’s deployment configuration\n\n",
      "url": "/guides/v2.0/config-guide/config/config-create.html"
    }
    ,
  
    "guides-v2-0-config-guide-config-config-files-html": {
      "title": "Module configuration files",
      "content": "Overview of module configuration files\nThe responsibilities of the config.xml configuration file used in earlier versions of Magento is now divided between several files, located in various module directories. Magento’s multiple configuration files load on demand only when a module requests a specific configuration type.\n\nYou can use these files—also referred to as configuration types—to customize specific aspects of your module’s behavior.\n\nMultiple modules can declare configuration files that affect the same configuration type (for example, events), and these multiple configuration files are merged.\n\nFollowing are common terms used in this topic:\n\n\n      Configuration object\n      The Magento library or class that is responsible for defining and validating the configuration type. For example, the configuration object for config.xml is Magento\\Framework\\App\\Config.\n      Configuration stage\n      Stages are defined as primary, global, and area. Each stage determines when configuration type is loaded and merged with same-named configuration types. (For example, module.xml files are merged with other module.xml files.) For more information, see Configuration load and merge.\n      Configuration scope\n      Complementary to a configuration stages, a scope defines the configuration type model. For example, adminhtml is an area scope that is loaded with at the stage with other modules' adminhtml configurations. For more information, see Modules and areas.\n\n\nConfiguration load and merge\nThis section discusses how configuration files are loaded and merged.\n\nHow Magento loads configuration files\nMagento loads configuration files in the following order (all paths are relative to your Magento installation directory):\n\n\n  Primary configuration (app/etc/di.xml). This file is used to bootstrap Magento.\n  Global configurations from modules (&lt;your component base dir&gt;/&lt;vendorname&gt;/&lt;component-type&gt;-&lt;component-name&gt;/etc/*.xml). Collects certain configuration files from all modules and merges them together.\n  Area-specific configuration from modules (&lt;your component base dir&gt;/&lt;vendorname&gt;/&lt;component-type&gt;-&lt;component-name&gt;/etc/&lt;area&gt;/*.xml). Collects configuration files from all modules and merges them into the global configuration. Some area-specific configurations can override or extend the global configuration.\n\n\n\n\n  where\n\n  \n    &lt;your component base dir&gt; is the base directory in which your component is located. Typical values are app/code or vendor relative to the Magento installation directory.\n    &lt;vendorname&gt; is the component’s vendor name; for example, Magento’s vendor name is magento.\n    \n      &lt;component-type&gt; is one of the following:\n\n      \n        module-: An extension or module.\n        theme-: Theme.\n        language-: Language package.\n      \n\n      \n    \n  \t\tCurrently, themes are located under &lt;your Magento install dir&gt;/app/design/frontend or &lt;your Magento install dir&gt;/app/design/adminhtml\n\n    \n    &lt;component-name&gt;: Name of your component as defined in composer.json.\n  \n\n  Configuration file merge\n  Nodes in configuration files are merged based on their fully qualified XPaths, which has a special attribute defined in $idAttributes array declared as its identifier. This identifier must be unique for all nodes nested under the same parent node.\n\n  Magento’s merge algorithm follows:\n\n  \n    If node identifiers are equal (or if there is no identifier defined), all underlying content in the node (attributes, child nodes, and scalar content) is overridden.\n    If node identifiers are not equal, the node is a new child of the parent node.\n    If the original document has multiple nodes with the same identifier, an error is triggered because the identifiers cannot be distinguished.\n  \n\n  After configuration files are merged, the resulting document contains all nodes from the original files.\n\n  Configuration types, objects, and interfaces\n  The following sections provide information about configuration types, their corresponding configuration objects, and interfaces you can use to work with the objects:\n\n  \n    Configuration types and objects\n    Configuration interfaces\n  \n\n  Configuration types and objects\n  The following table shows each configuration type and the Magento configuration object to which it relates.\n\n  \n      \n            \n                  Configuration file\n                  Description\n                  Stage\n                  Configuration object\n            \n            \n                  config.php and env.php\n                  Deployment configuration\n                  Loads into memory when Magento initializes\n                  Has no object, cannot be customized\n            \n            \n                  config.xml\n                  System configuration\n                  primary, global \n                  \\Magento\\Framework\\App\\Config\n            \n            \n                  di.xml\n                  Dependency injection configuration\n                  primary, global, area\n                  \\Magento\\Framework\\ObjectManager\\Config\n            \n            \n                  events.xml\n                  Event/observer configuration\n                  global, area\n                  \\Magento\\Framework\\Event\n            \n\n            \n                  routes.xml\n                  Route configuration\n                  area\n                  Magento\\Framework\\App\\Route\\Config\n            \n      \n\n\n  Configuration interfaces\n  You can interact with configuration files using interfaces under Magento\\Framework\\Config. You can also use these interfaces if you create a new configuration types.\n\n  Magento\\Framework\\Config provides the following interfaces:\n\n  \n    Framework\\Config\\ConverterInterface, which converts the XML into an in-memory array representation of the configurations.\n    Framework\\Config\\DataInterface, which retrieves the configuration data in a specified scope.\n    Framework\\Config\\FileResolverInterface, which identifies the location of files to be read by Magento\\Framework\\Config\\ReaderInterface.\n    Framework\\Config\\ReaderInterface, which reads the configuration data from storage and selects the storage from which it reads.\n  \n\n  That is, the file system, database, other storage merges the configuration files according to the merging rules, and validates the configuration files with the validation schemas.\n\n  \n    Framework\\Config\\SchemaLocatorInterface, which locates the XSD schema.\n    Framework\\Config\\ScopeListInterface, which returns a list of scopes.\n    Framework\\Config\\ValidationStateInterface, which retrieves the validation state.\n  \n\n  Related topics\n\n  \n    Create or extend configuration types\n    Magento’s deployment configuration\n  \n\n",
      "url": "/guides/v2.0/config-guide/config/config-files.html"
    }
    ,
  
    "guides-v2-0-config-guide-config-config-magento-html": {
      "title": "Magento configuration files",
      "content": "Magento provides configuration files that enable you to easily customize a component. We also enable you to create new configuration types to extend default functionality.\n\nSee the following topics for details:\n\n\n  Magento’s deployment configuration\n  Module configuration files\n  Create or extend configuration types\n\n",
      "url": "/guides/v2.0/config-guide/config/config-magento.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-message-queues-config-mq-html": {
      "title": "Configure message queue topology",
      "content": "\n  The message queue topology can only be configured after Magento Open Source has been installed and before Magento Commerce has been installed. \n\n\nEach module that is to be a publisher must be configured as such. If you want a module to use the MQF, create a &lt;module&gt;/etc/queue.xml file and define the publisher, consumers, exchanges and bindings.\n\nEdit the queue.xml file\nThe queue.xml file can contain the following elements:\n\n\n  publisher\n  topic\n  consumer\n  bind\n\n\nRequired elements\n\nEach queue.xml file must contain the following lines:\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework-message-queue:etc/queue.xsd\"&gt;\n.\n.\n.\n&lt;/config&gt;\n\npublisher element\nThe publisher element configures the type of connection and the exchange to publish to. By default, Magento uses one exchange. The name of exchange is a part of the publisher configuration. However multiple exchanges are supported, based on the AMQP model.\n\n\nParameterDescription\n\n\nname\nA unique identifer for the publisher. The value is specified in a topic element. The default system publisher name is `default`.\n\n\nconnection\nIf RabbitMQ is to used to manage the queue, then the value must be rabbitmq. The value can also be db or the name of a custom adapter.\n\n\nexchange\nThe name of the exchange to publish to. The value is referenced from the bind element. The default system exchange name is `magento`.\n\n\n\ntopic element\nConfiguring the topic element defines the interface that processes the message and assigns a publisher.\n\n\nParameterDescription\n\n\nname\nThe name assigned to the topic. The format should be object.action You can further distinguish topic names by appending .subaction to the end of the name. Use the past tense for all verbs, to indicate the event has already happened.\nExamples: customer.created, customer.sent.email\nThe value is specified in a bind element.\n\n\nschema\nThe interface that describes the structure of the message. It should be in the format of a Data Interface from the Service Contracts. For example, Magento\\Customer\\Api\\Data\\CustomerInterface.\n\nYou can also specify a service method signature, such as Magento\\Customer\\Api\\CustomerRepositoryInterface::save. In this case, format the message as an array of all service method parameters, like for a call_user_func_array call. The consumer's callback should expect each message part to be passed as a separate parameter.\n\n\n\npublisher\nThe name of a publisher.\n\n\n\nconsumer element\nEach consumer elements maps the receiver of a message to a specific queue. The class and method parameters indicate what receives and processes the message.\n\n\nParameterDescription\n\n\nname\nThe name of the consumer. The value should be the same as the magic method that to be used as a callback. \n\n\nqueue\nDefines the queue name to send the message to. This value is used in the definition of a bind element.\n\n\nconnection\nMust be rabbitmq or other value specified in the `connection` parameter in of a publisher.\n\n\nclass\nThe path to a Magento class that consumes the message.\n\n\nmethod\nThe method within the specified class that processes the message.\n\n\nmax_messages\nSpecifies the maximum number of messages to consume.\n\n\n\nbind element\nThe bind elements link topics to queues and exchanges, defining the message queue topology. A topic can be sent to any number of queues.\n\n\n\nParameterDescription\n\n\nqueue\nThe name of a queue defined in a consumer element.\n\n\nexchange\nThe name of an exchange defined in a publisher element.\n\n\ntopic\nThe name of a topic defined in a topic element. You can specify an asterisk (\\*) or pound sign (#) as wildcards. \n\n\n\nSample `queue.xml` file\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework-message-queue:etc/queue.xsd\"&gt;\n    &lt;publisher name=\"test-publisher-1\" connection=\"rabbitmq\" exchange=\"magento\"/&gt;\n    &lt;publisher name=\"test-publisher-2\" connection=\"db\" exchange=\"magento\"/&gt;\n    &lt;topic name=\"customer.created\" schema=\"Magento\\Customer\\Api\\Data\\CustomerInterface\" publisher=\"test-publisher-1\"/&gt;\n    &lt;topic name=\"customer.deleted\" schema=\"Magento\\Customer\\Api\\Data\\CustomerInterface\" publisher=\"test-publisher-2\"/&gt;\n    &lt;consumer name=\"customerCreatedListener\" queue=\"test-queue-1\" connection=\"rabbitmq\" class=\"Data\\Type\" method=\"processMessage\"/&gt;\n    &lt;consumer name=\"customerDeletedListener\" queue=\"test-queue-2\" connection=\"db\" class=\"Other\\Type\" method=\"processMessage2\" max_messages=\"98765\"/&gt;\n    &lt;bind queue=\"test-queue-1\" exchange=\"magento\" topic=\"customer.created\" /&gt;\n    &lt;bind queue=\"test-queue-2\" exchange=\"magento\" topic=\"customer.deleted\" /&gt;\n&lt;/config&gt;\n\nRelated Topics\n\n  Message Queues Overview\n  Manage message queues\n  Install RabbitMQ\n\n",
      "url": "/guides/v2.0/extension-dev-guide/message-queues/config-mq.html"
    }
    ,
  
    "guides-v2-0-config-guide-config-config-php-html": {
      "title": "Magento's deployment configuration",
      "content": "Purpose of the deployment configuration\n\nMagento’s deployment configuration consists of the shared and system-specific configuration for your installation. Magento’s deployment configuration is divided between:\n\n\n  \n    &lt;Magento base dir&gt;/app/etc/config.php, referred to as the shared configuration file, because you can check it in to source control and use it in your development, staging, and production systems\n\n    config.php contains the list of installed modules, themes, and language packages; and shared configuration settings\n  \n  \n    &lt;Magento base dir&gt;/app/etc/env.php, which contains system-specific settings, such as:\n  \n\n\nTogether, config.php and env.php are referred to as Magento’s deployment configuration because they are created during installation and are required to start Magento.\n\n\n  The Magento 2 deployment configuration replaces local.xml in Magento 1.x.\n\n\nUnlike other module configuration files, Magento’s deployment configuration is loaded into memory when Magento initializes, is not merged with any other files, and cannot be extended. (config.php and env.php are merged with each other, however.)\n\nDetails about the deployment configuration\nconfig.php and env.php are PHP files that return a multi-dimensional associative array, which is basically a hierarchical arrangement of configuration parameters and values.\n\nOn the top level of this array are configuration segments. A segment has arbitrary content (a scalar value or a nested array) distinguished by an arbitrary key—where both the key and its value are defined by the Magento framework.\n\nMagento\\Framework\\App\\DeploymentConfig merely provides access to these sections but does not allow you to extend them.\n\nOn the next hierarchy level, items in each segment are ordered according to the module sequence definition, which is obtained by merging all modules’ configuration files, with the exception of disabled modules.\n\nThe following sections discusses the structure and contents of the deployment configuration—config.php and env.php.\n\n\n  Manage installed modules\n  Environmental configuration\n\n\nManage installed modules\nconfig.php lists your installed modules. Magento provides both command-line and web-based utilities to manage modules (install, uninstall, enable, disable, or upgrade).\n\nExamples:\n\n\n  Uninstall components: bin/magento setup:uninstall\n  Enable or disable components: bin/magento module:enable, bin/magento module:disable.\n  Component Manager\n  System Upgrade\n\n\nconfig.php snippet:\n\nreturn array (\n  'modules' =&gt;\n  array (\n    'Magento_Core' =&gt; 1,\n    'Magento_Store' =&gt; 1,\n    'Magento_Theme' =&gt; 1,\n    'Magento_Authorization' =&gt; 1,\n    'Magento_Directory' =&gt; 1,\n    'Magento_Backend' =&gt; 1,\n    'Magento_Backup' =&gt; 1,\n    'Magento_Eav' =&gt; 1,\n    'Magento_Customer' =&gt; 1,\n...\n  ),\n);\n\nThe value 1 or 0 indicates whether a module is enabled or disabled.\n\nDisabled modules are not recognized by the Magento application; in other words, they don’t participate in merging configuration, in dependency injection, events, plug-ins, and so on. Disabled modules do not modify the storefront or Admin and don’t affect routing.\n\nThe only practical difference of a module being disabled and being completely absent in the code base is that a disabled module is found by the autoloader, enabling its classes and constants to be reused in other code.\n\nEnvironmental configuration\nThe following table provides details about each env.php segment and its structure.\n\n\n  \n    \n      Segment\n      Key\n      Structure\n    \n    \n      Database\n      db\n      __/db\n|__/connection\n| |__/[default]\n|   |-- host\n|   |-- dbname\n|   |-- username\n|   |-- password\n|   |-- model [mysql4]\n|   |-- initStatements [SET NAMES utf8;]\n|   |-- active [1]\n|-- table_prefix\n    \n    \n      Resources\n      resource\n      __/resource\n |__/default_setup\n   |-- connection [default]\n    \n    \n      Session storage\n      session\n      __/session\n |__/save\n   |-- &lt;files|db&gt;\n    \n    \n      Admin URL path\n      backend\n      __/backend\n |-- frontName\n    \n    \n      Cache storage\n      cache\n      __/cache\n |__/frontend\n   |__/See frontend options\n    \n    \n      Installation date\n      install\n      __/install\n |-- date\n    \n    \n      Encryption key\n      encrypt\n      __/crypt\n |-- key\n    \n    \n      Cache types\n      cache_types\n      __/cache_types\n |-- &lt;enumerated cache types&gt;\n    \n  \n\n\nRelated topic\nModule configuration files\n",
      "url": "/guides/v2.0/config-guide/config/config-php.html"
    }
    ,
  
    "guides-v2-0-config-guide-redis-config-redis-html": {
      "title": "Configure Redis",
      "content": "Overview of the Redis solution\nRedis is an optional backend cache solution to replace Zend_Cache_Backend_File, which is used in Magento 2 by default.\n\nIssues with Zend_Cache_Backend_File\n\n\n  \n    The core_cache_tag table constantly grows. If a Magento instance has multiple web sites and web stores with large catalogs, the table can grow to 15 million records in less than a day. Insertion into core_cache_tag leads to issues with MySQL server, including performance degradation.\n\n    (A tag is an identifier that classifies different types of Magento cache objects.)\n  \n  \n    The TwoLevels backend is more difficult to maintain because two services are required to make it work which makes it difficult to analyze cache content when necessary.\nFurther, memcached itself has limitations such as a maximum object size and fixed bucket sizes which also contribute to difficult maintenance.\n  \n  \n    The Zend TwoLevels backend does not scale well because using the database as part of the cache backend adds additional load to the master database server. Additionally, there is no reliable method for memcached replication.\n  \n\n\nWhy Redis is better\nAdvantages of Redis include:\n\n\n  \n    Redis can also be used for PHP session storage, making it possible to completely replace memcached with Redis.\n  \n  \n    The Redis backend works by indexing tags in files so that tag operations do not require a full scan of every cache file.\n  \n  \n    The metadata and the cache record are stored in the same file rather than separate files resulting in fewer inodes and fewer file stat, read, write, lock, and unlink operations. Also, the original hashed directory structure had very poor distribution due to the adler32 hashing algorithm and prefixes. The multi-level nested directories have been dropped in favor of single-level nesting made from multiple characters.\n  \n  \n    The backend supports tag-based cache cleanup without foreach loops.\n  \n  \n    Redis supports on-disk save and master/slave replication.\n\n    This is a highly requested feature that is not supported by memcached. Replication avoids a single point of failure and provides high  availability.\n  \n\n\n\n   \n   Starting in Magento 2.0.6, you can use either Redis or memcached for session storage. Earlier issues with the Redis session handler and session locking have been resolved.\n\n\nInstall Redis\nInstalling and configuring the Redis software is beyond the scope of this guide. Consult resources such as:\n\n\n  Download Redis page\n  Redis quick start\n  digitalocean\n  Redis documentation page\n\n\nFor more information\nYou can find more information about configuring Redis from the following:\n\n\n  David Alger\n  TechyTalk\n\n\n\nNext\n\n\n  Use Redis for the Magento page and default cache\n  Use Redis for session storage\n\n",
      "url": "/guides/v2.0/config-guide/redis/config-redis.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-config-varnish-configure-html": {
      "title": "Configure Varnish and your web server",
      "content": "Configure your web server\nConfigure your web server to listen on a port other than the default port 80 because Varnish responds directly to incoming HTTP requests, not the web server.\n\nIn the sections that follow, we use port 8080 as an example.\n\nTo change the Apache 2.2 listen port:\n\n\n  Open /etc/httpd/conf/httpd.conf (or /etc/apache2/ports.conf on Debian and Ubuntu) in a text editor.\n  Locate the Listen directive.\n  Change the value of the listen port to 8080. (You can use any available listen port.)\n  Save your changes to httpd.conf and exit the text editor.\n\n\non Debian and Ubuntu\n\n  Open /etc/apache2/ports.conf in a text editor.\n  Locate the Listen directive.\n  Change the value of the listen port to 8080. (You can use any available listen port.)\n  Save your changes to ports.conf and exit the text editor.\n  Open /etc/apache2/sites-enabled/000-default.conf in a text editor.\n  change &lt;VirtualHost *:80&gt; to &lt;VirtualHost *:8080&gt;\n  Save your changes to 000-default.conf and exit the text editor.\n\n\nModify the Varnish system configuration\nTo modify the Varnish system configuration:\n\n\n  \n    Open /etc/sysconfig/varnish (or /etc/default/varnish on Debian and Ubuntu) in a text editor.\n  \n  \n    Set the Varnish listen port to 80:\n\n    VARNISH_LISTEN_PORT=80\n    \n\n    For Varnish 4.*, make sure that DAEMON_OPTS contains the correct listening port for the -a parameter (even if VARNISH_LISTEN_PORT is set to the correct value):\n\n    DAEMON_OPTS=\"-a :80 \\\n   -T localhost:6082 \\\n   -f /etc/varnish/default.vcl \\\n   -S /etc/varnish/secret \\\n   -s malloc,256m\"\t\t\n    \n  \n  \n    Save your changes to /etc/sysconfig/varnish (or /etc/default/varnish on Debian and Ubuntu) and exit the text editor.\n  \n\n\nModify default.vcl\nThis section discusses how to provide minimal configuration so Varnish returns HTTP response headers. This enables you to verify Varnish works before you configure Magento to use Varnish.\n\nTo minimally configure Varnish:\n\n\n  \n    Back up default.vcl:\n\n    cp /etc/varnish/default.vcl /etc/varnish/default.vcl.bak\n    \n  \n  Open /etc/varnish/default.vcl in a text editor.\n  \n    Locate the following stanza:\n\n    backend default {\n  .host = \"127.0.0.1\";\n  .port = \"80\";\n}\n    \n  \n  \n    Replace the value of .host with the fully qualified host name or IP address and listen port of the Varnish backend or origin server; that is, the server providing the content Varnish will accelerate.\n\n    Typically, this is your web server.\n\n    More information\n  \n  \n    Replace the value of .port with the web server’s listen port (8080 in this example).\n\n    Example: Apache is installed on host 192.0.2.55 and Apache is listening on port 8080:\n\n    backend default {\n  .host = \"192.0.2.55\";\n  .port = \"8080\";\n}\n    \n\n    \n    If Varnish and Apache are running on the same host, we recommend you use an IP address or host name and not localhost.\n\n  \n  \n    Save your changes to default.vcl and exit the text editor.\n  \n  \n    Restart Varnish:\n\n    service varnish restart\n    \n  \n\n\nIf Varnish fails to start, try running it from the command line as follows:\n\nvarnishd -d -f /etc/varnish/default.vcl\n\n\nThis should display error messages.\n\n\n\tIf Varnish does not start as a service, you must configure SELinux rules to allow it to run. Consult the following resources:\n\t\tflatlinesecurity\n\t\t\tCentOS wiki\n\t\t\tCentOS documentation\n\n\nVerify Varnish is working\nThe following sections discuss how you can verify that Varnish is working but without configuring Magento to use it. You should try this before you configure Magento.\n\nPerform the tasks discussed in the following sections in the order shown:\n\n\n  Start Varnish\n  netstat\n\n\nStart Varnish\nEnter service varnish start\n\nIf Varnish fails to start as a service, start it from the command line as follows:\n\n\n  \n    Start the Varnish CLI:\n\n     varnishd -d -f /etc/varnish/default.vcl\n    \n  \n  \n    Start the Varnish child process:\n\n    When prompted, enter start\n\n    The following messages display to confirm a successful start:\n\n    child (29805) Started\n200 0\n\nChild (29805) said\nChild (29805) said Child starts\n    \n  \n\n\nnetstat\nLog in to the Varnish server and enter the following command:\n\nnetstat -tulpn\n\n\nLook for the following output in particular:\n\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      32614/varnishd\ntcp        0      0 127.0.0.1:58484             0.0.0.0:*                   LISTEN      32604/varnishd\ntcp        0      0 :::8080                     :::*                        LISTEN      26822/httpd\ntcp        0      0 ::1:48509                   :::*                        LISTEN      32604/varnishd\n\n\nThe preceding shows Varnish running on port 80 and Apache running on port 8080.\n\nIf you don’t see output for varnishd, make sure Varnish is running.\n\nMore information about netstat options\n\nInstall the Magento 2 software\nInstall the Magento 2 software if you haven’t already done so. When prompted for a Base URL, use the Varnish host and port 80 (for Varnish) because Varnish receives all incoming HTTP requests.\n\nPossible error installing Magento:\n\nError 503 Service Unavailable\nService Unavailable\nXID: 303394517\nVarnish cache server\n\n\nIf you experience this error, edit default.vcl and add a timeout to the backend stanza as follows:\n\nbackend default {\n     .host = \"127.0.0.1\";\n     .port = \"8080\";\n     .first_byte_timeout = 600s;\n}\n\n\nVerify HTTP response headers\nNow you can verify that Varnish is serving pages by looking at HTML response headers returned from any Magento page.\n\nBefore you can look at headers, you must set Magento for developer mode. There are several ways to do it, the simplest of which is to modify .htaccess in the Magento 2 root. You can also use the magento deploy:mode:set command.\n\nSet Magento for developer mode\nTo set Magento for developer mode, use the magento deploy:mode:set command.\n\nLook at the Varnish log\nMake sure Varnish is running then enter the following command on the Varnish server:\n\nvarnishlog\n\n\nIn a web browser, go to any Magento 2 page.\n\nA long list of response headers display in your command prompt window. Look for headers like the following:\n\n-   BereqHeader    X-Varnish: 3\n-   VCL_call       BACKEND_FETCH\n-   VCL_return     fetch\n-   BackendOpen    17 default(10.249.151.10,,8080) 10.249.151.10 60914\n-   Backend        17 default default(10.249.151.10,,8080)\n-   Timestamp      Bereq: 1440449534.261791 0.000618 0.000618\n-   ReqHeader      Host: 10.249.151.10\n-   ReqHeader      Connection: keep-alive\n-   ReqHeader      Content-Length: 86\n-   ReqHeader      Cache-Control: max-age=0\n-   ReqHeader      Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n-   ReqHeader      Origin: http://10.249.151.10\n\n\nIf headers like these do not display, stop Varnish, check your default.vcl, and try again.\n\nLook at HTML response headers\nThere are several ways to look at response headers, including using a browser plug-in like Live HTTP Headers (Firefox) or a browser inspector.\n\nThe following example uses curl. You can enter this command from any machine that can access the Magento server using HTTP.\n\ncurl -I -v --location-trusted '&lt;your Magento base URL&gt;'\n\n\nFor example,\n\ncurl -I -v --location-trusted 'http://192.0.2.55/magento2'\n\n\nLook for headers like the following:\n\nContent-Type: text/html; charset=iso-8859-1\nX-Varnish: 15\nAge: 0\nVia: 1.1 varnish-v4\nX-Magento-Cache-Debug: HIT\n\n\nNext step\nConfigure Magento to use Varnish\n",
      "url": "/guides/v2.0/config-guide/varnish/config-varnish-configure.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-config-varnish-final-html": {
      "title": "Final verification",
      "content": "Now that you’re using the default.vcl generated for you by Magento, you can perform some final verifications to make sure Varnish is working.\n\nVerify HTTP response headers\nUse curl or another utility to view HTTP response headers when you visit any Magento page in a web browser.\n\nFirst, make sure you are using Magento’s developer mode; otherwise, you won’t see the headers.\n\nFor example,\n\ncurl -I -v --location-trusted 'http://192.0.2.55/magento2'\n\n\nImportant headers:\n\nX-Magento-Cache-Control: max-age=86400, public, s-maxage=86400\nAge: 0\nX-Magento-Cache-Debug: MISS\n\n\n\n\tThis value is also acceptable: X-Magento-Cache-Debug: HIT\n\n\nCheck page load times\nIf Varnish is working, any Magento page with cacheable blocks should load in less than 150ms. Examples of such pages are the front door and storefront category pages.\n\nUse a browser inspector to measure page load times.\n\nFor example, to use the Chrome inspector:\n\n\n  Access any cacheable Magento page in Chrome.\n  Right-click anywhere on the page.\n  From the pop-up menu, click Inspect Element\n  In the inspector pane, click the Network tab.\n  Refresh the page.\n  \n    Scroll to the top of the inspector pane so you can see the URL of the page you are viewing.\n\n    The following figure shows an example of loading the magento2 index page.\n\n\n    The page load time displays next to the page URL. In this case, the load time is 5 ms. This helps confirm that Varnish cached the page.\n  \n  \n    To view HTTP response headers, click the page URL (in the Name column).\n\n    You can view HTTP headers which are discussed in more detail in Verify HTTP response headers.\n  \n\n\nVerify the Magento cache\nMake sure the &lt;your Magento install dir&gt;/var/page_cache directory is empty:\n\n\n  Log in to your Magento server, or switch to, the Magento file system owner.\n  \n    Enter the following command:\n\n    rm -rf &lt;your Magento install dir&gt;/var/page_cache/*\n    \n  \n  Access one or more cacheable Magento pages.\n  \n    Check the var/page_cache/ directory.\n\n    If the directory is empty, congratulations! You successfully configured Varnish and Magento to work together!\n  \n  If you cleared the var/page_cache/ directory, restart Varnish.\n\n\n\n\tIf you encounter 503 (Backend Fetch Failed) errors, see Troubleshooting 503 (Service Unavailable) errors.\n\n\nNext steps\n\n  How Magento cache clearing works with Varnish\n  How Varnish caching works\n\n",
      "url": "/guides/v2.0/config-guide/varnish/config-varnish-final.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-config-varnish-install-html": {
      "title": "Install Varnish",
      "content": "Installing the Varnish software is beyond the scope of this guide. For more information about installing Varnish, see:\n\n\n  installation wiki\n  Varnish installation guides\n  How to install Varnish (Tecmint)\n\n\n\n\tThis topic is written for Varnish on CentOS and Apache 2.2. If you're setting up Varnish in a different environment, some commands are likely different. Consult the preceding documentation for more information.\n\n\nConfirm your Varnish version\nEnter the following command to display the version of Varnish you’re running:\n\nvarnishd -V\n\n\nA sample follows:\n\nvarnishd (varnish-4.0.3 revision b8c4a34)\nCopyright (c) 2006 Verdens Gang AS\nCopyright (c) 2006-2014 Varnish Software AS\n\n\nMake sure the version is at least 3.0.5 or any version of 4.x before continuing.\n\nNext step\nConfigure Varnish and your web server\n",
      "url": "/guides/v2.0/config-guide/varnish/config-varnish-install.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-config-varnish-magento-html": {
      "title": "Configure Magento to use Varnish",
      "content": "To configure Magento to use Varnish:\n\n\n  Log in to the Magento Admin as an administrator.\n  Click STORES &gt; Configuration &gt; ADVANCED &gt; System &gt; Full Page Cache.\n  From the Caching Application list, click Varnish Caching.\n  Enter a value in the TTL for public content field.\n  \n    Expand Varnish Configuration and enter the following information:\n\n    \n\n  \t\n\n    \n        Field\n        Description\n    \n\n    Access list\n    Enter the fully qualified host name, IP address, or Classless Inter-Domain Routing (CIDR) notation IP address range for which to invalidate content.\n        More information\n\n\n    Backend host\n    Enter the fully qualified host name or IP address and listen port of the Varnish backend or origin server; that is, the server providing the content Varnish will accelerate. Typically, this is your web server. \n    More information\n\n\n    Backend port\n    Origin server's listen port.\n\n\n\n\n  \n  Click Save Config.\n\n\n\n  You can also activate Varnish from the command line–instead of logging in to the Magento Admin–using MySQL statement syntax:\n\n  mysql -u root -p -D magento -e \"INSERT INTO core_config_data ( scope, scope_id, path, value ) VALUES ( 'default', '0', 'system/full_page_cache/caching_application', '2') ON DUPLICATE KEY UPDATE value = 2;\"\n  \n\n  Where magento is the name of your database.\n\n\nExport a Varnish configuration file\nThis step is optional and should only be necessary if you changed the backend host and/or port number that you specified in the previous section.\n\nTo export a Varnish configuration file from the Admin panel:\n\n\n  \n    Click one of the export buttons to create a default.vcl you can use with Varnish.\n\n    For example, if you have Varnish 4, click Export VCL for Varnish 4\n\n    The following figure shows an example.\n\n  \n  Replace your existing default.vcl with the one you just exported.\n  \n    We recommend you open default.vcl and change the value of acl purge to the IP address of the Varnish host. (You can specify multiple hosts on separate lines or you can use CIDR notation as well.)\n\n    For example,\n\n    acl purge {\n   \"localhost\";\n}\n    \n  \n  \n    Restart Varnish and your web server:\n\n    service varnish restart\nservice httpd restart\n    \n  \n\n\nLast step\nFinal verification\n",
      "url": "/guides/v2.0/config-guide/varnish/config-varnish-magento.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-config-varnish-html": {
      "title": "Configure and use Varnish",
      "content": "Overview of the Varnish solution\nVarnish Cache is an open source web application accelerator (also referred to as an HTTP accelerator or caching HTTP reverse proxy). Varnish stores (or caches) files or fragments of files in memory; this enables Varnish to reduce the response time and network bandwidth consumption on future, equivalent requests. Unlike web servers like Apache and nginx, Varnish was designed for use exclusively with the HTTP protocol.\n\nMagento 2 supports versions 3.0.5 or later or any Varnish 4.x version.\n\n\n    We strongly recommend you use Varnish (or Redis) in production. The built-in full-page caching (to either the file system or database) is much slower than Varnish, and Varnish is designed to accelerate HTTP traffic.\n\n\nFor more information about Varnish, see:\n\n\n  wikipedia\n  The Big Varnish Picture\n  Varnish startup options\n  Varnish and Website Performance\n\n\nVarnish topology diagram\nThe following figure shows a basic view of Varnish in your Magento topology.\n\n\n\nIn the preceding figure, users’ HTTP requests over the internet result in numerous requests for CSS, HTML, JavaScript, and images (referred to collectively as assets). Varnish sits in front of the web server and proxies these requests to the web server.\n\nAs the web server returns assets, cacheable assets are stored in Varnish. Any subsequent requests for those assets are fulfilled by Varnish (meaning, the requests don’t reach the web server). Varnish returns cached content extremely quickly. The results are faster response times to return the content to users and a reduced number of requests that must be fulfilled by Magento.\n\nAssets cached by Varnish expire at a configurable interval or are replaced by newer versions of the same assets. You can also clear the cache manually either using the Magento Admin or the magento cache:clean command.\n\nProcess overview\nThis topic discusses how to initially install Varnish with a minimal set of parameters and test that it works. Then you’ll export a Varnish configuration from the Magento Admin and test it again.\n\nThe process can be summarized as follows:\n\n\n  Install Varnish and test it by accessing any Magento page to see if you’re getting HTTP response headers that indicate Varnish is working.\n  Install the Magento software and use the Magento Admin to create a Varnish configuration file.\n  Replace your existing Varnish configuration file with the one generated by the Admin.\n  \n    Test everything again.\n\n    If there is nothing in your &lt;your Magento install dir&gt;/var/page_cache directory, you’ve successfully configured Varnish with Magento!\n  \n\n\n\n\tExcept where noted, you must enter all commands discussed in this topic as a user with root privileges.\n\t\tThis topic is written for Varnish on CentOS and Apache 2.2. If you're setting up Varnish in a different environment, some commands are likely different. Consult Varnish documentation for more information.\n\n\nKnown issues\nWe know of the following issues with Varnish:\n\n\n  \n    Varnish does not support SSL\n\n    As an alternative, use SSL termination or an SSL termination proxy.\n  \n  \n    If you manually delete the contents of the &lt;your Magento install dir&gt;/var/cache directory, you must restart Varnish.\n  \n  \n    Possible error installing Magento:\n\n    Error 503 Service Unavailable\nService Unavailable\nXID: 303394517\nVarnish cache server\n    \n\n    If you experience this error, edit default.vcl and add a timeout to the backend stanza as follows:\n\n    backend default {\n  .host = \"127.0.0.1\";\n  .port = \"8080\";\n  .first_byte_timeout = 600s;\n}\n    \n  \n\n\nNext step\nInstall Varnish\n",
      "url": "/guides/v2.0/config-guide/varnish/config-varnish.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-configuration-overview-html": {
      "title": "Configure your store",
      "content": "The following information walks you through the options for configuring your store on your local and in all environments. You may need to configure files and settings in your local, pushing settings with your code. For specific services, you configure settings directly in Staging and Production environments.\n\nYou can set up multiple websites and stores in your Magento instance, creating and configuring them in your local branch and deploying the settings across your environments.\n\nStore configuration\nThe following options, tools, and features can be set up and configured in your store:\n\n\n  Fastly for caching and CDN in Staging and Production environments\n  cron jobs details how to create and configure Magento cron jobs in all environments\n  Multiple websites or stores details how to create and configure multi-sites for your store, for example multiple locales including English, French, and Spanish\n  Install, manage, and upgrade modules mo\n  Install a theme for your site and store\n\n\nConfigure your deploy: build hooks, services, and routes\nAfter fully configuring your store, you should configure your deployment. This includes specific files to manage builds, deployments, services, and routes:\n\n\n  .magento.app.yaml configures how the Magento application is built and deployed including services, hooks, cron jobs, and more\n  routes.yaml configures how Magento processes an incoming URL for your Integration environment\n  services.yaml configures the services you use in your stores and sites including name, version, and allocated disk space\n\n\nConfigure integrations\nWe also provide integrations with:\n\n\n  Blackfire Profiler configuration for tracking and investigating issues for bottleneck issues in processes, method calls, queries, loads, and so on\n  New Relic APM configuration for application and performance analysis in 3 instances or environments\n  Fastly configuration for CDN and caching\n  GitHub for managing your Git branches and code\n\n",
      "url": "/guides/v2.0/cloud/configure/configuration-overview.html"
    }
    ,
  
    "guides-v2-0-mtf-configuration-html": {
      "title": "Functional Testing Framework Configuration",
      "content": "The Functional Testing Framework configuration settings are located in two XML files:\n\n\n  phpunit.xml\n  config.xml\n\n\nphpunit.xml\n\nThe &lt;magento2_root_dir&gt;/dev/tests/functional/phpunit.xml contains PHPUnit configuration settings. Blocks of settings are described in PHPUnit documentation, except &lt;php&gt; that contains parameters described in the following table.\n\nShow/hide the default phpunit.xml code &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/4.1/phpunit.xsd\"\n         colors=\"true\"\n         bootstrap=\"bootstrap.php\"\n         backupGlobals=\"false\"\n         verbose=\"true\"\n&gt;\n    &lt;testsuites&gt;\n        &lt;testsuite name=\"All Tests\"&gt;\n            &lt;directory suffix=\"Test.php\"&gt;tests&lt;/directory&gt;\n        &lt;/testsuite&gt;\n    &lt;/testsuites&gt;\n\n    &lt;listeners&gt;\n        &lt;listener class=\"Magento\\Mtf\\System\\Browser\\Listener\" /&gt;\n        &lt;listener class=\"Magento\\Mtf\\System\\Isolation\\Listener\"&gt;\n            &lt;arguments&gt;\n                &lt;object class=\"Magento\\Mtf\\System\\Isolation\\Driver\\Base\" /&gt;\n            &lt;/arguments&gt;\n        &lt;/listener&gt;\n        &lt;listener class=\"Magento\\Mtf\\System\\Event\\StateListener\" /&gt;\n    &lt;/listeners&gt;\n\n    &lt;php&gt;\n        &lt;env name=\"app_frontend_url\" value=\"http://localhost/\" /&gt;\n        &lt;env name=\"app_backend_url\" value=\"http://localhost/backend/\" /&gt;\n        &lt;env name=\"testsuite_rule\" value=\"basic\" /&gt;\n        &lt;env name=\"testsuite_rule_path\" value=\"Magento/Mtf/TestSuite/InjectableTests\" /&gt;\n        &lt;env name=\"log_directory\" value=\"var/log\" /&gt;\n        &lt;env name=\"events_preset\" value=\"base\" /&gt;\n        &lt;env name=\"module_whitelist\" value=\"Magento_Install\" /&gt;\n        &lt;env name=\"basedir\" value=\"var/log\" /&gt;\n        &lt;env name=\"credentials_file_path\" value=\"./credentials.xml.dist\" /&gt;\n        &lt;env name=\"mage_mode\" value=\"developer\" /&gt;\n    &lt;/php&gt;\n\n&lt;/phpunit&gt;\n\n\n\n\n\n    Parameter\n    Description\n    value\n    Usage\n\n\n\n\n    app_frontend_url\n    URL to Magento storefront under test.\n    http://&lt;name&gt;.&lt;domain&gt;/\n    Set URL for Magento storefront under test\n\n\n    app_backend_url\n    URL to Magento Admin under test.\n    \"http://&lt;name&gt;.&lt;domain&gt;/&lt;path to Admin&gt;/\"\n    Set URL for Magento Admin URL under test\n\n\n    testsuite_rule\n    Test suite name to be run.\n    \"&lt;test suite name&gt;\"\n    Set a test suite\n\n\n    testsuite_rule_path\n    Path to a test suite.\n    \"&lt;path to test suite&gt;\"\n    Set a path to test suite\n\n\n    log_directory\n    Path to a directory with testing reports.\n    \"&lt;path to the reporting directory&gt;\"\n    Set a reporting directory\n\n\n    events_preset\n    Name of a reporting event preset.\n    \"&lt;event preset name&gt;\"\n    Set a preset\n\n\n    module_whitelist\n    List of special FTF modules which are present in functional tests but are not enabled in the Magento application.\n    \"&lt;names of modules&gt;\"\n    Make listed modules (that are not enabled in Magento) visible for the FTF.\n\n\n    basedir\n    A directory where PHPUnit reports are stored.\n    \"&lt;directory for PHPUnit reports&gt;\"\n    \n\n\n    credentials_file_path\n    Path to the file with credentials required by services such as payment and shipment.\n    \"./credentials.xml.dist\"\n    Edit credentials.xml to work with Magento modules that require credentials\n\n\n    mage_mode\n    Magento mode (About Magento modes).\n    \"default\", \"developer\", \"production\"\n    This parameter is intended to be used directly in a test. The FTF doesn't use it.\n\n\n    module_filter\n    Applicable for test suites only. Enables you to select test cases for specific modules. Learn more about the &lt;module&gt; filter in a test suite.\n    \"Magento_&lt;name_of_module&gt;\"\n    Use it when you don't want to modify the test suite. \n\n\n    module_filter_strict\n    Applicable for a tests suite only. It has the same effect as strict in the &lt;module&gt;. Learn more about strict parameter of the &lt;module&gt; filter in a test suite.\n    \"1\", \"0\"\n    Use it when you don't want to modify the test suite.\n\n\n\n\nconfig.xml\n\nThe FTF configuration settings are declared and specified in two places:\n\nin the Framework The file is located in &lt;magento2_root_dir&gt;dev/tests/functional/vendor/magento/mtf/etc\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"config.xsd\"&gt;\n    &lt;application&gt;\n        &lt;reopenBrowser&gt;testCase&lt;/reopenBrowser&gt;\n        &lt;backendLogin&gt;admin&lt;/backendLogin&gt;\n        &lt;backendPassword&gt;123123q&lt;/backendPassword&gt;\n        &lt;backendLoginUrl&gt;admin/auth/login&lt;/backendLoginUrl&gt;\n    &lt;/application&gt;\n    &lt;isolation&gt;\n        &lt;resetUrlPath&gt;dev/tests/mtf/isolation.php&lt;/resetUrlPath&gt;\n        &lt;testSuite&gt;before&lt;/testSuite&gt;\n        &lt;testCase&gt;none&lt;/testCase&gt;\n        &lt;test&gt;none&lt;/test&gt;\n    &lt;/isolation&gt;\n    &lt;server&gt;\n        &lt;item name=\"selenium\" type=\"default\" browser=\"Mozilla Firefox\" browserName=\"firefox\" host=\"localhost\" port=\"4444\" seleniumServerRequestsTimeout=\"90\" sessionStrategy=\"shared\"&gt;\n            &lt;desiredCapabilities&gt;\n                &lt;platform&gt;ANY&lt;/platform&gt;\n            &lt;/desiredCapabilities&gt;\n        &lt;/item&gt;\n    &lt;/server&gt;\n    &lt;handler&gt;\n        &lt;curl priority=\"0\" /&gt;\n        &lt;ui priority=\"1\" /&gt;\n    &lt;/handler&gt;\n&lt;/config&gt;\n\n\n\nFigure 1. - XML Schema for the &lt;magento2_root_dir&gt;dev/tests/functional/vendor/magento/mtf/etc/config.xml.\n\n\nin Magento functional tests The file is located in &lt;magento2_root_dir&gt;dev/tests/functional/\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"config.xsd\"&gt;\n    &lt;application&gt;\n        &lt;reopenBrowser&gt;testCase&lt;/reopenBrowser&gt;\n        &lt;backendLogin&gt;admin&lt;/backendLogin&gt;\n        &lt;backendPassword&gt;123123q&lt;/backendPassword&gt;\n        &lt;appBackendUrl&gt;http://magento2ce.com/admin/&lt;/appBackendUrl&gt;\n        &lt;backendLoginUrl&gt;admin/auth/login&lt;/backendLoginUrl&gt;\n    &lt;/application&gt;\n    &lt;install&gt;\n        &lt;host&gt;127.0.0.1&lt;/host&gt;\n        &lt;user&gt;root&lt;/user&gt;\n        &lt;password&gt;123123q&lt;/password&gt;\n        &lt;dbName&gt;default&lt;/dbName&gt;\n        &lt;baseUrl&gt;http://magento2ce.com/&lt;/baseUrl&gt;\n        &lt;backendName&gt;backend&lt;/backendName&gt;\n    &lt;/install&gt;\n    &lt;handler&gt;\n        &lt;webapi priority=\"0\"&gt;\n            &lt;token&gt;integration_token&lt;/token&gt;\n        &lt;/webapi&gt;\n        &lt;curl priority=\"1\" /&gt;\n        &lt;ui priority=\"2\" /&gt;\n    &lt;/handler&gt;\n&lt;/config&gt;\n\n\n\nFigure 2. - XML Schema for the &lt;magento2_root_dir&gt;dev/tests/functional/vendor/magento/mtf/etc/config.xml.\n\n\nThe FTF merges settings from both files with the following priority:\n\n\n  config.xml in Magento has higher priority then config.xml in the Framework\n  config.xml.dist is omitted if config.xml exists\n\n\nSettings are grouped into the following blocks:\n\n\n  &lt;application&gt;\n  &lt;isolation&gt;\n  &lt;server&gt;\n  &lt;handler&gt;\n  &lt;install&gt; (set in Magento functional tests only)\n\n\n&lt;application&gt;\n\nDescription: Application configuration settings.\n\n\n  \n    \n      Parameter\n      Description\n    \n  \n  \n    \n      &lt;reopenBrowser&gt;\n      Determines that a browser is to be restarted after each test or testCase.\n    \n    \n      &lt;backendLogin&gt;\n      Magento Admin username that is used during functional testing.\n    \n    \n      &lt;backendPassword&gt;\n      Magento Admin password that is used during functional testing.\n    \n    \n      &lt;appBackendUrl&gt;\n      Base URL of the Magento Admin. Not applicable currently.\n    \n    \n      &lt;backendLoginUrl&gt;\n      Relative path to the Magento Admin login page.\n    \n  \n\n\n&lt;isolation&gt;\n\nLearn about isolation management\n\nDescription: Settings of a script to be run during functional testing.\n\n\n  \n    \n      Parameter\n      Description\n      Values\n    \n  \n  \n    \n      &lt;resetUrlPath&gt;\n      Relative path of a script to be run. The URL is opened as usual web page in a browser, so that corresponding permissions must be set to the file.\n      &lt;resetUrlPath&gt;dev/tests/mtf/isolation.php&lt;/resetUrlPath&gt;\n    \n    \n      &lt;testSuite&gt;\n      When the script must be called relatively to test suite run.\n      none, before, after, both\n    \n    \n      &lt;testCase&gt;\n      When the script must be called relatively to test case run.\n      none, before, after, both\n    \n    \n      &lt;test&gt;\n      When the script must be called relatively to test run.\n      none, before, after, both\n    \n  \n\n\nValues description:\n\n\n  none - never run\n  before - run before the entity to which it concerns\n  after - run after the entity to which it concerns\n  both - run before and after the entity to which it concerns\n\n\n&lt;server&gt;\n\nOpen settings declarations in Selenium repository\n\nDescription: Selenium server settings.\n\n\n  \n    \n      Parameter\n      Description\n      Values\n    \n  \n  \n    \n      name\n      Name of an item.\n      \"selenium\"\n    \n    \n      type\n      Required Selenium setting. The FTF doesn’t use it.\n      \"default\"\n    \n    \n      browser\n      A browser full name to be displayed where you needed it. The FTF doesn’t use it.\n       \n    \n    \n      browserName\n      A browser that can be used for functional testing.\n      android, chrome, firefox, htmlunit, internet explorer, iPhone, iPad, opera, safari\n    \n    \n      host and port\n      Address of a Selenium Server.\n       \n    \n    \n      seleniumServerRequestsTimeout\n      A specified period of time to process a request.\n       \n    \n    \n      sessionStrategy\n      Standard Selenium Server parameter that sets a session strategy. Recommended to use \"shared\" only.\n      \"shared\", \"isolated\"\n    \n  \n\n\n&lt;desiredCapabilities&gt;\n\nLearn about desiredCapabilities in Selenium official documentation.\n\n&lt;handler&gt;\n\nSpecifies priorities for different types of handlers. The lower the value, the higher the priority. The highest priority has value 0. token contains access token (used by WebAPI handlers only). Learn more about handlers.\n\n\n  \n    \n      Parameter\n      Description\n      Values\n    \n  \n  \n    \n      &lt;webapi&gt;\n      priority value of a WebAPI handler.\n      Integer\n    \n    \n      &lt;curl&gt;\n      priority value of a curl handler priority.\n      Integer\n    \n    \n      &lt;ui&gt;\n      priority value of a UI handler priority.\n      Integer\n    \n  \n\n\n&lt;install&gt;\n\nSet of parameters to be used for installation test case.\n\n\n  \n    \n      Parameter\n      Description\n    \n  \n  \n    \n      &lt;host&gt;\n      Magento database host name or IP address.\n    \n    \n      &lt;user&gt;\n      Magento database user name.\n    \n    \n      &lt;password&gt;\n      Magento database user password.\n    \n    \n      &lt;dbName&gt;\n      Name of a database.\n    \n    \n      &lt;baseUrl&gt;\n      Magento application base URL, starting with the scheme (http:// or https://) and ending with a slash character (/).\n    \n    \n      &lt;backendName&gt;\n      Admin URI (following the base URL).\n    \n  \n\n\nLearn more about installation parameters\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/configuration.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-configure-best-practices-html": {
      "title": "Best practices for store configuration",
      "content": "For detailed information for configuring your store, sites, and websites, you may want to review the  Magento 2.2.x User Guide. This page provides best practices, helpful information, and guidelines for configuring your stores, sites, and more with addtional content to post over time and across versions.\n\nUnderstanding marketing campaigns and promotions\nThis information is helpful for Magento Commerce (Cloud) 2.1.X and 2.2.X.\n\nTo create campaigns and promotions, you will create the options and settings in Content Staging. This feature allows you to create and preview your campaigns prior to making them public for customer sales. The following information provides helpful information. For exact instructions, see the linked Magento 2 User Guide content.\n\nCampaigns are marketing events for seasonal sales, new product lines, and more. Each campaign can include custom themes, blocks for content, widgets to control and display content, and associated promotions with price rules. Due to the extensive nature of a campaign, you create them with a start and end date through Content Staging.\n\nPromotions provide discounts, one time offers, coupons, first time buyer incentives, and more. You create these promotions as Price Rules that set the terms, discounts, and options to encourage customers to buy. You can create price rules on the shopping cart or catalog, with additional options for banners, reward points, and more. We also support scheduling campaigns for your promotions, applying price rules for major events like a new product line or seasonal sales.\n\nThe following are tips to help create, update, and manage promotions and campaigns:\n\n\n  A promotion can be part of a campaign. A campaign cannot be a part of a promotion. You can have lists of promotions as price rules to use multiples times, with multiple campaigns.\n  When you create a promotion, it will always create an initial campaign that is inactive. It will have a start date but not an end date. You can ignore this initial campaign. You can Schedule a New Update with the correct campaign schedule and make it active.\n  A campaign has a start and end date, not a promotion. The Scheduler that appears when you create a promotion does not configure the start and end dates for the promotion. It allows you so schedule your campaign this promotion is associated with while you are on the promotion’s configuration page.\n  You cannot directly edit in Staged Content. If you need to edit settings and options in the campaign, you will need to edit the original or a replica and push to overwrite in Staged Content. For example, if you don’t an end date for a campaign, you must edit the original and push to update.\n\n\nAdvanced Pricing and Staged Content\nThis information is helpful for Magento Commerce (Cloud) 2.1.X and 2.2.X.\n\nTypically, you can set Advanced Pricing for products through the Products &gt; Catalogs area of the Magento Admin. With Staged Content, you need to complete a few extra steps to add the pricing to a promotion and campaign.\n\nTo edit Advanced Pricing and update Content Staging:\n\n\n  Log into the Magento Admin.\n  Navigate to Products &gt; Catalog &gt; and select a product and edit.\n  In the Pricing tab, select Advanced Pricing. Edit the price and Save changes.\n  At the top of the page, click Schedule New Update.\n  Create a new promotion for the product.\n  Complete the promotion information. For the Scheduler, enter a begin and end date and time.\n  Save the promotion. An inactive initial campaign is created.\n  You can Preview to review the special price, promotion name, regular price, and the scheduled date range for the campaign.\n\n\nFor additional steps, you can continue with instructions with Schedule Changes for Catalog Price Rules. Click Next to walk through the steps.\n\nExample Price Rules\nPrice rules can include logic and conditions as limitless as your marketing imagination. Some popular examples include Buy One Get One Free, Buy One Get One 50% Off, a $25 dollars off on on orders over $100 dollars, and so on.\n\nTo create a Price Rule, see our Magento 2 User Guide.\n\nThe following provides an example of creating a Price Rule for a First Order Only discount. For this discount, you would want to:\n\n\n  Create a price rule with a customer segment with a condition: Total Number of Orders less than 1\n  Add this customer segment as a condition to the cart rule\n  Optional - Add conditions and rules to apply the discounts to specific SKUs or categories of products for focused purchases\n\n\nThis ensures net-new customers or existing customers who have not made a purchase receive the discount only on their very first order. You could create banners and send email promotions for the first time purchase discount.\n\nUnderstanding websites, stores, and store views\nMagento 2 allows you to run multiple stores, websites, with different views all through a single implementation. How they work together to provide multiples stores, sites, catalogs, and shopping experiences can be confusing. This section explains what these are, how they work. To configure a multi-site Magento Commerce (Cloud) implementation, see Set up multiple websites or stores.\n\nYou can set up and run several shops through a single implementation of Magento. If you want to have shops that do not interact with each other, you create multiple websites. Each website has specific articles, customer data, checkouts, and shopping cart not shared with other websites in Magento.\n\nEach website can include one or more stores with different categories and articles, with shared customer data, checkout, and shopping cart. For these stores, a customer can sign up once and shop across different catalogs of products with a single checkout.\n\nYou can further create store views for different languages, layouts, and designs. Each view can have its own domain, look and feel, and language while sharing articles, customer data, checkout, and shopping cart.\n\nThe following are examples to better explain:\n\n  \n    Single website with one store and two views for Engligh and Spanish locale. All article data, customers, checkout, and shopping cart are shared.\n\n    \n  \n  \n    Single website with Store A for women’s clothing with two views for English and Spanish, and Store B for children’s clothing with a single store view in English. All article data, customers, checkout, and shopping cart are shared. The stores may have different domains and themes.\n\n    \n  \n  \n    Two websites one for clothing and another for home decor with different catalogs and separate articles, customer data, and shopping cart. Each website could have multiple stores and views sharing articles, customer data, checkout, and shopping cart only within that website.\n\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/configure/configure-best-practices.html"
    }
    ,
  
    "guides-v2-0-howdoi-config-configure-html": {
      "title": "Configure Magento",
      "content": "After you install the Magento application, you can:\n\n\n  Configure Magento\n  Set up logging\n  Set up Varnish for page caching\n  Set up Redis for session storage\n  More options\n\n\n",
      "url": "/guides/v2.0/howdoi/config/configure.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-connect-auth-html": {
      "title": "Get your authentication keys",
      "content": "\n\n  The repo.magento.com repository is where Magento 2 and third-party Composer packages are stored and requires authentication. Use your Magento Marketplace account to generate a pair of 32-character authentication keys to access the repository.\n\n  To create authentication keys:\n\n  \n    Log in to the Magento Marketplace. If you don’t have an account, click Register.\n    \n      Click your account name in the top-right of the page and select My Profile.\n    \n    \n      Click Access Keys in the Marketplace tab.\n\n      \n    \n    \n      Click Create a New Access Key. Enter a specific name for the keys (e.g., the name of the developer receiving the keys) and click OK.\n    \n    New public and private keys are now associated with your account that you can click to copy. Save this information or keep the page open when working with your Magento project. Use the Public key as your user name and the Private key as your password.\n  \n\n  Manage your authentication keys\n  You can also disable or delete authentication keys. For example, you can disable or delete keys for security reasons after someone leaves your organization.\n\n  \n    To disable keys: Click Disable. You can do this if you want to suspend use of your keys.\n    To enable a previously disabled key: Click Enable.\n    To delete keys: Click Delete.\n  \n\n  You cannot delete or disable keys you created by signing in to your magento.com account. To manage those keys:\n\n  \n    Log in to your magento.com account.\n    Click My Account at the top of the page.\n    \n      Click Account Settings &gt; Downloads Access Token.\n\n      \n    \n    Click Generate new token to replace and disable an existing token.\n  \n\n  Related topics:\n  \n    \n      Use your authentication keys to:\n\n      \n        Get the Magento Open Source or Magento Commerce metapackage (integrators, packagers)\n        Clone the Magento 2 GitHub (contributing developers only)\n        Start the Component Manager\n         Upgrade Magento\n      \n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/connect-auth.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-content-formats-content-formats-html": {
      "title": "Admin Content Formats",
      "content": "For more specifics, use the Magento Glossary and Magento Word Usage Bank. If an item is not found, refer to the Associated Press (AP) Stylebook on first reference, and the Microsoft Manual of Style on second reference.\n\nAbbreviations\n\nAvoid the following:\n\n\n  \n    Abbreviations for months and URLs.  For details, see the Dates section in Number Formats.\n  \n  \n    Non-English words and abbreviations. These are difficult to translate, and some users might be unfamiliar with them.\n  \n  \n    Latin abbreviations. Abbreviations like i.e., e.g., and etc., are not universally known and are often misunderstood.\n  \n\n\nAcronyms\n\nWhen in doubt, spell it out. If there’s a chance a reader doesn’t know an abbreviation or acronym, use the full term on first reference.\n\n\n  \n    Use all caps case.\n  \n  \n    First reference, spelled out. Spell out term and append acronym in parenthesis.Correct examples: content management system (CMS), Social Security Number (SSN)\n  \n  \n    Second reference format. Replace term and use only acronym.Correct example: “When you sign into the content management system (CMS), enter the new content into the CMS.”\n  \n  \n    First reference, acronym only. Some acronyms are used by themselves because they’re better-known than their spelled-out terms. These acronyms are used on first reference.Correct examples: DVD, ZIP Code, XML, API\n  \n\n\nFile-Type Formats\n\n\nDo not use a period or other punctuation before or after the file name.\nExamples:\n\n  No – “Pdf, Tiff, Html, Jpg, Css, Xml\"\n  No – “.pdf, .tiff, .html, .jpg, xss, .xml\"\n  Yes – “PDF, TIFF, HTML, JPG, CSS, XML”\n\n\nLink format: Append the file type in parenthesis after the file name. For more details, see the [Labels Best Practices](/devdocs-archive/2.0/guides/v2.0/design-styleguide/buttons-and-links-usage/buttons-and-links-usage.html#labels-best-practices) section in Buttons and Links Usage.\n\n\nAddresses\n\nFor international formats, see Bitboost International Mailing Address Formats.\n\nFor United States, use these formats:\n\n\n\n\nBasic\nInternational\nBasic +Company Name\nBasic +Address Line 2\n\n\nRay Symmetry\n1234 Barnacle Dr.\nEnid, TX 73701\nRay Symmetry\n1234 Barnacle Dr.\nEnid, TX 73701\nUSA\nRay Symmetry\nCompany Name\n1234 S Barnacle Dr.\nEnid, TX 73701\nRay Symmetry\n1234 Barnacle Dr.\nPO Box 1234\nEnid, TX 73701\n\n\n\n\nLists\n\nUse a bulleted list when a sentence includes a series or especially when it includes a series of complex phrases or clauses.\n\nBreaking up items in a series into lists will enhance readability for Magento users and enable them to better scan and find information.\n\nUse these rules for lists:\n\n\n  \n    Introducing a list. All lists must be preceded by a lead-in heading, sentence or phrase, as follows:\n\n    \n      \n        A heading / title without punctuation\n      \n      \n        A sentence that ends in a colon or ellipsis\n      \n      \n        A phrase, or partial sentence, ending in a colon or ellipsis\n      \n    \n  \n  \n    Bullets vs. numbers. Use bullets for non-sequential lists and numbers for sequential lists or instructions.\n  \n  \n    Capitalization. Each item in a list should begin with a capitalized letter in the first word.\n  \n  \n    Periods. Use for items that are complete sentences, wholly contained within the bullet / number. Can be used for bold lead-in content. See examples below.\n  \n  \n    Parallelism. List elements should be constructed consistently. If the first item in a list is a noun, all items must be nouns. Similarly, if the first item is a sentence, all items must be sentences.\n  \n\n",
      "url": "/guides/v2.0/design-styleguide/content-formats/content-formats.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-content-voice-tone-content-voice-tone-html": {
      "title": "Admin Voice and Tone",
      "content": "Our priority is to help users perform administrative tasks with ease and manage their stores effectively.\n\nMagento’s voice is:\n\n\n  \n    Instructional and clear. The content is concise but informational, guiding the user to successfully perform tasks.\n  \n  \n    Casual but professional and direct.\n  \n  \n    Empowering.\n  \n\n\nGuidelines\n\nWrite casual, but professional, content in gender-neutral terms.\n\nCreate a consistent tone of communication that sounds like dialogue, as you would hear it. Here’s a useful tip when creating copy:  Imagine describing the product or task face-to-face with a new marketing employee tasked with using Magento Admin.\n\nWrite sentences with plain, concise language. Use contractions for verbs. Never use a long word when a shorter word can take its place, and omit unnecessary words.\n\nContent should be gender neutral. To avoid “his” or “her” pronouns, change singular pronouns to plural and use a gender-neutral “their”, instead.\n\nExample:\n\n\n  No – \"A merchant can update his extensions.\"\n  Yes – \"Merchants can update their extensions.\"\n\n\n\nFollow accessibility and readability standards.\n\nTo ensure that users with special needs – including the use of screen readers – can easily access your content, follow the content and design standards in the Admin Design Pattern Library’s Accessibility Guidelines.\n\nFor more guidance, see this summary of Web Content Accessibility Guidelines (WCAG) 2.0 standards.\n\nAlso, test your content’s readability. On the Flesch-Kincaid Readability Test, Magento Admin content should score above 50, which is approximately high-school level.\n\n\nUse correct terms and content style.\n\nIn all contexts, strive for accuracy and consistency to inspire and build confidence in performing tasks.\n\nWhen uncertain about using a correct term or style, consult the following documents:\n\n\n  \n    The Magento Glossary and Magento Word Usage Bank\n  \n  \n    Admin Design Pattern Library\n  \n\n\nFor standards not included in those documents, we use the following stylebooks:\n\n\n  \n    First reference: The Associated Press (AP) Stylebook\n  \n  \n    Second reference: Microsoft Manual of Style, specifically these chapters:\n\n    \n      Content for a worldwide audience (Ch. 3)\n      Accessible content (Ch. 4)\n      Procedures and technical content (Ch. 6)\n\n    \n  \n\n\nAvoid jargon, slang, and acronyms.\n\nWords like “optimize”, “flexible”, and “scalable” might be big, but they’re not clever, unless they’re used in accurate context for the appropriate audience.\n\nAvoid terms that may not translate internationally, like metaphors, other figurative language, and humor.\n\nWhen introducing a term that may be unfamiliar to merchants, apply a glossary term from the Magento Glossary, provide further explanation, or add contextual help. To see what acronyms can be used on first reference, check the Magento Word Usage Bank and AP Stylebook. When in doubt, use the full spelling and add the acronym in parenthesis afterword.\n\nExample:\n\n\n  No – “Magento is the flexible commerce solution.”\n  Yes – “With Magento, almost everything can be customized, from the storefront user interface theme to the site's backend processes.”\n\n\nExample:\n\n\n  No – “This SaaS feature is only available in Magento Commerce.”\n  Yes – “This software as a service (SaaS) feature is only available in Magento Commerce.”\n\n\n\nEmpower the merchant with positive tone and sentence structure.\n\nAvoid negative sentence constructions using words like “no”, “never”, “don’t” to ensure clarity and a positive tone.\n\nExample:\n\n\n  No – Don’t use negative sentence construction.\n  Yes – Use positive, instead of negative, sentence construction.\n\n\n\nUse active voice.\n\nActive voice uses the subject-verb-object construction. When describing an action, start the sentence with the actor – usually the user. Active-voice sentences clarify who’s performing an action, making sentences easier to understand than passive-voice sentences.\n\nPassive voice identifies the action’s recipient, not the source, as the subject of the verb. Passive voice is more complicated and less engaging.\n\nUse the “zombie test” – if you can put the words “by zombies” after a subject and verb, you’re using passive voice. Passive-voice example: “Magento is used (by zombies)”\n\nExample:\n\n\n  No – “The store address is used to calculate ...”\n  Yes – “The system uses the store address to calculate ...”\n\n\n\nWrite in present tense.\n\nWhen a user is reading web content to accomplish a task, these tasks take place in their present, so the present tense is appropriate in most cases.\n\nAdditionally, present tense is easier to read than past or future tense.\n\nUse future tense only to emphasize that something, from the user’s perspective, will occur later.\n\nExample:\n\n\n  No – A customer will receive an email confirmation after purchase.\n  Yes – A customer receives an email confirmation after purchase.\n\n\n\nAvoid personal pronouns.\n\nMost websites have eliminated personal pronouns because using pronouns like “you” and “I” or “your” and “my” is confusing. Personal pronouns often leave room for doubt or misinterpretation – does a pronoun refer to Magento or to the merchant? Avoid using “my”, “we”, “they”, or “I” when your content refers to either Magento representatives or merchants.\n\nException: “You” or “your” neutral pronouns may be used in some cases to directly engage merchants in familiar, conversational language.\n\nExample:\n\n\n  No – Change your My Account preferences.\n  Yes – Change your Account preferences.\n\n\nExample:\n\n\n  No – We will send a confirmation, and you will receive it in 2-3 days.\n  Yes – You will receive a confirmation in 2-3 days.\n\n\n\nUse consistent labels in user-interface (UI) content.\n\nThe tone in UI content – including navigation, tables, forms, and calls to action – is usually more focused on accuracy and conciseness, but the same standards apply: Use clear, plain language and consult global conventions to ensure content is understood by all.\n\nConsistency is critical. For example, wherever content is displayed in Data Tables or Form Elements, it should use Magento standard or global conventions.\n\n\nCorrect example of button-label consistency, in a task flow:\n\n\n  Yes – “Continue” button in “Catalog” pages\n  Yes – “Continue” button in “Reports” pages\n\n\nIncorrect example of button-label consistency, in a task flow:\n\n\n  No – “Next” button in “Catalog” pages\n  Yes – “Continue” button in “Reports” pages\n\n\nFor more details, see Button and Links Usage standards.\n\n\nWrite empowering errors and messages that lead to appropriate next steps.\n\nTake a neutral tone – don’t blame a merchant or in any way indicate that the merchant made a mistake. Use “business casual” and easy-to-understand language. Avoid personal pronouns and technical jargon. Content structure and formatting should follow this order:\n\n\n  Tell merchants what went wrong, in specific terms.\n  Instruct how to fix the problem and continue the current task. If the error can’t be resolved online, try to give merchants an appropriate offline contact option and a timeframe when they should try again.\n\n\nExample:\n\n\n  No – “You didn’t enter your email address.”\n  Yes – “An email address is required. Enter the email address and click “Continue”.”\n\n\nFor more details, see Errors and Messages Writing standards.\n",
      "url": "/guides/v2.0/design-styleguide/content-voice-tone/content-voice-tone.html"
    }
    ,
  
    "guides-v2-0-pattern-library-containers-staticcontentcontainer-contentcontainer-html": {
      "title": "Admin Design Pattern Library",
      "content": "Static Content Container\nWithin the Magento application, it is often necessary to display static information to the users. These static content are considered Content Container and should follow the guideline in this article.\n\nFor solutions not described in this article or for further information, please contact the Magento UX Design Team.\n\nWhen to Use\n\n  Use this pattern when we need to display static information to the users.\n\n\nWhen Not to Use\n\n  Do not use this pattern if users need to be able to interact with the information.\n\n\nRule\nThe basic rule is that the content containers should have a title and a content below it. Refer to variations for the styling examples.\n\nVariations\n\n1. Parent and Child Containers\n\nThe following example, shows two sets of parent &amp; child containers. Each parent containers has 2 children containers. There can be 1 or more children.\n\nIt is not recommended to have more than one layer of parent-child (i.e. grand children are not recommended) But if there are exceptions made, the hierarchy should be shown clearly.\n\nStructure\n\nThe parent container structure: title, rule, content.\n\n\n\nStyling\n\nNote that because the children containers can be any variations of other content containers, refer to other variations for styling.\n\n\n\n2. Title with Body of Text\n\nWidth: based on the page grid\n\nHeight: as needed\n\n\n\n3. Title with Differentiated Rows\n\nWidth: based on the page grid\n\nHeight: as needed\n\nThis is used to clearly separate information for users to easily digest. \nThe first row should be grey then, the rows alternate between grey and white.\n\n\n\n4. Pricing Breakdown chart\n\nWidth: based on the page grid\n\nHeight: as needed\n\nThis is used to clearly separate information for users to easily digest.\n\n\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Static Content Container PSD source\n",
      "url": "/guides/v2.0/pattern-library/containers/staticContentContainer/contentContainer.html"
    }
    ,
  
    "guides-v2-0-install-gde-continue-to-cm-updater-html": {
      "title": "Manage and upgrade components",
      "content": "Need to make changes?\nAfter installing the Magento software, you might need to:\n\n\n  Component Manager Guide\n  Upgrade Guide\n\n",
      "url": "/guides/v2.0/install-gde/continue-to-cm-updater.html"
    }
    ,
  
    "guides-v2-0-install-gde-continue-to-install-html": {
      "title": "",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\nInstallation options: command line or Setup Wizard\nNow that you’ve installed prerequisites and taken the first steps (merchant, system integrator, or developer), you’re ready to install the Magento software in any of the following ways:\n\n\n  Using the web-based Setup Wizard, which is better for less experienced users or anyone who has a hosting provider (especially if you don’t have access to the Magento server)\n  Command line, which gives you more control but requires more experience and also access to the Magento server\n\n\nAlready installed the Magento software?\nYou might want to manage Magento components or to upgrade:\n\n\n  Component Manager Guide\n  Upgrade Guide\n\n\n",
      "url": "/guides/v2.0/install-gde/continue-to-install.html"
    }
    ,
  
    "guides-v2-0-install-gde-continue-to-verify-html": {
      "title": "",
      "content": "Now that you’ve finished your installation\nWe suggest the following:\n\n\n  Verify the installation\n  Troubleshoot the installation\n\n\nOther options\nYou can also do any of the following:\n\nInstall optional sample data\nIf you haven’t already installed optional sample data, you can install it now.\n\nManage and upgrade components\n\n  Component management (install, uninstall, enable, disable, update)\n  System upgrade (upgrade the Magento software)\n  Contributing developers only: Contributing developers—update, reinstall Magento\n\n\nConfigure\nConfigure the Magento application.\n\n",
      "url": "/guides/v2.0/install-gde/continue-to-verify.html"
    }
    ,
  
    "guides-v2-0-install-gde-continue-to-verify-cli-html": {
      "title": "",
      "content": "Now that you’ve finished your installation\nWe suggest the following:\n\n\n  Verify the installation\n  Troubleshoot the installation\n\n\nOther options\nYou can also do any of the following:\n\nInstall optional sample data\nIf you haven’t already installed optional sample data, you can install it now.\n\nManage and upgrade components\n\n  Component management (install, uninstall, enable, disable, update)\n  System upgrade (upgrade the Magento software)\n\n\nConfigure\nConfigure the Magento application.\n",
      "url": "/guides/v2.0/install-gde/continue-to-verify_cli.html"
    }
    ,
  
    "guides-v2-0-cloud-deploy-continuous-deployment-html": {
      "title": "Continuous integration",
      "content": "Following your branching and development methodologies, you can easily develop new features, configure changes, and add extensions to continuously develop and deploy updates.\n\nBoth Starter and Pro plan environments support continous integration for constant updates. This workflow supports releases multiple times a day or on a set schedule according to your business needs.\n\n\n  Create development branches with future features and changes\n  Test the code in your development environments\n  Deploy and test in Staging\n  Deploy to Production\n\n\nWe recommend the following best practices for Magento Commerce (Cloud) environments.\n\nDevelopment best practices\n\n\n  Keep your branches updated with the latest code for all developers to access and pull\n  Maintain commit comments to share with your developers and track branch work\n  Keep Staging as close to Production as possible with configurations, code, services, and data\n  Don’t overfill a branch of development work, keep it streamlined to carefully implement and test code, extensions, etc\n  Keep track of the order you follow for adding extensions to your code. Some extensions require very specific installation orders.\n  Don’t push all of your extensions at once into Staging and Production. Add, push, and test extensions in groups to ensure they are stable.\n  Use Magento Configuration Management to ensure configuration consistency\n\n\nDeployment best practices\n\n\n  Fully deploy the base Magento Commerce (Cloud) site initially to ensure all environments are stable with Magento installed. Some extensions will throw errors during build and deploy if they are added during an install. These work best during an update.\n  Run a local build prior to fully deploying\n  Ensure all files are correctly added to the Git branch before pushing\n\n\nTesting best practices\n\n\n  Fully test Administrator and customer features in your code. Your staff may encounter issues, for example when refunding an order or sending notifications.\n  Heavily test extensions with the correct credentials per environment\n  Perform all Fastly tests against Staging and Production\n\n\nData best practices\n\n\n  Create a backup of your database and snapshot on a schedule or before pushing major updates. We provide snapshots of Production every 6 hours, but you may need to also backup Staging for constant iterations.\n  Pull a data dump of your Production data into the Staging environment for extensive testing\n  Consider running scripts or pulling only specific tables to sanitize customer data from non-Production environments Staging\n\n\nRelated topics\n\n  Starter Architecture\n  Starter Develop and Deploy Workflow\n  Pro Architecture\n  Pro Develop and Deploy Workflow\n  Deploy your store\n  Go live and launch\n\n",
      "url": "/guides/v2.0/cloud/deploy/continuous-deployment.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-contributing-html": {
      "title": "Code Contributions",
      "content": "The following topics are included in the Guide:\n\n\n  \n    Contribute to Magento 2 code\n  \n  \n    Questions or enhancement requests?\n  \n  \n    Contribution requirements\n  \n  \n    Fork a repository\n  \n  \n    Create a pull request\n  \n  \n    Report an issue\n  \n  \n    Labels applied by the Community Engineering Team\n  \n\n\nContribute to Magento 2 code\n\nUse the fork &amp; pull model to contribute to the Magento 2 codebase.\nThis contribution model has contributors maintaining their own copy of the forked codebase (which can be easily synced with the main copy). The forked repository is then used to submit a request to the base repository to pull a set of changes (hence the phrase pull request).\n\nContributions can take the form of new components or features, changes to existing features, tests, documentation (such as developer guides, user guides, examples, or specifications), bug fixes, optimizations, or just good suggestions.\n\nThe Community Engineering Team reviews all issues and contributions submitted by the community developers. During the review we might require clarifications from the contributor. If there is no response from the contributor for two weeks (14 days), the issue is closed.\n\nOften when the Community Engineering Team works on reviewing the suggested changes, we will add a label to the issue to indicate certain information, like status or who is working the issue. If you’re ever curious what the different labels mean, see the table below for an explanation of each one.\n\n\nPlease refer to Magento Contributor Agreement for detailed information about the License Agreement. All contributors are required to submit a click-through form to agree to the terms. \n\n\nQuestions or enhancement requests?\n\nWe use this repository (the Magento 2 GitHub repository) to capture code and documentation issues. We recommend that you post all questions to a question-and-answer site, such as Stack Exchange  and the Magento Forums, where Magento community members can quickly provide recommendations and advice.\n\nSubmit feature requests or enhancement suggestions to the new Magento 2 Feature Requests and Improvements forum (see details here).\n\nContribution requirements\n\n\n  Contributions must adhere to Magento coding standards.\n  Refer to the Magento development team’s Definition of Done. We use these guidelines internally to ensure that we deliver well-tested, well-documented, solid code, and we encourage you to as well!\n  Pull requests (PRs) must be accompanied by a meaningful description of their purpose. Comprehensive descriptions increase the chances that a pull request is merged quickly and without additional clarification requests.\n  Commits must be accompanied by meaningful commit messages.\n  PRs that include bug fixing must be accompanied by a step-by-step description of how to reproduce the bug.\n  PRs that include new logic or new features must be submitted along with:\n    \n      Unit/integration test coverage (we will be releasing more information on writing test coverage in the near future).\n      Proposed documentation update. Documentation contributions can be submitted here.\n    \n  \n  For large features or changes, please open an issue and discuss first. This may prevent duplicate or unnecessary effort, and it may gain you some additional contributors.\n  \n    To report a bug, please open an issue, and follow these guidelines about bugfix issues.\n  \n  All automated tests must pass successfully (all builds on Travis CI must be green).\n\n\nFork a repository\nTo fork a repository on Github, do the following:\n\n\n  Create or log in to your account on GitHub.\n  Navigate to the Magento 2 repository.\n  \n    Click Fork at the top right: \n  \n  Clone the repo into your development environment and start playing.\n\n\nUpdate the fork with the latest changes\nAs community and Magento writers’ changes are merged to the repository, your fork becames outdated and pull requests might result in conflicts. To see if your fork is outdated, open the fork page in GitHub and if at the top the message This branch is NUMBER commits behind magento:2.2-develop. displays, it means your fork must be updated.\n\nThere are two ways to update your fork. The typical way is discussed in GitHub documentation. Make sure to update from the correct branch!\n\nThere is also a possibility to use the GitHub interface to do that. This is referred to as a reverse pull request. This method has the downside of inserting unnecessary information into fork commit history. On your fork GitHub page, click New pull request. You should see the following message:\n\nThere isn’t anything to compare.\n  magento:2.2-develop is up to date with all commits from :2.2-develop. Try switching the base for your comparison.\n\nClick the base link and then click Create pull request. Provide a descriptive name for your pull request in the provided field.\n\nScroll to the bottom of the page and click Merge pull request, then click Confirm Merge.\n\nCreate a pull request\n\nFirst, check the existing PRs and make sure you are not duplicating others’ work!\n\nTo create a pull request do the following:\n\n\n  Create a feature branch for your changes and push those changes to the copy of your repository on GitHub. This is the best way to organize and even update your PR.\n  In your repository, click Pull requests on the right, and then click New pull request: \n  Ensure that you are creating a PR to the one of following  branches: magento:2.3-develop, magento:2.2-develop or magento:2.1-develop branch. We accept PRs to these branches only.\n  Review the changes, then click Create pull request. Fill out the form, and click Create pull request again to submit the PR—that’s it!\n\n\nAfter submitting your PR, you can head over to the Magento 2 repository’s Pull Requests panel to see your PR along with others. Your PR undergoes automated testing, and if it passes, the Community Engineering Team considers it for inclusion in the Magento 2 core. If some tests fail, please make the corresponding corrections in your code.\n\nReport an issue\nIf you find a bug in Magento 2 code, you can report it by creating an issue in the Magento 2 repository.\n\nNote: Before creating an issue, please do the following:\n\n\n  Read the issue reporting guidelines to learn how to create an issue that can be processed in a timely manner.\n  Check the documentation to make sure the behavior you are reporting is really a bug, not a feature.\n  Check the  existing issues to make sure you are not duplicating somebody’s work.\n\n\nTo add an issue:\n\n\n  In the Magento 2 public repository, click the Issues link on the right. \n  Click New issue.\n  Fill in the Title and issue description.\n  Click Submit new issue.\n\n\nLabels applied by the Magento team\n\nRefer to the following table for a description of each label. These labels are applied by the Magento development team to community contributed issues and pull requests, to communicate status, impact, or which team is working on it.\n\n\n   \n      \n      \n   \n   \n      \n         Label image\n         Description\n      \n   \n   \n      \n        Pull Request Resolution Status\n      \n      \n         \n         The pull request has been accepted and will be merged into mainline code.\n      \n      \n         \n         The pull request has been rejected and will not be merged into mainline code. Possible reasons can include but are not limited to: issue has already been fixed in another code contribution, or there is an issue with the code contribution.\n      \n      \n         \n         The Community Engineering Team needs additional information from the reporter to properly prioritize and process the pull request.\n      \n      \n        Issue Resolution Status\n      \n      \n         \n         Automatic verification of the issue description successfully passed. Minimum required information is provided (Preconditions, Steps to Reproduce, Actual Result, Expected Result).\n        \n      \n         \n         Automatic verification of the issue description failed. Minimum required information is not provided (Preconditions, Steps to Reproduce, Actual Result, Expected Result).\n       \n      \n         \n         The Community Engineering Team has confirmed that this issue contains the minimum required information to reproduce.\n      \n      \n         \n         The Community Engineering Team has validated and confirmed the issue.\n      \n      \n         \n         The Community Engineering Team reproduced the issue on latest 2.0.x release.\n      \n      \n         \n         The Community Engineering Team reproduced the issue on latest 2.1.x release.\n            \n      \n         \n         The Community Engineering Team reproduced the issue on latest 2.2.x release.\n      \n      \n         \n         The Community Engineering Team reproduced the issue on latest 2.3.x release.\n      \n      \n         \n         The issues has been fixed in one of the 2.0.x releases or in 2.0-develop branch and will be available with upcoming patch release.\n            \n      \n         \n         The issues has been fixed in one of the 2.1.x releases or in 2.1-develop branch and will be available with upcoming patch release.\n            \n      \n         \n         The issues has been fixed in one of the 2.2.x releases or in 2.2-develop branch and will be available with upcoming patch release.\n      \n      \n         \n         The issues has been fixed in one of the 2.3.x releases or in 2.3-develop branch and will be available with upcoming patch release.\n      \n      \n         \n         The Community Engineering Team has created internal ticket.\n      \n      \n         \n         The Community Engineering Team needs additional information from the reporter to properly prioritize and process the issue.\n      \n      \n         \n         The Community Engineering Team can not reproduced the issue following steps to reproduce.\n        \n      \n         \n         A described behavior in the issue description is valid and shouldn't be changed in Magento code base.\n      \n   \n\n",
      "url": "/guides/v2.0/contributor-guide/contributing.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-contributing-docs-html": {
      "title": "DevDocs Contributions",
      "content": "Share your knowledge with the community by contributing to Magento DevDocs! You can contribute by creating an issue or pull request (PR) on our devdocs Github repository. We welcome all types of contributions; from minor typo fixes to new topics.\n\nMagento’s team of technical writers reviews all issues and pull requests on a regular basis, and we do our best to address all issues as soon as possible. Working through the backlog takes time, though, so we appreciate your patience.\n\n\n  If you are not sure where to start contributing, you can review our list of suggested topics.\n\n\nIf you write and contribute a full topic, we will put your name (or company’s name) at the top of the page, right under the title, and link it to your blog or website! We will also add your picture and a link to your Github account on the Top recent contributors page.\n\nContribution guidelines\nWe use Markdown to write our documentation, which is a simple markup language that we convert to HTML using Kramdown. We have a template to make getting started easy.\n\n\n  Refer to the Magento Contributor Agreement for detailed information about licensing. All contributors are required to submit a click-through form to agree to the terms.\n\n\n\n  \n    First, check existing pull requests and make sure you are not duplicating work!\n  \n  \n    For large contributions or changes that include multiple files, open an issue and discuss it with us first. This may prevent duplicate or unnecessary effort.\n  \n  \n    Familiarize yourself with the existing documentation; taking a look at what is already there will help you decide where your topic best fits. The DevDocs team can also help find the best home for your new topics.\n  \n  \n    Focus on the content and on creating useful information for your fellow Magento developers and community members. Don’t forget to review your work for typos, formatting errors, or sentences that need clarifying before opening a pull request.\n  \n  \n    Use the following guidelines to help you with the writing process:\n\n    \n      Define the goal of your topic. What exactly do you want to teach the reader?\n      Make the title of your topic reflect the content.\n      Keep your sentences concise and try to separate conceptual information from procedural steps.\n      Remember to use active voice (not passive), write in the present tense, and use a friendly tone in second person. For example, “You can now view the output…“.\n      Use notes to alert readers about important details.\n      Use cross-references to other topics if appropriate. We can help you with the syntax if it is not clear. The template provides an example you can use.\n    \n  \n\n\nFork and clone a repository\nUse the fork and pull model to contribute to Magento DevDocs. This model requires you to keep your forked repository in sync with the upstream repository. You submit pull requests to pull a set of changes from your forked repository to the upstream repository.\n\nTo fork the devdocs repository on Github, do the following:\n\n\n  \n    Create or log in to your development environment account on GitHub.\n  \n  \n    Navigate to the DevDocs repository.\n  \n  \n    Click Fork at the top right.\n  \n  \n    Clone the repository into your development environment and then start writing and committing your changes. Optionally, create a branch first if you plan to work on multiple changes.\n  \n  \n    Build the devdocs site locally using Jekyll by following the instructions in our README.\n  \n\n\nUpdate your fork\nAs we merge changes with the upstream repository, your fork becomes outdated and pull requests might result in merge conflicts. To see if your fork is outdated, open the fork page in GitHub. If you see the following message at the top of the page, you must update your fork: This branch is &lt;number&gt; commits behind develop.\n\nThere are two ways to update your fork. The typical way is discussed in GitHub documentation. Make sure to update from the correct branch!\n\nIt is also possible to use the GitHub interface to update your fork. This is referred to as a reverse pull request. This method has the downside of inserting unnecessary information into fork commit history.\n\n\n  \n    Go to your forked repository GitHub page, click New pull request. You should see the following message:\n\n    There isn’t anything to compare.\nmagento:2.0 is up to date with all commits from &lt;your fork&gt;:2.0. Try switching the base for your comparison.\n    \n  \n  \n    Click the base link and then click Create pull request.\n  \n  \n    Enter a name for your pull request.\n  \n  \n    Scroll to the bottom of the page and click Merge pull request.\n  \n  \n    Click Confirm Merge.\n  \n\n\nCreate a pull request\nTo create a pull request do the following:\n\n\n  \n    Push your changes to your forked repository on GitHub.\n  \n  \n    In your forked repository, click New pull request.\n  \n  \n    Be sure to create the pull request on the develop branch. We do not accept pull requests on other branches, like gh-pages.\n  \n  \n    Review the changes, then click Create pull request.\n  \n  \n    Fill out the form, and click Create pull request again to submit the pull request—that’s it!\n  \n\n\nReport an issue\nIf you find a typo or erroneous information in Magento DevDocs, you can either fix it with a pull request (as described above) or you can report it by creating an issue in the DevDocs Github repository.\n\n\n  Check the existing issues on Github to see if someone has already reported the issue.\n\n\nAll topics on this site contain a link to the Issues panel on Github, which makes it easy to report issues on specific topics. Click the Give us feedback link at the top left of the page to open an issue for that page.\n\nEdit metadata\nThe Markdown (.md) file’s metadata is a set of YAML key-value pairs. The metadata section is located at the top of each file.\n\n---\nlayout: default\ngroup: install2\ntitle: Continue with your installation\nversion: 2.0\ngithub_link: install-gde/continue.md\n---\n\n\nRefer to the following table for a description of each key-value pair.\n\n\n   \n      \n      \n   \n   \n      \n         Key-value pair\n         Description\n      \n   \n   \n         layout: default\n         Selects the template Jekyll will use to render the .md file into HTML&amp;CSS.\n      \n         group: install\n         Defines which guide the file belongs to, that is, which left-hand menu collection the file will show up in. Note that what you put here does not affect the top navigation menu. That is controlled by the `_/includes/navigation.html` file.\n      \n      \n         title: Install Magento\n         Sets the title of the page in the HTML meta and the main title on the page.\n      \n      \n         version: 2.0\n         Specifies which version(s) of Magento the topic affects. We also use this data to build links to the file on Github.\n      \n      \n        github_link: install-gde/continue.md\n        Specifies the name and location of the source file in the Github repository.\n      \n   \n\n\nAdd a Contributor’s name to a topic\nWhen a community member contributes an entire topic—or makes substantial improvements to an existing topic—we like to thank them by adding their name (or company name) beneath the topic title and a link to their blog or web site.\n\nIn the metadata section at the top of the file, add these two entries:\n\ncontributor_name: &lt;name_of_contributor&gt;\ncontributor_link: &lt;link_to_contributors_site_or_blog&gt;\n\n\nThank you for contributing your brilliance to Magento DevDocs!!\n",
      "url": "/guides/v2.0/contributor-guide/contributing_docs.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-contributing-docs-suggested-html": {
      "title": "Suggested topics for contribution",
      "content": "Our goal is to provide the Magento community with comprehensive and quality technical documentation. We believe that to accomplish that goal we need developer experts from the community to contribute to the documentation.\n\nIf you are interested in working on one of these projects, open a pull request on this page. You can also email us or post a comment in the Github issue linked to the project title.\n\n\n  All of the following suggestions come directly from the community.\n\n\n\n   \n      \n      \n      \n      \n   \n   \n      \n         Project\n         Size\n         Requirements\n         Contributor\n      \n   \n            \n      \n        Menu widgets\n        Small\n        \n          Help us improve the Menu widget topic by contributing working code samples and better descriptions of menu options.\n          Acceptance criteria:\n            \n              Sample code showing the use of the menu widget.\n              Sample code showing the use of other widgets that are not documented, including dropdowndialog and list.\n            \n        \n        \n      \n      \n        Admin grids\n        Small\n        \n          Help us improve DevDocs by creating a new topic that explains how to create a grid in the Admin interface.\n          Acceptance criteria:\n            \n              New content must be in the form of a tutorial or how-to.\n              New content must list the steps needed to create a simple Admin grid.\n              New content must contain working code samples with explanations.\n            \n        \n        \n      \n      \n        Price adjustments\n        Medium\n        \n          Help us improve DevDocs by creating a new topic about price adjustments.\n          Acceptance criteria:\n            \n              Describe how priced adjustments work.\n              Describe what areas price adjustments affect.\n            \n        \n        \n      \n      \n        Category attributes\n        Medium\n        \n          Help us improve the How to add a category attribute topic by providing details about how to extend attributes.\n          Acceptance criteria:\n            \n              Provide an extended explanation of the parameters (key =&gt; value) for the addAttribute function.\n              For example, 'type' =&gt; 'int' and a list of all possible keys and their corresponding possible values.\n              Provide an extended explanation of the XML tags inside the tag. For example:\n                \n                  What basic structure should always be applied?\n                  What inner tags should be added depending on the type of attribute being added?\n                  What values and attributes should these tags include?\n                \n            \n        \n        \n      \n      \n        Logging\n        Large\n        \n          Help us improve the Custom logging topic by adding more details and examples.\n          Acceptance criteria:\n            \n              Describe what you can do with Magento's stock logger implementation and when you should extend it or implement your own.\n              Explain how to log a message to the system.log file.\n              Explain how to log a message to a custom log file.\n              Provide working sample code for each of the scenarios listed in the topic, including what code to run and where to look in the file system for the log message:\n                \n                  Log to files and syslog\n                  Send alerts and emails\n                  Log specific servers and networked logging\n                  Logging in development\n                \n              Differentiate between versions of Magento, if applicable.\n            \n        \n        \n      \n   \n\n",
      "url": "/guides/v2.0/contributor-guide/contributing_docs_suggested.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-contributing-dod-html": {
      "title": "Magento Definition of Done",
      "content": "Overview\n\nThe “Definition of Done” (DoD) is a collective term for a set of acceptance criteria that is applied to any changes in the product code base.\nThe requirements that result from our DoD are applied by default to all user stories and to each task within this user story.\n\nInternally, the Magento development teams follow the DoD to ensure that all work meets consistent release criteria.\nWe encourage our community contributors to also follow the Magento DoD.\n\nAt a high level, the criteria defined in our “definition of done” revolve around the principle of writing clean code that is reviewed and includes unit tests and solid documentation along with the code.\n\nThe following sections provide additional details about each of these criteria:\n\nFunctional Backward Compatibility\n\nExisting product features and functionality must be retained during any changes to the code.\nIf backward-incompatible functional changes are made, the documentation should explain the justification and provide the “business value”.\n\nFor more information, see Magento’s backward compatibility policy.\n\nDocumentation\n\nAll changes, additions, and extensions to the product should be documented by the author.\nThe documentation should provide an overview of the change, and information about standard use cases, audience, and procedural instructions for implementing the feature.\n\nIdeally, the information about the submitted code should be added to the official Magento DevDocs library.\nContributors are asked to submit the doc as a Pull Request to the DevDocs Github repo.\n\nWhen submitting either code or documentation, a brief summary of the work should be included in the commit message.\n\nAdditionally, the code itself should follow our DocBlock standard and contain high-quality comments and descriptions for all classes and methods.\n\nAny backwards-incompatible changes must also be recorded in the accompanying documentation, using the following format:\n\n\n  \n    \n      Change\n      Was in Magento 1.x\n      Became in Magento 2.x\n    \n  \n  \n    \n      description\n      example\n      example\n    \n  \n\n\nTests\n\nAutomated Tests\n\nCode changes must be covered by automated tests according to Classification of Magento Automated Tests.\n\nBefore committing code changes, author must ensure successful execution of all tests by running all tests or at least those which might be affected by code changes.\nContinuous integration enforces execution of all tests and author is accountable for broken builds.\n\nFunctional Tests\nMust cover new or changed application behavior (functional).\nAdded/updated functionality should be covered by a functional autotest(s) related to previous sprint commitment in scope of current sprint.\n\nSee Functional Tests.\n\nUnit Tests\n\nCode to cover:\n\n\n  new code (except auto-generated code) MUST BE covered by unit tests\n  modified legacy code:\n\n\nNew and modified code MUST BE covered if it changes the system’s behavior, and MAY BE covered if it does not change system’s behavior (class/method renamed, class moved, other minor changes)\n\nIn cases where it is impossible to cover, replace with integration tests.\n\nIt is not necessary to cover classes created by auto-generation and methods that don’t have any business logic.\n\nIntegration Tests\n\nCode to cover:\n\n\n  Must cover code that interacts with operating system environment, database or any other 3rd-party system directly\n  Must cover code in “Model” layer that interacts with database indirectly\n  \n    Must be used as alternative of unit tests in legacy code in the following cases:\n\n    \n      If it is impossible to cover due to high code coupling\n      If code had only minor modification and in order to cover it with unit test it would require refactoring of code, not related to the original modification\n    \n  \n\n\nSee: Running Integration Tests.\n\nIntegrity Tests\n\nCode to cover:\n\n\n  Must cover any code which introduces convention in scope of a particular implementation, violation of which would lead to runtime error.\n\n\nExpected code coverage: must cover all files applicable to this convention.\n\nFor example:\n\nScan for all XML-files of certain type and validate them using appropriate XML-schema\nScan for declarations of templates and invoke “fallback” mechanism to ensure they resolve\n\nStatic Code Analysis\n\nCode to cover:\n\n\n  must cover all new code files (or whatever qualifies as “new”).\n\n\nExpected code coverage: must cover all applicable files in entire code base.\n\nLegacy Tests\n\nCode to cover:\n\n\n  Must cover any formal backwards-incompatible changes on code level.\nFor more information, see\nMagento’s backward compatibility policy.\n\n\nA failure in legacy test must provide comprehensive explanation of an alternative, if there is any.\n\nExpected code coverage:\n\n\n  Must cover majority of occurrences of the backwards-incompatible change\n  Should cover 100% of occurrences\n\n\nNot all changes can be covered.\nFor example, it is possible to scan a file for literals, but it is unfeasible to analyze string concatenation or any other dynamic way of building variable.\n\nFunctional Manual Tests\nMust cover new or changed application behavior (functional).\nAdded/updated functionality should be covered by a functional Zephyr test(s) related to current sprint commitment.\n\nReview\nA task, when complete by the author, should be reviewed by another Magento community member through a process of formal code review.\nThe reviewer should check whether the task meets the original acceptance criteria and verify that there are no code defects and that other points of this definition of done are met:\n\n\n  There are no unauthorized backward-incompatible functional changes\n  All changes are documented properly\n  All changes are covered with automated tests\n  Determine if code changes caused any failure in continuous integration builds.\n\n\nThe work cannot be considered as complete unless all the criteria are verified.\n\n",
      "url": "/guides/v2.0/contributor-guide/contributing_dod.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-conventions-html": {
      "title": "Conventional notations used in this Guide",
      "content": "Conventional notations for paths to modules and themes\n\nMagento application components, including modules, themes, and language packages technically can be located anywhere under the Magento root directory. This refers to both, Magento default and custom components.\n\nThe following relative paths are used for modules and themes:\n\n- &lt;theme_dir&gt;\n\nTheme directory. Usually used when talking about custom themes, or any theme in general.\n\nFor Magento out of the box frontend themes, the absolute path usually is one of the following:\n\n\n  app/design/frontend/Magento/&lt;theme&gt;\n  vendor/magento/theme-frontend-&lt;theme&gt;\n\n\n- &lt;module_dir&gt;\n\nModule directory. When talking about a particular Magento module, also notation similar to the following is used: &lt;Magento_Checkout_module_dir&gt;\n\nFor Magento modules, usually one of the following:\n\n\n  app/code/Magento/&lt;Module&gt;\n  vendor/magento/module-&lt;module&gt;-&lt;name&gt;\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/conventions.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-conventions-js-html": {
      "title": "Conventional notations used in this Guide",
      "content": "Conventional notations for paths to modules and themes\n\nMagento application components, including modules, themes, and language packages technically can be located anywhere under the Magento root directory. This refers to both Magento default and custom components.\n\nThe following relative paths are used for modules and themes:\n\n- &lt;theme_dir&gt;\n\nTheme directory. Usually used when talking about custom themes, or any theme in general.\n\nFor Magento out of the box frontend themes, usually one of the following:\n\n\n  app/design/frontend/Magento/&lt;theme&gt;\n  vendor/magento/theme-frontend-&lt;theme&gt;\n\n\n- &lt;module_dir&gt;\n\nModule directory. When talking about a particular Magento module, also notation similar to the following is used: &lt;Magento_Checkout_module_dir&gt;\n\nFor Magento modules, the absolute path is usually one of the following:\n\n\n  app/code/Magento/&lt;Module&gt;\n  vendor/magento/module-&lt;module&gt;-&lt;name&gt;\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/conventions_js.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-tutorials-copy-fieldsets-html": {
      "title": "Copying fieldsets",
      "content": "Overview\nIn this tutorial, you will learn to copy custom data from a quote object to an order object using the Magento/Framework/DataObject/Copy class.\n\nStep 1: Define your attributes\n\nThe following code defines a simple extension attribute named demo for the Cart and Order objects.\n\nextension_attributes.xml\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"Api/etc/extension_attributes.xsd\"&gt;\n  &lt;extension_attributes for=\"Magento\\Quote\\Api\\Data\\CartInterface\"&gt;\n    &lt;attribute code=\"demo\" type=\"string\" /&gt;\n  &lt;/extension_attributes&gt;\n  &lt;extension_attributes for=\"Magento\\Sales\\Api\\Data\\OrderInterface\"&gt;\n      &lt;attribute code=\"demo\" type=\"string\" /&gt;\n  &lt;/extension_attributes&gt;\n&lt;/config&gt;\n\nStep 2: Configure the fieldset\n\nThe following code adds the demo field to the sales_convert_quote fieldset with the to_order aspect.\nThe code snippet in the next step uses the name of the fieldset and aspect to specify which fields to copy.\n\nfieldset.xml\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"DataObject/etc/fieldset.xsd\"&gt;\n  &lt;scope id=\"global\"&gt;\n    &lt;fieldset id=\"sales_convert_quote\"&gt;\n      &lt;field name=\"demo\"&gt;\n        &lt;aspect name=\"to_order\" /&gt;\n      &lt;/field&gt;\n    &lt;/fieldset&gt;\n  &lt;/scope&gt;\n&lt;/config&gt;\n\nStep 3: Copy the fieldset\n\nThe following code snippets highlight the code pieces needed to copy a fieldset using the \\Magento\\Framework\\DataObject\\Copy class.\n\n...\n\n/**\n * @var \\Magento\\Framework\\DataObject\\Copy\n */\nprotected $objectCopyService;\n\n...\n\n/**\n * @param \\Magento\\Framework\\DataObject\\Copy $objectCopyService\n  ...\n */\npublic function __construct(\n  \\Magento\\Framework\\DataObject\\Copy $objectCopyService,\n  ...\n) {\n    $this-&gt;objectCopyService = $objectCopyService;\n    ...\n  }\n\n...\n\n/**\n * @param $quote \\Magento\\Quote\\Api\\Data\\CartInterface\n * @param $order \\Magento\\Sales\\Api\\Data\\Order\n */\nprivate function copyQuoteToOrder($quote, $order)\n{\n  ...\n  $copy-&gt;copyFieldsetToTarget('sales_convert_quote', 'to_order', $quote, $order);\n  ...\n}\n\n...\n\nIn the code, an instance of the Copy class is obtained from the constructor using dependency injection.\nThe copyFieldsetToTarget function call with the $quote and $order parameters copies the fieldset for the two objects..\n\n",
      "url": "/guides/v2.0/ext-best-practices/tutorials/copy-fieldsets.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-partial-caching-create-cache-type-html": {
      "title": "Create a cache type",
      "content": "A cache type enables you to specify what is cached and enables merchants to clear that cache type using the Cache Management page in the Magento Admin.\n\nThe tag scope provides a mechanism for a cache type.\n\nTo create a new cache type:\n\nclass %Namespace%\\%Module%\\Model\\Cache\\Type extends \\Magento\\Framework\\Cache\\Frontend\\Decorator\\TagScope\n{\n  const TYPE_IDENTIFIER = '%cache_type_id%';\n  const CACHE_TAG = '%CACHE_TYPE_TAG%';\n  \n  public function __construct(\\Magento\\Framework\\App\\Cache\\Type\\FrontendPool $cacheFrontendPool)\n  {\n    parent::__construct($cacheFrontendPool-&gt;get(self::TYPE_IDENTIFIER), self::CACHE_TAG);\n  }\n}\n\nYou must specify the following parameters:\n\n\n  Namespace\\Module defines the name of a module that uses a cache type. A module can use several cache types and a cache type can be used in several modules.\n  %cache_type_id% defines unique identifier of a cache type.\n  %CACHE_TYPE_TAG% defines unique tag to be used in the cache type scoping.\n\n\nMore information about caching\n\nYou can get more information about caching by looking at the code.\nWe suggest you locate classes that extend Magento\\Framework\\Cache\\Frontend\\Decorator\\TagScope.\n\nFor example, look at Magento\\Eav\\Model\\Cache\\Type to understand more about the EAV cache type.\n\n\n  Please help us improve this topic by suggesting details using the Edit this page in GitHub link at the top of the page. \n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/partial-caching/create-cache-type.html"
    }
    ,
  
    "guides-v2-0-get-started-create-integration-html": {
      "title": "Create an integration",
      "content": "An integration enables third-party services to call the Magento web APIs. The Magento APIs currently supports Accounting, Enterprise Resource Planning (ERP), Customer Relationship Management (CRM), Product Information Management (PIM), and marketing automation systems out of the box.\n\nImplementing a simple integration requires little knowledge of PHP or Magento internal processes. However, you will need a working knowledge of\n\n\n  Magento REST or SOAP Web APIs\n  Web API authentication\n  OAuth-based authentication\n\n\nBefore you begin creating a module, make sure that you have a working installation of Magento 2.0, and the Magento System Requirements.\n\nTo create an integration, follow these general steps:\n\n\n  Create a module with the minimal structure and configuration.\n  Add files specific to the integration.\n  Install the module.\n  Check the integration.\n  Integrate with your application.\n\n\nCreate a skeletal module\n\nTo develop a module, you must:\n\n\n  \n    Create the module file structure. The module for an integration can be placed anywhere under the Magento root directory, but the recommended location is &lt;magento_base_dir&gt;/vendor/&lt;vendor_name&gt;/module-&lt;module_name&gt;.\n\n    Also create  etc, etc/integration, and Setup subdirectories under module-&lt;module_name&gt;, as shown in the following example:\n\n    \n cd &lt;magento_base_dir&gt;\n mkdir -p vendor/&lt;vendor_name&gt;/module-&lt;module_name&gt;/etc/integration\n mkdir -p vendor/&lt;vendor_name&gt;/module-&lt;module_name&gt;/Setup\n\n    For more detailed information, see Create your component file structure.\n  \n  \n    Define your module configuration file. The etc/module.xml file provides basic information about the module. Change directories to the etc directory and create the module.xml file. You must specify values for the following attributes:\n\n    \n\nAttributeDescription\n\n\nname\nA string that uniquely identifies the module.\n\n\nsetup_version\nThe version of Magento the component uses\n\n\n    The following example shows an example etc/module.xml file.\n\n    \n&lt;?xml version=\"1.0\"?&gt;\n&lt;!--\n   /**\n   * Copyright © 2015 Magento. All rights reserved.\n   * See COPYING.txt for license details.\n   &#42;&#47;\n   --&gt;\n   &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n       &lt;module name=\"Vendor1_Module1\" setup_version=\"2.0.0\"&gt;\n            &lt;sequence&gt;\n                &lt;module name=\"Magento_Integration\"/&gt;\n            &lt;/sequence&gt;\n       &lt;/module&gt;\n     &lt;/config&gt;\n\n\n    Module Magento_Integration is added to “sequence” to be loaded first. It helps to avoid the issue, when a module with integration config loaded, that leads to a malfunction.\n  \n  \n    Add your module’s composer.json file. Composer is a dependency manager for PHP. You must create a composer.json file for your module so that Composer can install and update the libraries your module relies on. Place the composer.json file in the module-&lt;module_name&gt; directory.\n\n    The following example demonstrates a minimal composer.json file.\n\n    \n   {\n      \"name\": \"Vendor1_Module1\",\n      \"description\": \"create integration from config\",\n      \"require\": {\n         \"php\": \"~5.5.0|~5.6.0|~7.0.0\",\n         \"magento/framework\": \"2.0.0\",\n         \"magento/module-integration\": \"2.0.0\"\n      },\n      \"type\": \"magento2-module\",\n      \"version\": \"1.0\",\n      \"autoload\": {\n         \"files\": [ \"registration.php\" ],\n         \"psr-4\": {\n            \"Vendor1\\\\Module1\\\\\": \"\"\n         }\n      }\n   }\n \n\n    For more information, see Create a component.\n  \n  \n    Create a registration.php file The registration.php registers the module with the Magento system. It must be placed in the module’s root directory.\n\n    \n   &lt;?php\n     /**\n     * Copyright © 2015 Magento. All rights reserved.\n     * See COPYING.txt for license details.\n     &#42;&#47;\n\n     \\Magento\\Framework\\Component\\ComponentRegistrar::register(\n     \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n     'Vendor1_Module1',\n     __DIR__\n     );\n   \n  \n  \n    Create an install class.\nChange directories to your Setup directory. Create a InstallData.php file that installs the integration configuration data into the Magento integration table.\n\n    The following sample is boilerplate and requires minor changes to make your integration work.\n\n    \n &lt;?php\n namespace Vendor1\\Module1\\Setup;\n\n use Magento\\Framework\\Setup\\ModuleContextInterface;\n use Magento\\Framework\\Setup\\ModuleDataSetupInterface;\n use Magento\\Integration\\Model\\ConfigBasedIntegrationManager;\n use Magento\\Framework\\Setup\\InstallDataInterface;\n\n class InstallData implements InstallDataInterface\n {\n     /**\n      &#42; @var ConfigBasedIntegrationManager\n      &#42;&#47;\n\n\n     private $integrationManager;\n\n     /**\n      &#42; @param ConfigBasedIntegrationManager $integrationManager\n      &#42;&#47;\n\n     public function &#95;&#95;construct(ConfigBasedIntegrationManager $integrationManager)\n     {\n         $this-&gt;integrationManager = $integrationManager;\n     }\n\n     /**\n      &#42; {@inheritdoc}\n      &#42;&#47;\n\n     public function install(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n     {\n         $this-&gt;integrationManager-&gt;processIntegrationConfig(['testIntegration']);\n     }\n }\n \n\n    In the following line\n\n    $this-&gt;integrationManager-&gt;processIntegrationConfig(['testIntegration']);\n\n    testIntegration must refer to your etc/integrations/config.xml file, and the integration name value must be the same.\n\n    Also, be sure to change the path after namespace for your vendor and module names.\n  \n\n\nCreate integration files\nMagento provides the Integration module, which simplifies the process of defining your integration. This module automatically performs functions such as:\n\n\n  Managing the third-party account that connects to Magento.\n  Maintaining OAuth authorizations and user data.\n  Managing security tokens and requests.\n\n\nTo customize your module, you must create multiple XML files and read through others files to determine what resources existing Magento modules have access to.\n\nThe process for customizing your module includes\n\n\n  Define the required resources\n  Pre-configure the integration\n\n\nDefine the required resources\nThe etc/integration/api.xml file defines which API resources the integration has access to.\n\nTo determine which resources an integration needs access to, review the permissions defined in each module’s etc/acl.xml file.\n\nIn the following example, the test integration requires access to the following resources in the Sales module:\n\n&lt;integrations&gt;\n    &lt;integration name=\"testIntegration\"&gt;\n        &lt;resources&gt;\n            &lt;!-- To grant permission to Magento_Log::online, its parent Magento_Customer::customer needs to be declared as well--&gt;\n            &lt;resource name=\"Magento_Customer::customer\" /&gt;\n            &lt;resource name=\"Magento_Log::online\" /&gt;\n            &lt;!-- To grant permission to Magento_Sales::reorder, all its parent resources need to be declared--&gt;\n            &lt;resource name=\"Magento_Sales::sales\" /&gt;\n            &lt;resource name=\"Magento_Sales::sales_operation\" /&gt;\n            &lt;resource name=\"Magento_Sales::sales_order\" /&gt;\n            &lt;resource name=\"Magento_Sales::actions\" /&gt;\n            &lt;resource name=\"Magento_Sales::reorder\" /&gt;\n        &lt;/resources&gt;\n    &lt;/integration&gt;\n&lt;/integrations&gt;\n\nPre-configure the integration\n\nYour module can optionally provide a configuration file config.xml so that the integration can be automatically pre-configured with default values. To enable this feature, create the config.xml file in the etc/integration directory.\n\n\n  If you pre-configure the integration, the values cannot be edited from the admin panel.\n\n\nThe  file defines which API resources the integration has access to.\n\n&lt;integrations&gt;\n   &lt;integration name=\"TestIntegration\"&gt;\n       &lt;email&gt;&lt;/email&gt;\n       &lt;endpoint_url&gt;&lt;/endpoint_url&gt;\n       &lt;identity_link_url&gt;&lt;/identity_link_url&gt;\n   &lt;/integration&gt;\n&lt;/integrations&gt;\n\n\n\nElement\nDescription\n\n\nintegrations\nContains one or more integration definitions.\n\n\nintegration name=\"\"\nDefines an integration. The name must be specified.\n\n\nemail\nAn email to associate with this integration.\n\n\nendpoint_url\nOptional. The URL where OAuth credentials can be sent when using OAuth for token exchange. We strongly recommend using https://.\nSee OAuth-based authentication for details.\n\n\nidentity_link_url\nOptional. The URL that redirects the user to link their 3rd party account with the Magento integration.\n\n\nInstall your module\nUse the following steps to install your module:\n\n\n  \n    Run the following command to update the Magento database schema and data.\n\n    bin/magento setup:upgrade\n  \n  \n    Run the following command to generate the new code.\n\n    bin/magento setup:di:compile\n  \n\n\nCheck your integration\nLog in to Magento and navigate to Settings &gt; Extensions &gt; Integrations. The integration should be displayed in the grid.\n\nIntegrate with your application\n\nBefore you can activate your integration in Magento, you must create two pages on your application to handle OAuth communications.\n\n\n  \n    The location specified in the identity_link_url parameter must point to a page that can handle login requests.\n  \n  \n    The location specified in the endpoint_url parameter (Callback URL in Admin) must be able to process OAuth token exchanges.\n  \n\n\nLogin page\n\nWhen a merchant clicks the Activate button in Admin, a pop-up login page for the third-party application displays. Magento sends values for oauth_consumer_key and success_call_back parameters. The application must store the value foroauth_consumer_key tie it to the login ID. Use the success_call_back parameter to return control back to Magento.\n\nCallback page\nThe callback page must be able to perform the following tasks:\n\n\n  \n    Receive an initial HTTPS POST that Magento sends when the merchant activates integration. This post contains the Magento store URL, an oauth_verifier, the OAuth consumer key, and the OAuth consumer secret. The consumer key and secret are generated when the integration is created.\n  \n  \n    Ask for a request token. A request token is a temporary token that the user exchanges for an access token. Use the following API to get a request token from Magento:\n\n    POST /oauth/token/request\n\n    See Get a request token for more details about this call.\n  \n  \n    Parse the request token response. The response contains an oauth_token and oauth_token_secret.\n  \n  \n    Ask for a access token. The request token must be exchanged for an access token. Use the following API to get a request token from Magento:\n\n    POST /oauth/token/access\n\n    See Get an access token for more details about this call.\n  \n  \n    Parse the access token response. The response contains an oauth_token and oauth_token_secret. These values will be different than those provided in the request token response.\n  \n  \n    Save the access token and other OAuth parameters. The access token and OAuth parameters must be specified in the Authorization header in each call to Magento.\n  \n\n\nRelated Topics\n\n  Web API authentication\n  OAuth-based authentication\n  Magento System Requirements\n  Create the module file structure\n  Create a component\n\n",
      "url": "/guides/v2.0/get-started/create-integration.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-create-component-html": {
      "title": "Name your component",
      "content": "Overview of naming a component\nYou give a name to your component in its composer.json and module.xml files. These files also contain other required configuration parameters, such as the module’s schema version.\n\nPrerequisites\nBefore you continue, make sure you have completed all of the following tasks:\n\n\n  Created a file structure\n  Created the the configuration files you’ll need\n  Registered your component\n\n\nAdd the component’s module.xml file\nDeclare the component itself by adding a module.xml file in the /etc folder of your component.\n\nA component declares itself (that is, defines its name and existence) in the module.xml file, located in the Magento install directory at &lt;ComponentName&gt;/etc/.\n\nThe smallest working module.xml file would look something like this:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n\t\t&lt;module name=\"Vendor_ComponentName\" setup_version=\"2.0.0\"/&gt;\n&lt;/config&gt;\n\n\n…where name  is the name of your component, and setup_version is your module’s database schema version. Both of these attributes are required.\n\nDo not use “Ui” for your custom module name because the %Vendor%_Ui notation, required when specifying paths, might cause issues.\n\nAdd the components composer.json file\ncomposer.json provides a component name and also specifies component dependencies.\n\nIn addition, the Component Manager looks for a composer.json in a component’s root directory and can perform actions on the component and its dependencies.\n\nIn particular:\n\n\n  If a component has composer.json and the component was installed using Composer (including from packagist, the Magento Marketplace, or other source), the Component Manager can update, uninstall, enable, or disable the component.\n  If the component has composer.json but was not installed using Composer (for example, custom code a developer wrote), Component Manager can still enable or disable the component.\n  We strongly recommend you include composer.json in your component’s root directory whether or not you intend to distribute it to other Magento merchants.\n\n\nA sample follows:\n\n\t{\n    \"name\": \"your-name/module-Acme\",\n    \"description\": \"Test component for Magento 2\",\n    \"require\": {\n        \"php\": \"~5.5.0|~5.6.0\",\n        \"magento/module-store\": \"1.0.0-beta\",\n        \"magento/module-catalog\": \"1.0.0-beta\",\n        \"magento/module-catalog-inventory\": \"1.0.0-beta\",\n        \"magento/module-ui\": \"self.version\",\n        \"magento/magento-composer-installer\": \"*\"\n    },\n    \"suggest\": {\n      \"magento/module-webapi\": \"1.0.0-beta\"\n    },\n    \"type\": \"magento2-module\",\n     \"version\": \"1.0.0-beta\",\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ],\n    \"autoload\": {\n        \"files\": [ \"registration.php\" ],\n        \"psr-4\": {\n            \"Magento\\\\CatalogImportExport\\\\\": \"\"\n        }\n    }\n    }\n\nwhere:\n\n\n  name—is the name of your component.\n  description—is a concise explanation of your component’s purpose.\n  require—lists any components your component depends on.\n  suggest—lists soft dependencies. The component can operate without them, but if the components are active, this component might impact their functionality. Suggest does not affect component load order.\n  type—determines what the Magento component type. Choose from magento2-theme, magento2-language, or magento2-module.\n  version—lists the version of the component.\n  license—lists applicable licenses that apply to your component.\n  autoload—instructs composer to load the specified files.\n\n\n\n  Magento does not currently support the path repository.\n\n\n\n\nNext\n\nComponent load order\n",
      "url": "/guides/v2.0/extension-dev-guide/build/create_component.html"
    }
    ,
  
    "guides-v2-0-mtf-create-test-create-new-test-html": {
      "title": "Create a test in the Functional Testing Framework",
      "content": "To demonstrate the usage of test components from previous sections in the test creation process, we will create a new functional injectable test step-by-step. Before creating automated test, try to pass it manually.\n\nTo make the documentation more consistent, we created a completely new test specially for this tutorial. We used the concrete Magento commit functionality for this test. You can install one and try to follow this guide.\n\nTest description\n\nCreate a synonym group (synonyms are a way to expand the scope of eligible matching products) with:\n\n\n  Scope:\n    \n      All Websites\n      All Store Views\n      Default Store View\n    \n  \n  Synonyms: shoes, foot wear, men shoes, women shoes.\n\n\nManual testing scenario\n\nVariation 1:\n\n\n  Log in to Admin.\n  Browse to “Marketing” &gt; “SEO &amp; Search” &gt; “Search Synonyms”.\n  Click the “New Synonyms Group” button.\n  Enter data in the “Synonyms” field.\n  Click the “Save Synonym Group” button.\n  Verify the synonym group saved successfully\n\n\nVariation 2:\n\n\n  Log in to Admin.\n  Browse to “Marketing” &gt; “SEO &amp; Search” &gt; “Search Synonyms”.\n  Click the “New Synonyms Group” button.\n  Select “All Store Views” in a “Scope” field.\n  Enter data in the “Synonyms” field.\n  Click the “Save Synonym Group” button.\n  Verify the synonym group saved successfully\n\n\nVariation 3:\n\n\n  Log in to Admin.\n  Browse to “Marketing” &gt; “SEO &amp; Search” &gt; “Search Synonyms”.\n  Click the “New Synonyms Group” button.\n  Select “Default Store View” in a “Scope” field.\n  Enter data in the “Synonyms” field.\n  Click the “Save Synonym Group” button.\n  Verify the synonym group saved successfully\n\n\nAutomated testing scenario\n\n\n  Log in to Admin.\n  Open the Search Synonym page.\n  Click the “New Synonym Group” button.\n  Enter data according to a data set. For each variation, the synonyms must have unique identifiers.\n  Click the “Save Synonym Group” button.\n  Verify the synonym group saved successfully\n\n\nTest creation\n\nStep 1. Check the FTF configuration and environment\n\n\n  \n    Adjust configuration. Learn how to adjust a configuration.\n  \n  \n    Prepare Magento application. Learn how to prepare Magento application.\n  \n  \n    Prepare environment for test run. Learn how to prepare environment for test run.\n  \n\n\nStep 2. Create the testing object - a fixture\n\nThis step is applicable if a fixture doesn’t exist in a module.\n\nUse a generateFixtureXml.php to create a new fixture.\n\nEnter in your terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp -f generateFixtureXml.php -- --name synonym --entity_type search_synonyms --collection Magento\\\\Search\\\\Model\\\\ResourceModel\\\\Query\\\\Collection\n\n\nSee the following explanations.\n\n\n  \n    \n      Parameter\n      Value\n      Explanation\n    \n  \n  \n    \n      --name\n      synonym\n      A name of the fixture. It can have any name. synonym seems to be logical.\n    \n    \n      --entity_type\n      search_synonyms\n      Database table name where entity data is stored. You can track database input when you perform a manual testing. A new record will be created in a table that you need.\n    \n    \n      --collection\n      Magento\\\\Search\\\\Model\\\\ResourceModel\\\\Query\\\\Collection\n      Collection to generate data sets. Synonyms are the entities of a Magento_Search module. A collection can always be found in model resources.\n    \n  \n\n\nAll slashes must be escaped with \\\\.\n\nAs a result of previous commands, a brand new fixture can be found in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/Fixture directory.\n\n\n\nThe following is a code of the new Synonym fixture.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"synonym\"\n             module=\"Magento_Search\"\n             entity_type=\"search_synonyms\"\n             type=\"flat\"\n             collection=\"Magento\\Search\\Model\\ResourceModel\\Query\\Collection\"\n             repository_class=\"Magento\\Search\\Test\\Repository\\Synonym\"\n             handler_interface=\"Magento\\Search\\Test\\Handler\\Synonym\\SynonymInterface\"\n             class=\"Magento\\Search\\Test\\Fixture\\Synonym\"&gt;\n        &lt;field name=\"group_id\" is_required=\"1 \"/&gt;\n        &lt;field name=\"synonyms\" is_required=\"0\" /&gt;\n        &lt;field name=\"store_id\" is_required=\"0\" /&gt;\n        &lt;field name=\"website_id\" is_required=\"0\" /&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nIf we open a New Synonym Group page in a browser\n\n\n\nwe see that store_id and website_id are combined in the “Scope” fields. To set store_id and website_id, we have to perform some more logic than just entering the data. That’s why we should use a data source.\n\nThe same field is present in Magento_Widget module. It means that data source has been already written and we can reuse it.\n\nLet’s check the functional tests for the Magento_Widget module.\n\n\n\nIt contains a StoreIds.php data source, that is similar to what we need. It has the following code:\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Fixture\\Widget;\n\nuse Magento\\Store\\Test\\Fixture\\Store;\nuse Magento\\Mtf\\Fixture\\FixtureFactory;\nuse Magento\\Mtf\\Fixture\\DataSource;\n\n/**\n * Prepare Store.\n */\nclass StoreIds extends DataSource\n{\n    /**\n     * Return stores.\n     *\n     * @var Store\n     */\n    protected $stores = [];\n\n    /**\n     * @constructor\n     * @param FixtureFactory $fixtureFactory\n     * @param array $params\n     * @param array $data\n     */\n    public function __construct(FixtureFactory $fixtureFactory, array $params, array $data = [])\n    {\n        $this-&gt;params = $params;\n        if (isset($data['dataset'])) {\n            $dataset = explode(',', $data['dataset']);\n            foreach ($dataset as $store) {\n                /** @var Store $store */\n                $store = $fixtureFactory-&gt;createByCode('store', ['dataset' =&gt; $store]);\n                if (!$store-&gt;hasData('store_id')) {\n                    $store-&gt;persist();\n                }\n                $this-&gt;stores[] = $store;\n                $this-&gt;data[] = $store-&gt;getName();\n            }\n        } else {\n            $this-&gt;data[] = null;\n        }\n    }\n\n    /**\n     * Return stores.\n     *\n     * @return Store\n     */\n    public function getStores()\n    {\n        return $this-&gt;stores;\n    }\n}\n\nThe difference is that it is designed for multiple stores, but we don’t need that. Adding some changes we can get our data source.\n\n&lt;?php\n\nnamespace Magento\\Search\\Test\\Fixture\\Synonym;\n\nuse Magento\\Store\\Test\\Fixture\\Store;\nuse Magento\\Mtf\\Fixture\\FixtureFactory;\nuse Magento\\Mtf\\Fixture\\DataSource;\n\n/**\n * Prepare Store.\n */\nclass ScopeId extends DataSource\n{\n    /**\n     * Return store.\n     *\n     * @var Store\n     */\n    protected $store = null;\n\n    /**\n     * @constructor\n     * @param FixtureFactory $fixtureFactory\n     * @param array $params\n     * @param array $data\n     */\n    public function __construct(FixtureFactory $fixtureFactory, array $params, array $data = [])\n    {\n        $this-&gt;params = $params;\n        if (isset($data['dataset'])) {\n            $store = $fixtureFactory-&gt;createByCode('store', ['dataset' =&gt; $data['dataset']]);\n            if (!$store-&gt;hasData('store_id')) {\n                $store-&gt;persist();\n            }\n            $this-&gt;store = $store;\n            $this-&gt;data = $store-&gt;getName();\n        } else {\n            $this-&gt;data = $data;\n        }\n    }\n\n    /**\n     * Return store.\n     *\n     * @return Store\n     */\n    public function getStore()\n    {\n        return $this-&gt;store;\n    }\n}\n\nThis data source:\n\n\n  Checks if a field has a dataset key in a value that comes from a variation. If it doesn’t, then field is assigned a value from the variation.\n  If it does, then a new Store fixture is created with a dataset from a Store repository (&lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Store/Test/Repository/Store.xml).\n  Checks if the store_id field exists in the Store fixture. If it doesn’t, a new Store in Magento is created.\n  Returns a Store name value.\n\n\nWe should save it as &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/Fixture/Synonym/ScopeId.php.\n\n\n\nNow we should change the fixture. Instead of store_id and website_id, we must use scope_id with the Magento\\Search\\Test\\Fixture\\Synonym\\ScopeId data source class.\n\n... ... ...\n&lt;field name=\"group_id\" is_required=\"0\" /&gt;\n&lt;field name=\"synonyms\" is_required=\"0\" /&gt;\n&lt;field name=\"scope_id\" is_required=\"0\" source=\"Magento\\Search\\Test\\Fixture\\Synonym\\ScopeId\" /&gt;\n... ... ...\n\nThen, we must regenerate the fixture to apply changes:\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nA new PHP class Synonym.php is generated in &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento/Search/Test/Fixture.\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Search\\Test\\Fixture;\n\n/**\n * Class Synonym\n */\nclass Synonym extends \\Magento\\Mtf\\Fixture\\InjectableFixture\n{\n    /**\n     * @var string\n     */\n    protected $repositoryClass = 'Magento\\Search\\Test\\Repository\\Synonym';\n\n    /**\n     * @var string\n     */\n    protected $handlerInterface = 'Magento\\Search\\Test\\Handler\\Synonym\\SynonymInterface';\n\n\n    /**\n     * @var array\n     */\n    protected $group_id = [\n        'is_required' =&gt; '0',\n    ];\n\n    /**\n     * @var array\n     */\n    protected $synonyms = [\n        'is_required' =&gt; '0',\n    ];\n\n    /**\n     * @var array\n     */\n    protected $scope_id = [\n        'is_required' =&gt; '0',\n        'source' =&gt; 'Magento\\Search\\Test\\Fixture\\Synonym\\ScopeId',\n    ];\n\n    /**\n     * @return mixed\n     */\n    public function getGroupId()\n    {\n        return $this-&gt;getData('group_id');\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getSynonyms()\n    {\n        return $this-&gt;getData('synonyms');\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getScopeId()\n    {\n        return $this-&gt;getData('scope_id');\n    }\n}\n\nStep 3. Create the initial test case\n\nNow we can create a test case.\n\nFrom the test case topic we know about the structure, location and name of the test case.\nIn this example it is named CreateSynonymEntityTest.php and stored in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/TestCase.\n\n\n\nAs a result of manual testing we know that we must work with a Search Synonym Index page and a New Synonym Group page during the test flow. We can code the initialization of these pages in the test using an __inject() method of the Magento\\Mtf\\TestCase\\Injectable class. The pages will be created in Step 5. Also, we will use the fixture from the Step 2.\n\n&lt;?php\n\nnamespace Magento\\Search\\Test\\TestCase;\n\nuse Magento\\Mtf\\TestCase\\Injectable;\nuse Magento\\Search\\Test\\Fixture\\Synonym;\n\n/**\n * Steps:\n * 1. Log in to Admin.\n * 2. Open the Search Synonym page.\n * 3. Click the \"New Synonym Group\" button.\n * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers.\n * 5. Click the \"Save Synonym Group\" button.\n * 6. Verify the synonym group saved successfully.\n */\nclass CreateSynonymEntityTest extends Injectable\n{\n    /**\n     * Search Synonyms Index page.\n     *\n     * @var SynonymsIndex\n     */\n    private $synonymsIndex;\n\n    /**\n     * New Synonym Group page.\n     *\n     * @var SynonymsNew\n     */\n    private $synonymsNew;\n\n    /**\n     * Inject synonym pages.\n     *\n     * @param SynonymsIndex $synonymsIndex\n     * @param SynonymsNew $synonymsNew\n     * @return void\n     */\n    public function __inject(\n        SynonymsIndex $synonymsIndex,\n        SynonymsNew $synonymsNew\n    ) {\n        $this-&gt;synonymsIndex = $synonymsIndex;\n        $this-&gt;synonymsNew = $synonymsNew;\n    }\n\n    /**\n     * Create Synonym group test.\n     *\n     * @param Synonym $synonym\n     * @return void\n     */\n    public function test(Synonym $synonym)\n    {\n        // Steps\n    }\n}\n\nStep 4. Create the data set\n\nNow we can add a data set with variations that cover cases in the test description: &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml\n\n\n\nThe following code contains a data set, but doesn’t have data yet:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary=\"Create Synonyms\" ticketId=\"MAGETWO-123\"&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary=\"Create synonym for all websites and all store views\"&gt;\n        enter data and constraints for vaiation 1\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary=\"Create synonyms for main website and all store views\"&gt;\n        enter data and constraints for vaiation 2\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary=\"Create synonyms for main website and default store views\"&gt;\n        enter data and constraints for variation 3\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nAccording to a New Synonym Group form we need to enter data in the synonyms and scope_id fields.\n\n\n  synonyms field. We need to set data to a fixture field. The name of the field should be &lt;name of a fixture&gt;/data/&lt;name of the field&gt;. It is name = \"synonym/data/synonyms\". To make data unique in each variation, we can use the %isolation% placeholder.\n  scope_id field. We need to set data to a fixture field from a repository. The name of the field should be &lt;name of a fixture&gt;/data/&lt;name of the field&gt;/dataset. It is name=\"synonym/data/scope_id/dataset\". As you remember from Step 2, we use the data source to process this field. The data source loads the Store fixture with the Store repository, and returns the name of the field we need. In a dataset value, we should specify a name of the Store repository dataset name from &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Store/Test/Repository/Store.xml.\n\n\n\n  \n    \n      Variation #\n      synonyms\n      scope_id\n    \n  \n  \n    \n      variation 1\n      shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%\n      In this variation we won’t use this field to cover All Website case, because it is selected automatically when the New Synonym Group page is opened\n    \n    \n      variation 2\n      shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%\n      all_store_views\n    \n    \n      variation 3\n      shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%\n      default_store_view\n    \n  \n\n\nLet’s see the data set with data.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary=\"Create Synonyms\" ticketId=\"MAGETWO-23022016\"&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary=\"Create synonym for all websites and all store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary=\"Create synonyms for main website and all store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n            &lt;data name=\"synonym/data/scope_id/dataset\" xsi:type=\"string\"&gt;all_store_views&lt;/data&gt;\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary=\"Create synonyms for main website and default store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n            &lt;data name=\"synonym/data/scope_id/dataset\" xsi:type=\"string\"&gt;default_store_view&lt;/data&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nA bit later we will add assertions to complete our data set.\n\nStep 5. Create the pages\n\nIn Step 3, we added two pages to the test case class. Because both pages are in the Admin area, we should create them in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml directory.\n\nSynonymsIndex.xml\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"SynonymsIndex\" area=\"Adminhtml\" mca=\"search/synonyms/index\" module=\"Magento_Search\"&gt;\n        &lt;block ... /&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nSynonymsNew.xml\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"SynonymsNew\" area=\"Adminhtml\" mca=\"search/synonyms/new\" module=\"Magento_Search\"&gt;\n        &lt;block ... /&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\n\n\nTo generate PHP classes for these pages enter and run in your terminal\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\n\n\nIn the next step we will create blocks that implements logic in these pages.\n\nStep 6. Create the blocks\n\nLet’s see in the test description what actions must be performed:\n\n\n  Click the “New Synonym Group” button.\n  Enter data according to a data set.\n  Click the “Save Synonym Group” button.\n\n\nHow to code ‘Click the “New Synonym Group” button’\n\nFortunately, you already have a block that contains a method to add a new entity in a grid: \\Magento\\Backend\\Test\\Block\\GridPageActions.\n\n\n/**\n * Click the \"Add New\" button\n *\n * @return void\n */\npublic function addNew()\n{\n    $this-&gt;_rootElement-&gt;find($this-&gt;addNewButton)-&gt;click();\n}\n\n\n\nIn HTML page, to locate the UI block that contains a button, we will use a .page-main-actions locator. Learn how to define a locator.\n\nThe SynonymsIndex.xml page must contain the following block to be able to run the method in a test case.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"SynonymsIndex\" area=\"Adminhtml\" mca=\"search/synonyms/index\" module=\"Magento_Search\"&gt;\n        &lt;block name=\"pageActionsBlock\" class=\"Magento\\Backend\\Test\\Block\\GridPageActions\" locator=\".page-main-actions\" strategy=\"css selector\"/&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nNow you can run generate.php as we did before to re-generate page classes.\n\nHow to code ‘Enter data according to a data set’\n\nWe need to enter data from a data set into the form fields.\n\n\n\nThe Block directory in the Magento_Search module (in the Magento code) contains the Adminhtml/Synonyms/Edit directories, as shown below:\n\n\n\nThe Search/Test directory in functional tests should be constructed in a similar manner:\n\n\n\nWe need a fill() method from the \\Magento\\Mtf\\Block\\Form class and a mapping file.\n\nForm mapping\n\nLearn about form mapping..\n\nWe don’t need to define mapping parameters for the synonyms field, because they are the same as the default values. (See the nodes description table.) The same is applicable to the scope_id field except a type of input element, which is a custom typified element \\Magento\\Mtf\\Client\\Element\\SelectstoreElement in our case. Let’s create the mapping file SynonymsForm.xml, which has the following code:\n\n&lt;mapping strict=\"0\"&gt;\n  &lt;fields&gt;\n      &lt;synonyms /&gt;\n      &lt;scope_id&gt;\n          &lt;input&gt;selectstore&lt;/input&gt;\n      &lt;/scope_id&gt;\n  &lt;/fields&gt;\n&lt;/mapping&gt;\n\nA block class must simply extend \\Magento\\Mtf\\Block\\Form class. Its name duplicates the name of the mapping file that is a concatenation of the fixture name and a Form ending (Synonyms+Form). Let’s create a \\Magento\\Search\\Test\\Block\\Adminhtml\\Synonyms\\Edit\\SynonymsForm empty class:\n\n&lt;?php\n\nnamespace Magento\\Search\\Test\\Block\\Adminhtml\\Synonyms\\Edit;\n\nuse Magento\\Mtf\\Block\\Form;\n\n/**\n * Synonyms edit form in admin.\n */\nclass SynonymsForm extends Form\n{\n    //\n}\n\nNow we have the following structure:\n\n\n\nThen we should add the block class to the SynonymsNew.xml page object. To identify a form block on the HTML page, use an id='page:main-container' css selector.\n\n&lt;block name=\"synonymForm\" class=\"Magento\\Search\\Test\\Block\\Adminhtml\\Synonyms\\Edit\\SynonymsForm\" locator=\"[id='page:main-container']\" strategy=\"css selector\" /&gt;\n\nHow to code ‘Click the “Save Synonym Group” button’\n\nThe save() method from the \\Magento\\Backend\\Test\\Block\\FormPageActions block class allows you to click the “Save Synonym Group” button.\n\nThe SynonymsNew.xml page must contain this class. The .page-main-actions css selector will help to identify a UI block with the button on the HTML page.\n\n&lt;block name=\"formPageActions\" class=\"Magento\\Backend\\Test\\Block\\FormPageActions\" locator=\".page-main-actions\" strategy=\"css selector\" /&gt;\n\nStep 7. Add the blocks to pages\n\nIn previous step, we created blocks with methods that enable us to perform the required test flow.\n\nTo associate methods with pages, blocks must be added to pages.\n\nSearch Synonym page\n\nA corresponding page object in a functional test is &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml/SynonymsIndex.xml\n\nThe page with a block:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"SynonymsIndex\" area=\"Adminhtml\" mca=\"search/synonyms/index\" module=\"Magento_Search\"&gt;\n        &lt;block name=\"pageActionsBlock\" class=\"Magento\\Backend\\Test\\Block\\GridPageActions\" locator=\".page-main-actions\" strategy=\"css selector\"/&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nNew Synonym Group page\n\nA corresponding page object in a functional test is &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml/SynonymsNew.xml\n\nThe page with blocks:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"SynonymsNew\" area=\"Adminhtml\" mca=\"search/synonyms/new\" module=\"Magento_Search\"&gt;\n        &lt;block name=\"synonymForm\" class=\"Magento\\Search\\Test\\Block\\Adminhtml\\Synonyms\\Edit\\SynonymsForm\" locator=\"[id='page:main-container']\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"formPageActions\" class=\"Magento\\Backend\\Test\\Block\\FormPageActions\" locator=\".page-main-actions\" strategy=\"css selector\" /&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nTo generate PHP classes for these pages, enter the following command from your terminal.\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nNow we can define the test flow in a test() method of the test case (Step 3).\n\nStep 8. Define the test() method\n\nHere we should recall Step 3, where the initial test case was created.\n\nAn argument for the test() method is a test object (a fixture).\n\n\n/**\n * Create Synonym group test.\n *\n * @param Synonym $synonym\n * @return void\n */\npublic function test(Synonym $synonym)\n{\n    // Steps\n}\n\n\n\nNow we can add page classes made in Step 5:\n\n\nuse Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsIndex;\nuse Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsNew;\n\n\n\nAll methods are defined in blocks (Step 6) that are grouped in pages (Step 5, Step 7).\n\nRemember our test flow:\n\n\n  Log in to Admin\n  Open the Search Synonym page\n  Click the “New Synonym Group” button\n  Enter data according to a data set\n  Click the “Save Synonym Group” button\n\n\nLet’s code it!\n\nLog in to Admin and open the Search Synonym page\n\nIn the FTF, the process of logging in doesn’t require a special method and is performed automatically when any page from the Admin is opened. A method, which we will use, is an open() method of the Magento/Mtf/Page/BackendPage class. There is no need to add this class in use, because it is inherited from the Magento/Search/Test/Page/Adminhtml/SynonymsIndex class.\n\n\n$this-&gt;synonymsIndex-&gt;open();\n\n\n\nClick the “New Synonym Group” button\n\nTo Click the “New Synonym Group” button, we will use the addNew() method from the pageActionsBlock block. A getPageActionsBlock() of the generated Magento/Search/Test/Page/Adminhtml/SynonymsIndex class receives parameters defined in the pageActionsBlock block (class, locator, strategy).\n\n\n$this-&gt;synonymsIndex-&gt;getPageActionsBlock()-&gt;addNew();\n\n\n\nThis action opens the New Synonym Group page.\n\nEnter data according to a data set\n\nTo enter data in the form, we use the fill() method from the synonymForm block of the synonymsNew page. An argument for this method is a fixture Synonym. A getSynonymForm() method of the generated Magento/Search/Test/Page/Adminhtml/SynonymsNew class receives parameters defined in the synonymForm block.\n\n\n$this-&gt;synonymsNew-&gt;getSynonymForm()-&gt;fill($synonym);\n\n\n\nClick the “Save Synonym Group” button\n\nA save() method with parameters defined in a formPageActions block. Parameters are injected using a getFormPageActions() method from the synonymsNew page (generated Magento/Search/Test/Page/Adminhtml/SynonymsNew page class).\n\n\n$this-&gt;synonymsNew-&gt;getFormPageActions()-&gt;save();\n\n\n\nFull test() definition\n\n\n/**\n * Create Synonym group test.\n *\n * @param Synonym $synonym\n * @return void\n */\npublic function test(Synonym $synonym)\n{\n    // Steps\n    $this-&gt;synonymsIndex-&gt;open(); // logs in to Admin, opens Search Synonyms page\n    $this-&gt;synonymsIndex-&gt;getPageActionsBlock()-&gt;addNew(); // receiving of the page action block with '_rootElement' containing locator which is indicated in the page class for PageActionBlock from the page, makes 'click' action on it\n    $this-&gt;synonymsNew-&gt;getSynonymForm()-&gt;fill($synonym); // enters data from variation in the New Synonym Group fields\n    $this-&gt;synonymsNew-&gt;getFormPageActions()-&gt;save(); // `click` on the Save Synonym Group button\n}\n\n\n\nStep 9. Check the test run\n\nThe test is now ready to run. It is complete, except for an assertion that we will create in the next step.\n\nThe full test case code:\n\n&lt;?php\n\nnamespace Magento\\Search\\Test\\TestCase;\n\nuse Magento\\Mtf\\TestCase\\Injectable;\nuse Magento\\Search\\Test\\Fixture\\Synonym;\nuse Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsIndex;\nuse Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsNew;\n\n/**\n * Steps:\n * 1. Log in to Admin.\n * 2. Open the Search Synonym page.\n * 3. Click the \"New Synonym Group\" button.\n * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers.\n * 5. Click the \"Save Synonym Group\" button.\n * 6. Verify the synonym group saved successfully\n */\nclass CreateSynonymEntityTest extends Injectable\n{\n    /**\n     * Search Synonyms Index page.\n     *\n     * @var SynonymsIndex\n     */\n    private $synonymsIndex;\n\n    /**\n     * New Synonym Group page.\n     *\n     * @var SynonymsNew\n     */\n    private $synonymsNew;\n\n    /**\n     * Inject pages.\n     *\n     * @param SynonymsIndex $synonymsIndex\n     * @param SynonymsNew $synonymsNew\n     * @return void\n     */\n    public function __inject(\n        SynonymsIndex $synonymsIndex,\n        SynonymsNew $synonymsNew\n    ) {\n        $this-&gt;synonymsIndex = $synonymsIndex;\n        $this-&gt;synonymsNew = $synonymsNew;\n    }\n\n    /**\n     * Create Synonym group test.\n     *\n     * @param Synonym $synonym\n     * @return void\n     */\n    public function test(Synonym $synonym)\n    {\n        // Steps\n        $this-&gt;synonymsIndex-&gt;open();\n        $this-&gt;synonymsIndex-&gt;getPageActionsBlock()-&gt;addNew();\n        $this-&gt;synonymsNew-&gt;getSynonymForm()-&gt;fill($synonym);\n        $this-&gt;synonymsNew-&gt;getFormPageActions()-&gt;save();\n    }\n}\n\nYou can run the test using your IDE or the CLI. The Selenium Server must be up and running. To run the test using the CLI, enter in your terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit --filter CreateSynonymEntityTest\n\n\nThe test will be performed in a browser. Three synonyms groups are created one by-one that corresponds to three variations in a data set.\n\nStep 10. Create the assertion\n\nThe last item in the test description says that the test must check that a success message is displayed after the test flow completes.\n\n\n\nTo cover this, we should create the test assertion (constraint) and add the full class name to a variation of the data set.\n\nFortunately, this type of assertion  is commonly used in functional tests. If we search on the phrase “SuccessSaveMessage” in &lt;magento2_root_dir&gt;/dev/tests/functional, there will be several matches. Let’s select from the list of results a \\Magento\\Customer\\Test\\Constraint\\AssertCustomerSuccessSaveMessage class. It has the following code:\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Customer\\Test\\Constraint;\n\nuse Magento\\Customer\\Test\\Page\\Adminhtml\\CustomerIndex;\nuse Magento\\Mtf\\Constraint\\AbstractConstraint;\n\n/**\n * Assertion to check Customer success save message.\n */\nclass AssertCustomerSuccessSaveMessage extends AbstractConstraint\n{\n    const SUCCESS_MESSAGE = 'You saved the customer.';\n\n    /**\n     * Assert that success message is displayed after customer save.\n     *\n     * @param CustomerIndex $pageCustomerIndex\n     * @return void\n     */\n    public function processAssert(CustomerIndex $pageCustomerIndex)\n    {\n        $actualMessage = $pageCustomerIndex-&gt;getMessagesBlock()-&gt;getSuccessMessage();\n        \\PHPUnit_Framework_Assert::assertEquals(\n            self::SUCCESS_MESSAGE,\n            $actualMessage,\n            'Wrong success message is displayed.'\n            . \"\\nExpected: \" . self::SUCCESS_MESSAGE\n            . \"\\nActual: \" . $actualMessage\n        );\n    }\n\n    /**\n     * Text success save message is displayed.\n     *\n     * @return string\n     */\n    public function toString()\n    {\n        return 'Assert that success message is displayed.';\n    }\n}\n\nBy making a simple change, we can create a constraint class that is needed \\Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\n\n\n\nwith the following code:\n\n&lt;?php\n\nnamespace Magento\\Search\\Test\\Constraint;\n\nuse Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsIndex;\nuse Magento\\Mtf\\Constraint\\AbstractConstraint;\n\n/**\n * Assertion to check Success Save Message for Synonyms.\n */\nclass AssertSynonymSuccessSaveMessage extends AbstractConstraint\n{\n    const SUCCESS_MESSAGE = 'You saved the synonym group.';\n\n    /**\n     * Check Success Save Message for Synonyms.\n     *\n     * @param SynonymsIndex $synonymsIndex\n     * @return void\n     */\n    public function processAssert(SynonymsIndex $synonymsIndex)\n    {\n        $actualMessage = $synonymsIndex-&gt;getMessagesBlock()-&gt;getSuccessMessage();\n        \\PHPUnit_Framework_Assert::assertEquals(\n            self::SUCCESS_MESSAGE,\n            $actualMessage,\n            'Wrong success message is displayed.'\n            . \"\\nExpected: \" . self::SUCCESS_MESSAGE\n            . \"\\nActual: \" . $actualMessage\n        );\n    }\n\n    /**\n     * Text success save message is displayed\n     *\n     * @return string\n     */\n    public function toString()\n    {\n        return 'Assert that success message is displayed.';\n    }\n}\n\nTo handle the messages we use the \\Magento\\Backend\\Test\\Block\\Messages class, by adding the messagesBlock block to the SynonymsIndex page. In &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Customer/Test/Page/Adminhtml/CustomerGroupIndex.xml, we can see that the following block is used:\n\n&lt;block name=\"messagesBlock\" class=\"Magento\\Backend\\Test\\Block\\Messages\" locator=\"#messages .messages\" strategy=\"css selector\"/&gt;\n\nThis block must be added to SynonymsIndex class. To do this:\n\n1) Open &lt;magento2_root_dir&gt;dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml/SynonymsIndex.xml.\n\n2) Add the block node:\n\n&lt;block name=\"messagesBlock\" class=\"Magento\\Backend\\Test\\Block\\Messages\" locator=\"#messages .messages\" strategy=\"css selector\"/&gt;\n\n3) Launch the generating tool to update the page class:\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nAnd now we can add &lt;constraint&gt; to each variation of a data set &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary=\"Create Synonyms\" ticketId=\"MAGETWO-23022016\"&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary=\"Create synonym for all websites and all store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /&gt;\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary=\"Create synonyms for main website and all store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n            &lt;data name=\"synonym/data/scope_id/dataset\" xsi:type=\"string\"&gt;all_store_views&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /&gt;\n        &lt;/variation&gt;\n        &lt;variation name=\"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary=\"Create synonyms for main website and default store views\"&gt;\n            &lt;data name=\"synonym/data/synonyms\" xsi:type=\"string\"&gt;shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation%&lt;/data&gt;\n            &lt;data name=\"synonym/data/scope_id/dataset\" xsi:type=\"string\"&gt;default_store_view&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nThe test is ready to run.\n\nYou can run the test using your IDE or the CLI. The Selenium Server must be up and running. To run the test using the CLI, enter in your terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit --filter CreateSynonymEntityTest\n\n\nThe test now checks after each variation whether a success message is displayed.\n\nThat’s it!\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/create_test/create_new_test.html"
    }
    ,
  
    "guides-v2-0-mtf-create-test-html": {
      "title": "Create a test in the Functional Testing Framework",
      "content": "The Magento testing framework (FTF) works with functional tests only. Functional tests check that an application meets business requirements. These requirements usually are collected in the functional specifications that describe expected behaviour of the application.\n\nTests usually cover functionality of a business entity. A goal is to find discrepancies between expected and real behaviour of the product.\nMagento provides functional tests in the &lt;magento2_root_dir&gt;/dev/tests/functional/ directory. In this guide, we call them out-of-the-box tests. You can use them to test the default Magento functionality. Also, you can create a test extending from the out-of-the-box test, or create your own functional tests.\n\nRelated topics\n\nOut-of-the-box test\n\nNew functional test: Theory\n\nNew functional test: Practice\n\n\n\n",
      "url": "/guides/v2.0/mtf/create_test.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-cron-html": {
      "title": "Troubleshoot cron",
      "content": "Following are symptoms of cron issues:\n\n\n  Your update or upgrade never runs; it stays in a pending state\n  An error message about the PHP setting $HTTP_RAW_POST_DATA displays even though it’s set properly\n  \n    The cron readiness check fails\n\n    Possible errors include non-writable paths and cron not set up. An example follows:\n\n    \n  \n  \n    The PHP readiness check doesn’t display the PHP version as the following figure shows.\n\n    \n  \n  \n    The following error displays in the Magento Admin:\n\n    \n\n    To see the error, you might need to click System Messages at the top of the window as follows:\n\n    \n  \n\n\n\n\n  Check your existing crontab\n  This section discusses how to see if cron is currently running and to verify whether it’s set up properly.\n\n  To verify whether or not your crontab is set up:\n\n  \n    Log in to your Magento server as, or switch to, the Magento file system owner.\n    \n      See if the following file exists:\n\n      ls -al &lt;your Magento install dir&gt;/var/.setup_cronjob_status\n      \n\n      If the file exists, cron has run successfully in the past. If the file does not exist, either you haven’t yet installed Magento or cron isn’t running. In either case, continue with the next step.\n    \n    \n      Get more detail about cron.\n\n      As a user with root privileges, enter the following command:\n\n      crontab -u &lt;Magento file system owner name&gt; -l\n      \n\n      For example, on CentOS\n\n      crontab -u magento_user -l\n      \n\n      If no crontab has been set up for the user, the following message displays:\n\n      no crontab for magento_user\n      \n\n      Your crontab tells you the following:\n\n      \n        What PHP binary you’re using (in some cases, you have more than one)\n        What Magento cron scripts you’re running (in particular, the paths to those scripts)\n        Where your cron logs are located\n      \n\n      See one of the following sections for a solution to your issue.\n    \n  \n\n  Solution: crontab not set up\n  To verify your cron jobs are set up properly, see Set up cron jobs.\n\n  Solution: cron running from incorrect PHP binary\n  If your cron job uses a PHP binary different from the web server plug-in, PHP settings errors might display. To resolve the issue, set identical PHP settings for both the PHP command line and the PHP web server plug-in.\n\n  For more information about PHP settings, see Required PHP settings.\n\n  Solution: cron running with errors\n  Try running each command manually because the command might display helpful error messages. See Set up cron jobs.\n\n  \n\tYou must run cron at least twice for the job to execute; the first time to queue jobs, the second time to execute the jobs.\n\n\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/cron.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-jquery-html": {
      "title": "Using jQuery UI styles",
      "content": "What's in this topic\n\nThis topic provides an overview of how jQuery UI styles are used in Magento out of the box, and how you can use them in a custom theme.\n\njQuery UI styles used on the storefront\n\nIn Magento out of the box certain storefront elements are implemented using jQuery UI widgets (like navigation menu, mini shopping cart and so on), with the default jQuery classes assigned. But Magento does not contain jQuery UI styles in the code base. Styles for the certain default jQuery UI classes are defined in Magento by default (in the default Magento storefront and Admin themes). For other jQuery UI classes styles are not defined.\n\nWe do not recommend downloading the jQuery UI styles as is, because they will override the default Magento themes definitions and break the default Magento design.\n\nTo use the jQuery styles, you need to define those which you need in your custom stylesheets in the &lt;your_custom_theme&gt;/web/css directory.\n\nRecommended reading\n\n\n  Define what styles you need to change\n  Quick start guide to working with styles for a new theme\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css-jquery.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-overview-html": {
      "title": "Cascading style sheets (CSS)",
      "content": "Overview\n\nMagento 2 incorporates LESS, a CSS pre-processor that simplifies the management of complex CSS files.\nTo define styles of a Magento store, you can use both - CSS and LESS stylesheets.\n\nMagento application provides a built-in LESS UI library, which you can optionally extend.\n\nTo customize storefront styles, you need to create a custom design theme. Then you can use one of the following approaches:\n\n\n  If your theme inherits from the Magento out-of-the-box Blank or Luma theme, you can override the default LESS files; for example to change the values of the variables used in the default files.\n  Create your own LESS files using the built-in LESS preprocessor.\n  Create your own CSS files, optionally having compiled them using third-party CSS preprocessor.\n\n\nThings to remember when working with styles\n\nMake sure that you set your Magento application to the developer or default mode.\n\nIf your style changes do not apply after refreshing the page, cleaning the static files cache might help. See the Clean static files cache topic for instructions how to do this.\n\nChange styles: walkthrough\n\nHere is a simple illustration of changing styles using the first approach: changing the color of the buttons of a certain class.\nIn the Blank theme, the buttons of the .action.primary class, so called primary buttons, are blue. The following image illustrates this:\n\n\n\n\n\nOrangeCo wants to change the color of the primary buttons to orange. To achieve this, they do the following:\n\n\n  Create a new Orange theme, which inherits from the Blank theme.\n  In the Orange theme directory add the overriding app/design/frontend/OrangeCo/orange/web/css/source/_theme.less file with the following code:\n\n\n//  Primary button\n@button-primary__color: @color-white;\n@button-primary__hover__color: @color-white;\n@button-primary__background: @color-orange-red1;\n@button-primary__hover__background: @color-orange-red4;\n@button-primary__border: 1px solid @color-orange-red2;\n@button-primary__hover__border: 1px solid @color-orange-red2;\n\n\nWhen OrangeCo applies their theme, the primary buttons will look like on the following image:\n\n\n\n\n\nWhat's in this chapter\nOther topics of this chapter describe the following:\n\n\n  Including CSS: how stylesheets are organized and included to be used for store pages in the Magento application.\n  CSS Preprocessing: how stylesheets are preprocessed and compiled\n  Magento UI Library: how to use the Magento styles library in your custom themes\n  Using Custom Fonts: how to add custom fonts\n  Customizing styles illustration: how to change a theme’s color scheme using Magento UI library.\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css-overview.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-practice-html": {
      "title": "Customizing styles illustration",
      "content": "What's in this topic\n\nThis topic features a step-by-step illustration of how to change a theme’s color scheme using Magento UI library.\n\nChanging theme color scheme\n\nOrangeCo created a custom theme that inherits from the Magento basic Blank theme.\nThe following image illustrates how store pages look when the Blank theme is applied:\n\n\n\n\n\nIn their Grey theme, OrangeCo wants to change the color scheme from white to grey.\n\nThe Grey theme directory is app/design/frontend/OrangeCo/grey.\n\nOrangeCo decided to use the Magento UI library, so to change the color scheme, they need to define new values for certain default LESS variables.\nTo do this, they added an overriding _theme.less file in the app/design/frontend/OrangeCo/grey/web/css/source directory, with the following content:\n\n//  Color nesting\n@page__background-color: @color-gray20;\n@sidebar__background-color: @color-gray40;\n@primary__color: @color-gray80;\n@border-color__base: @color-gray76;\n\n@link__color: @color-gray56;\n@link__hover__color: @color-gray60;\n\n//  Buttons\n@button__color: @color-gray20;\n@button__background: @color-gray80;\n@button__border: 1px solid @border-color__base;\n\n//  Primary button\n@button-primary__background: @color-orange-red1;\n@button-primary__border: 1px solid @color-orange-red2;\n@button-primary__color: @color-white;\n@button-primary__hover__background: darken(@color-orange-red1, 5%);\n@button-primary__hover__border: 1px solid @color-orange-red2;\n@button-primary__hover__color: @color-white;\n\n//  Navigation\n@navigation-level0-item__color: @color-gray80;\n@submenu-item__color: @color-gray80;\n\n@navigation__background: @color-gray40;\n@navigation-desktop-level0-item__color: @color-gray80;\n@navigation-desktop-level0-item__hover__color: @color-gray34;\n@navigation-desktop-level0-item__active__color: @navigation-desktop-level0-item__color;\n\n//  Tabs\n@tab-control__background-color: @page__background-color;\n\n//  Forms\n@form-element-input__background: @color-gray89;\n@form-element-input-placeholder__color: @color-gray60;\n\n//  Header icons\n@header-icons-color: @color-gray89;\n@header-icons-color-hover: @color-gray60;\n\n\n\nAfter the Grey theme is applied (and static files cache cleared), store pages will look like following:\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css-practice.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-preprocess-html": {
      "title": "CSS preprocessing",
      "content": "The topic describes how stylesheets are preprocessed and compiled to CSS in the Magento application. It provides the theoretical background a frontend developer needs to debug stylesheets effectively.\n\nTerms used\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\nRoot source files\n\n\nThe .less files from which the .css files included in layout are compiled.\n\nFor example, in one of the layout files of the Magento Blank theme, the following .css files are included:\n\n\n    &lt;head&gt;\n        &lt;css src=&quot;css/styles-m.css&quot; /&gt;\n        &lt;css src=&quot;css/styles-l.css&quot; media=&quot;screen and (min-width: 768px)&quot;/&gt;\n        &lt;css src=&quot;css/print.css&quot; media=&quot;print&quot; /&gt;\n    &lt;/head&gt;\n\n\nThe root source files for the Blank theme:\n\n\n&lt;Magento_Blank_theme_dir&gt;/web/css/styles-m.less\n&lt;Magento_Blank_theme_dir&gt;/web/css/styles-l.less\n&lt;Magento_Blank_theme_dir&gt;/web/css/print.less\n\n\n\n\n\n\nLESS compilation modes\n\nIn the Magento application, the following modes of compiling .less files to CSS are implemented:\n\n\nServer-side LESS compilation.\nThis is the default compilation mode, and is the only option in  production application mode.\nIn this case the compilation is performed on the server, using the LESS PHP library.\n\n\nClient-side LESS compilation. \nWhen your application is not in the production mode, you can set Magento to compile .less files in a browser, using the native less.js library\n\n\n\nTo set the compilation mode, do the following:\n\nIn the Magento Admin, navigate to Stores &gt; Configuration &gt; ADVANCED &gt; Developer.\nIn the Store View drop-down field, select Default Config.\nUnder Front-end development workflow, in the Workflow type field, select the compilation mode.\nTo save the settings, click Save Config.\n\nMake sure that the same compilation mode is set for each configuration scope. That is, check the Front-end development workflow option having switched the Store View drop-down field to the website scope first, and then to the store view. Change the option to match the default config if it is different.\n\n\nServer-side LESS compilation\n\nThe following paragraph describes how the LESS preprocessor works in server-side compilation mode.\nFor each CSS file included in the layouts, LESS preprocessor does the following:\n\n\nChecks if the requested .css file is found. If it is found, the preprocessor stops its execution. Otherwise, it proceeds to the next step.\nChanges the extension of the requested file to .less and tries to find the file using the Magento fallback mechanism. If the .less file is not found, LESS preprocessor stops its execution. Otherwise, it proceeds to the next step.\nReads .less file contents and resolves @magento_import and default LESS @import directives.\n\nResolves all paths in .less files to relative paths in the system using the Magento fallback mechanism. All files resolved by the LESS preprocessor are copied to var/view_preprocessed/less. Imported files are processed recursively.\n\nAll source files are passed to the PHP LESS compiler. The resulting compiled .css files are published to pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt;.\n\n\n\nStyles debugging in server-side compilation mode\n\nIn server-side LESS compilation mode, to have your changes applied, clear pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; by deleting the directory in the file system, and reload the store pages to trigger compilation and publication.\n\n\n  You might also need to clear the var/cache and var/view_preprocessed directories.\n\n\nAlternatively, to streamline the process of applying and debugging styles customizations, in server-side compilation mode, you can use the Grunt JavaScript task runner.\n\nSee the Compile LESS with Grunt topic for details on how to install, configure and use Grunt.\n\nClient-side LESS compilation\n\nThe client-side compilation flow is similar to server-side. The difference is in the set of files, published to pub/static on the last step. In the client-side mode, the following files are published to the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory:\n\n\nroot source (.less) files with resolved @magento_import directive \n symlinks to the root source file that do not contain @magento_import\nsymlinks to all other .less files imported recursively by the @magento_import and @import directives\n\n\n\nSymlink is not created, and a copy of the processed file is published to pub/static instead, if the source file differs from the processed one. One of the reasons of this difference might be the usage of the @import directive without file extension in the source file. See The @import directive usage for more details.\n\n\nStyles debugging in client-side compilation mode\n\nClient-side LESS compilation is implemented using the native less.js library. The default configuration is set in lib/web/less/config.less.js; you can change it as needed.\n\nYou can find the detailed information about the configuration and other options of the less.js used in a browser at http://lesscss.org/usage/#using-less-in-the-browser.\n\nIn client-side compilation mode, most of the stylesheet customizations display immediately after you reload a page in a browser.\n\nThere are certain types of changes, that require you to clear the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory and trigger the compilation and publication processes anew.\n\nThis is required in the following cases:\n\nIf you change the root source files that contain the @magento_import directive, or the @import directive where the imported file is specified without extension.\nIf you rename, remove, or add a .less file imported with a @magento_import or @import directive but you did not correct the directives accordingly.\n\n\n\nTo clear the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory, delete the directory in the file system, and reload the store pages in a browser to trigger compilation and publication.\n\nThe @import directive rules of usage\nYou can import local and remote .less and .css files in your .less Magento stylesheets by using the standard LESS @import directive.\nAccording to the @import syntax, specifying the file extension for the imported file is not mandatory. For example, the following notation is allowed:\n\n@import 'source/lib/_lib';\n@import (css) 'styles';\n\nBut in process of resolving the file path, Magento adds the .less extension for the imported files in all @import entrees. So in the processed files, the statements from the previous example will look like following:\n\n@import 'source/lib/_lib.less';\n@import (css) 'styles.less';\n\nAs a result, the processed files are different from the source files. So in the client-side compilation mode or when using grunt commands, Magento cannot use symlinks to the source files. Instead it uses the copies of processed files, and they are published to the pub/static directory. In case of importing CSS resources, this also results in not finding and not importing the required files.\n\nImporting remote CSS files\n\nIf you need to import a remote CSS file in your .less source, use url() notation. For example, to import a Google font, use the following notation:\n\n@import url('//fonts.googleapis.com/css?family=Titillium+Web:400,300,200,600.css');\n\nThis way Magento will skip the @import directive while resolving paths to the local resources.\n\nThe @magento_import directive\n\n@magento_import is a Magento-specific LESS directive that allows including multiple files by a name pattern. It is used to include files with the same name from the different locations, for example, different modules.\nThe standard @import directive includes a single file, which is found according to the static files fallback.\n\n@magento_import can be used in the root source files of a theme only.\n\n@magento_import rules of usage\n\nTo include a .less file using the @magento_import directive:\n\n\nTo avoid any conflicts with the original LESS syntax, @magento_import must be commented out with two slashes. Otherwise, the LESS preprocessor ignores it.\nExample:\n\n//  Comment in a LESS document\n\n//  Standard LESS import directive\n//  ---------------------------------------------\n\n@import 'source/_reset';\n@import '_styles';\n\n//\n//  Custom Magento LESS import directives\n//  ---------------------------------------------\n\n//@magento_import 'source/_module.less'; // Theme modules\n//@magento_import 'source/_widgets.less'; // Theme widgets\n//@magento_import 'source/_extend.less'; // Extend for minor customization\n\n\n@magento_import must contain the file path. The path is specified relatively to the file, where the directive is called and put in either single ('') or double quotes (\"\"). \n\nThe best practice is to specify the file extension in the path, though technically you can omit this.\n\n\n\n\n@magento_import processing\n\nIn the scope of static resources preprocessing, the built-in LESS preprocessor does the following:\n\n\nSearches for all @magento_import directives.\nReplaces the original @magento_import directives with the standard @import directives. The latter specify the paths to the particular files that correspond to the pattern specified in @magento_import.\n\nExample of how @magento_import is used and processed in &lt;Magento_Blank_theme_dir&gt;/web/css/styles-l.less:\n\n\n   \n      \n         Before\n         After\n      \n      \n          In &lt;Magento_Blank_theme_dir&gt;/web/css/styles-l.less there's a following directive:\n             ..\n//@magento_import 'source/_widgets.less'; // Theme widgets\n..\n\n         \n          In the processed file, this results in the following:\n            \n@import '../Magento_Catalog/css/source/_widgets.less';\n@import '../Magento_Cms/css/source/_widgets.less';\n@import '../Magento_Reports/css/source/_widgets.less';\n@import '../Magento_Sales/css/source/_widgets.less';\n // Theme widgets\n\n         \n      \n   \n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css-preprocess.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-themes-html": {
      "title": "Include CSS",
      "content": "What's in this topic\n\nIn the Magento application, CSS files are included in layout files. \n\nTechnically there is an option to include them in template files, but we strongly recommend avoiding this.\n\n\n\nThe CSS class names can be assigned in both templates and layouts.\n\n\nThis topic describes how stylesheets are located by default in the Magento application file system, and the recommended way to include CSS files in layouts.\n\nHow Magento stylesheet files are organized\n\nConventionally, CSS and LESS files are stored only in themes. Module directories do not contain any default styles.\n\nIn a theme directory, stylesheets are stored in the following locations:\n\n\n\nDirectory, relative to &lt;theme_dir&gt;\nDescription\n\n\n /&lt;Namespace&gt;_&lt;Module&gt;/web/css\n\n Module-specific styles\n\n\n\n /web/css\n   \n    \nContains the following:\n\n\nprint.less: used to generate styles for the printed version of store pages.\n\n_styles.less - a composite file, which includes all LESS files used in the theme. The underscore sign (\"_\") in a file name conventionally means that a file is not used independently, but is included in other files.\n\nstyles-m.less: used to generate mobile-specific styles, includes _styles.less\n\nstyles-l.less: used to generate desktop-specific styles, includes _styles.less.\n\n/source: this subdirectory contains LESS configuration files that invoke mixins from the Magento UI library\n\n\n/source/_theme.less: overrides the default Magento UI library variables values.\n\n\n  \n   \n\n\n\n\nInclude CSS\n\nIn the Magento application, the recommended way to include stylesheets is to specify them in layout files. \n\nUsually, the stylesheets you include should be available for all store pages. To achieve this, include your CSS in default_head_blocks.xml of the Magento_Theme module, which defines the default &lt;head&gt; page section for all Magento pages. \nThe recommended way to do this is adding an extending default_head_blocks.xml in your theme, and including the required stylesheets in this file. \n\nYour custom default_head_blocks.xml should be located as follows:\n\n&lt;theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml.\n\nTo include a CSS file, add the &lt;css src=&quot;&lt;path&gt;/&lt;file&gt;&quot; media=&quot;print|&lt;option&gt;&quot;/&gt; block in &lt;head&gt; section in a layout file. &lt;path&gt; is specified relative to the theme web directory (&lt;theme_dir&gt;/web)\n\nFor example, the following illustrates how stylesheets are included in the default Blank theme: \n\n&lt;Magento_Blank_theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml\n\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;head&gt;\n        &lt;css src=\"css/styles-m.css\" /&gt;\n        &lt;css src=\"css/styles-l.css\" media=\"screen and (min-width: 768px)\"/&gt;\n        &lt;css src=\"css/print.css\" media=\"print\" /&gt;\n    &lt;/head&gt;\n&lt;/page&gt;\n\n\n\n\n\n  If the system does not find the included CSS files, it searches for the same file names with a .less extension. This is part of the built-in preprocessing mechanism. You can find more information about it in the CSS Preprocessing topic.\n \n\n\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css-themes.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-css-debug-html": {
      "title": "Compile LESS with Grunt",
      "content": "What's in this topic\n\n\nThe topic describes how to install, configure and use Grunt JavaScript task runner for compiling .less files in Magento 2. \n\nPrerequisites\nMake sure that you set your Magento application to the developer or default mode.\n\nInstalling and configuring Grunt\n\nMagento has built-in Grunt tasks configured, but there are still several prerequisite steps you need to take to be able to use it:\n\n\n\nInstall node.js to any location on your machine.\n\nInstall Grunt CLI tool globally. To do this, run the following command in a command prompt:\n\nnpm install -g grunt-cli\n\n\n\nInstall (or refresh) the node.js project dependency, including Grunt, for your Magento instance. To do this, run the following commands in a command prompt:\n\n\ncd &lt;your_Magento_instance_directory&gt;\nnpm install\nnpm update\n\n\n\n\nAdd your theme to Grunt configuration. To do this, in the dev/tools/grunt/configs/themes.js file, add your theme to module.exports like following:\n\nmodule.exports = {\n    ...\n    &lt;theme&gt;: {\n        area: 'frontend',\n        name: '&lt;Vendor&gt;/&lt;theme&gt;',\n        locale: '&lt;language&gt;',\n        files: [\n            '&lt;path_to_file1&gt;', //path to root source file\n            '&lt;path_to_file2&gt;'\n        ],\n        dsl: 'less'\n    ...\n    },\n\n\nWhere the following notation is used:\n\n\n&lt;theme&gt;: your theme code, conventionally should correspond to the theme directory name.\n\n\n&lt;language&gt;: specified in the 'code_subtag' format, for example en_US. Only one locale can be specified here. To debug the theme with another locale, create one more theme declaration, having specified another value for language\n\n\n&lt;path_to_file&gt;: path to the root source file, relative to the app/design/frontend/&lt;Vendor&gt;/&lt;theme/&gt;web directory. You need to specify all root source files of the theme. If your theme inherits from a certain theme, and does not contain its own root source files, specify the root source files of the parent theme.\n\n\n\n\n\n\n(Optional) If you want to use Grunt for \"watching\" changes automatically, without reloading pages in a browser each time, install the LiveReload extension in your browser.\n\n\n\n\nGrunt commands\n\nThe following table describes the grunt commands you can use performing different customization tasks. Run all commands from your Magento installation directory.\n\n\n\n\nGrunt task\n\n\nAction\n\n\n\n\n\n\ngrunt clean:&lt;theme&gt;\n\n\nFor example:\n\ngrunt clean:blank\n\n\n\nRemoves the theme related static files in the pub/static and var directories.\n\n\n\n\n\n\ngrunt exec:&lt;theme&gt;\n\n\n\n\nRepublishes symlinks to the source files to the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory.\n\n\n\n\n\n\n\ngrunt less:&lt;theme&gt;\n\n\n\nCompiles .css files using the symlinks published in the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory\n\n\n\n\n\n\n\ngrunt watch\n\n\n\nTracks the changes in the source files, recompiles .css files, and reloads the page in the browser pages\n(you need to have LiveReload installed for you browser)\n\n\n\n\nUse cases of tracking changes using Grunt\n\nThe following shows which Grunt tasks to use for debugging:\n\n\nAfter you switch the compilation mode from client-side to server-side, run the exec command.\n\nAfter you customize the content of any .less file, except the root source files, run the less task and reload the page. \n\nAfter you customize the root source files or move the files included to the root files, run the exec command and reload the page.\n\n\n\n\nIf you have LiveReload installed, run the grunt watch command, and the flow is even simpler:\n\n\nAfter you customize the content of any .less file, changes are applied and the page reloads automatically. No additional changes are required.\n\nAfter you customize the root source files or move the files included to the root files, run the clean and exec commands, and the browser page reloads automatically.\n\n\n\nCSS source maps\n\nWhen using Grunt for styles preprocessing, you can enable the CSS source maps displaying in your browser. It will make the theme styles debugging easier.\n\nFor each theme, Magento compliles all theme .less files into two CSS files: styles-m.css and styles-l.css. So when you debug a theme, you browser only sees styles-m.css and it might be difficult to define which exactly .css or .less file requires corrections. For example:\n\n\n\nCSS source maps solve this issue. They help to find the .less file, where the style is specified. For example:\n\n\n\nCSS source maps are generated automatically when you compile CSS for your theme using the grunt less: &lt;theme&gt; command. To use them, you need to enable source maps displaying in your browser.\n\nThe path to the CSS source maps configuration differs, depending on the browser.\n\nIn Google Chrome, to enable source maps generation, go to Inspect &gt; Settings &gt; Preferences &gt; Enable CSS source maps.\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/css_debug.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-guide-css-quick-guide-approach-html": {
      "title": "Simple ways to customize a theme's styles",
      "content": "What's in this topic\nLet’s say you created a new theme inheriting from Magento Blank or Luma, and chose the LESS compilation mode. What’s next? Where to add the style changes? This topic gives quick answers.\n\nSimplest way to extend parent styles\n\nTo extend the parent theme’s styles in your theme:\n\nIn your theme directory, create a web/css/source sub-directory. \nCreate a _extend.less file there. The path to it looks like following: \n\n\n&lt;theme_dir&gt;/\n│&nbsp;&nbsp;├──&nbsp;web/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;css/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;source/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├──_extend.less\n...\n\n\nAdd your LESS code in this file.\n\n\nExtending a theme using _extend.less is the simplest option when you are happy with everything the parent theme has, but want to add more styles.\n\nSimplest way to override parent styles\n\nTo override parent styles (that is, override default Magento UI library variables):\n\nIn your theme directory, create a web/css/source sub-directory. \nCreate a _theme.less file here. The path to it then looks like following: \n\n\n&lt;theme_dir&gt;/\n│&nbsp;&nbsp;├──&nbsp;web/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;css/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;source/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├──_theme.less\n...\n\n\n\nIt is important to remember that your _theme.less overrides the parent _theme.less. \n\nCopy all variables you need from the parent _theme.less, including those which will not be changed. For example if your theme inherits from Blank, the _theme.less you should copy from is located at &lt;Magento_Blank_theme_dir&gt;/web/css/source/_theme.less\nMake the necessary changes.\n\n\nThe drawback of this approach is that you need to monitor and manually update your files whenever the parent’s _theme.less is updated.\n\nAdding structured changes\n\nTo make your changes easier to read and support, structure them by adding a separate overriding or extending .less files for each Magento UI library component you change. Let’s use the button component implemented in _button.less as an illustration.\n\nExtend component's styles\n\nIn your theme directory, create a web/css/source sub-directory. \nAdd _buttons_extend.less and _extend.less here. The path to the files looks like following: \n\n\n&lt;theme_dir&gt;\n│&nbsp;&nbsp;├──&nbsp;web/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;css/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;source/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├──_buttons_extend.less\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├──_extend.less\n...\n\n\nIn _buttons_extend.less add your styles for the button component.\n\nIn _extend.less register the _buttons_extend.less by adding the following code: \n\n@import '_buttons_extend.less'; \n\n\n\n\nOverride component's styles\nTo override the parent theme’s styles for buttons in your theme:\n\nIn your theme directory, create a web/css/source sub-directory. \nCreate a _buttons.less file here. The path to it looks like following: \n\n\n&lt;theme_dir&gt;/\n│&nbsp;&nbsp;├──&nbsp;web/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;css/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;source/\n│&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├──_buttons.less\n...\n\nThis file overrides the _buttons.less of the parent theme.\n\n\nAdd your styles for the button component. If the file is left blank, then no styles are applied for the component.\n\n\nRecommended reading\n\nCompile LESS with Grunt\nCSS preprocessing\nMagento UI library\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-guide/css_quick_guide_approach.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-guide-css-quick-guide-mode-html": {
      "title": "Simple style changes with client-side LESS compilation vs. server-side",
      "content": " What's in this topic \n\nAfter you create a theme, before starting to change the styles, is deciding, which LESS compilation mode you will use. There are two modes available in Magento: server-side compilation mode and client-side (recommended for theme development).\nThis topic demonstrates on a practical example how the choice of the mode influences the styles development.\n\nThe first step, creating and applying a theme is done before the compilation mode is chosen, so it is described only once, but is required whatever compilation mode you will further use.\n\nIn the examples in this topic the simplest approach for customizing theme styles is used: changes are done in the _extend.less of the new theme.\n\nIn our examples we will change the color and font of the primary buttons. The default view of the primary buttons can be illustrated by the Create an Account button view on the Customer login page:\n\n\n\nFirst step: Create and apply a theme\n\n\n  Create a new theme as described in the Create a theme topic. In your theme.xml specify Magento Luma or Magento Blank as a parent theme.\n  Apply your theme in the Magento Admin.\n\n\nServer-side is the default mode for LESS compilation, so if you do not change this, your Magento instance is using server-side compilation mode.\n\nMaking simple style changes in server-side compilation mode\n\nThe following is an illustration of how the process of making simple changes looks like with the server-side LESS compilation mode:\n\nCreate and apply a theme.\nIn your theme directory, add web/css/source/_extend.less.\nChange the color of the buttons by adding the following code in _extend.less:\n\n\n\n\n    Clean static files cache&lt;/li&gt;\n    Refresh the page, and view the changes applied. For example:\n\n\n\n    Change the font of the buttons by adding the following code in _extend.less:\n\n\n\n    Delete all files in the following directories:\n\npub/static/frontend/&lt;Your_Vendor&gt;/&lt;your_theme&gt;\nvar/view_preprocessed/less \n\n\n    Refresh the page, and view the changes applied.\n\n\n\n    &lt;/ol&gt;\n\n    If your Magento instance uses the server-side compilation mode, to make your changes apply, you need to clean the previously generated static view files. Several ways to do this are described in the Clean static files cache topic. You can automate this process by additionally installing Grunt, and using the built-in Grunt commands to watch the changes and clean the directories. The flow of making changes using Grunt is described in the following section.\n\n    Making simple style changes in server-side compilation mode using Grunt\n\n    \nCreate and apply a theme. \nIn your theme directory, add web/css/source/_extend.less.\nInstall Grunt and register your theme as described in Installing and configuring Grunt.\nFrom your Magento installation directory, run the following commands:\n\ngrunt exec:&lt;your_theme&gt;\ngrunt less:&lt;your_theme&gt;\ngrunt watch\n\nWhere &lt;your_theme&gt; is the code of your theme. Conventionally it should coincide with the theme directory name.\n\nChange the color of the buttons by adding the following code in _extend.less:\n\n\nRefresh the page and view your changes applied:\n\n\nChange the font of the buttons by adding the following code in _extend.less:\n\n\nRefresh the page and view your changes applied:\n\n\n\n\n    Making simple style changes in client-side compilation mode\n\n    \nCreate and apply a theme.\nIn your theme directory, add web/css/source/_extend.less.\nIn the Magento Admin, change the LESS compilation mode to client-side under STORES &gt; Configuration &gt; ADVANCED &gt; Developer &gt; Front-end development workflow &gt; Workflow type. For detailed description see the CSS preprocessing topic.\n\n        Clean static files cache\n      \nChange the color of the buttons by adding the following code in _extend.less:\n\n\n\nRefresh the page and view your changes applied:\n\n\n\nChange the font of the buttons by adding the following code in _extend.less:\n\n\n\nRefresh the page and view your changes applied:\n\n\n\n\n\n    If your Magento instance uses the client-side compilation mode, simple changes are applied at once. In case of more sophisticated changes, you might need to manually clean the theme sub-directory in the pub/static/frontend directory. There are more details about these types of changes and about the client-side mode implementation in the Styles debugging topic.\n\n    Recommended reading\n    \nStyles debugging\nCSS preprocessing\n\n  \n",
      "url": "/guides/v2.0/frontend-dev-guide/css-guide/css_quick_guide_mode.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-guide-css-quick-guide-overview-html": {
      "title": "Quick start guide to working with styles for a new theme",
      "content": "This chapter combines the topics aiming to help you to quickly start working with styles of your custom theme:\n\n\n  Simple ways to customize a theme’s styles\n  Simple style changes with client-side LESS compilation vs. server-side\n\n\nHigh-level steps to create a theme and change styles\n\n\n  Set your Magento application to the developer mode.\n  In the file system, add a new theme inheriting from Magento Blank or Luma.\n  Apply your theme.\n  Decide which CSS compilation mode you will use. Compilation modes are described in the following topics:\n    \n      Detailed description: Styles debugging\n      Practical illustration: Simple style changes with client-side LESS compilation vs. server-side\n    \n  \n  Customize styles. To learn how, check out the following sources:\n    \n      CSS chapter of this book\n      Simple ways to customize a theme’s styles\n    \n  \n\n\nWhy do you need to create a custom theme?\n\nMagento provides two themes out of the box: Blank and Luma. If Magento is installed with sample data, the theme applied after installation is Luma. If no sample data is installed, the Blank theme is installed by default.\n\n\n\nLuma inherits from Blank, which contains all the basic functionality and styling required for a theme.\n\nYou can use either Luma or Blank for your storeview, if there is literally nothing you want to change in their design.\n\nBut if there is something you want to improve, the only recommended way is creating a new theme. It can inherit from Blank or Luma so you can preserve all you need, and change or add whatever is required.\n\nMaking changes in the Magento out-of-the-box themes is a bad idea, because can result in your changes being overwritten during upgrade.\n\nRelated topics\n\n   CSS in Magento themes\n  Simple ways to customize a theme’s styles\n  Simple style changes with client-side LESS compilation vs. server-side\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-guide/css_quick_guide_overview.html"
    }
    ,
  
    "guides-v2-0-config-guide-cron-custom-cron-ref-html": {
      "title": "Custom cron job and cron group reference",
      "content": "This topic helps you set up crontabs and optionally cron groups for custom modules. If your custom module needs to schedule tasks periodically, you must set up a crontab for that module. A crontab is a cron job’s configuration.\n\nYou can optionally set up a custom group, which among other things enables you to run cron jobs defined in that group independently of other cron jobs.\n\nFor a step-by-step tutorial, see Configure custom cron jobs and cron groups (tutorial).\n\nOverview of cron\n\n\n\n  Several Magento features require at least one cron job, which schedules activities to occur in the future. A partial list of these activities follows:\n\n  \n    Catalog price rules\n    Newsletters\n    Generating Google sitemaps\n    Customer Alerts/Notifications (product price change, product back in stock)\n    Reindexing\n    Private sales (Magento Commerce only)\n    Automatic updating of currency rates\n    All Magento e-mails (including order confirmation and transactional)\n  \n\n  We recommend you run cron as the Magento file system owner. Do not run cron as root; we also recommend against running cron as the web server user.\n\n  \n    You can no longer run dev/tools/cron.sh because the script has been removed.\n\n\n  \n    Magento depends on proper cron job configuration for many important system functions, including indexing. Failure to set it up properly means Magento won’t function as expected.\n  \n\n  UNIX systems schedule tasks to be performed by particular users using a crontab, which is a file that contains instructions to the cron daemon that tell the daemon in effect to “run this command at this time on this date”. Each user has its own crontab, and commands in any given crontab are executed as the user who owns it.\n\n  Configure cron groups\n  This section discusses how to optionally create a cron group for a custom module. If you don’t need to do this, continue with the next section.\n\n  A cron group is a logical group that enables you to easily run cron for more than one process at a time. Most Magento modules use the default cron group; some modules use the index group.\n\n  If you’re implementing cron for a custom module, it’s your choice of whether or not to use the default group or a different group.\n\n  To configure a cron group for your module, create a crontab.xml file in your module directory:\n&lt;your component base dir&gt;/&lt;vendorname&gt;/module-&lt;name&gt;/etc/crontab.xml\n\n  For one group, the file should have the following contents:\n\n  &lt;config&gt;\n    &lt;group id=\"&lt;group_name&gt;\"&gt;\n        &lt;job name=\"&lt;job_name&gt;\" instance=\"&lt;classpath&gt;\" method=\"&lt;method&gt;\"&gt;\n            &lt;schedule&gt;&lt;time&gt;&lt;/schedule&gt;\n        &lt;/job&gt;\n    &lt;/group&gt;\n&lt;/config&gt;\n\n  where:\n\n  \n    \n      \n        Value\n        Description\n      \n    \n    \n      \n        group_name\n        Name of the cron group. The group name doesn’t have to be unique. You can run cron for one group at a time.\n      \n      \n        job_name\n        Unique ID for this cron job.\n      \n      \n        classpath\n        Class to be instantiated (classpath).\n      \n      \n        method\n        Method in classpath to call.\n      \n      \n        time\n        Schedule in cron format. Omit this parameter if the schedule is defined in the Magento database or other storage.\n      \n    \n  \n\n  The resulting crontab.xml with two groups may look like this:\n\n  &lt;config&gt;\n    &lt;group id=\"default\"&gt;\n        &lt;job name=\"&lt;job_1_name&gt;\" instance=\"&lt;classpath&gt;\" method=\"&lt;method_name&gt;\"&gt;\n            &lt;schedule&gt;* * * * *&lt;/schedule&gt;\n        &lt;/job&gt;\n        &lt;job name=\"&lt;job_2_name&gt;\" instance=\"&lt;classpath&gt;\" method=\"&lt;method_name&gt;\"&gt;\n            &lt;schedule&gt;* * * * *&lt;/schedule&gt;\n        &lt;/job&gt;\n    &lt;/group&gt;\n    &lt;group id=\"index\"&gt;\n        &lt;job name=\"&lt;job_3_name&gt;\" instance=\"&lt;classpath&gt;\" method=\"&lt;method_name&gt;\"&gt;\n            &lt;schedule&gt;* * * * *&lt;/schedule&gt;\n        &lt;/job&gt;\n        &lt;job name=\"&lt;job_4_name&gt;\" instance=\"&lt;classpath&gt;\" method=\"&lt;method_name&gt;\"&gt;\n            &lt;schedule&gt;* * * * *&lt;/schedule&gt;\n        &lt;/job&gt;\n    &lt;/group&gt;\n&lt;/config&gt;\n\n  As an example, see Magento_Customer crontab.xml.\n\n  Specifying Cron group options\n\n  You may declare a new group and specify its configuration options (all of which run in store view scope) via the cron_groups.xml file, located in:\n\n  &lt;your component base dir&gt;/&lt;vendorname&gt;/module-&lt;name&gt;/etc/cron_groups.xml\n\n  Below is an example of the cron_groups.xml file:\n\n  &lt;config&gt;\n    &lt;group id=\"&lt;group_name&gt;\"&gt;\n        &lt;schedule_generate_every&gt;1&lt;/schedule_generate_every&gt;\n        &lt;schedule_ahead_for&gt;4&lt;/schedule_ahead_for&gt;\n        &lt;schedule_lifetime&gt;2&lt;/schedule_lifetime&gt;\n        &lt;history_cleanup_every&gt;10&lt;/history_cleanup_every&gt;\n        &lt;history_success_lifetime&gt;60&lt;/history_success_lifetime&gt;\n        &lt;history_failure_lifetime&gt;600&lt;/history_failure_lifetime&gt;\n        &lt;use_separate_process&gt;1&lt;/use_separate_process&gt;\n    &lt;/group&gt;\n&lt;/config&gt;\n\n  where:\n\n  \n    \n      \n        Option\n        Description\n      \n    \n    \n      \n        schedule_generate_every\n        Frequency (in minutes) that schedules are written to the cron_schedule table.\n      \n      \n        schedule_ahead_for\n        Time (in minutes) in advance that schedules are written to the cron_schedule table.\n      \n      \n        schedule_lifetime\n        Window of time (in minutes) that cron job must start or will be considered missed (“too late” to run).\n      \n      \n        history_cleanup_every\n        Time (in minutes) that cron history is kept in the database.\n      \n      \n        history_success_lifetime\n        Time (in minutes) that the record of successfully completed cron jobs are kept in the database.\n      \n      \n        history_failure_lifetime\n        Time (in minutes) that the record of failed cron jobs are kept in the database.\n      \n      \n        use_separate_process\n        This feature is available only for Magento 2.1 and later.\n      \n    \n  \n\n  Related topic\n  Tutorial—configure custom cron jobs and cron groups\n\n\n",
      "url": "/guides/v2.0/config-guide/cron/custom-cron-ref.html"
    }
    ,
  
    "guides-v2-0-config-guide-cron-custom-cron-tut-html": {
      "title": "Configure a custom cron job and cron group (tutorial)",
      "content": "This tutorial shows you step-by-step how to create a custom cron job and optionally a cron group in a sample module. You can use a module you already have or you can use a sample module from our magento2-samples repository.\n\nRunning the cron job results in a row being added to the cron_schedule table with the name of the cron job, custom_cron.\n\nWe also show you how to optionally create a cron group, which you can use to run custom cron jobs with settings other than Magento application defaults.\n\nIn this tutorial, we assume the following:\n\n\n  The Magento application is installed in /var/www/html/magento2\n  Your Magento database user name and password are both magento\n  You perform all actions as the Magento file system owner\n\n\nStep 1: Get a sample module\nTo set up a custom cron job, you need a sample module. We suggest the magento-module-minimal module.\n\nIf you already have a sample module, you can use it; skip this step and the next step and continue with Step 3: Create a class to run cron.\n\nTo get a sample module: \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to a directory that is not in your Magento application root (for example, your home directory).\n  \n    Clone the magento2-samples repository.\n\n    For example,\n\n    cd ~\ngit clone git@github.com:magento/magento2-samples.git\n    \n\n    If the command fails with the error Permission denied (publickey)., you must add your SSH public key to github.com.\n  \n  \n    Make a directory to which to copy the sample code:\n\n    mkdir -p /var/www/html/magento2/app/code/Magento/SampleMinimal\n    \n  \n  \n    Copy the sample module code:\n\n    cp -r ~/magento2-samples/sample-module-minimal/* /var/www/html/magento2/app/code/Magento/SampleMinimal\n    \n  \n  \n    Verify the files copied properly:\n\n    ls -al /var/www/html/magento2/app/code/Magento/SampleMinimal\n    \n\n    You should see the following result:\n\n    drwxrwsr-x.   4 magento_user apache  4096 Oct 30 13:19 .\ndrwxrwsr-x. 121 magento_user apache  4096 Oct 30 13:19 ..\n-rw-rw-r--.   1 magento_user apache   372 Oct 30 13:19 composer.json\ndrwxrwsr-x.   2 magento_user apache  4096 Oct 30 13:19 etc\n-rw-rw-r--.   1 magento_user apache 10376 Oct 30 13:19 LICENSE_AFL.txt\n-rw-rw-r--.   1 magento_user apache 10364 Oct 30 13:19 LICENSE.txt\n-rw-rw-r--.   1 magento_user apache  1157 Oct 30 13:19 README.md\n-rw-rw-r--.   1 magento_user apache   270 Oct 30 13:19 registration.php\ndrwxrwsr-x.   3 magento_user apache  4096 Oct 30 13:19 Test\n    \n  \n  \n    Update the Magento database and schema:\n\n    php /var/www/html/magento2/bin/magento setup:upgrade\n    \n  \n\n\n\nStep 2: Verify the sample module\nBefore you continue, make sure the sample module is registered and enabled.\n\nTo verify the sample module: \n  Log in to the Magento Admin as an administrator.\n  Click Stores &gt; Configuration &gt; ADVANCED &gt; Advanced.\n  \n    In the right pane, under Disable Modules Output, look for Magento_SampleMinimal as the following figure shows.\n\n    \n  \n\n\nIf the module doesn’t display, review step 1 carefully. Make sure your code is in the correct directory. Spelling and case are important; if anything is different, the module won’t load. Also, don’t forget to run magento setup:upgrade.\n\n\nStep 3: Create a class to run cron\nThis step shows a simple class to create a cron job. The class only writes a row to the cron_schedule table that confirms it’s set up successfully.\n\nTo create a class: \n  \n    Create a directory for the class and change to that directory:\n\n    mkdir /var/www/html/magento2/app/code/Magento/SampleMinimal/Cron &amp;&amp; cd /var/www/html/magento2/app/code/Magento/SampleMinimal/Cron\n    \n  \n  \n    Created a file named Test.php in that directory with the following contents:\n  \n\n\n&lt;?php\nnamespace Magento\\SampleMinimal\\Cron;\nuse \\Psr\\Log\\LoggerInterface;\n\nclass Test {\n    protected $logger;\n\n    public function __construct(LoggerInterface $logger) {\n        $this-&gt;logger = $logger;\n    }\n\n/**\n   * Write to system.log\n   *\n   * @return void\n   */\n\n    public function execute() {\n        $this-&gt;logger-&gt;info('Cron Works');\n    }\n\n}\n\n\n\n\nStep 4: Create crontab.xml\ncrontab.xml sets a schedule to run your custom cron code.\n\nTo create crontab.xml: Create crontab.xml as follows in the /var/www/html/magento2/app/code/Magento/SampleMinimal/etc directory:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/crontab.xsd\"&gt;\n    &lt;group id=\"default\"&gt;\n        &lt;job name=\"custom_cronjob\" instance=\"Magento\\SampleMinimal\\Cron\\Test\" method=\"execute\"&gt;\n            &lt;schedule&gt;* * * * *&lt;/schedule&gt;\n        &lt;/job&gt;\n    &lt;/group&gt;\n&lt;/config&gt;\n\nThe preceding crontab.xml runs the Magento/SampleMinimal/Cron/Test.php class once per minute, resulting in a row being added to the cron_schedule table.\n\n\nStep 5: Verify the cron job\nThis step shows how to verify the custom cron job successfully using a SQL query on the cron_schedule database table.\n\nTo verify cron: \n  \n    Run Magento cron jobs:\n\n    php /var/www/html/magento2/bin/magento cron:run\n    \n  \n  \n    Enter the magento cron:run command two or three times.\n\n    The first time you enter the command, it queues jobs; subsequently, the cron jobs are run. You must enter the command at least twice.\n  \n  \n    Run the SQL query SELECT * from cron_schedule WHERE job_code like '%custom%' as follows:\n\n    \n      Enter mysql -u magento -p\n      At the mysql&gt; prompt, enter use magento;\n      Enter SELECT * from cron_schedule WHERE job_code like '%custom%';\n    \n\n    The result should be similar to the following:\n\n    +-------------+----------------+---------+----------+---------------------+---------------------+---------------------+---------------------+\n| schedule_id | job_code       | status  | messages | created_at          | scheduled_at        | executed_at         | finished_at         |\n+-------------+----------------+---------+----------+---------------------+---------------------+---------------------+---------------------+\n|        3670 | custom_cronjob | success | NULL     | 2016-11-02 09:38:03 | 2016-11-02 09:38:00 | 2016-11-02 09:39:03 | 2016-11-02 09:39:03 |\n|        3715 | custom_cronjob | success | NULL     | 2016-11-02 09:53:03 | 2016-11-02 09:53:00 | 2016-11-02 09:54:04 | 2016-11-02 09:54:04 |\n|        3758 | custom_cronjob | success | NULL     | 2016-11-02 10:09:03 | 2016-11-02 10:09:00 | 2016-11-02 10:10:03 | 2016-11-02 10:10:03 |\n|        3797 | custom_cronjob | success | NULL     | 2016-11-02 10:24:03 | 2016-11-02 10:24:00 | 2016-11-02 10:25:03 | 2016-11-02 10:25:03 |\n+-------------+----------------+---------+----------+---------------------+---------------------+---------------------+---------------------+\n    \n  \n  \n    (Optional) Verify messages are written to Magento’s system log:\n\n    cat /var/www/html/magento2/var/log/system.log\n    \n\n    You should see one or more entries like the following:\n\n    [2016-11-02 22:17:03] main.INFO: Cron Works [] []\n    \n\n    These messages come from the execute method in Test.php:\n\n    public function execute() {\n   $this-&gt;logger-&gt;info('Cron Works');\n    \n  \n\n\nIf the SQL command and system log contain no entries, run the magento cron:run command a few more times and wait. It can take some time for the database to update.\n\n\nStep 6 (optional): Set up a custom cron group\nThis step shows how to optionally set up a custom cron group. You should set up a custom cron group you want your custom cron job to run on a different schedule than other cron jobs (typically, once per minute) or if you want several custom cron jobs to run with different settings.\n\nTo set up a custom cron group: \n  Open crontab.xml in a text editor.\n  Change &lt;group id=\"default\"&gt; to &lt;group id=\"custom_crongroup\"&gt;\n  Exit the text editor.\n  Create /var/www/html/magento2/app/code/Magento/SampleMinimal/etc/cron_groups.xml with the following contents:\n\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/cron_groups.xsd\"&gt;\n    &lt;group id=\"custom_crongroup\"&gt;\n        &lt;schedule_generate_every&gt;1&lt;/schedule_generate_every&gt;\n        &lt;schedule_ahead_for&gt;4&lt;/schedule_ahead_for&gt;\n        &lt;schedule_lifetime&gt;2&lt;/schedule_lifetime&gt;\n        &lt;history_cleanup_every&gt;10&lt;/history_cleanup_every&gt;\n        &lt;history_success_lifetime&gt;60&lt;/history_success_lifetime&gt;\n        &lt;history_failure_lifetime&gt;600&lt;/history_failure_lifetime&gt;\n    &lt;/group&gt;\n&lt;/config&gt;\n\nFor a description of what the options mean, see Configure custom cron jobs and cron groups reference.\n\n\nStep 7 (optional): Verify your custom cron group\nThis step shows how to verify your custom cron group using the Magento Admin.\n\nTo verify your custom cron group: \n  \n    Run Magento cron jobs for your custom group:\n\n    php /var/www/html/magento2/bin/magento cron:run --group=\"custom_crongroup\"\n    \n\n    Run the command at least twice.\n  \n  \n    Clean the Magento cache:\n\n    php /var/www/html/magento2/bin/magento cache:clean\n    \n  \n  Log in to the Magento Admin as an administrator.\n  Click Stores &gt; Configuration &gt; Advanced &gt; System.\n  \n    In the right pane, expand Cron.\n\n    Your cron group displays as follows:\n\n    \n  \n\n\n\n",
      "url": "/guides/v2.0/config-guide/cron/custom-cron-tut.html"
    }
    ,
  
    "guides-v2-0-config-guide-cron-custom-cron-html": {
      "title": "Set up a custom cron job and cron group",
      "content": "These topics discuss how to set up a custom cron job and optionally a custom cron group. If your Magento extension requires scheduled tasks to run periodically, you can use these topics to set up a cron job (the scheduled task) and optionally a cron group (which runs custom tasks at the same time).\n\nIf you use a Magento-provided cron group, you don’t have to define a custom cron group; however, if you want your cron jobs to run at a different schedule or you want them all to run together, you should define a cron group\n\nThe Magento application provides the following cron groups:\n\n\n  default, which contains most cron jobs\n  index, which refreshes indexers\n  These topics are available in Magento Commerce only\n    \n      staging, which runs Staging-related tasks\n      catalog_event, which runs tasks for target and shopping cart rules\n    \n  \n\n\nSee the following topics for details:\n\n\n  Custom cron job and cron group reference\n  Configure a custom cron job and cron group (tutorial)\n\n",
      "url": "/guides/v2.0/config-guide/cron/custom-cron.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-custom-preprocess-parent-html": {
      "title": "Using custom CSS preprocessor",
      "content": "\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/custom-preprocess-parent.html"
    }
    ,
  
    "guides-v2-0-cloud-howtos-custom-theme-html": {
      "title": "Install a theme",
      "content": "You can install one or multiple themes to use for one or all of your stores and sites in your project. Themes include multiple static files including images, fonts, CSS, JavaScript, PHP, and more to fully design your stores. You can add the theme by either by extracting its code to the Magento file system or using Composer.\n\nGet started with a branch\nWe recommend using a branch for adding, configuring, and testing your theme.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Install a theme manually\n  To install a theme manually, you must have the theme’s code, either in a compressed archive or in a directory structure similar to the following:\n\n  &lt;VendorName&gt;\n  ├── composer.json\n      ├── etc\n      │   └── view.xml\n      ├── media\n      ├── registration.php\n      ├── theme.xml\n      └── web\n          ├── css\n          │   └── source\n          ├── fonts\n          ├── images\n          └── js\n\n  To install a theme manually:\n\n  \n    \n      Copy the theme’s code under &lt;Magento root dir&gt;/app/design/frontend for a storefront theme or &lt;Magento root dir&gt;/app/design/adminhtml for an Admin theme. Make sure the top-level directory is &lt;VendorName&gt;; otherwise, the theme won’t install properly.\n\n      For example:\n\n      cp -r ExampleTheme &lt;Magento root dir&gt;/app/design/frontend\n      \n    \n    \n      Confirm the theme copied to the correct place.\n\n      \n        Storefront theme: ls &lt;Magento root dir&gt;/app/design/frontend\n        Admin theme: ls &lt;Magento root dir&gt;/app/design/adminhtml\n      \n\n      A sample follows:\n\n      ExampleTheme Magento\n      \n    \n    \n      Add and commit files:\n\n      git add -A &amp;&amp; git commit -m \"Add theme\"\n      \n    \n    \n      Push the files to your branch:\n\n      git push origin &lt;branch name&gt;\n      \n    \n    Wait for deployment to complete.\n    Log in to the Magento Admin.\n    \n      Click Content &gt; Design &gt; Themes.\n\n      The theme displays in the right pane.\n    \n  \n\n  Install a theme using Composer\n  Installing a theme using Composer is the same as installing any other extension using Composer. See Install, manage, and upgrade modules for details.\n\n  To summarize the procedure:\n\n  \n    Purchase the theme from Magento Marketplace.\n    Get the theme’s Composer name.\n    \n      Change to your Magento root directory and enter the command:\n\n      composer require &lt;vendor&gt;/&lt;name&gt;:&lt;version&gt;\n      \n\n      For example,\n\n      composer require zero1/theme-fashionista-theme:1.0.0\n      \n    \n    Wait for dependencies to update.\n    \n      Enter the following commands:\n\n      git add -A &amp;&amp; git commit -m \"Add theme\"\ngit push origin &lt;branch name&gt;\n      \n    \n    Log in to the Magento Admin.\n    \n      Click Content &gt; Design &gt; Themes.\n\n      The theme displays in the right pane.\n    \n  \n\n  Related topics\n  \n    Install, manage, and upgrade modules\n  \n\n",
      "url": "/guides/v2.0/cloud/howtos/custom-theme.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-custom-js-html": {
      "title": "Use custom JavaScript",
      "content": "Overview\nThis topic discusses how to use custom JavaScript components with the components provided by Magento or having replaced them with custom implementations.\n\nWe strongly recommend not changing the source code of default Magento components and widgets. All customizations must be implemented in custom modules or themes.\n\nAdd a custom JS component\n\nTo add a custom JS component (module), take the following steps:\n\n\n  Place the custom component source file in one of the following locations:\n    \n      Your theme JS files: &lt;theme_dir&gt;/web/js or &lt;theme_dir&gt;/&lt;VendorName&gt;_&lt;ModuleName&gt;/web/js. In this case the component is available in your theme and its child themes.\n      Your module view JS files: &lt;module_dir&gt;/view/frontend/web/js. In this case the component is available in all modules and themes (if your module is enabled).\n    \n  \n  Optionally, in the corresponding module or theme, create a requirejs-config.js configuration file, if it does not yet exist there and set path for your resource.\n\n\nReplace a default JS component\n\nTo use a custom implementation of an existing Magento JS component:\n\n  \n    Place the custom component source file in one of\n  the following locations:\n    \n  \n        Place the custom component source file in one of\n  the following locations:\n      \n\n    \n  \n        Your theme JS files: /web/js or /_/web/js\n      \n  Your module view JS files:\n  &lt;module_dir&gt;/view/frontend/web/js\n  \n\n  \n  \n    Create a RequireJS configuration file\n  requirejs-config.js, having specified the following:\n\n     \nvar config = {\n  \"map\": {\n    \"*\": {\n      \"&lt;default_component&gt;\": \"&lt;custom_component&gt;\"\n    }\n  }\n};\n\n    \n  \n    &lt;default_component&gt;: the name of the default\n    component you replace\n  \n  \n    &lt;custom_component&gt;: the name of the custom\n    component\n  \n\n\n    For example, if you want to use custom navigation-menu.js script instead of the default menu widgets, your requirejs-config.js should contain the following:\n\n    var config = {\n  \"map\": {\n    \"*\": {\n      \"menu\": \"js/navigation-menu\",\n      \"mage/backend/menu\": \"js/navigation-menu\"\n    }\n  }\n};\n\n  \n  Place your requirejs-config.js file in one of\n  the following directories (according to the location of your\n  custom script, see step 1 of this procedure):\n    \n      Your theme files: &lt;theme_dir&gt;\n      \n      Your module view files:\n      &lt;module_dir&gt;/view/frontend\n      \n    \n  \n\n\nThis way your custom JS component is used instead of the Magento component in all entries all over the frontend area.\n\nExtend a default JS component\nYou can add a custom JS component/widget, which will extend a default Magento component/widget.\n\nExtend Magento widget\n\nTo extend a default Magento jQuery widget, create &lt;your_widget_name&gt;.js with the following contents:\n\ndefine([\n  'jquery',\n  'jquery/ui',\n  'mage/&lt;widget.name&gt;' // usually widget can be found in /lib/web/mage dir\n], function($){\n \n  $.widget('&lt;your_namespace&gt;.&lt;your_widget_name&gt;', $.mage.&lt;widget.name&gt;, { ... });\n \n  return $.&lt;your_namespace&gt;.&lt;your_widget_name&gt;;\n});\n\nWhere the following notation is used:\n\n  \n    &lt;your_namespace&gt;.&lt;your_widget_name&gt; -\n    the name of your custom widget. According to the jQuery widgets naming\n    convention, must contain a namespace and name.\n  \n  \n    mage.&lt;widget.name&gt; - the name of the Magento\n    widget that you extend.\n  \n\n\nFor information about how to initialize your custom widget in a .phtml template, see the JavaScript initialization topic.\n\nExtend a default Ui component\n\nTo extend a default JS Ui component, your custom script must contain the following:\n\ndefine([\n  '&lt;component_path&gt;'\n], function(&lt;component_alias&gt;){\n \n  return &lt;component_alias&gt;.extend({\n \n    defaults: { ... }, // properties with default values\n    ... // methods of your component\n  });\n});\n\nWhere the following notation is used:\n\n\n  \n    &lt;component_path&gt;: path to the default\n    component that you extend\n  \n  \n    &lt;component_alias&gt;: variable containing the\n    default component that you extend\n  \n\n\nFor example, Filters.js script extends the default filters.js:\n\ndefine([\n  'Magento_Ui/js/grid/filters/filters'\n], function(Filters){\n \n  return Filters.extend({\n \n    defaults: { ... }, // properties with default values\n    ... // methods of your component\n  });\n});\n\nFor information about how to initialize your custom JS component in a .phtml template, see the JavaScript initialization topic.\n\nDisable default Magento JS\n\nTo disable the auto-loading of default Magento JS components and widget initialization:\n\n  Create a requirejs-config.js file with the\n  following content: \n var config = {\n  deps: [ ] }; \n\n  \n  Put the requirejs-config.js file in one of the\n  following locations:\n    \n      Your custom theme files: &lt;theme_dir&gt;\n      \n      Your custom module files:\n      &lt;module_dir&gt;/view/frontend\n      \n    \n  \n\nIf you need to enable the loading of default Magento JS components and widget initialization on a certain stage, add the following code in your JS script:\n\n$(mage.apply);\n\nRelated topic\n\n\n  JavaScript resources in Magento\n  About AMD modules and RequireJS\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/custom_js.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-custom-preprocess-html": {
      "title": "Add custom CSS preprocessor",
      "content": "What's in this topic\n\nThis topic describes how to add a custom CSS preprocessor. Adding Sass support is used as an example.\n\nSample Sass module\n\nMagento has a sample module-sample-scss module implementing the Sass preprocessor.\n\nYou can view it as example when adding your custom preprocessor. Or install the module as is if you need to add Sass preprocessing. Installing a module is described in the repository’s Readme file.\n\nAdding a custom preprocessor\n\nPrerequisites\n\nFor the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code. Create a new custom module for your customizations.\n\nFor details about creating a module refer to the Magento PHP Developer Guide.\n\nStep by step instruction\n\nTo add a custom preprocessor, take the following steps:\n\n\n  \n    In your module directory, add the adapter PHP class. It must implement the Magento\\Framework\\View\\Asset\\ContentProcessorInterface interface. \nFor illustration, see the adapter for Sass in the sample module: module-sample-scss/Preprocessor/Adapter/Scss/Processor.php\n  \n  \n    If the browser compilation is possible for your file types, that is, if the corresponding JavaScript library exists, create the custom renderer for the client-side compilation. This will allow the default client-side compilation functionality to be applied for your files type as well. \nYou can use the default Magento renderer for reference: app/code/Magento/Developer/Model/View/Page/Config/ClientSideLessCompilation/Renderer.php\n  \n  \n    If in your custom preprocessor, the syntax of the importing directives is different from @import and @magento_import, you must implement custom processor classes. \nYou can view the default Magento processors for reference: lib/internal/Magento/Framework/Css/PreProcessor/Instruction.\n  \n  \n    In &lt;your_module_dir&gt;/etc/di.xml, declare the following:\n    \n      your custom adapter\n      your processor (if relevant)\n      the renderer for the client-side compilation (if relevant)\n    \n  \n\n\nThe content of your di.xml will be similar to the following:\n\n&lt;your_module_dir&gt;/etc/di.xml\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;virtualType name=\"AlternativeSourceProcessors\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"alternatives\" xsi:type=\"array\"&gt;\n                &lt;item name=\"%your_preprocessor_name%\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"class\" xsi:type=\"string\"&gt;%Your\\Adapter\\Class%&lt;/item&gt;\n                &lt;/item&gt;\n                &lt;!-- Use the following syntax to set the priority of processors. That is, what file types will the system search for, when requested CSS files are not found. The following lines set SCSS to be prior to LESS --&gt;\n                &lt;item name=\"less\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"after\" xsi:type=\"string\"&gt;scss&lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/virtualType&gt;\n    &lt;!-- Add the following declaration if you have custom processors for importing directives --&gt;\n    &lt;virtualType name=\"AssetPreProcessorPoolForSourceThemeDeploy\" type=\"Magento\\Framework\\View\\Asset\\PreProcessor\\Pool\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"preprocessors\" xsi:type=\"array\"&gt;\n                &lt;item name=\"%your_preprocessor%\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"magento_import\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"class\" xsi:type=\"string\"&gt;%Your\\Import\\Processor%&lt;/item&gt;\n                    &lt;/item&gt;\n                    &lt;item name=\"import\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"after\" xsi:type=\"string\"&gt;magento_import&lt;/item&gt;\n                        &lt;item name=\"class\" xsi:type=\"string\"&gt;%Your\\Magento_import\\Processor%&lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/virtualType&gt;\n    &lt;!-- Declare the renderer for client-side compilation --&gt;\n&lt;type name=\"Magento\\Developer\\Model\\View\\Page\\Config\\RendererFactory\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"rendererTypes\" xsi:type=\"array\"&gt;\n                &lt;item name=\"client_side_compilation\" xsi:type=\"string\"&gt;%Your\\Client\\Side\\Renderer%&lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nRelated reading\n\n\n  Magento PHP Developer Guide\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/custom_preprocess.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-partial-caching-database-caching-html": {
      "title": "Create custom cache engines",
      "content": "This topic discusses how to use the Magento 2 database for caching. After you complete these tasks, cached objects are stored in the cache and cache_tag Magento 2 database tables. Nothing is stored in var/cache or var/page_cache.\n\nThis topic discusses how to set up database caching and how to verify database caching is working. We discuss the following options:\n\n\n  Using the default cache frontend, in which case you modify di.xml only.\n  Using a custom cache frontend, in which case you modify env.php only.\n\n\n\n    Database caching&mdash;like file-based caching&mdash; works well in a development environment but we strongly recommend you use Varnish in production instead.\n    Varnish is designed to accelerate the HTTP protocol.\n\n\nPrerequisites\nBefore you continue, if you’re using your own frontend cache, make sure you associate cache frontends with cache types. If you’re using the default frontend cache, you don’t have to do that.\n\nWe provide sample configurations at the end of this topic.\n\nDatabase caching using the default cache frontend\nTo enable database caching using the default frontend, you must modify &lt;your Magento install dir&gt;/app/etc/di.xml, which is the global deployment injection configuration for the Magento application.\n\nTo modify di.xml:\n\n\n  Log in to the Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands to make a copy of di.xml:\n\n    cd &lt;your Magento install dir&gt;/app/etc\ncp di.xml di.xml.bak\n    \n  \n  \n    Open di.xml in a text editor and locate the following block:\n\n    &lt;type name=\"Magento\\Framework\\App\\Cache\\Frontend\\Pool\"&gt;\n   &lt;arguments&gt;\n      &lt;argument name=\"frontendSettings\" xsi:type=\"array\"&gt;\n          &lt;item name=\"page_cache\" xsi:type=\"array\"&gt;\n              &lt;item name=\"backend_options\" xsi:type=\"array\"&gt;\n                &lt;item name=\"cache_dir\" xsi:type=\"string\"&gt;page_cache&lt;/item&gt;\n              &lt;/item&gt;\n          &lt;/item&gt;\n      &lt;/argument&gt;\n   &lt;/arguments&gt;\n&lt;/type&gt;\n&lt;type name=\"Magento\\Framework\\App\\Cache\\Type\\FrontendPool\"&gt;\n   &lt;arguments&gt;\n      &lt;argument name=\"typeFrontendMap\" xsi:type=\"array\"&gt;\n        &lt;item name=\"full_page\" xsi:type=\"string\"&gt;page_cache&lt;/item&gt;\n      &lt;/argument&gt;\n   &lt;/arguments&gt;\n&lt;/type&gt;\n    \n\n    The &lt;type name=\"Magento\\Framework\\App\\Cache\\Frontend\\Pool\"&gt; node configures options for the in-memory pool of all frontend cache instances.\n\n    The &lt;type name=\"Magento\\Framework\\App\\Cache\\Type\\FrontendPool\"&gt; node configures cache frontend options specific to each cache type.\n  \n  \n    Replace the entire block with the following:\n\n    &lt;type name=\"Magento\\Framework\\App\\Cache\\Frontend\\Pool\"&gt;\n\t&lt;arguments&gt;\n    \t&lt;argument name=\"frontendSettings\" xsi:type=\"array\"&gt;\n    \t    &lt;item name=\"page_cache\" xsi:type=\"array\"&gt;\n    \t      &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n     \t       &lt;/item&gt;\n     \t     &lt;item name=\"&lt;your cache id&gt;\" xsi:type=\"array\"&gt;\n     \t     &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n     \t     &lt;/item&gt;\n   \t\t&lt;/argument&gt;\n\t&lt;/arguments&gt;\n&lt;/type&gt;\n&lt;type name=\"Magento\\Framework\\App\\Cache\\Type\\FrontendPool\"&gt;\n\t&lt;arguments&gt;\n \t   &lt;argument name=\"typeFrontendMap\" xsi:type=\"array\"&gt;\n \t       &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n \t   &lt;/argument&gt;\n\t&lt;/arguments&gt;\n&lt;/type&gt;\n    \n\n    where &lt;your cache id&gt; is your unique cache identifier.\n  \n  \n    Save your changes to di.xml and exit the text editor.\n  \n  Continue with Verify database caching is working.\n\n\nDatabase caching using a custom cache frontend\nThis section discusses how to set up database caching with a custom cache frontend.\n\n\n\n  Due to a known issue, a custom cache frontend still results in some objects being cached to the file system; however, fewer assets are cached compared to file system caching.\n\n\nTo enable database caching using a custom cache frontend, you must modify &lt;your Magento install dir&gt;/app/etc/env.php as follows:\n\n\n  Log in to the Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands to make a copy of env.php:\n\n    cd &lt;your Magento install dir&gt;/app/etc\ncp env.php env.php.bak\n    \n  \n  \n    Open env.php in a text editor and add the following anywhere, such as before 'cache_types' =&gt;:\n\n    'cache' =&gt; [\n    'frontend' =&gt; [\n        '&lt;unique frontend id&gt;' =&gt; [\n             &lt;cache options&gt;\n        ],\n    ],\n    'type' =&gt; [\n         &lt;cache type 1&gt; =&gt; [\n             'frontend' =&gt; '&lt;unique frontend id&gt;'\n        ],\n    ],\n    'type' =&gt; [\n         &lt;cache type 2&gt; =&gt; [\n             'frontend' =&gt; '&lt;unique frontend id&gt;'\n        ],\n    ],\n],\n    \n\n    An example is shown in Configuration examples.\n  \n  Save your changes to env.php and exit the text editor.\n  Continue with the next section.\n\n\nVerify database caching is working\nTo verify database caching is working, clear the current cache directories, go to any cacheable page in a web browser, and verify that data is written to the database and not to the file system.\n\nUse the following steps:\n\n\n  If you haven’t done so already, log in to the Magento server as, or switch to, the Magento file system owner.\n  \n    Clear the current cache directories:\n\n    rm -rf &lt;your Magento install dir&gt;/var/cache/* &lt;your Magento install dir&gt;/var/page_cache/* &lt;your Magento install dir&gt;/var/di/* &lt;your Magento install dir&gt;/var/generation/*\n    \n  \n  \n    In a web browser, go to any cacheable page (such as the storefront front door page).\n\n    If exceptions display, verify di.xml syntax and try again. (To see exceptions in the browser, you must enable developer mode.)\n  \n  \n    Enter the following commands:\n\n    ls &lt;your Magento install dir&gt;/var/cache/*\nls &lt;your Magento install dir&gt;/var/page_cache/*\n    \n\n    \n  \n  Due to a known issue, a custom cache frontend still results in some objects being cached to the file system; however, fewer assets are cached compared to file system caching.\n  If you use the default cache frontend, you don't have this issue.\n\n  \n  Verify both directories are empty; if not, edit di.xml again and correct any issues.\n  \n    Use a database tool such as phpMyAdmin to verify there is data in the cache and cache_tag tables.\n\n    The following figures show examples. The important thing is that there are rows in the tables. The data in your tables will be different than the following.\n\n    cache table example.\n\n    \n\n    cache_tag table example.\n\n    \n  \n\n\nConfiguration examples\nThis section contains code sample snippets to refer to when configuring database caching.\n\nSample di.xml for the default cache frontend\ndi.xml snippet:\n\n &lt;type name=\"Magento\\Framework\\App\\Cache\\Frontend\\Pool\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"frontendSettings\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_cache\" xsi:type=\"array\"&gt;\n                  &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n                    &lt;/item&gt;\n                  &lt;item name=\"default\" xsi:type=\"array\"&gt;\n                  &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n                  &lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n    &lt;type name=\"Magento\\Framework\\App\\Cache\\Type\\FrontendPool\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"typeFrontendMap\" xsi:type=\"array\"&gt;\n                &lt;item name=\"backend\" xsi:type=\"string\"&gt;database&lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n &lt;/type&gt;\n\nSample env.php for a custom cache frontend\nenv.php snippet that enables all cache types with a custom frontend named magento_cache:\n\n 'cache' =&gt; [\n     'frontend' =&gt; [\n        'magento_cache' =&gt; [\n             'backend' =&gt; 'database'\n         ],\n      ],\n      'type' =&gt; [\n         'config' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'layout' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'block_html' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'view_files_fallback' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'view_files_preprocessing' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'collections' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'db_ddl' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'eav' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'full_page' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'translate' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'config_integration' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'config_integration_api' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n         'config_webservice' =&gt; [\n            'frontend' =&gt; 'magento_cache'\n          ],\n      ],\n  ],\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/partial-caching/database-caching.html"
    }
    ,
  
    "guides-v2-0-pattern-library-displaying-data-datatable-datatable-html": {
      "title": "Admin Design Pattern Library",
      "content": "Data table\nThe data-table organizes complex data into a tabular view. Each data record has its own row with data elements presented in columns with meaningful column headings. This allows users to quickly scan and understand complex data and perform actions against the data.\n\nData-table requirements for Magento 2 include:\n\n\tImproved search and filters\n\tDraggable columns\n\tSortable columns\n\tAbility to add and remove columns\n\tInline editing\n\tSupport for thumbnails\n\tConsistent case and naming format\n\tFunctional parity with the existing Magento application\n\n\nData-table\nThis specification defines the following features for the data-table:\n\n\tPositioning of elements to allow for a more intuitive user experience\n\tPagination\n\tKeyword Search\n\tAllowing for user-defined number of of items per page\n\tAllowing users to go directly to a specific page\n\tFiltering\n\tSortable columns\n\tAbility to add and/or remove columns\n\tSingle item select and edit\n\tMultiple item select and edit\n\tImage/Thumbnail placement\n\n\n\n\n\n\n\nData-table Visual Architecture\nThe data-table will contain the following elements where applicable and as needed:\n\n\tPagination controls\n\tActions\n\tSettings, bookmarks and search\n\tFilters\n\tColumn headers\n\tData\n\n\nModularity\nThe data-table will be designed in such a way that any of the above controls can be removed, collapsing the table gracefully.\n\n\n\n\n\n\n\n\n\nPagination\nPagination controls allow the user to easily page through and organize data. Pagination controls will contain the following:\n\n\tDrop-down select for number of items per page\t\n\t\n\t\tIncrements TBD\n\t\tCustom field for user-defined increments\n\t\n\t\n\tPage number (skip to) field and action button\n\t‘Next’ button\n\t‘Previous’ button when applicable\n\n\n\n\n\nPagination Rules\n\n\tThe pagination controls will only be present if the number of table items exceeds the lowest increment\n\t\tfor number of items per page.\n\tThe ‘Previous’ button should be disabled when viewing the first page of results.\n\tThe ‘Next’ button should be disabled when viewing the last page of results.\n\tThe ‘Skip to’ field will allow only numeric values.\n\t‘Skip to’ will be instantiated once the value is changed and [Return] or [Tab] is clicked.\n\tA custom number of items per page can be set by selecting the \"Custom\" link which will allow users to specify a number. This number can be edited.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMass Actions\nA common theme across the existing Magento user experience includes mass actions that can be taken. This is a convention used on both data-table and non-data-table pages. Not all pages have these action buttons. This document will not attempt to capture all actions that appear here or how they might be redesigned for Magento 2. This document will make note that these actions exist on many of the data-table pages and will use the area directly above the table to indicate placement of such action buttons where they might be needed.\n\n\n\n\n\nActions will be positioned above the table . Each table  will have it’s own set of actions, some table s will have no actions. This new proposal removes the submit button which is currently visible next to the “Actions” drop down selector. In the event that any confirmations are needed for actions, modal dialogs will be used.\n\n\n\n\n\n\n\nSingle Actions\nThese actions will appear within the data area of the table where applicable. When this action column is applicable, it will always appear on the far right of the table . Single actions will allow users to take action on a record within the table . In most cases, no more than one action will appear here. In the event that additional actions are needed, they will appear in the form of a drop down. These actions are specific to the single record in which they are associated. In the event that a user selects multiple items in the table, these actions will be disabled or hidden.\n\n\n\n\n\n\n\n\nMessaging and Confirmation\nThere are times when an action needs to be confirmed. In these cases, the user’s task will be interrupted with a message asking the user to confirm the operation before proceeding. This message is presented via a modal dialog.\n\n\n\n\n\n\n\n\nOnce an action is taken, success/fail messaging should appear as an overlay which fades away. Certain actions may  require that an Undo action be provided. This experience should be the same whether a single file is being deleted via the “actions” button for that record or 1 or more files have been selected via a checkbox and deleted via the mass actions delete.\n\n\n\n\n\n\n\nTable Control\nThis section will cover the ability to set column visibility, save view state, and search. Filters will be covered in the following section.\n\nKeyword Search\nA keyword search will allow users to search on the data that has been loaded into the table  being viewed. This search is a part of the table, and is separate from the global record search in the page header. It will allow for exact phrases(using quotations) and the following boolean operators:\n\nPlacement and Behavior\nThe keyword search function and table controls will be:\n\n\tDisplayed above the table\n\tActions\n\tRemain visibly persistent as the table scrolls\n\n\nSticky Headers and Controls\nAs the table  scrolls, the table controls will dynamically condense to a single row. All functionality of the controls will remain available.\n\n\n\n\n\n\n\nThe persistent header will reactivate when you scroll back up:\n\n\n\n\n\n\n\n\nFor details about component’s implementation see Sticky Header Component.\n\nMultiple Data-tables on Page\nThe header will stick to the first table until the user scrolls past the bottom of that table . The header will have the same behavior for each subsequent data-table.\n\n\n\n\n\n\n\n\nInteractions\nThe data-table will reset to the top of the table  when the user:\n\n\tSubmits a search query\n\tApplies a filter\n\tSorts a column\n\tSelects a mass action\n\tLoads up a saved view\n\tClicks to the next page of results\n\tChanges the number of items per page\n\n\n\nThe data-table will remain in the current viewport when the user:\n\n\tCreates a new saved view\n\tEdits cells in-line\n\n\nSticky First Column\nThe table can be scrolled horizontally. And to keep the row identifiable, the checkbox column and first column will be sticky. In creating the grid, the first column must always be an identifiable attribute such as name.\n\n\n\n\n\n\n\nIf there are more columns than can be shown in one view, the vertical scroll bar should appear for navigating to the rest of the column options as seen in the image below. Only 6 options should be shown per each vertical column, we should ensure that the all area of panel will be visible above the page fold.\n\n\n\n\n\n\n\nIn the example below, the first column is “Name” rather than “Customer ID.”\nThis horizontal scroll should still work with page scroll and sticky header.\n\n\n\n\n\n\n\n\nSearch\nWhen the user enters a keyword in the search field and submits the query (by clicking the spyglass icon), the table will display only records that contain the designated keyword. The search term is displayed as a “chip” below the search field (and inline with any additional filters that were applied). In this layout, additional search terms can be paired with the initial term to further refine the results. Each time a term is submitted, the data is filtered, the term is displayed as a “chip” and the search field returns to it’s initial state (it does not retain the term entered my the user).\n\n\n\n\n\n\n\n\n\n\n\nAutocomplete\nAs text is added to the search field, the system will suggest terms and phrases based on data contained in the table being searched against.\n\n\tNo more than 5 suggestions should be displayed at a time\n\n\n\n\n\n\n\n\nSearch/Filter Tags\nOnce a search term or filter is applied and results are loaded into the table, the terms or parameters used to filter by are displayed in the minified version of the “filter chip(s)”. If the user removes all the tags, the filters row would disappear.\n\n\n\n\n\n\n\n\nError Checking/Validation\nThere will be no form validation or error checking for search queries since any combination of characters may be searched. Messaging will display in the data area when no results can be returned.\n\n\n\n\n\n\n\n\nUser Flow\nUpon conducting a query, a result set is returned based on the above rules. Once results are loaded, the keyword search field will be empty, and a chip for the keyword will appear. If a user clears the chip, the table will then refresh, reloading data based on any filters that are applied.\n\nColumns\nThe user will be able to select which columns are visible from here. Settings will also be contained in a panel that can be activated by clicking on the columns action. Users will also have the ability to cancel out of this prompt, as well as reset (restore) the table back to it’s default column view. These settings will be ‘sticky’ per table, so users returning to any particular table will see the table the way it was last configured. \n\n\n\n\n\n\n\n\n\n\nCustom Views\nCustom views allow the user to save the state of a table. When a view is saved, the table settings will be stored. These settings include column visibility and position, as well as any filter or search that has been applied to the table. Saving a ‘view’ will be done via a dropdown control. Saved views will be available per table.\n\n\n\n\n\n\n\n\nEditing Saved Views\nViews can be named or deleted by clicking an edit icon. Refer to “Adding a custom value to drop down list” above for more detailed behavior.\n\n\n\n\n\n\n\n\nFilters\nFilters allow users to customize the display of information in an associated data-table. By entering desired parameters (for example, a date range) in the available filter input sections table returns a modified view, making visible only the records meeting the user-determined criteria.\n\nAdvanced Filters\nTo access the Advanced Filters the user may click/tap the “Filters” button found in the table controls area. When activated, the button transforms into a tab and displays the available filters in a ‘drawer’ which opens between the table contols and the table data. The available filters are determined by the columns present in the table; therefore, if the user customizes the column visibility of the table to show some columns and hide others, the corresponing filters for these columns will display or hide in the filter ‘drawer’.\n\n\n\n\n \nNOTE: Not all columns may be filtered (i.e. “Actions” or checkbox select) and therefore will not be presented in the list of filters even though their columns are visible in the data-table.\n\n\n\n\n\nTo apply filters, the user sets the desired parameters in the input fields of the appropriate filters. The action initiated by clicking/tapping the “Apply” button (found in the advanced filters area). When applied, the advanced filter ‘drawer’ closes and the data-table refreshes to display the filtered data. The applied filters are indicated to the user in the form of filter ‘tags’ that appear between the filter button and the table data. Filter ‘tag’ are listed in the order that they are applied and each individula ‘tag’ has a control for removing it.\n\n\n\n\n\n\nRemoving Filters\nUsers may remove a filter setting by clicking/tapping the remove control next to the filter ‘tag’. Doing so removes the particular filter from the query, the table refreshes and the data excluded by that filter then appears in the table. The user can quickly remove all applied filters by clicking/tapping the “clear all” link that follows the list of ‘filter tags’.\n\n\n\n\n\n\n\n\nData Table Views\nThe data-table will support up to 30 columns, with up to 8 being visible by default. While there will be a default view for each data-table in the system, users will have the ability to show, hide, drag and change the order of columns. This interaction will include the ability to resize the width of columns.\n\n\tThe only columns which cannot be moved are the checkbox(select) column and the action column. The select column will always appear on the far left while the action column will appear on the far right of the table \n\n\nView Stickiness\nAs a user rearranges, adds, and resizes the columns of a particular table , it’s view state should be saved so that when a user leaves and the returns to the table , it will appear the way the user last viewed it.\n\nThe following parameters will be saved:\n\n\tColumns displayed\n\tColumn arrangement\n\tColumn width\n\tNumber of items per page \n\n\n\n\nResetting the View\nThis will be handled by the ‘Reset’ function in the settings drop down button. A modal dialog should appear, allowing the user to confirm the reset.\n\nSelect All\nThis feature will allow users to make bulk selections to items within any given data-table. Because users may be dealing with many “pages” of data, this function needs to be specific in respect to what is being selected. Thus a drop down will be used to allow for multiple options for selecting records.\n\n\n\n\n\n\n\nThis drop down will include the following:\n\n\tSelect all on a page, or all visible\n\tSelect all on all pages\n\tInvert selection (appears only after a selection has been made)\n\tDeselect all\n\nThis drop down only needs to appear where more than one page of data is available. In cases where only one page of data is available, only a checkbox allowing the user to select or deselect all is necessary. Options in the drop down select should be dynamic. For instance, deselect options should not be displayed if nothing is selected.\n\nNumber of Records\nThe total number of records loaded into the table  will display above the column headers.\n\n\n\n\n\n\n\nAs items are selected on the gird, a count for the number of items selected should be displayed next to the total count. This will give the user confidence that records are selected though they may not be on the current page view.\n\n\n\n\n\n\n\nSelect\nFor tables which require a select column:\n\n\tThe select column will always be the first column appearing on the left side of \n\t\tthe table.\n\tThis column will be fixed and stationary (it cannot be moved or resized).\n\tUsers may select multiple rows by using the checkboxes or the select all function.\n\tSelected rows will be indicated by a checked box and a highlight and/or border \n\t\tstyle which will delineate the selected rows from unselected rows.\n\n\n\n\n\n\n\n\n\nToggle Switches\nSome data-tables will be used to display “settings” content. In these instances a checkbox is not ideal for the experience, as it can be confusing to the user when pre-selected settings are displayed. Switches make the action and intent more clear to the user for these tasks. Therefore, if switches are present, checkboxes should not; the two should never be used in the same table. Since switches replace the functionality of checkboxes they should be the first column of the data-table. \n\n\n\n\n\n\n\nSingle Select Button\nThe data table can also accomodate buttons in rows, and has a special case in the “Single Select” button.  This button functions not unlike a typical radio button control, but is used instead of the radio button when the task flow or experience in the Admin application are better served with the more implicit action of selecting a single choice from a data table. This provides greater visibility and imediate confirmation of the action to the user. The use of this should be carefully considered in the context of the experience to determine if it provides greater understanding to the user than radio buttons.\n\n\n\n\n\n\n\n\nEditing\nSingle item and multiple item edits are explained below.\nNote: Not all data-tables will allow for inline editing.\n\nSingle Item Select and Edit Interactions\n\n\tInline editing can be instantiated by single clicking on the field to be edited. Once inline editing\n\t\tis instantiated, all appropriate fields within a row will be editable.\n\tNon-editable fields will require a disabled treatment.\n\tOnce a row becomes editable, action buttons will appear below the row allowing a user to commit or\n\t\tcancel the edit.\n\tEditable fields will have a left-to-right tab order. [Tab] and [Enter] will set focus on the next \n\t\teditable field in the tab order, unless the focus is set to the last field in the tab order in which case [Enter] will commit the edit while [Tab] will set focus to the Save button.\n\n\n\n\n\n\t\n\n\n\n\n\n\nInline editing may require error handling on some fields. This should be done using real-time field validation.\nSome fields may allow for only a specific set of values. In these instances, a select or multi-select interaction should be used.\n\n\n\n\n\n\n\n\nMiscellaneous Features\nThis section will outline additional features which may be needed for some but not all tables in Magento.\n\nDrag and Drop Columns\nSome data-tables will allow users to arrange columns in a customized order. A user “picks up” a column by click and hold or touch and hold of the column header, then drags the column into the desired position. A highlight appears between columns in the table to indicate where this column will appear when “dropped”. Columns will not be allowed to precede the column of checkboxes in a table, likewise columns may not be positioned after the “Actions” column.\n\nWhen dropped on an area that is not highlighted (or off target of the highlighted area) the column will return to it’s original position. If the user wishes to maintain this position for future viewing, they must set a “Saved View”, otherwise the default column order will prevail for following sessions.\n\n\n\n\n\n\n\n\nDrag and Drop Rows\nSome data-tables will allow users to specify an order for the records within the table. If a position has been assigned to a record, the position number will display in the ‘Position’ column. Changing position order should always shift the greater numbers in an ascending fashion, and lesser numbers in a descending fashion. E.G., if position 5 is changed to 10, the previous position 10 would become position 11, shifting all ascending records up. Position 6 through 9 would then shift down in the same manner. 6 would become 5, 7 would become 6, so on and so forth. If the ‘Position’ column is sorted, users can drag and drop single or multiple(once selected) to a different position on the table.\n\nNOTE: Inline editing functionality should not be available for tables that require drag and drop functionality for table rows.\nSingle rows may be arranged via drag and drop.\n\n\n\n\n\n\nMultiple rows may also be arranged via drag and drop.\n\n\n\n\n\n\nThumbnails\nIn cases where an image is associated with the data, as in the case of a product, the data-table will display a thumbnail view of the primary or default image (typically the first image in a series of image). By default the thumbnail image will appear to the far left of the table (after select checkboxes when present). The thumbnail image is a ‘clickable target’ independent of the typical click behavior of the row.\n\n\n\n\n\n\n\nWhen the thumbnail is clicked a modal is presented over the data-table to provide a larger, more detailed view of the image. This modal should contain a heading that corresponds to the associated product name; a close control for the modal; a hyperlink that redirects the user to the details page.\n\n\n\n\n\n\n\n\nParent-Child relationships\nThe data-table will support parent-child relationships. Parent and child records will be delineated via style and/or iconography. Parent nodes will be expandable/collapsable.\n\n\n\n\n\n\n\n\nInteractions\nGeneral interaction should follow standard web conventions. Interaction around dragging and resizing columns will utilize the cursor to indicate when an area can be dragged or resized.\n\nViewport Considerations\n\n\tThe default data-table will display within a 1024px screen resolution without the need for horizontal \n\t\tscrolling.\n\tHorizontal scrollbars will be present whenever the data-table’s width expands beyond the browser’s \n\t\tviewport.\n\tThe data-table controls should not expand with the table , instead the controls will float as the table  \n\t\tis scrolled in both the vertical and horizontal direction.\n\n\n\n\n\n\n\nColumn Headers\n\n\tClicking on a column header sorts the data ascending/descending.\n\tColumn headers are draggable and can be re-sized.\n\tCan be added and removed using the settings action located on the list.\n\tData can be displayed in ascending or descending order by selecting the column header\n\tThe actively sorted column is indicated by style and an ascending/descending indicator\n\t\t(Style is TBD).\n\tCan be resized by dragging the edge of the column.\n\n\nCursors\nCursors will be used to indicate which actions the user can take in any particular situation. While cursors may differ slightly depending on operating system and browser, the below cursors are examples of what should be used per standard web conventions:\n\n\n\n\n\n\nSummary\nThis specification proposes a new version of Magento’s administration data-table. Features of the existing data-table have been analyzed to best represent the existing functions of the data-table.\n\nBackwards Compatibility\nThis new version of the data-table will fully support the existing Magento data-table functionality. Where this document may not be explicit, it should be assumed that any existing function of the table  will be supported with this new version.\n\nAssets\nDownload ZIP of PhotoShop source files.\n",
      "url": "/guides/v2.0/pattern-library/displaying-data/datatable/datatable.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-date-time-selector-date-time-selector-html": {
      "title": "Admin Design Pattern Library",
      "content": "Date and time selector\nThis topic discusses design standards and rules for date and time selection in Magento. This article is related to the Form Elements pattern. Please refer to Form Elements for general rules on form usage and placement.\n\nWhen to Use\n\n  Use this element whenever a date, date range, time or time range needs to be gathered from the user.\n\n\nVariations\nSingle Date Picker\n\n\n\nDate Range Picker\n\n\nSingle Time Picker\n\n\n\nTime Range Picker\n\n\n\nSingle Date and Time Picker\n\n\n\nDate and Time Range Picker\n\n\n\nFormats\nDate:\n\n\n  DD MMM YYYY (ie. 01 JAN 2014) The letters should be localized.\n\n\nTime:\n\n\n  \n    The examples in this article use the 12 hour clock format. It should be noted that the 24 hour format will be supported as well.\n  \n  \n    Time Zones are in UTC offset\n  \n\n\nInteraction Overview\n\n\n  \n    Tabbing to or clicking into the field activates the widget\n\n    \n      The Date/Time widget should animate down and be displayed underneath the field\n    \n  \n  \n    The user is free to select available dates by clicking on the date\n  \n  \n    Days in the calendar will have the following states, each with unique styles:\n\n    \n      \n        Current day\n      \n      \n        Selected day(s)\n      \n      \n        Disabled day(s)\n      \n      \n        Hover state for days\n      \n    \n  \n  \n    Month and Year will behave as drop selectors\n  \n  \n    Clicking the “Done” button, clicking outside the widget, or clicking outside the text field completes the entry with the field still in focus\n  \n  \n    The user has the ability to edit date/time via text field\n  \n  \n    For Ranges, the calendars will be sequential\n  \n  \n    When selecting a month/year in the To area, the month/year in the From area should update to the month immediately following the month/year selected in the To area\n  \n\n\nDisabled State\n\nThe following applies to ranges only:\n\n\n  \n    Months will appear in sequential order\n  \n  \n    The calendar/time widget will require a unique style for active and inactive areas\n  \n  \n    User will not be able to select date or time on the To area until selection is made on the From area first\n  \n\n\n\n\n(Styles will support a disabled state for areas which depend on sequence for ranges)\n\nTime SelecTime Selection Behaviors\n\nWithin the calendar widget, the following will apply to time fields:\n\n\n  \n    Tab order will be applied to time fields\n  \n  \n    (HH:MM:SS) and TimeZone Offset will assume text field behavior\n  \n  \n    Limited to numeric entry only\n\n    \n      \n        1-12 for Hour (12 hour format), 1-24 for Hour (24 hour format)\n      \n      \n        1-60 for Minutes and Seconds\n      \n    \n  \n  \n    (12 hour format) AM/PM will behave as a dropdown\n  \n  \n    AM/PM should be removed for 24 hour format\n  \n  \n    Time Zone will be a dropdown selection\n  \n\n\nText Field Entry &amp; Validation\n\n\n  \n    Users have the ability to click-in to the text field to add/edit the Date/Time at any time when the field is active\n\n    \n      \n        Format will be enforced\n      \n      \n        Validation will require post-back\n      \n      \n        Refer to the Form Error Messaging pattern for additional details\n      \n    \n  \n  \n    Tabbing out completes the entry, removing focus from the field\n  \n  \n    For date fields, user have the ability to enter any formats besides DD MMM YYY, and the system should automatically correct the date format. (For example: user enter 10/3/2013, and the system will make a guess and reformat to 3 OCT 2013 once on keystroke up.)\n  \n  Date format input accepted:\n    \n      \n        MM/DD/YYYY **\n      \n      \n        MMM DD YYYY\n      \n      \n        DD MMM YYYY\n      \n      \n        DD/MM/YYYY **\n      \n      \n        YYYY/MM/DD\n      \n    \n  \n  \n    Date automatically correct for user and display:\n\n    \n      DD MMM YYYY\n    \n  \n\n\nNote:\n\nMM/DD/YYYY can be confused with DD/MM/YYYY, so please assume the following:\n\n  \n    If either MM or DD is above 12, then we can tell which one is the date vs month.\n  \n  \n    If both slots are below 12, make a guess based on the region. For example, if the user is in the US, guess MM/DD/YYYY format. If the user is in the London, guess DD/MM/YYYY. The more commonly used ones are DD/MM/YYYY.\n  \n\n\nField selection works the same as a typical text field with\n\n\n\nStyle\n\nSingle Date Picker\n\n\nDate Range Picker\n\n\nSingle Time Picker\n\n\n\nTime Range Picker\n\n\n\nSingle Date and Time Picker\n\n\n\nDate and Time Range Picker\n\n\n\nAccessibility\nDate or Time Input Fields\n\n\nThe initial text field assumes the typical tab orders used in form field pattern.\n\n\nDate Picker Widget\n\n\nReference:   \nhttp://www.w3.org/TR/2009/WD-wai-aria-practices-20091215/#datepicker \n\n\nGeneral\n\n\nAs a general rule the actual calendar portion of the date picker should follow a table structure where days of the week and calendar day numbers are layed out in table cells. This provides context so an assistive technology can render the day of the week; its corresponding numeric calendar day, and week number if necessary. Consequently, it is best to start with an HTML table and apply WAI-ARIA semantics for a grid. However, should the author wish to uses a div or span to represent the cells then the DOM structure for a table should be duplicated with rows marked with role=”row.”\n\n\nKeyboard Interactions\n\n\nKeyboard navigation on days that are not included the currently displayed month should move to the month automatically and lead to the day in the next or previous month. \n\n\n  \n    Space and/or Enter selects a day and deletes all multiple or range selection.\n  \n  \n    Left Arrow moves the focus to the left, continued to previous week and previous month.\n  \n  \n    Right Arrow moves the focus to right, continued to the next week and next month.\n  \n  \n    Up Arrow moves the focus to the same weekday in the previous week, continued to the previous month.\n  \n  \n    Down Arrow moves the focus to same weekday in the next week, continued to the next month.\n  \n  \n    Page Up moves the focus to same day in the previous month.\n  \n  \n    Page Down moves the focus to same day in the next month.\n  \n  \n    Shift+Page Up moves the focus to same day in the previous year.\n  \n  \n    Shift+Page Down moves the focus to same day in the next year.\n  \n  \n    Home moves the focus to the first day of the month.\n  \n  \n    End moves the focus to the last day of the month.\n  \n  \n    Ctrl+Home moves the focus to the first day of the year.\n  \n  \n    Ctrl+End moves the focus to the last day of the year.\n  \n  \n    Shift+Arrow performs continuous selection to the next/previous day/week/month.\n  \n  \n    Ctrl+Space multiple selection of certain days.\n  \n  \n    Esc closes a DatePicker that is opened as a Popup.\n  \n\n\nDo not implement keyboard navigation schemes that would place more than one calendar day in the tab order at any time as this impacts the usability of keyboard navigation. For example, using HTML anchors for the gridcells places them all in the tab order impacting the usability of keyboard navigation.\n\n\nWAI-ARIA Roles, States, and Properties\n\n\n\n  \n    The current month should have a label representing the month and year. This should have a role header but is not essential. This “label” should have a unique ID.\n  \n  \n    If the author would like to ensure that a label is announced by a screen reader, as the label changes, the label should include live region properties: aria-live=”assertive” and aria-atomic=”true”\n  \n  \n    The container for the day of week headers and numeric days of the week should have a role of grid\n  \n  \n    The grid should have an aria-labelledby property with a value equivalent to the id of the label for the grid\n  \n  \n    Each name for the day of the week should have a role columnheader and they should not be navigable via the keyboard.\n  \n  \n    Each numeric day of the week should have the role gridcell.\n  \n  \n    When a day is selected it should have aria-selected=”true” otherwise it should be set to “false” or removed.\n  \n  \n    Changes in aria states, identified here, as well as focus, should be clearly styled to show the user where their point of regard is and what days are selected.\n  \n\n\nWhen the datepicker is active a calender day of the week should always have focus. This can be achieved by setting the tabindex on that day as appropriate and then using script to give it focus. Alternatively, the grid container could set aria-activedescendant to the id of the currently focused gridcell. Keep in mind that older browsers may not support aria-activedescendant.\n\n\nTime Picker Widget\n\n\n\n  \n    (HH:MM:SS) will assume text field ‘s accessibility behavior\n  \n  \n    TimeZone Offset will assume dropdown accessibility behavior\n  \n  \n    AM/PM will assume dropdown accessibility behavior\n  \n\n\n\n\nAssets\nPSD files can be found here:\nDownload Date&amp;Time PSD source\n\nImplementation\nDate and time selectors are implemented using the standard jQuery UI datepicker widget and Magento addon.\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/date_time_selector/date_time_selector.html"
    }
    ,
  
    "guides-v2-0-config-guide-db-profiler-db-profiler-html": {
      "title": "Configure the database profiler",
      "content": "About the database profiler\nThe Magento database profiler displays all queries executed on a page, including the time for each query and what parameters were executed.\n\nStep 1: Modify the deployment configuration\nModify &lt;your Magento install dir&gt;/app/etc/env.php to add the following reference to the database profiler class:\n\n        'profiler' =&gt; [\n            'class' =&gt; '\\Magento\\Framework\\DB\\Profiler',\n            'enabled' =&gt; true,\n        ],\n\nAn example follows:\n\n 'db' =&gt;\n  array (\n    'table_prefix' =&gt; '',\n    'connection' =&gt;\n    array (\n      'default' =&gt;\n      array (\n        'host' =&gt; 'localhost',\n        'dbname' =&gt; 'magento',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n        'profiler' =&gt; [\n            'class' =&gt; '\\Magento\\Framework\\DB\\Profiler',\n            'enabled' =&gt; true,\n        ],\n      ),\n    ),\n  ),\n  \n\nStep 2: Configure the output\nConfigure the output in your Magento application boostrap file; this might be &lt;your Magento install dir&gt;/index.php or it could be located in a web server virtual host configuration.\n\nThe following example displays results in a three-column table:\n\n\n  Total time (displays the total amount of time to run all queries on the page)\n  SQL (displays all SQL queries; the row header displays the count of queries)\n  Query Params (displays the parameters for each SQL query)\n\n\nTo configure the output, add the following after the $bootstrap-&gt;run($app); line in your bootstrap file:\n\n/** @var \\Magento\\Framework\\App\\ResourceConnection $res */\n$res = \\Magento\\Framework\\App\\ObjectManager::getInstance()-&gt;get('Magento\\Framework\\App\\ResourceConnection');\n/** @var Magento\\Framework\\DB\\Profiler $profiler */\n$profiler = $res-&gt;getConnection('read')-&gt;getProfiler();\necho \"&lt;table cellpadding='0' cellspacing='0' border='1'&gt;\";\necho \"&lt;tr&gt;\";\necho \"&lt;th&gt;Time &lt;br/&gt;[Total Time: \".$profiler-&gt;getTotalElapsedSecs().\" secs]&lt;/th&gt;\";\necho \"&lt;th&gt;SQL [Total: \".$profiler-&gt;getTotalNumQueries().\" queries]&lt;/th&gt;\";\necho \"&lt;th&gt;Query Params&lt;/th&gt;\";\necho \"&lt;/tr&gt;\";\nforeach ($profiler-&gt;getQueryProfiles() as $query) {\n    /** @var Zend_Db_Profiler_Query $query*/\n    echo '&lt;tr&gt;';\n    echo '&lt;td&gt;', number_format(1000 * $query-&gt;getElapsedSecs(), 2), 'ms', '&lt;/td&gt;';\n    echo '&lt;td&gt;', $query-&gt;getQuery(), '&lt;/td&gt;';\n    echo '&lt;td&gt;', json_encode($query-&gt;getQueryParams()), '&lt;/td&gt;';\n    echo '&lt;/tr&gt;';\n}\necho \"&lt;/table&gt;\";\n\nStep 3: View the results\nGo to any page in your storefront or Magento Admin to view the results. A sample follows:\n\n\n",
      "url": "/guides/v2.0/config-guide/db-profiler/db-profiler.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-debug-theme-html": {
      "title": "Locate templates, layouts, and styles",
      "content": "What's in this topic\n\nWhen you create a Magento theme, you might need to create override files for default theme and module view files. To do so, you must determine which template, layout, and style files Magento uses. This topic describes how to do this.\n\nLocate templates\n\nTo locate the template that is responsible for a specific part of the storefront or Admin, you can use Magento built-in template hints.\n\nTo enable template hints:\n\n\n  \n    Click Stores &gt; Configuration &gt; ADVANCED &gt; Developer.\n  \n  \n    In the Scope dropdown in the upper-left corner select the view for which you want the template hints.\n  \n  In the Debug tab, set Template Path Hints for storefront to Yes. To enable path hints for Admin set Template Path Hints for Admin to Yes.\n  To save the changes, click Save Config in the upper-right corner.\n\n\n\nNow that you have enabled template hints, reload the page that you want to modify, and review the path for the template file or files that template hints show.\n\nFor example, here is how a storefront category page looks with enabled template hints:\n\n\nIn this example mini shopping cart page element is defined by the &lt;Magento_Checkout_module_dir&gt;/view/frontend/templates/cart/minicart.phtml template:\n\n\n(the template name is above the element)\n\nHere is how Customers page looks with enabled template hints in Admin:\n\n\nAlternatively, you can perform a text search in the file system by using system generated titles, CSS class names, block titles, labels, or links text as search terms.\nFor example, using a browser debug tool, you can define that the minicart block css class is minicart-wrapper.\n\n\nA search through the app directory for occurrences of “minicart-wrapper” in .phtml files returns the app/code/Magento/Checkout/view/frontend/templates/cart/minicart.phtml template.\n\nSince it is not recommended to edit the default files, you need to add overriding files if you want to customize the template. For details about overriding templates please refer to Customizing Theme Template.\n\nLocate layouts\nJust like templates, layouts are saved on a per-module basis. You can easily locate the layout file by determining in which module the templates for the element you are interested in reside in. To locate the template, you can use Template Hints or text search in the app directory, as described previously .\n\nAfter you have determined the module, you can search for the layout in the following locations:\n\n\n  &lt;current_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout/\n  &lt;parent_theme(s)_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout/\n  &lt;module_dir&gt;/view/frontend/layout/\n  &lt;module_dir&gt;/view/base/layout/\n\n\nThere is no straightforward algorithm how to define at once the exact layout file, but in most cases layout file names are self descriptive. Also you can search them for mentions of the corresponding templates.\n\nExample:\n\nLet’s say you need to locate the layout that is responsible for displaying mini shopping cart on the storefront, when the Blank theme by Magento is applied for the store view.\n\nUsing the Template Hints we determine that the template is app/code/Magento/Checkout/view/frontend/templates/cart/minicart.phtml, and in the path, we see that it belongs to the Magento_Checkout module.\n\nLet’s search for the layout following the fallback scheme:\n\n\n  Check the app/design/frontend/Magento/blank/Magento_Checkout/ layout. To locate the required layout, search this directory for occurrences of the template name, “ minicart.phtml “. No matching file is found, so we proceed to the next fallback level, which is the parent theme layouts.\n  We can find the info about parent theme in a theme configuration file theme.xml, the parent theme name is specified there in the &lt;parent&gt;&lt;/parent&gt; node. In the app/design/frontend/Magento/blank/theme.xml there’s no &lt;parent&gt; node, which means the Blank theme has no parents. So we should search on the next fallback level which is the module layouts.\n  The Magento_Checkout layouts are located in app/code/Magento/Checkout/view/frontend/layout/. After searching this directory for occurrences of “minicart.phtml”, we define that the layout we are looking for is app/code/Magento/Checkout/view/frontend/layout/default.xml.\n\n\nAfter you located the necessary layout file, you can create your custom layout file with the corresponding name in your theme folder to add extending or overriding content. Please see Customizing Theme Layouts for more details.\n\nLocate styles\nTo locate a CSS rule that is applied to a certain element, find the template for the page that contains the element. Or you can use browser debugging tools, to locate the class name.\nAfter you find the class name, use text search in the theme and module styles directories to locate the .less or .css file that defines the class. Perform the search according to the following fallback scheme:\n\n\n  Theme styles &lt;current_theme_dir&gt;/web/css/\n  Module theme styles &lt;current_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/web/css/\n  Parent theme styles &lt;parent_theme_dir&gt;/web/css/\n  Parent theme Module styles &lt;parent_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/web/css/\n  Module styles for the frontend area &lt;module_dir&gt;/view/frontend/web/css/\n  Module styles for the base area &lt;module_dir&gt;/view/base/web/css/\n\n\nExample:\n\nLet’s find the file defining on the CSS classes used for displaying the mini shopping cart on the storefront, when the Blank theme by Magento is applied for the store view.\n\nIn the mini shopping cart template app/code/Magento/Checkout/view/frontend/templates/cart/minicart.phtml the top level element has minicart-wrapper class.\n\nSo, let’s search for occurrences of “minicart-wrapper” in according to the fallback scheme:\n\n\n  Search in app/design/frontend/Magento/blank/web/css, the search returns no results.\n  Search in app/design/frontend/Magento/blank/Magento_Checkout/web/css.The “minicart-wrapper” style is defined in app/design/frontend/Magento/blank/Magento_Checkout/web/css/source/module/_minicart.less\n\n\nAfter you determine which .css or .less file defines the class, you can override the default class definition in your custom .css or .less files.  For details, see CSS in themes.\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/debug-theme.html"
    }
    ,
  
    "guides-v2-0-cloud-howtos-debug-html": {
      "title": "Configure Xdebug",
      "content": "We recommend using Xdebug for your PHP debugging. The following sections detail how to configure Xdebug and PhpStorm to work locally with settings in your environments. You can use any IDE of your choice. Please see the vendor documentation for those applications for further configuration information.\n\nTo set up Xdebug, you need to configure a file in your Git repo, configure your IDE PhpStorm, and set up port forwarding. You will configure settings in the magento.app.yaml file. After editing, you can push the Git changes across all Starter environments and Pro Integration environments to enable Xdebug. To push these settings to Pro plan Staging and Production environments, you must enter a ticket.\n\nOnce configured, you can debug CLI commands, web requests, code. Remember, all Magento Commerce (Cloud) environments are read-only. You will need to pull code to your local development environment to perform debugging. For Pro plan Staging and Production, we include additional instructions for Xdebug on those environments.\n\nRequirements\nTo run and use Xdebug, you will need the environment’s SSH URL. You can locate the information through the Project Web Interface or your spreadsheet.\n\nConfigure Xdebug\nTo configure Xdebug, you need to do the following:\n\n\n  Work in a branch to push file updates\n  Enable Xdebug for environments\n  Configure your IDE, like PhpStorm\n  Set up port forwarding\n\n\nFor configuring on Pro plan Staging and Production, you need to enter a ticket for Staging and Production.\n\nGet started with a branch\nTo add Xdebug, we recommend creating a branch to work in and add the files.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Enable Xdebug in your environment\n  Enable Xdebug by adding it to the extensions section of magento.app.yaml. When you push this update to Git and deploy to environments, the debugger is available.\n\n  You can enable Xdebug directly to all Starter environments and Pro Integration environments. For Pro Staging and Production, you need to update this file and enter a Support ticket to have it enabled. We will get Xdebug enabled onto those environments for you.\n\n  \n\n  \n    In your local terminal, open .magento.app.yaml in a text editor.\n    \n      In the runtime section, under extensions, add xdebug. For example:\n\n       runtime:\n    extensions:\n   - mcrypt\n   - redis\n   - xsl\n   - json\n   - xdebug\n      \n    \n    \n      Optionally, modify the timeout. A default timeout of 300 seconds (5 minutes) is set in php-fpm and will end your session. To avoid the timeout, add the following lines to the web: section of .magento.app.yaml:\n\n       web:\n     commands:\n         start: |\n             cat /etc/php/7.0/fpm/php-fpm.conf | sed -e 's/request_terminate_timeout.*//g' &gt; /tmp/php-fpm.conf\n             /usr/sbin/php-fpm7.0 -y /tmp/php-fpm.conf\n      \n    \n    Save your changes to .magento.app.yaml and exit the text editor.\n    \n      Add, commit, and push the changes to redeploy the environment:\n\n       git add -A\n git commit -m \"Add xdebug\"\n git push origin &lt;environment ID&gt;\n      \n    \n  \n\n  When deployed to Starter environments and Pro Integration environments, Xdebug is now available. You should continue configuring your IDE. For PhpStorm, see Configure PhpStorm.\n\n  Configure PhpStorm\n  You need to configure PhpStorm to properly work with Xdebug.\n\n  \n    Open your PhpStorm project.\n    \n      Open the settings for PhpStorm.\n\n      \n        On Mac, select File &gt; Preferences.\n        On Windows/Linux, select File &gt; Settings.\n      \n    \n    Expand and locate Languages &amp; Frameworks &gt; PHP &gt; Servers section in settings.\n    Add a server configuration. Click the + to add a server. Notice at the top, it will show the project name in grey, just for reference. This will create a “server” configuration. This will be used to listen to port 9000 locally, which will be forwarded.\n    \n      Configure settings for the new server:\n\n      \n        Name: enter the same as the hostname. This value ise used in and must match the value for PHP_IDE_CONFIG variable in Debug CLI commands.\n        Host: enter localhost\n        Port: enter 80\n        Debugger: set to Xdebug in the drop-down\n      \n    \n    Select the Use path mappings option. In the files/directories, the root of the project displays that you opened for the added server.\n    \n      In the Absolute path on the server column, click  (Edit) and add a setting based on the environment:\n\n      \n        For all Starter environments and Pro Integration environments, the remote path is /app.\n        \n          For Pro Staging and Production environments:\n\n          \n            Production: /app/&lt;project_code&gt;/\n            Staging:  /app/&lt;project_code&gt;_stg/\n          \n        \n      \n    \n  \n\n  Set up port forwarding\n  You need to set up port forwarding. This is necessary to map the XDEBUG connection from the server to your local system to PHPSTORM and xdebug locally can track along with it\n\n  To do any type of debugging, you must forward port 9000 from your Magento Commerce (Cloud) server to your local machine. See one of the following sections:\n\n  \n    Port forwarding on Mac or UNIX\n    Port forwarding on Windows\n  \n\n  Port forwarding on Mac or UNIX\n  To set up port forwarding on a Mac or in a Unix environment, you will enter a command in a terminal.\n\n  \n    Open a terminal.\n    \n      Enter the following command:\n\n       ssh -R 9000:localhost:9000 &lt;ssh url&gt;\n      \n\n      Add the -v option to the SSH command to show in the terminal whenever a socket is connected to the port that is being forwarded.\n    \n  \n\n  If an “unable to connect” or “could not listen to port on remote” error is displayed, there could be another active SSH session persisting on the server that is occupying port 9000. If that connection isn’t being used, you can terminate it.\n\n  To troubleshoot the connection:\n\n  \n    SSH to the integration, staging, or production server.\n    Enter who to view a list of SSH sessions.\n    \n      View existing SSH sessions by user. Be careful to not affect a user other than yourself!\n\n      \n        Integration: user names are similar to dd2q5ct7mhgus\n        Staging: user names are similar to dd2q5ct7mhgus_stg\n        Production: user names are similar to dd2q5ct7mhgus\n      \n    \n    For a user session that is older than yours, find the pseudo-terminal (PTS) value. For example, pts/0.\n    \n      Kill the process ID (PID) corresponding to the PTS value using the following commands:\n\n      ps aux | grep ssh\nkill &lt;PID&gt;\n      \n\n      For example, suppose ps aux | grep ssh returned the following:\n\n      dd2q5ct7mhgus        5504  0.0  0.0  82612  3664 ?      S    18:45   0:00 sshd: dd2q5ct7mhgus@pts/0\n      \n\n      To terminate the connection, you enter a kill command with the process ID (PID). For example:\n\n      kill 3664\n      \n    \n  \n\n  Port forwarding on Windows\n  To set up port forwarding (SSH tunneling) on Windows, you will configure your Windows terminal application. For this example, we walk through creating an SSH tunnel using Putty. You can use other applications such as Cygwin. For more information on other applications, please see the vendor documentation provided with those applications.\n\n  To set up an SSH tunnel on Windows using Putty:\n\n  \n    If you haven’t already done so, download Putty.\n    Start Putty.\n    In the Category pane, click Session.\n    \n      Enter the following information:\n\n      \n        Host Name (or IP address) field: Enter your Cloud server’s SSH URL\n        Port field: Enter 22\n      \n\n      \n    \n    In the Category pane, click Connection &gt; SSH &gt; Tunnels.\n    \n      Enter the following information:\n\n      \n        Source port field: Enter 9000\n        Destination field: Enter 127.0.0.1:9000\n        Click Remote\n      \n    \n    \n      Click Add.\n\n      \n    \n    In the Category pane, click Session.\n    In the Saved Sessions field, enter a name for this SSH tunnel.\n    \n      Click Save.\n\n      \n    \n    To test the SSH tunnel, click Load, then click Open.\n  \n\n  If an “unable to connect” error displays, verify all of the following:\n\n  \n    All Putty settings are correct\n    You are running Putty on the machine on which your private Magento Commerce (Cloud) SSH keys are located\n  \n\n  Configure Pro Staging and Production\n  To complete configuration for Pro plan Staging and Production environments, you must enter a Support ticket to have Xdebug enabled and configured in Staging and Production environments.\n\n  We will enable Xdebug in the environment. Be aware, this will require a redeployment of Staging and Production.\n\n  SSH access to Xdebug environments\n  For initiating debugging, performing setup, and more, you need the SSH commands for accessing the environments. You can get this information, through the Project Web Interface and your project spreadsheet.\n\n  For Starter environments and Pro Integration environments, you can use the following Magento Cloud CLI command to SSH into those environments:\n\n  magento-cloud environment:ssh --pipe -e &lt;environment ID&gt;\n  \n\n  To use Xdebug, SSH to the environment as follows:\n\n  ssh -R &lt;xdebug listen port&gt;:&lt;host&gt;:&lt;xdebug listen port&gt; &lt;SSH URL&gt;\n  \n\n  For example,\n\n  ssh -R 9000:localhost:9000 pwga8A0bhuk7o-mybranch@ssh.us.magentosite.cloud\n  \n\n  Debug for Pro Staging and Production\n  To use Xdebug specifically on Pro plan Staging and Production environment, you create a separate SSH tunnel and web session only you have access to. This usage differs from typical access, only providing access to you and not to all users.\n\n  You will need the following:\n\n  \n    SSH commands for accessing the environments. You can get this information, through the Project Web Interface and your project spreadsheet.\n    The xdebug_key value we set when configuring the Staging and Pro environments\n  \n\n  Set up an SSH tunnel to Staging or Production environment:\n\n  \n    Open a terminal.\n    \n      Enter the following command to clean up all SSH sessions.\n\n       ssh USERNAME@CLUSTER.ent.magento.cloud 'rm /run/platform/USERNAME/xdebug.sock'\n      \n    \n    \n      Enter the following command to set up the SSH tunnel for Xdebug:\n\n       ssh -R /run/platform/USERNAME/xdebug.sock:localhost:9000 -N USERNAME@CLUSTER.ent.magento.cloud\n      \n    \n  \n\n  To start debugging, use the following commands with the environment URL:\n\n  \n    \n      To enable remote debugging, visit the site in the browser with the following added to the URL where KEY is value for xdebug_key:\n\n       ?XDEBUG_SESSION_START=KEY\n      \n\n      This sets the cookie that sends browser requests to trigger Xdebug.\n    \n    Complete your debugging with Xdebug.\n    \n      When you are ready to end the session, you can use the following command to remove the cookie and end debugging through the browser where KEY is value for xdebug_key:\n\n       ?XDEBUG_SESSION_STOP=KEY\n      \n    \n  \n\n  Please note, XDEBUG_SESSION_STARTpassed by POST requersts are not supported at this time.\n\n  Debug CLI commands\n  This section walks through debugging CLI commands. To debug, you will need the SSH commands for your environments.\n\n  \n    SSH into the server you want to debug using CLI commands.\n    \n      Create the following environment variables:\n\n       export XDEBUG_CONFIG='PHPSTORM'\n export PHP_IDE_CONFIG=\"serverName=&lt;name of the server that is configured in PHPSTORM&gt;\"\n      \n    \n  \n\n  These variables will be removed when SSH session is over. When adding the variables, you can add runtime options:\n\n  php -d xdebug.profiler_enable=On -d xdebug.max_nesting_level=9999 ...\n  \n\n  If you expect to SSH and debug multiple times, you can put the export commands into a bash script in the /tmp directory to run them each time.\n\n  For debugging web requests\n  The following steps help you debug web requests.\n\n  \n    On the Extension menu, click Debug to enable.\n    Right click and on the options menu set the IDE key to PHPSTORM.\n    Install the Xdebug client on the browser. Configure and enable it.\n  \n\n  Example set up on Chrome\n  This section discusses how to use Xdebug in Chrome using the Xdebug Helper extension. For information about Xdebug tools for other browsers, consult the browser documentation.\n\n  To use Xdebug Helper with Chrome:\n\n  \n    Create an SSH tunnel to the Cloud server.\n    Install the Xdebug Helper extension from the Chrome store.\n    \n      Enable the extension in Chrome as shown in the following figure.\n\n      \n    \n    In Chrome, right-click  in the Chrome toolbar.\n    From the pop-up menu, click Options.\n    From the IDE Key list, click PhpStorm.\n    \n      Click Save.\n\n      \n    \n    Open your PhpStorm project.\n    \n      In the top navigation bar, click   (Start listening).\n\n      If the navigation bar isn’t displayed, click View &gt; Navigation Bar.\n    \n    In the PhpStorm navigation pane, double-click the PHP file to test.\n  \n\n  Debug code locally\n  Due to your environments being read-only, you need to pull code locally from an environment or specific Git branch/respository to perform debugging.\n\n  The method you choose is up to you. You have the following options:\n\n  \n    \n      Check out code from Git and run composer install\n\n      This method works unless composer.json references packages in private repositories to which you don’t have access. This method results in getting the entire Magento codebase.\n    \n    \n      Copy the vendor, app, pub, lib, and setup directories\n\n      This method results in your having all code you can possibly test. Depending on how many static assets you have, it could result in a long transfer with a large volume of files.\n    \n    \n      Copy the vendor directory only\n\n      Because most Magento and third-party code is in the vendor directory, this method is likely to result in good testing although you won’t be testing the entire codebase.\n    \n  \n\n  To compress files and copy them to your local machine:\n\n  \n    SSH to the environment.\n    \n      Enter the following command:\n\n      tar -czf /tmp/&lt;file name&gt;.tgz &lt;directory list&gt;\n      \n\n      For example, to compress the vendor directory only, enter\n\n      tar -czf /tmp/vendor.tgz vendor\n      \n    \n    \n      On your local environment with PhpStorm, enter the following commands:\n\n      cd &lt;phpstorm project root dir&gt;\nrsync &lt;SSH URL&gt;:/tmp/&lt;file name&gt;.tgz .\ntar xzf &lt;file name&gt;.tgz\n      \n    \n  \n\n  Troubleshooting Xdebug\n  If you you suspend your laptop (like closing your lid on a Mac), then your SSH session may no longer work when your computer resumes. But the TCP session for the SSH connection on the server might not timeout on the server, leaving any open debug sessions active and preventing you from using the nginx server.\n\n  Due to not having access to manually restart the nginx server, you need to locate and terminate SSH processes that haven’t timed out yet.\n\n  \n    SSH to the integration, staging, or production server.\n    Enter who to view a list of SSH sessions.\n    \n      View existing SSH sessions by user. Be careful to not affect a user other than yourself!\n\n      \n        Integration: user names are similar to dd2q5ct7mhgus\n        Staging: user names are similar to dd2q5ct7mhgus_stg\n        Production: user names are similar to dd2q5ct7mhgus\n      \n    \n    For a user session that is older than yours, find the pseudo-terminal (PTS) value. For example, pts/0.\n    \n      Kill the process ID (PID) corresponding to the PTS value using the following commands:\n\n      ps aux | grep ssh\nkill &lt;PID&gt;\n      \n\n      For example, suppose ps aux | grep ssh returned the following:\n\n      dd2q5ct7mhgus        5504  0.0  0.0  82612  3664 ?      S    18:45   0:00 sshd: dd2q5ct7mhgus@pts/0\n      \n\n      To terminate the connection, you enter a kill command with the process ID (PID). For example:\n\n      kill 3664\n      \n    \n  \n\n",
      "url": "/guides/v2.0/cloud/howtos/debug.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-depend-inj-html": {
      "title": "Dependency injection",
      "content": "Magento 2 uses Dependency Injection to replace functionality provided by the Mage class in Magento 1.x.\n\nDependency Injection is a design pattern that allows an object A to declare its dependencies to an external object B that supplies those dependencies.\nThe dependencies declared by A are usually class interfaces and the dependencies B provides are the concrete implementations for those interfaces.\n\nThis allows for loose coupling of code because object A no longer needs to be concerned with initializing its own dependencies.\nObject B decides which implementations to provide to object A based on a configuration or desired behavior.\n\nThis is an important concept to understand for extension developers because it forms the basis of how Magento composes its classes.\n\nDependency inversion principle\n\nFollow the dependency inversion principle and use abstractions in your code to reduce code dependencies.\nThis means that your high level classes should use the interfaces of low level classes instead of working with them directly.\n\nUsing interfaces in your code reduces the risk of incompatibility bugs when Magento changes the underlying implementation of those interfaces.\nIt also lets you focus on what a class does instead of how its implemented.\n\nSince the Magento codebase follows this principle, you can map your own implementation of a Magento interface to a dependent class or service using the di.xml file.\n\nObject manager\n\nThe ObjectManager is a Magento service class that instantiates objects at the beginning of the bootstrapping process.\n\nMagento uses class constructor signatures to retrieve information about an object’s constructor dependencies.\nWhen a class is constructed, the object manager injects the class’s dependencies, defined in the di.xml file, into the class constructor.\n\nSince the object manager provides its service indirectly, your class should not depend on the ObjectManager object itself.\nThe only exceptions are custom factories with complex logic and integration tests that need environment setup.\n\nCompiling dependencies\n\nMagento uses its code compiler tool to collect all class dependency information and stores it in files.\nDuring the class creation process, the object manager uses this information to create concrete objects in the application.\n\nService classes that do not exist in the codebase, such as proxies, factories, and interceptors that are declared in code or in a configuration, are generated with the help of the compiler.\n\nInjection types used in Magento\n\nThe following code sample highlights the two types of dependency injections used in Magento:\n\nnamespace Magento\\Backend\\Model\\Menu;\nclass Builder\n{\n    /**\n     * @param \\Magento\\Backend\\Model\\Menu\\Item\\Factory $menuItemFactory\n     * @param \\Magento\\Backend\\Model\\Menu $menu\n     */\n    public function __construct(\n        Magento\\Backend\\Model\\Menu\\Item\\Factory $menuItemFactory,  // Service dependency\n        Magento\\Backend\\Model\\Menu $menu  // Service dependency\n    ) {\n        $this-&gt;_itemFactory = $menuItemFactory;\n        $this-&gt;_menu = $menu;\n    }\n\n    public function processCommand(\\Magento\\Backend\\Model\\Menu\\Builder\\CommandAbstract $command) // API param\n    {\n        // processCommand Code\n    }\n}\n\n\nConstructor injection\n\nIn the code sample, the Builder class declares its dependency on the Factory and Menu classes in its constructor.\nMagento uses the di.xml file to determine which implementations to inject into the Builder class.\n\nOptional dependencies\n\nOptional dependencies are objects that your class uses for specific methods and scenarios.\nIf a class is expensive to instantiate and your class does not always use it, consider using a proxy.\n\nYou must use constructor dependency injection for all optional and required dependencies of an object.\n\nMethod injection\n\nIn the code sample, the Builder class is also dependent on the CommandAbstract class for its processCommand() method.\n\nMethod injection involves passing in a dependency as a method parameter to use it in the class logic.\nWhen an object needs to perform actions on a dependency that cannot be injected, use method injection.\n\nDependency types\n\nInjectable\n\nInjectable objects are singleton service objects obtained through dependency injection.\nThe object manager uses the configuration in the di.xml file to create these objects and inject them into constructors.\n\nInjectable objects can depend on other injectable objects in their constructor as long as the dependency chain does not circle back to the original injectable object.\n\nNewable/non-injectable\n\nNewable, or non-injectable, objects are objects that cannot be injected.\nThey are obtained by creating a new class instance every time they are needed.\n\nTransient objects, such as those that require external input from the user or database, fall into this category.\nIf you attempt to inject these objects, you will either receive an incomplete, incorrect object or an error that the object could not be created.\n\nFor example, you cannot depend on a model object, such as Product, because you need to provide a product id or explicitly request a new, empty instance to get a Product object. \nSince you cannot specify this data in the constructor signature, Magento cannot inject this object.\n\nTo get around this limitation, injectable objects can depend on factories that produce newable objects.\n\nRelated topics\n\n\n  The di.xml file\n  ObjectManager\n  Plugins\n  Routing\n  Magento application initialization and bootstrap\n  Module Dependencies\n  Programming concepts\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/depend-inj.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-versioning-dependencies-html": {
      "title": "Module version dependencies",
      "content": "Magento platform clients need notifications about breaking changes for their installed extensions and customizations when they upgrade their Magento installation.\n\nTo achieve this, all third-party modules must obey the following rules:\n\n\n  You must specify the dependency on all modules listed in the ‘require’ section of your module’s composer.json file.\n  Do not specify a dependency on meta packages (e.g. ‘product-community-edition’).\n  Specify a module’s MAJOR and/or MINOR version number if you use any of that module’s customization points.\n  Specify a module’s MAJOR, MINOR, and PATCH versions if you call or customize a module’s private code.\n\n\nService Provider Interfaces\n\nA PHP Interface in Magento can be used several ways by the core product and extension developers.\n\n\n  As an API. An interface is called by PHP code.\n  As a Service Provider Interface (SPI). An interface can be implemented, allowing code to provide functionality to the platform.\n  As both. For example, in a service contract, we expect all calls to a module to be done through the Interface (API), but we also have support for third parties to provide alternate implementations (SPI).\nAPIs and SPIs are not mutually exclusive. Therefore, we do not distinguish them separately. SPIs are annotated the same as APIs.\n\n\nHowever, the dependency rules are different:\n\n\n  \n    If a module uses (calls) an API, it should be dependent on the MAJOR version and the system provides backward compatibility in scope of current major version.\n\n    API dependency example\n  \n\n\n{\n    ...\n    \"require\": {\n        \"magento/customer\": \"~2.0\",\n    },\n    ...\n}\n\n\n  If a module implements an API/SPI, it should be dependent on the MAJOR+MINOR version, and the system provides backward compatibility in scope of the current minor version.\n SPI dependency example\n\n\n{\n    ...\n    \"require\": {\n        \"magento/customer\": \"~2.0.0\",\n    },\n    ...\n}\n\nDetermine module dependency\n\nThe following table lists common use cases for API/customization points and the version dependency for each use case.\nUse this table to set the appropriate version dependency on a module based on how you use its API/customization points.\n\n\n  \n    \n      API/Customization Point\n      Third-party Use Case\n      Version Dependency\n    \n  \n  \n    \n      PHP Interface (marked with @api)\n      Inject in a constructor and/or call methods\n      MAJOR\n    \n    \n       \n      Implement the interface\n      MINOR\n    \n    \n       \n      Re-define the interface preference in di.xml\n      MINOR\n    \n    \n       \n      Add a plugin to the interface\n      MAJOR\n    \n  \n  \n    \n      PHP Class (marked with @api)\n      Inject in a constructor\n      MAJOR\n    \n    \n       \n      Extend from an abstract class\n      MAJOR\n    \n    \n       \n      Add a plugin to the class\n      MAJOR\n    \n    \n       \n      Configure class preference in di.xml\n      MAJOR\n    \n    \n       \n      Configure constructor argument in di.xml\n      MAJOR\n    \n  \n  \n    \n      JavaScript Interface (marked with @api)\n      Inject in a constructor and/or call methods\n      MAJOR\n    \n    \n       \n      Implement the interface\n      MINOR\n    \n  \n  \n    \n      Javascript class (marked with @api)\n      Inject in a constructor\n      MAJOR\n    \n    \n       \n      Extend from a class\n      MINOR\n    \n    \n       \n      Override a method\n      MINOR\n    \n    \n       \n      Subscribe to an event\n      MINOR\n    \n  \n  \n    \n      Virtual Type\n      Configure a virtual type in the di.xml file as a class dependency\n      MAJOR\n    \n  \n  \n    \n      URL Paths\n      Link to from custom pages\n      MAJOR\n    \n  \n  \n    \n      Console commands and their arguments\n      Called in custom shell scripts\n      MAJOR\n    \n  \n  \n    \n      Less variables and mixins\n      Use in LESS declarations\n      MAJOR\n    \n  \n  \n    \n      Message queue topics and data types\n      Consume a topic/message\n      MINOR\n    \n    \n       \n      Publish an existing topic\n      MAJOR\n    \n  \n  \n    \n      Layout handles declared by modules\n      Instance blocks added\n      MAJOR\n    \n    \n       \n      Blocks and containers moved/removed\n      MAJOR\n    \n  \n  \n    \n      Static and dynamic events triggered by a component\n      Subscribing to event\n      MAJOR\n    \n  \n  \n    \n      XML configuration type\n      Provide another configuration to the configuration type\n      MAJOR\n    \n    \n       \n      Extend existing XSD\n      MINOR\n    \n  \n  \n    \n      Structure of System Configuration fields used by module\n      Configure module through System Configuration values\n      MAJOR\n    \n    \n       \n      Read system configuration using config path\n      MAJOR\n    \n  \n  \n    \n      Database structure\n      Read/write to a table\n      MAJOR\n    \n    \n       \n      Add a column to a table\n      MINOR\n    \n    \n       \n      Declare a foreign key on a module table\n      MAJOR\n    \n    \n       \n      Declare a trigger on a module table\n      MAJOR\n    \n    \n       \n      Read from table or write to table from a temporary table\n      PATCH\n    \n  \n\n",
      "url": "/guides/v2.0/extension-dev-guide/versioning/dependencies.html"
    }
    ,
  
    "guides-v2-0-howdoi-deploy-deploy-to-prod-html": {
      "title": "Deploy Magento to production",
      "content": "See Deployment steps.\n",
      "url": "/guides/v2.0/howdoi/deploy/deploy-to-prod.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-service-contracts-design-patterns-html": {
      "title": "Service contract design patterns",
      "content": "In the programming community, a design pattern is a recommended way of writing code that includes when to use, or not use, the pattern. Think of a design pattern as a best practice with conditions.\nDesign patterns for service contracts tell you which types of interfaces to define, and how and where to define and implement those  interfaces.\n\n\n         Service contract data interfaces are now mutable.\n\n\nInterface types and locations\nA service contract must define data interfaces, which preserve data integrity, and service interfaces, which hide business logic from service requestors.\nData interfaces define functions that return information about data entities, return search results, and set validation rules and return validation results. You must define the data interfaces for a service contract in the Api/Data subdirectory for a module.\n\n   Service interfaces include management, repository, and metadata interfaces.\n   You must define the service interfaces for a service contract in the Api subdirectory for a module.\n\n\nData interfaces\nDefine data interfaces in the Api/Data subdirectory for a module.\nFor example, the data interfaces for the Customer module are in the /app/code/Magento/Customer/Api/Data subdirectory.\n\nData search results interfaces\nWhen you pass search criteria to a getList() call, a search results interface is returned with the search results.\nYou must define one interface for each data entity for type hinting purposes. That is, the getItems() function in the\n   CustomerSearchResultsInterface returns an array of CustomerInterface data entities.\n   In GroupSearchResultsInterface, thegetItems() function returns an array of GroupInterface data entities.\n\n\nService interfaces\nService interfaces include several interface subtypes:\n\n   Repository interfaces\n   Management interfaces\n   Metadata interfaces\n\nFor file names and coding standards, follow the defined PHP coding standards.\nPlace service interfaces in the top-level Api directory for a module.\nRepository interfaces\nRepository interfaces provide access to persistent data entities.\nFor example, persistent data entities for the Customer module include Customer, Address, and Group. Consequently, repository interfaces for the Customer module are:\n\n   CustomerRepositoryInterface\n   AddressRepositoryInterface\n   GroupRepositoryInterface\n\nRepository interfaces must provide these functions:\n\n   \n      Function\n      Description\n   \n   \n      \n         save(data entity interface)\n      \n      \n         If an ID is not specified, creates a record.\n         If an ID is specified, updates the record for the specified ID.\n      \n   \n   \n      \n         get(id)\n      \n      \n         Performs a database lookup by ID.\n         Returns a data entity interface, such as CustomerInterface or AddressInterface.\n      \n   \n   \n      \n         getList(search criteria)\n      \n      \n         Performs a search for all data entities that match specified search criteria.\n         Returns a search results interface that gives access to the set of matches.\n      \n   \n   \n      \n         delete(data entity interface)\n      \n      \n         Deletes a specified entity. The entity contains the key (ID).\n      \n   \n   \n      \n         deleteById(id)\n      \n      \n         Deletes a specified entity by key (ID).\n      \n   \n\nEach data entity has a corresponding interface. Consequently, the get() function in the corresponding interface, for example, can return the exact type.\nManagement interfaces\nManagement interfaces provide management functions that are not related to repositories. For example:\n\n   \n      Interface\n      Description\n   \n   \n      \n         AccountManagementInterface\n      \n      \n         Defines the createAccount(), changePassword(), activate(), and isEmailAvailable() functions.\n      \n   \n   \n      \n         AddressManagementInterface\n      \n      \n         Defines the validate() function that validates an address.\n      \n   \n\nRelated topics\n\n   Service contracts\n   Configure services as web APIs\n   \n\n",
      "url": "/guides/v2.0/extension-dev-guide/service-contracts/design-patterns.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-prepare-dev-modtypes-html": {
      "title": "Component types",
      "content": "Each component type has a different directory structure and different contents for composer.json.\n\n\n\n  The following table discusses the component types that Magento Marketplace supports. The composer type column in the following table specifies the value of the type field you must add to composer.json for that type of component.\n\n  \n\n\nFriendly name\ncomposer.json type\nDescription\n\n\nMetapackage\nmetapackage\nTechnically, a Composer package type, not a Magento component type. A metapackage consists of only a composer.json that specifies a list of components and their dependencies. \nFor example, both Magento Open Source and Magento Commerce are metapackages.\n\n\nModule\nmagento2-module\nCode that modifies Magento application behavior. You can upload a single module to the Magento Marketplace or your module can be dependent on some parent package.\n\n\nTheme\nmagento2-theme\nCode that modifies the look and feel of the storefront or Magento Admin.\n\n\nLanguage package\nmagento2-language\nTranslations for the storefront or Admin.\n\n\n\n\n  Next\n  About component file structure\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/prepare/dev-modtypes.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-prepare-dev-summary-html": {
      "title": "Roadmap for developing and packaging components",
      "content": "To develop your component, use the following steps:\n\n\n  Learn about using Composer with your component.\n  Build your component\n  \n    Package a component\n\n    Use our validation tool to check your package before you distribute it.\n  \n  Validate your component\n  \n    Upload the components to the Magento Marketplace.\n\n    See the Magento Marketplace User Guide for details.\n  \n\n",
      "url": "/guides/v2.0/extension-dev-guide/prepare/dev-summary.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-dev-add-update-html": {
      "title": "Add or update components",
      "content": "A contributing developer updates components by specifying components and their versions in Magento’s composer.json.\n\nTo update components if you’re not a contributing developer, see Updating the Magento application and components.\n\nYou can either add a require section to composer.json or you can use the composer require command as follows:\n\n\n  Log in to the Magento server, or switch to, the Magento file system owner.\n  \n    Change to the directory to which you cloned the Magento application. For example,\n\n    cd /var/www/magento2\n    \n  \n\n\nYou have the following options:\n\nUse the composer require command\nCommand usage:\n\ncomposer require &lt;vendor&gt;/&lt;name&gt;:&lt;version&gt;\n\n\nFor example,\n\ncomposer require example/module:1.0.0\n\n\nWait while Composer updates dependencies and installs the component.\n\nAdd a require section to composer.json\nOpen composer.json in a text editor.\n\nAdd a require section like the following:\n\n\t\"require\": {\n\t\t\"&lt;vendor&gt;/&lt;name&gt;\": \"&lt;version&gt;\",\n\t\t\"&lt;vendor&gt;/&lt;name&gt;\": \"&lt;version&gt;\"\n\t}\n\n\nSave your changes to composer.json, exit the text editor, and enter composer update\n\nFor more information\nIf you have issues, see Composer troubleshooting.\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/dev_add-update.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-dev-downgrade-html": {
      "title": "Change to a released version",
      "content": "This topic discusses how a contributing developer can change versions of the Magento software after cloning the develop branch. This might be necessary to perform some tasks that require a specific Magento version other than develop.\n\nThe develop branch is the default branch, which means you get it by default when you clone the Magento 2 GitHub repository. For some tasks, such as data migration from Magento 1.x to Magento 2.x, you must switch to a release tag.\n\nYou have the following options:\n\n\n  \n    (Easier). If you haven’t done any customizations, you should uninstall the Magento software and reinstall it with the released version. Uninstalling not only drops the database tables, it also clears the Magento var directory, enabling you to start over with no issues.\n\n    For more information, see Change versions by uninstalling the Magento software\n  \n  \n    If you have done customizations and don’t want to lose them, back up the Magento system, switch to the released branch, and install in a new database instance.\n\n    For more information, see Change versions by installing the Magento software in a new database instance\n\n    You can migrate your customizations (both in the file system and in the database) from the backups you made or directly using database and file system tools.\n  \n\n\nChange versions by uninstalling the Magento software\n\nTo change versions after cloning:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Use the following command to uninstall the Magento software:\n\n    php &lt;your Magento clone dir&gt;/bin/magento setup:uninstall\n    \n  \n  Either remove your old Magento clone directory or update the Magento software.\n  \n    If you haven’t already done so, clone the Magento 2 GitHub repository as follows:\n\n    git clone git@github.com:magento/magento2.git\n    \n  \n  \n    Change to release tag as follows:\n\n    git checkout tags/&lt;tag name&gt;  [-b &lt;branch name&gt;]\n    \n\n    For example, to check out the 2.0.6 release tag in a new branch named 2.0.6, enter\n\n    git checkout tags/2.0.6 -b 2.0.6\n    \n  \n  Install the Magento software using the command line or Setup Wizard.\n\n\nChange versions by installing the Magento software in a new database instance\n\nTo change versions after cloning:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Create a new database instance for your installation.\n  \n    Back up the Magento file system, database, and media files:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:backup --code --media --db\n    \n  \n  \n    Change to release tag as follows:\n\n    git checkout tags/&lt;tag name&gt;  [-b &lt;branch name&gt;]\n    \n\n    For example, to check out the 2.0.2 release tag in a new branch named 2.0.2, enter\n\n    git checkout tags/2.0.2 -b 2.0.2\n    \n  \n  \n    Manually clear Magento var directories:\n\n    rm -rf &lt;your Magento install dir&gt;/var/cache/* &lt;your Magento install dir&gt;/var/page_cache/* &lt;your Magento install dir&gt;/var/generation/*\n    \n  \n  \n    Install the Magento software in your new database instance.\n\n    You can install using either the command line or Setup Wizard.\n  \n\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/dev_downgrade.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-dev-install-html": {
      "title": "(Contributor) Clone the Magento repository",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\nIntended audience\nThe audience for this topic is anyone who contributes to the Magento Open Source codebase. You should be highly technical, understand Composer and Git commands, and be able to upgrade the Magento system software and extensions using those commands. If that isn’t you, go back and choose another starting point.\n\n\n  If you clone the Magento 2 GitHub repository, you cannot use the Magento software in a production environment. You cannot have a live store that accepts orders and so on.\n\n\nPrerequisites\n\n\n  Before you continue, make sure you’ve done all of the following:\n\n  \n    \n      Set up a server that meets our system requirements\n\n      For details, see Prerequisites\n    \n    \n      Created the Magento file system owner\n    \n  \n\n  \n\n    Composer and Magento\n\n    We use Composer for dependency management. Composer enables us to manage the Magento components and their dependencies.\n\n    As an integrator, you want to manage each of your Magento core components and third-party components using the Component Manager and System Upgrade.\n\n    To do so, you start by creating a Composer project from our metapackage. The metapackage installs each component so it can be centrally managed after installation.\n\n    Composer provides you with the following advantages:\n\n    \n      Enables you to reuse third-party libraries without bundling them with source code\n      Component-based architecture with robust dependency management\n      Manages dependencies to reduce extension conflicts and compatibility issues\n      Versioned dependencies\n      Semantic versioning\n      Supports the PHP Framework Interoperability standard\n    \n\n    Install Composer\n    \n\n      First, check  if Composer is already installed:\n\n      In a command prompt, enter any of the following commands:\n\n      \n        composer --help\n        composer list --help\n      \n\n      If command help displays, Composer is already installed.\n\n      If an error displays, use the following steps to install Composer.\n\n      To install Composer:\n\n      \n        \n          Change to or create an empty directory on your Magento server.\n        \n        \n          Enter the following commands:\n\n          curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n          \n\n          For additional installation options, see the Composer installation documentation.\n        \n      \n\n      Clone the Magento repository\n      This section discusses how to get current code by cloning the Magento GitHub’s develop branch. You can clone either a release branch or the develop branch:\n\n      \n        \n          Release branches like 2.1.0 are more stable\n\n          You must use a released branch with the Data Migration Tool.\n        \n        \n          develop is more recent\n        \n      \n\n      Currently, the develop branch is the default but you can checkout a release branch like 2.1.0 after cloning.\n\n      Creating an authorization file\n      The Magento 2 GitHub repository requires you to authenticate. The composer install commands fails if you do not. To authenticate, generate authentication keys, after which you create an auth.json file in the home directory of the Magento file system owner.\n\n      Create auth.json\n      \n\n        To create auth.json:\n\n        \n          Log in to your Magento server as, or switch to, the Magento file system owner.\n          \n            Edit or create auth.json in the user’s home directory.\n\n            The following example shows how to add repo.magento.com authentication to an existing file:\n\n            {\n   \"github-oauth\": {\n     \"github.com\": \"&lt;your github oauth id&gt;\"\n   },\n   \"http-basic\": {\n      \"repo.magento.com\": {\n         \"username\": \"&lt;public key&gt;\",\n         \"password\": \"&lt;private key&gt;\"\n      }\n   }\n}\n            \n\n   \tFor example, if your user name is magento_user, create or edit /home/magento_user/.composer/auth.json\n          \n        \n\n        How to clone the Magento 2 GitHub repository\n        You can clone the Magento 2 GitHub repository using either SSH or HTTPS protocols:\n\n        \n          Use SSH for better security (no user name and password are exchanged). This requires you to share a public key with GitHub.\n          Use HTTPS if you don’t share an SSH key with GitHub (your user name and password are encrypted before being sent to GitHub).\n        \n\n        See one of the following section:\n\n        \n          Clone with SSH\n          Clone with HTTPS\n        \n\n        Clone with SSH\n\n        To clone the Magento GitHub repository using the SSH protocol:\n\n        \n          \n            Copy to the clipboard the Magento GitHub repository SSH clone URL.\n\n            a.\tIn a web browser, go to the Magento GitHub repository.\n\n            b.\tOn the right side of the page, under the clone URL field, click SSH.\n\n            c.\tClick the Copy to clipboard button.\n\n            The following figure shows an example.\n\n            \n          \n          \n            Change to your web server’s docroot directory.\nTypically, for Ubuntu, it’s /var/www or /var/www/html and for CentOS it’s /var/www/html.\n\n            Need help locating the docroot? Click here.\n          \n          \n            Enter git clone and paste the value you obtained from step 1.\n\n            An example follows:\n\n            git clone git@github.com:magento/magento2.git\n            \n          \n          \n            Wait for the repository to clone on your server.\n\n            \n    If the following error displays, make sure you shared your SSH key with GitHub: \n        Cloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n          \n          \n            Optionally switch to a release tag as follows:\n\n            git checkout tags/&lt;tag name&gt; [-b &lt;version&gt;]\n            \n\n            For example, to check out the 2.1.0 release tag in a new branch named 2.1.0, enter\n\n            git checkout tags/2.1.0 -b 2.1.0\n            \n          \n          \n            Continue with Update installation dependencies.\n          \n        \n\n        Clone with HTTPS\n\n        To clone the Magento GitHub repository using the HTTPS protocol:\n\n        \n          \n            Copy to the clipboard the Magento GitHub repository HTTPS clone URL.\n\n            a.\tIn a web browser, go to the Magento GitHub repository.\n\n            b.\tOn the right side of the page, under the clone URL field, click HTTPS.\n\n            c.\tClick the Copy to clipboard button.\n\n            The following figure shows an example.\n\n            \n          \n          \n            Change to your web server’s docroot directory.\n\n            Typically, for Ubuntu, it’s /var/www or /var/www/html and for CentOS it’s /var/www/html.\n          \n          \n            Enter git clone and paste the value you obtained from step 1.\n\n            An example follows\n\n            git clone https://github.com/magento/magento2.git\n            \n          \n          \n            Wait for the repository to clone on your server.\n          \n          \n            Optionally switch to a release tag as follows:\n\n            git checkout tags/&lt;tag name&gt; [-b &lt;version&gt;]\n            \n\n            For example, to check out the 2.1.0 release tag in a branch named 2.1.0, enter\n\n            git checkout tags/2.1.0 -b 2.1.0\n            \n          \n        \n\n        Next step\n        After completing the tasks discussed on this page, see Update installation dependencies.\n\n        \n\n      \n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/dev_install.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-dev-options-html": {
      "title": "Contributing developers&amp;mdash;update, reinstall Magento",
      "content": "The following topics apply to you only if you used git clone to install the Magento Open Source GitHub repository. This usually means you contribute code to the Magento Open Source codebase.\n\n\n    If you clone the Magento 2 GitHub repository, you cannot use the Magento software in a production environment. You cannot have a live store that accepts orders and so on.\n\n\n\n  To update the Magento software, use git pull origin and composer update, then update the Magento database\n  To change versions from develop to a release version like 2.0.4, you must uninstall the Magento software and install the released version.\n  To add, remove, or update components, modify composer.json and run composer update and update the Magento database\n  To reinstall the Magento software, modify the product version in composer.json, run composer update, then reinstall the Magento software\n\n\n\n    \n        If you are not a contributing developer, you perform upgrades and upgrades as discussed in Updating the Magento application and components. \n\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/dev_options.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-dev-reinstall-html": {
      "title": "Reinstall the Magento software",
      "content": "A contributing developer reinstalls Magento by updating composer.json to specify the Magento product version and component versions desired and runs composer update.\n\nTo reinstall the Magento software as a contributing developer:\n\n\n  Log in to your Magento server as a user with permissions to modify files in the Magento file system (for example, the &gt;switch to the Magento file system owner.\n  \n    Make a backup copy of composer.json in your Magento installation directory:\n\n    cd &lt;your Magento install dir&gt;\ncp composer.json composer.json.bak\n    \n  \n  Open composer.json in a text editor.\n  \n    Locate the following line:\n\n     \"require\": {\n\t\"magento/product-community-edition\": \"&lt;version&gt;\"\n},\n    \n  \n  \n    Replace &lt;version&gt; with the version to which you want to upgrade, where &lt;version&gt; is the product version to use.\n\n    (The product version is in the format 2.0.x)\n.\n  \n  Save your changes to composer.json and exit the text editor.\n  \n    Enter the following command:\n\n    composer update\n    \n\n    Wait for dependencies to update.\n  \n  Install the Magento software.\n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/dev_reinstall.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-dev-update-magento-html": {
      "title": "Update the Magento application",
      "content": "This topic discusses how a contributing developer can update the Magento application without reinstalling it. To perform an upgrade if you’re not a contributing developer, see Updating the Magento application and components.\n\nTo update the Magento software if you’re a contributing developer:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Save any changes you made to composer.json because the following steps will overwrite it:\n\n     cd &lt;your Magento install dir&gt;\n cp composer.json composer.json.old\n    \n  \n  \n    Update your local repository to get the latest code:\n\n    git pull origin develop\n    \n\n    \n    \n  \t\t\tIf git pull origin develop fails, see troubleshooting. \n\n  \n  Diff and merge your composer.json.old with composer.json installed with the Magento software.\n  \n    Enter the following command:\n\n    composer update\n    \n  \n  \n    Update the Magento database:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/dev_update-magento.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-intro-developers-roadmap-html": {
      "title": "Developer roadmap",
      "content": "This topic introduces the high-level workflow for a developer who wants to create or customize the Magento application. Developers can also package and distribute their customizations to merchants.\n\nKey points:\n\n\n  \n    Minimum required elements:\n\n    \n      Declare component dependencies in composer.json.\n      Register the component using registration.php.\n      \n        Component-specific XML definition files:\n\n        \n          Modules: module.xml\n          Themes: theme.xml\n          Language packages: language.xml\n        \n      \n    \n  \n  \n    Distribute your component:\n\n    \n      \n        Package your component in .zip format.\n\n        Use our validation tool to check your package before you distribute it.\n      \n      \n        If you upload the component to Magento Marketplace, it should be less than 30MB in size.\n      \n    \n  \n\n\nRelated topics\n\n  Introduction to Composer\n  Glossary of common terms\n  Sample extensions created by the Magento 2 Core team\n  Magento 2 Developers Hub\n\n",
      "url": "/guides/v2.0/extension-dev-guide/intro/developers_roadmap.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-di-xml-file-html": {
      "title": "The di.xml file",
      "content": "Overview\n\nThe di.xml file configures which dependencies to inject by the object manager.\n\nAreas and application entry points\n\nEach module can have a global and area-specific di.xml file.\nMagento reads all the di.xml configuration files declared in the system and merges them all together by appending all nodes.\n\nAs a general rule, the area specific di.xml files should configure dependencies for the presentation layer, and your module’s global di.xml file should configure the remaining dependencies.\n\nMagento loads The configuration in the following stages:\n\n\n  Initial (app/etc/di.xml)\n  Global (&lt;moduleDir&gt;/etc/di.xml)\n  Area-specific (&lt;moduleDir&gt;/etc/&lt;area&gt;/di.xml)\n\n\nDuring bootstrapping, each application entry point loads the appropriate di.xml files for the requested area.\n\nExamples:\n\n\n  \n    In index.php, the \\Magento\\Framework\\App\\Http class loads the area based on the front-name provided in url.\n  \n  \n    In static.php, the \\Magento\\Framework\\App\\StaticResource class also loads the area based on the url in the request.\n  \n  \n    In cron.php, the \\Magento\\Framework\\App\\Cron class always loads the ‘crontab’ area.\n  \n\n\nType configuration\n\nType configurations describe an object’s lifestyle and how to instantiate it.\n\nYou can configure the type in your di.xml configuration node in the following ways:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;virtualType name=\"moduleConfig\" type=\"Magento\\Core\\Model\\Config\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"type\" xsi:type=\"string\"&gt;system&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/virtualType&gt;\n    &lt;type name=\"Magento\\Core\\Model\\App\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"config\" xsi:type=\"object\"&gt;moduleConfig&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nThe preceding example declares the following types:\n\n\n  moduleConfig: A virtual type that extends the type Magento\\Core\\Model\\Config.\n  Magento\\Core\\Model\\App: All instances of this type receive an instance of moduleConfig as a dependency.\n\n\nVirtual types\nA virtual type allows you to change the arguments of a specific injectable dependency and change the behavior of a particular class.\nThis allows you to use a customized class without affecting other classes that have a dependency on the original.\n\nThe example creates a virtual type for Magento\\Core\\Model\\Config and specifies system as the constructor argument for type.\n\nConstructor arguments\n\nYou can configure the class constructor arguments in your di.xml in the argument node.\nThe object manager injects these arguments into the class during creation.\nThe name of the argument configured in the XML file must correspond to the name of the parameter in the constructor in the configured class.\n\nThe following example creates instances of Magento\\Core\\Model\\Session with the class constructor argument $sessionName set to a value of adminhtml:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Core\\Model\\Session\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"sessionName\" xsi:type=\"string\"&gt;adminhtml&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nArgument types\n\nobject\n\n\n  Node Formats:\n  \n    &lt;argument xsi:type=\"object\"&gt;{typeName}&lt;/argument&gt;\n  \n  &lt;argument xsi:type=\"object\" shared=\"{shared}\"&gt;{typeName}&lt;/argument&gt;\n\n\nCreates an instance of typeName type and passes it in as an argument.\nYou can pass any class name, interface name, or virtual type as typeName.\n\nSetting the shared property defines the lifestyle of a created instance.\nSee object lifestyle configuration.\n\n\n\nstring\n\n\n  Node Formats:\n  \n    &lt;argument xsi:type=\"string\"&gt;{strValue}&lt;/argument&gt;\n  \n  &lt;argument xsi:type=\"string\" translate=\"true\"&gt;{strValue}&lt;/argument&gt;\n\n\nMagento interprets any value for this argument node as a string.\n\n\n\nboolean\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"boolean\"&gt;{boolValue}&lt;/argument&gt;\n  \n\n\nMagento converts any value for this argument node into a boolean value.\nSee table below:\n\n\n  \n    \n      Input Type\n      Data\n      Boolean Value\n    \n  \n  \n    \n      Boolean\n      true\n      true\n    \n    \n      Boolean\n      false\n      false\n    \n    \n      String\n      “true”*\n      true\n    \n    \n      String\n      “false”*\n      false\n    \n    \n      String\n      “1”\n      true\n    \n    \n      String\n      “0”\n      false\n    \n    \n      Integer\n      1\n      true\n    \n    \n      Integer\n      0\n      false\n    \n  \n\n\n*These String literals are case-sensitive\n\n\n\nnumber\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"number\"&gt;{numericValue}&lt;/argument&gt;\n  \n\n\nAcceptable values for this type include: integers, floats, or numeric strings.\n\n\n\ninit_parameter\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"init_parameter\"&gt;{Constant::NAME}&lt;/argument&gt;\n  \n\n\nThis is the global application initialization argument represented by Constant::NAME.\n\n\n\nconst\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"const\"&gt;{Constant::NAME}&lt;/argument&gt;\n  \n\n\nThis is the constant value represented by Constant::NAME.\n\n\n\nnull\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"null\"/&gt;\n  \n\n\nThis indicates a null value.\n\n\n\narray\n\n\n  Node Format:\n  \n    &lt;argument xsi:type=\"array\"&gt;\n  &lt;item name=\"someKey\" xsi:type=\"&lt;type&gt;\"&gt;someVal&lt;/item&gt;\n&lt;/argument&gt;\n    \n  \n\n\nMagento builds an array with elements corresponding to the items and passes it as the argument.\nThe array can contain an infinite number of items, and each array item can be of any object type including an array itself.\n\nWhen Magento merges the configuration files for a given scope, array arguments with the same name get merged into a new array.\n\nWhen Magento loads a new configuration at a later time, either by a more specific scope or through code, then any array definitions in the new configuration will replace the loaded config instead of merging.\n\n\n\nArgument Examples:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Example\\Type\"&gt;\n        &lt;arguments&gt;\n            &lt;!-- Pass simple string --&gt;\n            &lt;argument name=\"stringParam\" xsi:type=\"string\"&gt;someStringValue&lt;/argument&gt;\n            &lt;!-- Pass instance of Magento\\Some\\Type --&gt;\n            &lt;argument name=\"instanceParam\" xsi:type=\"object\"&gt;Magento\\Some\\Type&lt;/argument&gt;\n            &lt;!-- Pass true --&gt;\n            &lt;argument name=\"boolParam\" xsi:type=\"boolean\"&gt;1&lt;/argument&gt;\n            &lt;!-- Pass 1 --&gt;\n            &lt;argument name=\"intParam\" xsi:type=\"number\"&gt;1&lt;/argument&gt;\n            &lt;!-- Pass application init argument, named by constant value --&gt;\n            &lt;argument name=\"globalInitParam\" xsi:type=\"init_parameter\"&gt;Magento\\Some\\Class::SOME_CONSTANT&lt;/argument&gt;\n            &lt;!-- Pass constant value --&gt;\n            &lt;argument name=\"constantParam\" xsi:type=\"const\"&gt;Magento\\Some\\Class::SOME_CONSTANT&lt;/argument&gt;\n            &lt;!-- Pass null value --&gt;\n            &lt;argument name=\"optionalParam\" xsi:type=\"null\"/&gt;\n            &lt;!-- Pass array --&gt;\n            &lt;argument name=\"arrayParam\" xsi:type=\"array\"&gt;\n                &lt;!-- First element is value of constant --&gt;\n                &lt;item name=\"firstElem\" xsi:type=\"const\"&gt;Magento\\Some\\Class::SOME_CONSTANT&lt;/item&gt;\n                &lt;!-- Second element is null --&gt;\n                &lt;item name=\"secondElem\" xsi:type=\"null\"/&gt;\n                &lt;!-- Third element is a subarray --&gt;\n                &lt;item name=\"thirdElem\" xsi:type=\"array\"&gt;\n                    &lt;!-- Subarray contains scalar value --&gt;\n                    &lt;item name=\"scalarValue\" xsi:type=\"string\"&gt;ScalarValue&lt;/item&gt;\n                    &lt;!-- and application init argument --&gt;\n                    &lt;item name=\"globalArgument \" xsi:type=\"init_parameter\"&gt;Magento\\Some\\Class::SOME_CONSTANT&lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\n\n  Merging and Arguments\n\n  During merging, arguments replace other arguments with the same name if their type is different.\nIf the argument type is the same, then the newer argument replaces the old one.\n\n\nAbstraction-implementation mappings\n\nThe object managers uses the abstraction-implementation mappings when the constructor signature of a class requests an object by its interface.\nThe object manager uses these mappings to determine what the default implementation is for that class for a particular scope.\n\nThe preference node specifies the default implementation:\n\n&lt;!--  File: app/etc/di.xml --&gt;\n&lt;config&gt;\n    &lt;preference for=\"Magento\\Core\\Model\\UrlInterface\" type=\"Magento\\Core\\Model\\Url\" /&gt;\n&lt;/config&gt;\n\nThis mapping is in app/etc/di.xml, so the object manager injects the Magento\\Core\\Model\\Url implementation class wherever there is a request for the Magento\\Core\\Model\\UrlInterface in the global scope.\n\n&lt;!-- File: app/code/core/Magento/Backend/etc/adminhtml/di.xml --&gt;\n&lt;config&gt;\n    &lt;preference for=\"Magento\\Core\\Model\\UrlInterface\" type=\"Magento\\Backend\\Model\\Url\" /&gt;\n&lt;/config&gt;\n\nThis mapping is in app/code/core/Magento/Backend/etc/adminhtml/di.xml, so the object manager injects the Magento\\Backend\\Model\\Url implementation class wherever there is a request for the Magento\\Core\\Model\\UrlInterface in the admin area.\n\nParameter configuration inheritance\n\nParameters configured for a class type pass on its configuration to its descendant classes.\nAny descendant can override the parameters configured for its supertype; that is, the parent class or interface:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Framework\\View\\Element\\Context\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"urlBuilder\" xsi:type=\"object\"&gt;Magento\\Core\\Model\\Url&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n    &lt;type name=\"Magento\\Backend\\Block\\Context\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"urlBuilder\" xsi:type=\"object\"&gt;Magento\\Backend\\Model\\Url&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nIn the preceding example, Magento\\Backend\\Block\\Context is a descendant of Magento\\Framework\\View\\Element\\Context.\n\nThe first entry configures all instances of Magento\\Framework\\View\\Element\\Context as well as its children to pass in Magento\\Core\\Model\\Url as $urlBuilder in their constructors.\n\nThe second entry overrides this and configures all instances of Magento\\Backend\\Block\\Context to use Magento\\Backend\\Model\\Url as the $urlBuilder instead.\n\nObject lifestyle configuration\n\nThe lifestyle of an object determines the number of instances that can exist of that object.\n\nYou can configure dependencies in Magento to have the following lifestyles:\n\n\n  singleton(default) - One instance of this class exists. The object manager creates it at the first request.\nRequesting the class again returns the same instance.\nDisposing or ending the container registered to it releases the instance.\n  transient - The object manager creates a new instance of the class for every request.\n\n\nThe shared property determines the lifestyle of both argument and type configurations.\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;type name=\"Magento\\Filesystem\" shared=\"false\"&gt;\n        &lt;arguments&gt;\n            &lt;argument name=\"adapter\" xsi:type=\"object\" shared=\"false\"&gt;Magento\\Filesystem\\Adapter\\Local&lt;/argument&gt;\n        &lt;/arguments&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nIn this example Magento\\Filesystem is not shared, so all clients will retrieve separate instances of Magento\\Filesystem.\nAlso, every instance of Magento\\Filesystem will get separate instance of $adapter, because it too is non-shared.\n\nRelated topics\n\n\n  ObjectManager\n  Dependency injection\n\n",
      "url": "/guides/v2.0/extension-dev-guide/build/di-xml-file.html"
    }
    ,
  
    "guides-v2-0-cloud-reference-discover-deploy-html": {
      "title": "Deployment process",
      "content": "Every time you push code from your local workstation to the remote environment or merge code to a base environment branch, such as a merge from the Integration environment to the Staging environment, this activates the build and deploy scripts. These scripts generate new Magento code and provision configured services to the remote environment.\n\nThe build and deploy process is slightly different for each plan:\n\n\n  Starter plans—For the Integration environment, every active branch build and deploys to a full environment for access and testing. Fully test your code after merging to the staging branch. To go live, push staging to master to deploy to Production. You have full access to all branches through the Project Web Interface and the CLI commands.\n  Pro plans—For the Integration environment, every active branch builds and deploys to a full environment for access and testing. You must merge your code to the integration branch before you can merge to the Staging environment and then the Production environment. You can only merge to Staging and Production using CLI commands with SSH or using the Project Web Interface. If you do not see the Staging or Production environments in your Project Web Interface, then you need to Add Staging and Production to Pro projects UI.\n\n\n\n  Make sure all code for your site and stores is in the active Magento Commerce Git branch. If you point to or include hooks to code in other branches, especially a private branch, the build and deploy process will have issues. For example, add any new themes into the Git branch of code. If you include it from a private repo, the theme won’t build with the Magento code.\n\n\n\n\n  \n    Updating your Pro project: These sections include instructions for Pro projects with Staging and Production available in the Project Web Interface. To add Staging and Production to your interface, see Add Staging and Production to Pro projects UI.\n\n    We can update Pro projects created before October 23, 2017. All new Pro projects include these features. Your ticket will be queued for update, which may take time to complete. We will keep you updated through the process.\n\n    If you do not request this update, you must use CLI commands or tickets to modify settings, variables, routes, and more for Pro plan Staging and Production environments.\n  \n\n  Track the process\n  You can track the ongoing build and deploy actions in your terminal and the Project Web Interface in real-time. the status displays in-progress, pending, success, or failed. Logs are available to review through the interface.\n\n  If you are using external GitHub repositories, the log of the operations does not display in the GitHub session. You can still follow what’s happening in their interface and in the Magento Commerce (Cloud) Project Web Interface.\n\n  Project configuration\n  A set of YAML configuration files located in the project root directory define your Magento installation and describe its dependencies.\n\n  If you intend to make changes, modify the YAML files in your Git branch of code. The build and deploy scripts access those files for specifics.\n\n  \n    .magento.app.yaml defines how Magento is built and deployed. Enter specific build and deploy options to the hooks section.\n    routes.yaml defines how an incoming URL is processed by Magento Commerce.\n    services.yaml defines the services Magento uses by name and version. For example, this file may include versions of MySQL, some PHP extensions, and Elasticsearch. These are referred to as services.\n  \n\n  Required files for your Git branch\n  Your Git branch must have the following files for building and deploying for your local and to Integration, Staging, and Production environments:\n\n  \n    auth.json in the root Magento directory. This file includes the Magento Authentication keys entered when creating the project. The file is generated as part of autoprovisioning or a new project using a blank template. If you need to verify the file and settings, see Troubleshoot deployment.\n    .magento.app.yaml is updated and saved in the root directory\n    services.yaml is updated and saved in magento/\n    routes.yaml is updated and saved in magento/\n  \n\n  Best practices for builds and deployment\n  We highly recommend the following best practices and considerations for your deployment process:\n\n  \n    Always following the deployment process to ensure your code is THE SAME in Integration, Staging, and Production. This is vital. Pushing code from Integration environments may become important or needed for upgrades, patches, and configurations. This deployment will overwrite Production and any differences in code in that environment.\n    Always add new extensions, integrations, and code in iterated branches to then build and deploy using the process. Some extensions and integrations must be enabled and configured in a specific order due to dependencies. Adding these in groups can make your build and deploy process much easier and help determine where issues occur.\n    Enter the same variables environment-to-environment. The values for these variables may differ across environments, but the variables may be required for your code.\n    Keep sensitive configuration values and data in environment specific variables. This includes an env.php file, CLI entered variables, and Project Web Interface entered variables. The values can differ, but having the variables is important.\n    Test your build and deploy locally and in Staging before deploying to Production. Many extensions work, custom code, and more work great in development. Some users then push to production only to have failures and issues. Staging gives you an opportunity to fully test your code and implementation in a production environment without extended downtime if something goes wrong in Production.\n  \n\n  Five phases of Integration build and deployment\n  The following phases occur on your local development environment and the Integration environment. The code is not deployed to Staging or Production for Pro plan in these initial phases.\n\n  Integration build and deployment consists of the following phases:\n\n  \n    Phase 1: Configuration validation and code retrieval\n    Phase 2: Build\n    Phase 3: Prepare slug\n    Phase 4: Deploy slugs and cluster\n    Phase 5: Deployment hooks\n    Post-deployment: configure routing\n  \n\n  Phase 1: Code and configuration validation\n  When you initially set up a project from a template, we retrieve the code from the the Magento Commerce template. This code repo is cloned to your project as the master branch.\n\n  \n    For Starter: master branch is used in your Production environment.\n    For Pro: master begins as origin branch for the Integration environment. You deploy this branch to Staging and Production.\n  \n\n  The remote server gets your code using Git. When you push your code from local to the remote Git, a series of checks and code validation completes prior to build and deploy scripts. The built-in Git server checks what you are pushing and makes changes. For example, you may want to add an Elasticsearch instance. The built-in Git server detects this and verifies that the topology of your cluster is modified to your new needs.\n\n  If you have a syntax error in a configuration file, our Git server refuses the push. For details, see Protective Block.\n\n  This phase also runs composer install to retrieve dependencies.\n\n  Phase 2: Build\n  Helpful Note: During this phase, the site is not in maintenance mode and will not be brought down if errors or issues occur.\n\n  We build only what has changed since the last build.\n\n  This phase builds the codebase and runs hooks in the build section of .magento.app.yaml. The default Magento build hook is a CLI command called magento-cloud:build. It does the following:\n\n  \n    Applies patches located in vendor/magento/magento-cloud-configuration/patches, as well as optional project-specific patches in m2-hotfixes\n    Enables all extensions. To best build all code for deployment, we enable all extensions, build, then disable extensions you had disabled in your configuration.\n    Regenerates code and the dependency injection configuration (that is, the Magento var/generation and var/di directories) using bin/magento setup:di:compile.\n  \n\n  Important: At this point the cluster has not been created yet. So you should not try to connect to a database or imagine anything was daemonized.\n\n  Once the application has been built it is mounted on a read-only file system. You will be able to configure specific mount points that are going to be read/write. For the project structure, see Local project directory structure.\n\n  This means you cannot FTP to the server and add modules. Instead, you must add code to your Git repo and run git push, which builds and deploys the environment.\n\n  The build checks if the config.local.php file exists in the codebase and has information about scopes (for details see SCD_STRATEGY). If so, static files are deployed during this phase, reducing the downtime in the deployment phase.\n\n  Phase 3: Prepare the slug\n  The result of the build phase is a read-only file system we refer to as a slug. In this phase, we create an archive and put the slug in permanent storage. The next time you push code, if a service didn’t change, we reuse the slug from the archive.\n\n  \n    Makes continuous integration builds go faster reusing unchanged code\n    If code was changed, makes an updated slug for the next build to possibly reuse\n    Allows for instantaneous reverting of a deployment if needed\n    Includes static files if the config.local.php file exists in the codebase\n  \n\n  The slug includes all files and folders excluding the following mounts configured in magento.app.yaml:\n\n  \n    \"var\": \"shared:files/var\"\n    \"app/etc\": \"shared:files/etc\"\n    \"pub/media\": \"shared:files/media\"\n    \"pub/static\": \"shared:files/static\"\n  \n\n  Phase 4: Deploy slugs and cluster\n  Now we provision your applications and all the backend services you need:\n\n  \n    Mounts each service in its own container (web server, Elasticsearch, RabbitMQ and so on)\n    Mounts the read-write file system (mounted on a highly available distributed storage grid)\n    Configures the network so Magento’s services can “see” each other (and only each other)\n  \n\n  \n  Do you need to make more code changes, add another extension, and so on? Make your changes in a Git branch after all build and deployment completes and push again. All environment file systems are read-only. A read-only system guarantees deterministic deployments and dramatically improves your site's security because no process can write to the file system. It also works to ensure your code is identical in Integration, Staging, and Production.\n\n\n  Phase 5: Deployment hooks\n  Helpful Note: During this phase, the site is in maintenance mode until the deploy completes.\n\n  The last step runs a deployment script. You can use this for example to anonymize data in development environments, clear caches, ping external continuous integration tools, and so on.\n\n  When this script runs, you have access to all the services in your environment (Redis, database, and so on).\n\n  If the config.local.php file does not exist in the codebase, static file deployment occurs during this phase. This increases the length of your deploy phase and site maintenance.\n\n  There are two default deploy hooks. pre-deploy.php completes necessary cleanup and retrieval of resources and code generated in the build hook. bin/magento magento-cloud:deploy runs a series of commands and scripts:\n\n  \n    \n      If Magento is not installed, it installs Magento with bin/magento setup:install, updates the deployment configuration, app/etc/env.php, and the database for your specified environment (for example, Redis and website URLs). Important: When you completed the First time deployment during setup, Magento Commerce was installed and deployed across all environments.\n    \n    \n      If Magento is installed, performs any necessary upgrades. The deployment script runs bin/magento setup:upgrade to update the database schema and data (which is necessary after extension or core code updates), and also updates the deployment configuration, app/etc/env.php, and the database for your environment. Finally, the deployment script clears the Magento cache.\n    \n    \n      The script optionally generates static web content using the command magento setup:static-content:deploy.\n    \n  \n\n  \n  Our deploy script uses the values defined by configuration files in the .magento directory, then the script deletes the directory and its contents. Your local development environment isn't affected.\n\n\n  \n  The deployment phase may seem to get stuck or take a long time. If cron jobs are running, the hooks wait until the cron jobs complete before completion of the deployment.\n\n\n  Post-deployment: configure routing\n  While the deployment is running, we freeze the incoming traffic at the entry point for 60 seconds. We are now ready to configure routing so your web traffic will arrive at your newly created cluster.\n\n  If deployment completes without issues or errors, the maintenance mode is removed to allow for normal access.\n\n  To review build and deploy logs, see Use logs for troubleshooting.\n\n  Build and deploy full steps\n  With an understanding of the process, we provide the following instructions for build and deploy for your local, Integration, Staging, and finally Production:\n\n  \n    Build and deploy to your local\n    Prepare to deploy\n    Deploy code and data\n    Test deployment\n    Go live and launch\n  \n\n  Related topics\n  \n    Deployment troubleshooting\n    Get started with a project\n    Get started with an environment\n    .magento.app.yaml\n    routes.yaml\n    services.yaml\n  \n\n",
      "url": "/guides/v2.0/cloud/reference/discover-deploy.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-doc-html": {
      "title": "magento/theme-doc-blank failure",
      "content": "When installing new purchases, you might see an error like the following during readiness check:\n\nCommand \"update\" failed: Loading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\n\nProblem 1\n- Installation request for magento/theme-doc-blank 100.0.2 -&gt; satisfiable by magento/theme-doc-blank[100.0.2].\n- magento/theme-doc-blank 100.0.2 requires magento/framework 0.1.0 -&gt; no matching package found.\n\nPotential causes:\n- A typo in the package name\n- The package is not available in a stable-enough version according to your minimum-stability setting\nsee &lt;https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion&gt; for more details.\n\nRead &lt;http://getcomposer.org/doc/articles/troubleshooting.md&gt; for further common problems.\n\n\nWorkaround\nThis issue is caused by two doc-related components we published by mistake. They can’t be installed.\n\nThe workaround is to go back to the Component Manager and unselect the following components:\n\n\n  magento/theme-doc-blank\n  magento/module-doc\n\n\nYour new purchase installation should proceed without issue.\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/doc.html"
    }
    ,
  
    "guides-v2-0-coding-standards-docblock-standard-general-html": {
      "title": "DocBlock standard",
      "content": "This standard defines Magento requirements and conventions for adding code inline documentation, known as DocBlocks.\n\nSome parts of Magento code might not comply with this standard, but we are working to gradually improve this.\n\nFollowing these standard is optional for third-party Magento developers, but doing so helps to create consistent, clean, and easy to read inline documentation.\n\nUse RFC 2119 to interpret the “MUST,” “MUST NOT,” “REQUIRED,” “SHALL,” “SHALL NOT,” “SHOULD,” “SHOULD NOT,” “RECOMMENDED,” “MAY,” and “OPTIONAL keywords.”\n\nScope of the standard\n\nThe goal of this standard is to unify usage of code DocBlocks for all files, not specific to a particular language.\n\nThe following is assumed by default:\n\n\n  Formatting according phpDocumentor standard\n  Requirements apply for all files regardless of programming language, but a DocBlock standard for the particular language may override it.\n\n\nGeneral principles\n\nThe documentation should follow two simple principles:\n\n\n  Be as short as possible.\n  Include all necessary information.\n\n\nShort documentation\n\nThe documentation should be as short as possible, but it should not skip necessary details.\n\nBelow are ways of improving code to help simplify documentation:\n\n\n  Make code self-explanatory.\n  Put all possible information in the names of classes, methods, and variables. (e.g. use $timeInSec instead of $time)\n  Break down a method into smaller methods with descriptive names.\nSee example below:\n\n\n  public function getPrice()\n  {\n      $price = 0;\n      $price += $this-&gt;getBasePrice();\n      $price -= $this-&gt;getDiscount();\n      return $price;\n  }\n\n  private function getBasePrice()\n  {\n      // calculate base price\n  }\n\n  private function getDiscount()\n  {\n    if (it's discount time) {\n      return 10;\n    }\n    return 0;\n  }\n  \n\nInclude all the necessary details\n\n\n  Identify the details a developer needs to work with your code.\n  \n    Ignore the implementation details (i.e. private methods/properties and method bodies) and focus on what the public interface signature provides.\n\n    If possible, improve the interface to provide more information.\n  \n  Add any remaining information that a developer may need to the DocBlock.\n\n\nFiles\n\nEach Magento source code file must have a DocBlock header with short description of the file.\nAfter the short description, there can be a long description.\n\nBoth short and long descriptions (for file headers and herein) must be separated from other elements using one empty line (implied empty line in terms of DocBlock syntax, where any line within DocBlock starts from *.\n\nIf description or short description happens to be the first one after DocBlock opening tag (/**) or last one before closing tag (*/), it should not be separated with an empty line.\n\nDocBlock Header in a PHP-file\n\n/**\n * Short description...\n *\n * Long description\n * Broken down into several lines\n *\n * License notice...\n */\n\nDocBlock Header in an XML-file\n\n/**\n * Short description...\n *\n * Long description\n * Broken down into several lines\n *\n * License notice...\n */\n--&gt;\n\nLicense Notice and Copyright\n\n\nThis section is applicable to Magento core files only. Please follow it if you are a contributing developer.\n\n\nAny file in Magento source should have a header with license and copyright notice.\nExceptions are files with format that doesn’t support comments, and so no meta information can be added.\n\nLicense notice and copyright MUST be declared in the very beginning of the file.\nIf the file contains a structural element (for example, a class), description for the element should be declared as a separate DocBlock.\n\nUse the following templates for the license notice and copyright blocks:\n\nTemplate for PHP Files\n\n&lt;?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Framework\\Api;\n\n/**\n * Provides metadata about an attribute.\n *\n * @api\n */\ninterface MetadataObjectInterface\n{\n   ...\n}\n\nTemplate for XML Files\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!--\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n\nTemplate for JS Files\n\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nCode structural elements\n\nA structural element is defined in phpDocumentor as part of imperative source code, such as PHP or JavaScript, or procedural SQL.\nFor example: namespace, class, interface, function, property, method, and so on.\n\nIf the source code file has one and only one standalone structural element (class, interface, function, and so on), as it may be required by language-specific coding standard, the file DocBlock is to be reused for this element.\n\nSo in general case, classes that are declared in dedicated files, must have one DocBlock, which refers to the class and file at the same time.\n\nDocBlock for a Class\n\n/**\n * Autoloader with class map capability\n *\n * ...\n */\nclass Autoload\n{\n\nBut if along with declaring class or function there must be another file with source code included, the inclusion construct must not be before file header and it must not separate element DocBlock from the element.\nSo there are two solutions possible:\n\n\n  Have file header DocBlock separately, then inclusion construct, then a DocBlock for the element with duplicated short description.\n  Or include after declaring the element (it is possible in PHP and won’t cause issues before execution).\n\n\nDocBlock with Included Script File\n\n/**\n * Magento integration Magento test framework (MTF) bootstrap\n *\n * ...\n */\n\nrequire __DIR__ . '/../bootstrap.php';\n\nnamespace Magento\\Test;\n\n/**\n * Magento integration Magento test framework (MTF) bootstrap\n */\nclass Bootstrap\n{\n\nDocBlock with Included Class File\n\nnamespace Magento\\Framework\\Profiler\\Adapter;\n\n/**\n * Profiler CSV adapter\n *\n * ...\n */\nclass Csv extends \\Magento\\Framework\\Profiler\\AdapterAbstract\n{\n// ...\n    public function setFile($file)\n    {\n        if (!isValidFile($file)) {\n            throw new \\ArgumentException('A valid file name is expected.');\n        }\n        // ...\n    }\n}\n\nrequire_once __DIR__ . '/../../functions.php';\n\nClasses and interfaces\n\nClasses and interfaces must have a short description that is a human-understandable intention of the class.\n\nGood:\n\n\n  Handler for PHP errors/warnings/notices that converts them to exceptions.\nclass ErrorHandler { … }\n\n\nBad:\n\n\n  Error Handler\nclass ErrorHandler { … }\n\n\nIf possible, add use cases where developers can or cannot use the class.\n\nShort name form\n\nIt is encouraged to use the short form of the name to encourage readability and consistency with the type hint.\nThe only exception is in the Service/DTO classes due to tooling requirements.\n\nExample of a Method DocBlock\n\nuse Magento\\Logger;\nuse Magento\\Math\\Random;\nuse Magento\\Stdlib\\DateTime as StdlibDateTime;\n\n/**\n * @var Logger\n */\nprotected $_logger;\n\n/**\n * Description of method here.\n *\n * @param Random         $mathRandom\n * @param StdlibDateTime $dateTime\n * @param int            $number\n */\nprotected function doSomething(Random $mathRandom, StdlibDateTime $dateTime, $number)\n{\n\n}\n\nClass attributes\n\nClass attributes must have type declaration using @var tag.\n\nExample of Class Attribute\n\n// ...\nnamespace Magento;\n\nclass Profiler\n{\n    /**\n     * @var Profiler\n     */\n    protected static $instance = null;\n\nFunctions and methods\n\nFunctions and methods must have:\n\n\n  Short description\n  \n    Long description that explains the motivation behind the implementation.\nFor example:\n\n    \n      If a workaround or hack is implemented, explain why it is necessary and include any other details necessary to understand the algorithm.\n      For non-obvious implementations where the implementation logic is complicated or does not correspond to the Technical Vision or other known best practices, include an explanation in the doc block’s description.\nAn implementation is non-obvious if another developer has questions about it.\n    \n  \n  Declaration of all arguments (if any) using @param tag.\nAppropriate argument type must be specified.\n  Declaration of return type using @return tag.\nIf there is no such operator, the @return tag must have void as the return value.\n  Declaration of possibly thrown exception using @throws tag, if the actual body of function triggers throwing an exception.\nAll occurrences of @throws in a DocBlock must be after @param and @return (if any).\n\n\nExceptions to these rules:\n\n\n  \n    Constructors may not have short and/or long description\n  \n  \n    Testing methods in Unit tests may not have doc blocks if the test’s method name follows the convention (test)\n\n    \n      \n        If the test does not follow the convention, it should have a doc block describing the covered methods\n      \n      \n        Non-testing methods should have a doc block with description. It includes data providers and any helper methods\n      \n    \n  \n\n\nThings to include\n\n\n  \n    An explanation of input arguments and return values if it is not obvious from their name and type.\n\n    This is applicable in the following cases:\n\n    \n      \n        There is more than one possible input/output type.\n\n        For example: @return Config|null.\nThe DockBlock needs to explain what situations return null.\n\n        Another example: @param FileInterface | null.\nThe DocBlock needs to explain what happens when the value of the parameter is null.\n\n        Ideally, implementations such as these should be avoided.\n      \n      The input/output type is a simple type and the format is not clear from the name.\n      The input/output is an array with a specific structure.\n    \n  \n  The intent of the method along with when or where it can be used.\n  If an exception is thrown by a method, explain the cause or situation.\n  If the input is confusing or complicated, add examples of the method’s usage in client code or examples of the argument.\n\n\nThings to avoid\n\n\n  Copying the algorithm.\nThe algorithm must be self-explanatory and understood by reviewing the code and unit tests.\n  Information that is out of date or has the potential to become out of date.\n\n\nExample of a Method DocBlock\n\n/**\n * Merge the config XML files\n *\n * @param  array $configFiles\n * @return void\n * @throws \\Magento\\Exception if a non-existing or invalid XML file passed\n */\nprotected function merge($configFiles)\n{\n    $domConfig = new \\Magento\\Config\\Dom($this-&gt;_getInitialXml(), $this-&gt;_getIdAttributes());\n    foreach ($configFiles as $file) {\n        if (!file_exists($file)) {\n            throw new \\Magento\\Exception(\"File does not exist: {$file}\");\n        }\n        $domConfig-&gt;merge(file_get_contents($file));\n        if (!$domConfig-&gt;validate($this-&gt;getSchemaFile(), $errors)) {\n            $message = \"Invalid XML file: {$file}\\n\";\n            /** @var libXMLError $error */\n            foreach ($errors as $error) {\n                $message .= \"{$error-&gt;message} Line: {$error-&gt;line}\\n\";\n            }\n            throw new \\Magento\\Exception($message);\n        }\n    }\n    $this-&gt;_dom = $domConfig-&gt;getDom();\n}\n\nDivergence in @throws tag\n\nIn general, use the @throws tag when the code uses throw:\n\nExample of Throwing Exception Explicitly\n\n/**\n * Set an arbitrary value to specified element\n *\n * @param  string $elementId\n * @param  string $attribute\n * @param  mixed  $value\n * @return self\n * @throws \\InvalidArgumentException\n */\npublic function setAttribute($elementId, $attribute, $value)\n{\n    $this-&gt;_assertElementExists($elementId);\n    switch ($attribute) {\n        case self::PARENT: // break is intentionally omitted\n        case self::CHILDREN:\n        case self::GROUPS:\n            throw new \\InvalidArgumentException(\"Attribute '{$attribute}' is reserved and cannot be set.\");\n            break;\n        default:\n            $this-&gt;_elements[$elementId][$attribute] = $value;\n            break;\n    }\n    return $this;\n}\n\nIn this general case, if an exception is thrown in a sub-routine, then @throws must not be used in the parent method.\n\nHowever, if the only purpose of the referred sub-routine is to throw a specific exception – then @throws must be used in the parent method.\nFor example:\n\nThrowing Exception Implicitly\n\n/**\n * Recursively delete directory from storage\n *\n * @param  string $path Target dir\n * @return void\n * @throws Mage_Core_Exception when directories cannot be deleted\n */\npublic function deleteDirectory($path)\n{\n    // prevent accidental root directory deleting\n    $rootCmp = rtrim($this-&gt;getHelper()-&gt;getStorageRoot(), DS);\n    $pathCmp = rtrim($path, DS);\n\n    if ($rootCmp == $pathCmp) {\n        Mage::throwException(Mage::helper('Mage_Cms_Helper_Data')-&gt;__('Cannot delete root directory %s.', $path));\n    }\n\n    $io = new Varien_Io_File();\n\n    if (Mage::helper('Mage_Core_Helper_File_Storage_Database')-&gt;checkDbUsage()) {\n        Mage::getModel('Mage_Core_Model_File_Storage_Directory_Database')-&gt;deleteDirectory($path);\n    }\n    if (!$io-&gt;rmdir($path, true)) {\n        Mage::throwException(Mage::helper('Mage_Cms_Helper_Data')-&gt;__('Cannot delete directory %s.', $path));\n    }\n\n    if (strpos($pathCmp, $rootCmp) === 0) {\n        $io-&gt;rmdir($this-&gt;getThumbnailRoot() . DS . ltrim(substr($pathCmp, strlen($rootCmp)), '\\\\/'), true);\n    }\n}\n\n@return tag\n\nIf there is no explicit return statement in a method or function, a @return void should be used in the documentation.\n\nIf the method returns itself, return $this should be used.\n\nConstants\n\nConstants must have short description.\n\nFor example, a global constant:\n\n/**\n * Directory separator shorthand\n */\ndefine('DS', DIRECTORY_SEPARATOR);\n\nOr constants in a class:\nclass Profiler\n{\n    /**\n     * Separator literal to assemble timer identifier from timer names\n     */\n    const NESTING_SEPARATOR = '-&gt;';\n\nDocBlock templates\n\nDocBlock template is a DocBlock that starts from /**#@+*/ and ends with /**#@-*/.\nTemplates are not supported by PHPDocumentor anymore. Therefore, they MUST NOT be used.\n\nIt’s encouraged to replace existing DocBlock templates with regular DocBlock comments when the file is being modified.\n\nStructure of documentation space\n\n@category, @package, and @subpackage MUST NOT be used.\nDocumentation is organized with the use of namespaces.\n\nOther DocBlock tags\n\n@inheritdoc tag\n\nWhenever possible the @inheritdoc tag MUST be used for children to avoid duplication of doc blocks.\n\nEven Though PHPDocumentor understands inheritance and uses the parent doc block by default (without @inheritdoc tag specified), including the tag helps ensure that the doc block is not missed at all.\n\nRules for usage of the tag:\n\n\n  Use @inheritdoc (notice no braces around) to indicate that the entire doc block should be inherited from the parent method.\n  Use the inline {@inheritdoc} tag (with braces around) in long descriptions to reuse the parent’s long description. The tagged method MUST have its own short description.\n\n\nDocBlock for the Intreface\n\n/**\n * Interface for mutable value object for integer values\n */\ninterface MutableInterface\n{\n    /**\n     * Get value\n     *\n     * Returns 0, if no value is available\n     *\n     * @return int\n     */\n    public function getVal();\n\n    /**\n     * Set value\n     *\n     * Sets 0 in case a non-integer value is passed\n     *\n     * @param int $value\n     */\n    public function setVal($value);\n}\n\nDocBlock for the implementation\n\n/**\n * Limited mutable value object for integer values\n */\nclass LimitedMutableClass implements MutableInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function getVal()\n    {\n    }\n\n    /**\n     * Set value\n     *\n     * Sets 0 in case the value is bigger than max allowed value. {@inheritdoc}\n     */\n    public function setVal($value)\n    {\n    }\n}\n\n@api tag\n\nThe @api tag indicates the code is part of the public API and is subject to the Magento Backward Compatibility Policy.\n\nThe @api tag can be applied to a constant, a method, or to the entire class/interface.\n If the @api tag is applied at the file level, then all methods within the file are part of the public API.\nYou do not need to annotate each method individually.\n\nSee Semantic Versioning 2.0.0 for information about changing and updating code while maintaining backward compatibility.\n\n@deprecated tag\n\nA deprecated class or method is one that has been superseded and may cease to exist in the future.\n It will be retained to provide backward compatibility until next major component release.\n\nUse the @deprecated tag to indicate an element is to be deprecated.\n\nMotivation behind the added @deprecated tag MUST be explained.\n@see tag MUST be used with reference to new implementation when code is deprecated and there is a new alternative.\n\nFor example:\n\n/**\n * Get some object\n *\n * @deprecated Added to not break backward compatibility of the constructor signature\n *             by injecting the new dependency directly.\n *             The method can be removed in a future major release, when constructor signature can be changed\n * @return SomeObjectInterface\n */\nprotected function getSomeObject()\n{\n    ...\n}\n\n/**\n * Set price\n *\n * @deprecated Non-scoped price is not supported anymore\n * @see setScopedPrice()\n * @return void\n */\npublic function setPrice($price)\n{\n    ...\n}\n\n/**\n * Set price for specified scope\n *\n * @return void\n */\npublic function setScopedPrice($price, $scopeType, $scopeId)\n{\n    ...\n}\n\n@var inline tag\n\nFor purpose of automatic type hinting in an IDE, an inline notation of @var tag can be used wherever the IDE is unable to resolve variable type.\nThis tag declares variables that will emerge in next lines of code as follows:\n\nInline Type Hinting\n\n/** @var libXMLError $error */\nforeach ($errors as $error) {\n\nSome IDEs understand a different notation, where type is specified after variable name.\nThis notation is also valid:\n\nInline Type Hinting Variation\n\n/** @var $error libXMLError */\nforeach ($errors as $error) {\n\n@see tag\n\nBesides the normal way of using @see tag as recommended by phpDocumentor, it may be used as an addition to @var, when the @var is already used in this comment.\n\nSpecifically, this is possible when a PHP-file composed from multiple file includes, as result variables may contain objects of different types depending on context:\n\n/**\n * @var $this ClassOne\n * @see ClassTwo\n * @see FooInterface\n */\n\nOther tags\n\nAny other valid DocBlock tags may be specified, if author deems necessary, but only if they bring any valuable not obvious information.\n\nFormatting conventions\n\nPadding tags\n\nIf there are two or more tags together in one DocBlock, their values may be padded, so that they could be visually aligned.\n\n/**\n * ...\n *\n * @param  string $argument\n * @return bool\n * @link   http://example.com\n */\n\nFormatting consistency\n\nIn a given DocBlock, style of formatting must be consistent.\n\nFor example, padding for visual alignment can be done in two ways consistently:\n\nCorrect – align everything:\n\n/**\n * ...\n *\n * @param  string   $parentId\n * @param  string   $childId\n * @param  int|null $position\n * @return int\n * @see    _insertChild() for position explanation\n */\n\nAlso correct – don’t align anything:\n\n/**\n * ...\n *\n * @param string   $parentId\n * @param string   $childId\n * @param int|null $position\n * @return int\n * @see _insertChild() for position explanation\n */\npublic function reorderChild($parentId, $childId, $position)\n\nIncorrect – align only partially:\n\n/**\n * ...\n *\n * @param  string   $parentId\n * @param  string   $childId\n * @param  int|null $position\n * @return int\n * @see _insertChild() for position explanation\n */\n\n",
      "url": "/guides/v2.0/coding-standards/docblock-standard-general.html"
    }
    ,
  
    "guides-v2-0-coding-standards-docblock-standard-javascript-html": {
      "title": "JavaScript DocBlock standard",
      "content": "Introduction\n\nTo add JavaScript code inline documentation, follow these guidelines. Some parts of Magento code may not comply with this standard, but we are working to gradually improve this. Following these standard is optional for 3rd-party Magento developers, but will help to create consistent, clean, and easy to read inline documentation.\nThis standard are a subset of Google JavaScript Style Guide regulations.\n\nUse RFC 2119 to interpret the \"must,\" \"must not,\" \"required,\" \"shall,\" \"shall not,\" \"should,\" \"should not,\" \"recommended,\" \"may,\" and \"optional\" keywords.\n\nUse JSDoc\n\nDocument all files, classes, methods, and properties with JSDoc comments.\n\nInline comments should be of the “//” type.\n\nIt is recommended to avoid sentence fragments in documentation blocks. Use sentence-style capitalization and put a period at the end. Sentence fragmentation is acceptable in inline commentaries to keep it short.\n\nComment syntax\n\nJSDoc comments requirements:\n\n\n  A JSDoc comment should begin with a slash (/) and two asterisks (*).\n  Inline tags should be enclosed in braces: { @code this }.\n  @desc Block tags should always start on their own line.\n\n\nExample:\n\n/**\n*&nbsp;A&nbsp;JSDoc&nbsp;comment&nbsp;should&nbsp;begin&nbsp;with&nbsp;a&nbsp;slash&nbsp;and&nbsp;2&nbsp;asterisks.\n*&nbsp;Inline&nbsp;tags&nbsp;should&nbsp;be&nbsp;enclosed&nbsp;in&nbsp;braces&nbsp;like{@code&nbsp;this}.\n*&nbsp;@desc&nbsp;Block&nbsp;tags&nbsp;should&nbsp;always&nbsp;start&nbsp;on&nbsp;their&nbsp;own&nbsp;line.\n*/\n\n\nMany tools extract metadata from JSDoc comments to validate and optimize the code.\n\nJSDoc indentation\n\nIf you have to line break a block tag, you should treat this as breaking a code statement and indent it four spaces.\n\n/**\n&nbsp;*&nbsp;Illustrates&nbsp;line&nbsp;wrapping&nbsp;for&nbsp;long&nbsp;param/return&nbsp;descriptions.\n&nbsp;*\n&nbsp;*&nbsp;@param&nbsp;{string}&nbsp;foo&nbsp;This&nbsp;is&nbsp;a&nbsp;param&nbsp;with&nbsp;a&nbsp;description&nbsp;too&nbsp;long&nbsp;to&nbsp;fit&nbsp;in\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one&nbsp;line.\n&nbsp;*&nbsp;@return&nbsp;{number}&nbsp;This&nbsp;returns&nbsp;something&nbsp;that&nbsp;has&nbsp;a&nbsp;description&nbsp;too&nbsp;long&nbsp;to\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fit&nbsp;in&nbsp;one&nbsp;line.\n&nbsp;*/\nproject.MyClass.prototype.method&nbsp;=&nbsp;function(foo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;5;\n};\n\n\nClass comments\n\nClasses must be documented with a description, and appropriate type tags.\n\n/**\n&nbsp;*&nbsp;Class&nbsp;making&nbsp;something&nbsp;fun&nbsp;and&nbsp;easy.\n&nbsp;*&nbsp;@param&nbsp;{string}&nbsp;arg1&nbsp;An&nbsp;argument&nbsp;that&nbsp;makes&nbsp;this&nbsp;more&nbsp;interesting.\n&nbsp;*&nbsp;@param&nbsp;{Array.&lt;number&gt;}&nbsp;arg2&nbsp;List&nbsp;of&nbsp;numbers&nbsp;to&nbsp;be&nbsp;processed.\n&nbsp;*&nbsp;@constructor\n&nbsp;*/\nproject.MyClass&nbsp;=&nbsp;function(arg1,&nbsp;arg2)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n};\n\n\nMethod and function comments\n\nA description must be provided along with parameters. Method descriptions should start with a sentence written in the third person declarative voice.\n\n/**\n&nbsp;*&nbsp;Operates&nbsp;on&nbsp;an&nbsp;instance&nbsp;of&nbsp;MyClass&nbsp;and&nbsp;returns&nbsp;something.\n&nbsp;*\n&nbsp;*&nbsp;@param&nbsp;{project.MyClass}&nbsp;obj&nbsp;Instance&nbsp;of&nbsp;MyClass&nbsp;which&nbsp;leads&nbsp;to&nbsp;a&nbsp;long\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comment&nbsp;that&nbsp;needs&nbsp;to&nbsp;be&nbsp;wrapped&nbsp;to&nbsp;two&nbsp;lines.\n&nbsp;*&nbsp;@return&nbsp;{boolean}&nbsp;Whether&nbsp;something&nbsp;occured.\n&nbsp;*/\nfunction&nbsp;someMethod(obj)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n}\n\n\nProperty comments\n\n/**\n&nbsp;*&nbsp;Maximum&nbsp;number&nbsp;of&nbsp;things&nbsp;per&nbsp;pane.\n&nbsp;*\n&nbsp;*&nbsp;@type&nbsp;{number}\n&nbsp;*/\nproject.MyClass.prototype.someProperty&nbsp;=&nbsp;4;\n\n\nJSDoc tag reference\n\n@const\n\nMarks a variable read-only and suitable for inlining. Generates warnings if it is rewritten. Constants should also be ALL_CAPS, but the annotation should help eliminate reliance on the naming convention.\n\n/**&nbsp;@const&nbsp;*/&nbsp;var&nbsp;DEFAULT_TIMEZONE&nbsp;=&nbsp;'GMT';\n&nbsp;\n/**&nbsp;@const&nbsp;*/&nbsp;MyClass.DEFAULT_TIMEZONE&nbsp;=&nbsp;'GMT';\n&nbsp;\n/**\n&nbsp;*&nbsp;My&nbsp;namespace's&nbsp;default&nbsp;timezone.\n&nbsp;*\n&nbsp;*&nbsp;@const\n&nbsp;*&nbsp;@type&nbsp;{string}\n&nbsp;*/\nmynamespace.DEFAULT_TIMEZONE&nbsp;=&nbsp;'GMT';\n\n\n@extends\n\nUsed with @constructor to indicate that a class inherits from another class.\n\n/**\n&nbsp;*&nbsp;Immutable&nbsp;empty&nbsp;node&nbsp;list.\n&nbsp;*\n&nbsp;*&nbsp;@constructor\n&nbsp;*&nbsp;@extends&nbsp;project.MyClass.BasicNodeList\n&nbsp;*/\nproject.MyClass.EmptyNodeList&nbsp;=&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n};\n\n\n@interface\n\nUsed to indicate that the function defines an interface.\n\n/**\n&nbsp;*&nbsp;A&nbsp;shape.\n&nbsp;*\n&nbsp;*&nbsp;@interface\n&nbsp;*/\nfunction&nbsp;Shape()&nbsp;{};\nShape.prototype.draw&nbsp;=&nbsp;function()&nbsp;{};\n&nbsp;\n/**\n&nbsp;*&nbsp;A&nbsp;polygon.\n&nbsp;*\n&nbsp;*&nbsp;@interface\n&nbsp;*&nbsp;@extends&nbsp;{Shape}\n&nbsp;*/\nfunction&nbsp;Polygon()&nbsp;{};\nPolygon.prototype.getSides&nbsp;=&nbsp;function()&nbsp;{};\n\n\n@implements\n\nUsed with @constructor to indicate that a class implements an interface.\n\n/**\n&nbsp;*&nbsp;A&nbsp;shape.\n&nbsp;*\n&nbsp;*&nbsp;@interface\n&nbsp;*/\nfunction&nbsp;Shape()&nbsp;{};\nShape.prototype.draw&nbsp;=&nbsp;function()&nbsp;{};\n&nbsp;\n/**\n&nbsp;*&nbsp;@constructor\n&nbsp;*&nbsp;@implements&nbsp;{Shape}\n&nbsp;*/\nfunction&nbsp;Square()&nbsp;{};\nSquare.prototype.draw&nbsp;=&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n};\n\n\n@lends\n\nIndicates that the keys of an object literal should be treated as properties of some other object. This annotation should only appear on object literals.\n\nPlease note that the name in braces is not a type name like in other annotations. It’s an object name. It names the object on which the properties are “lent”. For example, @type {Foo} means “an instance of Foo,” but @lends {Foo} means “the constructor Foo”.\n\nPlease refer to JSDoc Toolkit for more information about this annotation.\n\nproject.MyClass.extend(\n&nbsp;&nbsp;&nbsp;&nbsp;Button.prototype,\n&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;@lends&nbsp;{Button.prototype}&nbsp;*/&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isButton:&nbsp;function()&nbsp;{return&nbsp;true;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n);\n\n\n@override\n\nIndicates that a method or property of a subclass intentionally hides a method or property of the superclass. If no other documentation is included, the method or property also inherits documentation from its superclass.\n\n/**\n&nbsp;*&nbsp;@return&nbsp;{string}&nbsp;Human-readable&nbsp;representation&nbsp;of&nbsp;project.SubClass.\n&nbsp;*&nbsp;@override\n&nbsp;*/\nproject.SubClass.prototype.toString()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n};\n\n\n@param\n\nUsed with method, function and constructor calls to document the arguments of a function.\n\nType names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the parameter.\n\n/**\n&nbsp;*&nbsp;Queries&nbsp;a&nbsp;Storage&nbsp;for&nbsp;items.\n&nbsp;*\n&nbsp;*&nbsp;@param&nbsp;{number}&nbsp;groupNum&nbsp;Subgroup&nbsp;id&nbsp;to&nbsp;query.\n&nbsp;*&nbsp;@param&nbsp;{string|number|null}&nbsp;term&nbsp;An&nbsp;itemName,\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;itemId,&nbsp;or&nbsp;null&nbsp;to&nbsp;search&nbsp;everything.\n&nbsp;*/\nnamespace.Storage.prototype.query&nbsp;=&nbsp;function(groupNum,&nbsp;term)&nbsp;{\n&nbsp;&nbsp;&nbsp;//&nbsp;...\n};\n\n\n@return\n\nUsed with method and function calls to document the return type. When writing descriptions for boolean parameters, prefer “Whether the component is visible” to “True if the component is visible, false otherwise”. If there is no return value, do not use an @return tag.\n\nType names must be enclosed in curly braces. If the type is omitted, the compiler will not type-check the return value.\n\n/**\n&nbsp;*&nbsp;@return&nbsp;{string}&nbsp;The&nbsp;hex&nbsp;ID&nbsp;of&nbsp;the&nbsp;last&nbsp;item.\n&nbsp;*/\nnamespace.Storage.prototype.getLastId&nbsp;=&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;id;\n};\n\n\n@this\n\nThe type of the object in whose context a particular method is called. Required when the this keyword is referenced from a function that is not a prototype method.\n\npinto.chat.RosterWidget.extern('getRosterElement',\n&nbsp;&nbsp;&nbsp;&nbsp;/**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;roster&nbsp;widget&nbsp;element.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@this&nbsp;pinto.chat.RosterWidget\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;{Element}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._getWrappedComponent().getElement();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n);\n\n\n@type\n\nIdentifies the type of a variable, property, or expression.\n\n/**\n&nbsp;*&nbsp;The&nbsp;message&nbsp;hex&nbsp;ID.\n&nbsp;*\n&nbsp;*&nbsp;@type&nbsp;{string}\n&nbsp;*/\nvar&nbsp;hexId&nbsp;=&nbsp;hexId;\n\n\n@typedef\n\nThis annotation can be used to declare an alias of a more complex type.\n\n/**&nbsp;@typedef&nbsp;{(string|number)}&nbsp;*/\nnamespace.NumberLike;\n&nbsp;\n/**&nbsp;@param&nbsp;{namespace.NumberLike}&nbsp;x&nbsp;A&nbsp;number&nbsp;or&nbsp;a&nbsp;string.&nbsp;*/\nnamespace.readNumber&nbsp;=&nbsp;function(x)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...\n}\n\n\nJavaScript types\n\n\n\t\n\t\n\t\tType example\n\t\tValue example\n\t\tDescription\n\t\n\t\n\t\tnumber\n\t\t1\n1.0\n-5\n1e5\nMath.PI\n\t\t\n\t\n\t\n\t\tNumber\n\t\tnew Number(true)\n\t\tNumber object\n\t\n\t\n\t\tstring\n\t\t'Hello'\n\"World\"\nString(42)\n\t\tString value\n\t\n\t\n\t\tString\n\t\tnew String('Hello')\nnew String(42)\n\t\tString object\n\t\n\t\n\t\tboolean\n\t\ttrue\nfalse\nBoolean(0)\n\t\tBoolean value\n\t\n\t\n\t\tBoolean\n\t\tnew Boolean(true)\n\t\tBoolean object\n\t\n\t\n\t\tRegExp\n\t\tnew RegExp('hello')\n/world/g\n\t\t\n\t\n\t\n\t\tDate\n\t\tnew Date\nnew Date()\n\t\t\n\t\n\t\n\t\tnull\n\t\tnull\n\t\t\n\t\n\t\n\t\tundefined\n\t\tundefined\n\t\t\n\t\n\t\n\t\tvoid\n\t\tfunction f() {\n\treturn;\n}\n\t\tNo return value\n\t\n\t\n\t\tArray\n\t\t['foo', 0.3, null]\n[]\n\t\tUntyped Array\n\t\n\t\n\t\tArray.&lt;number&gt;\n\t\t[11, 22, 33]\n\t\tAn array of numbers\n\t\n\t\n\t\tArray.&lt;Array.&lt;string&gt;&gt;\n\t\t[['one', 'two', 'three'], ['foo', 'bar']]\n\t\tArray of arrays of strings\n\t\n\t\n\t\tObject\n\t\t{}\n{foo: 'abc', bar: 123, baz: null}\n\t\t\n\t\n\t\n\t\tObject.&lt;string&gt;\n\t\t{'foo': 'bar'}\n\t\tAn object. In the object, the values are strings.\n\t\n\t\n\t\tObject.&lt;number, string&gt;\n\t\tvar obj = {};\nobj[1] = 'bar';\n\t\tAn object. In the object, the keys are numbers and the values are strings.\nNote that in JavaScript, the keys are always implicitly converted to strings, so obj['1'] == obj[1].\nSo the key will always be a string in for...in loops. But the compiler will verify the type if the key when indexing into the object.\n\t\n\t\n\t\tFunction\n\t\tfunction(x, y) {\n\treturn x * y;\n}\n\t\tFunction object\n\t\n\t\n\t\tfunction(number, number): number\n\t\tfunction(x, y) {\n\treturn x * y;\n}\n\t\tfunction value\n\t\n\t\n\t\tSomeClass\n\t\t/**&nbsp;@constructor&nbsp;*/\nfunction&nbsp;SomeClass()&nbsp;{}\n&nbsp;\nnew&nbsp;SomeClass();\n\t\t\n\t\n\t\n\t\tSomeInterface\n\t\t/**&nbsp;@interface&nbsp;*/\nfunction&nbsp;SomeInterface()&nbsp;{}\n&nbsp;\nSomeInterface.prototype.draw&nbsp;=&nbsp;function()&nbsp;{};\n\t\t\n\t\n\t\n\t\tproject.MyClass\n\t\t/**&nbsp;@constructor&nbsp;*/\nproject.MyClass&nbsp;=&nbsp;function&nbsp;()&nbsp;{}\n&nbsp;\nnew&nbsp;project.MyClass()\n\t\t\n\t\n\t\n\t\tElement\n\t\tdocument.createElement('div')\n\t\tElements in the DOM.\n\t\n\t\n\t\tNode\n\t\tdocument.body.firstChild\n\t\tNodes in the DOM.\n\t\n\t\n\t\tHTMLInputElement\n\t\thtmlDocument.getElementsByTagName('input')[0]\n\t\tA specific type of DOM element.\n\t\n  \n\n\nJavaScript type language\n\n\n\t\n\t\n\t\tOperator name\n\t\tSyntax\n\t\tDescription\n\t\tDeprecated syntaxes\n\t\n\t\n\t\tType Name\n\t\t{boolean}, {Window}, {namespace.ui.Menu}\n\t\tSimply the name of a type.\n\t\t\n\t\n\t\n\t\tType Application\n\t\t{Array.&nbsp;&lt;string&gt;}\n\t\tAn array of strings.\n\t\t{Object. &lt;string, number&gt;}\n\t\tAn object. In the object, the keys are strings and the values are numbers.\n\t\tParametrizes a type, by applying a set of type arguments to that type. The idea is analogous to generics in Java.\n\t\t\n\t\n\t\n\t\tType Union\n\t\t{(number|boolean)}\n\t\tA number or a boolean.\n\t\tIndicates that a value might have type A OR type B.\n\t\t{(number,boolean)}, {number|boolean}, {(number||boolean)}\n\t\n\t\n\t\tRecord Type\n\t\tcodemyNum: number, myObject}}\n\t\tAn anonymous type with the given type members.\n\t\tIndicates that the value has the specified members with the specified types. In this case, myNum with a type number and myObject with any type.\n\t\tNote that the braces are part of the type syntax. For example, to denote an Array of objects that have a length property, you might write Array.&lt;{length}&gt;.\n\t\t\n\t\n\t\n\t\tNullable type\n\t\t{?number}\n\t\tA number or NULL.\n\t\tIndicates that a value is type A or null. By default, all object types are nullable. NOTE: Function types are not nullable.\n\t\t{number?}\n\t\n\t\n\t\tNon-nullable type\n\t\t{!Object}\n\t\tAn Object, but never the null value.\n\t\tIndicates that a value is type A and not null. By default, all value types (boolean, number, string, and undefined) are not nullable.\n\t\t{Object!}\n\t\n\t\n\t\tFunction Type\n\t\t{function(string, boolean)}\n\t\tA function that takes two arguments (a string and a boolean), and has an unknown return value.\n\t\tSpecifies a function.\n\t\t\n\t\n\t\n\t\tFunction Return Type\n\t\t{function(): number}\n\t\tA function that takes no arguments and returns a number.\n\t\tSpecifies a function return type.\n\t\t\n\t\n\t\n\t\tFunction this Type\n\t\t{function(this:namespace.ui.Menu, string)}\n\t\tA function that takes one argument (a string), and executes in the context of a namespace.ui.Menu.\n\t\tSpecifies the context type of a function type.\n\t\t\n\t\n\t\n\t\tFunction new Type\n\t\t{function(new:namespace.ui.Menu, string)}\n\t\tA constructor that takes one argument (a string), and creates a new instance of namespace.ui.Menu when called with the 'new' keyword.\n\t\tSpecifies the constructed type of a constructor.\n\t\t\n\t\n\t\n\t\tVariable arguments\n\t\t{function(string, ...[number]): number}\n\t\tA function that takes one argument (a string), and then a variable number of arguments that must be numbers.\n\t\tSpecifies variable arguments to a function.\n\t\t\n\t\n\t\n\t\tVariable arguments (in @param/ annotations)&lt;/td&gt;\n\t\t@param {...number} var_args\n\t\tA variable number of arguments to an annotated function.\n\t\tSpecifies that the annotated function accepts a variable number of arguments.\n\t\t\n\t&lt;/tr&gt;\n\t\n\t\tFunction optional arguments\n\t\t{function(?string=, number=)}\n\t\tA function that takes one optional, nullable string and one optional number as arguments. The = syntax is only for function type declarations.\n\t\tSpecifies optional arguments to a function.\n\t\t\n\t\n\t\n\t\tFunction optional arguments (in @param annotations)\n\t\t@param {number=} opt_argument\n\t\tAn optional parameter of type number.\n\t\tSpecifies that the annotated function accepts an optional argument.\n\t\t\n\t\n\t\n\t\tThe ALL type\n\t\t{*}\n\t\tIndicates that the variable can take on any type.\n\t\t\n\t\n\t\n\t\tThe UNKNOWN type\n\t\t{?}\n\t\tIndicates that the variable can take on any type, and the compiler should not type-check any uses of it.\n\t\t\n\t\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n",
      "url": "/guides/v2.0/coding-standards/docblock-standard-javascript.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-commands-html": {
      "title": "Common DevBox commands",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic lists DevBox commands you might find useful for day-to-day use or when troubleshooting issues. For more information about the Docker commands on which many of these are based, see the Docker command reference.\n\nRun cron, populate the cache and the storefront\n\nPopulating the cache and storefront causes the storefront, products, and images to load faster. Use this option after you make changes to the product catalog to pre-deploy static assets and put objects in the cache so the storefront loads faster.\n\nYou can also start the Magento cron job.\n\nHowever, enabling these options consumes resources and might drain your battery.\n\nPopulate the storefront and cache and run cron (running system) This section discusses how to populate the cache and storefront, and run cron, on a running DevBox system.\n\nStart the Magento cron job and populate the cache\nUse the following command to both start the Magento cron job and populate the cache and storefront:\n\ndocker-compose exec --user=magento2 web m2init magento:finalize --magento-warm-up-storefront=1 --magento-cron-run=1 --no-interaction\n\n\nStart the Magento cron job only\nUse the following command on a running system to only start the Magento cron job. This command might save resources and battery life on your laptop.\n\ndocker-compose exec --user=magento2 web m2init magento:finalize --magento-cron-run=1 --no-interaction\n\n\nPopulate the storefront and cache only\nUse the following command on a running system to only populate the storefront and cache but not run the Magento cron job.\n\ndocker-compose exec --user=magento2 web m2init magento:finalize --magento-warm-up-storefront=1 --no-interaction\n\n\n\nConfigure DevBox to always populate the storefront and cache and run cron To populate the storefront and cache, and run cron to run every time Magento starts:\n\n\n  \n    Stop all running containers.\n\n    docker-compose stop\n    \n  \n  Open &lt;project root dir&gt;/docker-compose.yml in a text editor.\n  \n    You have the following options:\n\n    \n      \n        To enable cron to run only, set the value of the following parameter to 1:\n\n        MAGENTO_CRON_RUN=1\n        \n      \n      \n        To only populate the storefront and cache but not run the Magento cron job, set the value of the following parameter to 1:\n\n        MAGENTO_WARM_UP_STOREFRONT=1\n        \n      \n      \n        To both enable the Magento cron job and to always populate the storefront and cache, set the values of both of the following parameters to 1:\n\n        MAGENTO_CRON_RUN=1\nMAGENTO_WARM_UP_STOREFRONT=1\n        \n      \n    \n  \n  Save your changes to docker-compose.yml and exit the text editor.\n  \n    Start all containers.\n\n    docker-compose start\n    \n  \n\n\n\n\nStop, start, restart, and view port mappings You can use the following commands to start, stop, and restart services; and you can find the ports currently being used by the services.\n\nRun all commands from your DevBox root folder.\n\nRestart the containers after rebooting\nAfter you restart your computer, we recommend you use the following command, which restarts all services and assigns them new ports:\n\nm2devbox-reset[.bat|sh]\n\n\nFind currently used ports\nIf you’re not sure what ports on which DevBox services are running, use the docker-compose ps command as follows:\n\n\n\n  \ndocker-compose ps\n\n                         Name                                        Command               State                                                 Ports                                              \n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nmagento2devbox_db_709831d587f2feef1e27fa41d4e70219        docker-entrypoint.sh mysqld      Up      0.0.0.0:32780-&gt;3306/tcp                                                                          \nmagento2devbox_elastic_709831d587f2feef1e27fa41d4e70219   /docker-entrypoint.sh elas ...   Up      0.0.0.0:32777-&gt;9200/tcp, 9300/tcp                                                                \nmagento2devbox_rabbit_709831d587f2feef1e27fa41d4e70219    docker-entrypoint.sh rabbi ...   Up      15671/tcp, 0.0.0.0:32778-&gt;15672/tcp, 25672/tcp, 4369/tcp, 5671/tcp, 0.0.0.0:32779-&gt;5672/tcp      \nmagento2devbox_redis_709831d587f2feef1e27fa41d4e70219     docker-entrypoint.sh redis ...   Up      6379/tcp                                                                                         \nmagento2devbox_web_709831d587f2feef1e27fa41d4e70219       /usr/local/bin/entrypoint.sh     Up      22/tcp, 0.0.0.0:22-&gt;32705/tcp, 44100/tcp, 0.0.0.0:32781-&gt;5000/tcp, 0.0.0.0:32782-&gt;80/tcp, 9000/tcp\n\n  In the preceding example:\n\n  \n    The database listens on port 32780\n    Elasticsearch listens on ports 32777 and 9300\n    RabbitMQ listens on ports 15671, 32778, 25672, 4369, 5671, and 32779\n    Redis listens on port 6379\n    \n      In the web container, the following ports are used:\n\n      \n        \n          SSH listens on port 32705\n\n          Applications like PhpStorm communicate with DevBox on the SSH listen port. It’s very important to know this port.\n        \n        Unison synchronization (Windows only) listens on port 32781\n        The web server listens on port 32782\n      \n    \n  \n\n  \n    You can use any unmapped ports anyway you like. (An example of an unmapped port is port 9000 in the web container in the preceding example.)\n  \n\n  Start, stop, restart services\n  DevBox uses two service names: web and db. To start, stop, or restart them, use the following commands:\n\n  docker-compose start &lt;service&gt;\ndocker-compose stop &lt;service&gt;\ndocker-compose restart &lt;service&gt;\n  \n\n  For example, to restart the web service:\n\n  docker-compose restart web\n  \n\n\n\nGeneral purpose commands \n  \n    \n      Description\n      Command\n    \n  \n  \n    \n      List all Magento containers, shows port mappings\n      docker-compose ps \n    \n    \n      Start a container\n      docker-compose start &lt;service&gt;\n    \n    \n      Stop a container\n      docker-compose stop &lt;service&gt;\n    \n    \n      Restart a container\n      docker-compose restart &lt;service&gt;\n    \n    \n      Restart all containers\n      docker-compose restart\n    \n    \n      Start all Magento containers\n      docker-compose start\n    \n    \n      Stop all Magento containers\n      docker-compose stop\n    \n    \n      Restart all Magento containers\n      docker-compose restart\n    \n    \n      Remove all Magento containers\n      docker-compose kill\n    \n    \n      Run a bash shell in a container\n      docker-compose exec --user=magento2 &lt;service&gt; /bin/bash\n    \n  \n\n\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-commands.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-over-html": {
      "title": "DevBox (Beta) quick installation overview",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThe Magento DevBox is the simplest way yet to install a Magento development system. DevBox puts the Magento application in a Docker container but all you have to do to set it up is run a script. No more installing an operating system, web server, PHP, and so on.\n\nDevBox is primarily intended for developers but anyone can use it, whether you’re a Magento newbie or just want to check out the Magento application. You should not use Magento DevBox in production.\n\nMagento’s DevBox installation is a step-by-step wizard that enables you to download a personalized script that sets up Magento DevBox on your machine. The script either installs the Magento software in a Docker container or creates a shared file system between existing Magento code and a Docker container.\n\nA new installation or using an existing Magento installation takes about 15 minutes.\n\nOptional sample data takes a few additional minutes.\n\nGet Magento DevBox now\n\n  \n    Magento DevBox should be used in development only. (You should not use it in production.)\n    Magento DevBox is Beta software. Report any issues on the DevBox GitHub repository.\n  \n\n\nNext steps\n\n  DevBox (Beta) reference\n  Troubleshoot issues with Magento DevBox\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-over.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-phpstorm-debug-html": {
      "title": "Debug in PhpStorm and browser",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic discusses how to debug custom code using PhpStorm and the Chrome web browser using Xdebug.\n\n\n\n  \n    PhpStorm notes:\n\n    \n      The instructions in this topic are based on PhpStorm version 2016.3.2. If you use a different version, some steps might be different. Consult your PhpStorm documentation for details.\n      \n        PhpStorm has a commonly used window that has a different name in Windows and Mac OS:\n\n        \n          Windows: The window is named Settings and you access it by clicking File &gt; Settings.\n          Mac OS: The window is named Preferences and you access it by clicking PhpStorm &gt; Preferences.\n        \n      \n    \n  \n\n  Create an SSH tunnel\n  Before you run Xdebug, you must create an SSH tunnel to the DevBox container.\n\n  SSH tunnel: Windows\n  To use an SSH tunnel on Windows:\n\n  \n    See Create an SSH tunnel on Windows.\n    Start Putty.\n    From the Saved Sessions list, click the name of your DevBox SSH session and click Load.\n    Click Open.\n    At the Login as prompt, enter magento2\n  \n\n  SSH tunnel: Mac OS\n  To create an SSH tunnel on Mac OS, open a Terminal window and enter the following command:\n\n  ./&lt;DevBox root folder&gt;/m2devbox-debug.sh\n  \n\n  Debug code with Xdebug\n  This section discusses how to debug code using Xdebug using PhpStorm and a web browser. For demonstration purposes, this topic discusses how to test Magento modules. Typically, you’ll test your own code; adjust the procedures as required.\n\n  Debug with PhpStorm and Xdebug\n  This topic discusses one way to debug code using PhpStorm. For additional information, consult the PhpStorm documentation.\n\n  To debug code with PhpStorm and Xdebug:\n\n  \n    Create an SSH tunnel to the DevBox container.\n    Open your DevBox PhpStorm project.\n    In the navigation window, expand the code to reveal a PHP file to test.\n    Double-click the file to open it.\n    \n      In the right pane, in the gray area next to a line number, click to set a breakpoint ().\n\n      The following figure shows an example.\n\n      \n    \n    \n      In the top navigation bar, click  (Debug).\n\n      If the navigation bar doesn’t display, click View &gt; Navigation Bar.\n\n      You can also right-click the PHP file name in the left pane and, from the pop-up menu, click Debug. (If more than one debug option is displayed, click the PHP option .\n\n      Results are displayed in the console pane as follows:\n\n      \n    \n  \n\n  Troubleshooting\n  This section discusses possible errors and how to solve them.\n\n  \n    \n      Problem: The following error is displayed:\n\n      Connection with 'xdebug 2.5.0' was not established. Validate installation.\n      \n\n      Solution: Make sure you created an SSH tunnel to the DevBox container and try again.\n    \n    \n      Problem: When you debug a PHP file, a web browser window opens.\n\n      Solution:\n\n      \n        \n          In the PhpStorm toolbar, click Edit Configurations from the Run/Edit Configurations button as the following figure shows.\n\n          \n        \n        \n          If there is a JavaScript configuration defined, click its name and delete it as the following figure shows.\n\n          \n        \n        \n          Click OK and try your test again.\n        \n      \n    \n  \n\n  Use Xdebug in a browser\n  This section discusses how to use Xdebug in Chrome using the Xdebug Helper extension. For information about Xdebug tools for other browsers, consult the browser documentation.\n\n  To use Xdebug Helper with Chrome:\n\n  \n    Create an SSH tunnel to the DevBox container.\n    Install the Xdebug Helper extension from the Chrome store.\n    \n      Enable the extension in Chrome as shown in the following figure.\n\n      \n    \n    Open your DevBox PhpStorm project.\n    \n      In the top navigation bar, click   (Start listening).\n\n      If the navigation bar isn’t displayed, click View &gt; Navigation Bar.\n    \n    In the PhpStorm navigation pane, double-click the PHP file to test.\n    In the right pane, in the gray area next to a line number, click to set a breakpoint ().\n    \n      In Chrome, go to a URL that invokes the breakpoint.\n\n      If Chrome is already displaying the URL, click Refresh in the Chrome toolbar.\n\n      If the Incoming Connection from Xdebug dialog box displays, select the same file in which you set the breakpoint and click Accept.\n    \n  \n\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-phpstorm-debug.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-phpstorm-parent-html": {
      "title": "Debug and test using PhpStorm",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThese topics discuss how to configure Xdebug, PHPUnit, and PhpStorm to test and debug Magento DevBox code:\n\n\n  PhpStorm prerequisites\n  Set up your PhpStorm project\n  Run PHPUnit\n  Debug in PhpStorm and browser\n  Common DevBox commands\n  Troubleshoot issues with Magento DevBox\n\n\nSee also\nDevBox reference\n",
      "url": "/guides/v2.0/install-gde/docker/docker-phpstorm-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-phpstorm-prereq-html": {
      "title": "PhpStorm prerequisites",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic discusses tasks you must perform before you can use PhpStorm with DevBox.\n\nFind a service port\nDevBox randomly assigns ports to services every time a container starts. To use DevBox with PhpStorm, you must know some of these ports (especially the SSH and the web server listen ports).\n\nDetermine a listen port\nTo determine a listen port:\n\nIn a command window, find your container identifiers:\n\ndocker-compose ps\n\n\nThe command displays the listen ports. An example follows:\n\n\n\n  \ndocker-compose ps\n\n                         Name                                        Command               State                                                 Ports                                              \n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nmagento2devbox_db_709831d587f2feef1e27fa41d4e70219        docker-entrypoint.sh mysqld      Up      0.0.0.0:32780-&gt;3306/tcp                                                                          \nmagento2devbox_elastic_709831d587f2feef1e27fa41d4e70219   /docker-entrypoint.sh elas ...   Up      0.0.0.0:32777-&gt;9200/tcp, 9300/tcp                                                                \nmagento2devbox_rabbit_709831d587f2feef1e27fa41d4e70219    docker-entrypoint.sh rabbi ...   Up      15671/tcp, 0.0.0.0:32778-&gt;15672/tcp, 25672/tcp, 4369/tcp, 5671/tcp, 0.0.0.0:32779-&gt;5672/tcp      \nmagento2devbox_redis_709831d587f2feef1e27fa41d4e70219     docker-entrypoint.sh redis ...   Up      6379/tcp                                                                                         \nmagento2devbox_web_709831d587f2feef1e27fa41d4e70219       /usr/local/bin/entrypoint.sh     Up      22/tcp, 0.0.0.0:22-&gt;32705/tcp, 44100/tcp, 0.0.0.0:32781-&gt;5000/tcp, 0.0.0.0:32782-&gt;80/tcp, 9000/tcp\n\n  In the preceding example:\n\n  \n    The database listens on port 32780\n    Elasticsearch listens on ports 32777 and 9300\n    RabbitMQ listens on ports 15671, 32778, 25672, 4369, 5671, and 32779\n    Redis listens on port 6379\n    \n      In the web container, the following ports are used:\n\n      \n        \n          SSH listens on port 32705\n\n          Applications like PhpStorm communicate with DevBox on the SSH listen port. It’s very important to know this port.\n        \n        Unison synchronization (Windows only) listens on port 32781\n        The web server listens on port 32782\n      \n    \n  \n\n  \n    You can use any unmapped ports anyway you like. (An example of an unmapped port is port 9000 in the web container in the preceding example.)\n  \n\n  Create an SSH tunnel on Windows\n  To use Xdebug with Docker on Windows, you must set up an SSH tunnel because Windows doesn’t have a native SSH client.\n\n  \n    You don’t need to use a third-party SSH client on Mac OS because it has a native client. Instead, run the m2devbox-debug.sh script before you need to create a tunnel to DevBox. One example of doing this is to run Xdebug.\n  \n\n  The following procedure shows an example of creating an SSH tunnel using Putty. You can use other applications (such as Cygwin); for more information, consult the documentation provided with those applications.\n\n  To set up an SSH tunnel on Windows using Putty:\n\n  \n    If you haven’t already done so, download Putty.\n    Start Putty.\n    In the Category pane, click Session.\n    \n      Enter the following information:\n\n      \n        Host Name (or IP address) field: Enter 127.0.0.1\n        Port field: Enter the SSH listen port\n      \n\n      \n    \n    In the Category pane, click Connection &gt; Data\n    \n      Enter the following information:\n\n      \n        Auto-login username field: Enter magento2\n      \n\n      \n    \n    In the Category pane, click Connection &gt; SSH &gt; Tunnels.\n    \n      Enter the following information:\n\n      \n        Source port field: Enter 9000\n        Destination field: Enter 127.0.0.1:9000\n        Click Remote\n      \n    \n    \n      Click Add.\n\n      The following figure shows an example.\n\n      \n    \n    In the Category pane, click Session.\n    In the Saved Sessions field, enter a name for this SSH tunnel.\n    \n      Click Save as the following figure shows.\n\n      \n    \n    To test the SSH tunnel, click Load, then click Open.\n  \n\n  If an “unable to connect” error displays, verify all of the preceding information and try again.\n\n  Set the user’s bash profile\n  This section discusses an optional step of changing to the /var/www/magento2 directory in the DevBox’s user’s bash profile. This means every time you start an interactive session in a command shell, you’re executing commands from that directory.\n\n  To set the user’s bash profile:\n\n  \n    Open a DOS command prompt (Windows) or Terminal (Mac OS) window.\n    \n      Enter the following command:\n\n      docker-compose exec --user=magento2 web /bin/bash\n      \n\n      This commands opens an SSH shell.\n    \n    \n      In the shell prompt, enter the following command:\n\n      vim ~/.bash_profile\n      \n    \n    Press i (insert).\n    \n      Enter the following command in the vim window:\n\n      cd /var/www/magento2\n      \n    \n    Press :wq to save the file and exit vim.\n    Enter exit to exit the SSH shell and return to your command prompt.\n  \n\n  Next step\n  Set up your PhpStorm project\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-phpstorm-prereq.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-phpstorm-project-html": {
      "title": "Set up your PhpStorm project",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic discusses how to set up a PhpStorm project to work with Magento DevBox.\n\n\n\n  \n    PhpStorm notes:\n\n    \n      The instructions in this topic are based on PhpStorm version 2016.3.2. If you use a different version, some steps might be different. Consult your PhpStorm documentation for details.\n      \n        PhpStorm has a commonly used window that has a different name in Windows and Mac OS:\n\n        \n          Windows: The window is named Settings and you access it by clicking File &gt; Settings.\n          Mac OS: The window is named Preferences and you access it by clicking PhpStorm &gt; Preferences.\n        \n      \n    \n  \n\n  If you have already set up a PhpStorm project, you can skip this topic and continue with:\n\n  \n    Debug in PhpStorm and browser\n    Run PHPUnit\n  \n\n  Prerequisites\n  Before you continue, complete the tasks discussed in PhpStorm prerequisites.\n\n  Set up your PhpStorm project\n  This section discusses how to set up a new PhpStorm project to work with Magento DevBox.\n\n  Create the project from existing files\n  To set up a new PhpStorm project to work with Magento DevBox:\n\n  \n    Start PhpStorm.\n    \n      Click File &gt; New Project from Existing Files.\n\n      The Create New Project: Choose Your Scenario dialog box is displayed as follows.\n\n      \n    \n    \n      Click Source files are in a local directory, no Web server is yet configured and click Next.\n\n      For a description of other options, consult the PhpStorm documentation.\n    \n    \n      In the Create New Project: Choose Project Directory dialog box, browse to locate the &lt;DevBox root folder&gt;/shared/webroot/pub folder.\n\n      Sample path on Windows: C:\\magento\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\\shared\\webroot\\pub\n\n      Sample path on Mac OS: /Users/me/build-18c4e4d3c5a541f37e9cffd35f1bf74e/shared/webroot/pub\n\n      The following figure shows an example.\n\n      \n    \n    Click Project Root and click Finish.\n    Wait while PhpStorm indexes the project.\n  \n\n  Add a remote PHP CLI interpreter\n  This section discusses how to add a remote PHP 7 CLI interpreter.\n\n  \n    \n      In your PhpStorm Settings window, do one of the following:\n\n      \n        Mac OS: Click PhpStorm &gt; Preferences.\n        Windows: Click File &gt; Settings.\n      \n    \n    In the left pane of the Preferences (Mac OS) or Settings (Windows) window, click Languages &amp; Frameworks &gt; PHP.\n    From the PHP Language Level list, click PHP 7.\n    \n      Click  next to the CLI Interpreter list.\n\n      The CLI Interpreters window is displayed.\n    \n    Click  (Add).\n    \n      From the Select Interpreter Path list, click Remote as the following figure shows.\n\n      \n    \n    \n      In the Configure Remote Interpreter dialog box, click SSH Credentials as the following figure shows.\n\n      \n    \n    \n      Enter the following information:\n\n      \n        Host: Enter 127.0.0.1 \n        Port: Enter the web container’s SSH listen port.\n        Username: Enter magento2\n        Password: Leave blank\n        Save password: Select the check box\n        PHP executable: Enter /usr/local/bin/php\n      \n    \n    \n      In the Configure Remote PHP Interpreter dialog box, click OK.\n\n      If the connection is successful, a confirmation dialog box similar to the following is displayed:\n\n      \n\n      If an error displays, review the preceding information, make sure you know the correct SSH listen port, and try again.\n    \n    Follow the prompts on your screen to save your changes.\n  \n\n  Create the Xdebug remote host\n  Adding an Xdebug remote host makes debugging easier because it happens automatically every time you start the DevBox container.\n\n  To create the Xdebug remote host:\n\n  \n    \n      In your CLI Interpreters dialog box, in the General section, click Refresh as the following figure shows.\n\n      \n    \n    \n      In the Additional section, click  next to the Configuration options field as the following figure shows.\n\n      \n    \n    In the Configuration Options dialog box, click  (Add).\n    \n      Enter the following information:\n\n      \n        Configuration Directive field: Enter xdebug.remote_host\n        Value field: Enter 127.0.0.1\n      \n    \n    \n      In the Configuration Options dialog box, click OK.\n\n      Make sure the option and value display as follows.\n\n      \n    \n    If the name and value are displayed, click OK.\n  \n\n  If both name and value do not display, click Refresh in the General section and try again.\n\n  Add path mappings\n  Because Magento uses symlinks, you must create path mappings so PhpStorm can properly locate files.\n\n  To add path mappings:\n\n  \n    In your PhpStorm Settings window, click Languages &amp; Frameworks &gt; PHP.\n    In the right pane, from the CLI Interpreter list, click the name of the DevBox remote CLI interpreter.\n    \n      In the right pane, next to the Path Mappings field, click .\n\n      The following figure shows an example.\n\n      \n\n      The Edit Project Path Mappings dialog box is displayed.\n    \n    In the Edit Project Path Mappings dialog box, click  (Add).\n    In the Local Path row, click  (Browse) to locate your DevBox project root directory and click Open.\n    \n      In the Remote Path field, enter /var/www/magento2\n\n      The following figure shows an example.\n\n      \n    \n    In the Edit Project Path Mappings dialog box, click OK.\n  \n\n  Set up PHPUnit\n  To set up PHPUnit:\n\n  \n    In your PhpStorm Settings window, expand Languages &amp; Frameworks &gt; PHP &gt; PHPUnit.\n    \n      In the right pane, click Use Composer autoloader as the following figure shows.\n\n      \n    \n    In the Path to script field, click  (Browse).\n    \n      Browse to locate &lt;PhpStorm project root&gt;/vendor/autoload.php\n\n      Sample path on Mac: /Users/me/Downloads/build-18c4e4d3c5a541f37e9cffd35f1bf74e/shared/webroot/vendor\n\n      Sample path on Windows: C:\\magento\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\\shared\\webroot\\vendor\n    \n    Click Open.\n    In the Preferences window, click OK.\n  \n\n  Set up PHPUnit to use the remote CLI interpreter\n\n  \n    In your PhpStorm Settings window, expand Languages &amp; Frameworks &gt; PHP &gt; PHPUnit.\n    In the center pane, click  (Add).\n    \n      From the list, click By remote interpreter as the following figure shows.\n\n      \n    \n    From the Interpreter list, click the name of the DevBox remote CLI interpreter.\n    \n      Click OK as the following figure shows.\n\n      \n    \n    In the Settings window, click OK.\n  \n\n  Set up a PHP server\n  To set up a PHP server for debugging:\n\n  \n    In your PhpStorm Settings window, click Languages &amp; Frameworks &gt; PHP &gt; Servers.\n    \n      In the center pane, click  (Add).\n\n      The following figure shows an example.\n\n      \n    \n    \n      Enter the following information:\n\n      \n        Name: Enter a name to identify your server\n        Host: 127.0.0.1\n        Port: Enter the SSH listen port\n        Select the Use path mappings check box.\n        Debugger: Click Xdebug\n      \n    \n    \n      Specify path mappings:\n\n      \n        In the File/Directory column, make sure your project root is selected.\n        In the Absolute path on the server column, click  (Edit) and enter /var/www/magento2\n      \n    \n    Click OK.\n  \n\n  Next steps\n\n  \n    Run PHPUnit\n    Debug in PhpStorm and browser\n  \n\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-phpstorm-project.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-phpstorm-test-html": {
      "title": "Run PHPUnit",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic discusses how to run PHPUnit tests from the command line or from PhpStorm.\nFor demonstration purposes, this topic discusses how to test Magento modules.\nTypically, you’ll test your own modules; replace the paths shown in the examples with the paths to your test files.\n\n\n\n  \n    PhpStorm notes:\n\n    \n      The instructions in this topic are based on PhpStorm version 2016.3.2. If you use a different version, some steps might be different. Consult your PhpStorm documentation for details.\n      \n        PhpStorm has a commonly used window that has a different name in Windows and Mac OS:\n\n        \n          Windows: The window is named Settings and you access it by clicking File &gt; Settings.\n          Mac OS: The window is named Preferences and you access it by clicking PhpStorm &gt; Preferences.\n        \n      \n    \n  \n\n  Prerequisites\n  Before you begin, make sure you have completed all of the following tasks:\n\n  \n    PhpStorm prerequisites\n    Set up your PhpStorm project\n  \n\n  \n    The instructions in this topic are based on PhpStorm version 2016.3.2.\nIf you use a different version, some steps might be different.\nConsult your PhpStorm documentation for details.\n  \n\n  Run unit tests from the command line\n  To run PHPUnit unit tests from the command line:\n\n  \n    \n      Enter the following command to run a Bash shell in the web container.\n\n      docker-compose exec --user=magento2 web /bin/bash\n      \n    \n    \n      In the Bash shell, change to the directory containing the objects to test.\n\n      For example, to run tests for the Admin notification module, change to the following directory:\n\n      cd /var/www/magento2/vendor/magento/module-admin-notification/Test/Unit\n      \n    \n    \n      Run PHPUnit as follows:\n\n      &lt;path to phpunit&gt; -c &lt;path to phpunit.xml&gt; .\n      \n\n      For example,\n\n      /var/www/magento2/vendor/bin/phpunit -c /var/www/magento2/dev/tests/unit/phpunit.xml .\n      \n\n      Notes:\n\n      \n        To run a single test, replace . with the name of the PHP file that defines the tests to run.\n        If there is no phpunit.xml, use phpunit.xml.dist instead.\n      *\tUse Ctrl+p+Ctrl+q to exit or detach from a container and leave it running.\n      \n    \n  \n\n  Run integration tests from the command line\n  To run PHPUnit integration tests from the command line:\n\n  \n    \n      Enter the following command to run a Bash shell in the web container.\n\n      docker-compose exec --user=magento2 web /bin/bash\n      \n    \n    \n      In the Bash shell, change to the following directory:\n\n      cd /var/www/magento2/dev/tests/integration \n      \n    \n    \n      Following is a sample command to run a test suite:\n\n      /var/www/magento2/vendor/bin/phpunit /var/www/magento2/dev/tests/integration/testsuite/Magento/Integration/Model/Config/Integration\n      \n    \n  \n\n  Run PHPUnit tests from PhpStorm\n  This section discusses one way to run PHPUnit tests in PhpStorm.\nFor more information about defining tests, consult the PhpStorm documentation.\n\n  Set up and run a test\n  To run PHPUnit tests from PhpStorm:\n\n  \n    Open your DevBox PhpStorm project.\n    \n      Expand the files in the left pane until you locate a test to run.\n\n      Tests are located in &lt;DevBox root folder&gt;/vendor/&lt;module vendor&gt;/&lt;module name&gt;/Test/Unit\n    \n    Right-click the name of the test.\n    \n      From the pop-up menu, click Run &lt;test name&gt;.\n\n      For example, the following figure shows how to run the SearchDataTest.\n\n      \n    \n  \n\n  Test results are displayed in the right pane.\nIf errors display, see the next section.\n\n  Troubleshoot unit tests\n  If your remote CLI interpreter or Xdebug options aren’t set up properly, the following messages are displayed:\n\n  ssh://magento2@127.0.0.1:32795/usr/local/bin/php -dxdebug.remote_host=127.0.0.1 /home/magento2/.PhpStorm_helpers/phpunit.php --no-configuration Magento\\\\AdvancedSearch\\\\Test\\\\Unit\\\\Block\\\\SearchDataTest /var/www/magento2/vendor/magento/module-advanced-search/Test/Unit/Block/SearchDataTest.php\nTesting started at 6:13 PM ...\n\nProcess finished with exit code 1\nCannot find PHPUnit in include path (.:/usr/local/lib/php)\n  \n\n  To resolve this issue, make sure you set up your remote CLI interpreter as discussed in Set up PHPUnit.\n\n  Also make sure Xdebug configuration options are set properly as discussed in Create the Xdebug remote host.\n\n  Next step\n\n  Debug in PhpStorm and browser\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-phpstorm-test.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-ref-html": {
      "title": "DevBox reference",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nSystem requirements\nTo use the Magento DevBox, you must have a system with the following:\n\n\n  64-bit Windows 10 Pro, Enterprise and Education (1511 November update, Build 10586 or later)\n  Mac OS 10.10.3 “Yosemite” or later\n\n\nMagento DevBox is packaged with the following:\n\n\n  Debian GNU/Linux 8 (jessie)\n  Apache 2.4.10\n  PHP 7.0.12\n  MySQL 5.6.34\n\n\nPrerequisites This section discusses prerequisites you must complete before you install the Magento DevBox.\n\nDocker prerequisites\nBefore you continue, make sure you install and configure the following:\n\n\n  Mac OS and Windows: Install the Docker software\n  \n    Windows 10 only:\n\n    \n      \n        You must enable Hyper-V\n\n        After Docker starts, it requests you to enable Hyper-V. A reboot is required.\n      \n      \n        Set up Docker file sharing as discussed in the next section\n      \n    \n\n    \n      You cannot work with Docker, VirtualBox, or Vagrant simultaneously on Windows 10.\n    \n  \n\n\nSet up Docker file sharing\nFor the Magento application to work, the application must be installed in a folder that Docker uses for file sharing.\n\nWindows\n\nTo set up Docker file sharing on Windows:\n\n\n  Right-click the Docker icon in the system tray.\n  From the pop-up menu, click Settings.\n  \n    Click the Shared Drives tab.\n\n    This tab page displays all drives that Docker currently knows about. Make sure you install Magento in a drive listed on this tab page.\n  \n  Select the check box next to the drive in which to install Magento.\n  Click Apply.\n\n\nMac OS\n\nTo set up Docker file sharing on the Mac OS:\n\n\n  Right-click the Docker logo.\n  From the pop-up menu, click Preferences.\n  \n    In the Preferences dialog box, click the File Sharing tab.\n\n    This tab page displays all shared directories that Docker currently knows about. Make sure you install Magento in a folder listed on this tab page.\n  \n  To add additional directories, follow the prompts on your screen or consult Docker documentation.\n\n\n\nGet Magento DevBox now\nTo get Magento DevBox now, go to the Magento download page.\n\n\n  \n    Magento DevBox should be used in development only. (You should not use it in production.)\n    Magento DevBox is Beta software. Report any issues on the DevBox GitHub repository.\n  \n\n\n\nHow DevBox uses file sharing DevBox runs in a Docker container, which is also referred to as the guest operating system. The Magento files and folders are located on your host operating system (Windows or Mac OS). To facilitate development, Magento files and directories are shared by the guest and host operating systems.\n\nWhen you make a change to files, the changes are automatically synchronized, regardless of which files you change. (In other words, if you change files on the host operating system, those files are synchronized with the guest operating system and vice versa.)\n\nUse the following guidelines:\n\n\n  \n    New Magento DevBox installations: Files are shared in the shared/webroot folder relative to your Magento installation root folder.\n\n    The Magento installation root folder is typically a subfolder of the folder in which you extracted the .zip file you download from Magento.\n  \n  \n    If you use an existing Magento installation with DevBox: Files are shared in the location to which you downloaded Magento.\n  \n\n\n\nMagento authentication prerequisites \n\n  The repo.magento.com repository is where Magento 2 and third-party Composer packages are stored and requires authentication. Use your Magento Marketplace account to generate a pair of 32-character authentication keys to access the repository.\n\n  To create authentication keys:\n\n  \n    Log in to the Magento Marketplace. If you don’t have an account, click Register.\n    \n      Click your account name in the top-right of the page and select My Profile.\n    \n    \n      Click Access Keys in the Marketplace tab.\n\n      \n    \n    \n      Click Create a New Access Key. Enter a specific name for the keys (e.g., the name of the developer receiving the keys) and click OK.\n    \n    New public and private keys are now associated with your account that you can click to copy. Save this information or keep the page open when working with your Magento project. Use the Public key as your user name and the Private key as your password.\n  \n\n  Manage your authentication keys\n  You can also disable or delete authentication keys. For example, you can disable or delete keys for security reasons after someone leaves your organization.\n\n  \n    To disable keys: Click Disable. You can do this if you want to suspend use of your keys.\n    To enable a previously disabled key: Click Enable.\n    To delete keys: Click Delete.\n  \n\n  You cannot delete or disable keys you created by signing in to your magento.com account. To manage those keys:\n\n  \n    Log in to your magento.com account.\n    Click My Account at the top of the page.\n    \n      Click Account Settings &gt; Downloads Access Token.\n\n      \n    \n    Click Generate new token to replace and disable an existing token.\n  \n\n\n\n\nHow to download Magento code This section applies to you if you use an existing Magento installation with DevBox. This means you first download the Magento software using either Composer or a compressed archive but you don’t install the software.\n\nDownloading a compressed archive has potential issues on the Mac OS, which extracts known compressed file types like .zip to a folder. The folder contains files that have to be copied in a particular way; otherwise, the Magento DevBox doesn’t perform properly.\n\nIf you download a compressed archive on the Mac OS, you must make sure to copy all of the Magento code to an empty folder. In particular, you must copy all Apache distributed configuration files, named .htaccess, to the folder. .htaccess files are located in several Magento directories, including in the root folder.\n\nFailure to copy .htaccess files causes the Magento application to function incorrectly because URL redirects won’t work.\n\nWhen you download a file on the Mac OS, the file is usually located in the /Users/&lt;name&gt;/Downloads folder. If you download a .zip file, it’s usually extracted to a subfolder like the following:\n\n\n/Users/&lt;name&gt;/Downloads/&lt;Magento folder name&gt;\n\n\nTo make sure your existing Magento installation works it with DevBox, create an empty folder and copy all of the contents of the Magento compressed file to it as follows:\n\n\nmkdir -p &lt;path&gt;\ncp -r /Users/&lt;name&gt;/Downloads/&lt;Magento folder name&gt; &lt;path&gt;\n\n\n  Don’t use arguments like /* in the cp command because hidden files like .htaccess won’t copy.\n\n\nFor example, to copy Magento Open Source 2.1.3 code to a new folder named /Users/me/Applications/Magento, use the following commands:\n\nmkdir -p /Users/me/Applications/Magento\ncp -r /Users/me/Downloads/Magento-CE-2_1_3_zip-2016-12-16-06-04-03 /Users/me/Applications/Magento\n\n\nDouble-check to make sure the hidden files were copied:\n\nls -al /Users/me/Applications/Magento\n\n\nThe first files listed should be:\n\n\n.gitignore\n.htaccess\n.htaccess.sample\n.php_cs\n.travis.yml\n .user.ini\n\n\nAll the files in the preceding list are hidden; if these files exist in the folder, it confirms you copied them correctly.\n\n\nInstallation options This section discusses options common to creating a new Magento installation or using an existing Magento installation.\n\nNew or existing installation\nThe first question the wizard asks is whether you want to:\n\n\n  \n    Create New Magento Installation\n\n    Choose this option if you haven’t yet downloaded the Magento software.\n  \n  \n    Get Only DevBox and Use Existing Local Installation\n\n    Choose this option if you have already downloaded the Magento software but haven’t installed it yet.\n  \n\n\nChoose your operating system\nClick a supported operating system.\n\nLocal Project Path (existing installation only)\nEnter the path to install the Magento application. The simplest option is to specify an absolute file system path like /Users/me/magento. The folder must already exist.\n\nSee How to download Magento code.\n\nSelect Magento Edition\nFor new installations, you have the option to install Magento Open Source or Magento Commerce. Both editions require authentication; to get Magento Commerce authentication credentials, you must be a licensed customer.\n\nOptional sample data Optional sample data provides a storefront based on the Luma theme outfitted with products, categories, customer registration, and so on. It functions just like a Magento storefront and you can manipulate prices, inventory, and promotional pricing rules using the Magento Admin.\n\nSelect the check box to install optional sample data. This option increases your installation time by a few minutes.\n\nAccess Keys\nEnter your Magento public and private authentication keys in the provided fields.\n\nClick Take Me to My Access Keys to log in to magento.com and get or generate authentication keys.\n\n\nAdvanced options for new installations To provide you more control over your Magento installation, we enable you to choose the following advanced options:\n\n\n    \n        \n            Option\n            Description\n        \n    \n        Local Project Path\n        Enter the path to install the Magento application. The simplest option is to specify an absolute file system path like /Users/me/magento. The folder must already exist.\n            See How to download Magento code.\n    \n    \n        Store Admin Username\n        Enter a user name for the Magento Admin, the management application for your stores.\n    \n    \n        Store Admin Password\n        Enter the administrator's password.\n    \n    \n        Authentication Key Directory\n        Directory used to store your Magento authentication keys. From the Composer Directory list, click either of the following: Automatically generate: Allow Magento to create a directory for you.Use existing directory: If your authentication keys are already located in a directory on your laptop, specify its location relative to your home directory. Select the Use Access Keys from Composer directory? check box if your keys are stored in the specified directory.\n    \n\n    \n        Environment configuration\n        Choose which of the following software to install: RabbitMQ (required for Magento EE, can be installed optionally for Magento Open Source)Redis for full-page cacheRedis for the default Magento cacheRedis for session cacheVarnish for HTTP accelerationElasticsearch (used by Magento EE 2.1 and later only, can be installed optionally for Magento CE)\n    \n\n\n\n\nAdvanced options for existing installations \n    \n        \n            Option\n            Description\n        \n    \n        Store Admin Username\n        Enter a user name for the Magento Admin, the management application for your stores.\n    \n    \n        Store Admin Password\n        Enter the administrator password to log in to the Magento Admin, the management application for your stores.\n    \n    \n        Authentication Key Directory\n        Directory used to store your Magento authentication keys. From the Composer Directory list, click either of the following: Automatically generate: Allow Magento to create a directory for you.Use existing directory: If your authentication keys are already located in a directory on your laptop, specify its location relative to your home directory. Select the Use Access Keys from Composer directory? check box if your keys are stored in the specified directory.\n    \n\n    \n        Environment configuration\n        Choose which of the following software to install: RabbitMQ (required for Magento EE, can be installed optionally for Magento Open Source)Redis for full-page cacheRedis for the default Magento cacheRedis for session cacheVarnish for HTTP accelerationElasticsearch (used by Magento EE 2.1 and later only, can be installed optionally for Magento CE)\n    \n\n\n\n\nRun scripts\nAfter you finish the DevBox wizard, you’re prompted to download a .zip file to any folder on your system. When you extract the .zip file, your operating system might create another folder.\n\nIn the following example, the user downloaded build-18c4e4d3c5a541f37e9cffd35f1bf74e.zip to a C:\\magento folder on Windows. Extracting the .zip created a subfolder.\n\nC:\\magento\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\\build-18c4e4d3c5a541f37e9cffd35f1bf74e\n\n\nAn equivalent folder on Mac OS follows:\n\n/Users/me/Downloads/build-18c4e4d3c5a541f37e9cffd35f1bf74e\n\n\nThe preceding sample paths are referred to as the DevBox root folder.\n\nTo run the scripts, you should open a DOS command prompt (Windows) or Terminal (Mac) window and change to the DevBox root folder.\n\nThe following DevBox scripts and configuration files are located in the root folder:\n\n\n  m2devbox-init.[bat|sh] which starts the DevBox installation.\n  \n    m2devbox-reset.[bat|sh] which restarts the DevBox installation.\n\n    You can run this script, for example, after you stop and start your computer or Docker. DevBox assigns new ports to services. You can do the following:\n\n    \n      To set static listen ports that don’t change every time you restart a container, see Set static listen ports before you run m2devbox-init.[bat|sh]\n      To find the listen ports currently being used, see Stop, start, restart, and view port mappings.\n    \n  \n  \n    docker-compose.yml DevBox configuration file.\n\n    To set static listen ports so you don’t have to reconfigure PhpStorm every time you start DevBox, see Set static ports.\n  \n  Windows only: m2devbox-unison-sync.bat, which runs Unison file synchronization. You should not run this script by itself; one of the other scripts starts it automatically.\n  Mac OS only: m2devbox-debug.sh, which opens an SSH tunnel to the Docker container so PhpStorm can connect to it.\n\n\n\n  When you run the installation script on Windows, an additional command window opens for Unison sync. You don’t normally need to interact with this command window.\n\n  Do not close the Unison sync window; otherwise, files you change won’t be added to the Magento docroot.\n\n\nSet static listen ports\nBy default, every time you start a Docker container, all listen ports are reassigned randomly. To cause DevBox to use the same listen ports every time you restart, you must modify docker-compose.yml before you initialize DevBox for the first time.\n\nTo set static listen ports:\n\n\n  \n    Open docker-compose.yml in a text editor.\n\n    It’s located in the root directory to which you downloaded DevBox.\n  \n  Locate the ports: section.\n  \n    Precede the default listen port with a free port number followed by :\n\n    An example follows.\n\n    ports:\n   - \"12345:80\"\n   - \"54321:22\"\n    \n\n    The preceding example causes the web container to listen on port 12345 and SSH to listen on port 54321.\n\n    \n      Make sure the ports you assign to DevBox are not used by another process.\n    \n  \n  Save your changes to docker-compose.yml and exit the text editor.\n\n\nNext step\nPhpStorm prerequisites\n",
      "url": "/guides/v2.0/install-gde/docker/docker-ref.html"
    }
    ,
  
    "guides-v2-0-install-gde-docker-docker-trouble-html": {
      "title": "Troubleshoot issues with Magento DevBox",
      "content": "\n      DevBox is currently undergoing an update and is not available for download. A new version will be available in the near future. Please check back for updates.\n\n\nThis topic discusses suggested solutions to issues you might counter when installing or using Magento DevBox.\n\nProblem: Cannot install Magento This section discusses errors that prevent you from installing DevBox.\n\nDirectory not empty\nThe following error message might be displayed:\n\nProject directory ./ is not empty\n\n\nThe preceding error means that the directory into which you’re trying to install the Magento software isn’t empty. To verify which directory is the cause of the error, open docker-compose.yml. The directory name is specified as follows:\n\nvolumes:\n   - \"Users/me/somepath:/home/magento2/magento2\"\n\n\nIn this case, delete everything from Users/me/somepath\n\nSolution: Make sure all files, including all hidden files, are removed from that directory and try again.\n\nSQLSTATE[HY000] [2002] Connection refused\nThe following error message might be displayed:\n\nExecuting shell command:\ncd /var/www/magento2 &amp;&amp; php bin/magento setup:install --base-url=http://127.0.0.1:32774/ --db-host=db --db-name=magento2 --db-user=root --db-password=root --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --backend-frontname=admin\nSQLSTATE[HY000] [2002] Connection refused\n\n\n \t  [InvalidArgumentException] \n  Parameter validation failed\n\n\nSolution: Run the Terminal (Mac OS) as root or run DOS Command Prompt (Windows) as Administrator.\n\n\nProblem: Error displays in the Magento Admin After you log in to the Magento Admin, the following notification error might display:\n\nYour web server is set up incorrectly and allows unauthorized access to sensitive files. Please contact your hosting provider.\n\n\nThis error results from the fact that the Magento application is running in developer mode. The message doesn’t indicate any issues. You can ignore it and develop as normal.\n\n\nProblem: 404 error accessing the Magento Admin, storefront is accessible When you access the Magento Admin, the following error displays in the browser:\n\nThe requested URL /admin was not found on this server.\n\n\nHowever, you can access the Magento storefront.\n\nSolution: The most likely cause of this error is missing .htaccess files the Magento application uses for URL redirects and other things. To resolve this error, if you use the Mac OS, see How to download Magento code\n\n\nProblem: Cannot access the Magento storefront or Admin If you are having trouble accessing your Magento storefront and Magento Admin, connect to the web container and run some additional commands.\n\n\n  \n    Locate the running web container by running the command: docker-compose ps\n\n    The web container has a name like magento2devbox_web_1\n  \n  \n    Connect to the web container using the following command:\n\n    docker-compose exec --user=magento2 &lt;service&gt; /bin/bash\n    \n  \n  \n    Navigate to the Magento installation and call the compiler by running the following command:\n\n    cd /var/www/magento2/ &amp;&amp; php bin/magento setup:di:compile\n    \n  \n  \n    Optional: After the compiler finishes, run the following command to speed up page loads:\n\n    php bin/magento setup:static-content:deploy\n    \n  \n  \n    When you’re finished, enter exit.\n  \n\n\n\nProblem: Errors display on Windows During installation, errors similar to the following display in your primary command window:\n\nERROR: for db  Cannot create container for service db: C: drive is not shared. Please share it in Docker for Windows Settings\nERROR: Encountered errors while bringing up the project.\n\n\nOther errors might display in a secondary command window:\n\nError response from daemon: No such container: magento2devbox_web_7f927cb82fd5dfc7d21b4d02387a0d12\nError response from daemon: No such container: magento2devbox_web_7f927cb82fd5dfc7d21b4d02387a0d12\nError: No such container: magento2devbox_web_7f927cb82fd5dfc7d21b4d02387a0d12\n\n\nSolution: Set up file sharing.\n\n\nProblem: Error during installation During DevBox installation, the following error might display:\n\nERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network\n\nSolution: Try the following:\n\n\n  If you’re connected to a VPN network, end your VPN session and try to install DevBox again.\n  \n    Check the total number of active Docker networks:\n\n    docker network ls\n    \n\n    If there are more than 32 networks, delete the networks you’re not using and try again. (Docker has a limit of 32 active network connections.)\n\n    The following command deletes all Docker networks; use it with caution:\n\n    docker network rm $(docker network ls -q)\n    \n  \n\n\nFor more information, see the Docker GitHub issue.\n\n\nProblem: You want to start over In the event you want to start over with a new Magento application installation, use the following steps from the directory to which you copied the DevBox scripts:\n\n\n  \n    List all Magento Docker containers.\n\n    docker-compose ps\n    \n  \n  \n    Kill the Magento Docker containers.\n\n    docker rm -fv &lt;service&gt;\n    \n  \n  \n    Run one of the following commands:\n\n    \n      \n        Mac OS\n\n        ./m2devbox-init.sh\n        \n      \n      \n        Windows\n\n        m2devbox-init.bat\n        \n      \n    \n  \n\n\n",
      "url": "/guides/v2.0/install-gde/docker/docker-trouble.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-domain-layer-html": {
      "title": "Domain layer",
      "content": "What is Magento Domain layer?\n\nThe domain layer holds the business logic layer of a Magento module. It typically does not contain resource-specific or database-specific information. Its primary functions include:\n\n\n  \n    Defining the generic Magento data objects, or models, that contain business logic. This logic defines which operations can be performed on particular types of data, such as a Customer object. These models contain generic information only. Applications can also use SOAP or RESTful endpoints to request data from models.\n  \n  \n    (Optionally) Including the implementation of service contracts, although not their definition.\n  \n\n\n\n  Best practice: Use service contracts to communicate with the domain layer by passing data types through strongly typed objects. This helps you avoid the need to replace presentation layer code when replacing business layer logic.\n\n\nModels\n\nEach domain-layer model contains a reference to a resource model, which it uses to retrieve data from the database with MySql calls. This resource model contains logic for connecting to the underlying database, typically MySQL. A model requires a resource model only if the model data must persist.\n\nWho accesses the domain layer?\n\nThere are three primary ways of accessing a module’s domain-layer code:\n\n\n  \n    Service contracts are the recommended way for one module to access another module’s domain-level code. This loosely coupled solution is the optimal way for most modules to access another module.\n  \n  \n    A module can directly call into another module. This tightly coupled solution is not recommended for most situations, but is sometimes unavoidable.\n  \n  \n    Domain layer code in one module can also plug itself into another module by:\n\n    \n      \n        event hooks\n      \n      \n        plugins\n      \n      \n        di.xml files (with an SPI contract)\n      \n    \n  \n\n\nYour strategy for calling another module’s domain-layer code is highly dependent upon the unique configuration and needs of your system.\n\nRelated topics\n\nArchitectural diagrams\n\nArchitectural layers overview\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/domain_layer.html"
    }
    ,
  
    "guides-v2-0-release-notes-changes-ee-changes-html": {
      "title": "Backward incompatible changes in Magento Commerce",
      "content": "This topic provides details about backward incompatible changes made in Magento Commerce 2.0.\n\nAll changes are generated automatically using the codebase of corresponding releases in private repository that contains additional modules only.\n\n\n  To track all changes in Magento Commerce, consider changes in Magento Open Source.\n\n\nThe changes are aggregated into two tables:\n\n\n  Changes in classes that contains backward incompatible changes made to the Magento classes\n  Changes in interfaces that contains backward incompatible changes made to the Magento interfaces\n\n\n\n  Temporary issue: Added docblock tags like @deprecated are defined in How Changed as Class was added or Method has been added.\n\n\n2.0.16 - 2.0.17\n\nChanges in classes\n\n\n    What changed\n    How changed\n\n    \n        Magento\\Framework\\ForeignKey\\Migration\\AbstractCommand::__construct\n        [public] Method parameter name changed.\n    \n\n\n2.0.15 - 2.0.16\n\nNo changes\nNo backward incompatible changes.\n\n2.0.14 - 2.0.15\n\nNo changes\nNo backward incompatible changes.\n\n2.0.13 - 2.0.14\n\nNo changes\nNo backward incompatible changes.\n\n2.0.12 - 2.0.13\n\nNo changes\nNo backward incompatible changes.\n\n2.0.11 - 2.0.12\n\nChanges in classes\n\n\n    What changed\n    How changed\n\n    \n        Magento\\AdminGws\\Model\\Plugin\\OrderCollection::beforeLoad\n        [public] Method parameter changed.\n    \n\n\n2.0.10 - 2.0.11\n\nNo changes\nNo backward incompatible changes.\n\n2.0.9 - 2.0.10\n\nNo changes\nNo backward incompatible changes.\n\n2.0.8 - 2.0.9\n\nNo changes\nNo backward incompatible changes.\n\n2.0.7 - 2.0.8\n\nNo changes\nNo backward incompatible changes.\n\n2.0.6 - 2.0.7\n\nNo changes\nNo backward incompatible changes.\n\n2.0.5 - 2.0.6\n\nNo changes\nNo backward incompatible changes.\n\n2.0.4 - 2.0.5\n\nNo changes\nNo backward incompatible changes.\n\n2.0.3 - 2.0.4\n\nNo changes\nNo backward incompatible changes.\n\n2.0.2 - 2.0.3\n\nNo changes\nNo backward incompatible changes.\n\n2.0.1 - 2.0.2\n\nNo changes\nNo backward incompatible changes.\n\n2.0.0 - 2.0.1\n\nNo changes\nNo backward incompatible changes.\n\n\n\n",
      "url": "/guides/v2.0/release-notes/changes/ee_changes.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-enable-module-html": {
      "title": "Enable or disable your component",
      "content": "After you have built the component and are ready to enable it in your Magento environment, do the following:\n\n\nDisable the cache under System-&gt;Cache Management.\nEnter the following at the command line:\n\n\nbin/magento module:enable --clear-static-content Component_Name\nbin/magento setup:upgrade\n\n\nwhere Component_Name is the name of the component you are enabling.\n\nCheck under Stores-&gt;Configuration-&gt;Advanced-&gt;Advanced that the component is present.\n\n\n\n  \n  The general order of operations for setup:upgrade is:\n\n  \n    Schema install/upgrade.\n    Schema post-upgrade&#8212; handles any additional updates. These recurring upgrades occur independently and regardless of any changes to the schema.\n    Data install/upgrade &#8212; installs the data. Taken from setup/InstallData.php.\n  \n\n\nDisable a component\n\nTo disable a component, enter the following at the command line:\n\nbin/magento module:disable --clear-static-content Component_Name\n\n\nFor more on enabling and disabling components, see enable or disable modules.\n",
      "url": "/guides/v2.0/extension-dev-guide/build/enable-module.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environment-vars-cloud-html": {
      "title": "Magento Commerce (Cloud) environment variables",
      "content": "Environment variables that are specific to Magento Commerce (Cloud) are prefixed with MAGENTO_CLOUD_*.\n\n\n  MAGENTO_CLOUD_APP_DIR: The absolute path to the application directory.\n  MAGENTO_CLOUD_APPLICATION: A base64-encoded JSON object that\ndescribes the application. It maps the content of the\n.magento.app.yaml that you have in Git and it has a few subkeys.\n  MAGENTO_CLOUD_APPLICATION_NAME: The name of the application, as configured\nin the .magento.app.yaml file.\n  MAGENTO_CLOUD_DOCUMENT_ROOT: The absolute path to the web document root, if\napplicable.\n  MAGENTO_CLOUD_ENVIRONMENT: The name of the environment (that is, the\nname of the branch in Git).\n  MAGENTO_CLOUD_PROJECT: The ID of the project.\n  MAGENTO_CLOUD_RELATIONSHIPS: A base64-encoded JSON object whose keys\nare the relationship name and the values are arrays of relationship\nendpoint definitions. Each relationship endpoint definition is a\ndecomposed form of a URL. It has a scheme, a host, a port, and\noptionally a username, password, path and some additional\ninformation in query.\n  MAGENTO_CLOUD_ROUTES: Describe the routes that you defined in the\nenvironment. It maps the content of the .magento/routes.yaml\nfile.\n  MAGENTO_CLOUD_TREE_ID: The ID of the tree the application was built\nfrom. It’s essentially the SHA of the tree in Git.\n  MAGENTO_CLOUD_VARIABLES: A base64-encoded JSON object which keys are\nvariables names and values are variable values (a string).\n\n\n\n  If you’re attempting to override Magento configuration settings using the Project Web Interface, you must prepend the variable name with env:. For example:\n\n\n\nSince values can change over time, you should inspect the variable at runtime and use it to configure your application.\n\nFor example, we use the MAGENTO_CLOUD_RELATIONSHIPS variable to retrieve environment-related relationships as follows:\n\n /**\n     * Get relationships information from MagentoCloud environment variable.\n     *\n     * @return mixed\n     */\n    protected function getRelationships()\n    {\n        return json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]), true);\n    }\n\n\nRelated topics\n\n  Overview of environment variables\n  Magento application environment variables\n  Example setting variables\n  .magento.app.yaml\n  services.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/env/environment-vars_cloud.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environment-vars-magento-html": {
      "title": "Magento application environment variables",
      "content": "These sections list the environment variables for general Magento and deployment. You can add variables using the Project Web Interface or CLI commands.\n\nMagento application variables\n\nThe following table lists variables that you can override using environment variables.\n\n\n\nVariable name\nDescription\nDefault value\n\n\n\nADMIN_USERNAME\nUser name for a Magento administrative user. This user is an administrator and can create other users, including other administrative users.\nadmin\n\nADMIN_FIRSTNAME\nAdministrative user's first name.\nJohn\n\nADMIN_LASTNAME\nAdministrative user's last name.\nDoe\n\nADMIN_EMAIL\nAdministrative user's e-mail address. This value is required for upgrading and patching Magento Commerce (Cloud) and is used to send password reset emails. To set, see Add admin variables for Admin access.\nNot set\n\nADMIN_PASSWORD\nAdministrative user's password. Initially, we generate a random password and provide an email directing the Project Owner to reset the password. You should immediately change this password.\nNot set\n\nADMIN_URL\nEnter the relative URL by which to access the Magento Admin. For security reasons, we recommend you choose a value other than admin or backend or another term that is easy to guess.\nadmin\n\nADMIN_LOCALE\nSpecifies the default locale used by the Magento Admin.\nen_US\n\n\n\n\nFor additional variables, continue to the following sections.\n\nMagento deploy variables\nThe following variables are available during the deploy process of build and deploy. To know what version the variable is available on, see the Magento Version in the table.\n\n\n\n\nVariable name\nDescription\nDefault value\n\n\nUPDATE_URLS\nOn deployment, replace Magento base URLs in the database with project URLs. This is useful for local development, where base URLs are set up for your local environment. When you deploy to a Cloud environment, we change the URLs so you can access your storefront and Magento Admin using project URLs.\nYou should set this variable to disabled only in Staging or Production environments, where the base URLs can't change. For Pro, we already set this to disabled for you.\nThis is available in versions 2.0.10 and later.\nenabled\n\n\nCLEAN_STATIC_FILES\nThe default value, enabled, cleans generated static view files when you perform an action like enabling or disabling a component. We recommend the default value in development. The supported values are enabled and disabled.\nFailure to clear static view files might result in issues if there are multiple files with the same name and you don't clear all of them. \nBecause of static file fallback rules, if you do not clear static files and there is more than one file named logo.gif that are different, fallback might cause the wrong file to display.\nThis is available in all versions.\nenabled\n\n\nSTATIC_CONTENT_EXCLUDE_THEMES\nThemes can include numerous files. If you want to skip copying over theme files during deployment, you can set this environment variable. For example, the Luma theme is included with Magento Commerce (Cloud). You may not need to constantly deploy this theme with your code updates and deployments. To exclude, you would add the theme, for example: Magento/luma. This is available in all versions.\nnot set\n\n\nADMIN_LOCALE\nSpecifies the default locale used by the Magento Admin. This is available in all versions.\nen_US\n\n\nSTATIC_CONTENT_THREADS\nSets the number of threads for processing and deploying static content files. The higher amount of threads increasing the amount of files processed during the deployment. The lower the number of threads, the slower static files are processed increasing deployment time.\nFor Starter plan environments and Pro Integration environments, the threads value is 1. This amount is fine for these environments. For Pro Staging and Production environments, the default threads is 3 to increase the speed of processing static content, especially for Production with three nodes and GlusterFS.\nTo further reduce deployment time, we recommend using Configuration Management with the scd-dump command to move static deployment into the build phase.\nThis is available in all versions.\n1 for Starter environments and Pro Integration environments\n3 for Pro Staging and Production environments\n\n\nDO_DEPLOY_STATIC_CONTENT\nYou can forcefully enable or disable the deployment of static content during the deploy phase with this variable. If you already completed static content deployment in the build phase, and this variable is enabled, it will be overridden to ensure static content deployment occurs only once. We strongly recommend always deploying static content during the build phase.  This is available in all versions.\ndisabled\n\n\nMAGENTO_CLOUD_MODE\nWe manage the values and setting of this variable. It identifies the type of environment as part of Integration, Staging, or Production. For example, for Pro, this value may be enterprise indicating Staging and Production. For enterprise, it sets the STATIC_CONTENT_THREADS to 3, otherwise sets it to 1 for Integration. This is highly important for Pro plans Production, which has a three node high availability architecture with a very different technology stack. This is available in all versions.\nenterprise\n\n\nVERBOSE_COMMANDS\nEnables or disables the Symfony debug verbosity level for your logs. Be aware, if you enable this verbosity, the logs will be deeply detailed. This is available in all versions.\ndisabled\n\n\nADMIN_USERNAME\nUser name for a Magento administrative user. This user is an administrator and can create other users, including other administrative users. This is available in all versions.\nadmin\n\nADMIN_FIRSTNAME\nAdministrative user's first name. This is available in all versions.\nNot set, example: John\n\nADMIN_LASTNAME\nAdministrative user's last name. This is available in all versions.\nNot set, example: Doe\n\nADMIN_EMAIL\nAdministrative user's e-mail address. This value is required for upgrading and patching Magento Commerce (Cloud) and is used to send password reset emails. To set, see Add admin variables for Admin access.\nNot set\n\nADMIN_PASSWORD\nAdministrative user's password. Initially, we generate a random password and provide an email directing the Project Owner to reset the password. You should immediately change this password.\nNot set\n\nADMIN_URL\nEnter the relative URL by which to access the Magento Admin. For security reasons, we recommend you choose a value other than admin or backend or another term that is easy to guess. If you set this value through a variable and the Admin Panel in Starter environments, the variable overrides the Admin Panel (or database value). For Pro, the Admin Panel (database value) overrides the variable. The values are also managed by UPDATE_URLS. This is available in all versions.\nadmin\n\n\nSTATIC_CONTENT_SYMLINK\nGenerates symlinks for static content. By default, symlinks are always generated unless you disable it using this environment variable. This setting is vital for Pro Production environment for the three node cluster. If disabled, every file will be copied during deployment without automated symlinks generated. If disabled, this will increase deployment time. This is available in all versions.\nenabled\n\n\n\nFor information on the build and deploy process, see Deployment process.\n\nAdd environment variables\nYou can add environment variables for active environments through the Project Web Interface and through the Magento Cloud CLI. To create variables through the Project Web Interface, see Set environment variables.\n\n\n  Every time you add or modify a variable using the web interface or the CLI, the branch will redeploy automatically.\n\n\nTo create a variable using the command line:\n\n\n  Login to the Magento Cloud CLI. Enter the command magento-cloud login and provide your credentials.\n  To set a variable for the project, use the command magento-cloud project:variable:set &lt;name&gt; &lt;value&gt;. The alias for this command is also pvset. For example, magento-cloud pvset example 123 creates a variable example with a string value of 123 for the project.\n  After creating these variables, you can list all project variables with the command magento-cloud project:variable:get or magento-cloud pvget.\n  To set a variable for the branch, use the command magento-cloud variable:set &lt;name&gt; &lt;value&gt;. The alias for this command is also vset. For example, magento-cloud vset example2 abc creates a variable example2 with a string value of abc for the branch.\n  After creating these variables, you can list all project variables with the command magento-cloud variable:get or magento-cloud vget.\n\n\nTroubleshooting\nIn the event something goes wrong and you can not access your environment after it deploys, try the following:\n\n\n  SSH to the environment and make sure services are running.\n  \n    Restore your snapshot:\n\n    magento-cloud snapshot:list\nmagento-cloud snapshot:restore &lt;snapshot&gt;\n    \n  \n\n\nFor more information on snapshots, see Snapshots and backup management.\n",
      "url": "/guides/v2.0/cloud/env/environment-vars_magento.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environment-vars-over-html": {
      "title": "Manage variables",
      "content": "Magento Commerce (Cloud) supports variables for environments, projects, and applications. These variables affect all aspects of build, deployment, and configuration settings.\n\n\n  Magento application environment variables\n  Magento Commerce (Cloud) environment variables\n\n\nYou can create all variables using the Magento Cloud CLI in all Starter environments and Pro Integration environments. You can create environment variables through the Project Web Interface for all Starter and Pro environments (created after October 23, 2017 or updated).\n\nAdditional information\nFor additional information on Magento variables for v2.1.X and later, see the following:\n\n\n  Sensitive and system-specific\n  Sensitive configuration paths reference\n  Other configuration paths reference\n  System settings reference\n\n\nTo use a configuration path as a variable:\n\n\n  All text must be ALL CAPS.\n  Prefix the configuration path with the scope (the default scope, CONFIG__DEFAULT, or a specific scope).\n  Replace / characters in the configuration path with two underscore characters.\n\n\nEnvironment variables\nMagento Commerce (Cloud) enables you to create environment variables that override configuration options. For example, we strongly recommend you immediately change your Magento Admin URI and administrative user’s password to prevent someone guessing your login and changing settings without your knowledge.\n\nWe support the following types of variables:\n\n\n  Variables defined by Magento Commerce (Cloud) itself\nand that give you all the context you need about the environment (how to\nconnect to your database, for example).\n  Custom environment variables you define.\n\n\nEnvironment variable names must use the characters a-z, A-Z, 0-9, and ., _, :, - only and can be up to 256 characters in length.\n\nPlatform variables that are expressed as base64-encoded JSON object can be up to 4KB in size.\n\nEnvironment variables have an env namespace.\n\n\n  Variables are hierarchical, which means that if a variable is not overridden, it is inherited from the parent environment and is indicated as inherited.\nThis enables you to define your development variables only once, and use them on all the child environments.\n\n\nCLI: List the current environment variables\nTo list current environment variables using SSH:\n\n\n  Log in to your project using the CLI. Enter the command magento-cloud login and provide your credentials.\n  \n    List the projects:\n\n    magento-cloud project:list\n    \n  \n  \n    List environments in the selected project:\n\n    magento-cloud environment:list -p &lt;project id&gt;\n    \n  \n  \n    SSH to the environment:\n\n    magento-cloud environment:ssh -p &lt;project id&gt; -e &lt;environment name&gt;\n    \n  \n  \n    After you’re connected, enter export.\n\n    Variables are base64-encoded JSON objects.\n  \n  \n    To decode the value of a variable, enter\n\n    echo $&lt;variable name&gt; | base64 --decode\n    \n\n    For example,\n\n    echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 --decode\n    \n  \n\n\nCLI: List environment variables for a project or branch\nTo list environment variables using Magento Cloud CLI:\n\n\n  Login to the Magento Cloud CLI. Enter the command magento-cloud login and provide your credentials.\n  List all project variables with the command magento-cloud project:variable:get or magento-cloud pvget.\n  List all project variables with the command magento-cloud variable:get or magento-cloud vget.\n\n\nCLI: Add environment variables\n\n\n  Everytime you add or modify a variable using the Project Web Interface or the CLI, the branch will redeploy automatically.\n\n\nTo create a variable using the command line:\n\n\n  Login to the Magento Cloud CLI. Enter the command magento-cloud login and provide your credentials.\n  To set a variable for the project, use the command magento-cloud project:variable:set &lt;name&gt; &lt;value&gt;. The alias for this command is also pvset. For example, magento-cloud pvset example 123 creates a variable example with a string value of 123 for the project.\n  After creating these variables, you can list all project variables with the command magento-cloud project:variable:get or magento-cloud pvget.\n  To set a variable for the branch, use the command magento-cloud variable:set &lt;name&gt; &lt;value&gt;. The alias for this command is also vset. For example, magento-cloud vset example2 abc creates a variable example2 with a string value of abc for the branch.\n  After creating these variables, you can list all project variables with the command magento-cloud variable:get or magento-cloud vget.\n\n\nProject Web Interface: Add environment variables\nYou can add environment variables for active environments through the Project Web Interface. To create variables through the Project Web Interface, see Set environment variables.\n\n\n  Everytime you add or modify a variable using the Project Web Interface or the CLI, the branch will redeploy automatically.\n\n\nRelated topics\n\n  Magento Cloud environment variables\n  Magento application environment variables\n  Example setting variables\n  .magento.app.yaml\n  services.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/env/environment-vars_over.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-environments-logs-html": {
      "title": "View logs for troubleshooting",
      "content": "This topic discusses how you can use logs to troubleshoot problems related to Magento Commerce build hooks and deploy hooks.\n\nYou may need to SSH into the environments to locate and view logs. To locate the SSH command to access your environments, see the following:\n\n\n  Starter: For all environments, click Access Site for the environment in the Project Web Interface\n  \n    Pro:\n\n    \n      Integration: Copy the link for the SSH command per environment through the Project Web Interface\n      Staging: ssh -A &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n      Production: ssh -A &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n    \n  \n\n\nBuild logs\nAfter pushing to your environment, you can see the results of the both hooks. Logs from the build hook are redirected to the output stream of git push, so you can observe them in the terminal or capture them (along with error messages) with git push &gt; build.log 2&gt;&amp;1.\n\nFor 2.1.9 and later and 2.2.X, we include a var/log/cloud.log file inside the Magento application root directory, that compiles both build and deploy actions into one file.\n\nDeploy logs\nYou can review these logs via SSH into the environment. Change to the directories listed below to review the logs.\n\nFor 2.1.9 and later and 2.2.X, we include a var/log/cloud.log file inside the Magento application root directory, that compiles both build and deploy actions into one file.\n\nLogs from the deploy hook are located on the server in the following locations:\n\n\n  Integration: /var/log/deploy.log\n  Staging: /var/log/platform/&lt;prodject ID&gt;_stg/post_deploy.log\n  Production: /var/log/platform/&lt;prodject ID&gt;/post_deploy.log\n\n\nThe value of &lt;project ID&gt; depends on the project ID and whether the environment is Staging or Production. For example, with a project ID of yw1unoukjcawe, the Staging environment user is yw1unoukjcawe_stg and the Production environment user is yw1unoukjcawe.\n\nFor example, on the Staging environment for project yw1unoukjcawe, the deploy log is located at /var/log/platform/yw1unoukjcawe_stg/post_deploy.log.\n\nLogs for all deployments that have occurred on this environment are appended to this file. Check the timestamps on log entries to verify and locate the logs you want for a specific deployment.\n\nThe actual log output is highly verbose to allow troubleshooting. The following is a condensed example:\n\n[2016-10-11 22:15:38] Starting pre-deploy.\n...\n[2016-10-11 22:15:39] Pre-deploy complete.\n[2016-10-11 22:15:42] Start deploy.\n[2016-10-11 22:15:42] Preparing environment specific data.\n[2016-10-11 22:15:42] Initializing routes.\n\n... more ...\n\n[2016-10-11 22:15:46] Deployment complete.\n\nThe deploy log contains start and stop messages for each of the two hooks:\nStarting pre-deploy, Pre-deploy complete., Start deploy., and Deployment complete..\n\nApplication logs\nTo review other application logs in Staging or Production, you can access and review those logs in /var/log/platform/&lt;project ID&gt;.\n\nFor Staging, the project ID has _stg at the end. For example, if you receive 500 errors in Staging and want to review the nginx logs, you can SSH to the Staging environment and locate the logs in /var/log/platform/&lt;project ID&gt;_stg.\n\nRemember, when viewing the logs for Production, you have three nodes to check.\n",
      "url": "/guides/v2.0/cloud/trouble/environments-logs.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environments-ssh-html": {
      "title": "SSH and sFTP",
      "content": "SSH, or Secure Shell, is a common protocol used to securely log into remote servers and systems. You will typically use SSH to access your environments directly to enter CLI commands for managing your branching, creating variables, and much more. We also support sFTP (Secure FTP) using your SSH public key.\n\nTo use SSH, you need to:\n\n\n  Generate your SSH public and private keys\n  Add your SSH public key to your remote server either through CLI commands or the Project Web Interface\n  Use Magento Cloud CLI or Git commands to SSH to an environment\n\n\nYou create an SSH key pair including a public and private key:\n\n\n  The public key is safe to provide for accessing a site, SSH, and sFTP.\n  The private key should remain private on your workspace that you use for remote accessing environments. Never share your private key. Don’t add it to a ticket, copy it to a chat, or attach it to emails.\n\n\nHow SSH keys work\nWhen you enter an SSH command to connect your client to the remote host, the host and your workspace begin tests back and forth to verify and allow access. These tests use the public and private keys you generated. Your entered command initiates SSH key authentication to request access to the server, indicating the public key to use. The server checks for authorized keys in its list for your public key. When found, it generates a message string and encrypts it with the public key the host has for you. Your system receives the message, decrypts it using your local private key, and merges the message with a session ID. Your system generates an MD5 of the message and session ID, sending it back to the host. If everything checks out, this passes the connection test and completes full SSH access to the host.\n\n\n\n  You must create an SSH key pair on every machine and workspace you and your team expect to work with and access Magento Commerce (Cloud) and GitHub branches. The SSH keys connect you to GitHub to manage branches and push code without having to constantly supply your username and password. You can add multiple SSH keys to GitHub per each workspace you use.\n\n  The SSH keys require the following:\n\n  \n    Set up SSH keys as the Magento file system owner.\n    Create the keys using the email address used for the GitHub account.\n  \n\n  For more information on SSH keys, see the following:\n\n  \n    Connecting to GitHub with SSH\n    Manually generating your SSH key in Windows\n    ssh-keygen man page\n  \n\n  Locate an existing SSH key pair\n  An existing SSH key pair is typically located in the .ssh subdirectory of the user’s home directory. This folder is hidden and may not display in the file manager or finder unless configured to display hidden files and folders.\n\n  You can quickly verify if you have SSH keys by entering commands using terminal access.\n\n  To check for SSH keys, enter the following command:\n\n  ls ~/.ssh\n  \n\n  If you have SSH keys, a directory listing is displayed similar to the following:\n\n  id_rsa  id_rsa.pub  known_hosts\n  \n\n  If you don’t have SSH keys, you need to generate the keys for adding to your Magento ECE account and GitHub account. See Create a new SSH key pair.\n\n  If you already have SSH keys, continue to:\n  \n    Add a public SSH key to your Magento account section\n    Add your SSH key to your GitHub account\n  \n\n  Create a new SSH key pair\n  Use the ssh-keygen command to create an SSH key pair. ssh-keygen is typically installed on Linux systems.\n\n  To create an SSH key pair:\n\n  \n    \n      The command syntax follows, entering the email used for your GitHub account:\n\n       ssh-keygen -t rsa\n      \n\n      GitHub also uses the key length -b 4096 in the command.\n Follow the prompts to complete the key.\n    \n    \n      When prompted to “Enter a file in which to save the key,” press Enter to save the file to the default location. The prompt displays the location.\n    \n    \n      When prompted to enter a secure passphrase, enter a phrase to use like a password. Make note of this passphrase. You may be requested to enter it depending on tasks you complete using a terminal during development.\n    \n    \n      After creating the SSH key pair, start the ssh-agent:\n\n      For Mac or Linux:\n\n       $ eval \"$(ssh-agent -s)\"  For Mac, you may also want to edit the  `~/.ssh/config` file to automatically load keys into the ssh-agent and store passphrases in your keychain.\n\n Host *\n     AddKeysToAgent yes\n     UseKeychain yes\n     IdentityFile ~/.ssh/id_rsa\n      \n\n      For Windows:\n\n       $ eval $(ssh-agent -s)\n      \n    \n    \n      Add the SSH key to the ssh-agent. If you used a different name for the key file name, replace id_rsa with that file name.\n\n      For Mac:\n\n       ssh-add -K ~/.ssh/id_rsa\n      \n\n      For Windows or Linux:\n\n       ssh-add ~/.ssh/id_rsa\n      \n    \n    \n      Add your SSH key to your GitHub account. The instructions include Mac, Windows, and Linux.\n    \n  \n\n  Test the SSH keys\n\n  After adding the SSH keys, test the SSH connection to GitHub:\n\n  \n    \n      In the terminal, enter the following command:\n\n       ssh -T git@github.com\n      \n    \n    \n      You may see a warning that the authenticity of the host can’t be established followed by an RSA fingerprint. Enter yes to continue.\n    \n    \n      If successful, you should receive a success message. If you receive a permission denied error, see Error: Permission denied (publickey) troubleshooting on GitHub.\n    \n  \n\n  Add a public SSH key to your Magento account\n  You can add SSH keys to your account in any of the following ways:\n\n  \n    Using the Magento Commerce (Cloud) CLI\n    Using the Magento Commerce (Cloud) Web Interface\n  \n\n  Add a key using the CLI\n  To add an SSH key using the CLI:\n\n  \n    Open a terminal application on your local.\n    \n      If you haven’t done so already, log in (or switch to) the Magento file system owner to the server on which your SSH keys are located.\n    \n    \n      Log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      Add the key:\n\n      magento-cloud ssh-key:add ~/.ssh/id_rsa.pub\n      \n    \n  \n\n  Add a key using the Project Web Interface\n  You will select and add your SSH public key to each environment in your account.\n\n  \n    Starter: Add to Master (Production) and any environments you create by branching from Master\n    Pro: Add to Master Integration environment. After your Staging and Production environments are provisioned, you can add the SSH keys to those environments.\n  \n\n  To add an SSH key using the Project Web Interface:\n\n  \n    \n      Copy your SSH public key to the clipboard.\n\n      If you don’t already have SSH keys on that machine, see GitHub documentation to create them.\n    \n    Login and access your project through the Project Web Interface.\n    \n      In your selected branch, an icon displays if you do not have an SSH key added.\n\n      \n    \n    \n      Copy and paste the content of your public SSH key in the screen.\n\n      \n    \n    Follow the prompts on your screen to complete the task.\n  \n\n  Set global Git variables\n  Set required global Git variables on the machine to commit or push to a Git branch. These variables set Git credentials for accessing your GitHub account.\n\n  To set variables, enter the following commands on every workspace:\n\n  git config --global user.name \"&lt;your name&gt;\"\ngit config --global user.email &lt;your e-mail address&gt;\n  \n\n  For more information, see First-Time Git Setup\n\n  SSH to an environment\n  You can connect using SSH in any of the following ways:\n\n  \n    SSH using Magento Cloud CLI\n    Locate the SSH command in the Project Web Interface\n    Git SSH commands for Pro Staging and Production\n  \n\n  SSH using Magento Cloud CLI\n  Magento Cloud CLI commands can only be used in environments with the software installed. These environments include:\n\n  \n    Starter environments\n    Pro Integration environments\n  \n\n  To SSH to an environment using the Magento Cloud command line:\n\n  \n    \n      Log in to the project:\n\n      magento-cloud login\n      \n    \n    \n      List the project IDs:\n\n      magento-cloud project:list\n      \n    \n    \n      List the environments in that project:\n\n      magento-cloud environment:list -p &lt;project ID&gt;\n      \n    \n    \n      SSH to the environment:\n\n      magento-cloud ssh -p &lt;project ID&gt; -e &lt;environment ID&gt;\n      \n    \n  \n\n  Locate the SSH command in the Project Web Interface\n  You can locate the SSH command for all Starter environments and Pro Integration environments through the Project Web Interface.\n\n  To copy the SSH command:\n\n  \n    Log in to the Project Web Interface.\n    Select an environment or branch to access.\n    \n      Click Access Site.\n\n      \n    \n    Click the clipboard button to copy the full SSH command to the clipboard.\n    Enter the command in a terminal window to SSH.\n  \n\n  Example SSH command:\n\n  ssh abcdefg123abc-smith-a12b34c--mymagento@ssh.us-2.magento.cloud\n  \n\n  Git SSH commands for Pro Staging and Production\n  You can’t use the Magento Cloud CLI to SSH into Pro plan Staging and Production systems. You can SSH into those environments and use Git CLI commands for managing your branches and Linux/Unix commands for managing the system.\n\n  With your SSH keys added to those servers, you can use a terminal application, the SSH command, and the URL to access the server.\n\n  For the URLs, see the following:\n\n  \n    Staging: http[s]://staging.&lt;your domain&gt;.c.&lt;project ID&gt;.ent.magento.cloud\n    \n      Production:\n\n      \n        Load balancer URL: http[s]://&lt;your domain&gt;.c.&lt;project ID&gt;.ent.magento.cloud\n        Direct access to one of the three redundant servers: http[s]://&lt;your domain&gt;.{1|2|3}.&lt;project ID&gt;.ent.magento.cloud\n      \n    \n  \n\n  SSH tunneling\n\n  \n\n    You can also use SSH tunneling to connect to a service from your local development environment as if the service were local. Before tunneling, you need to have SSH configured.\n\n    Use a terminal application to log in and issue commands.\n\n    magento-cloud login\n\n    First, you may want to check if any tunnels are already open using the following command:\n\n    magento-cloud tunnel:list\n    \n\n    To build a tunnel, you must know the name of the app to which to tunnel. Use the following commands to list those applications:\n\n    cd &lt;project directory&gt;\nmagento-cloud project:list\nmagento-cloud apps\n    \n\n    For information on the command, you can enter magento-cloud apps --help.\n\n    Set up the SSH tunnel\n    Use the following command:\n\n    magento-cloud tunnel:open -e &lt;environment ID&gt; --app &lt;app name&gt;\n    \n\n    For example, to open a tunnel to the sprint5 branch in a project with an app named mymagento, enter\n\n    magento-cloud tunnel:open -e sprint5 --app mymagento\n    \n\n    Messages similar to the following display:\n\n    SSH tunnel opened on port 30003 to relationship: solr\nSSH tunnel opened on port 30004 to relationship: redis\nSSH tunnel opened on port 30005 to relationship: database\nLogs are written to: /home/magento_user/.magento/tunnels.log\n\nList tunnels with: magento-cloud tunnels\nView tunnel details with: magento-cloud tunnel:info\nClose tunnels with: magento-cloud tunnel:close\n    \n\n    Get tunnel information\n    To display information about your tunnel, enter:\n\n    magento-cloud tunnel:info -e &lt;environment ID&gt;\n    \n\n    Connect to services\n    Now you can connect to services as if they were running locally.\n\n    For example, to connect to the database, use the following command:\n\n    mysql --host=127.0.0.1 --user='&lt;database user name&gt;' --pass='&lt;user password&gt;' --database='&lt;name&gt;' --port='&lt;port&gt;'\n    \n\n    Details about the service display if you use the magento-cloud tunnel:info command.\n\n    sFTP to environments\n    Typically, you want to use SSH for secure access to your environments and migrate files with rsync commands. We also support accessing your environments using sFTP (secure FTP) with SSH authentication.\n\n    You need the following requirements to sFTP into cloud environments:\n\n    \n      You need to use a client that supports SSH key authentication for sFTP and use your SSH public key.\n      Your public SSH key must be added to the target environment. For Starter environments and Pro Integration environments, you can add it through the Project Web Interface. For Pro Staging and Production, you must enter a Support ticket with your public key attached. Never provide your private SSH key.\n    \n\n    When configuring sFTP, use your SSH public key and the following information for access:\n\n    \n      Username: All content before the @ in your public SSH key.\n      Password: You do not need a password for sFTP. sFTP access uses the SSH key based authentication.\n      Host: All content after the @ in your public SSH key.\n      Port: 22, which is the default SSH port.\n    \n\n    To add your SSH public key information to your client:\n\n    \n      Use a text editor to open your generated SSH public key. Locate and edit the file in the directory location you generated it into.\n      Copy and paste all content before the @ in the file for the client Username.\n      Leave Password empty.\n      Copy and paste all content after the @ in the file for the client Host.\n      For the Port, enter 22.\n    \n\n    Depending on the client, you may need to enter additional options and setup to complete SSH authentication for sFTP. Review the documentation for your selected client.\n\n    For Starter environments and Pro Integration environments, you may also want to consider adding a mount for access to a specific directory. You would add the mount to your .magento.app.yaml file. For a list of writable directories, see Project structure. This mount point will only work in those environments.\n\n    For Pro Staging and Production environments, you need to enter a Support ticket to request sFTP access in those environments. We can then create a mount point and provide access to the specific pub/media folder.\n\n    Related topics\n    \n      Project structure\n      Prepare for local environment setup\n      Prepare to deploy to Staging and Production\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/env/environments-ssh.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environments-start-html": {
      "title": "Manage branches with the CLI",
      "content": "When managing with your environment, you will tend to use the Magento CLI and SSH into the system. You should have the Magento CLI installed and SSH keys set up. For detailed information on the environment architecture, see Starter or Pro architecture information.\n\nTo manage the branches and environments with the Project Web Interface, see Manage branches with the Project Web Interface.\n\nCommon Magento CLI commands\nThe following Magento CLI commands can be run from any directory and run best from a project directory. When run from a project directory, you can omit the -p &lt;project ID&gt; parameter. These commands are meant to be used to manage integration environments. You may notice these commands are similar to Git commands. The magento-cloud versions directly connect with Magento Git, the Magento ECE project, and provide Git features.\n\nAll commands are shown with required options only. Get help for any magento-cloud command by appending --help.\n\n\n  git commit --allow-empty -m \"redeploy\" &amp;&amp; git push &lt;branch name&gt;\n  Push an empty commit to force a redeployment. Some actions, like adding a user for example, don’t result in deployment.\n  magento-cloud login\n  Log in to the project.\n  magento-cloud project:get &lt;project ID&gt; &lt;directory&gt; -e &lt;environment ID&gt;\n  Clone a project to a directory. To clone the master environment, omit -e &lt;environment ID&gt;.\n  magento-cloud environment:list -p &lt;project ID&gt;\n  List the environments in the current project (that is, the project that corresponds to the directory in which you run the command).\n  magento-cloud environment:branch &lt;name&gt; &lt;parent branch&gt;\n  Create a new branch with a name and an ID. This information corresponds to the environment.\n\n\n\n  The environment name is different from the environment ID only if you use spaces or capital letters in the environment name. An environment ID consists of all lowercase letters, numbers, and allowed symbols. Capital letters in an environment name are converted to lowercase in the ID; spaces in an environment name are converted to dashes.\n\n  An environment name cannot include characters reserved for your Linux shell or for regular expressions. Forbidden characters include curly braces ({ }), parentheses, asterisk (*), angle brackets (&lt; &gt;), ampersand (&amp;), percent (%), and other characters.\n\n\n\n  magento-cloud environment:checkout &lt;environment ID&gt;\n  Check out an existing environment.\n  magento-cloud environment:merge -p &lt;project ID&gt; -e &lt;environment ID&gt;\n  Merge changes in this environment with its parent.\n  magento-cloud environment:synchronize -p &lt;project ID&gt; -e &lt;environment ID&gt; {code|data}\n  Synchronize (that is, git pull) code and/or data from the parent to this environment.\n  magento-cloud variable:list\n  List variables in this environment.\n  magento-cloud variable:set &lt;name&gt; &lt;value&gt;\n  Set a value for an environment variable in this environment.\n\n\nFor a full list of Magento cloud CLI commands, see the Magento cloud Magento Cloud CLI reference\n\nGet started creating branches\nTo begin, you’ll need a branch to work in.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Merge a branch\n  After completing development, you can merge this branch to the parent. The following instructions provide an example.\n\n  \n    Complete code in your local branch.\n    \n      Add, commit, and push your change to the environment:\n\n      git add -A\ngit commit -m \"&lt;commit message&gt;\"\ngit push origin &lt;branch name&gt;\n      \n\n      Where &lt;branch name&gt; is the Git name of the environment (that is, the environment ID).\n    \n    \n      Merge with the parent environment:\n\n      magento-cloud environment:merge &lt;environment ID&gt;\n      \n\n      For example,\n\n      magento-cloud environment:merge master\n      \n    \n  \n\n  Optionally delete the environment\n  Before you delete an environment, make sure you don’t need it anymore. You cannot recover a deleted environment later.\n\n  \n  You cannot delete the master environment of any project.\n\n\n  You must be a project administrator, environment administrator, or Project Owner to perform this task.\n\n  This section discusses how to optionally delete an environment in the following ways:\n\n  \n    Make the environment inactive but let it remain in the project\n    Delete the environment entirely and remove it from the project\n  \n\n  To delete a environment:\n\n  \n    Log in to your project if you haven’t already done so.\n    \n      Fetch branches from the origin server.\n\n      git fetch origin\n      \n    \n    \n      To delete the branch entirely (removing it from the project), check out the branch.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n    \n    \n      Delete the environment:\n\n      magento-cloud environment:delete &lt;environment ID&gt;\n      \n\n      For example, to delete the deleteme environment:\n\n      magento-cloud environment:delete deleteme\n      \n\n      To delete more than one environment:\n\n      magento-cloud environment:delete &lt;environment ID&gt; &lt;environmentID&gt;\n      \n\n      For additional options, see the command-line help:\n\n      magento-cloud environment:delete --help\n      \n    \n    \n      Answer the prompt:\n\n       Are you sure you want to delete the remote Git branch deleteme? [Y/n]\n      \n\n      A Y answer makes the branch inactive but leaves it in the project.\n    \n    \n      Answer the prompt:\n\n      Delete the remote Git branch too? [Y/n]\n      \n\n      A Y answer completely removes the branch from the project.\n    \n  \n\n  Wait for the environment to delete.\n\n  \n  To activate the environment later, use the magento-cloud environment:activate command.\n\n\n  Integration environment IP addresses\n  The following table lists incoming and outgoing IP addresses used by Magento Commerce (Cloud) Integration environments.These IP addresses are stable, but might change in the future. Prior to any future change, all affected customers will receive ample warning.\n\n  If you have a corporate firewall that blocks outgoing SSH connections, you can add the inbound IP addresses to your whitelist.\n\n  \n\nOutbound IP addresses\nInbound IP addresses\n\n\nUS Region\nEU Region\nUS Region\nEU Region\n\n\n\n52.200.155.111\n52.200.149.44\n50.17.163.75\n\n\n52.51.163.159\n52.209.44.60\n52.208.156.247\n\n\n52.200.159.23\n52.200.159.125\n52.200.160.5\n\n\n52.209.44.44\n52.209.23.96\n52.51.117.101\n\n\n\n\n  Interact with environments via CLI\n  After setting up your set up SSH, you can interact with services and modify settings through your local to a remote environment.\n\n  The following steps provide an example of accessing a database:\n\n  \n\n    \n      \n        SSH to the integration environment.\n\n        magento-cloud ssh\n        \n      \n      \n        Find the database login information:\n\n        php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]))-&gt;database);'\n        \n\n        Sample output follows:\n\n        \nArray\n   (\n      [0] =&gt; stdClass Object\n        (\n           [username] =&gt; user\n           [password] =&gt;\n           [ip] =&gt; 192.0.2.60\n           [host] =&gt; database.internal\n           [query] =&gt; stdClass Object\n              (\n                [is_master] =&gt; 1\n              )\n\n           [path] =&gt; main\n           [scheme] =&gt; mysql\n           [port] =&gt; 3306\n        )\n    )\n      \n      \n        Use the following command to connect to the database:\n\n        mysql --host=&lt;host&gt; --user='&lt;database user name&gt;' --password='&lt;user password&gt;' --port='&lt;port&gt;' --database='&lt;path&gt;'\n      \n    \n\n    SSH tunneling\n\n    \n\n      You can also use SSH tunneling to connect to a service from your local development environment as if the service were local. Before tunneling, you need to have SSH configured.\n\n      Use a terminal application to log in and issue commands.\n\n      magento-cloud login\n\n      First, you may want to check if any tunnels are already open using the following command:\n\n      magento-cloud tunnel:list\n      \n\n      To build a tunnel, you must know the name of the app to which to tunnel. Use the following commands to list those applications:\n\n      cd &lt;project directory&gt;\nmagento-cloud project:list\nmagento-cloud apps\n      \n\n      For information on the command, you can enter magento-cloud apps --help.\n\n      Set up the SSH tunnel\n      Use the following command:\n\n      magento-cloud tunnel:open -e &lt;environment ID&gt; --app &lt;app name&gt;\n      \n\n      For example, to open a tunnel to the sprint5 branch in a project with an app named mymagento, enter\n\n      magento-cloud tunnel:open -e sprint5 --app mymagento\n      \n\n      Messages similar to the following display:\n\n      SSH tunnel opened on port 30003 to relationship: solr\nSSH tunnel opened on port 30004 to relationship: redis\nSSH tunnel opened on port 30005 to relationship: database\nLogs are written to: /home/magento_user/.magento/tunnels.log\n\nList tunnels with: magento-cloud tunnels\nView tunnel details with: magento-cloud tunnel:info\nClose tunnels with: magento-cloud tunnel:close\n      \n\n      Get tunnel information\n      To display information about your tunnel, enter:\n\n      magento-cloud tunnel:info -e &lt;environment ID&gt;\n      \n\n      Connect to services\n      Now you can connect to services as if they were running locally.\n\n      For example, to connect to the database, use the following command:\n\n      mysql --host=127.0.0.1 --user='&lt;database user name&gt;' --pass='&lt;user password&gt;' --database='&lt;name&gt;' --port='&lt;port&gt;'\n      \n\n      Details about the service display if you use the magento-cloud tunnel:info command.\n\n      Related topics\n      \n        Manage branches with the Project Web Interface\n        Magento Cloud CLI reference\n      \n    \n  \n\n",
      "url": "/guides/v2.0/cloud/env/environments-start.html"
    }
    ,
  
    "guides-v2-0-cloud-env-environments-html": {
      "title": "Configure your environments",
      "content": "Environments in Magento Commerce (Cloud) include containers with applications, services, a database, and much more to provide a complete system for your Magento application (codebase and files). You can configure environment variables, settings, routes, and more to support your code branches per project environment.\n\nWe provide options to:\n\n\n  Export configuration settings to a file for cross-environment deployment\n  Set environment variables per environment\n\n\n\n\n  \n    Updating your Pro project: These sections include instructions for Pro projects with Staging and Production available in the Project Web Interface. To add Staging and Production to your interface, see Add Staging and Production to Pro projects UI.\n\n    We can update Pro projects created before October 23, 2017. All new Pro projects include these features. Your ticket will be queued for update, which may take time to complete. We will keep you updated through the process.\n\n    If you do not request this update, you must use CLI commands or tickets to modify settings, variables, routes, and more for Pro plan Staging and Production environments.\n  \n\n  Environments and branches\n  Every Magento Commerce (Cloud) project starts with a master environment that corresponds to the master branch in Git. Each environment has an associated active Git branch of code.\n\n  \n    For Pro, we recommend branching from Integration.\n    For Starter, we recommend creating a staging branch, then creating additional code branches from staging.\n  \n\n  We recommend using GitHub for maintaining your code branches.\n\n  \n  Your project must have a master branch; it won't function properly without one.\n\n\n  You can create branches using the Project Web Interface or Git CLI commands. For this information, examples use Git or Magento Cloud CLI commands.\n\n  Active and inactive branches\n  You have access to a limited number of active Git branches per plan. When you push this branch, an active environment is provisioned as a container, updating when you push per the configurations of .magento.app.yaml, services.yaml, and routes.yaml.\n\n  You begin by creating active branches and pushing code. You can use the following command to create an active branch from a parent branch:\n\n  magento-cloud environment:branch\n  \n\n  You have unlimited inactive Git branches. These branches do not receive an environment until it is made active. You can use the following command to activate an inactive branch:\n\n  magento-cloud environment:activate\n  \n\n  When you activate an inactive branch, or create a new active branch, the command deploys a new active environment with a web server and services.\n\n  Branch hierarchy, development, and deployment\n  For Starter and Pro plans, the master environment is ultimately the source or parent for all code in Magento Commerce (Cloud).\n\n  \n    For Starter, master is your Production environment and branch. You create branches from master as your Integration environment.\n    For Pro, you have a master branch in Integration for creating your code branches. You deploy this branch to a matching master branch in Staging and Production environments.\n  \n\n  Your Integration includes a number of branches and environments available to you per plan. When you branch from master, you create a child relationship to this parent. Every branching creates a parent-child relationship. Each child environment can synchronize code, data, or both from its parent. Syncing data to an environment results in a byte-for-byte copy of all services and media files.\n\n  You fully develop in these branches. When ready, you push the code to build and deploy to an Integration enviornment. In these Integration environments, you can test custom code, extensions, third party integrations, and more. When ready, you merge this child Integration branch up to a parent. When merged, the parent environment redeploys with the code changes of the child environment. For Pro, this is the Integration master. For Starter, it is an environment and branch of your choice.\n\n  For extensive details, see the following:\n\n  \n    \n      Starter:\n\n      \n        Starter architecture\n        Starter develop and deploy workflow\n      \n    \n    \n      Pro:\n\n      \n        Pro architecture\n        Pro develop and deploy workflow\n      \n    \n    \n      Deployment process\n    \n  \n\n  Environment services\n  Your cloud environments for Starter and Pro configure the available and used database, web server, caching, and services per the settings entered for a series of YAML files. When you push Git code from your local, these services and more configure automatically in the environments hosted in the cloud (PaaS). For Pro Staging and Production environments (IaaS), you need to enter a ticket for those files to be migrated to configure those environment services and more. See Configure your environments.\n\n  Additional services and drivers are automatically included in your environments.\n\n  SQL Server extension driver\n  We include updated Microsoft PHP drivers for MS SQL Server extension to enable connecting between Magento Commerce (Cloud) and off cloud MS SQL Servers. No additional installation is necessary to use these drivers. You will need to complete a couple configurations before using the connection and external SQL.\n\n  These drivers are included in all Starter environments and Pro Integration environments. To enable in Pro plan Staging and Production environments, please enter a Support ticket with the request. You need to configure and provide the following:\n\n  \n    SSL certificate on the MS SQL Server: The connection between the cloud cluster and the remote SQL server must be SSL secured.  Customers must provide an SSL-enabled connection to their MS SQL server in order to connect to their project.\n    An MS SQL Server for testing: Please include a Microsoft SQL server for us to test the connection. Include this information in a Support ticket.\n  \n\n  If you have questions regarding connectivity or configuration for MS SQL Server, enter a Support ticket.\n\n  \n    The drivers and supported service only includes configuration and updates in Magento Commerce (Cloud) environments. We cannot provide support for client MS SQL Servers or applications utilizing these external systems and services outside of the cloud hosting environments.\n  \n\n  Configure your environments\n  After fully configuring your store, you should configure your environments. This includes specific files to manage builds, deployments, services, and routes. These settings may also affect your builds and deployments. The following information provides files, settings, and options for configuring services and settings in environments.\n\n  For Starter, you can push these files across all environments including Production master.\n\n  For Pro, you need to enter a ticket to have these files and settings pushed to Staging and Production environments. You can push these files and settings across all Integration environments.\n\n  \n    .magento.app.yaml configures how the Magento application is built and deployed including services, hooks, cron jobs, and more\n    \n      services.yaml configures the services you use in your stores and sites including name, version, and allocated disk space\n\n      \n        MySQL service configuration for the database set in services.yaml\n        Redis service configuration for a backend caching solution set in services.yaml\n        Solr service configuration for search engines supported for Magento Commerce 2.0 set in services.yaml\n        Elasticsearch service configuration for searches supported for Magento Commerce 2.1 and later set in services.yaml\n        RabbitMQ configuration for a messaging broker set in services.yaml\n      \n    \n    \n      routes.yaml configures how Magento processes an incoming URL for your Integration environment\n\n      \n        Caching configuration options for caches set in routes.yaml\n        Redirect configuration and rules for managing redirections set in routes.yaml\n        Server side includes configured set in routes.yaml\n      \n    \n  \n\n  Related topics\n  \n    Manage your project\n    Magento Cloud CLI reference\n    SSH and sFTP\n    Overview of environment variables\n    Magento Commerce (Cloud) environment variables\n    Magento application environment variables\n    Example setting variables\n  \n\n",
      "url": "/guides/v2.0/cloud/env/environments.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-errors-and-messages-errors-and-messages-html": {
      "title": "Admin Errors and Messages Writing",
      "content": "Magento uses different types of dynamic messaging to alert users when:\n\n\n  \n    An error has occurred and blocks them in completing a task\n  \n  \n    Users need to know important information before continuing a task\n  \n\n\nTypes of Errors and Messages\n\n\n  \n    Information information. This messaging is not an error. It’s used when a person can continue with the task, but needs to be alerted regarding information critical to completing a task.\n  \n  \n    Recoverable error. Used when a person is blocked and can only continue by taking an action to fix the problem.\n  \n  \n    Not recoverable / catastrophic error. Used when a person can’t complete the task currently. Usually, it’s due to system error, server being down, etc. For ideal next steps for users, include a contact method to fix the issue. If a contact method isn’t available, provide guidance for the user to try again at a later time.\n  \n\n\nHow to Write Errors Content\n\nUse complete sentences and brief, exact, but conversational language.\n\n\n  \n    Avoid the following words – personal pronouns, “please”, and “sorry”.\n  \n  \n    Specify what went wrong.\n  \n  \n    Tell users how to fix the problem and continue the current task. If the problem can’t be resolved online, give users appropriate options to contact us or try again at a later time.\n  \n\n\nTone and Language\n\nDon’t blame the user or indicate that the user made a mistake.\n\nExample:\n\n\n  No – “You didn’t enter your email address. Enter your email address and click “Continue”.\"\n  Yes – “An email address is required. Enter your email address and click “Continue”.”\n\n\n",
      "url": "/guides/v2.0/design-styleguide/errors-and-messages/errors-and-messages.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-events-and-observers-html": {
      "title": "Events and observers",
      "content": "Overview\n\nWorking with events and observers is one of the main ways to extend Magento functionality. The events and observers implementation in Magento 2 is based on the publish-subscribe pattern. Using events and observers, you can run your custom code in response to a specific Magento event or even a custom event.\n\nEvents\n\nEvents are dispatched by modules when certain actions are triggered. In addition to its own events, Magento allows you to create your own events that can be dispatched in your code. When an event is dispatched, it can pass data to any observers configured to watch that event.\n\nDispatching events\n\nEvents can be dispatched using the Magento\\Framework\\Event\\Manager class. This class can be obtained through dependency injection by defining the dependency in your constructor.\n\nTo dispatch an event, call the dispatch function of the event manager class and provide it with the name of the event you want to dispatch along with an array of data you wish to provide to observers.\n\nThe following example shows you how to dispatch an event with and without an array of data.\n\nnamespace MyCompany\\MyModule;\nuse Magento\\Framework\\Event\\ObserverInterface;\nclass MyClass{\n  /**\n  * @var EventManager\n  */\n  private $eventManager;\n\n  public function __construct(\\Magento\\Framework\\Event\\Manager $eventManager){\n    $this-&gt;eventManager = $eventManager;\n  }\n\n  public function something(){\n    $eventData = null;\n    // Code...\n    $this-&gt;eventManager-&gt;dispatch('my_module_event_before');\n    // More code that sets $eventData...\n    $this-&gt;eventManager-&gt;dispatch('my_module_event_after',['myEventData'=&gt;$eventData]);\n  }\n}\n\nCreating new events\n\nCustom events can be dispatched by simply passing in a unique event name to the event manager when you call the dispatch function. Your unique event name is referenced in your module’s events.xml file where you specify which observers will react to that event.\n\nEvent areas\n\nGenerally, the location of the events.xml file will be under the &lt;module-root&gt;/etc directory. Observers that are associated with events here will watch for these events globally. The events.xml file can also be defined under the &lt;module-root&gt;/etc/frontend and &lt;module-root&gt;/etc/adminhtml directories to configure observers to only watch for events in those specific areas.\n\nObservers\n\nObservers are a certain type of Magento class that can influence general behavior, performance, or change business logic. Observers are executed whenever the event they are configured to watch is dispatched by the event manager.\n\nCreating an observer\n\nTo create an observer, you must place your class file under your &lt;module-root&gt;/Observer directory. Your observer class should implement Magento\\Framework\\Event\\ObserverInterface and define its execute function.\n\nBelow is an example of the basic observer class structure:\n\nnamespace MyCompany\\MyModule\\Observer;\n\nuse Magento\\Framework\\Event\\ObserverInterface;\n\nclass MyObserver implements ObserverInterface\n{\n  public function __construct()\n  {\n    //Observer initialization code...\n    //You can use dependency injection to get any class this observer may need.\n  }\n\n  public function execute(\\Magento\\Framework\\Event\\Observer $observer)\n  {\n    //Observer execution code...\n  }\n}\n\nOne of the more powerful feature of observers is that they are able to use parameters passed into the event when it was dispatched. Below is an example of an observer obtaining data passed in when the event was dispatched.\n\nnamespace MyCompany\\MyModule\\Observer;\nuse Magento\\Framework\\Event\\ObserverInterface;\n\nclass AnotherObserver implements ObserverInterface\n{\n  public function __construct()\n  {\n    //Observer initialization code...\n    //You can use dependency injection to get any class this observer may need.\n  }\n\n  public function execute(\\Magento\\Framework\\Event\\Observer $observer)\n  {\n    $myEventData = $observer-&gt;getData('myEventData');\n    //Additional observer execution code...\n  }\n}\n\nSubscribing to events\n\nObservers can be configured to watch certain events in the events.xml file.\n\nThe observer xml element has the following properties:\n\n\n  name (required) - The name of the observer for the event definition.\n  instance (required) - The fully qualified class name of the observer.\n  disabled - Determines whether this observer is active or not. Default value is false.\n  shared - Determines the lifestyle of the class. Default is false.\n\n\nBelow is an example of how to assign observers to watch certain events:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Event/etc/events.xsd\"&gt;\n    &lt;event name=\"my_module_event_before\"&gt;\n        &lt;observer name=\"myObserverName\" instance=\"MyCompany\\MyModule\\Observer\\MyObserver\" /&gt;\n    &lt;/event&gt;\n    &lt;event name=\"my_module_event_after\"&gt;\n        &lt;observer name=\"myObserverName\" instance=\"MyCompany\\MyModule\\Observer\\AnotherObserver\" /&gt;\n    &lt;/event&gt;\n&lt;/config&gt;\n\nIn the preceding example, we assign the observer MyObserver to the custom event my_module_event_before and AnotherObserver to my_module_event_after.\n\nObserver names must be unique per event definition. This means that you cannot have two observers with the same name in the same event definition. In the example, both observers have the name myObserverName. This is acceptable because each of those observers belong to different event definitions.\n\nRecommended Reading\n\n\n  Observers best practices\n\n",
      "url": "/guides/v2.0/extension-dev-guide/events-and-observers.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-example-module-adminpage-html": {
      "title": "Creating a Magento admin page",
      "content": "Overview\n\nThis tutorial gives instructions for the creation of a module that displays a simple page in the Magento admin.\n\nFor the purposes of this tutorial MyCompany is the name of the company associated with a module named ExampleAdminNewPage.\n\nWorking directory\n\nStart by creating the working directory for all the module files.\n\nIn your Magento development environment under the app/code directory, run the following command:\n\nmkdir -p MyCompany/ExampleAdminNewPage\n\n\nThis command creates the MyCompany company directory and the ExampleAdminNewPage module directory. The latter will be the root directory for the module we will create.\n\nInitial boilerplate files\n\nThese initial boilerplate files are the bare essential files needed for any Magento module.\n\ncomposer.json\nIn the module’s root directory, create the file composer.json. This file gives composer the ability to install this module and its dependencies.\nFor more information see: composer.json.\n\nFile content for composer.json     {\n      \"name\": \"mycompany/sample-module-minimal\",\n      \"description\": \"A module that creates a page in the Magento admin area\",\n      \"type\": \"magento2-module\",\n      \"version\": \"1.0.0\",\n      \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n      ],\n      \"require\": {\n        \"php\": \"~5.6.0|7.0.2|7.0.4|~7.0.6\"\n      },\n      \"autoload\": {\n        \"files\": [ \"registration.php\" ],\n        \"psr-4\": {\n          \"MyCompany\\\\ExampleAdminNewPage\\\\\": \"\"\n        }\n      }\n    }\n  \n\n\nregistration.php\nIn the module’s root directory, create the file registration.php. This file registers the module MyCompany_ExampleAdminNewPage with Magento.\n\nFor more information see: registering your component.\n\nFile content for registration.php     &lt;?php\n    \\Magento\\Framework\\Component\\ComponentRegistrar::register(\n        \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n        'MyCompany_ExampleAdminNewPage',\n        __DIR__\n    );\n  \n\n\netc/module.xml\nIn the module’s root directory, create a new directory called etc. Under that directory, create the file module.xml. This file specifies the name and setup version of this module.\n\nFor more information see: naming your component.\n\nFile content for module.xml     &lt;?xml version=\"1.0\"?&gt;\n    &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n      &lt;module name=\"MyCompany_ExampleAdminNewPage\" setup_version=\"1.0.0\"&gt;\n      &lt;/module&gt;\n    &lt;/config&gt;\n  \n\n\nRouting and navigation\n\nBefore we can view the module’s page, we need a way to navigate to it. These files create a link to the page in the left navigation and tells Magento how to resolve requests for that page.\n\nFor more information on this topic, see: routing.\n\netc/adminhtml/menu.xml\nUnder the created etc directory, create a new directory called adminhtml. Under that directory, create the file menu.xml. This XML file adds new menu items to the Magento admin.\n\nThe menu.xml file provided below adds two items in the Content section of the left navigation:\n\n\n  A new separate section with the title Greetings under Content.\n  A link with the label Hello World that leads to a page request for exampleadminnewpage/helloworld/index underneath that new section.\n\n\n\n\nThe following parts make up the generated page request link to the Hello World page:\n\n\n  exampleadminnewpage - This is the frontName. Because its purpose is to help route requests to the correct module, we give it the same name as the module, but this is not required.\n  helloworld - This specifies the name of the controller to use.\n  index - In the XML file, since the action for the controller is not specified, Magento uses the default value index.\n\n\nFile content for menu.xml     &lt;?xml version=\"1.0\"?&gt;\n    &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Backend:etc/menu.xsd\"&gt;\n        &lt;menu&gt;\n          &lt;add id=\"MyCompany_ExampleAdminNewPage::greetings\" title=\"Greetings\" translate=\"title\" module=\"MyCompany_ExampleAdminNewPage\" parent=\"Magento_Backend::content\" sortOrder=\"50\" dependsOnModule=\"MyCompany_ExampleAdminNewPage\" resource=\"MyCompany_ExampleAdminNewPage::greetings\"/&gt;\n          &lt;add id=\"MyCompany_ExampleAdminNewPage::greetings_helloworld\" title=\"Hello World\" translate=\"title\" module=\"MyCompany_ExampleAdminNewPage\" parent=\"MyCompany_ExampleAdminNewPage::greetings\" sortOrder=\"10\" dependsOnModule=\"MyCompany_ExampleAdminNewPage\" action=\"exampleadminnewpage/helloworld\" resource=\"MyCompany_ExampleAdminNewPage::greetings\"/&gt;\n        &lt;/menu&gt;\n    &lt;/config&gt;\n  \n\n\netc/adminhtml/routes.xml\nUnder etc/adminhtml create the file routes.xml. The contents of this  XML file tells Magento to route requests that use the frontName exampleadminnewpage to this module.\n\nFile content for routes.xml   &lt;?xml version=\"1.0\"?&gt;\n  &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/routes.xsd\"&gt;\n      &lt;router id=\"admin\"&gt;\n          &lt;route id=\"exampleadminnewpage\" frontName=\"exampleadminnewpage\"&gt;\n              &lt;module name=\"MyCompany_ExampleAdminNewPage\"/&gt;\n          &lt;/route&gt;\n      &lt;/router&gt;\n  &lt;/config&gt;\n  \n\n\nPage controller\n\nNow that we have a link to the Hello World page, we need to create the file needed to handle that request.\n\nController/Adminhtml/HelloWorld/Index.php\nIn the module’s root directory, run the following command:\n\nmkdir -p Controller/Adminhtml/HelloWorld\n\n\nInside Controller/Adminhtml/HelloWorld directory, create the file Index.php. This file is the class assigned to the default Index action for the HelloWorld controller. Since the admin area serves this page, the file belongs in the Adminhtml directory, and the class itself extends \\Magento\\Backend\\App\\Action.\nFile content for Index.php     &lt;?php\n      namespace MyCompany\\ExampleAdminNewPage\\Controller\\Adminhtml\\HelloWorld;\n\n      class Index extends \\Magento\\Backend\\App\\Action\n      {\n        /**\n        * @var \\Magento\\Framework\\View\\Result\\PageFactory\n        */\n        protected $resultPageFactory;\n\n        /**\n         * Constructor\n         *\n         * @param \\Magento\\Backend\\App\\Action\\Context $context\n         * @param \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory\n         */\n        public function __construct(\n            \\Magento\\Backend\\App\\Action\\Context $context,\n            \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory\n        ) {\n             parent::__construct($context);\n             $this-&gt;resultPageFactory = $resultPageFactory;\n        }\n\n        /**\n         * Load the page defined in view/adminhtml/layout/exampleadminnewpage_helloworld_index.xml\n         *\n         * @return \\Magento\\Framework\\View\\Result\\Page\n         */\n        public function execute()\n        {\n             return  $resultPage = $this-&gt;resultPageFactory-&gt;create();\n        }\n      }\n    ?&gt;\n  \n\n\nPage view\n\nNow that Magento knows how to handle requests for the Hello World page, we need view files that define the look of the page.\n\nCreate the necessary directories for the files by running the following commands from the module’s root directory:\n\nmkdir -pm view/adminhtml/layout\nmkdir -pm view/adminhtml/templates\n\n\nThese files belong in the view/adminhtml directory because the Magento admin area use these files during page generation.\n\nview/adminhtml/layout/exampleadminnewpage_helloworld_index.xml\n\nThis file defines the layout and structure of the index page for the HelloWorld controller. It sets the title to “Greetings” and instructs Magento to use the helloworld.phtml template as the content in a Magento\\Backend\\Block\\Template block class.\n\nThe name of this file uses the following pattern: frontName_controller_action.xml\n\nFile content for exampleadminnewpage_helloworld_index.xml     &lt;?xml version=\"1.0\"?&gt;\n    &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n        &lt;head&gt;\n            &lt;title&gt;\n                Greetings\n            &lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;referenceContainer name=\"content\"&gt;\n                &lt;block class=\"Magento\\Backend\\Block\\Template\" template=\"MyCompany_ExampleAdminNewPage::helloworld.phtml\"/&gt;\n            &lt;/referenceContainer&gt;\n        &lt;/body&gt;\n    &lt;/page&gt;\n  \n\n\nview/adminhtml/templates/helloworld.phtml\n\nThis template file contains the actual page content for the Hello World page.\n\nFile content for helloworld.phtml     &lt;p&gt;Hello World!&lt;/p&gt;\n  \n\n\nFull module directory structure\n\nThe module is now complete. Your module’s directory structure under app/code should look like the following:\n\n\n    MyCompany\n    `-- ExampleAdminNewPage\n        |\n        |-- Controller\n        |   |-- Adminhtml\n        |       |-- HelloWorld\n        |           `-- Index.php\n        |-- etc\n        |   |-- adminhtml\n        |   |   |-- menu.xml\n        |   |   `-- routes.xml\n        |   `-- module.xml\n        |-- view\n        |   |-- adminhtml\n        |       |-- layout\n        |       |    `-- exampleadminnewpage_helloworld_index.xml\n        |       `-- templates\n        |           `-- helloworld.phtml\n        |-- composer.json\n        `-- registration.php\n  \n\n\nInstalling the module\n\nNow that the module is code-complete, run the following commands to install it:\n\n\n  bin/magento module:status - This command shows a list of enabled/disabled modules.\n  bin/magento module:enable MyCompany_ExampleAdminNewPage - If necessary, run this to enable the disabled module.\n  bin/magento setup:upgrade - This command will properly register the module with Magento.\n  bin/magento setup:di:compile - This command compiles classes used in dependency injections.\n\n\nOnce the module installation has completed, the link to the Hello World page should appear in the Greetings section under Content in the left navigation in the admin area. Clicking this link will take you to a page that looks like the one pictured below.\n\n\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/example-module-adminpage.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-admin-ext-best-practices-admin-faq-html": {
      "title": "Admin FAQ",
      "content": "This page is a compilation of frequently asked questions by the Magento Community about extensions integrating with the Admin.\n\nWhere should my extension appear in the Admin?\n\nThe appropriate place for your extension to appear in the Admin depends on what it does. For a list of extension types and their proper spot in the Admin, please consult the article: Admin panel placement and design.\n\n\n\nWhat are the rules about using the left-navigation “slide-out panels” in the Admin?\n\nThe slide-out panel is designed to accommodate several links. There can be several columns in the slide-out panel to accommodate many extension links. See the details and specifications about slide-out panels.\n\n\n\nAre there “rules” about using icons or images that appear beside the name of my extension in the Admin?\n\nYou should avoid using icons or images besides the name of your extension in the Admin. More details about icons and images in the Admin panel can be found in the article about Admin panel placement and design.\n",
      "url": "/guides/v2.0/ext-best-practices/admin/ext-best-practices_admin_FAQ.html"
    }
    ,
  
    "guides-v2-0-architecture-extensibility-html": {
      "title": "Extensibility and modularity",
      "content": "Overview\n\nProduct extensibility describes how easy it is to expand a product’s feature set. An extensible product has been designed from its earliest  stages for customization and enhancement. Extensible products are designed for ease in expanding your installation’s feature set, enriching current features, and integrating with third-party software.\n\nMaximizing extensibility has been our goal through all aspects of Magento development. Core tasks such as shipping are packaged as discrete modules, and you expand your features by installing modules that you either buy from third-party vendors or create yourself. While logic specific to each shipping carrier is packaged in a discrete module, you can easily add or delete shipping providers by simply adding or deleting modules. The Magento Framework provides common logic to control routing and other core application functions.\n\nWhat makes a product extensible?\n\nMagento extensibility describes the product’s built-in ability for developers and merchants to routinely extend their storefront’s capabilities as their business grows.\n\nBelow are the main factors affect extensibility.\n\nArchitectural principles that guide product structure\n\nCentral to the Magento model of software development is the practice of replacing or extending core code rather than editing it. This strategy supports your efforts to maintain the integrity of the tested code we provide while still extensively customizing your storefront.\n\nOpen-source software to create and manage extensions\n\nMagento is built on open-source technologies, created for the development community. For example, it uses Composer to manage dependencies. See Technology Stack for a complete list of technologies used.\n\nCoding standards\n\nAdherence to standard best practices for PHP and JavaScript code ensures that the code base is sound. Magento has adopted most of the Zend Framework Coding Standards for PHP. See Coding Standards for more information.\n\nUpgrade and versioning strategies\n\nMagento has well-defined upgrade and versioning strategies that can help you avoid any problems with software component dependencies. Add modules after confirming that the module version is compatible with the Magento Framework version.\n\nRelated topics\n\nArchitectural basics\n\nGlobal features that support extensibility\n\nEase of frontend customization\n",
      "url": "/guides/v2.0/architecture/extensibility.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-factories-html": {
      "title": "Factories",
      "content": "Overview\n\nFactories are service classes that instantiate non-injectable classes, that is, models that represent a database entity.\nThey create a layer of abstraction between the ObjectManager and business code.\n\nRelationship to ObjectManager\n\nThe Magento\\Framework\\ObjectManager is the class responsible for instantiating objects in the Magento application.\nMagento prohibits depending on and directly using the ObjectManager in your code.\n\nFactories are an exception to this rule because they require the ObjectManager to instantiate specific models.\n\nThe following example illustrates the relationship between a simple factory and the ObjectManager:\n\nnamespace Magento\\Framework\\App\\Config;\n\nclass BaseFactory\n{\n  /**\n   * @var \\Magento\\Framework\\ObjectManagerInterface\n   */\n  private $_objectManager;\n\n  /**\n   * @param \\Magento\\Framework\\ObjectManagerInterface $objectManager\n   */\n  public function __construct(\\Magento\\Framework\\ObjectManagerInterface $objectManager)\n  {\n    $this-&gt;_objectManager = $objectManager;\n  }\n  /**\n   * Create config model\n   * @param string|\\Magento\\Framework\\Simplexml\\Element $sourceData\n   * @return \\Magento\\Framework\\App\\Config\\Base\n   */\n  public function create($sourceData = null)\n  {\n    return $this-&gt;_objectManager-&gt;create(\\Magento\\Framework\\App\\Config\\Base::class, ['sourceData' =&gt; $sourceData]);\n  }\n}\n\nWriting factories\n\nUnless you require specific behavior for your factory classes, you do not need to explicitly define them because they are an automatically generated class type.\nWhen you reference a factory in a class constructor, Magento’s object manager generates the factory class if it does not exist.\n\nFactories follow the naming convention &lt;class-type&gt;Factory where &lt;class-type&gt; is the name of the class the factory instantiates.\n\nFor example the automatically generated Magento\\Cms\\Model\\BlockFactory class is a factory that instantiates the class Magento\\Cms\\Model\\Block.\n\nUsing factories\n\nYou can get the singleton instance of a factory for a specific model using dependency injection.\n\nThe following example shows a class getting the BlockFactory instance through the constructor:\n\nfunction __construct ( \\Magento\\Cms\\Model\\BlockFactory $blockFactory) {\n    $this-&gt;blockFactory = $blockFactory;\n}\n\nCalling the create() method on a factory gives you an instance of its specific class:\n\n$block = $this-&gt;blockFactory-&gt;create();\n\nFor classes that require parameters, the automatically generated create() function accepts an array of parameters that it passes on to the ObjectManager to create the target class.\n\nThe example below shows the construction of a Magento\\Search\\Model\\Autocomplete\\Item object by passing in an array of parameters to a factory:\n\n$resultItem = $this-&gt;itemFactory-&gt;create([\n  'title' =&gt; $item-&gt;getQueryText(),\n  'num_results' =&gt; $item-&gt;getNumResults(),\n]);\n\nInterfaces\n\nFactories are smart enough to resolve dependencies and allow you to get the correct instance of an interface as defined in your module’s di.xml.\n\nFor example, in the CatalogInventory module, the di.xml file contains the following entry:\n\n&lt;preference for=\"Magento\\CatalogInventory\\Api\\Data\\StockItemInterface\" type=\"Magento\\CatalogInventory\\Model\\Stock\\Item\" /&gt;\n\nIt instructs Magento to use the specific Item class wherever the StockItemInterface is used.\nWhen a class in that module includes the factory StockItemInterfaceFactory as a dependency, Magento generates a factory that is capable of creating the specific Item objects.\n",
      "url": "/guides/v2.0/extension-dev-guide/factories.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-fastly-vcl-badreferer-html": {
      "title": "Custom block bad referer VCL",
      "content": "You may want to create a VCL snippet that runs before all other modules to block bad referring websites from accessing your site. To block these sites with a 403 Forbidden error through Fastly, create a VCL snippet to use with an Edge Dictionary of domains to block.\n\nYou must have the following information to complete this VCL code snippet:\n\n\n  Create an Edge Dictionary in your environments\n  Account access and URL to the Magento Admin for the Staging or Production environment\n\n\n\n  This information is just the code portion for setting up your VCL. Use this information with Custom Fastly VCL snippets.\n\n\nCreate an Edge Dictionary\nEdge Dictionaries create key-value pairs for running against your VCL snippet. For example, you may want to build a dictionary of URLs to redirect to a Wordpress backend. You may only want to create the edge dictionary in your Production environment. You can also create it in Staging for testing if needed.\n\n\n  Log in to the Magento Admin.\n  Navigate to Stores &gt; Configuration &gt; Advanced &gt; System &gt; Fastly Configuration.\n  Expand the Edge dictionaries section.\n  Click Add container. You need to create a container to hold up to 1,000 key-value pairs.\n  On the container, enter a Dictionary name. For this example, use the name referer_blocklist.\n  Select the checkbox for Activate after the change if you want to the dictionary after creating or editing the container.\n  Add key-value pairs in the new dictionary. For this example, enter the URLs for your blog that should be redirected to your Wordpress backend. Enter a value of 1.\n\n\nFor more information on using Edge Dictionaries with your VCL snippets, see Fastly’s Creating and using Edge Dictionaries and their example custom VCL snippets.\n\nCreate badreferer.json\nFor this example, you may only want to run it against the Production server. You can also add it to Staging for testing.\n\nCreate an badreferer.json file with the following JSON content:\n\n{\n  \"name\": \"badreferer\",\n  \"dynamic\": \"0\",\n  \"type\": \"recv\",\n  \"priority\": \"5\",\n  \"content\": \"set req.http.Referer-Host = regsub(req.http.Referer, \\\"^https?://?([^:/\\\\s]+).*$\\\", \\\"\\\\1\\\"); if (table.lookup(referer_blocklist, req.http.Referer-Host)) { error 403 \\\"Forbidden\\\"; }\"\n}\n\nReview the following values for the code to determine if you need to make changes:\n\n\n  name: Name for the VCL snippet. For this example, we used the name badreferer.\n  priority: Determines the order VCL snippets call. You want to set the priority to 5 to immediately run and block bad referring websites. This priority runs the snippet immediately and before any of the uploaded and default Magento VCL snippets (magentomodule) that have a priority of 50.\n  type: For this VCL, we use recv, which places it in the vcl_recv subroutine by below the boilerplate VCL and above any objects.\n  content: The code that runs. The code captures the host of a referer website into a header. It then checks if the referrer host is in the Edge Dictionary referer_blocklist.\n\n\n\n  The default VCL snippets you uploaded included a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also consider the priority of your custom snippets if they should override the default snippets.\n\n\nFinish adding the VCL\nWhen saved, continue creating other VCLs. You can then run the bash script, then validate and activate your VCLs to complete the process. For complete steps, see Custom Fastly VCL snippets.\n\nRelated VCL snippet examples\n\n\n  Custom whitelist VCL\n  Custom blacklist VCL\n  Custom extend Admin timeout VCL\n  Custom redirect to Wordpress VCL\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/fastly-vcl-badreferer.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-fastly-vcl-blacklist-html": {
      "title": "Custom blacklist VCL",
      "content": "You may want to create a blacklist of IPs to block from accessing your site. You can create an Edge ACL list of the blacklisted IPs with a VCL snippet. The code checks the IP of the incoming IP address. If it matches a member of the ACL, it is blocked with a 403 Forbidden error from accessing your entire website. All other client IPs are allowed access.\n\nYou must have the following information to complete this VCL code snippet:\n\n\n  List of client IPs to blacklist, or block access\n  Account access and URL to the Magento Admin for the Staging or Production environment\n\n\n\n  This information is just the code portion for setting up your VCL. Use this information with Custom Fastly VCL snippets.\n\n\nCreate Edge ACL for allowing client IPs\nEdge ACLs create IP lists for managing access for your VCL snippet. For this example, create an Edge ACL of IPs to block from accessing your site. Then create a custom VCL snippet to manage access.\n\nIf you want to allow access to Staging and Production, create the Edge ACL in both Magento Admins with the same name. You can have different IPs in the two environments. The VCL snippet code will apply to both environments.\n\n\n  Log in to the Magento Admin.\n  Navigate to Stores &gt; Configuration &gt; Advanced &gt; System &gt; Fastly Configuration.\n  Expand the Edge ACL section.\n  Click Add ACL to create a list. For this example, name the list “blocklist”.\n  Enter IP values in the list. Any client IPs added to this list will be blocked access from the site.\n  Optionally, select the Negated checkbox if needed.\n\n\nYou will use the Edge ACL by name in your VCL snippet code.\n\nCreate blocklist.json\nTo block blacklisted IPs from access to Staging and Production environments, you can use the same VCL snippet file without edits.\n\nCreate an blocklist.json file with the following JSON content:\n\n{\n  \"name\": \"blocklist\",\n  \"dynamic\": \"0\",\n  \"type\": \"recv\",\n  \"priority\": \"5\",\n  \"content\": \"if ( client.ip ~ blocklist) { error 403 \\\"Forbidden\\\"; }\"\n}\n\nReview the following values for the code to determine if you need to make changes:\n\n\n  name: Name for the VCL snippet. For this example, we used the name blocklist.\n  priority: Determines the order VCL snippets call. You want to set the priority to 5 to immediately run and check for blacklisted, blocked IPs. This priority runs the snippet immediately and before any of the uploaded and default Magento VCL snippets (magentomodule) that have a priority of 50.\n  type: For this VCL, we use recv, which places it in the vcl_recv subroutine by below the boilerplate VCL and above any objects.\n  content: The snippet of VCL code to run, which verifies the client IP. If the IP is in the Edge ACL, it is blocked from access with a 403 Forbidden error for the entire website. All other client IPs are allowed access.\n\n\n\n  The default VCL snippets you uploaded included a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also consider the priority of your custom snippets if they should override the default snippets.\n\n\nFinish adding the VCL\nWhen saved, continue creating other VCLs. You can then run the bash script, then validate and activate your VCLs to complete the process. For complete steps, see Custom Fastly VCL snippets.\n\nRelated VCL snippet examples\n\n\n  Custom whitelist VCL\n  Custom extend Admin timeout VCL\n  Custom redirect to Wordpress VCL\n  Custom block bad referer VCL\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/fastly-vcl-blacklist.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-fastly-vcl-extend-timeout-html": {
      "title": "Custom extend Admin timeout VCL",
      "content": "Fastly has a strict timeout for the Magento Admin of three minutes. This may not be enough time for some extended actions. To extend the default timeout for the Magento Admin, you will create a new VCL snippet with a priority of 100 and a longer timeout value. This VCL snippet value will run last and override the default value in pass.vcl with a priority of 50 (already uploaded to your service).\n\nTo build the new command, we took the default code and revised it with a new name (extendtimeout) and lower priority value. The order of priorities will use this value over the default 180 seconds. How did you set the default timeout? When you first uploded your VCL snippets when configuring Fastly, you uploaded a default VCL with a default timeout of 180 seconds (three minutes). The VCL snippet uploaded was from this Fastly pass.vcl snippet.\n\nThe important code that sets the timeout is the first_byte_timeout value of 100. For this snippet, you can extend this time to 300s for five minutes or 600s for ten minutes. Ten minutes is the hard cap for Fastly timeouts. In this code example, we extend the timeout to ten minutes.\n\n\n  This information is just the code portion for setting up your VCL. Use this information with Custom Fastly VCL snippets.\n\n\nCreate extendtimeout.json\nTo extend the timeout for the Magento Admin to Staging and Production environments, you can use the same VCL snippet file without edits.\n\nCreate an extendtimeout.json file with the following JSON content:\n\n{\n  \"name\": \"extendtimeout\",\n  \"dynamic\": \"0\",\n  \"type\": \"pass\",\n  \"priority\": \"100\",\n  \"content\": \"if ( req.url ~ \\\"^/(index\\\\.php/)?admin(_.*)?/\\\" ) { set bereq.first_byte_timeout = 600s; }\"\n}\n\nReview the following values for the code to determine if you need to make changes:\n\n\n  name: Name for the VCL snippet. For this example, we used the name blocklist.\n  priority: Determines the order VCL snippets call. You want the priority set to 100 to be the last run and overwrite the default pass.vcl timeout.\n  type: For this VCL, we use pass.\n  content: The code that runs. For this snippet, we change the set bereq.first_byte_timeout with a higher value. For example, 300s for five minutes or 600s for ten minutes. Ten minutes is the hard cap for Fastly timeouts.\n\n\n\n  The default VCL snippets you uploaded included a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also consider the priority of your custom snippets if they should override the default snippets.\n\n\nFinish adding the VCL\nWhen saved, continue creating other VCLs. You can then run the bash script, then validate and activate your VCLs to complete the process. For complete steps, see Custom Fastly VCL snippets.\n\nRelated VCL snippet examples\n\n\n  Custom whitelist VCL\n  Custom blacklist VCL\n  Custom redirect to Wordpress VCL\n  Custom block bad referer VCL\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/fastly-vcl-extend-timeout.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-fastly-vcl-whitelist-html": {
      "title": "Custom whitelist VCL",
      "content": "You may only want to allow specific client IPs access to your Magento Admin. To whitelist and allow these IPs access, you can create an Edge ACL through the Magento Admin with a list of IPs and create a VCL snippet with code to verify client IPs. Any IP not matching the allow list is restricted with a 403 Forbidden error.\n\nYou must have the following information to complete this VCL code snippet:\n\n\n  List of client IPs to allow access\n  Account access and URL to the Magento Admin for the Staging or Production environment\n  URL for the Magento Admin. If you changed this URL from /admin, you will need to modify the code in this example.\n\n\n\n  This information is just the code portion for setting up your VCL. Use this information with Custom Fastly VCL snippets.\n\n\nCreate Edge ACL for allowing client IPs\nEdge ACLs create IP lists for managing access for your VCL snippet. For this example, create an Edge ACL of IPs to whitelist and enable access to your site. Then create a custom VCL snippet to manage access.\n\nIf you want to allow access to Staging and Production, create the Edge ACL in both Magento Admins with the same name. You can have different IPs in the two environments. The VCL snippet code will apply to both environments.\n\n\n  Log in to the Magento Admin.\n  Navigate to Stores &gt; Configuration &gt; Advanced &gt; System &gt; Fastly Configuration.\n  Expand the Edge ACL section.\n  Click Add ACL to create a list. For this example, name the list “allowlist”.\n  Enter IP values in the list. Any client IPs added to this list will be allowed access to the site.\n  Optionally, select the Negated checkbox if needed.\n\n\nYou will use the Edge ACL by name in your VCL snippet code.\n\nCreate allowlist.json\nTo allow only whitelisted IPs access to Staging and Production environments, you can use the same VCL snippet file without edits.\n\nCreate an allowlist.json file with the following JSON content:\n\n{\n  \"name\": \"allowlist\",\n  \"dynamic\": \"0\",\n  \"type\": \"recv\",\n  \"priority\": \"5\",\n  \"content\": \"if ((req.url ~ \\\"^/admin\\\") &amp;&amp; !(client.ip ~ whitelist) &amp;&amp; !req.http.Fastly-FF) { error 403 \\\"Forbidden\\\"; }\"\n}\n\nReview the following values for the code to determine if you need to make changes:\n\n\n  name: Name for the VCL snippet. For this example, we used the name allowlist.\n  priority: Determines the order VCL snippets call. You want to set the priority to 5 to immediately run and check for whitelisted, allowed IPs. This priority runs the snippet immediately and before any of the uploaded and default Magento VCL snippets (magentomodule) that have a priority of 50.\n  type: For this VCL, we use recv, which places it in the vcl_recv subroutine by below the boilerplate VCL and above any objects.\n  \n    content: The snippet of VCL code to run, which verifies the client IP. The following occurs in this code:\n\n    \n      If the IP is in the Edge ACL, it is allowed access. If not, they receive a 403 Forbidden error.\n      If your URL for your Magento Admin was changed, make sure to edit /admin with the new URL. For example, /company-admin.\n      In the code sample, the condition !req.http.Fastly-FF is important when using Origin Shielding. Do not remove or edit this code.\n    \n  \n\n\n\n  The default VCL snippets you uploaded included a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also consider the priority of your custom snippets if they should override the default snippets.\n\n\nFinish adding the VCL\nWhen saved, continue creating other VCLs. You can then run the bash script, then validate and activate your VCLs to complete the process. For complete steps, see Custom Fastly VCL snippets.\n\nRelated VCL snippet examples\n\n\n  Custom blacklist VCL\n  Custom extend Admin timeout VCL\n  Custom redirect to Wordpress VCL\n  Custom block bad referer VCL\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/fastly-vcl-whitelist.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-fastly-vcl-wordpress-html": {
      "title": "Custom redirect to Wordpress VCL",
      "content": "This example details how to redirect to another backend using an Edge Dictionary and VCL. You may have a separate Wordpress blog for all of your store’s blog entries, kept separate from your store. For this example, you are trying to check the first part of the incoming path and redirect the visitor to your Wordpress backend. You would create an Edge Dictionary called wordpress_urls with a list of paths to redirect traffic.\n\nYou must have the following information to complete this VCL code snippet:\n\n\n  Create an Edge Dictionary in your environments\n  Account access and URL to the Magento Admin for the Staging or Production environment\n\n\n\n  This information is just the code portion for setting up your VCL. Use this information with Custom Fastly VCL snippets.\n\n\nCreate Wordpress Edge Dictionary\nEdge Dictionaries create key-value pairs for running against your VCL snippet. For example, you may want to build a dictionary of URLs to redirect to a Wordpress backend. You may only want to create the edge dictionary in your Production environment. You can also create it in Staging for testing if needed.\n\n\n  Log in to the Magento Admin.\n  Navigate to Stores &gt; Configuration &gt; Advanced &gt; System &gt; Fastly Configuration.\n  Expand the Edge dictionaries section.\n  Click Add container. You need to create a container to hold up to 1,000 key-value pairs.\n  On the container, enter a Dictionary name. For this example, use the name wordpress_urls.\n  Select the checkbox for Activate after the change if you want to the dictionary after creating or editing the container.\n  Add key-value pairs in the new dictionary. For this example, enter the URLs for your blog that should be redirected to your Wordpress backend. Enter a value of 1.\n\n\nFor more information on using Edge Dictionaries with your VCL snippets, see Fastly’s Creating and using Edge Dictionaries and their example custom VCL snippets.\n\nCreate wordpress.json\nFor this example, you may only want to run it against the Production server. You can also add it to Staging for testing.\n\nCreate an wordpress.json file with the following JSON content:\n\n{\n  \"name\": \"wordpress\",\n  \"dynamic\": \"0\",\n  \"type\": \"recv\",\n  \"priority\": \"5\",\n  \"content\": \"if ( req.url.path ~ \\\"^\\\\/?([^:\\/\\\\s]+).*$\\\" ) { if ( table.lookup(wordpress_urls, re.group.1, \\\"NOTFOUND\\\") != \\\"NOTFOUND\\\" ) { set req.http.X-WP = \\\"1\\\"; } }\"\n}\n\nReview the following values for the code to determine if you need to make changes:\n\n\n  name: Name for the VCL snippet. For this example, we used the name wordpress.\n  priority: Determines the order VCL snippets call. You want to set the priority to 5 to immediately run and check for URLs that should be redirected. This priority runs the snippet immediately and before any of the uploaded and default Magento VCL snippets (magentomodule) that have a priority of 50.\n  type: For this VCL, we use recv, which places it in the vcl_recv subroutine by below the boilerplate VCL and above any objects.\n  content: The code that runs. The code extracts the first part mypath of the path /mypath/someotherpath.  It then compares that path against the Edge Dictionary wordpress_urls. If a match is found, the visitor is redirected to the Wordpress backend.\n\n\n\n  The default VCL snippets you uploaded included a prepended name of magentomodule_ with a priority of 50. For your custom VCL snippets, do not use the magentomodule_ name. Also consider the priority of your custom snippets if they should override the default snippets.\n\n\nConfigure Wordpress\nFor this VCL snippet to work, you also need to attach a condition to the Wordpress backend to handle this request:\n\nreq.http.X-WP == “1”\n\n\nFinish adding the VCL\nWhen saved, continue creating other VCLs. You can then run the bash script, then validate and activate your VCLs to complete the process. For complete steps, see Custom Fastly VCL snippets.\n\nRelated VCL snippet examples\n\n\n  Custom whitelist VCL\n  Custom blacklist VCL\n  Custom extend Admin timeout VCL\n  Custom block bad referer VCL\n\n\nRelated topics\n\n\n  Fastly in Cloud\n  Set up Fastly\n  Custom Fastly VCL snippets\n  Troubleshoot Fastly\n\n",
      "url": "/guides/v2.0/cloud/configure/fastly-vcl-wordpress.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-fastly-html": {
      "title": "Set up Fastly",
      "content": "Fastly is required for Magento Commerce (Cloud), and is used in Staging and Production environments. It works with Varnish to provide fast caching capabilities and a Content Delivery Network (CDN) for static assets. Fastly is not available in Integration environments.\n\nThis information gets you started with installing and configuring Fastly. We provide additional information for backends and Origin shields, and error/maintenance page, and VCL snippets.\n\nFor VCL snippets, experience developing that code is required for advanced configurations.\n\nThe process for configuring Fastly includes:\n\n\n  Install Fastly module in Integration\n  Deploy code across Staging and Production\n  Configure Fastly credentials and settings\n  Advanced configurations including VCL snippets\n\n\nMultiple Fastly accounts and assigned domains\nBefore launching Magento Commerce (Cloud), you may already have a Fastly account or trial with your apex and subdomains assigned to it. Be advised, you will need to remove any apex domain and subdomains you plan use with Magento Commerce (Cloud) from this existing Fastly account.\n\nFastly only allows one apex domain and all subdomains assigned to a single Fastly service and account. For example, if you have the apex domain of mystore.com with subdomains of shoes.mystore.com and socks.mystore.com managed by an existing Fastly account, you need to remove them from that account before going live with Fastly and Magento Commerce (Cloud).\n\nFor details, review your Fastly accounts and documentation to remove the domains. This may include removing and updating CNAME records and more.\n\nGet your Fastly credentials\nTo get Fastly credentials, open a support ticket. You must provide your fully-qualified domain name.\n\nWe’ll provide you with the following credentials for your Staging and Production services:\n\n\n  Fastly Service ID\n  Fastly API token\n\n\nYou can also locate these credentials in your Staging and Production systems in /mnt/shared/fastly_tokens.txt. You can SSH into the servers to verify the file in that location. If you do not locate this file, please enter a ticket for Support asking to have the file added. We can help provide this credentials file.\n\n\n  Make note of which environment each set of credentials is used for. If you use the wrong credentials in an environment, you’ll encounter issues with Fastly.\n\n\nGet started\nYou need to install Fastly in its own branch. Fine-tuning Fastly can be a complex process, depending on your needs and store size. If you already have a branch to work in, or know how to create a branch, continue to installing Fastly.\n\nTo create a branch:\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Install Fastly in an Integration branch and deploy\n  You should install the Fastly module on your local, pushing the code to Integration and deploying across to your Staging and Production environments. For Magento Commerce (Cloud) 2.2, install Fastly module 1.2.33 or later for all updated settings and full VCL snippet uploading support.\n\n  \n    Don’t configure the module in your local before building and deploying. You’ll configure the module in those environments.\n\n    We recommend using the bin/magento magento-cloud:scd-dump command for Configuration Management(2.1.X, 2.2.X). If you use the app:config:dump command, all configuration options for Fastly will be locked from editing in Staging and Production.\n  \n\n  We provide Fastly services only for your Staging and Production environments. You cannot use the Fastly service in Intergration environments.\n\n  \n    \n      In your local environment root directory, use a terminal to enter the following commands in the order shown:\n\n      composer config repositories.fastly-magento2 git \"https://github.com/fastly/fastly-magento2.git\"\ncomposer require fastly/magento2\n      \n    \n    Wait for dependencies to be updated.\n    \n      Enter the following command to fully update and clear the cache:\n\n      php bin/magento setup:upgrade &amp;&amp; php bin/magento cache:clean\n      \n    \n    \n      Edit your composer.json and ensure the Fasty module is included with version.\n\n      \n        In the “require” section, you should have \"fastly/magento2\": &lt;version number&gt;\n        \n          In the “repositories” section, you should have:\n\n          “fastly-magento2”: {\n              “url”: “https://github.com/fastly/fastly-magento2.git”\n  }\n        \n      \n    \n    \n      Add, commit, and push the changes to your code repository with the following command:\n\n      git add -A; git commit -m \"Install Fastly\"; git push origin &lt;branch name&gt;\n      \n    \n    Merge the branch code with the master Integration branch.\n    Deploy the code to Staging and Production.\n  \n\n  After deployment, you can log into the Admin in Staging and Production to configure Fastly credentials and settings. This gives you the flexibility to have different caching features as needed in both environments, including VCL snippets.\n\n  Enable and configure Fastly using the Magento Admin\n  To begin configuring Fastly, you need to enter and test Fastly credentials in Staging and Production. After successfully testing the credentials, you can continue with advanced configurations and VCL snippets.\n\n  We provide your Fastly Service ID and API key (or token) for Staging and Production environments. These credentials are different for each environment. Make sure to use the correct credentials.\n\n  Complete the following configuration steps in Staging and Production environments:\n\n  \n    Log in to your local Magento Admin as an administrator.\n    Click Stores &gt; Settings &gt; Configuration &gt; Advanced &gt; System.\n    \n      In the right pane, expand Full Page Cache.\n\n      \n    \n    \n      For Caching Application, uncheck the Use system value check box and select Fastly CDN from the drop-down list.\n\n      \n    \n    Expand Fastly Configuration. You can then choose caching options.\n    When you’re done, click Save Config at the top of the page.\n    Clear the cache according to the notification. After you have cleared the cache, navigate back to Stores &gt; Configuration &gt; Advanced &gt; System &gt; Fastly Configuration and continue your configurations.\n  \n\n  Configure the following features and enable additional configuration options:\n\n  \n    Upload Fastly VCL snippets\n    Configure backends and Origin shielding\n    Create custom error/maintenance page\n  \n\n  \n    \n      Ignore the link to create a free Fastly account. We’ll provide your Fastly credentials (Service ID and API token).\n      With Fastly version 1.2.0 and later (we recommend 1.2.33 or later), use the Upload VCL to Fastly button to upload your default VCL snippets.\n    \n  \n\n  Upload Fastly VCL snippets\n  You don’t have to create or code VCL snippets. We provide a default set of snippets for Fastly. You only need to click Upload VCL to Fastly to finish this step.\n\n  The installed Fastly module includes the following default VCL snippets that drive the integration with Fastly. These VCL snippets are not available until you upload them. When you click Upload, you push a set of these default VCL snippets to Fastly for your specificl Service ID and extension.\n\n  For VCL snippet developers, these default snippets are prepended with magentomodule_ with a priority of 50. You should not use this prepended name for your own snippets. For full details, see our guide to create and add custom VCL snippets.\n\n  To use snippets, you must upload the Fastly VCL using the Magento Admin as follows:\n\n  \n    \n      In the Fastly Configuration section, click Upload VCL to Fastly as the following figure shows.\n\n      \n\n      \n  \t\tIf the Upload VCL to Fastly button does not display, you should upgrade the Fastly extension to version 1.2.0 or later. We recommend 1.2.33 or later. For details, see Update extensions. Fastly’s Composer name is fastly/magento2.\n      \n    \n    \n      Once the upload completes, the modal automatically closes with a success message.\n    \n  \n\n  With this uploaded, you can create and upload custom VCL snippets with advanced settings and options. You use APIs to add these VCL snippets, further adding them in your site code depending on the actions.\n\n  For more information, see Fastly VCL documentation and Fastly VCL snippets.\n\n  Configure backends and Origin shielding\n  Backend settings provide fine tuning for Fastly performance with Origin shielding and timeouts. A backend is a specific location (IP or domain) with configured Origin shield and timeout settings for checking and providing cached content.\n\n  Origin shielding routes all requests for your store to a specific Point of Presence (POP). When a request is received, the POP checks for cached content and provides it. If it is not cached, it continues to the Shield POP, then to the Origin server which caches the content. The shields reduces traffic directly to the origin.\n\n  You can add multiple backends. Repeat these instructions to create multiple backends. For example, you may need a backend specifically for Wordpress to handle your blog.\n\n  \n    Access and expand Fastly Configuration.\n    \n      Expand Backend settings and click the gear to configure the default backend. A modal opens with options to select and configure.\n\n      \n    \n    \n      Select a Shield location (or datacenter) closest to your server region. For example, if Staging is on the West Coast of the United States (US - Oregon), you may want to select a shield in US, Los Angeles, CA. This is the POP accessed for providing caching services. For example, we have cloud hosting in the following AWS locations:\n\n      \n        US - Oregon\n        EU - Dublin\n        APAC - Sydney\n      \n    \n    Modify the timeout values (in miliseconds) for the connection to the shield, time between bytes, and time for the first byte. We recommend keeping the default timeout settings.\n    Optionally, select to Activate the backend and Shield after editing or saving.\n    Click Upload to save. The settings are commiunicated to Fastly.\n    In the Magento Admin, click Save Config.\n  \n\n  For more information from Fastly, see the Magento 2 Backend settings guide.\n\n  Configure purge options\n  Fastly provides multiple types of purge options on your Magento Cache Management page including purging product category, product assets, and content. When enabled, Fastly watches for events to automatically purge those caches. If you disable a purge option, you can manually purge Fastly aches after finishing updates through the Cache Management page.\n\n  The options include:\n\n  \n    Purge category: Purges product category content (not product content) when you add and update a single product. You may want to keep this disabled and enable purge product, which purges products and product categories.\n    Purge product: Purges all product and product category content when saving a single modification to a product. Enabling purge product can be helpful to immediately get updates to customers when changing a price, adding a product option, and when product inventory is out-of-stock.\n    Purge CMS page: Purges page content when updating and adding pages to the Magento CMS. For example, you may want to purge when updating your Terms and Conditions or Return policy. If you rarely make these changes, you could disable automatic purging.\n    Soft purge: Sets changed content to stale and purges according to the stale timing. In combination with the stale timings your customers will be served stale content very fast while Fastly is updating the content in the background.\n  \n\n  \n\n  To configure Fastly purge options:\n\n  \n    In the Fastly Configuration section, expand Advanced.\n    All purge options display. Select “Yes” per purge option to enable automatic purging. Select “No” to disable automatic purging, allowing you to manually purge caches through the Cache Management page.\n    Click Save Config at the top of the page.\n    After the page reloads, click Upload VCL to Fastly in the Fastly Configuration section.\n  \n\n  For more information, see Fastly’s configuration options.\n\n  Create a custom error/maintenance page\n  You can optionally create a custom page for errors or when your site is down for maintenance. Create your page with HTML code to provide detailed information why the site is temporarily down, instead of an HTTP error code.\n\n  To create a custom error/maintenance page:\n\n  \n    \n      In the Fastly Configuration section, expand Error/Maintenance Page as the following figure shows.\n\n      \n    \n    Click Set HTML.\n    \n      In the provided field, enter your HTML code.\tThe HTML you enter can be a maximum of 65,535 bytes in length.\n\n      \n        Avoid using images on your site in the event Fastly is not available. To use images, refer to Data URIs on the css-tricks site.\n      \n    \n    When you’re done, click Upload to send your updates to Fastly.\n    Click Save Config at the top of the page.\n  \n\n  Create custom VCL snippets\n  For extensive instructions to create custom VCL snippets and needed edge dictionaries or ACLs, see Custom Fastly VCL snippets\n\n  Extend Fastly timeout for the Magento Admin\n  Fastly sets a 180 second-timeout for HTTPS requests to the Magento Admin, so you may encounter timeouts if you need to complete bulk actions that take longer than 3 minutes. You can manage timeouts using Fastly 1.2.41.\n\n  \n    In the Fastly Configuration section, expand Advanced.\n    Set the Admin path timeout value in seconds. This value cannot be more than one hour (3600 seconds).\n    Click Save Config at the top of the page.\n    After the page reloads, click Upload VCL to Fastly in the Fastly Configuration section.\n  \n\n  Since version 1.2.39, Fastly gets the Magento Admin path for generating the VCL file from the app/etc/env.php configuration file.\n\n  Configure GeoIP handling\n  The Fastly module includes GeoIP handling to automatically redirect visitors or provide a list of stores matching their obtained country code. If you already use a Magento extension for GeoIP handling, you may need to verify the features with Fastly options.\n\n  \n    In the Fastly Configuration section, expand Advanced.\n    Scroll down and select Yes to Enable GeoIP. Additional configuration options disply.\n    For GeoIP Action, select if the visitor is automatically redirected with Redirect or provided a list of stores to select from with Dialog.\n    \n      For Country Mapping, click Add to enter a two-letter country code to map with a specific Magento store from a list. For a list of country codes, see this site.\n\n      \n    \n    Click Save Config at the top of the page.\n    After page reload, click Upload VCL to Fastly in the Fastly Configuration section.\n  \n\n  Fastly also provides a series of geolocation-related VCL features for customized geolocation coding.\n\n  Configure DNS for Fastly\n  You must complete these steps when you go live.\n\n  After checking with your registrar about where to change your DNS settings, add a CNAME record for your website that points to the Fastly service: prod.magentocloud.map.fastly.net. If you use multiple host names for your site, you must add a CNAME record for each one.\n\n  \nThis does not work for an apex domain (also referred to as a naked domain). You must use a DNS provider that supports forwarding DNS queries to use an apex domain.\n\n\n  The following list contains examples of DNS providers for informational purposes. Use your preferred DNS provider.\n\n  \n    CNAME with ALIAS record from Dyn\n    ANAME record on DNS Made Easy\n    ANAME at easyDNS\n    ACNAME at CloudFlare\n    ALIAS at PointDNS\n  \n\n  Many other DNS providers also offer workarounds to accomplish this goal. The most common is to add a CNAME record for the www host on the domain and then use the DNS provider’s redirect service to redirect the apex over to the www version of the domain. Consult your DNS provider for more information.\n\n  Another option for apex domain is to add an A record, which maps a domain name to the Fastly IP address: 150.101.113.124.\n\n  Refer to Go live checklist for more information.\n\n  TLS and Fastly\n  If you use TLS with Fastly enabled in your environment, you must provide your DNS provider with a TXT record from Fastly. We provide a Domain Validated SSL certificate with Subject Alternative Name enabled, issued by GLobalSign. When entering your Support ticket for DNS information and going live, let us know you are using TLS, provide your domain names, and request the TXT record. You can then send this record to your DNS provider. The domain validation process is executed by Fastly.\n\n  For details on this TXT record, see Fastly’s DNS TXT record validation.\n\n  Upgrade Fastly\n  Fastly updates the Magento module to resolve issues, increase performance, and provide new features. You can check the Magento Marketplace and GitHub for updates on the latest releases.\n\n  When you upgrade Fastly, you get the upgraded subset of default VCL snippets. When you finish upgrading, you must upload upgraded default VCL snippets to Fastly:\n\n  \n    In the Fastly Configuration section, click Upload VCL to Fastly.\n    After the upload completes, the modal automatically closes with a success message.\n  \n\n  When you upgrade, the default VCL snippets you uploaded should not be affected or require any additional steps.\n\n  For information on upgrading modules, refer to Install, manage, and upgrade modules.\n\n  If you created a custom VCL snippet using the same name as a default snippet, you may need to verify and update those snippets. We do not recommend replacing existing default snippets with custom snippets of the same name. For details on custom VCL, see Custom Fastly VCL snippets.\n\n  Related topics\n\n  \n    \n      Custom Fastly VCL snippets\n\n      \n        Custom whitelist VCL\n        Custom blacklist VCL\n        Custom extend Admin timeout VCL\n        Custom redirect to Wordpress VCL\n        Custom block bad referer VCL\n      \n    \n    Fastly in Cloud\n    Troubleshoot Fastly\n    Fastly documentation\n    Fastly VCL documentation\n  \n\n",
      "url": "/guides/v2.0/cloud/access-acct/fastly.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-favicon-html": {
      "title": "Adding custom favicons",
      "content": "What's in this topic\n\nThis topic describes how to add custom favicons.\n\nGeneral overview\n\nMagento provides a default 16px x 16px favicon that you can override by uploading a custom icon in the Magento Admin, or by adding it manually in a specific location in a theme directory.\nIf both favicons exist, the one you uploaded in the Admin takes precedence.\n\nIf you want to have favicons of different sizes, you need to add them manually in the file system and define in layout.\n\nMagento supports the following file types for favicon: .ico, .png, .gif, .jpg, .jpeg, .apng, .svg. Not all browsers support all these formats. The most widely supported file format to use for a favicon is .ico.\n\nSee the following sections for details about adding favicons.\n\nAdding a custom favicon in Admin\n\nTo add a custom favicon in the Magento Admin, do the following:\n\n\n  Navigate to STORES &gt; (Settings) Configuration.\n  In the Store View drop-down in the top left corner, select the scope for which you want to set a logo (a certain store view, the whole website, or default config).\n  On the Design tab, expand the HTML Head options.\n  \n    Next to Favicon Icon, click Choose file, and select the file.\n\n  \n  Click Save Config in the upper right corner to save the changes.\n\n\nIf caching is enabled in your Admin, you get a notification that refreshing certain cache types is required. Click the link provided in the notification, and then click Flush Magento Cache.\n\nAdd custom favicons manually\n\nTo override the default 16x16 favicon manually, add your custom favicon.ico in the &lt;your_theme_dir&gt;/Magento_Theme/web/ directory.\n\nTo add favicon icons of other sizes, take the following steps:\n\n\n  Add your icons in the &lt;your_theme_dir&gt;/Magento_Theme/web/ directory.\n  In the &lt;your_theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml layout file specify the paths to the icons and their sizes.\n\n\nFor example, if you added a favicon-32x32.png icon and want it to be used as a 32x32 favicon, your default_head_blocks.xml would be like following:\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;head&gt;\n        &lt;link src=\"Magento_Theme::favicon-32x32.png\" rel=\"icon\" sizes=\"32x32\" /&gt;\n    &lt;/head&gt;\n&lt;/page&gt;\n\nFor your changes to be applied, clear the brower cache, and the following directories on the server (do not delete the .htaccess file!):\n\n\n  pub/static\n  all directories under var\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/favicon.html"
    }
    ,
  
    "guides-v2-0-mtf-features-html": {
      "title": "Functional Testing Framework Features",
      "content": "The Functional Testing Framework is:\n\n\n  Flexible, because of modularity support.\n  Fast, because of parallel execution.\n  Informative, because of the reporting tool.\n  Suitable, because of test suites.\n  Compatible, because of web driver selection.\n\n\nEach feature will be described in a separate topic.\n\n\n\n",
      "url": "/guides/v2.0/mtf/features.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-file-sys-perms-over-html": {
      "title": "Overview of ownership and permissions",
      "content": "\n\n  Overview of ownership and permissions\n  Even in a development environment, you want your Magento installation to be secure. To help prevent issues related to unauthorized people or processes doing potentially harmful things to your system, we recommend some guidelines related to file system ownership and permissions.\n\n  \n  If you're using an Magento version 2.0.5 or earlier, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead of this topic.\n  In version 2.0.6 and later, Magento does not explicitly set file or directory permissions.\n\n\n  This topic provides some basic information about our ownership and permissions guidelines. For additional information, see:\n\n  \n    Set pre-installation ownership and permissions\n    Magento ownership and permissions in development and production\n  \n\n  Magento file system owner\n  We refer to the Magento file system owner as a user who owns and can write to files in the Magento file system.\n\n  \n  The Magento file system owner is sometimes referred to as the command-line user.\n\n\n  The Magento file system owner is any of the following:\n\n  \n    \n      A single user, which is typical of shared hosting.\n\n      Shared hosting providers enable you to log in to the Magento server as one user. This user can log in, transfer files using FTP, and this user also runs the web server.\n\n      If you use one Magento user, you have the option of setting a umask to further restrict access, particularly in production.\n    \n    \n      Users that belong to a shared group, which is typical of private hosting or having your own Magento server.\n\n      In this situation, you typically cannot log in to the server as, or switch to, the web server user. Instead, you have separate users:\n\n      \n        \n          The web server user, which runs the Magento Admin and storefront.\n        \n        \n          A command-line user, which is a local user account you can use to log in to the server. This user runs Magento cron jobs and command-line utilities.\n\n          The web server user and the command-line user might need write permissions to the Magento file system. (The users require write access in developer mode but not in production mode.) You give permissions to both users by way of a shared group to which they both belong.\n\n          For private hosting, we recommend you use the default 002 umask; otherwise, the group won’t be able to write to the Magento file system.\n        \n      \n    \n  \n\n  Before you install the Magento software, see Set pre-installation ownership and permissions.\n\n  Restrict access with a umask\n  To tighten security, particularly in production on a shared hosting system, we provide a flexible to means to restrict access using a umask. A umask—also referred to as a file system creation mask—is a set of bits, each of which restricts how its corresponding permission is set for newly created files.\n\n  \n    File system security is complex and extremely important. We strongly recommend you consult an experienced system administrator or network administrator before you decide what permissions to set. We provide a mechanism for you to use but a permissions strategy is up to you.\n\n\n  Magento uses a three-bit mask, by default 002, that you subtract from the UNIX defaults of 666 for files and 777 for directories.\n\n  Here’s what that means:\n\n  \n    \n      775 for directories, which means full control by the user, full control by the group, and enables everyone to traverse the directory. These permissions are typically required by shared hosting providers.\n    \n    \n      664 for files, which means writable by the user, writable by the group, and read-only for everyone else.\n    \n  \n\n  For more information about magento_umask, see Optionally set a umask.\n\n  Permissions, ownership, and Magento modes\n  We recommend different permissions and ownership for default mode, developer mode, and production mode.\n\n  We discuss these recommendations in Magento ownership and permissions in development and production.\n\n\n",
      "url": "/guides/v2.0/install-gde/prereq/file-sys-perms-over.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-file-sys-perms-parent-html": {
      "title": "Magento file system ownership and permissions",
      "content": "\n",
      "url": "/guides/v2.0/install-gde/prereq/file-sys-perms-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-file-system-perms-html": {
      "title": "Set pre-installation ownership and permissions",
      "content": "\n\n  Set pre-installation file system ownership and permissions\n  This topic discusses how to set read-write permissions for the web server group before you install the Magento software. This is necessary so the Setup Wizard or command line can write files to the Magento file system.\n\n  The procedure you use is different, depending on whether you use shared hosting and have one user or if you use a private server and have two users.\n\n  \n  If you're using a Magento version earlier than 2.0.6, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead.\n\n\n  Set permissions for shared hosting (one user)\n  This section discusses how to set pre-installation permissions if you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n\n  To set ownership and permissions for a one-user system: To set permissions before you install the Magento software:\n\n\n  Log in to your Magento server.\n  \n    Use a file manager application provided by your shared hosting provider to verify write permissions are set on the following directories:\n\n    \n      vendor (Composer or compressed archive installation)\n      app/etc\n      pub/static\n      var\n      Any other static resources\n    \n  \n  \n    If you have command-line access, enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\;\nchmod u+x bin/magento\n    \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\; &amp;&amp; chmod u+x bin/magento\n    \n  \n  \n    If you haven’t done so already, get the Magento software in one of the following ways:\n\n    \n      Compressed archive\n      Composer metapackage\n      Clone the repository (contributing developers only)\n    \n  \n  \n    After you have set file system ownership and permissions, continue with any of the following:\n\n    \n      Command-line installation\n      Setup Wizard installation\n    \n  \n\n\n\n  To further restrict permissions after installing the Magento software, you configure a Magento umask.\n\n\n\n\n  Set ownership and permissions for two users\n  This section discusses how to set ownership and permissions for your own server or a private hosting setup. In this type of setup, you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user.\n\n  To set ownership and permissions for a two-user system: Complete the following tasks in the order shown:\n\n\n  About the shared group\n  Step 1: Create the Magento file system owner and give the user a strong password\n  Step 2: Find the web server group\n  Step 3: Put the Magento file system owner in the web server’s group\n  Step 4: Get the Magento software\n  Step 5: Set ownership and permissions for the shared group\n\n\nAbout the shared group\nTo enable the web server to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files (including files created using the Magento Admin or other web-based utilities).\n\nThis section discusses how to create a new Magento file system owner and put that user in the web server’s group. You can use an existing user account if you wish; we recommend the user have a strong password for security reasons.\n\n\n\tSkip to step 2 if you plan on using an existing user account.\n\n\nStep 1: Create the Magento file system owner and give the user a strong password\nThis section discusses how to create the Magento file system owner. (Magento file system owner is another term for the command-line user.)\n\nTo create a user on CentOS or Ubuntu, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nStep 2: Find the web server user’s group\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nStep 3: Put the Magento file system owner in the web server’s group\nTo put the Magento file system owner in the web server’s group (assuming the typical Apache group name for CentOS and Ubuntu), enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -a -G apache &lt;username&gt;\n  Ubuntu: usermod -a -G www-data &lt;username&gt;\n\n\n\n  The -a -G options are important because they add apache or www-data as a secondary group to the user account, which preserves the user’s primary group. Adding a secondary group to a user account helps restrict file ownership and permissions to ensure members of a shared group only have access to certain files.\n\n\nFor example, to add apache as a secondary group to user magento_user on CentOS:\n\nsudo usermod -a -G apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups magento_user\n\n\nThe following sample result shows the user’s primary (magento) and secondary (apache) groups.\n\nmagento_user : magento_user apache\n\n\n\n  Typically, the user name and primary group name are the same.\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nStep 4: Get the Magento software\nIf you haven’t done so already, get the Magento software in one of the following ways:\n\n\n  Compressed archive\n  Composer metapackage\n  Clone the repository (contributing developers only)\n\n\nStep 5: Set ownership and permissions for the shared group\nTo set ownership and permissions before you install the Magento software:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nsudo chown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Next step\n  After you have set file system ownership and permissions, continue with any of the following:\n\n  \n    Command-line installation\n    Setup Wizard installation\n  \n\n\n\n  Switch to the Magento file system owner\n  After you’ve performed the other tasks in this topic, enter one of the following commands to switch to that user:\n\n  \n    Ubuntu: su &lt;username&gt;\n    CentOS: su - &lt;username&gt;\n  \n\n  For example,\n\n  su magento_user\n  \n\n\n",
      "url": "/guides/v2.0/install-gde/prereq/file-system-perms.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-filesystem-html": {
      "title": "Magento filesystem",
      "content": "This document is not ready yet, but we are working on it.\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/filesystem.html"
    }
    ,
  
    "guides-v2-0-pattern-library-filters-data-table-filters-filtering-html": {
      "title": "Admin Design Pattern Library",
      "content": "Filters\nFilters allow users to customize the display of information in an associated data-table. By entering desired parameters (for example, a date range) in the available filter input sections table returns a modified view, making visible only the records meeting the user-determined criteria.\n\nFilter by Search\nA search box associated with a data-table allows users to filter table data by entering a term(s) in the field and clicking/tapping the search icon. The table refreshes to display only rows of data that have a relationship to this ‘keyword’. The term(s) is displayed as a filter ‘tag’ in an area just beneath the search box. Users may add subsequent search terms to create a combination of filtering parameters to more specifically filter data.\n\n\n\n\n\n\n\n\n\n\n\nIn the event that the user enters a term that is not found in the data, the table will display a message to the user: “Your search term did not return any results”. When this happens the user-entered term will remain in the search field for the user’s reference.\n\n\n\n\n\nApplied search terms (filters) may be removed by clicking the remove control, just as with any other filter. \n\n\n\nAdvanced Filters\nTo access the Advanced Filters the user may click/tap the “Filters” button found in the table controls area. When activated, the button transforms into a tab and displays the available filters in a ‘drawer’ which opens between the table contols and the table data. The available filters are determined by the columns present in the table; therefore, if the user customizes the column visibility of the table to show some columns and hide others, the corresponing filters for these columns will display or hide in the filter ‘drawer’.\n\n\n\n\n \nNOTE: Not all columns may be filtered (i.e. “Actions” or checkbox select) and therefore will not be presented in the list of filters even though their columns are visible in the data-table.\n\n\n\n\n\nTo apply filters, the user sets the desired parameters in the input fields of the appropriate filters. The action initiated by clicking/tapping the “Apply” button (found in the advanced filters area). When applied, the advanced filter ‘drawer’ closes and the data-table refreshes to display the filtered data. The applied filters are indicated to the user in the form of filter ‘tags’ that appear between the filter button and the table data. Filter ‘tag’ are listed in the order that they are applied and each individula ‘tag’ has a control for removing it.\n\n\n\n\n\n\nRemoving Filters\nUsers may remove a filter setting by clicking/tapping the remove control next to the filter ‘tag’. Doing so removes the particular filter from the query, the table refreshes and the data excluded by that filter then appears in the table. The user can quickly remove all applied filters by clicking/tapping the “clear all” link that follows the list of ‘filter tags’.\n\n\n\n\nFuture Capabilities\nAdditional capabilites have been designed to further increase the functionality of filtering, however these features have not, as of yet, been developed.  These include “Quick Filters”.\n\nQuick Filters\nIn some unique instances a table may have “Quick Filters” associated with it. These Quick Filters allow the user to filter data based on pre-determined parameters, and are intended to help users quickly filter data to perform a common user task - reporting functions. Not every data-table will have Quick Filters. “Search Term” filtering and Advanced Filtering may be used in conjunction with Quick Filters. Quick Filters may be removed in the same manner as other filters via the remove control.\n\n\n\n\n\n\n\n\n\n\n\nAssets\nDownload ZIP of PhotoShop source files.\n",
      "url": "/guides/v2.0/pattern-library/filters/data-table-filters/filtering.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-first-time-deploy-html": {
      "title": "First time deployment",
      "content": "Previous step:\nInstall Magento\n\n\n  You only need to complete this step one time for a new Pro project. This code is already on master for the Starter project. As a best practice, you need to have the template Magento Commerce project (or master branch) fully deployed across all environments to ensure all future code pushes correctly deploy.\n\n\nAfter fully setting up your local workspace, for Pro you should have the cloned Integration master branch on your local. To finish your initial setup, we strongly recommend fully deploying master branch to Staging and Production environments. You only need to push this branch from Integration to Staging and Production once without any changes. This fully installs the base Magento Commerce application into those environments.\n\nThis initial push provides the following benefits:\n\n\n  Fully installs Magento in each environment\n  Allows the build/deploy scripts to use the setup:upgrade command instead of setup:install (important for adding extensions)\n  Pushes the Magento encryption key across all environments\n  \n    Protects against errors and failures when installing with added modules and extensions\n\n    Not all extensions are correctly tested with the setup:install command and application modes. If you initially install Magento code with added 3rd party extensions or custom code, you may receive errors and build/deploy failures. By deploying the unmodified Magento template, all future deployments to Staging and Production typically do not encounter installation issues from 3rd party and custom code.\n  \n\n\nPrerequisites\nTo deploy, you need the following:\n\n\n  A project with an unmodified Magento Commerce template master branch (projects created using the import option may encounter issues)\n  Staging and Production environments provisioned\n  SSH access to Staging and Production environments\n\n\nEnter a ticket\nIf you need environments provisioned and SSH access, enter a Support ticket.\n\nTo request environment provisioning, you will need to have cleared a payment for the Magento Commerce (Cloud) subscription and completed an on-boarding call with Magento.\n\n\n  If you are on a Pro trial and do not have Staging and Production environments provisioned, you cannot complete an initial deployment. To continue developing, create a branch from Integration master. Do not merge this code to your master branch until you have deployed it to your provisioned Staging and Production environments.\n\n\nTo receive SSH access, provide public SSH keys in the ticket for the environments. You should receive the SSH URL for these environments in your project information from Magento.\n\nDeploy to Staging and Production\nThe Project Web Interface provides full features to create, manage, and deploy code branches in your Integration, Staging, and Production environments for Starter and Pro plans. You can also use SSH and CLI commands to complete these process. Previously for Pro plans, you could only use SSH and CLI commands for Staging and Production.\n\nFor the Pro plan, deploy the branch you created to Staging and Production.\n\n\n  Log in to your project.\n  Select the branch you created.\n  Select the Merge option to deploy to Staging.\n  Select the Staging branch.\n  Select the Merge option to deploy to Production.\n\n\n\n\nDeploy using SSH\nIf you prefer to use CLI for deploying, you will need to configure additional SSH settings and Git remotes to use commands. You can SSH into the Staging and Production environments to push the master branch.\n\nYou’ll need the SSH and Git with your project ID. The formats are as follows:\n\n\n  \n    Git URL format:\n\n    \n      Staging: git@git.ent.magento.cloud:&lt;project ID&gt;_stg.git\n      Production: git@git.ent.magento.cloud:&lt;project ID&gt;.git\n    \n  \n  \n    SSH URL format:\n\n    \n      Staging: &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n      Production: &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n    \n  \n\n\nAs part of pushing the code, you may need to:\n\n\n  Set up remote Git repos\n  Set up the SSH agent on environments\n\n\nAfter that is set up, you can SSH into the environment and use Git commands to push the branches.\n\nSet up remote Git repositories\nWhen you know your Git URLs, you must set them up as remote upstream repositories so you can push code to them.\n\nCommand syntax:\n\ngit remote add &lt;remote repository name&gt; &lt;remote repository URL&gt;\n\n\nFor example,\n\ngit remote add staging git@git.ent.magento.cloud:dr5q6no7mhqip_stg.git\ngit remote add prod git@git.ent.magento.cloud:dr5q6no7mhqip.git\n\n\nSet up your SSH agent\nYou can use any SSH client you prefer or see our Recommended tools. For these examples, we use the OpenSSH client.\n\nThe SSH agent forwards authentication requests from Staging or Production to your working Magento system (that is, your local workspace). An SSH agent enables you to log in to remote servers from the staging or production host using a local private SSH key. With a working SSH agent, you can easily copy files directly between the staging or production host and integration, or from another remote server.\n\nTo set up an SSH agent:\n\n\n  Log in to local development machine.\n  \n    Enter the following command:\n\n    ssh-add -l\n    \n\n    One of the following messages displays:\n\n    \n      \n        Working SSH agent: 2048 ab:de:56:94:e3:1e:71:c3:4f:df:e1:62:8d:29:a5:c0 /home/magento_user/.ssh/id_rsa (RSA)\n\n        Skip the next step and continue with step 4.\n      \n      \n        SSH agent not started: Could not open a connection to your authentication agent.\n\n        Continue with step 3.\n      \n    \n  \n  \n    To start the SSH agent, enter the following command:\n\n      eval $(ssh-agent -s)\n    \n\n    The agent’s process ID (PID) displays.\n  \n  \n    Add your SSH key to the agent:\n\n      ssh-add ~/.ssh/id_rsa\n    \n\n    A message similar to the following displays:\n\n      Identity added: /home/magento_user/.ssh/id_rsa (/home/magento_user/.ssh/id_rsa)\n    \n  \n\n\nFor more information on setting up SSH, see Enable SSH keys as part of your local setup.\n\nSSH and pull the Git branch\n\n\n  \n    Open an SSH connection to your Staging or Production environment:\n\n    \n      Staging: ssh -A &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n      Production: ssh -A &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n    \n  \n  \n    Pull the master branch to the server.\n\n     git pull origin master\n    \n  \n\n\nYou’re ready to code!\nWhen this code is fully deployed to those environments, you can begin development, add extensions, and more!\n\nRelated topics\n\n\n  Cloud Architecture\n  Deploy your store\n  Deployment workflow\n\n",
      "url": "/guides/v2.0/cloud/access-acct/first-time-deploy.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-first-time-setup-html": {
      "title": "Local environment setup",
      "content": "All environments for your project are read-only, requiring all work to be completed on your local environment and pushed to cloud environments. To start developing Magento, you need a configured local developer workspace, cloned Magento Commerce (Cloud) code from your Git branch, and knowledge of the deployment workflow. These instructions guide through the entire process to create a development workspace on your local system.\n\nProject user account\nDepending on the Project Owner, you may need to be invited by the owner to the project. This account gives you participation to the project and connects your local, credentials, and access to your company’s Magento Commerce (Cloud) account. The account includes all source code and deployment environments.\n\nAfter you receive an invitation, you can complete tasks to create your local, pull code, and deploy your store.\n\nHelpful knowledge\nWe highly recommend having experience with the following technologies and methodologies:\n\n\n  Magento technology stack\n  Git for repository and code management, branching methodologies, and working with Magento Git code\n  GitHub for managing your code and accessing Magento repos\n  Fastly for CDN and caching, used in Staging and Production\n  Galera Cluster for databases, used in Staging and Production (with triple redundancy failover in Production)\n\n\nGather credentials\nPrior to setting up your workspace, you may want to gather the following credentials and accounts:\n\n\n  Magento Access Key: Provides secure access through a 32-character authentication token. The token authenticates between your account, the Magento 2 code repo (repo.magento.com), and any other Git services like GitHub and 3rd party accounts needed for development. You can create multiple Magento access keys. For the workspace setup, you can start with one specific key for your code repository. To generate a key, contact the Project Owner to Generate Magento authentication keys.\n  Cloud Project account: The Project Owner or Technical Admin (Super User) should invite you to the Magento Commerce (Cloud) project. When you receive the e-mail invitiation, click the link and follow the prompts to create your account. See Set up an account for details.\n  Magento Encryption Key: When importing an existing Magento system only, you will need to capture the Magento encryption key used to protect your access and data for the Magento database. For details on this key, see Resolve issues with encryption key\n\n\nCreate a local environment\nFor development, you need to install and configure a local environment. All environments for Magento Commerce (Cloud) are read-only, including all Starter environments and all Pro Integration, Staging, and Production environments. Working in a local environment, you can write and test code prior to pushing it to a Integration environment for further testing and deployment to Staging and Production.\n\nWe recommend adding a virtual machine (VM) or Docker container and installing Magento Commerce. The environment should closely match cloud environments. To develop Magento code, you will clone the project Git code and create branches to develop your sites and stores in this local environment.\n\nThe following steps walk-through preparing your local environment, installing Magento, and starting development:\n\n\n  Prepare for local environment setup\n  Install Magento prerequisites\n  Enable SSH keys\n  Set up the Magento file system owner (optional)\n  Clone and branch the project\n  Install Magento\n  First time deployment\n\n\nIf you have existing Magento custom code, we provide instructions to import. For more information, see First steps for importing Magento Commerce.\n",
      "url": "/guides/v2.0/cloud/access-acct/first-time-setup.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-first-time-setup-import-first-steps-html": {
      "title": "Import existing code into a project",
      "content": "You can create a Magento Commerce (Cloud) project from a blank template or by importing existing code. We recommend starting with a blank template first, and then importing existing Magento code on top of it.\n\n\n  You cannot create trial projects by importing existing code.\n\n\nPrerequisites for importing code\nBefore you begin, do the following:\n\n\n  Add the existing Magento Commerce code to a Git repository. We recommend using GitHub.\n  Set up your local development environment.\n  \n    Gather required information:\n\n    \n      SSH access link to the target environment\n      Database credentials\n    \n  \n\n\nSSH access to cloud environments\nTo transfer the database dump and files to Magento Commerce (Cloud), you must know the SSH access link. You can locate the SSH access link using the [magento-cloud] CLI tool(/devdocs-archive/2.0/guides/v2.0/cloud/reference/cli-ref-topic.html):\n\nmagento-cloud environment:ssh –pipe\n\n\n  You must enter all Magento Commerce (Cloud) commands on the machine on which your Cloud SSH keys are stored. For more information, see Enable SSH keys and SSH and sFTP.\n\n\nDatabase credentials\nYou need your Magento Commerce (Cloud) database name and credentials so that you can import your Magento Commerce data. You can find the name and credentials for your Magento Commerce (Cloud) database in the $MAGENTO_CLOUD_RELATIONSHIPS environment variable.\n\nTo find Magento Commerce (Cloud) database access information:\n\n\n  \n    Log in to your remote repository using  SSH.\n\n    magento-cloud ssh -p &lt;project ID&gt; -e &lt;environment ID&gt;\n    \n  \n  \n    List all database information:\n\n    echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | json_pp\n\n&lt;pre class=\"no-copy\"&gt;database\" : [\n      {\n         \"username\" : \"user\",\n         \"query\" : {\n            \"is_master\" : true\n         },\n         \"path\" : \"main\",\n         \"port\" : 3306,\n         \"host\" : \"database.internal\",\n         \"password\" : \"\",\n         \"scheme\" : \"mysql\",\n         \"ip\" : \"192.0.2.150\"\n      }\n   ]&lt;/pre&gt;\n    \n  \n\n\nIn the previous example, the database name is main, the listen port is 3306, the hostname is database.internal, the root user name is user, and the user has no password.\n\nCloud unsecure base URL\nAfter you import the Magento Commerce database into Magento Commerce (Cloud), you must change the base URL so you can access the Magento Admin and storefront.\n\nUse the magento-cloud CLI tool to locate the base URL:\n\nmagento-cloud url\n\n\nImport workflow for existing code\nThe complete workflow for importing existing code includes the following steps:\n\n\n  If you do not have a project, create a new project from a template. This new project has files and directories specific to Magento Commerce (Cloud).\n  Replace the contents of this project with your code using Git.\n  Import your Magento database into your Magento Commerce (Cloud) project.\n  Import your static files into your Magento Commerce (Cloud) project.\n  Copy your Magento Commerce encryption key to your Magento Commerce (Cloud) project. This key is required for data migration and access.\n  Clear the cache and verify the project imported successfully.\n\n\nCreate a new Magento Commerce (Cloud) project\n\n\n  \n    Access your account. Open the email you received from Magento Cloud (accounts@magento.cloud) and click the Access your project now link. Or you can log in to your Magento Commerce account.\n  \n  \n    Click the This project has no code yet link next to the project name.\n\n    \n  \n  \n    Enter a name for the project.\n\n    \n  \n  \n    Click Create a blank site from a template and click Continue. We recommend starting with the Magento template as your initial project option. If you have an existing Magento deployment, you can import existing code later.\n\n    \n  \n  \n    When prompted, enter your Magento Commerce Magento authentication keys in the provided fields. You created these keys earlier in the Magento Marketplace. Enter the private and public keys and click Finish.\n\n    \n\n    The keys are added to the auth.json file and the file is required for all branches and deployments.\n  \n  \n    Wait a few minutes while the project deploys. A status of Pending displays until completed, similar to the following:\n\n    \n  \n  \n    After the project deploys, Success displays next to the name of your project.\n  \n\n\nNext step\nPrepare your existing Magento Commerce install\n",
      "url": "/guides/v2.0/cloud/access-acct/first-time-setup_import-first-steps.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-first-time-setup-import-import-html": {
      "title": "Import Magento EE into Magento Commerce (Cloud)",
      "content": "QUESTION: Do we really want to support a full overwrite?\n\nThe following instructions walk-through importing your Magento Commerce code into your current project code. When importing, you are force pushing your existing code in a Git repository over the Magento Commerce (Cloud)’s Git master branch.\n\n\n  Warning: When you force push code from an existing Git branch to your Magento Commerce (Cloud) project, you overwrite the project code in master. Any data, websites, stores, and so on will be lost.\n\n  Before you continue, make sure there is nothing in your Magento Commerce (Cloud) project you want to keep.\n\n\nRequired information\nBefore you continue, make sure you have the encryption key from your Magento Commerce system.\n\nCreate a remote Git reference\nThis section discusses how to create a remote Git reference from your Cloud Git repository to the repository in which your Magento Commerce installation is located.\n\nBefore you continue, make sure you know the SSH or HTTPS URL for your Magento Commerce installation Git repository.\n\nTo create a remote Git reference:\n\n\n  Log in to your local Magento Commerce (Cloud) development machine as, or switch to, the Magento file system owner.\n  \n    Make a copy of composer.json in a non-tracked directory so it doesn’t get overwritten.\n\n       cp composer.json ../composer.json.cloud\n    \n  \n  \n    Rename your Cloud Git remote from origin to cloud-project to make it clear which repository is which:\n\n    git remote rename origin cloud-project\n    \n  \n  \n    Add a remote upstream for your existing Magento Commerce installation:\n\n    git remote add prev-project &lt;git url&gt;\n    \n  \n  \n    Confirm what you’ve done so far.\n\n    git remote -v\n    \n\n    Results are displayed as follows.\n\n    cloud-project   ikyyrqvlgnrai@git.us.magento.cloud:ikyykimjgnrao.git (fetch)\ncloud-project   ikyyrqvlgnrai@git.us.magento.cloud:ikyykimjgnrao.git (push)\nmagento ikyyrqvlgnrai@git.us.magento.cloud:ikyykimjgnrao.git (fetch)\nmagento ikyyrqvlgnrai@git.us.magento.cloud:ikyykimjgnrao.git (push)\nprev-project    git@github.com:mygitusername/myeereponame.git (fetch)\nprev-project    git@github.com:mygitusername/myeereponame.git (push)\n  \n  \n    Make sure you’re on the Cloud project master branch.\n\n    magento-cloud environment:checkout master\n    \n  \n  \n    Make sure this master branch is set up to import code to the Cloud project.\n\n    git fetch cloud-project\ngit branch -u cloud-project/master\n    \n  \n\n\nImport your Magento Commerce code to your Cloud project\nBefore you continue, make sure you’ve completed all tasks discussed in the preceding section.\n\nTo import your Magento Commerce code to Cloud:\n\n\n  \n    Fetch the Magento Commerce branch.\n\n    git fetch prev-project\n    \n  \n  \n    Reset your Cloud master branch to contain the code and the commit history of your Magento Commerce branch.\n\n    git reset --hard prev-project/&lt;branch name&gt;\n    \n  \n  \n    Push code from your Magento Commerce project to your Magento Commerce (Cloud) project, overwriting the previous contents and commit history with that of your project.\n\n    git push -f cloud-project master\n    \n\n    A successful deployment is indicated by the following messages:\n\n    Re-deploying environment 43biovskhelhy-master-l5ut8gq.\n   Environment configuration:\n     mymagento (type: php:7.0, size: S, disk: 2048)\n     mysql (type: mysql:10.0, size: S, disk: 2048)\n     redis (type: redis:3.0, size: S)\n     solr (type: solr:4.10, size: S, disk: 1024)\n\nEnvironment routes:\n   http://master-o9gv6gq-43biovskhelhy.us.magentosite.cloud/ is served by application `mymagento`\n   https://master-o9gv6gq-43biovskhelhy.us.magentosite.cloud/ is served by application `mymagento`\n    \n  \n\n\nImport the Magento database\nBefore you can use your existing Magento Commerce code in Magento Commerce (Cloud), you must import the database.\n\nTo import the Magento database in Magento Commerce (Cloud), you must know:\n\n\n  The Magento Commerce (Cloud) environment’s SSH URL\n  The database name, user name, and password of the Cloud database\n\n\n\n  This topic discusses how to import the Integration environment database. The database connection information is different for Staging and Production environments.\n\n\nWhen importing data, you will need to drop and create a new database. If you have done any data you want to keep, create a backup of the database.\n\nTo drop and re-create the Cloud database:\n\n\n  \n    SSH to the Integration environment.\n\n    magento-cloud ssh\n    \n  \n  \n    Connect to the database.\n\n    mysql -h &lt;db-host&gt; -P &lt;db-port&gt; -p -u &lt;db-user&gt; &lt;db-name&gt;\n    \n  \n  \n    Drop the database. At the MariaDB [main]&gt; prompt, enter:\n\n    drop database main;\n    \n  \n  \n    Re-create the database:\n\n    create database main;\n    \n  \n  At the MariaDB [main]&gt; prompt, enter exit.\n  \n    At the shell command prompt, enter the following command to re-create the database.\n\n    zcat var/db.sql.tgz | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\\*/\\*/' | mysql -h &lt;db-host&gt; -P &lt;db-port&gt; -p -u &lt;db-user&gt; &lt;db-name&gt;\n    \n\n    For example,\n\n    zcat var/db.sql.tgz | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\\*/\\*/' | mysql -h database.internal -p -u user main\n    \n  \n\n\nUpdate base URLs\nBefore you can access Magento from your local Cloud development system, you must change the Base URLs in the Magento database. Base URLs are stored in the core_config_data table.\n\nThe following example shows how to change only the insecure URL but you can use the same procedure to change secure URLs as well.\n\nTo update the unsecure base URL:\n\n\n  \n    If you haven’t already done so, SSH to the Cloud integration server.\n\n        magento-cloud ssh\n    \n  \n  \n    Connect to the database.\n\n    mysql -h &lt;db-host&gt; -P &lt;db-port&gt; -p -u &lt;db-user&gt; &lt;db-name&gt;\n    \n  \n  \n    Show the contents of the core_config_data table.\n\n    SELECT * from core_config_data;\n    \n\n    Note the path of web/unsecure/base_url; this is the value you’ll change.\n  \n  \n    Enter the following command to change the value of path to your integration server’s unsecure base URL:\n\n    UPDATE core_config_data SET value='&lt;Cloud unsecure base URL&gt;' WHERE path='web/unsecure/base_url';\n    \n\n    \n      The base URL must end with a / character.\n    \n  \n  \n    Confirm the change by entering the following command:\n\n    SELECT * from core_config_data;\n    \n  \n  If the change was successful, enter exit to exit the [Maria DB] prompt.\n  Continue with the next section.\n\n\n\n  For your system to be fully functional, you must also set unsecure and secure URLs for the default scope as well as for all websites, stores, and store views.\n\n\nAdd the Magento encryption key\nThe Magento Commerce encryption key is required as an environment variable in env.php for Integration, Staging, and Production environments. If you deployed Magento when first creating a project across all environments, the encryption key should have been saved to env.php. If you have not deployed previously, you should verify and add the encryption key if needed in every environment. Without this key, the store encounters authentication and authorization errors such as payments and shipping.\n\nYou copied the key in a previous step.\n\nTo add your Magento Commerce encryption key:\n\n\n  \n    If you haven’t done so already, SSH to the Cloud environment.\n\n    magento-cloud environment:ssh\n    \n  \n  Open app/etc/env.php in a text editor.\n  \n    Replace the existing value of key with your Magento Commerce key.\n\n    return array (\n  'crypt' =&gt;\n  array (\n    'key' =&gt; '&lt;your encryption key&gt;',\n  ),\n);\n    \n  \n  \n    Save your changes to env.php and exit the text editor.\n\n    \n      Make sure to add this key to the env.php file for all environments: Integration, Staging, and Production.\n    \n  \n\n\nImport media\nTo import media files into your Cloud environment:\n\n\n  \n    If you haven’t done so already, SSH to the Cloud environment.\n\n    magento-cloud ssh -p &lt;project ID&gt; -e &lt;environment ID&gt;\n    \n  \n  \n    Enter the following command to clear existing media files:\n\n    rm -rf pub/media/*\n    \n  \n  \n    Enter the following command to extract the media files to the pub/media directory:\n\n    tar -xzf var/media.tgz pub/media\n    \n  \n\n\nClear the cache\nOn the Cloud environment, enter the following commands in the order shown:\n\nbin/magento setup:upgrade\nbin/magento magento setup:static-content:deploy\nbin/magento cache:clean\n\n\nAfter the cache flushes, enter exit to close the SSH tunnel.\n\nVerify the import\nTo verify everything imported properly, perform the following tasks in your local Cloud development environment:\n\n\n  \n    On your Cloud environment, enter the following commands to find the information to log in to the Magento Admin and to view the storefront:\n\n    magento-cloud environment:url\n    \n  \n  Log in to the Magento Admin using the user name and password of your Magento Commerce system.\n  Make sure settings in the Admin are the same as your Magento Commerce system.\n  Access the storefront.\n  Make sure categories, products, and so on display as you expect.\n  Test everything thoroughly.\n\n",
      "url": "/guides/v2.0/cloud/access-acct/first-time-setup_import-import.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-first-time-setup-import-prepare-html": {
      "title": "Prepare your existing Magento Commerce install",
      "content": "You need to prepare your existing Magento Commerce implementation to import it into a new Magento Commerce (Cloud) project. This includes updating and adding files, transfering media files, and migrating data.\n\nBefore preparing your project and importing code, push all pending changes to Git. Your remote Magento Commerce (Cloud) branch should be fully updated. When you push, build and deploy scripts run to update code, static content, and environment services.\n\nThese import preparation steps include the following:\n\n\n  Prepare and add required files:\n  [Add Cloud-specific files and directories ]to Magento Commerce. Without these files and directories, your Magento Commerce code can’t be imported to Cloud.\n  Add Authentication Keys to auth.json.\n  Modify your existing composer.json to specify Cloud-specific dependencies. Make sure to include all modules. Cloud uses this file for composer install commands. Add composer.lock to Git. Cloud uses this file for composer update commands and during the build and deploy process.\n  Transfer media files to Cloud.\n  Add your Magento Commerce authentication credentials to auth.json if you haven’t done so already.\n  Migrate your Magento Commerce data.\n\n\nPrepare and add required files\nTo import Magento Commerce code to a Magento Commerce (Cloud) project, you need to add a directory and the following files to your existing code.\n\n\n  .magento.app.yaml manages applications, service relationships, mounts for writable directories, and cron jobs\n  .magento/services.yaml for service configurations including MySQL, PHP, Redis, Solr (2.0.X only), ElasticSearch (2.1.X and later)\n  .magento/routes.yaml for handling routes including redirections, caching, and server-side includes\n  magento-vars.php for multiple websites and stores\n\n\nYou need to add these files to your Magento Commerce code:\n\n\n  Go to the Magento Commerce (Cloud) GitHub.\n  \n    Select the branch corresponding to the Magento Commerce version you currently have.\n\n    The following figure shows an example of selecting the 2.1.4 branch.\n\n    \n\n    In the procedure that follows, you’ll copy the contents of some of these files to your Magento Commerce system.\n  \n  Log in to your Magento Commerce system as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;Magento installation dir&gt;\nmkdir .magento\n    \n  \n  \n    One at a time, create the following files in your Magento Commerce system using the contents of the files in the Magento Commerce (Cloud) GitHub:\n\n    \n      &lt;Magento Commerce install dir&gt;/.magento.app.yaml\n      &lt;Magento Commerce install dir&gt;/magento-vars.php\n      &lt;Magento Commerce install dir&gt;/.magento/services.yaml\n      &lt;Magento Commerce install dir&gt;/.magento/routes.yaml\n    \n\n    For example, to create &lt;Magento Commerce install dir&gt;/.magento.app.yaml from the 2.1.4 branch:\n\n    \n      In the  Magento Commerce (Cloud) GitHub, click .magento.app.yaml.\n      \n        In the upper right, click Raw, as the following figure shows.\n\n        \n      \n      In your Magento Commerce project, open a text editor in the Magento Commerce installation directory (for example, /var/www/html/magento2).\n      Paste the raw contents of .magento.app.yaml from GitHub into the text editor.\n      Make sure the file is named .magento.app.yaml when you save the file.\n      \n        Repeat these tasks for the other files.\n\n        \n          Make sure to create magento-vars.php in the Magento root directory.\n          Make sure to create routes.yaml and services.yaml in the .magento subdirectory.\n        \n      \n    \n  \n\n\nModify these files as necessary as discussed in the following topics:\n\n\n  .magento/routes.yaml\n  .magento/services.yaml\n  .magento.app.yaml\n\n\nWhen you push your code, all services are configured into the associated environment per active branch of code. These files affect all Starter environments and all Pro Integration environments. To update these settings in Pro Staging and Production, you need to enter a ticket.\n\nAdd or update auth.json with Magento Authentication keys\nTo enable install and update commands for Magento Commerce (Cloud), you must have an auth.json file in your project’s root directory. auth.json contains your Magento Commerce authorization credentials for Magento Commerce (Cloud).\n\nIn some cases, you might already have auth.json. Verify if you have the file and add your authentication credentials before you create a new one. It’s located in your Magento root directory. You can also get a sample auth.json.\n\nTo create a new auth.json in the event you don’t have one:\n\n\n  Use a text editor to create a file named auth.json in your Magento root directory.\n  \n    Replace &lt;public-key&gt; and &lt;private-key&gt; with your Magento Commerce authentication credentials.\n\n    See the following example:\n\n    {\n   \"http-basic\": {\n      \"repo.magento.com\": {\n      \"username\": \"&lt;public-key&gt;\",\n      \"password\": \"&lt;private-key&gt;\"\n    }\n  }\n}\n    \n  \n  Save your changes to auth.json and exit the text editor.\n\n\nEdit composer.json\nBefore you push code to the Magento Commerce (Cloud) Git repository, modify your composer.json for Cloud. You can also view a sample composer.json.\n\nTo edit composer.json:\n\n\n  If you haven’t done so already, log in to your Magento Commerce (Cloud) server as the Magento file system owner.\n  In a text editor, open composer.json in the project root directory.\n  \n    Substitute the following value in the require section:\n\n    \"magento/product-enterprise-edition\": \"&lt;version&gt;\",\n    \n\n    with\n\n    \"magento/magento-cloud-metapackage\": \"&lt;version&gt;\",\n    \n\n    \n      Both &lt;version&gt; values must be the same. For example, if your current Magento Commerce version is 2.1.9, your magento-cloud-metapackage version must also be 2.1.9.\n    \n  \n  \n    Update the \"files\" directive in the autoload section to refer to app/etc/NonComposerComponentRegistration.php as follows:\n\n    \"autoload\": {\n  \"psr-4\": {\n      \"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\",\n      \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\",\n      \"Magento\\\\\": \"app/code/Magento/\"\n      },\n  \"psr-0\": {\n      \"\": \"app/code/\"\n      },\n  \"files\": [\n      \"app/etc/NonComposerComponentRegistration.php\"\n      ]\n  }\n    \n  \n  Save your changes to composer.json and exit the text editor.\n  In the terminal application, run composer update to update composer.lock. Wait while dependencies are updated.\n  \n    Commit the changes to GitHub:\n\n    git add -A &amp;&amp; git commit -m \"Add Cloud files\" &amp;&amp; git push origin &lt;branch name&gt;\n    \n  \n\n\nBack up and transfer media files\nUse the command magento setup:backup --media to back up media files:\n\n\n  Get the  integration system’s SSH URL.\n  \n    To back up media files, enter the following command:\n\n    php &lt;Magento Commerce install dir&gt;/bin/magento setup:backup --media\n    \n\n    The backup is stored in the &lt;Magento Commerce install dir&gt;/var/backups directory.\n  \n  \n    Transfer the media file to your Magento Commerce (Cloud) system:\n\n    rsync &lt;Magento Commerce install dir&gt;/var/backups/&lt;backup file name&gt; &lt;cloud ssh url&gt;:var/media.tgz\n    \n\n    For example,\n\n    rsync /var/www/html/magento2/var/backups/1487962699_filesystem_media.tgz 43bkopvkhelhy-master-l8uv4kp@ssh.us.magentosite.cloud:var/media.tgz\n    \n  \n\n\nCopy the encryption key\nTo be able to decrypt encrypted data from your imported database, copy your encryption from your existing env.php file. Every environment inIntegration, Staging, and Production has an env.php of sensitive data and environment variables. The file contains a nested PHP array storing configuration data.\n\n\n  Open &lt;Magento install dir&gt;/app/etc/env.php in a text editor.\n  Search for the value of key in the crypt array.\n  Copy the value to the clipboard and save it.\n\n\nYou must paste the encryption key into your Magento Commerce (Cloud) env.php file in each environment in a later step.\n\nMigrate Magento Commerce data\nCreate a database dump and transfer the data from an existing database. You will import this data to your Magento Commerce (Cloud) database.\n\nThe following command example compresses the dump so it doesn’t significantly interfere with traffic from in live site. The dump file is named db.sql.gz. You may want to include the date in the file name if you do multiple dumps over time. Because the database dump can be large, we recommend you create it in a directory not tracked by Git.\n\n\n  \n    In your existing environment, create a database dump.\n\n     mysqldump -h &lt;db-host&gt; -P &lt;db-port&gt; -p -u &lt;db-user&gt; &lt;db-name&gt; --single-transaction --no-autocommit --quick | gzip &gt; ~/db.sql.tgz\n    \n  \n\n\nFor example, if your database is on localhost with the default port (3306), database user name is magento, and database name is also magento:\n\n    mysqldump -p -u magento magento --single-transaction --no-autocommit --quick | gzip &gt; ~/db.sql.tgz\n\n\n\n  \n    Use the rsync command to transfer the database dump to the Magento Commerce (Cloud) environment in the var directory of the application you are importing into:\n\n     rsync &lt;db dump file name&gt; &lt;cloud SSH URL&gt;:var/db.sql.gz\n    \n  \n\n\nTo find &lt;cloud SSH URL&gt;, see Find the information you need for your import.\n\nNext step\nImport Magento Commerce into Magento Commerce (Cloud)\n",
      "url": "/guides/v2.0/cloud/access-acct/first-time-setup_import-prepare.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-form-elements-form-elements-html": {
      "title": "Admin Design Pattern Library",
      "content": "Form elements\nForm elements are central to the Magento platform, particularly in the ‘Admin’ interface. This article contains examples of the various types of form elements encountered throughout the application to collect data input from its users.\n\nFor solutions not described in this article, please refer to other form-related patterns or contact the Magento UX Design team.\n\nUse of form elements\nForm elements will be needed anytime input is to be collected from the user. Consideration should be given to ensure the best* form element is presented as part of the particular user-task. When designing forms for Magento application care should be taken to ensure the overall experience promotes clarity, efficiency and success for the user.\n\n* “best” is a relative term, but there are User Experience principles and best practices that should be followed when designing forms.\n\nForm Labels\nIn most cases every text field, text box, radio button group, checkbox or checkbox group, drop down selector and multi-select box will have a label. There are two variations of form layout – “label-left” and “label-top”. Depending on the layout of the page and/or task-at-hand, either of these may be implemented, but whichever layout is deemed appropriate it should be used consistency throughout a given task.\n\n\nExample of label-top\n\n\n\n\n\n\nExample of label-left\n\n\n\n\n\n\"Required\" Indicator\nAs a matter of best practices, any input that is required in order to be successfully submitted should clearly bear an indication. This is achieved by including an asterisk in relation to the form element. The asterisk should precede the label whenever the label appears above the form field.However, for left-aligned form labels the asterisk should follow the label, thus appearing between the label and form field –this improves scannability making it less likely that the user will overlook the required fields.\n\n\n\nFocus State\nTo assist the user, the form element with .focus() will display a subtle blue stroke to indicate that the element is currently “active”. Focus can be re-directed by “tabbing” or\notherwise selecting outside the form element that has focus.\n\n\n\nForm Elements and the Page Grid\nFor label-left form elements the amount of horizontal real estate allowed for the labels should only span a maximum of 3 columns of the page grid. While the element itself should typically span no more than 4 columns. For label-top form elements, the label and the form element overall should typically not exceed 5 columns of the page grid, however page layout and/or the amount of information to be collected will influence this.\n\n\nGrid and label-left form\n\n\n\n\nGrid and label-top form\n\n\n\nText Field\n\nText fields are used to collect alphanumeric input directly from the user. As a matter of design, the length of the field should be comparable to the length of information to be collected. This can passively set an expectation on the part of the user as to how much or what type of information is to be provided.\n\n\n\nAdditional Text Field\nIn cases where some, but not every, user may want to provide additional information (such as Building or Room Number as part of an address) an additional field may be paired with the initial text field. In these cases, if it is ‘reasonably clear’ what this additional field is\nfor, a label may not be necessary for the additional field. However, as a rule each form element should have a label.\n\n\n\n\"Re-sizable\" Text Field\nIt may be advantageous to allow the text area to be ‘stretched’ by the user to accommodate the amount of data input. This is most useful when the amount of data or character-count is unlimited and/or the amount of text to be entered large or unpredictable (‘comments’ for instance). When presenting this a re-sizable area to the user it is crucial to include the “grabber” icon in the lower-right corner of the field to indicate this functionality to the user.\n\n\n\nIn cases where a re-sizable text field is not desired, reasonable space should be provided to collect the data. If the text entered then exceeds the area, the text should flow upward, keeping the most recent text in view.\n\nText Field with Associated Checkbox\nOften times a text field will be paired with a checkbox to enable some behavior associated with the data provided (“Keep me signed in” on a log in screen for example). In these instances, most often, including a label for the checkbox element is not required or needed. A slight indentation of the sub-elemental checkbox can help inform the user that the elements are related and not two distinct form elements.\n\n\n\nText Field with Icon Trigger or Button\nA control may be placed inside (overlaid on) a text field to “trigger” a more sophisticated\nor robust interaction, as in the case of something like date picker. The icon should appear on the far right end of the field. Once a user has interacted with the control and a value is set, the value should display in the field, as well as the control (icon). This of course allows the user to edit the field if they so desire.\n\n\n\nWhen an ancillary or sub-action must be performed using the data input (or selected from) a particular element a, “button” may be required to initiate the sub-action and should be located in close proximity to the form element. If the sub-action involves a single form field an icon should be used and should directly follow the form element.\n\nIf the sub-action involves a set of form elements, as with sign-in, a more traditional “button” should follow the group. The button should follow the Magento UI style for buttons. A link may be substituted for a button, however doing so may reduce the ’find-ability’ of the call to\naction.\n\n\n\nCheckboxes\nCheckboxes should be used in cases where one or many options may be selected. A checkboxes may also be used in cases where the user may wish to ‘opt in’ or enable an action or setting. Checkboxes may be used in relation to other form elements as well.\n\n\n\n\nIf there is a parent-child relationship of associated checkboxes there should be some visual distinction for the user between “some” checked and “all” checked, in the event that the child elements are hidden from view as in a expandable section.\n\n\n\n\nRadio Buttons\nRadio buttons should be used in cases of ‘yes’ or ‘no’. The pair of radio buttons may be arranged either vertically or horizontally. Radio buttons may often have a default or preferred selection. This preferred selection should be the first button of the pair whenever possible. In some instances when only a single selection may be made but there are several options to choose from, all of the radio button in the set may appear un-selected or ‘empty’. Once a user has made a selection however the selected state should be evident and be visible henceforth, even if the user changes the selection - it cannot be returned to the initial ‘un-selected’ state.\n\n\n\nDrop Down Selector - Single\nA drop down selector may be used when two or more options are available, but only one of the options may be selected. However whenever only two options are available the use of a drop down element should be weighed against the use of radio buttons.\n\n\n\nBest practices suggest that a drop down selector should not be used for ‘binary’ or Yes/No selections, radio buttons are preferable in these situations. If the selection is not mandatory, a checkbox is preferred. If visibility of the list of options is desired or advantageous for the user or if the list of options is lengthy (say more than 6) a ‘list box’ should be used instead of a dropdown.\n\nMulti-Select Drop Down\nWhen selecting multiple options and a drop down element is the desired implementation, checkboxes can be included for ease of use in selecting multiple options. This is preferred over the keyboard Shift key + select method.\n\n(image here)\n\nList Box\nThe advantage of a list box is that it exposes more options to the user. The list can be made scroll-able when space is a consideration and/or the list is long. A list box is mandatory when the list of options exceeds 6 items.\n\n\n\nAttribute Builder - 'Chips'\nIn instances where to user wishes to build a list of one or many, as in a list of email addresses for a distribution list or a set of color swatches for a product, an “attribute” builder may be employed.  This is presented as a typical form field, but when the user clicks into it a drop down list is revealed. The user may then select from the list as with a typical drop down or may begin typing to narrow the list, auto-suggest functionality would also apply to make this process more efficient. The selected options are then rendered as ‘chips’ in the field. The user can select as many as desired and the ‘chip’ fill in like bricks, wrapping to the next line when there is not enough space. These chips can then be removed either by clicking/tapping the chip in the field or ‘backspacing’ on the keyboard will remove each chip in reverse order (right to left inline).\n\n\n\nForm Field Validation\nClient-side validation should be used whenever possible to assist the user in completing an error-free form prior to submitting the data. A validation check should be triggered when the user redirects focus (clicks or tabs out of a field). A notification message should appear when an error was made. This message should appear in immediate proximity of the form element where the error occurred. This same style should be applied when messaging errors returned from server-side validation checks. Please refer to Alerts and Messaging documentation for more details.\n\n\n\nDisabled Form Field\nIt may be necessary in some instances to display a form element but disable it so that the user cannot interact with it. Disabling can indicate a conflict with other related form elements, that an “opt in” is required to enable the feature, or that the proper level of authentication has not been obtained by the user.\n\n\n\nUnits and Measurement Indicators\nIn some cases it may be beneficial to indicate to the user the “unit” of the data to be\ninput, such as currency or weight. This is accomplished by including standard symbolic indicator of the “unit”, such as using €to denote the currency Euros. The indicator may either precede the input area or follow the input area.\n\n\n\n\nField Masking\nSome fields may benefit the user by providing an indication of the desired format of the data to be input. The mask should appear when the field gains “focus”.\n\n\n\nRead-only Form Data\nIt may be necessary or advantageous to display form field data that cannot be changed or edited. In these cases the form label should appear to provide context for the “read-only” data, but not the field bounding-box so that it is clear to the user that the data cannot be edited.\n\n\n\nProgressive Disclosure\nIn some instances rather than displaying a form element in a disabled state, it may be preferred to hide the element until the user takes an action to ‘opt in’. Once the user takes the action to opt in the enabled field(s) is dynamically presented (becomes visible) to the user.\n\n\n\nContextual Help tooltip\nAkin to progressive disclosure is “contextual help”. This may be used whenever it is likely the user will require or benefit from additional information regarding a form element. The advantage of “contextual help” over standard help text is that it provides more space for copy or when the majority of users would not need the information to complete the task. Its drawback is that it is hidden from 100% of the users and requires explicit action to reveal it. “Contextual help” should be used sparingly to minimize clutter. The user taps the icon to reveal the contextual help tooltip. Then taps again to close it.\n\n\n\nHelp text\n“Help text” may be associated with individual form elements. This text is used to provide specific details, helpful hints, or cautionary messages relating to the particular form element with which it is associated. Help text is always visible so care should be taken to ensure that the text is necessary, helpful, clear and concise.  As with “Contextual Help”, help text should be used judiciously.\n\n\n\nStyling and Spacing\nFor specific details concerning styling including fonts, colors and effects and spacing and padding, please refer to the source PSD files and exports located on Box or contact the Magento Product Design and User Experience team.\n\n\nSample of specs\n\n\n\n\nAccessibility\n\nFollow this guideline:\n\n http://www.w3.org/TR/WCAG10-HTML-TECHS/#forms \n\nAssets\nPSD files and PNG images can be found here:\nDownload Forms Patterns source (PSD) and PNGs\n\nFor any other resources, please contact the Magento UX Design Team\n\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/form_elements/form_elements.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-framework-html": {
      "title": "Magento Framework",
      "content": "Overview\n\nThe Magento Framework controls how application components interact, including request flow, routing, indexing, caching, and exception handling. It provides services that reduce the effort of creating modules that contain business logic, contributing to the goal of both making Magento code more modular as well as decreasing dependencies.\n\nThis primarily PHP software component is organized into logical groups called libraries, which all modules can call.  Most of the framework code sits under the domain layer or encloses the presentation, service, and domain layers. The framework contains no business logic.\n(Although the Magento Framework does not contain resource models, it does contain a library of code to help implement a resource model.)\n\n\n  Don't confuse the Magento Framework with the Zend web application framework that ships with Magento.\n\n\nYou should never modify Framework files, although if you are extending Magento, you must know how to call Framework libraries. Modules you create will typically inherit from classes and interfaces defined in the Framework directories.  \n\nResponsibilities\n\nThe Magento Framework provides libraries that help reduce the effort of creating modules that contain business logic.\n\nThe Framework is responsible for operations that are useful for potentially all modules, including:\n\n\n  \n    handling HTTP protocols\n  \n  \n    interacting with the database and filesystem\n  \n  \n    rendering content\n  \n\n\nOrganization\n\nHere is the Magento Framework folder structure:\n\n\nvendor/\n    ../magento\n        ../framework\nlib/\n    ../internal\n        ../LinLibertineFont\n    ../web\n \n\n\n  \n    /vendor/magento/framework  contains only PHP code. These are libraries of code plus the application entry point that routes requests to modules (that in turn call the Framework libraries). For example,  libraries in the Framework help implement a resource model (base classes and interfaces to inherit from) but not the resource models themselves. Certain libraries also support CSS rendering.\n  \n  \n    /lib/internal contains some non-PHP as well as PHP components. Non-PHP framework libraries includes JavaScript and LESS/CSS.\n  \n  \n    /lib/web contains JavaScript and CSS/LESS files. These files reside  under web and not internal because they are accessible from a web browser, while the PHP code under internal is not. (Any code that a web browser must access should be under web, while everything else under internal.)\n  \n\n\n\n  The vendor/magento/framework directory maps to the Magento\\Framework namespace.\n\n\nHighlights of Magento Framework\n\nThe Magento Framework (lib/internal/Magento/Framework/) provides a robust range of functionality. If you are an extension developer, you may be interested in this subset of Framework namespaces.\n\n\n   \n      \n         Namespace\n         Purpose\n      \n      \n         Magento\\Framework\\DataObject\n         \n         Provides standard functionality for storing and retrieving data through magic methods. This is the base class for many Magento classes.\n      \n         Magento\\Framework\\DataObject\\Model\n         \n         Contains base Model classes that almost all Magento Model classes extend from.\n      \n         Magento\\Framework\\DataObject\\AbstractModel\n         \n         \n      \n      \n         Magento\\Framework\\DataObject\\AbstractResource\n         \n      \n      \n         Magento\\Framework\\DataObject\\Controller\n         Contains classes to help return different types of results (for example, JSON and redirects).\n      \n      \n         Magento\\Framework\\DataObject\\View\n         Contains code to render pages and layouts.\n      \n         Magento\\Framework\\DataObject\\Data\n         Contains additional classes that handle forms.\n      \n         Magento\\Framework\\DataObject\\URL\n         Contains code to look up other pages in Magento.\n      \n   \n\n\nOther namespaces under Magento\\Framework that will interest extension developers:\n\n\n    \n        \n            Namespace\n            Purpose\n        \n      \n         Magento\\Framework\\ObjectManager\n         \n         Used to provide dependency injection. \n      \n\t  \n         Magento\\Framework\\App\n         \n         Contains framework code that has knowledge about the Magento application. This code bootstraps the application and reads in the initial configuration. It also contains the entry point to the command line tools, the web application, and the cron job. And finally, it routes requests while providing the deployment context (such as reading in the configuration for the database configuration, languages, caching systems).\n\n\n\n\t\n\t\tMagento\\Framework\\Api\n\t\n\tContains base classes for advanced functionality of extendable objects through the system (that is, objects that can be extended to add new data through Magento Marketplace extensions).\n\n\n\t\n\t\tMagento\\Framework\\Config\n\t\n\tContains the generic configuration reader. Each config file has its own specialized reader extending these classes.\n\n\n\t\n\t\tMagento\\Framework\\Filesystem\n\t\n\tContains classes that handle reading from and writing to the file system.\n\n\t\n\t\t\n\t\t\tMagento\\Framework\\HTTP\\PhpEnvironment\n\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\tMagento\\Framework\\Session\n\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\tMagento\\Framework\\Stdlib\\Cookie\n\t\t\n\t\tCode to handle the HTTP request/responses as well as session/cookies is found here.\n\t\n\t\n\t\t\n\t\t\tMagento\\Framework\\Exception\n\t\t\n\t\tContains the basic exceptions that are thrown throughout the Magento codebase.\n\t\n\t\n\t\t\n\t\t\tMagento\\Framework\\Event\n\t\t\n\t\tContains the code that publishes synchronous events and that handles observers for any Magento event is handled here.\n\t\t\n\t\n\t\t\n\t\t\t\n\t\t\t\tMagento\\Framework\\Validator\n\t\t\t\n\t\t\tContains the code that validates data (currencies, not empty) and that handles observers for any Magento event.\n\t\t\t\n\t\t\n\t\n\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/framework.html"
    }
    ,
  
    "guides-v2-0-howdoi-frontend-front-js-html": {
      "title": "JavaScript development",
      "content": "JavaScript development\n\n  Configure JavaScript resources\n  Replace a default JS component\n  Extend a default JS component\n  Disable default Magento JS\n  Define which JavaScript components and widgets are used on a particular page.\n\n",
      "url": "/guides/v2.0/howdoi/frontend/front-js.html"
    }
    ,
  
    "guides-v2-0-howdoi-frontend-front-layout-html": {
      "title": "Layout development",
      "content": "Layout development\n\n\n  Set the page layout\n    \n      Include static resources (JavaScript, CSS, fonts) in &lt;head&gt;\n      Remove static resources (JavaScript, CSS, fonts) in &lt;head&gt;\n      Create a container\n      Reference a container\n      Create a block\n      Set a block’s template\n      Modify block arguments\n      Reference a block\n      Use block object methods to set block properties\n      Rearrange elements\n      Remove elements\n      Replace elements\n    \n  \n  Customize email templates\n  Customize theme .phtml templates\n\n\n",
      "url": "/guides/v2.0/howdoi/frontend/front-layout.html"
    }
    ,
  
    "guides-v2-0-howdoi-frontend-front-theme-html": {
      "title": "Theme development",
      "content": "Theme development\n\n  Add a theme\n  Apply and configure a theme in Admin\n  Configure product images\n  Define which layouts, templates and stylesheets are used for a certain page\n  Add a new breakpoint\n  Uninstall a theme\n\n",
      "url": "/guides/v2.0/howdoi/frontend/front-theme.html"
    }
    ,
  
    "guides-v2-0-architecture-frontend-custom-strategies-html": {
      "title": "Ease of frontend customization",
      "content": "Overview\n\nThe Magento frontend is designed to optimize storefront customization, with highly extensible themes being the central customization mechanism.\n\nMerchants are encouraged to use Magento components and themes to extend and transform the appearance of their storefronts.\n\nStorefront customization tools\n\nMagento provides several tools to help you significantly jumpstart the storefront customization process:\n\n\n  \n    Magento Blank Theme\n  \n  \n    Magento UI Library Components\n  \n  \n    Magento Admin Pattern Library\n  \n\n\nSee the Frontend Developer Guide for information on creating your themes.\n\nMagento Blank theme\n\nThe Magento blank theme template provides a launchpad for storefront customization. You can use this boilerplate as a robust starting point for your own theme development.\n\nMagento UI components\nUsing Magento standard coding and styling tools can help:\n\n\n  enforce for consistency in design across your storefronts\n  simplify (and speed up) the design process\n\n\nThis component library contains standard reusable components for form features, such as fields and buttons, and navigation elements. The Magento UI library is a set of generic web components and Magento-specific patterns, which simplifies the process of Magento theme creation and customization.\n\nSee Magento UI Library Components for details about this library.\n\nMagento Admin pattern library\n\nA pattern library is a collection of user interface (UI) design patterns that can be re-used in locations throughout your product installation. The Magento Admin Pattern Library defines examples of components that administrators working with the storefront can use.\n\nForm elements included in the Magento Admin pattern library include:\n\n\n  address form\n  button bar\n  container\n  tabs\n  sign-in form\n\n\nUsers of the default Magento storefront encounter examples of these form elements throughout the product. These patterns provide a valuable language of software components (and indirectly, user experiences) for extension developers and administrators.\n\nThe Magento Admin Pattern library is built on the LESS preprocessor and implemented as a module. You can download a free, current version of this module from Magento Marketplace.\n\nSee Magento Admin Pattern Library for more information on using this library.\n\nRelated topics\n\nExtensibility and modularity\n\nGlobal extensibility features\n\nMagento Admin Pattern Library\n\nMagento UI Library Components\n",
      "url": "/guides/v2.0/architecture/frontend_custom_strategies.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-gateway-client-html": {
      "title": "Gateway Client",
      "content": "Gateway Client is a component of the Magento payment gateway that transfers the payload to the payment provider and gets the response.\n\nBasic interface\n\nThe basic interface for a gateway client is Magento\\Payment\\Gateway\\Http\\ClientInterface.\n\nA gateway client receives a called Transfer object. The client may be configured with response converter using dependency injection.\n\nDefault implementations\nThe following gateway client implementations can be used out-of-the-box:\n\n\n  \\Magento\\Payment\\Gateway\\Http\\Client\\Zend\n  \\Magento\\Payment\\Gateway\\Http\\Client\\Soap\n\n\nExample\nFollowing is the illustration of how a Zend client can be added in di.xml:\n\n...\n&lt;virtualType name=\"HtmlConverterZendClient\" type=\"Magento\\Payment\\Gateway\\Http\\Client\\Zend\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"converter\" xsi:type=\"object\"&gt;Magento\\Payment\\Gateway\\Http\\Converter\\HtmlFormConverter&lt;/argument&gt;\n        &lt;argument name=\"logger\" xsi:type=\"object\"&gt;CustomLogger&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n...\n\nTransfer Factory\n\nTransfer Factory allows to create transfer object with all data from request builders. This object is then used by Gateway Client to process requests to payment processor.\n\nTransfer Factory uses Transfer Builder to set required request parameters.\n\nThe basic Transfer Factory interface is Magento\\Payment\\Gateway\\Http\\TransferFactoryInterface.\n\nThe similar example of factory might looks like this:\n\n public function create(array $request)\n {\n    return $this-&gt;transferBuilder\n        -&gt;setBody($request)\n        -&gt;build();\n }\n\n\nIn this example transfer factory simply sets request data using Transfer Builder and returns the created object.\n\nFollowing is an example of a more complicated behavior. Here transfer factory sets all required data to process requests using API credentials and all data is sent in JSON format.\n\npublic function create(array $request)\n{\n    return $this-&gt;transferBuilder\n        -&gt;setMethod(Curl::POST)\n        -&gt;setHeaders(['Content-Type' =&gt; 'application/json'])\n        -&gt;setBody(json_encode($request, JSON_UNESCAPED_SLASHES))\n        -&gt;setAuthUsername($this-&gt;getApiKey())\n        -&gt;setAuthPassword($this-&gt;getApiPassword())\n        -&gt;setUri($this-&gt;getUrl())\n        -&gt;build();\n}\n\n\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/gateway-client.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-gateway-command-html": {
      "title": "Gateway Command",
      "content": "Gateway Command is a component of the Magento payment gateway that takes the payload required for a particular payment provider and sends, receives, and processes the provider’s response. \nFor each operation (authorization, capture and so on) of a certain payment provider - a separate gateway command is added.\n\nInterface\nBasic interface for a gateway command is \\Magento\\Payment\\Gateway\\CommandInterface. It implements the Command design pattern.\n\nBasic implementation\n\nThe \\Magento\\Payment\\Gateway\\Command\\GatewayCommand class is the default CommandInterface implementation. It allows performing most of the operations implemented in the Magento sales management.\n\nAdding gateway commands\nFor each particular integration with a payment provider, gateway commands are added using virtual types in dependency injection (DI) configuration.\n\nIn the following example the BraintreeAuthorizeCommand gateway command is added. The command implements the “authorize” operation for the Braintree payment provider (app/code/Magento/Braintree/etc/di.xml#131):\n\n&lt;virtualType name=\"BraintreeAuthorizeCommand\" type=\"Magento\\Payment\\Gateway\\Command\\GatewayCommand\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"requestBuilder\" xsi:type=\"object\"&gt;BraintreeAuthorizeRequest&lt;/argument&gt;\n        &lt;argument name=\"transferFactory\" xsi:type=\"object\"&gt;Magento\\Braintree\\Gateway\\Http\\TransferFactory&lt;/argument&gt;\n        &lt;argument name=\"client\" xsi:type=\"object\"&gt;Magento\\Braintree\\Gateway\\Http\\Client\\TransactionSale&lt;/argument&gt;\n        &lt;argument name=\"handler\" xsi:type=\"object\"&gt;BraintreeAuthorizationHandler&lt;/argument&gt;\n        &lt;argument name=\"validator\" xsi:type=\"object\"&gt;Magento\\Braintree\\Gateway\\Validator\\ResponseValidator&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n\n(The code sample is from Magento Open Source v2.1. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1)\n\nA gateway command must be configured with the following arguments:\n\n\n  \n    requestBuilder: request builder, builds an array of provider-specific arguments using the order information.\n  \n  \n    transferFactory: transfer factory, creates transfer object from request data, which will be used by Gateway Client to process requests. For details see Gateway Client #Transfer Factory\n  \n  \n    client: gateway client, takes the provider-specific arguments and performs a low-level call to the provider.\n  \n\n\nOptional arguments :\n\n\n  handler: response handler, changes the order and payment status depending on the payment provider response.\n  validator: response validator, validates the provider response.\n\n\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/gateway-command.html"
    }
    ,
  
    "guides-v2-0-rest-generate-local-html": {
      "title": "Generate a local REST API reference",
      "content": "Get more REST API documentation\n\nThe REST documentation on the Magento devdocs website is generated with Swagger UI using a schema derived from the latest build of Magento 2. However, the REST API documentation on devdocs is static in that the Magento Developers website is not running an instance of Magento, and there is no live data.\n\nMagento provides two ways to get detailed information about the structure of the REST APIs, as described below.\n\nGenerate a full REST API reference locally\n\nThe Swagger UI is installed automatically on your server. As a result, you can generate live REST API documentation that can include Magento Commerce modules, third-party modules, and extension attributes that have been installed on your system. To view this documentation, go to:\n\nhttp://&lt;magento_host&gt;/swagger\n\nBy default, Magento returns documentation for resources available to anonymous users. If you specify a valid value in the api_key text box in the upper right corner, Swagger returns documentation for all the APIs the user has access to. To generate an API key, call the POST /V1/integration/customer/token or POST /V1/integration/admin/token as directed in Token-based authentication.\n\nThe generated Swagger documentation provides the capability to test REST API requests. A user can enter a sample request, then press the Try it out! button, and Swagger returns information such as a curl command, a request URL, a response body, a response code, and the response header. The Try it out! button will not work unless a bearer authorization token has been specified.\n\n\n  The Try it out! feature is not available on Swagger documentation published on the Magento devdocs website.\n\n\nReturn the JSON schema for one or more services\n\nYou can use a REST client to generate the JSON schema for one or more services. In the client, set the method to GET and the URL to\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/schema?services=&lt;serviceName1,serviceName2,..&gt;\n\nThe value of store_code must be one of the following:\n\n\n  default\n  The assigned store code\n  all. This value only applies to the CMS and Product modules. If this value is specified, the API call affects all the merchant’s stores.\n\n\nFor example:\n\nhttp://&lt;magento_host&gt;/rest/default/schema?services=catalogProductRepositoryV1\n\nTo return information about all services:\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/schema\n\n\n\nYou must specify an authorization token for an admin user to return information for most endpoints. See Token-based authentication for more information. \n\n\nRelated topics\n\nToken-based authentication\n\nList of REST APIs by module\n\nList of service names permodule\n",
      "url": "/guides/v2.0/rest/generate-local.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-get-help-html": {
      "title": "Get help with your installation",
      "content": "Getting help with your installation\nIn the event you need additional help, consult the following resources.\n\n\n\t\n\t\n\n \n\tMagento edition\n\tHow to get help\n\n \n\tMagento Open Source and Magento Commerce\n\tMagento support forums\n\tmagento.stackexchange.com\n\tTwitter (@ask_magento)\n\t\n\n \n\tMagento Open Source\n\tSubmit bug reports\n\n \n\tMagento Commerce only\n\tSubmit bug reports\n\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/get-help.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-get-software-html": {
      "title": "Get the Magento software",
      "content": "\n\n  The following table discusses where to get the Magento software. We provide the following downloads:\n\n  \n    Magento Open Source or Magento Commerce software only\n    Magento Open Source or Magento Commerce software with sample data (designed to help you learn Magento faster)\n  \n\n  These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n  Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n  \n\t\n\t\n\n \n\tMagento edition\n\tInstall package location\n\n \n\tMagento Open Source\n\twww.magento.com/download\n\t\tChoose either the software or the software and sample data:\n\t\tMagento-CE-&lt;version&gt;.* (without sample data)\n\t\t\tMagento-CE-&lt;version&gt;+Samples.* (with sample data)\n\t\t\t&lt;version/&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on.)\n\n \n\tMagento Commerce\n\tUse the following steps:\n\tGo to www.magento.com\n\tIn the top horizontal navigation bar, click My Account.\n\tLog in with your Magento user name and password.\n\tIn the left navigation bar, click Downloads.\n\tIn the right pane, click Magento Enterprise Edition 2.X &gt; Full Release or Magento Enterprise Edition 2.X &gt; Full Release + Sample Data for the software.\n\tFollow the instructions on your screen to complete the Magento Commerce download:\n\t\tMagento-EE-&lt;version&gt;.* (without sample data)\n\t\t\tMagento-EE-&lt;version&gt;+Samples.* (with sample data)\n\n\t\n\tTransfer the installation package to your development system.\n\n\n\n\n  Related topics\n\n  \n    Clone the Magento repository\n    Get the Composer metapackage\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/get-software.html"
    }
    ,
  
    "guides-v2-0-cloud-reference-git-integration-html": {
      "title": "Git",
      "content": "Git is the center of all code management, build, and deployment for your Magento Commerce (Cloud) stores and sites. We use Git to provide source control for your code:\n\n\n  Git supports branch development that merges upstream (or to a parent branch) before deploying across your environments. Multiple developers can work together on small to large code updates through Git branch management.\n  When you push Git branches, we automatically kick off build and deploy scripts to completely build and verify your code, generate and update a virtual environment, and deploy to the environment for ease of testing.\n  Every active Git branch has an associated environment. We use specific .yaml files in Magento Commerce (Cloud) code with your customizations to define environment configurations, services, database, and more.\n\n\nIf you need help understand Git, you can review the following resources:\n\n\n  Git documentation and videos from the makers of Git\n  Git cheatsheet and quick guide from Roger Dudler\n  Git video with DevForge to understand how people use the repo and commands with a fun story\n\n\nGit CLI and clients\nYou can interact with Git using CLI commands or using a Git client. Git provides a Git client option, or you can use other clients such as installed on your computer to be able to interact with Magento Commerce (Cloud).\n\nNot everyone remembers Git commands with ease. If you want a Git client, use any client of your choice. Some developers use clients including GitKraken and SmartGit.\n\nGit branch naming\nIn addition to Git’s requirements for valid branch names, Magento Commerce (Cloud) adds two additional requirements:\n\n\n  The / character isn’t allowed in a branch name.\n  Branch names must be case-insensitively unique. In other words, the names must be entirely unique regardless of the case you use. For example, if you have a branch named Sprint, you cannot create another branch named sprint. A branch name of Sprint2 and sprint2 are just fine.\n\n\nGit branching\nFor specifics on creating Git branches, see the following topics:\n\n\n  Manage branches with the Project Web Interface\n  Manage branches with the CLI\n\n\n.gitignore file\nDepending on your Magento Commerce (Cloud) version, you may need different information added to or commented out in your .gitignore file. Git uses this file to determine which files and directories to ignore, before you make a commit to your branches. A .gitignore file should be committed into your root Magento in the repository, in order to share the ignore rules with any other users that clone the repository.\n\nWe include a base .gitignore file with the project repository. For a review of the Magento Commerce (Cloud) file, see .gitignore file. You can review the recommended files for your file in the .gitignore reference.\n\nGit and SSH\nYou must use Secure Shell (SSH) and not HTTPS to connect to the Git repository. For more information, see GitHub documentation.\n\nWhen setting up your SSH, review our information at SSH and sFTP.\n\nGit integrations\nWe support using either Github or Bitbucket integrations for your Magento Commerce (Cloud) project.\n\n\n  To integrate other git repositories with your Magento Commerce (Cloud) project using Github or Bitbucket deploy keys, refer to Pull code from a private Git repository.\n\n",
      "url": "/guides/v2.0/cloud/reference/git-integration.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-gitignore-html": {
      "title": "Missing .gitignore files",
      "content": "Problem: missing .gitignore files\nIf you downloaded a compressed archive, there might have been missing .gitignore files that prevent the upgrade from completing properly. To apply our update, patch magento/magento-composer-installer then run composer update from your Magento installation directory.\n\nThe following figure shows an example of this issue when using the Setup Wizard.\n\n\n\nSolution\nTo solve this issue:\n\n\n  Log in to your Magento server as the Magento file system owner.\n  Change to your Magento installation directory.\n  \n    Run the following commands in the order shown:\n\n    composer update magento/magento-composer-installer\ncomposer update\n    \n  \n  Try your upgrade again.\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/gitignore.html"
    }
    ,
  
    "guides-v2-0-architecture-global-extensibility-features-html": {
      "title": "Global features that support extensibility",
      "content": "Overview\n\nEssential qualities foster extensibility throughout the entire set of Magento components. This discussion focuses on:\n\n\n  Modularity\n  Reliance on popular design patterns\n  Coding standards\n  Flexible attribute types\n  Web APIs\n  Service contracts and dependency injection\n  Plug-ins\n\n\nModularity\n\nThe concept of the module is the heart of Magento extension development, and modular design of software components (in particular, modules, themes, and language packages) is a core architectural principle of the product. Self-contained modules of discrete code are organized by feature, thereby reducing each module’s external dependencies.\n\nIf a module is self-contained, then you can modify or replace it without affecting other areas of the code. This loose coupling of software components reduces the ripple effects throughout your code base of changing code.\n\nSee the PHP Developer Guide for detailed instructions on how to create modules.\n\nReliance on popular design patterns\n\nReliance on known architectural and programming structures helps PHP developers orient themselves to the specific development issues that affect coding in a particular product ecosystem. This can reduce the learning curve for new Magento developers.\n\nDesign patterns are time-tested, widely recognized software architecture constructs. Magento product architecture incorporates many well known patterns, but Model-View-Controller (MVC) holds particular interest for extension developers.\n\nCoding standards\n\nMagento developers should familiarize themselves with our coding standards, best practices, and conventions, especially standards for PHP file formatting, coding style, and file naming conventions. Magento standards are based on Zend Framework Coding Standards.\n\nSee Coding Standards for guidelines and requirements.\n\nRich product ecosystem\n\nThe wider Magento ecosystem provides an extensive community and rich third-party marketplace for extensions. Visit Magento Marketplace for an overview of the many modules and themes available for download and to buy modules and theme packages, which offer more possibilities for extending your storefront.\n\nFlexible attribute types\n\nYou can enhance your storefront by adding unique attributes to the default product attributes. For example, you might need to add a new attribute to describe a product, such as texture or an industry-specific rating. You can add these attributes from the Magento Admin, and the storefront  displays them.\n\n\n   \n      \n         Attribute type\n         Displayed by storefront?\n\n      \n\n         EAV\n         \n         no\n         \n\n         \n         Custom\n         \n         yes\n         \n         \n         Extension\n         \n         no\n         \n\n\n\n\n\nAttribute types fall into three general categories:\n\n\n  \n    EAV (Entity-Attribute-Value) attributes are site-specific attributes that you can define for a local site using the Magento Admin.\n  \n  \n    Custom attributes are a subset of EAV attributes. Objects that use EAV attributes typically store values in several MySQL tables. The Customer and Catalog modules use EAV attributes.\n  \n  \n    Extension attributes often use more complex data types than custom attributes. These attributes do not appear in the storefront. Extension attributes are introduced by modules.\n  \n\n\nSee PHP Developer Guide for information about using attributes.\n\nWeb APIs\n\nMagento or third-party services can be configured as a web API (REST or SOAP) with some simple XML. You can use these services to integrate your Magento installation into third-party applications, such as CRM (Customer Relationship Management), ERP (Enterprise Resource Planning) back office systems, and CMS (Content Management Systems).\n\nSee Getting Started with Magento Web APIs for more information.\n\nService contracts, dependency injection, and dependency inversion\n\nService contracts provide a new way to access public API endpoints. These PHP interfaces offer robust, stable extension points to which clients can connect.  Service contracts define the endpoints that function as a module’s public API. Defining these endpoints is an essential part of adding a module.\n\nService contracts are discussed throughout the Magento documentation set. See Service layer for a high-level introduction. See PHP Developer Guide for a more detailed discussion of service contracts and dependency injection.\n\nMagento implements dependency injection along with service contracts. Dependency injection provides a mechanism for changing a module’s behavior without altering the client or understanding nitty-gritty details of implementation. Both dependency injection and its related concept dependency inversion support Magento’s fundamental architectural principles of modularity and ease-of-extensibility. They strongly encourage basic coding practices that support the loose coupling of software modules.\n\nSee PHP Developer Guide for information on both dependency injection and service contracts.\n\nPlug-ins\n\nPlug-ins, like modules, are a mechanism for adding features to the core Magento product. Plug-ins enable you to make changes to the behavior of any public method in a Magento class. You can consider it a form of extension that uses the Plugin class.\n\nPlug-ins are also called interceptors. Applications use the plug-in pattern to change method behavior without modifying the actual class. Plug-ins can typically intercept method processing before or after the method runs, or only when the method throws an exception.\n\nSee Plug-ins in PHP Developer Guide for information on declaring and prioritizing plug-ins.\n\nRelated topic\n\nExtensibility and modularity\n",
      "url": "/guides/v2.0/architecture/global_extensibility_features.html"
    }
    ,
  
    "guides-v2-0-cloud-live-go-live-checklist-html": {
      "title": "Go live checklist",
      "content": "Prior to entering your ticket to go live and switching the DNS, you should complete this checklist and all tests for your deployed site/store. Deploy your master branch to the Production environment.\n\nCompletely test in Production\nSee Test deployment for testing all aspects of your sites, stores, and environments. These tests include verifying Fastly, User Acceptence Tests (UAT), and performance testing.\n\nGo Live Prep call with support\nContact Support to schedule a Go Live Preparation call. We walk through the Go Live process, verify your readiness with a checklist, and discuss the final steps.\n\nEnter a ticket with domain names\nYou may need information for this ticket.\n\n\n  Log in to your Magento Cloud account.\n  Click Support &gt; Submit ticket from the top menu.\n  Follow the prompts to open an issue with Support.\tSupport assists you with your live deployment and gives you an IP address for your live site so you can set up DNS.\n  Provide a list of all storefront domain names for the shared SSL certificate.\n  (Optional) If you purchased a Domain-Validated SSL (HTTP) certificate as part of your subscription, provide the certificate files in an attachment to the ticket. We will provide the certificate to Fastly for deployment.\n\n\nDNS configurations\nYou need to complete configurations for your DNS including:\n\n\n  Set all necessary redirects, especially if you are migrating from an existing site\n  Set the zone’s root resource record to address the hostname\n  Lower the value for the Time-to-Live (TTL) to refresh DNS information to correctly point customers faster to the Production store\n\n\nWe recommend a significantly lower TTL value when switching the DNS record. This value tells the DNS how long to cache the DNS record. When shortened, it refreshes the DNS faster. For example, changing this value from 3 days to 10 minutes. Be advised, this adds load to the web server.\n\nAfter checking with your registrar about where to change your DNS settings, add a CNAME record for your website that points to the Fastly service: prod.magentocloud.map.fastly.net. If you use multiple host names for your site, you must add a CNAME record for each one.\n\n\nThis does not work for an apex domain (also referred to as a naked domain). You must use a DNS provider that supports forwarding DNS queries to use an apex domain.\n\n\nThe following list contains examples of DNS providers for informational purposes. Use your preferred DNS provider.\n\n\n  CNAME with ALIAS record from Dyn\n  ANAME record on DNS Made Easy\n  ANAME at easyDNS\n  ACNAME at CloudFlare\n  ALIAS at PointDNS\n\n\nMany other DNS providers also offer workarounds to accomplish this goal. The most common is to add a CNAME record for the www host on the domain and then use the DNS provider’s redirect service to redirect the apex over to the www version of the domain. Consult your DNS provider for more information.\n\nAnother option for apex domain is to add an A record which maps a domain name to the Fastly IP address: 150.101.113.124.\n\nTLS and Fastly\nIf you use TLS with Fastly enabled in your environment, you must provide your DNS provider with a TXT record from Fastly. We provide a Domain Validated SSL certificate with Subject Alternative Name enabled, issued by GLobalSign. When entering your Support ticket for DNS information and going live, let us know you are using TLS, provide your domain names and request the TXT record. You can then send this record to your DNS provider. The domain validation process is executed by Fastly.\n\nFor details on this TXT record, see Fastly’s DNS TXT record validation.\n\nVerify Production configurations\nMake a final pass for any Production configurations in the store(s). If you need to make changes to configurations, you can modify in Production. If settings are read-only, you may need to SSH and CLI commands to modify, or make configuration changes in your local and deploy across.\n\nThe following are recommended changes and checks:\n\n\n  Outgoing email has been tested\n  Base URL and Base Admin URL are set correctly\n  \n    Change the default Magento Admin password\n\n    See Configuring Admin Security for further information on Admin configurations.\n  \n  Optimize all images for the web\n  Enable minification for JS, CSS, and HTTP\n\n\nVerify Fastly caching\nTest and verify Fastly caching is correctly working in Production. For detailed tests and checks, see Fastly testing.\n\n\n  Make sure that pages are being correctly cached in the page cache and Fastly\n  Make sure the Fastly Extension is up-to-date\n  Make sure the Fastly VCL is up-to-date\n\n\nPerformance testing\nWe recommend that you review the Magento Performance Toolkit options as part of your pre-launch readiness process.\n\nYou can also test using the following 3rd party options:\n\n\n  Siege: Traffic shaping and testing software to push your store to the limit. Hit your site with a configurable number of simiulated clients. Siege supports basic authentication, cookies, HTTP, HTTPS and FTP protocols.\n  Jmeter: Excellent load testing to help gauge performance for spiked traffic, like for flash sales. Create custom tests to run against your site.\n  New Relic (provided): Helps locate processes and areas of the site causing slow performance with tracked time spent per action like transmitting data, queries, Redis, and so on.\n  Blackfire (provided): Helps track through the issues New Relic finds and helps you dig deeper into the issue for specifics. Blackfire profiles the environment and helps locate bottlenecks indepth: process, method call, query, load, and so on.\n  WebPageTest and Pingdom: Real-time analysis of your site pages load time with different origin locations. Pingdom may cost a fee. WebPageTest is a free tool.\n\n\nNext step:\nLaunch steps\n",
      "url": "/guides/v2.0/cloud/live/go-live-checklist.html"
    }
    ,
  
    "guides-v2-0-get-started-gs-atapi-html": {
      "title": "Step 3. Use cURL to run the request",
      "content": "–&gt;\n\n",
      "url": "/guides/v2.0/get-started/gs-atapi.html"
    }
    ,
  
    "guides-v2-0-get-started-authentication-gs-authentication-oauth-html": {
      "title": "OAuth-based authentication",
      "content": "Magento OAuth authentication is based on OAuth 1.0a, an open standard for secure API authentication. OAuth is a token-passing mechanism that allows a system to control which external applications have access to internal data without revealing or storing any user IDs or passwords.\n\nIn Magento, a third-party extension that uses OAuth for authentication is called an integration. An integration defines which resources the extension can access. The extension can be granted access to all resources or a customized subset of resources.\n\nAs the process of registering the integration proceeds, Magento creates the tokens that the extension needs for authentication. It first creates a request token. This token is short-lived and must be exchanged for access token. Access tokens are long-lived and will not expire unless the merchant revokes access to the extension.\n\nOAuth overview\nThe following diagram shows the OAuth authentication process. Each step is described further.\n\n\n\n  \n    Create an integration.  The merchant creates an integration from Admin. Magento generates a consumer key and a consumer secret.\n  \n  \n    Activate the integration. The OAuth process begins when the merchant activates the integration. Magento sends the OAuth consumer key and secret, an OAuth verifier, and the store URL to the external application via HTTPS post to the page defined in the Callback Link field in Admin. See Activate an integration for more information.\n  \n  \n    Process activation information. The integrator must store the activation information received in step 2. These parameters will be used to ask for  tokens.\n  \n  \n    Call the application’s login page. Magento calls the page defined in the Identity Link field in Admin.\n  \n  \n    Merchant logs in to the external application. If the login is successful, the application returns to the location specified in the call. The login page is dismissed.\n  \n  \n    Ask for a request token. The application uses the POST /oauth/token/request REST API to ask for a request token. The Authorization header includes the consumer key and other information. See Get a request token for details about this token request.\n  \n  \n    Send the request token. Magento returns a request token and request token secret.\n  \n  \n    Ask for an access token. The application uses the POST /oauth/token/access REST API to ask for an access token. The Authorization header includes the request token and other information. See Get an access token for details about this token request.\n  \n  \n    Magento sends the access token. If this request is successful, Magento returns an access token and access token secret.\n  \n  \n    The application can access Magento resources. All requests sent to Magento must use the full set of request parameters in Authorization header. See Access the web APIs for more information.\n  \n\n\nActivate an integration\n\nThe integration must be configured from the Magento Admin (System &gt; Extensions &gt; Integrations).  The configuration includes a callback URL and an identity link URL.  The callback URL specifies where OAuth credentials can be sent when using OAuth for token exchange. The identity link points to the login page of the third-party application that is integrating with Magento.\n\nA merchant can choose to select Save and Activate when the integration is created. Alternatively, the merchant can click on Activate against a previously saved integration from the Integration grid.\n\nWhen the integration is created, Magento generates a consumer key and a consumer secret.\n\nActivating the integration submits the credentials to the endpoint specified when creating the Integration. An HTTP POST from Magento to the Integration endpoint will contain these attributes:\n\n\n  store_base_url For example, http://my-magento-store.com/.\n  oauth_verifier\n  oauth_consumer_key\n  oauth_consumer_key_secret\n\n\nIntegrations use the oauth_consumer_key key to get a request token and the oauth_verifier to get an access token.\n\nOAuth handshake details\n\nThe process of completing the Oauth handshake requires that you\n\n\n  Get a request token\n  Get an access token\n\n\nThis process is known has a 2-legged OAuth handshake.\n\nGet a request token\n\nA request token is a temporary token that the user exchanges for an access token. Use the following API to get a request token from Magento:\n\nPOST /oauth/token/request\n\nYou must include these request parameters in the Authorization  header in the call:\n\n\nParameterDescription\n\n\noauth_consumer_key\nThe consumer key is generated when you create the integration.\n\n\noauth_signature_method\nThe name of the signature method used to sign the request. Must have this value: HMAC-SHA1.\n\n\noauth_signature\nA generated value (signature).\n\n\noauth_nonce\nA random value that is uniquely generated by the application.\n\n\noauth_timestamp\nA positive integer, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n\n\noauth_version\nThe OAuth version.\n\n\n\nThe response contains these fields:\n\n\n  oauth_token. The token to be used when requesting an access token.\n  oauth_token_secret.  A secret value that establishes ownership of the token.\n\n\nA valid response looks like this:\n\noauth_token=4cqw0r7vo0s5goyyqnjb72sqj3vxwr0h&amp;oauth_token_secret=rig3x3j5a9z5j6d4ubjwyf9f1l21itrr\n\nGet an access token\n\nThe request token must be exchanged for an access token. Use the following API to get an access token from Magento:\n\nPOST /oauth/token/access\n\nYou must include these request parameters in the Authorization  header in the call:\n\n\nParameterDescription\n\n\noauth_consumer_key\nThe consumer key value that you retrieve after you register the integration.\n\n\noauth_nonce\nA random value that is uniquely generated by the application.\n\n\noauth_signature\nA generated value (signature).\n\n\noauth_signature_method\nThe name of the signature method used to sign the request. Must have this value: HMAC-SHA1.\n\n\noauth_timestamp\nA positive integer, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n\n\noauth_version\nThe OAuth version.\n\n\noauth_token\nThe oauth_token value, or request token, obtained in Get a request token.\n\n\noauth_verifier\nThe verification code that is tied to the consumer and request token. It is sent as part of the initial POST operation when the integration is activated.\n\n\n\nA valid response looks like this:\noauth_token=0lnuajnuzeei2o8xcddii5us77xnb6v0&amp;oauth_token_secret=1c6d2hycnir5ygf39fycs6zhtaagx8pd\n\nThe response contains these fields:\n\n\n  oauth_token. The access token that provides access to protected resources.\n  oauth_token_secret. The secret that is associated with the access token.\n\n\nAccess the web APIs\n\nAfter the Integration is authorized to make API calls, 3rd party extensions (registered as Integrations in Magento) can invoke Magento web APIs by using the access token.\n\nTo use the access token to make web API calls:\n\nGET /rest/V1/products/1234\n\nYou must include these request parameters in the Authorization request header in the call:\n\n\n  oauth_consumer_key. The customer key value provided after the registration of the extension.\n  oauth_nonce. A random value, uniquely generated by the application.\n  oauth_signature_method. The name of the signature method used to sign the request. Valid values are: HMAC-SHA1, RSA-SHA1, and PLAINTEXT.\n  oauth_signature. A generated value (signature).\n  oauth_timestamp. A positive integer, expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n  oauth_token. The oauth_token, or access token, value obtained in Get an access token.\n\n\nThe OAuth signature\n\nAll OAuth handshake requests and Web Api requests include the signature as part of Authorization header. Its generated as follows:\n\nYou concatenate a set of URL-encoded attributes and parameters to construct the signature base string.\n\nUse the ampersand (&amp;) character to concatenate these attributes and parameters:\n\n\n  HTTP method\n  URL\n  oauth_nonce\n  oauth_signature_method\n  oauth_timestamp\n  oauth_version\n  oauth_consumer_key\n  oauth_token\n\n\nTo generate the signature, you must use the HMAC-SHA1 signature method. The signing key is the concatenated values of the consumer secret and token secret separated by the ampersand (&amp;) character (ASCII code 38), even if empty. You must use parameter encoding to encode each value.\n\nOAuth token exchange example\n\nThe scripts provided in this document simulate the Magento 2 OAuth 1.0a token exchange flow. You can drop these scripts under the document root directory of your Magento application so that they can be exposed as endpoints that your Magento application can interact with to mimic the token exchange.\n\nThe OAuth client is extended from and attributed to PHPoAuthLib, which is the same lib used in the Magento OAuth client.\n\nTo simulate the OAuth 1.0a token exchange flow:\n\n\n  Login to your Magento Admin and navigate to System &gt; Extensions &gt; Integrations\n  Click on Add New Integration.\n  Complete all details in the Integration Info tab:\n    \n      Name : SomeUniqueIntegrationName\n      Callback URL : http://your_app_host/endpoint.php\n      Identity link URL : http://your_app_host/login.php\n      Add permissions as desired on the API tab\n    \n  \n  Select the Save and Activate option from the drop down menu.\n  A pop-up window displays, confirming API permissions. Click Allow. (Make sure your browser allows pop-up windows.)\nThe credentials are posted to endpoint.php. You should also see another pop-up for the identity linking step that opens the script from login.php.\n  Click Login. (There is no actual login check since this is a simulation.). The checklogin.php script is called. It uses the posted credentials to complete the token exchange.\n  When the token exchange completes successfully, the user is redirected back to the Integrations grid. The newly-created integration should be in the Active state.\n  Click on the edit icon of the integration and check the Integration Details on the Integration Info tab. It should show all the credentials that can be used to make an authenticated API request using OAuth 1.0.\n\n\nchecklogin.php\n\nClick to expand &lt;?php\nrequire './vendor/autoload.php';\n\n$consumerKey = $_REQUEST['oauth_consumer_key'];\n$callback = $_REQUEST['callback_url'];\n\nsession_id('test');\nsession_start();\n\n/** Use $consumerKey to retrieve the following data in case it was stored in DB when received at \"endpoint.php\" */\nif ($consumerKey !== $_SESSION['oauth_consumer_key']) {\n    throw new \\Exception(\"Consumer keys received on on different requests do not match.\");\n}\n\n$consumerSecret = $_SESSION['oauth_consumer_secret'];\n$magentoBaseUrl = rtrim($_SESSION['store_base_url'], '/');\n$oauthVerifier = $_SESSION['oauth_verifier'];\n\ndefine('TESTS_BASE_URL', $magentoBaseUrl);\n\n$credentials = new \\OAuth\\Common\\Consumer\\Credentials($consumerKey, $consumerSecret, $magentoBaseUrl);\n$oAuthClient = new OauthClient($credentials);\n$requestToken = $oAuthClient-&gt;requestRequestToken();\n$accessToken = $oAuthClient-&gt;requestAccessToken(\n    $requestToken-&gt;getRequestToken(),\n    $oauthVerifier,\n    $requestToken-&gt;getRequestTokenSecret()\n);\n\nheader(\"location: $callback\");\n\n\nendpoint.php\nClick to expand &lt;?php\nsession_id('test');\nsession_start();\n\n// If this data is stored in the DB, oauth_consumer_key can be used as ID to retrieve this data later in \"checklogin.php\"\n// For simplicity of this sample, it is stored in session\n$_SESSION['oauth_consumer_key'] = $_POST['oauth_consumer_key'];\n\n$_SESSION['oauth_consumer_secret'] = $_POST['oauth_consumer_secret'];\n$_SESSION['store_base_url'] = $_POST['store_base_url'];\n$_SESSION['oauth_verifier'] = $_POST['oauth_verifier'];\n\nsession_write_close();\n\nheader(\"HTTP/1.0 200 OK\");\necho \"Response\";\n\n\nlogin.php\nClick to expand &lt;?php\n$consumerKey = $_REQUEST['oauth_consumer_key'];\n$callbackUrl = urlencode(urldecode($_REQUEST['success_call_back']));\n\necho &lt;&lt;&lt;HTML\n&lt;table width=\"300\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"1\" bgcolor=\"#CCCCCC\"&gt;\n    &lt;tr&gt;\n        &lt;form name=\"form1\" method=\"post\" action=\"checklogin.php?oauth_consumer_key={$consumerKey}&amp;callback_url={$callbackUrl}\"&gt;\n            &lt;td&gt;\n                &lt;table width=\"100%\" border=\"0\" cellpadding=\"3\" cellspacing=\"1\" bgcolor=\"#FFFFFF\"&gt;\n                    &lt;tr&gt;\n                        &lt;td colspan=\"3\"&gt;&lt;strong&gt;Integrations Login&lt;/strong&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td width=\"78\"&gt;Username&lt;/td&gt;\n                        &lt;td width=\"6\"&gt;:&lt;/td&gt;\n                        &lt;td width=\"294\"&gt;&lt;input name=\"myusername\" type=\"text\" id=\"myusername\"&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;Password&lt;/td&gt;\n                        &lt;td&gt;:&lt;/td&gt;\n                        &lt;td&gt;&lt;input name=\"mypassword\" type=\"text\" id=\"mypassword\"&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&amp;nbsp;&lt;/td&gt;\n                        &lt;td&gt;&amp;nbsp;&lt;/td&gt;\n                        &lt;td&gt;&lt;input type=\"submit\" name=\"Submit\" value=\"Login\"&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/form&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\nHTML;\n\n\nOauthClient.php\n\nChange the instances of http://magento.host in this example to a valid base URL.\n\nClick to expand &lt;?php\n\nuse OAuth\\Common\\Consumer\\Credentials;\nuse OAuth\\Common\\Http\\Client\\ClientInterface;\nuse OAuth\\Common\\Http\\Exception\\TokenResponseException;\nuse OAuth\\Common\\Http\\Uri\\Uri;\nuse OAuth\\Common\\Http\\Uri\\UriInterface;\nuse OAuth\\Common\\Storage\\TokenStorageInterface;\nuse OAuth\\OAuth1\\Service\\AbstractService;\nuse OAuth\\OAuth1\\Signature\\SignatureInterface;\nuse OAuth\\OAuth1\\Token\\StdOAuth1Token;\nuse OAuth\\OAuth1\\Token\\TokenInterface;\n\nclass OauthClient extends AbstractService\n{\n    /** @var string|null */\n    protected $_oauthVerifier = null;\n\n    public function __construct(\n        Credentials $credentials,\n        ClientInterface $httpClient = null,\n        TokenStorageInterface $storage = null,\n        SignatureInterface $signature = null,\n        UriInterface $baseApiUri = null\n    ) {\n        if (!isset($httpClient)) {\n            $httpClient = new \\OAuth\\Common\\Http\\Client\\StreamClient();\n        }\n        if (!isset($storage)) {\n            $storage = new \\OAuth\\Common\\Storage\\Session();\n        }\n        if (!isset($signature)) {\n            $signature = new \\OAuth\\OAuth1\\Signature\\Signature($credentials);\n        }\n        parent::__construct($credentials, $httpClient, $storage, $signature, $baseApiUri);\n    }\n\n    /**\n     * @return UriInterface\n     */\n    public function getRequestTokenEndpoint()\n    {\n        return new Uri('http://magento.host/oauth/token/request');\n    }\n\n    /**\n     * Returns the authorization API endpoint.\n     *\n     * @throws \\OAuth\\Common\\Exception\\Exception\n     */\n    public function getAuthorizationEndpoint()\n    {\n        throw new \\OAuth\\Common\\Exception\\Exception(\n            'Magento REST API is 2-legged. Current operation is not available.'\n        );\n    }\n\n    /**\n     * Returns the access token API endpoint.\n     *\n     * @return UriInterface\n     */\n    public function getAccessTokenEndpoint()\n    {\n        return new Uri('http://magento.host/oauth/token/access');\n    }\n\n    /**\n     * Parses the access token response and returns a TokenInterface.\n     *\n     * @param string $responseBody\n     * @return TokenInterface\n     */\n    protected function parseAccessTokenResponse($responseBody)\n    {\n        return $this-&gt;_parseToken($responseBody);\n    }\n\n    /**\n     * Parses the request token response and returns a TokenInterface.\n     *\n     * @param string $responseBody\n     * @return TokenInterface\n     * @throws TokenResponseException\n     */\n    protected function parseRequestTokenResponse($responseBody)\n    {\n        $data = $this-&gt;_parseResponseBody($responseBody);\n        if (isset($data['oauth_verifier'])) {\n            $this-&gt;_oauthVerifier = $data['oauth_verifier'];\n        }\n        return $this-&gt;_parseToken($responseBody);\n    }\n\n    /**\n     * Parse response body and create oAuth token object based on parameters provided.\n     *\n     * @param string $responseBody\n     * @return StdOAuth1Token\n     * @throws TokenResponseException\n     */\n    protected function _parseToken($responseBody)\n    {\n        $data = $this-&gt;_parseResponseBody($responseBody);\n        $token = new StdOAuth1Token();\n        $token-&gt;setRequestToken($data['oauth_token']);\n        $token-&gt;setRequestTokenSecret($data['oauth_token_secret']);\n        $token-&gt;setAccessToken($data['oauth_token']);\n        $token-&gt;setAccessTokenSecret($data['oauth_token_secret']);\n        $token-&gt;setEndOfLife(StdOAuth1Token::EOL_NEVER_EXPIRES);\n        unset($data['oauth_token'], $data['oauth_token_secret']);\n        $token-&gt;setExtraParams($data);\n        return $token;\n    }\n\n    /**\n     * Parse response body and return data in array.\n     *\n     * @param string $responseBody\n     * @return array\n     * @throws \\OAuth\\Common\\Http\\Exception\\TokenResponseException\n     */\n    protected function _parseResponseBody($responseBody)\n    {\n        if (!is_string($responseBody)) {\n            throw new TokenResponseException(\"Response body is expected to be a string.\");\n        }\n        parse_str($responseBody, $data);\n        if (null === $data || !is_array($data)) {\n            throw new TokenResponseException('Unable to parse response.');\n        } elseif (isset($data['error'])) {\n            throw new TokenResponseException(\"Error occurred: '{$data['error']}'\");\n        }\n        return $data;\n    }\n\n    /**\n     * @override to fix since parent implementation from lib not sending the oauth_verifier when requesting access token\n     * Builds the authorization header for an authenticated API request\n     *\n     * @param string $method\n     * @param UriInterface $uri the uri the request is headed\n     * @param \\OAuth\\OAuth1\\Token\\TokenInterface $token\n     * @param $bodyParams array\n     * @return string\n     */\n    protected function buildAuthorizationHeaderForAPIRequest(\n        $method,\n        UriInterface $uri,\n        TokenInterface $token,\n        $bodyParams = null\n    ) {\n        $this-&gt;signature-&gt;setTokenSecret($token-&gt;getAccessTokenSecret());\n        $parameters = $this-&gt;getBasicAuthorizationHeaderInfo();\n        if (isset($parameters['oauth_callback'])) {\n            unset($parameters['oauth_callback']);\n        }\n\n        $parameters = array_merge($parameters, ['oauth_token' =&gt; $token-&gt;getAccessToken()]);\n        $parameters = array_merge($parameters, $bodyParams);\n        $parameters['oauth_signature'] = $this-&gt;signature-&gt;getSignature($uri, $parameters, $method);\n\n        $authorizationHeader = 'OAuth ';\n        $delimiter = '';\n\n        foreach ($parameters as $key =&gt; $value) {\n            $authorizationHeader .= $delimiter . rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n            $delimiter = ', ';\n        }\n\n        return $authorizationHeader;\n    }\n}\n\n\nRelated topics\n\nCreate an integration\n\nOAuth error codes\n\nConstruct a request\n\nConfigure services as web APIs\n",
      "url": "/guides/v2.0/get-started/authentication/gs-authentication-oauth.html"
    }
    ,
  
    "guides-v2-0-get-started-authentication-gs-authentication-session-html": {
      "title": "Session-based authentication",
      "content": "As a customer, you log in to the Magento storefront with your customer credentials. As an admin, you log in to the Magento Admin with your admin credentials.\n\nThe Magento web API framework uses your logged-in session information to verify your identity and authorize access to the requested resource.\n\nCustomers can access resources that are configured with anonymous or self  permission in the webapi.xml configuration file.\n\nAdmins can access resources that are assigned to their Magento Admin profile.\n\n\n  The Magento web API framework enables guest users to access resources that are configured with anonymous permission. Any user that the framework cannot authenticate through existing authentication mechanisms is considered a guest user.\n\n\nFor example, if a customer is logged in to the Magento storefront and the JavaScript widget invokes the self API, details for the logged-in customer are fetched:\n\nGET /rest/V1/customers/me\n\nSimilarly, if an admin is logged in to the Magento Admin\nand the JavaScript widget Magento_Customer::group API, details for the logged-in admin are fetched.\nThe web API framework establishes the identity of the admin user based on logged-in session information and authorizes access to the Magento_Customer::group resource.\n\n\nThe session based authentication functionality is restricted to only allow for AJAX calls and not direct browser requests due to security vulnerabilities. A developer can create a custom storefront widget that can issue requests without additional authentication steps.\n\n\nRelated topic\n\nConfigure services as web APIs\n",
      "url": "/guides/v2.0/get-started/authentication/gs-authentication-session.html"
    }
    ,
  
    "guides-v2-0-get-started-authentication-gs-authentication-token-html": {
      "title": "Token-based authentication",
      "content": "To make a web API call from a client such as a mobile application, you must supply an access token on the call. The token acts like an electronic key that lets you access the API.\n\nMagento issues the following types of access tokens:\n\n\n  \n    \n      Token type\n      Description\n      Default lifetime\n    \n  \n  \n    \n      Integration\n      The merchant determines which Magento resources the integration has access to.\n      Indefinite. It lasts until it is manually revoked.\n    \n    \n      Admin\n      The merchant determines which Magento resources an admin user has access to.\n      4 hours\n    \n    \n      Customer\n      Magento grants access to resources with the anonymous or self permission. Merchants cannot edit these settings.\n      1 hour\n    \n  \n\n\nIntegration tokens\n\nWhen a merchant creates and activates an integration, Magento generates a consumer key, consumer secret, access token, and access token secret. All of these entities are used for OAuth-based authentication, but token-based authentication requires only the access token.\n\nUse the following steps to generate an access token:\n\n\n  Log in to Admin and click System &gt; Integrations to display the Integrations page.\n  Click Add New Integration to display the New Integration page.\n  Enter a unique name for the integration in the Name field. Then enter your admin password in the Your Password field. Leave all other fields blank.\n  Click the API tab. Select the Magento resources the integration can access. You can select all resources, or select a custom list.\n  Click Save to save your changes and return to the Integrations page.\n  Click the Activate link in the grid that corresponds to the newly-created integration.\n  Click Allow . A dialog similar to the following displays:\n\n\n\nThe access token can be used in all calls made on behalf of the integration.\n\nAdmin and customer access tokens\n\nMagento provides a separate token service for administrators and customers. When you request a token from one of these services, the service returns a unique access token in exchange for the user name and password for a Magento account.\n\nThe Magento web API framework allows guest users to access resources that are configured with the permission level of anonymous. Guest users are users who the framework cannot authenticate through existing authentication mechanisms. As a guest user, you do not need to, but you can, specify a token in a web API call for a resource with anonymous permission. Restricting access to anonymous web APIs contains a list of APIs that do not require a token.\n\nUse the following calls to get an authentication token:\n\n\n  \n    \n      Request\n      REST\n      SOAP\n    \n  \n  \n    \n      Get an admin token\n      POST /V1/integration/admin/token\n      integrationAdminTokenServiceV1\n    \n    \n      Get a customer token\n      POST /V1/integration/customer/token\n      integrationCustomerTokenServiceV1\n    \n  \n\n\nFor most web API calls, you supply this token in the Authorization request header with the Bearer HTTP authorization scheme to prove your identity. By default, an admin token is valid for 4 hours, while a customer token is valid for 1 hour. You can change these values from Admin by selecting Configuration &gt; Services &gt; OAuth &gt; Access Token Expiration.\n\nA cron job that runs hourly removes all expired tokens.\n\nRequest a token\n\nA access token request contains three basic elements:\n\n\n   \n      Component\n      Specifies\n   \n   \n      Endpoint\n      \n         A combination of the server that fulfills the request, the web service, and the resource against which the request is being made.\n         For example, in the POST https://magento.host/index.php/rest/V1/integration/customer/token endpoint:\n         The server is magento.host/index.php/\n         the web service is rest\n          the resource is /V1/integration/customer/token.&lt;/p&gt;\n      \n   \n   \n      Content&nbsp;type\n      \n         The content type of the request body. Set this value to either \"Content-Type:application/json\" or \"Content-Type:application/xml\".\n      \n   \n   \n      Credentials\n      \n         The user name and password for a Magento account.\n         To specify these credentials in a JSON request body, include '{\"username\":\"&lt;USER-NAME&gt;\", \"password\":\"&lt;PASSWORD&gt;\"}' in the call.\n          To specify these credentials in XML, include &lt;login&gt;&lt;username&gt;customer1@example.com&lt;/username&gt;&lt;password&gt;customer1pw&lt;/password&gt;&lt;/login&gt; in the call.\n      \n   \n\n\nExamples\n\nThe following image shows a token request for the admin account using a REST client:\n\n\n\nThe following example uses the curl command to request a token for a customer account:\n\ncurl -X POST \"https://magento.host/index.php/rest/V1/integration/customer/token\" \\\n     -H \"Content-Type:application/json\" \\\n     -d \"{\"username\":\"customer1@example.com\", \"password\":\"customer1pw\"}\"\n\n\nThe following example makes the same request with XML for a customer account token:\n\ncurl -X POST \"http://magento.vg/index.php/rest/V1/integration/customer/token\" \\\n     -H \"Content-Type:application/xml\"  \\\n     -d \"&lt;login&gt;&lt;username&gt;customer1@example.com&lt;/username&gt;&lt;password&gt;customer1pw&lt;/password&gt;&lt;/login&gt;\"\n\n\nFor more information about the curl command, see Use cURL to run the request\n\nAuthentication token response\n\nA successful request returns a response body with the token, as follows:\n\nasdf3hjklp5iuytre\n\nUse the token in a Web API request\n\nAny web API call that accesses a resource that requires a permission level higher than anonymous must contain the authentication token in the header To do this, specify a HTTP header in the following format:\n\nAuthorization: Bearer &lt;authentication token&gt;\n\nAdmin access\nAdmins can access any resources for which they are authorized.\n\nFor example, to make a web API call with an admin token:\n\ncurl -X GET \"http://magento.ll/index.php/rest/V1/customers/2\" -H \"Authorization: Bearer vbnf3hjklp5iuytre\"\n\nCustomer access\nCustomers can access only resources with self permissions.\n\nFor example, to make a web API call with a customer token:\ncurl -X GET \"http://magento.ll/index.php/rest/V1/customers/me\" -H \"Authorization: Bearer asdf3hjklp5iuytre\"\n\nRelated topics\nConstruct a request\n\nConfigure services as web APIs\n\nRestricting access to anonymous web APIs\n",
      "url": "/guides/v2.0/get-started/authentication/gs-authentication-token.html"
    }
    ,
  
    "guides-v2-0-get-started-authentication-gs-authentication-html": {
      "title": "Authentication",
      "content": "Web API authentication overview\n\nMagento allows developers to define web API resources and their permissions in a configuration file webapi.xml.\nHere are more details on exposing services as Web APIs.\n\nBefore you can make web API calls, you must authenticate your identity and have necessary permissions (authorization) to access the API resource. Authentication allows Magento to identify the caller’s user type. Based on the user’s (administrator, integration, customer or guest) access rights, API calls’ resource accessibility is determined.\n\nAccessible resources\n\nThe list of resources that you can access depends on your user type. All customers have the same permissions, and as a result the same resources accessible. The preceding statement is true for guest users as well.\nEach administrator or integration user can have a unique set of permissions which is configured in the Magento Admin.\nPermissions required to access particular resource are configured in the webapi.xml file. This table lists the resources that each user type can access:\n\n\n  \n    \n      User type\n      Accessible resources (defined in webapi.xml)\n    \n    \n      Administrator or Integration\n      Resources for which administrators or integrators are authorized. For example, if administrators are authorized for the Magento_Customer::group resource, they can make a GET /V1/customerGroups/:id call.\n    \n    \n      Customer\n      Resources with anonymous or self permission.\n    \n    \n      Guest user\n      Resources with anonymous permission.\n    \n  \n\n\nRelation between acl.xml and webapi.xml\nThe acl.xml file defines the access control list (ACL) for a given module. It defines available set of permissions to access the resources.\nacl.xml files across all Magento modules are consolidated to build an ACL tree which is used to select allowed Admin role resources or third party Integration’s access (System &gt; Extension &gt; Integration &gt; Add New Integration &gt; Available APIs).\n\nSample customer acl.xml\nFor example, account management, customer configuration, and customer group resource permissions are defined in the Customer module’s acl.xml.\n\nWhen a developer creates the Web API configuration file (webapi.xml), the permissions defined in acl.xml are referenced to create access rights for each API resource.\n\nSample (truncated) customer webapi.xml\n\n&lt;routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi:etc/webapi.xsd\"&gt;\n    &lt;!-- Customer Group --&gt;\n    &lt;route url=\"/V1/customerGroups/:id\" method=\"GET\"&gt;\n        &lt;service class=\"Magento\\Customer\\Api\\GroupRepositoryInterface\" method=\"getById\"/&gt;\n        &lt;resources&gt;\n            &lt;resource ref=\"Magento_Customer::group\"/&gt;\n        &lt;/resources&gt;\n    &lt;/route&gt;\n............\n.......\n.....\n    &lt;!-- Customer Account --&gt;\n    &lt;route url=\"/V1/customers/:customerId\" method=\"GET\"&gt;\n        &lt;service class=\"Magento\\Customer\\Api\\CustomerRepositoryInterface\" method=\"getById\"/&gt;\n        &lt;resources&gt;\n            &lt;resource ref=\"Magento_Customer::customer\"/&gt;\n        &lt;/resources&gt;\n    &lt;/route&gt;\n    &lt;route url=\"/V1/customers\" method=\"POST\"&gt;\n        &lt;service class=\"Magento\\Customer\\Api\\AccountManagementInterface\" method=\"createAccount\"/&gt;\n        &lt;resources&gt;\n            &lt;resource ref=\"anonymous\"/&gt;\n        &lt;/resources&gt;\n    &lt;/route&gt;\n    &lt;route url=\"/V1/customers/:id\" method=\"PUT\"&gt;\n        &lt;service class=\"Magento\\Customer\\Api\\CustomerRepositoryInterface\" method=\"save\"/&gt;\n        &lt;resources&gt;\n            &lt;resource ref=\"Magento_Customer::manage\"/&gt;\n        &lt;/resources&gt;\n    &lt;/route&gt;\n    &lt;route url=\"/V1/customers/me\" method=\"PUT\"&gt;\n        &lt;service class=\"Magento\\Customer\\Api\\CustomerRepositoryInterface\" method=\"save\"/&gt;\n        &lt;resources&gt;\n            &lt;resource ref=\"self\"/&gt;\n        &lt;/resources&gt;\n        &lt;data&gt;\n            &lt;parameter name=\"customer.id\" force=\"true\"&gt;%customer_id%&lt;/parameter&gt;\n        &lt;/data&gt;\n    &lt;/route&gt;\n..........\n.....\n...\n\nFor example, in the preceding webapi.xml for the customerGroups resource, only a user with Magento_Customer::group authorization can GET /V1/customerGroups/:id. On the other hand, you can create a customer using POST /V1/customers anonymously (or by a guest).\n\nAuthorization is granted to either an administrator (or an integration) defined in the Magento Admin with the customer group selected as one of the resources in the ACL tree.\n\n\n  A guest or anonymous is a special permission that doesn’t need to be defined in acl.xml (and will not show up in the permissions tree in the Magento Admin). It just indicates that the current resource in webapi.xml can be accessed without the need for authentication.\n\n  Similarly, self is a special access used if you already have an authenticated session with the system. Self access enables a user to access resources they own. For example, GET /V1/customers/me fetches the logged-in customer’s details. This is typically useful for JavaScript-based widgets.\n\n\nWeb API clients and authentication methods\n\nYou use a client, such as a mobile application or an external batch job, to access Magento services using web APIs.\n\nEach type of client has a preferred authentication method. To authenticate, use the authentication method for your preferred client:\n\n\n   \n      Client\n      Authentication method and process\n   \n   \n      \n         Mobile application\n      \n      \n         Registered users use token-based authentication to make web API calls using a mobile application. The token acts like an electronic key that provides access to the API(s).\n         \n            \n               As a registered Magento user, you request a token from the Magento token service at the endpoint that is defined for your user type.\n            \n            \n               The token service returns a unique authentication token in exchange for a user name and password for a Magento account.\n            \n            \n               \n                  To prove your identity, specify this token in the Authorization request header on web API calls.\n               \n            \n         \n         \n      \n   \n   \n      \n         Third-party application\n      \n      \n         Third-party applications use OAuth-based authentication to access the web APIs.\n         \n            \n               The third-party Integration registers with Magento.\n            \n            \n               Merchants authorize extensions and applications to access or update store data.\n            \n         \n      \n   \n   \n      \n         JavaScript widget on the Magento storefront or Magento Admin\n      \n      \n         Registered users use session-based authentication to log in to the Magento storefront or Magento Admin.\n         A session is identified by a cookie and time out after a period of inactivity. Additionally, you can have a session as a guest user without logging in.\n         \n            \n               As a customer, you log in to the Magento storefront with your customer credentials. As an administrator, you log in to the Magento Magento Admin with your administrator credentials.\n            \n            \n               The Magento web API framework identifies you and controls access to the requested resource.\n               \n            \n         \n      \n   \n\n\nRelated topics\n\nProceed to the authentication method for your preferred client:\n\n\n  \n    Mobile application. Token-based authentication.\n  \n  \n    Third-party application. OAuth-based authentication.\n  \n  \n    JavaScript widget on the Magento Admin or storefront. Session-based authentication.\n  \n  \n    Extension attribute authentication\n  \n\n",
      "url": "/guides/v2.0/get-started/authentication/gs-authentication.html"
    }
    ,
  
    "guides-v2-0-get-started-gs-curl-html": {
      "title": "Use cURL to run the request",
      "content": "cURL is a command-line tool that lets you transmit and receive HTTP requests and\n   responses from the command line or a shell script. It is available for Linux distributions,\n   Mac OS X, and Windows.\n\n\nTo use cURL to run your REST web API call, use the cURL command syntax to construct the cURL command.\nTo create the endpoint in the call, append the REST URI that you constructed in Step 3. Construct a request to this URL:\nhttps://&lt;MAGENTO_HOST_OR_IP&gt;/&lt;MAGENTO_BASE_INSTALL_DIR&gt;/rest/\nTo pass the customer data object in the POST call payload, specify a JSON or XML request body on the call.\nFor a complete list of cURL command options, see curl.1 the man page.\nThe cURL examples in this guide\n   use the following command-line options:\n\n\n   \n      Option\n      Description\n   \n   \n      \n         \n            -d\n         \n      \n      \n         Sends the specified data in a POST request to the HTTP server. Use this option to send a JSON or XML request body to the server.\n      \n   \n   \n      \n         \n            -H\n         \n      \n      \n         Specifies an extra HTTP header in the request. Precede each header with the\n            -Hoption. You can specify any number of extra\n            headers.\n         \n         For a list of common headers used in Magento web API requests, see HTTP headers.\n      \n   \n   \n      \n         \n            -i\n         \n      \n      \n         Includes the HTTP header in the output.\n      \n   \n   \n      \n         \n            -s\n         \n      \n      \n         Specifies silent or quiet mode, which makes cURL mute. Progress and error messages\n            are suppressed.\n         \n      \n   \n   \n      \n         \n            -T\n         \n      \n      \n         Transfers the specified local file to the remote URL.\n      \n   \n   \n      \n         \n            -X\n         \n      \n      \n         Specifies the request method to use when communicating with the HTTP server. The\n            specified request method is used instead of the default GET method.\n         \n      \n   \n\n\nNext step\n\n   Status codes and responses\n\n",
      "url": "/guides/v2.0/get-started/gs-curl.html"
    }
    ,
  
    "guides-v2-0-get-started-gs-web-api-request-html": {
      "title": "Construct a request",
      "content": "To configure a web API, developers define some of the elements of each API call in the &lt;module root dir&gt;/vendor/&lt;vendor-name&gt;/&lt;module-name&gt;/etc/webapi.xml file, where &lt;vendor-name&gt; is your vendor name (for example, magento) and &lt;module-name&gt; is your module name (which exactly matches its definition in composer.json). For example, the web API for the Customer service is defined in the &lt;your Magento install dir&gt;/vendor/magento/module-customer/etc/webapi.xml configuration file. Service data interfaces and builders define the required and optional parameters and the return values for the API calls.\n\nOverview\n\nEach Magento web API call contains of a combination of these elements:\n\n   HTTP verb\n   Endpoint\n   HTTP headers\n   Call payload\n\nThe following table and the sections that follow the table describe these API call elements:\n\n   \n      Element\n      Specifies\n   \n   \n      \n         HTTP&nbsp;verb\n      \n      \n         The action to perform against the endpoint.\n      \n   \n   \n      \n         Endpoint\n      \n      \n         A combination of the server that fulfills a request, the web service, and the resource against which the request is being made.\n      \n   \n   \n      \n         HTTP&nbsp;headers\n      \n      \n         The authentication token, the call request and response formats,\n            and other information.\n         \n      \n   \n   \n      \n         Call&nbsp;payload\n      \n      \n         A set of input parameters and attributes that you supply with the request.\n            API operations have both\n            required and\n            optional inputs. You specify input parameters in the URI and input attributes in a request body. You can specify a JSON- or XML-formatted request body.\n         \n      \n   \n\n\nHTTP verb\nSpecify one of these HTTP verbs in the request:\n\n   GET.\n   Requests transfer of a current representation of the\n      target resource. If you omit the verb, GET is the default.\n   \n   PUT.\n   Requests that the state of the target resource be\n      created or replaced with the state defined by the representation\n      enclosed in the request message payload.\n   \n   POST.\n   Requests that the origin server accept the\n      representation enclosed in the request as data to be processed by the\n      target resource.\n   \n   DELETE.\n   Requests that the origin server delete the target\n      resource.\n   \n\n\nEndpoint\nAn endpoint is a combination of the server that fulfills a request, the web service, the resource against which the request is being made, and any template parameters.\n\nFor example, in the http://magento.ll/index.php/rest/V1/customerGroups/:id endpoint, the server is magento.ll/index.php/, the web service is rest, the resource is /V1/customerGroups, and the template parameter is id.\n\nHTTP headers\n\nTo specify an HTTP header in a cURL command, use the -H option.\nSpecify one or more of the following HTTP headers in your web API calls:\n\n   \n      HTTP header\n      Description\n      Syntax\n   \n   \n      \n         Authorization\n      \n      Required. Specifies the authentication token that proves you as the owner of a Magento\n         account. You specify the token in the Authorization request header with the Bearer HTTP authorization scheme.\n         \n      \n      Authorization:&nbsp;Bearer&nbsp;&lt;TOKEN&gt;\n      Where &lt;TOKEN&gt; is the authentication token returned by the Magento token service.\nSee Authentication.\n   \n   \n      Accept\n      \n      Optional. Specifies the format of the response body. Default is JSON.\n      \n      Accept: application/&lt;FORMAT&gt;\n      Where\n         &lt;FORMAT&gt; is either\n         JSONor\n         XML.\n         If you omit this header, the response is returned in JSON format.\n   \n   \n      \n         \n            Content-Type\n         \n      \n      Required for operations with a request body. Specifies the format of the request body.\n      \n     Content-Type:application/&lt;FORMAT&gt;\n     Where\n         &lt;FORMAT&gt;is either\n         JSONor\n         XML.\n      \n   \n\n\nCall payload\nThe call payload is set of input parameters and attributes that you supply with the request. API operations have both required and optional inputs.\n\nYou specify input parameters in the URI. For example, in the GET/V1/customers/:customerId URI, you must specify the customerId template parameter. This parameter filters the response by the specified customer ID.\n\nYou specify input attributes in a JSON- or XML-formatted request body. For example, in the POST /V1/customers call, you must specify a request body like this:\n\n{\n    \"customers\": {\n        \"customer\": {\n            \"email\": \"user@example.com\",\n            \"firstname\": \"John\",\n            \"lastname\": \"Doe\"\n        },\n        \"addresses\": [\n            {\n                \"defaultShipping\": true,\n                \"defaultBilling\": true,\n                \"firstname\": \"John\",\n                \"lastname\": \"Doe\",\n                \"region\": {\n                    \"regionCode\": \"CA\",\n                    \"region\": \"California\",\n                    \"regionId\": 12\n                },\n                \"postcode\": \"90001\",\n                \"street\": [\"Zoe Ave\"],\n                \"city\": \"Los Angeles\",\n                \"telephone\": \"555-000-00-00\",\n                \"countryId\": \"US\"\n            }\n        ]\n    }\n}\n\nThis JSON-formatted request body includes a customer object with the customer email, first name, and last name, and customer address information. The information in this request body is used to populate the new customer account.\n\nConstruct a request\nThis example shows you how to construct a REST web API call to create an account.\n\nOpen the Magento/Customer/etc/webapi.xml configuration file.\nFind the route element that defines the createAccount call:\n\n&lt;route url=\"/V1/customers\" method=\"POST\"&gt;\n    &lt;service class=\"Magento\\Customer\\Api\\AccountManagementInterface\" method=\"createAccount\"/&gt;\n    &lt;resources&gt;\n        &lt;resource ref=\"anonymous\"/&gt;\n    &lt;/resources&gt;\n&lt;/route&gt;\n\n\nUse the method and url values on the route element to construct the URI.In this example, the URI is:\nPOST /V1/customers\nUse the class attribute on the service element to identify the service interface.\nIn this example, the service interface is the AccountManagementInterface PHP file.\nOpen the AccountManagementInterface.php file and find the createAccount method, as follows:\npublic function createAccount(\n        \\Magento\\Customer\\Api\\Data\\CustomerInterface $customer,\n        $password = null,\n        $redirectUrl = ''\n    );\nThe createAccount call requires a customer data object. The password and redirectUrl values are optional. The default password value is null and the default redirectUrl value is blank.\n\nTo pass the customer data object in the POST call payload, specify a JSON or XML request body on the call.\n\n\nCustomers Search API request example\nThe following example builds a Customers Search request based on search criteria. It returns a list of customers that match given search criteria.\n\nPrepare Authorization, Accept and Content-Type headers to be passed to a request object. Use the Authorization token returned by the Magento token service.\n\n$token = 'token';\n$httpHeaders = new \\Zend\\Http\\Headers();\n$httpHeaders-&gt;addHeaders([\n   'Authorization' =&gt; 'Bearer ' . $token,\n   'Accept' =&gt; 'application/json',\n   'Content-Type' =&gt; 'application/json'\n]);\n\nOpen the Magento/Customer/etc/webapi.xml configuration file and find the CustomerRepositoryInterface interface with the getList method.\nSet the headers, URI and method to a request object. Use URI /V1/customers/search and method GET values. Also, the searchCriteria parameter should be used to complete the Customer Search query. See searchCriteria usage.\n\n$request = new \\Zend\\Http\\Request();\n$request-&gt;setHeaders($httpHeaders);\n$request-&gt;setUri('http://magento.ll/rest/V1/customers/search');\n$request-&gt;setMethod(\\Zend\\Http\\Request::METHOD_GET);\n\n$params = new \\Zend\\Stdlib\\Parameters([\n   'searchCriteria' =&gt; '*'\n]);\n$request-&gt;setQuery($params);\n\nPrepare a HTTP Curl client object and pass the request object to Client::send() method.\n\n$client = new \\Zend\\Http\\Client();\n$options = [\n   'adapter'   =&gt; 'Zend\\Http\\Client\\Adapter\\Curl',\n   'curloptions' =&gt; [CURLOPT_FOLLOWLOCATION =&gt; true],\n   'maxredirects' =&gt; 0,\n   'timeout' =&gt; 30\n];\n$client-&gt;setOptions($options);\n\n$response = $client-&gt;send($request);\n\nThis request returns a list of all customers in JSON format. You can also specify XML format by changing Accept header of the request.\n\n\nNext step\nRun the web API call through a cURL command or a REST client.\n",
      "url": "/guides/v2.0/get-started/gs-web-api-request.html"
    }
    ,
  
    "guides-v2-0-get-started-gs-web-api-response-html": {
      "title": "Status codes and responses",
      "content": "REST responses\n\nEach web API call returns a HTTP status code and a response payload. When an error occcurs, the response body also returns an error message.\n\nHTTP status codes\n\nEach web API call returns an HTTP status code that reflects the result of a request:\n\n\n  \n    \n      HTTP code\n      Meaning\n      Description\n    \n  \n  \n    \n      200\n      Success\n      The framework returns HTTP 200 to the caller upon success.\n    \n    \n      400\n      Bad Request\n      If service implementation throws either Magento_Service_Exception or its derivative, the framework returns a HTTP 400 with a error response including the service-specific error code and message. This error code could indicate a problem such as a missing required parameter or the supplied data didn’t pass validation.\n    \n    \n      401\n      Unauthorized\n      The caller was not authorized to perform the request. For example, the request included an invalid token or a user with customer permissions attempted to access an object that requires administrator permissions.\n    \n    \n      403\n      Forbidden\n      Access is not allowed for reasons that are not covered by error code 401.\n    \n    \n      404\n      Not found\n      The specified REST endpoint does not exist. The caller can try again.\n    \n    \n      405\n      Not allowed\n      A request was made of a resource using a method that is not supported by that resource. For example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.\n    \n    \n      406\n      Not acceptable\n      The requested resource is only capable of generating content that is not acceptable according to the Accept headers sent in the request.\n    \n    \n      500\n      System Errors\n      If service implementation throws any other exception like network errors, database communication, framework returns HTTP 500.\n    \n  \n\n\nResponse payload\n\nPOST, PUT, and GET web API calls return a response payload. This payload is a JSON- or XML-formatted response body. The Accept: application/&lt;FORMAT&gt; header in the request determines the format of the response body, where FORMAT is either json or xml.\n\nA successful DELETE call returns true. An unsuccessful DELETE call returns a payload similar to the other calls.\n\nThe response payload depends on the call.\nFor example, a GET /V1/customers/:customerId call returns the following payload:\n\n{\n    \"customers\": {\n        \"customer\": {\n            \"email\": \"user@example.com\",\n            \"firstname\": \"John\",\n            \"lastname\": \"Doe\"\n        },\n        \"addresses\": [\n            {\n                \"defaultShipping\": true,\n                \"defaultBilling\": true,\n                \"firstname\": \"John\",\n                \"lastname\": \"Doe\",\n                \"region\": {\n                    \"regionCode\": \"CA\",\n                    \"region\": \"California\",\n                    \"regionId\": 12\n                },\n                \"postcode\": \"90001\",\n                \"street\": [\"Zoe Ave\"],\n                \"city\": \"Los Angeles\",\n                \"telephone\": \"555-000-00-00\",\n                \"countryId\": \"US\"\n            }\n        ]\n    }\n}\n\nThis JSON-formatted response body includes a customer object with the customer email, first name, and last name, and customer address information. The information in this response body shows account information for the specified customer.\n\nError format\nWhen an error occurs, the response body contains an error code, error message, and optional parameters.\n\n\n  \n    \n      Part\n      Description\n    \n  \n  \n    \n      code\n      The status code representing the error.\n    \n    \n      message\n      The message explaining the error.\n    \n    \n      parameters\n      Optional. An array of attributes used to generate a different and/or localized error message for the client.\n    \n  \n\n\nAs an example, Magento returns a code of 400 and the following message when an invalid sku value is specified in the call PUT V1/products/:sku.\n\n{\n  \"message\": \"Invalid product data: %1\",\n  \"parameters\": [\n    \"Invalid attribute set entity type\"\n  ]\n}\n\n",
      "url": "/guides/v2.0/get-started/gs-web-api-response.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-gulp-sass-html": {
      "title": "Use Sass and Gulp preprocessor",
      "content": "By default, Magento uses Less for themes styling. But you can use other stylesheet languages that can be compiled (processed) to CSS. For example, Sass is a popular alternative.\n\nIf you decide not to use Less and default Magento UI library, you need to create your own theme from scratch and use an alternative preprocessor. You can write a custom pre-processor or use an existing one. This topic describes how to configure and use Gulp preprocessor for Sass.\n\nFor details about adding a custom preprocessor, see the Add custom CSS preprocessor topic.\n\nInstall Gulp and its Sass preprocessor\n\n\n  \n    In the root of theme directory, create an empty package.json and copy-paste the following code:\n\n     {\n   \"author\": \"Magento Commerce Inc.\",\n   \"description\": \"Magento node modules dependencies for local development\",\n   \"version\": \"1.0.0\",\n   \"main\": \"gulpfile.js\",\n   \"dependencies\": {\n     \"path\": \"^0.12.7\"\n   },\n   \"devDependencies\": {\n     \"gulp\": \"^3.9.1\",\n     \"gulp-notify\": \"^3.0.0\",\n     \"gulp-plumber\": \"^1.1.0\",\n     \"gulp-sass\": \"^3.1.0\"\n   },\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n   }\n }\n    \n  \n  \n    Install Gulp by running the following command in a command prompt:\n\n    npm install --save gulp-install\n  \n  \n    Add Gulp Sass preprocessor by running the following command:\n\n    npm install gulp-sass\n  \n\n\nCreate a theme and add Sass styles\n\n\n  \n    Create a theme as described in Create a new storefront theme.\n  \n  \n    Set up a Gulp task for Sass compilation. For this, put the file with the task code   to the root of your theme directory (app/code/frontend/&lt;Vendor&gt;/&lt;theme&gt;). You can use the following code sample (no changes needed, create an empty app/code/frontend/&lt;Vendor&gt;/&lt;theme&gt;/gulp.js and copy-paste this code):\n package.json:\n\n    \n var gulp         = require('gulp'),\n     sass         = require('gulp-sass'),\n     plumber      = require('gulp-plumber'),\n     notify       = require('gulp-notify');\n\n var config = {\n     src           : './web/css/*.scss',\n     dest          : './web/css/'\n };\n\n // Error message\n var onError = function (err) {\n     notify.onError({\n         title   : 'Gulp',\n         subtitle: 'Failure!',\n         message : 'Error: &lt;%= error.message %&gt;',\n         sound   : 'Beep'\n     })(err);\n\n     this.emit('end');\n };\n\n // Compile CSS\n gulp.task('styles', function () {\n \tvar stream = gulp\n \t    .src([config.src])\n \t    .pipe(plumber({errorHandler: onError}))\n \t    .pipe(sass().on('error', sass.logError));\n\n \treturn stream\n \t    .pipe(gulp.dest('./web/css/'));\n });\n    \n    This task uses styles.scss stored in app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/web/css/ as source of SASS. And it stores the generated CSS in styles.css in the app/code/frontend/&lt;Vendor&gt;/&lt;theme&gt; directory.\n  \n  \n    Put the source styles.scss file to the app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/web/css/ directory.\n  \n  \n    For your theme to start using the generated CSS, declare the resulting CSS file in the default_head_blocks.xml in the app/design/frontend/&lt;Vendor&gt;/&lt;theme/Magento_Theme/layout/ directory. You can create an empty default_head_blocks.xml file and copy the following code:\n\n     &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n \t&lt;head&gt;\n \t    &lt;css src=\"css/styles.css\"/&gt;\n \t&lt;/head&gt;\n &lt;/page&gt;\n    \n  \n  \n    To generate CSS, run\n gulp styles\n  \n\n\nUsing the @import directive in Sass\n\nIn the source .scss files you can use the @import directive, to import other .scss files. You can put the module-related stylesheets in the module directories in the theme, and then include them in the main .scss file. For example, if you create a _catalogstls.scss file for styles of the Magento_Catalog module and put it in app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/Magento_Catalog/styles , you can import it using the following notation:\n\n@import '../Magento_Theme/styles/module\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/gulp-sass.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-headings-and-organization-headings-and-organization-html": {
      "title": "Admin Headings and Organization",
      "content": "Use consistent heading structure and content prioritization to create a hierarchy for users to easily navigate Magento Admin.\n\nHeadings\n\nHeadings, or page titles, should concisely represent their content or purpose. More rules include the following:\n\n\n  \n    Use title case correctly. See Title Case standards in Capitalization.\n  \n  \n    Exactly or closely match a link label that directs users to the page.\n  \n  \n    Utilize keywords when possible and appropriate, also indicating additional navigation cues for users.\n  \n  \n    Use simple, precise language and, as a guideline, stay within 50 characters, maximum.\n  \n  \n    Use no punctuation at the end of a heading except for a question mark, quotation mark, ellipsis, and closed parenthesis.\n  \n\n\nUI Content Organization\n\nConsistency in content across UI elements helps users engage with Magento software. Uniformity sets expectations without forcing them to think about how why the same UI pattern is dissimilar in one place vs. another.\n\nAreas to focus on consistency include:\n\n\n  \n    Labels in data tables, buttons, and links\n  \n  \n    Page titles and headings – use their exact title and header names in link labels\n  \n  \n    Errors and messages\n  \n  \n    Instructional text\n  \n  \n    Task-flow steps\n  \n  \n    Support, help, and online feedback text\n  \n\n",
      "url": "/guides/v2.0/design-styleguide/headings-and-organization/headings-and-organization.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-get-ftp-html": {
      "title": "Transfer the Magento software to your hosted system",
      "content": "Magento installation overview\n\n  Download the software to your computer.\n  Set up the File Transfer Protocol (FTP) to your hosted system.\n  Upload the archive to your system using FTP.\n  Extract the archive.\n\n\n\n\n  The following table discusses where to get the Magento software. We provide the following downloads:\n\n  \n    Magento Open Source or Magento Commerce software only\n    Magento Open Source or Magento Commerce software with sample data (designed to help you learn Magento faster)\n  \n\n  These packages are easy to get and install. You don’t need to use Composer, all you need to do is to upload a package to your Magento server or hosted platform, unpack it, and run the web-based Setup Wizard.\n\n  Archives are available in the following formats: .zip, .tar.bz2, .tar.gz\n\n  \n\t\n\t\n\n \n\tMagento edition\n\tInstall package location\n\n \n\tMagento Open Source\n\twww.magento.com/download\n\t\tChoose either the software or the software and sample data:\n\t\tMagento-CE-&lt;version&gt;.* (without sample data)\n\t\t\tMagento-CE-&lt;version&gt;+Samples.* (with sample data)\n\t\t\t&lt;version/&gt; is the three-digit release number (for example, 2.0.7, 2.1.0, and so on.)\n\n \n\tMagento Commerce\n\tUse the following steps:\n\tGo to www.magento.com\n\tIn the top horizontal navigation bar, click My Account.\n\tLog in with your Magento user name and password.\n\tIn the left navigation bar, click Downloads.\n\tIn the right pane, click Magento Enterprise Edition 2.X &gt; Full Release or Magento Enterprise Edition 2.X &gt; Full Release + Sample Data for the software.\n\tFollow the instructions on your screen to complete the Magento Commerce download:\n\t\tMagento-EE-&lt;version&gt;.* (without sample data)\n\t\t\tMagento-EE-&lt;version&gt;+Samples.* (with sample data)\n\n\t\n\tTransfer the installation package to your development system.\n\n\n\n\n  Set up FTP and transfer the Magento archive\n  FTP is a way to transfer files from your computer to your managed server. To transfer the Magento archive, you need an FTP account that has access to the managed server’s public_html directory. You might already have an account. If not, consult your shared hosting provider’s documentation or technical support for more information.\n\n  Transfer the Magento archive to your hosted system\n  To transfer the Magento archive:\n\n  \n    Start your FTP client software.\n    \n      Create a connection to your managed server.\n\n      Follow the prompts on your screen or consult the documentation provided with your FTP software for more information.\n    \n    \n      After you log in to your managed server, browse to locate the Magento archive on your local system.\n\n      On the remote system, browse to locate the public_html directory.\n\n      The following figure shows an example.\n\n      \n    \n    \n      Transfer the archive from your local system to the public_html directory.\n\n      On some FTP client software, you do this by dragging and dropping.\n    \n    Wait while the transfer completes.\n  \n\n  Extract the archive\n  After transferring the Magento archive to your hosted system, you can use the cPanel to extract it, after which you can run the Magento Setup Wizard to install the software.\n\n  To extract the archive:\n\n  \n    If necessary, log in to the cPanel.\n    \n      In the Files section, click File Manager.\n    \n    \n      Click Web Root.\n\n      \n    \n    \n      Click Go.\n\n      The File Manager displays in a separate browser window or tab page.\n    \n    Right-click the Magento archive in the public_html directory.\n    \n      From the pop-up menu, click Extract as the following figure shows.\n\n      \n    \n    Click Extract Files.\n    \n      Wait while the archive extracts.\n\n      The following figure shows an example of an extracted archive.\n\n      \n    \n  \n\n  Next step\n  Install the Magento software\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_get-ftp.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-html": {
      "title": "Install the Magento software",
      "content": "\n\n  This section discusses how to install the Magento software using a web-based wizard interface. To install Magento from the command line, see Install Magento software using the command line.\n\n  Before you start your installation\n\n  Before you begin, make sure that:\n\n  \n    Your system meets the requirements discussed in Magento System Requirements.\n    You completed all prerequisite tasks discussed in Prerequisites.\n    After you log in to the Magento server, switch to the Magento file system owner.\n  \n\n  Enabling and disabling modules\n  The Setup Wizard enables you to enable or disable modules before you install the Magento software. Before you do so, make sure you understand the following.\n\n  Magento enables you to enable or disable currently available modules; in other words, any Magento-provided module or any third-party module that is currently available.\n  Certain modules have dependencies on other modules, in which case you might not be able to enable or disable a module because it has dependencies on other modules. \n  In addition, there might be conflicting modules that cannot both be enabled at the same time.\n  Examples:\n  Module A depends on Module B. You cannot disable Module B unless you first disable Module A.\n\tModule A depends on Module B, both of which are disabled. You must enable module B before you can enable module A.\n\tModule A conflicts with Module B. You can disable Module A and Module B, or you can disable either module but you cannot enable Module A and Module B at the same time.\n\n  Dependencies are declared in the require field in Magento's composer.json file for each module. Conflicts are declared in the conflict field in modules' composer.json files. We use that information to build a dependency graph:\n  A-&gt;B means module A depends on module B.\n\tA dependency chain is the path from a module to another one. For example, if module A depends on module B and module B depends on module C, then the dependency chain is A-&gt;B-&gt;C.\n  If you attempt to enable or disable a module that depends on other modules, the dependency graph displays in the error message.\n  \n\n  It's possible that module A's composer.json declares a conflict with module B but not vice versa.\n\n\n  Command line module enable or disable subcommand only: To force a module to be enabled or disabled regardless of its dependencies, use the optional --force argument.\n\n  \n    Using --force can disable your Magento store and cause problems accessing the Magento Admin.\n\n\n  Running the Setup Wizard\n  The Setup Wizard is a multi-page wizard that enables you to go back and forward one page at a time. You cannot skip pages, and you must enter all required information on every page before you can proceed to the next page.\n\n  In the event of errors, you can run the installer again or you can return to a previous page to fix errors on that page.\n\n  Getting started\n  To install the Magento software using the Setup Wizard:\n\n  \n    \n      Start a web browser.\n    \n    \n      Enter the following URL in the browser’s address or location bar:\n\n      http://&lt;Magento host or IP&gt;/&lt;path to Magento root&gt;/setup\n      \n\n      For example, if the Magento server’s IP address is 192.0.2.10 and you installed Magento 2 in the magento2 directory relative to the web server’s docroot, and you did not configure a Virtual Host, enter:\n\n      http://192.0.2.10/magento2/setup\n      \n    \n    \n      On the initial page, click Agree and Set Up Magento.\n    \n    \n      Continue with the following topics in the order presented to complete the installation.\n    \n  \n\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-1-readiness-html": {
      "title": "Step 1. Readiness check",
      "content": "\n\n  Step 1: Readiness Check\n\n  \n    \n      Click Start Readiness Check.\n\n      If any errors display, you must resolve them before you continue.\n\n      Click More detail if available to see more information about each check.\n    \n    \n      Click Next.\n    \n  \n\n  Next step\n  Step 2. Add a database\n\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_1_readiness.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-2-db-html": {
      "title": "Step 2. Add a database",
      "content": "\n\n  Step 2: Add a Database\n\n  \n    \n      Enter the following information:\n\n      \n\n    \n        Item\n        Description\n    \n\n    Database Server Host\n    If the web server and database server are located on the same host, enter localhost. If the database server is located on a different host, enter its fully qualified host name or IP address.\n\n\n    Database Server Username\n    Enter the user name of the Magento database instance owner.\n\n\n    Database Server Password\n    Enter the Magento database user's password, if any. Leave this field blank if you did not configure a password.\n\n\n    Database Name\n    Enter the Magento database instance name.\n\n\n    Table prefix\n    Use only if you're installing the Magento database tables in a database instance that has Magento tables in it already.\n    In that case, use a prefix to identify the Magento tables for this installation. Some customers have more than one Magento instance running on a server with all tables in the same database.\n    The prefix can be a maximum of five characters in length. It must begin with a letter and can include only letters, numbers, and underscore characters.\n    This option enables those customers to share the database server with more than one Magento installation.\n\n\n\n    \n    \n      Click Next.\n    \n  \n\n  Next step\n  Step 3. Web configuration\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_2_db.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-3-web-conf-html": {
      "title": "Step 3. Web configuration",
      "content": "\n\n  Step 3: Web Configuration\n\n  \n    \n      Enter the following information:\n\n      \n\n    \n        Item\n        Description\n    \n\n    Your Store Address \n    Enter the URL, including scheme and trailing slash, by which users access your storefront.\n    For example, if your storefront host name is http://www.example.com, enter http://www.example.com/\n\n\n    Magento Admin Address \n    Enter the relative URL by which to access the Magento Admin.\n\n\n\n    \n    \n      Optionally click Advanced Options and enter the following information:\n\n      \n\n\n        Item\n        Description\n    \n\n    HTTPS Options\n    Select the check box to enable the use of Secure Sockets Layer (SSL) in the indicated URL. Make sure your web server supports SSL before you select either check box.\n\n\n    Apache Rewrites\n    Select this check box to use Apache rewrites. We support this option only if you enabled server rewrites when you installed Apache.\n\n\n    Encryption Key\n    Magento uses an encryption key to encrypt sensitive data in the database.\n    Click I want to use a Magento generated key to have Magento generate an encryption key for you.\n    Click I want to use my own encryption key if you already have an encryption key.\n\n\n    Session Save\n    From the list, click the option corresponding to how to store session data.\n        The default is Files, which means session data is saved in the var/session subdirectory of the Magento file system.\n        You can also choose Db, which means session data is stored in the database. &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\t\n\n    \n    \n      Click Next.\n    \n  \n\n  \n\n    What is sensitive data?\n    Magento uses your encryption key to encrypt the following:\n\n    \n      Credit card information\n      User names and passwords specified in the Magento Admin configuration  (for example, logins to payment gateways)\n      CAPTCHA values sent over the network\n    \n\n    Magento does not encrypt:\n\n    \n      Administrative and customer user names and passwords (these passwords are hashed)\n      Address\n      Phone number\n      Other types of personally identifiable information except for credit card numbers\n    \n\n    Next step\n    Step 4. Customize your store\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_3_web-conf.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-4-customize-store-html": {
      "title": "Step 4. Customize your store",
      "content": "\n\n  Step 4: Customize Your Store\n\n  \n\n  \n    \n      From the Store Default Time Zone list, click the name of your store’s time zone.\n    \n    \n      From the Store Default Currency list, click the default currency to use in your store.\n    \n    \n      From the Store Default Language list, click the default language to use in your store.\n    \n    \n      Expand Advanced Modules Configuration to optionally enable or disable modules before you install the Magento software.\n\n      Before you enable or disable modules, review the information discussed in Enabling and disabling modules.\n\n      See one of the following sections for more information about enabling and disabling modules:\n\n      \n        General module configuration options\n        Module dependency errors\n      \n    \n    \n      Click Next.\n    \n  \n\n  General module configuration options\n  Modules are listed in Advanced Modules Configuration in alphabetical order; the order has nothing to do with dependencies.\n\n  You have the following options for any module listed:\n\n  \n    To enable a module that is currently disabled, select its check box.\n    To disable a module that is currently enabled, clear its check box.\n    Use the Select All check box to:\n      \n        Enable all modules if any module is currently disabled.\n        Disable all available modules (that is, all modules that do not depend on other enabled modules).\n      \n    \n  \n\n  If a module’s check box is unavailable, some other module depends on it. In the case of a dependency, to change the state of that module, you must first perform the corresponding action on the module on which it depends.\n\n  For example, Magento_GoogleAnalytics can be disabled only if Magento_GoogleOptimizer is disabled first. Conversely, if both modules are disabled, you must enable Magento_GoogleAnalytics first.\n\n  The following figure shows an example of disabling the Magento_GoogleAnalytics and Magento_GoogleOptimizer modules.\n\n  \n\n  Module dependency errors\n  A dependency error occurs when two inter-dependent modules are disabled at the same time.\n\n  If there is a dependency error, a message similar to the following displays.\n\n\n  Click Show details to display details about the dependency error. You can then do any of the following:\n\n  \n    Select the Skip dependency check for individual modules to ignore the issue and continue with your installation. (Additional dependency checks are performed after you click Next.)\n    Resolve the issue by taking the action indicated by the message.\n  \n\n  \n\tUse Skip dependency check for individual modules with caution. We recommend against it because a typical reason for this error is you manually edited the deployment configuration. Editing the deployment configuration is not recommended because future Magento software updates can undo your changes.\n\n\n  Next step\n  Step 5. Create Admin account\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_4_customize-store.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-5-create-admin-html": {
      "title": "Step 5. Create Admin account",
      "content": "\nStep 5: Create Admin Account\n\n\n  \n    Enter the following information:\n\n    \n\n\n        Item\n        Description\n    \n\n    New Username\n    Enter a user name with which to log in to the Magento Admin. This user is an administrator and can create other users, including other administrative users.\n\n\n    New E-Mail\n    Enter the Magento administrator's e-mail address.\n\n\n    New Password\n    Enter the administrator's password.\n\n\n    Confirm Password\n    Enter the password again for verification.\n\n\n\n  \n  \n    Click Next.\n  \n\n\nNext step\nStep 6. Install\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_5_create-admin.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-install-6-install-html": {
      "title": "Step 6. Install",
      "content": "\n\n  Step 6: Install\n\n  After completing all preceding steps in the Setup Wizard, click Install Now.\n\n  You have the following options:\n\n  \n    To see installation progress or error details, click Console Log.\n    In the event of problems, click Previous to go back and fix incorrect entries.\n    To try the installation again in the event of failure, click Try Again.\n  \n\n  Installation Success\n\n  The message Success displays to indicate a successful installation.\n\n  If the installation failed, click Previous to review the information you entered, make sure the Magento server and database host are still reachable, or see Troubleshooting.\n\n  You can also run the installer again.\n\n  Viewing the installation log\n  The Setup Wizard creates a log file, named install.log, that you might find useful in debugging issues or in verifying the actions performed by the wizard.\n\n  The Setup Wizard uses the sys_get_temp_dir ( void ) PHP call to determine where to write the installation log. To locate the log:\n\n  \n    \n      Open php.ini in a text editor.\n\n      If you don’t know where php.ini is located:\n\n      \n        Log in as or switch to the switch to the Magento file system owner.\n        Create phpinfo.php in the web server’s docroot.\n        \n          Access phpinfo.php in a web browser.\n\n          The location of php.ini is typically specified as Loaded Configuration File in the displayed results.\n        \n      \n    \n    \n      Search for sys_temp_dir.\n    \n  \n\n  The value of sys_temp_dir determines where install.log is located. If the value is commented out, PHP uses that value as its default.\n\n  A typical default value is /tmp. If that’s the case, the log is /tmp/install.log.\n\n  Next step\n  Verify the installation\n\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_install_6_install.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-start-html": {
      "title": "Configure your hosted system",
      "content": "Hosted installation\nBefore you can install the Magento software, you must get your hosted system ready.\n\nIf your hosted system is already set up, go to Get the Magento software packages.\n\nContents\n\n  Verify the software on your system\n\n  Configure a database and a database user\n  Configure PHP\n  Transfer the Magento software to your hosted system\n  Install the Magento software\n\n\nVerify the software on your system\nMagento requires the following software to run:\n\n\n  Web server: Apache 2.2 or 2.4\n  Programming language: PHP 5.6.x or 5.5.x\n  Database: MySQL 5.6.x\n\n\n\n  We recommend you contact your shared hosting provider's technical support to verify all of the preceding are installed and get their assistance if any of the software is not installed.\n\n\nFor complete details, see System requirements.\n\nNext step\nConfigure a database and a database user\n\n\n\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_start.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-start-db-html": {
      "title": "Configure a database and a database user",
      "content": "To configure a MySQL database and database user:\n\n\n  \n    In the Databases section, click MySQL Databases as the following figure shows.\n\n    \n  \n  \n    In the New Database field, enter a unique name for your database and click Create Database.\n\n    \n  \n  \n    In the MySQL Users section, enter information in the provided fields and click Create User.\n\n    \n  \t\tGive the database user a strong password and write down the user name and password you choose.\n  \t\tYou can optionally click Password Generator to create a strong password for you.\n\n\n    \n  \n  \n    In the Add User to Database section, click the name of your Magento database and database user from the respective fields and click Add.\n\n    \n\n    The Manage User Privileges page displays.\n  \n  \n    Select the ALL PRIVILEGES check box at the top of the page and click Make Changes.\n\n    \n  \n\n\nNext step\nConfigure PHP\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_start_db.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-hosted-hosted-start-php-html": {
      "title": "Configure PHP",
      "content": "PHP Hypertext Preprocessor (PHP) is a scripting language that Magento is authored in. Magento requires PHP version 5.5 or 5.6 to run.\n\nTo configure PHP:\n\n\n  If necessary, start the cPanel and click Home to return to the home page.\n  \n    In the Software section, click Select PHP Version.\n\n    \n  \n  \n    From the PHP Version list at the top of the page, click either 5.5 or 5.6.\n  \n  \n    Click Set as current.\n\n    The check boxes following the PHP version are referred to as PHP extensions.\n  \n  \n    Select all of the following check boxes: gd, intl, mbstring, mcrypt, opcache, pdo, pdo_mysql, and xsl.\n\n    You can optionally select other PHP extensions if you want.\n\n    \n  \n  Click Save.\n\n\nNext step\nTransfer the Magento software to your hosted system\n",
      "url": "/guides/v2.0/install-gde/install/hosted/hosted_start_php.html"
    }
    ,
  
    "guides-v2-0-cloud-howtos-how-to-html": {
      "title": "Tutorials",
      "content": "These topics are intended to get you up to speed quickly using Magento Commerce (Cloud). These are step-by-step instructions that provide instructions about specific tasks or that explain how to achieve a goal.\n\nHave suggestions? Open an issue or click the Edit this page on GitHub link and give us feedback directly.\n\nCurrent topics:\n\n\n  \n    Install components, upgrade, update\n\n    \n      Install, manage, and upgrade modules\n      Test a Magento patch before deploying it\n    \n  \n  \n    Environments\n\n    \n      Set Magento environment variables\n      Merge and delete an environment\n    \n  \n  \n    Install optional sample data\n  \n\n",
      "url": "/guides/v2.0/cloud/howtos/how-to.html"
    }
    ,
  
    "guides-v2-0-howdoi-howdoi-contribute-html": {
      "title": "Contributor sign-up sheet",
      "content": "Please sign up to write a How Do I topic for us!\n\nWe’ll put your name (or company’s name) at the top of the page, right under the title, and link it to your blog or website! And you’ll get your face and bio in the ring of honor as one of our featured contributors.\n\nTo add your name to this table, all you need to do is to submit a pull request on this page or e-mail us.\n\nUse this template if you’d like. You can get a copy of the .md file  on Github.\n\nSubmissions should be Markdown but HTML is welcome also.\n\n\n  \n    \n      Contributor name\n      Description or subject\n    \n  \n  \n    \n      Max Pronko\n      How do I develop and maintain my custom Magento 2 extension in a separate repository\n    \n    \n      Alan Storm\n      Which PHP class should I use to read from each app/etc/ configuration file “type”? (acl.xml, events.xml, module.xml, etc. – excluding layout XML files)\n    \n    \n       \n       \n    \n  \n\n",
      "url": "/guides/v2.0/howdoi/howdoi_contribute.html"
    }
    ,
  
    "guides-v2-0-howdoi-howdoi-template-html": {
      "title": "",
      "content": "\n\n\n\nYOUR HEADING\nINTRODUCTORY TEXT, EXPLAIN WHAT YOUR ARTICLE IS ABOUT\n\nANOTHER HEADING\n\nA SMALLER HEADER\n\n\n\n\n  Text\n  Text\n  Text\n\n\n\n\n\n  Step 1\n  Step 2\n  Step 3\n\n\n\n\nPlease submit all images to our common/images directory.\n\nFormat the link as follows:\n\n\n\n\n\n\n\n\n\n  \n    \n      Column Heading\n      Column Heading\n      Column Heading\n    \n  \n  \n    \n       \n       \n       \n    \n    \n       \n       \n       \n    \n    \n       \n       \n       \n    \n  \n\n\n\n\n\n  This is a note.\n\n\n\n    This is important.\n\n\n\n  This is a tip.\n\n",
      "url": "/guides/v2.0/howdoi/howdoi_template.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-iconography-iconography-html": {
      "title": "Admin Iconography",
      "content": "Icons are used throughout the Magento Admin interface, often as controls to initiate a function (such as a “Filter”) or to direct a user to a section (such as “Account”).\n\nIcons are meant to provide a visual representation of functionality or content and should therefore bear some conceptual resemblance to them. Icons should be able to communicate their “use” to the user without the assistance of a text label, though labels should be used in the UI whenever possible to minimize ambiguity.\n\nHow Icons Are Used\n\nIcons may appear in a variety of sizes within the interface as controls for tools and functions and to assist in “wayfinding” within the application.\n\nUse touch-friendly UI principles — icons should be large enough to provide a reasonable target for a user’s finger tap. The icon may be smaller than optimal touch size when it is coupled with a “target” area with the optimal size.\n\nExample: A small “Expand” control icon can use a target area where the entire header row is tappable.\n\nThe functionality associated with a specific icon should be paired consistently, throughout the interface.\n\nHowever, an icon or a design element in an icon can sometimes serve different functions. Icons usually function as a single, unique concept wherever they exist in a website, but some icons have dual purposes, relying on different size, placement, and context to communicate their meaning to the user.\n\nExample: The “X” error icon and its the supporting elements of copy, position, and styling give an identity and meaning for the icon. However, when an “X” icon is used as a “Remove” or “Close” control, its supporting elements give it a different identity and meaning.\n\nIcon Library\n\nIn the Magento Admin, icons have a simple, flat, single-color, and two-dimensional style. This style prevents loss of detail at smaller sizes and makes the shapes easier to recognize.\n\n\n\nCreating Icons\n\nInstructions\n\n\n  \n    Start by selecting an icon library file - download either the Sketch (SKETCH) or Illustrator (AI)/a&gt; files.\n  \n  \n    Use our standard 300 x 300 pixel icon grid - see the guidance that follows in the “Create With the Icon Grid” section.\n  \n  \n    Keep icons monochromatic.\n  \n  \n    Match other icons; make them “one of the family”.\n\n    \n      Use the same line weights.\n    \n  \n  \n    Match the same style of elements used in other family icons. Example: Arrows\n  \n  \n    Cantered or rotated elements should use a 45-degree angle.\n  \n  \n    Keep a limited perspective — all icons should appear from the same perspective.\n  \n\n\nFor any icon to be used in Magento Admin, ask the Magento Product Team to review the icon and add it to the “icon font”.\n\nCreate with the Icon Grid\n\nHere’s one method to get started:\n\n\n\nLearn how to use the icon grid:\n\n\n\nIcon Fonts\n\nWe recommend using icon fonts to get the best quality for your icons. The Magento icon fonts can be found in in GitHub.\n\nIf you want to add your own icons, each icon will need to be in its own SVG files. There are multiple ways to create icon fonts, here is one to get started:\n\n\n  \n    Select an IcoMoon tool: Go to the IcoMoon website to use their browser tool or visit the IcoMoon app page in Google’s Chrome Web Store to download the app.\n  \n  \n    Save your icons in SVG format and upload the files into the app.\n  \n  \n    Specify the desired font names and the Unicode characters to map the icons.\nTip: Setting the icons to Private Use Area (PUA) will disable screen-readers and other accessibility tools. Disabling prevents the devices from mistakenly translating your icon’s characters as words that users won’t understand.\n  \n  \n    From the app, click “Download” to generate the icon font and CSS style sheet.\n  \n\n\nAccessibility\n\nHow to Use “aria-hidden” Attribute\n\nIcons are required to be optimized — and their font characters kept hidden — for users with assistive technology like screen-readers.\n\nTo hide these characters from assistive devices, use the “aria-hidden” attribute.\n\nModern versions of assistive technologies will announce CSS generated content, as well as specific Unicode characters. To avoid unintentional and confusing output in screen readers hide them with the aria-hidden=”true” attribute.\n\nSource: Bootstrap Components\n\nCode sample:\n\n&lt;style&gt;\n  .icon-star:before { content: \"★ \"; }\n&lt;/style&gt;\n\n&lt;span&gt;&lt;span class=\"icon-star\" aria-hidden=\"true\"&gt;&lt;/span&gt;Favorite&lt;/span&gt;\n\nSource: filament group’s “Bulletproof Accessible Icon Fonts”\n\nHow to Easily Make An Icon Font Accessible\n\nIcons should be very descriptive, especially if they stand on their own. Add descriptive text to clarify their meaning to users.\n\n\n  \n    Don’t use “regular letters” for icons. Use a service like IcoMoon and use the Private Use Area (PUA) of the font. Those areas are specifically made for this usage and don’t have any letters attached to it. Screen readers won’t read letters in the PUA.\n  \n  \n    Use colors with enough contrast for your icons.\n  \n  \n    Never use an icon without a text (that you may hide). As icons are not read out, we don’t have any hint for a screen reader user what actually is on the screen, an alternative text is important as long as the content doesn’t make sense without an icon at all.\n  \n\n\nSource: Modern Web Accessibility: Using icon fonts and demystifying speak:none;\n\nLearn More\n\n\n  \n    yatil.: The best way to use icon fonts\n  \n  \n    Pictos: Using Icon Fonts\n  \n\n",
      "url": "/guides/v2.0/design-styleguide/iconography/iconography.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-image-uploader-image-uploader-html": {
      "title": "Admin Design Pattern Library",
      "content": "Image uploader\nThe Image uploader provides the ability for users to upload a single image, or group of images, to the application, most commonly images associated with Products (during the Product Creation process). These iamges may serve as thumbnail images, detailed Product images, images to within a product gallery, etc.\n\nWhen to Use\nWhen it is desireable to allow users to upload a single image or multiple images for display within the Magento Admin or on the Storefront.\n\nWhen Not to Use\nThis pattern should be used specifically to upload images, and not to upload documents such as PDFs, WordDocs, Spreadsheets, etc. Please refer to the “File Upload” pattern.\n\nVariations\n\n\n  \n    Upload Single Image\n  \n  \n    Upload Multiple Images\n  \n  \n    Upload Video Content\n  \n\n\nBehavior\n\nUploading via Browser\n\nThe Image Uploader allows the user to browse for images to upload to the Admin application. This can accomodate single or multiple image upload. To initiate this behavior the user clicking on the “Upload Image” link (target area). The user then proceeds to select the desired images via the browser, using SHIFT + click or ALT/COMMAND + click to select multiple image files.\n\n\n\nUploading via Drap and Drop\n\nThe user may also upload images (single or multiple) by dragging the desired images onto the Image Uplaod target area.\n\n\n\nUploading Video Content\nTo upload a video to the Magento Admin application the user taps the “Add Video” button. \n\nimage-uploader-video-uploaded.jpg\n\nA video settings panel is revealed that allows the user to provide the URL location of the video, write a description and upload a preview image for the video. The user taps the “Save” button to upload the information.\n\n\nOnce the video information is saved, the video settings panel closes and the user is returned to the image uploader (section) where the video preview image now appear.\n\n\nNOTE: Currently Magento 2 does not allow Drag and Drop for Video Content.\n\nDrag to Arrange Order\nThe order in which images are displayed can be arranged by dragging the image or video to the desired position.\n\n\nImage Settings\nIn some areas of the Magento Admin application uploaded images my have additional settings that effect the display of these images on the Storefront (e.g. Product Creation). These settings can be accessed via the “gear” icon found on the image thumbnail.\n\n\nDeleting an Image\nLikewise, an image may be removed from the Magento Admin application by tapping the “trashcan” icon.\n\n\nDimensions\n\n\nAccessibility\nTo initiate the uploader, the buttons should follow button accessibility guidelines: http://www.w3.org/TR/WCAG10-HTML-TECHS/#forms-graphical-buttons\n\nIn the browser upload window, standard behavior should be kept.\n\nAssets\nPSD files can be found here:\nDownload Image Uploader PSD source\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/image_uploader/image_uploader.html"
    }
    ,
  
    "community-resources": {
      "title": "Community Resources",
      "content": "Below are links to blog posts, podcasts, presentations, and books created by members of the Magento community and core developers separated into popular topics.\n\nNew items will be added incrementally, and older links rotated out. Keep an eye on this space for the latest community resources!\n\nAnother community based resource, focused on describing the Magento 2 Environment is the Magento 2 Awesome List\n\nDo you know of a popular resource about Magento 2 that has been released/published within the past year?\nDoes it fill gaps in our current docs and provide important information?\nLet us know!\n\n\n  Note: Magento does not officially endorse any of the blogs, books, presentation, or podcasts linked below.\nThey are listed here because the content has been well received within the Magento community.\n\n\nMagento APIs\n\n\n  Presentation: Magento 2 Integrations by Joshua Warren\n  Presentation: Integrations with Magento, end to end story: RabbitMQ, APIs by Eugene Tulika\n\n\nInstall/deploy\n\n\n  Blog post Magento 2 - Launch Checklist by Syed Muneeb Ul Hasan\n  Presentation: Magento 2 Deployment: What you should know by Olga KopyLova\n  Blog post Magento 2 deployment without the downtime by Robert Egginton\n  Blog post Deploying Magento 2 - History &amp; Overview by Matthias Walter\n  Blog post Deploying Magento 2 using Capistrano by David Alger\n  Blog post Deploying Magento 2 with Composer and Envoyer by Nick Rigby\n  GitHub Magento 2 Docker\n\n\nAutomated Testing\n\n  Presentation: Writing testable code by Vinai Kopp (Bonus: Video Presentation)\n  Book: Test Driven Magento Extension Development by Allan MacGregor\n  Blog post: Integration Tests with Magento 2 by Andreas von Studnitz\n\n\nMastering Magento 2\n\n\n  Book: Magento 2 DIY by Viktor Khliupko\n  Book: Magento 2 Cookbook by Ray Bogman and Vladimir Kerkhoff\n  Presentation: Staging and Preview by Igor Melnykov\n  Blog post: Introducing UI Components by Alan Storm\n  Presentation: Micro Services by Ivan Chepurnyi\n  Blog post: 10 Practical Rules to Build High Quality Magento 2 Module by Max Pronko\n\n\nPerformance\n\n\n  Presentation: Premium performance with PHP 7 and Varnish by Miguel Balparda\n\n\n",
      "url": "/community/resources/"
    }
    ,
  
    "guides-v2-0-contributor-guide-backward-compatible-development": {
      "title": "Backward compatible development",
      "content": "This page describes rules and best practices for backward compatible development.\n\nBackward Сompatibility Policy\n\nSee the versioning documentation for the definitions of MAJOR and MINOR changes and how it impacts extension developers.\n\nThe core Magento team and contributing developers work in two release types\n\n\n  New and significant release (product’s MINOR release)\n    \n      Necessary MAJOR and MINOR changes are allowed, but the Magento architecture team ultimately decides what is allowed.\n    \n  \n  New patch release (product’s PATCH release)\n    \n      PATCH changes are allowed, but MAJOR and MINOR changes are not allowed.\n    \n  \n\n\n\n  Backward Сompatibility Policy is not applied to Plugins, Observers and Setup Scripts.\n\n\nProhibited code changes\n\nThe following code modifications are forbidden for all code (both @api and non @api) without approval of a Magento architect.\n\n\n  The rules listed do not apply to customization code (e.g. Plugins, Observers, JS Mixins, etc.).\n\n\nPHP\n\nThe following is a list of prohibited PHP code changes and possible alternative implementations.\n\nInterface/class removal\n\nMark the class with the @deprecated tag instead of removing it, and mark all of its methods as deprecated so an IDE can highlight them as deprecated.\n\nPublic and protected method removal \n\nMark the method with the @deprecated tag instead of removing it.\n\nContinue returning the same results from the method if possible, so the old functionality is preserved.\n\nIntroduction of a method to a class or interface\n\nCreate a new interface with a new method instead of introducing a method to a class or interface.\n\nThe new interface may take over existing methods from the class if it makes sense to group them together.\nIn this case, you must deprecate corresponding methods in the old interface/class with the @see annotation.\nThe old methods should proxy the calls to the new interface instead of duplicating the logic.\n\nFor an example of an interface with an extracted method see the Magento\\Catalog\\Api\\CategoryListInterface.\nThis interface is responsible for the getList() method, but Magento\\Catalog\\Api\\CategoryRepositoryInterface does not have that method.\n\n\n  For a PATCH product release, do NOT mark the new interface with @api.\n  For a MINOR product release, an architect marks, or approves, the new interface with @api if applicable.\n\n\nRemoving static functions\n\nDo not remove static functions.\n\nAdding parameters in public methods \n\nDeprecate the method and add a new method with the new parameter(s) instead of adding them to a public method.\n\nFollow the alternative implementation described earlier for introducing a new method to a class or interface.\n\nReference the new method in a @see tag as a recommended replacement.\nExplain the reasons for replacing the old method with the new one (e.g., there is a bug in the old method). \n\nAdding parameters in protected methods \n\nInstead of adding parameters to protected methods, Create a new method with a new signature and deprecate the old method without changing it.\n\nDeclare the new method as private if possible.\n\nExample Code /**\n * @deprecated This method is not intended for usage in child classes\n * @see updateScopedPrice($price, $storeId)\n */\nprotected function updatePrice($price)\n{\n    $this-&gt;updateScopedPrice($price);\n} \n\nprivate function updateScopedPrice($price, $storeId)\n{\n    // Updated logic that takes into account $storeId\n} \n\n\nModifying the default values of optional arguments in public and protected methods \n\nThis is forbidden because the default argument values of public or protected methods are part of the API of the class/interface.\n\nAs an alternative, Create a new method with new interface following the alternative implementation for creating a new method for a class or interface.\n\nCreate multiple methods to cover all use cases to avoid using optional parameters.\n\nModifying the method argument type\n\nDo not modify a method argument type.\n\nModifying the types of thrown exceptions\n\nDo not modify the types of thrown exceptions unless a new exception is a sub-type of the old one.\n\nAdding a constructor parameter\n\nAdd a new optional parameter to the constructor at the end of the arguments list instead of modifying the constructor.\n\nIn the constructor body, if the new dependency is not provided (i.e. the value of the introduced argument is null), fetch the dependency using Magento\\Framework\\App\\ObjectManager::getInstance().\n\nExample Code class ExistingClass\n{\n    /** @var \\New\\Dependency\\Interface */\n    private $newDependency;\n\n    public function __construct(\n        \\Old\\Dependency\\Intreface $oldDependency,\n        $oldRequiredConstructorParameter,\n        $oldOptinalConstructorParameter = null,\n        \\New\\Dependency\\Interface $newDependency = null\n    ) {\n        ...\n        $this-&gt;newDependency = $newDependency ?: \\Magento\\Framework\\App\\ObjectManager::getInstance()-&gt;get(\\New\\Dependency\\Interface::class);\n    }\n\n    public function existingFunction()\n    {\n        // Existing functionality\n        ...\n        ...\n\n        // Use $this-&gt;newDependency wherever the new dependency is needed\n        ...\n        ...\n    }\n}\n\n// Sample unit test code snippet follows\nclass ExistingClassTest extends \\PHPUnit_Framework_TestCase\n{\n    private $existingClassObject;\n\n    protected function setUp()\n    {\n        ...\n        // Create dependency mocks with $this-&gt;getMock() or $this-&gt;getMockBuilder()\n        $newDependencyMock = $this-&gt;getMock(\\New\\Dependency\\Interface::class);\n\n        $objectManager = new \\Magento\\Framework\\TestFramework\\Unit\\Helper\\ObjectManager($this);\n        $this-&gt;existingClassObject = $objectManager-&gt;getObject(\n            ExistingClass::class,\n            [\n                'oldDependency' =&gt; $oldDependencyMock,\n                'oldRequiredConstructorParameter' =&gt; 'foo',\n                'oldOptinalConstructorParameter' =&gt; 'bar',\n                'newDependency' =&gt; $newDependencyMock,\n            ]\n        );\n    }\n\n    public function testExistingFunction()\n    {\n        ...\n        ...\n    }\n}\n\n\nRemoving or renaming public and protected properties\n\nMark properties with the @deprecated tag instead of removing or renaming them.\nContinue storing the value in the property to preserve the old functionality.\n\nRemoving or renaming constants\n\nDo not remove or rename constants.\n\nRemoving, renaming, or changing the type of event arguments\n\nDo not remove or rename event arguments.\nDo not change argument types. \nInstead of changing argument name or type, introduce new event argument with new name or type and deprecate the old argument by adding @deprecated annotation before dispatching the event.\n\nJS\n\nThe following is a list of prohibited JS code changes:\n\n\n  Removing or renaming an interface or class\n  Removing or renaming public or protected methods\n  Introducing a method to an interface\n  Introducing an abstract method to a class\n  Removing or renaming static functions\n  Adding non-optional arguments in public and protected methods\n  Modifying the default value for optional arguments in public and protected methods\n  Removing or renaming public or protected properties\n  Removing or renaming constants\n\n\nXML Schema\n\nThe following is a list of prohibited XML Schema changes:\n\n\n  Adding an obligatory node\n  Adding an obligatory attribute\n  Removing or renaming an attribute or node type\n  Removing or renaming a configuration file\n\n\nDB Schema\n\nThe following is a list of prohibited DB Schema changes:\n\n\n  Modifying field type, default value, or property\n  Removing or renaming a table\n  Introducing a required field\n\n\nCSS/LESS\n\nThe following is a list of prohibited CSS/LESS changes:\n\n\n  Removing or renaming a class\n  Removing or renaming a mix-in\n  Removing or renaming a variable\n\n\nMagento APIs\n\nThe following is a list of prohibited Magento API changes:\n\n\n  Removing or renaming an event\n  Removing or renaming a layout handle\n  Removing or renaming a store configuration path\n  Modifying the directory structure\n  Removing an @api annotation\n  Modifying the Magento tool command argument list\n  Modifying or removing the Magento tool command\n\n\nTranslatable phrases\n\nDo not modify any translatable phrase.\n\nMagento functional and integration tests\n\nThe following is a list of prohibited changes to Magento functional and integration tests:\n\n\n  Changing a fixture format\n  Changing a fixture content (except changes forced by new functionality)\n\n\nAllowed Code Changes\n\nPHP\n\nChanging the value of a constant \n\nChanging the value of a constant is itself a backward compatible change.\n\nEven if client code saves the value in permanent storage or use it as input or output of a method, it is the responsibility of that code to ensure that it is a reliable implementation.\n\nThe client code should have enough control over the constant’s value.\nDo not rely on a value of a constant from another module or another vendor.\n\nStop setting a value to the Registry\n\nSetting a value to the Registry is backward compatible.\nHowever, Magento discourages usage of the Registry, so third-party extensions should not depend on values in the Registry.\n\nAdding an argument to an event\n\nAdding an argument to an event is allowed.\n\nVersion changing rules for module setup\n\n\n  \n    The module data/schema version must not increase in a patch version release if the next minor version is already released.\n\n    For example, the module data/schema version for all patch releases of Magento 2.0 can change prior to the release of Magento 2.1.\nAfter 2.1 releases, the version cannot change for 2.0 patch releases, but it can change for 2.1 patch releases until Magento 2.2.\n  \n  \n    Deliver fixes that bump the module setup/data version in the current, unpublished version before delivering it to previous minor versions.\nIn cases where an urgent fix was delivered in a previous minor version, treat the fix for the current unpublished version as a high priority task.\n\n    For example, issue fixes that change the setup/upgrade version in the unreleased develop branch are delivered first before being ported into the released branches.\nIf the fix was made for a released branch, a pull request for porting it into the develop branch must be created with a high priority and delivered as soon as possible.\n  \n  \n    The setup version of a module must be higher than previous releases of the same module.\n\n    For example, the setup version for a fix for the Magento_Catalog module is higher in the develop branch (2.1.3) than previous branch versions (2.0.2 and 2.1.2 for versions 2.0 and 2.1).\n  \n\n\nBackport fixes with breaking changes to patch branches\n\nBackward compatibility is more important than niceness and implementation effort, but a Magento architect must be involved in making a decision.\n\nPotential drawbacks:\n\n\n  It is double the work when it is necessary to implement different solutions for the develop branch (upcoming minor release) and patch release branches.\n  Inability to refactor code in patch releases\n  Effort for implementing fixes in patch releases may be higher due to necessary implementation workarounds.\n\n\nRefactoring classes that reach limit of coupling between objects\n\nPoorly designed classes with too many responsibilities and dependencies should be refactored to prevent them from reaching the limit of coupling between objects, but removing excessing dependencies and/or breaking the class down into smaller classes is a backward incompatible implementation.\n\nPreserve public and protected class interfaces to maintain backward compatibility.\nReview and refactor the class such that parts of the logic go into smaller specialized classes without breaking backward compatibility.\n\n\n  Turn the existing class into a facade to prevent existing usages of the refactored methods from breaking.\n  The old public/protected methods should be marked as deprecated with the @see tag to suggest the new implementation for new usages.\n  Remove all unused private properties/methods.\n  Mark as deprecated unused protected properties.\nRemove the variable type indicated in the DocBlock to remove the dependency.\n  To preserve the constructor signature:\n    \n      Remove type hinting for unused parameters to remove dependency on their type.\n      Add @SuppressWarnings(PHPMD.UnusedFormalParameter) for unused parameters.\n    \n  \n\n\nDeprecation\n\nMagento 2 must not have alternative APIs.\nWhenever you introduce a new implementation of some behavior, mark the old implementation as deprecated and specify the reason.\n\nPHP, JS and XML\n\nUse the @deprecated tag to mark methods as deprecated and follow it up with an explanation.\n\nUse the  @see tag to recommend the new API to use instead of the old one.\n\nPreserve @api tag when deprecating @api-marked code.\n\nDeprecated tag in PHP\n\n/**\n * @deprecated because new api was introduced\n * @see \\New\\Api\n */\n\n\nDeprecated tag in XML/HTML\n\n&lt;!--\n@deprecated because new api was introduced\n@see NewApi\n--&gt;\n\n\nWebAPI\n\nWhen replacing a WebAPI method with a new implementation that has a different signature, make sure it remains accessible on the same resource but with the next sequential version.\n\nDeprecation testing\n\nEvery piece of code that is deprecated MUST be covered by a static test that will fail if some code uses the deprecated piece of code.\n\nRemoval of deprecated code\n\nDeprecated code is preserved for the following time frames:\n\n\n  @api code: Until the next major version of the component\n  non-@api code: The next 2 minor releases or until a major release\n\n\nDocumentation of Backward Incompatible Changes\n\nBackward incompatible changes must be approved by an architect and documented in the scope of the task that introduces those changes.\n\nExamples of these tasks include:\n\n\n  Changing the input/output values format of a method\n  Changing a value format in the DB\n  Changing XML files (layouts, configuration files, etc.)\n\n\nSome changes are detected and documented by an automated tool.\nThese backward incompatible changes do not need manual documentation:\n\n\n  Adding/removing a class/interface\n  Adding/removing a method\n  Modifying a method signature\n  Adding/removing a class/interface constant\n  Adding removing a class property\n\n\nAuto-generated Magento Open Source changes\n\nAuto-generated Magento Commerce changes\n\nWhere to document\n\nIn the DevDocs repository, manually add backward incompatible changes to the following file:\n\nhttps://github.com/magento/devdocs/blob/develop/guides/v&lt;version&gt;/release-notes/backward-incompatible-changes.md\n\nWhere: &lt;version&gt; is the MINOR version of the product (2.1, 2.2, 2.3, etc).\n\nExample: https://github.com/magento/devdocs/blob/develop/guides/v2.2/release-notes/backward-incompatible-changes.md.\n\nUpdate the page for the next MINOR product release when working in the develop branch of Magento.\n\nFor example, when 2.2 is released, a new backward-incompatible-changes.md for 2.3 becomes available for editing.\n\nIn order to update the page, create a PR to the DevDocs repository with your changes.\n\n",
      "url": "/guides/v2.0/contributor-guide/backward-compatible-development/"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-versioning": {
      "title": "Versioning",
      "content": "Magento software and Magento module releases have their own unique version number.\n\nSoftware version format\n\nA change in the version for the Magento software indicates a patch or feature release.\nThis version change does not reflect the nature of the changes in the code base.\n\nModule version format\n\nThe version field in a modules composer.json file specifies the module version and consists of three numbers in the following format:\n\nMAJOR.MINOR.PATCH\n\nThe format follows Semantic Versioning rules:\n\n\n  The MAJOR version increments when incompatible API changes are made.\n  The MINOR version increments when backward-compatible functionality has been added.\n  The PATCH version increments when backward-compatible bug fixes occur.\n\n\nPre-release versions\n\nFor pre-release versions, the format is:\n\nMAJOR.MINOR.PATCH-&lt;alpha | beta | rc&gt;n\n\n\n  \n    \n      alpha, beta or rc\n      Stability indicators, as described in the version_compare() specification\n    \n    \n      n\n      An increment number to distinguish releases of the non-stable versions\n    \n  \n\n\nMagento’s module versioning policy complies with the following specifications:\n\n\n  Semantic Versioning\n  Composer version specification\n  PHP version_compare() specification\n\n\nWhere versioning is used\n\nThe software version can be found in the source code of any Magento component or bundle, inside the composer.json file.\n\nIt can be declared as the version of the component:\n\n\"name\": \"acme/foo\",\n\"version\": 1.2.0\n\nOr it can be used to declare a dependency on a particular version of a component:\n\n\"require\": {\n    \"acme/foo\": \"1.2.*\",\n    \"acme/bar\": \"2.2.0\"\n}\n\nVersion usage example\n\nThe following example shows how versions are used with composer to install software and third-party extensions.\n\nThis example uses several composer packages on the public github to simulate a merchant site, 2 core Magento modules, and a third-party extension.\n\n\nStart by cloning the master branch from github.\n\n\n  This sample in composer.json states this site is dependent on a release candidate of a simulated Magento 2.0 release.\n\n\n{\n  \"name\": \"myexamplestore/sample-site\",\n  \"description\": \"A sample site\",\n  \"type\": \"project\",\n  \"version\": \"1.0.0\",\n  \"require\": {\n    \"myexamplestore/product-bundle\": \"2.0.0-RC1\"\n    }\n}\n\n\n\nRun the composer update command. Core modules a &amp; b are pulled down from the repository.\n\nNow the SI includes a third-party extension by adding the composer dependency. This extension trusts our BC and sets the appropriate version on the module-a core dependency.\n\n\n{\n  \"name\": \"myexamplestore/sample-site\",\n  \"description\": \"A sample site\",\n  \"type\": \"project\",\n  \"version\": \"1.0.0\",\n  \"require\": {\n    \"myexamplestore/product-bundle\": \"2.0.0-RC1\",\n    \"myexamplestore/acme-extension\": \"~1.0\"\n    }\n}\n\n\n\nRun composer update and see the new extension downloaded.\n\nWhen Magento releases 2.0 GA, the SI updates the site composer.json to the release version.\n\n\n{\n  \"name\": \"myexamplestore/sample-site\",\n  \"description\": \"A sample site\",\n  \"type\": \"project\",\n  \"version\": \"1.0.0\",\n  \"require\": {\n    \"myexamplestore/product-bundle\": \"2.0.0\",\n    \"myexamplestore/acme-extension\": \"~1.0\"\n    }\n}\n\n\n\nRun composer update and notice the core modules were updated since RC1, but the extension remains unchanged because of BC policy.\n\n   This step repeats with each subsequent release of Magento (2.1, 2.2, 2.3, etc.). Deprecation strategy and community communication happens in 2.3.\n\n\nMagento decides backward incompatible changes are allowed and does this as part of the upcoming release 2.4.\n\n   \n{\n  \"name\": \"myexamplestore/sample-site\",\n  \"description\": \"A sample site\",\n  \"type\": \"project\",\n  \"version\": \"1.0.0\",\n  \"require\": {\n    \"myexamplestore/product-bundle\": \"2.4.0-RC1\",\n    \"myexamplestore/acme-extension\": \"~1.0\"\n    }\n}\n\n\n\nRun composer update and notice that acme-extension is marked as incompatible. \n\nBased upon previous communication, the developer has updated the extension so the SI updates to the new extension version.\n\n\n{\n  \"name\": \"myexamplestore/sample-site\",\n  \"description\": \"A sample site\",\n  \"type\": \"project\",\n  \"version\": \"1.0.0\",\n  \"require\": {\n    \"myexamplestore/product-bundle\": \"2.4.0-RC1\",\n    \"myexamplestore/acme-extension\": \"~2.0\"\n    }\n}\n\n\n\nRun composer update. Updates to core modules are returned as third-party extensions.\n\n\n\nRelated Topics\n\nModule version dependencies - Information about how your module can depend on the version of other modules.\n\nCodebase changes - Information on how changes in a Magento module’s codebase affect versions.\n\n",
      "url": "/guides/v2.0/extension-dev-guide/versioning/"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-indexing-custom-html": {
      "title": "Adding a custom indexer",
      "content": "Adding a custom indexer\nThis topic discusses how to create a custom indexer. We’ve recently made a performance improvment that enables you to declare one or more shared indexers; if one of the shared indexes is already up-to-date, it doesn’t need to be reindexed.\n\nTo implement your own indexer, add the following code in your module:\n\n\n  Indexer logic\n  Indexer configuration\n  MView configuration\n\n\nCustom indexer logic\n\nYour custom indexer class should implement \\Magento\\Framework\\Indexer\\ActionInterface, and the indexer should be able to perform three types of operations:\n\n\n  Row reindex: processing a single entry from a dictionary; responsibility of executeRow($id)\n  List reindex: processing a set of dictionary entries; responsibility of executeList($ids), where $ids is an array of entity IDs\n  Full reindex: processing all entities from a specific dictionary; responsibility of executeFull()\n\n\nIndexer configuration\n\nIn the etc directory of your module, add indexer.xml with the following:\n\n\n  indexer ID\n  indexer class name\n  indexer title\n  indexer description\n  indexer view ID\n  shared indexes, if any\n\n\nUse the optional shared_index= parameter to improve performance if your indexer is related to another indexer. In this example, if catalog rule product needs to be reindexed, but other catalog product rule index is up-to-date, then only catalog rule product is reindexed.\n\nAll indexers related to a module should be declared in one file.\n\nMView configuration\n\nAdd the mview.xml configuration file in the etc module directory, where you declare the following:\n\n\n  indexer view ID\n  indexer class\n  the database tables the indexer tracks\n  what column data is sent to the indexer\n\n\nExample\n\nAll Mview declarations related to a module should be declared in one file.\n\nExample of a custom indexer implementation\n\nTo push best-selling products to the top of a category listing, process statistics about sales to change the product position dynamically.\n\nAssuming your module is named &lt;VendorName&gt;_Merchandizing, you must write the appropriate code in the indexer class:\n\n&lt;VendorName&gt;\\Merchandizing\\Model\\Indexer;\n\nclass Popular implements \\Magento\\Indexer\\Model\\ActionInterface, \\Magento\\Framework\\Mview\\ActionInterface\n{\n    public function executeFull(); //Should take into account all placed orders in the system\n    public function executeList($ids); //Works with a set of placed orders (mass actions and so on)\n    public function executeRow($id); //Works in runtime for a single order using plugins\n    public function execute($ids); //Used by mview, allows you to process multiple placed orders in the \"Update on schedule\" mode\n}\n\nNext, declare the indexer in Merchandizing/etc/indexer.xml:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../Indexer/etc/indexer.xsd\"&gt;\n  &lt;indexer id=\"merchandizing_popular\" view_id=\"merchandizing_popular_order\" class=\"Vendor\\Merchandizing\\Model\\Indexer\\Popular\"&gt;\n    &lt;title translate=\"true\"&gt;Popular Products&lt;/title&gt;\n    &lt;description translate=\"true\"&gt;Sort products in a category by popularity&lt;/description&gt;\n  &lt;/indexer&gt;\n&lt;/config&gt;\n\nFinally, declare the indexer view (merchandizing_popular_order) that tracks sales (Merchandizing/etc/mview.xml):\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../lib/internal/Magento/Framework/Mview/etc/mview.xsd\"&gt;\n  &lt;view id=\" merchandizing_popular_order\" class=\"Vendor\\Merchandizing\\Model\\Indexer\\Popular\" group=\"indexer\"&gt;\n    &lt;subscriptions&gt;\n      &lt;table name=\"sales_order_flat\" entity_column=\"order_id\" /&gt;\n    &lt;/subscriptions&gt;\n  &lt;/view&gt;\n&lt;/config&gt;\n\nThese settings start &lt;VendorName&gt;\\Merchandizing\\Model\\Indexer\\Popular::execute method every time an order is changed.\n\nNow when an order is placed, the Popular Products indexer calculates the sorting order of the products by popularity and stores this data in the index table, so that it can be used in product displaying logic.\n",
      "url": "/guides/v2.0/extension-dev-guide/indexing-custom.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-indexing-parent-html": {
      "title": "Indexing",
      "content": "\n",
      "url": "/guides/v2.0/extension-dev-guide/indexing-parent.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-indexing-html": {
      "title": "Indexing overview",
      "content": "Contents\n\n  Introduction to indexing\n  How Magento implements indexing\n  Magento indexers\n  Adding a custom indexer\n\n\nIntroduction to indexing\nIndexing is how Magento transforms data such as products, categories, and so on, to improve the performance of your storefront. As data changes, the transformed data must be updated—or reindexed. Magento has a very sophisticated architecture that stores lots of merchant data (including catalog data, prices, users, stores, and so on) in many database tables. To optimize storefront performance, Magento accumulates data into special tables using indexers.\n\nFor example, suppose you change the price of an item from $4.99 to $3.99. Magento must reindex the price change to display it on your storefront.\n\nWithout indexing, Magento would have to calculate the price of every product on the fly—taking into account shopping cart price rules, bundle pricing, discounts, tier pricing, and so on. Loading the price for a product would take a long time, possibly resulting in cart abandonment.\n\nIndexing terminology:\n\nDictionary\n\nOriginal data entered to the system. Dictionaries are organized in normal form to facilitate maintenance (updating the data).\n\nIndex\n\nRepresentation of the original data for optimized reading and searching. Indexes can contain results of aggregations and various calculations. Index data can be always re-created from a dictionary using a certain algorithm.\n\nIndexer\n\nObject that creates an index.\n\nCreate custom indexers\n\nMagento contains several indexers out of the box, but you might want to add your own if your customization requires data searches, which are not optimized by the Magento default indexers.\n\nThis topic provides a high level description of how indexing is implemented from a developer’s point of view, and practical advice of how to add your own indexer.\n\nHow Magento implements indexing\nThe following components are involved in the indexing process:\n\n\n\t\n\t\t\n\t\t\tComponent\n\t\t\tDescription\n\t\t\n\t\n\t\tMagento_Indexer\n\t\tImplements:\nindexer declaration\nindexer running\nindexer running mode configuration\nindexer status\n\t\n\t\n\t\tMagento\\Framework\\Mview\n\t\t\nAllows tracking database changes for a certain entity (product, category and so on) and running change handler.\nEmulates the materialized view technology for MySQL using triggers and separate materialization process (provides executing PHP code instead of SQL queries, which allows materializing multiple queries).\n\t\n\n\n\n    Magento_Indexer replaces the Magento 1.x Magento_Index module. Use Magento_Indexer for all new development.\n  \n\nIndexing types\n\nEach index can perform the following types of reindex operations:\n\n\n  \n    Full reindex, which means rebuilding all the indexing-related database tables.\n\n    Full reindexing can be caused by a variety of things, including creating a new web store or new customer group.\n\n    You can optionally fully reindex at any time using the command line.\n  \n  \n    Partial reindex, which means rebuilding the database tables only for the things that changed (for example, changing a single product attribute or price).\n  \n\n\nThe type of reindex performed in each particular case depends on the type of changes made in the dictionary or in the system. This dependency is specific for each indexer.\n\nThe following figure shows the logic for partial reindexing.\n\n\n\nIndexer status\nDepending on whether an index data is up to date, an indexer status value is one of the following:\n\n\n  valid: data is synchronized, no reindex required\n  invalid: the original data was changed, the index should be updated\n  working: indexing is in progress\n\n\nThe Magento indexing mechanism uses the status value in reindex triggering process. You can check the status of an indexer in the Admin panel under System &gt; New Index Management or manually using the command line.\n\nIndexing modes\nReindexing can be performed in two modes:\n\n\n  Update on Save: index tables are updated immediately after the dictionary data is changed.\n  Update by Schedule: index tables are updated by cron job according to the configured schedule.\n\n\nTo set these options:\n\n\n  Log in to the Magento Admin.\n  Click System &gt; Index Management.\n  Select the check box next to each type of indexer to change.\n  From the Actions list, click the indexing mode.\n  Click Submit.\n\n\nYou can also reindex from the command line\n\nThe following figure shows an example of setting indexers to Update by Schedule.\n\n\n\nHow to reindex\nYou can reindex in any of the following ways:\n\n\n  Using a cron job (preferred because indexing runs every minute)\n  Using the magento indexer:reindex [indexer] command, which reindexes selected indexers, or all indexers, one time only\n\n\nMagento indexers\nThe Magento application implements the following indexers:\n\n\n\t\n\t\t\n\t\t\tIndexer name\n\t\t\tIndexer method name\n\t\t\tIndexer class\n\t\t\tDescription\n\t\t\n\t\n\t\tCategory products\n\t\tcatalog_category_product\n\t\tMagento\\Catalog\\Model\\Indexer\\Category\\Product\n\t\tCreates category/products association\n\t\n\t\n\t\tProduct categories\n\t\tcatalog_product_category\n\t\tMagento\\Catalog\\Model\\Indexer\\Product\\Category\n\t\tCreates category/products association\n\t\n\t\n\t\tProduct price\n\t\tcatalog_product_price\n\t\tMagento\\Catalog\\Model\\Indexer\\Product\\Price\n\t\tPre-calculates product prices\n\t\n\t\n\t\tProduct entity attribute value\n\t\tcatalog_product_attribute\n\t\tMagento\\Catalog\\Model\\Indexer\\Product\\Eav\n\t\tReorganizes the EAV product structure to flat structure\n\t\n\t\n\t\tStock\n\t\tcataloginventory_stock\n\t\tMagento\\CatalogInventory\\Model\\Indexer\\Stock\n\t\t\n\t\n\t\n\t\tCatalog rule product\n\t\tcatalogrule_rule\n\t\tMagento\\CatalogRule\\Model\\Indexer\\Rule\\RuleProductIndexer\n\t\t\n\t\n\t\n\t\tCatalog product rule\n\t\tcatalogrule_product\n\t\tMagento\\CatalogRule\\Model\\Indexer\\Product\\ProductRuleIndexer\n\t\t\n\t\n\t\n\t\tCatalog search\n\t\tcatalogsearch_fulltext\n\t\tMagento\\CatalogSearch\\Model\\Indexer\\Fulltext\n\t\t\n\t\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/indexing.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-adminurl-html": {
      "title": "Display or change the Admin URI",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you run this command, you must Create or update the deployment configuration.\n\n  Display the Admin URI\n  This section discusses how to use the command line to display the Admin Uniform Resource Identifier (URI).\n\n  Command options:\n\n  magento info:adminuri\n  \n\n  A sample result follows:\n\n  Admin Panel URI: /admin_1wgrah\n  \n\n  You can also view the Admin URI in &lt;your Magento install dir&gt;/app/etc/env.php. A snippet follows:\n\n    'backend' =&gt;\n  array (\n    'frontName' =&gt; 'admin_1wgrah',\n  ),\n\n  Change the Admin URL\n  To change the Admin URI, use the magento setup:config:set command.\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Display or change the Admin URI\n    Enable or disable modules\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-adminurl.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-backup-html": {
      "title": "Back up and roll back the file system, media, and database",
      "content": "Overview of backup\nThis command enables you to back up:\n\n\n  The Magento file system (excluding var and pub/static directories)\n  The pub/media directory\n  The Magento 2 database\n\n\nBackups are stored in the var/backups directory and can be restored at any time using the magento setup:rollback command.\n\nAfter backing up, you can roll back at a later time.\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Set ulimit for the web server user\n  \n\n    Why to set ulimit\n    Rolling back to a previous backup can silently fail, resulting in incomplete data being written to the file system or database. (This includes all types of rollbacks, including using System Upgrade, Component Manager, or the magento setup:rollback command.)\n\n    In some cases, a very long query string causes the user’s allocated memory space to run out of memory because of too many recursive calls.\n\n    How to set ulimit\n    We recommend setting the ulimit for the Magento file system user to a value of 65536 or more.\n\n    You can do this either on the command line or you can make it a permanent setting for the user by editing their shell script.\n\n    Before you continue, if you haven’t done so already, switch to the Magento file system owner.\n\n    Command:\n\n    ulimit -s 65536\n    \n\n    You can change this to a larger value if needed.\n\n    \n   \tThe syntax for ulimit depends on the UNIX shell you use. The preceding setting should work with CentOS and Ubuntu with the Bash shell. However, for Mac OS, the correct setting is ulimit -S 65532. Consult a man page or operating system reference for more information.\n\n\n    To optionally set the value in the user’s Bash shell:\n\n    \n      If you haven’t done so already, switch to the Magento file system owner.\n      Open /home/&lt;username&gt;/.bashrc in a text editor.\n      \n        Add the following line:\n\n        ulimit -s 65536\n        \n      \n      Save your changes to .bashrc and exit the text editor.\n    \n\n    \n    We recommend you avoid setting a value for pcre.recursion_limit in php.ini because it can result in incomplete rollbacks with no failure notice.\n\n\n    Backing up\n    Command usage:\n\n    magento setup:backup [--code] [--media] [--db]\n    \n\n    The command performs the following tasks:\n\n    \n      Puts the store in maintenance mode.\n      \n        Executes one of the following command options.\n\n        \n\n\n\n\n    \n        Option\n        Meaning\n        Backup file name and location\n    \n\t\t\n\n    --code\n    Backs up the Magento file system (excluding var and pub/static directories).\n    var/backups/&lt;timestamp&gt;_filesystem.tgz\n\n\n    --media\n    Back up the pub/media directory.\n    var/backups/&lt;timestamp&gt;_filesystem_media.tgz\n\n\n\n    --db\n    Back up the Magento 2 database.\n    var/backups/&lt;timestamp&gt;_db.sql\n\n\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\n      \n      Takes the store out of maintenance mode.\n    \n\n    For example, to back up the file system and database,\n\n    magento setup:backup --code --db\n    \n\n    Messages similar to the following display:\n\n    Enabling maintenance mode\nCode backup is starting...\nCode backup filename: 1434133011_filesystem.tgz (The archive can be uncompressed with 7-Zip on Windows systems)\nCode backup path: /var/www/html/magento2/var/backups/1434133011_filesystem.tgz\n[SUCCESS]: Code backup completed successfully.\nDB backup is starting...\nDB backup filename: 1434133011_db.sql\nDB backup path: /var/www/html/magento2/var/backups/1434133011_db.sql\n[SUCCESS]: DB backup completed successfully.\nDisabling maintenance mode\n    \n\n    Roll back\n    This section discusses how to roll back to a backup you made previously. You must know the file name of the backup file to restore.\n\n    To find the name of your backups, enter:\n\n    magento info:backups:list\n    \n\n    The first string in the backup file name is the timestamp.\n\n    To roll back to a previous backup, enter:\n\n    magento setup:rollback [-c|--code-file=\"&lt;name&gt;\"] [-m|--media-file=\"&lt;name&gt;\"] [-d|--db-file=\"&lt;name&gt;\"]\n    \n\n    For example, to restore a media backup named 1440611839_filesystem_media.tgz, enter\n\n    magento setup:rollback -m 1440611839_filesystem_media.tgz\n    \n\n    Messages similar to the following display:\n\n    [SUCCESS]: Media rollback completed successfully.\nPlease set file permission of bin/magento to executable\nDisabling maintenance mode\n    \n\n    \n  If the command results in a Segmentation fault message, see Segmentation fault during rollback.\n\n\n    Related topics\n\n    \n      Installing the Magento software using the command line\n      Remove sample data modules or update sample data\n      Display or change the Admin URI\n      Enable or disable modules\n      Uninstall modules\n      Create or update the deployment configuration\n      Enable or disable maintenance mode\n      Create the Magento database schema\n      Update the Magento database schema and data\n      Configure the store\n      Create a Magento administrator\n      Uninstall themes\n      Uninstall language packages\n      Uninstall the Magento software\n      Update the Magento software\n      Reinstall the Magento software\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-backup.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-install-html": {
      "title": "Install the Magento software",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\nBefore you start your installation\n\nBefore you begin, make sure that:\n\n\n  Your system meets the requirements discussed in Magento system requirements.\n  You completed all prerequisite tasks discussed in Prerequisites.\n  You took your first installation steps as discussed in Your install or upgrade path.\n  After you log in to the Magento server, switch to the Magento file system owner.\n  Review the information discussed in Get started with the command-line installation.\n\n\n\n\n  You must install Magento from its bin subdirectory.\n\n\nThe installer is designed to be run multiple times if necessary so you can:\n\n\n  \n    Provide different values\n\n    For example, after you configure your web server for Secure Sockets Layer (SSL), you can run the installer to set SSL options.\n  \n  Correct mistakes in previous installations\n  Install Magento in a different database instance\n\n\n\n\n  By default, the installer doesn't overwrite the Magento database if you install the Magento software in the same database instance. You can use the optional cleanup-database parameter to change this behavior.\n  If you get errors during the installation, see Troubleshooting.\n\n\nSee also Update, reinstall, uninstall.\n\n\n\n  Completely secure installation\n  To use Secure Sockets Layer (SSL), also referred to as HTTPS, for both the Magento Admin and the storefront, you must set all of the following parameters:\n\n  \n    --use-secure: Set to 1\n    --base-url-secure: Set to a secure URL (that is, starting with https://)\n    --use-secure-admin Set to 1\n\n  \n\n  More details about these parameters can be found later in this topic.\n\n  Installer help commands\n  You can run the following commands to find values for some required arguments:\n\n  \n\n\t\n\t\tInstaller argument\n\t\tCommand\n\t\n\n\tLanguage\n\tmagento info:language:list\n\n\n\tCurrency\n\tmagento info:currency:list\n\n\n\tTime zone\n\tphp  magento info:timezone:list\n\n\n\n\n  \n\n  If an error displays when you run these commands, make sure you updated installation dependencies as discussed in Update installation dependencies.\n\n\n  Install the Magento software from the command line\n  The format of the install command follows:\n\n  magento setup:install --&lt;option&gt;=&lt;value&gt; ... --&lt;option&gt;=&lt;value&gt;\n  \n\n  The following table discusses the meanings of installation option names and values. Examples are provided in Sample localhost installations.\n\n  \n\n  Any options that contain spaces or special characters must be enclosed in either single or double quotes.\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tName\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\t\t\n\t\t--admin-firstname\n\t\tMagento administrator user's first name.\n\t\tYes\n\t\n\t\n\t\t--admin-lastname\n\t\tMagento administrator user's last name.\n\t\tYes\n\t\n\t\n\t\t--admin-email\n\t\tMagento administrator user's e-mail address.\n\t\tYes\n\t\n\t\n\t\t--admin-user\n\t\tMagento administrator user name.\n\t\tYes\n\t\n\t\n\t\t--admin-password\n\t\tMagento administrator user password.\n\t\t\tThe password must be at least 7 characters in length and must include at least one alphabetic and at least one numeric character.\n\t\t\tWe recommend a longer, more complex password. Enclose the entire password string in single quotes. For example, --admin-password='A0b9%t_3`g'\n\t\tYes\n\t\n\t\t\n\t\t--base-url\n\t\tBase URL to use to access your Magento Admin and storefront in any of the following formats:\n\t\thttp[s]://&lt;host or ip&gt;/&lt;your Magento install dir&gt;/.&lt;/p&gt;\n\t\tNote: The scheme (http:// or https://) and a trailing slash are both required.\n\t\t&lt;your Magento install dir&gt; is the docroot-relative path in which to install the Magento software. Depending on how you set up your web server and virtual hosts, the path might be magento2 or it might be blank.\n\t\tTo access Magento on localhost, you can use either http://127.0.0.1/&lt;your Magento install dir&gt;/ or http://127.0.0.1/&lt;your Magento install dir&gt;/.\n\t\t&#123;&#123;base_url&#125;&#125; which represents a base URL defined by a virtual host setting or by a virtualization environment like Docker. For example, if you set up a virtual host for Magento with the host name magento.example.com, you can install the Magento software with --base-url=&#123;&#123;base_url&#125;&#125; and access the Magento Admin with a URL like http://magento.example.com/admin.\n\n\t\t\n\t\tNo\n\t\n\t\n\t\t--backend-frontname\n\t\tUniform Resource Identifier (URI) to access the Magento Admin or omit this parameter to let Magento generate a random URI for you.\n\t\t\tWe recommend a random URI for security purposes. A random URI is harder for hackers or malicious software to exploit.\n\t\t\tThe URI displays at the end of the installation. You can display it later at any time using the magento info:adminuri command.\n\t\t\tIf you choose to enter a value, we recommend you not use a common word like admin, backend, and so on. The Admin URI can contain alphanumeric values and the underscore character (_) only. \n\t\tNo\n\t\n\t\n\t\t--db-host\n\t\tUse any of the following:\n\t\tThe database server's fully qualified host name or IP address.\n\t\tlocalhost (default) or 127.0.0.1 if your database server is on the same host as your web server.localhost means the MySQL client library uses UNIX sockets to connect to the database. 127.0.0.1 causes the client library to use the TCP protocol. For more information about sockets, see the PHP PDO_MYSQL documentation.\n\t\tNote: You can optionally specify the database server port in its host name like www.example.com:9000\n\n\t\tNo\n\t\n\t\n\t\t--db-name\n\t\tName of the Magento database instance in which you want to install the Magento database tables.\n\t\t\tDefault is magento2.\n\t\tNo\n\t\n\t\n\t\t--db-user\n\t\tUser name of the Magento database instance owner.\n\t\t\tDefault is root.\n\t\tNo\n\t\n\t\n\t\t--db-password\n\t\tMagento database instance owner's password.\n\t\tNo\n\t\n\t\n\t\t--db-prefix\n\t\tUse only if you're installing the Magento database tables in a database instance that has Magento tables in it already.\n\t\tIn that case, use a prefix to identify the Magento tables for this installation. Some customers have more than one Magento instance running on a server with all tables in the same database.\n\t\tThe prefix can be a maximum of five characters in length. It must begin with a letter and can include only letters, numbers, and underscore characters.\n\t\tThis option enables those customers to share the database server with more than one Magento installation.\n\t\tNo\n\t\n\n\t\n\t\t--language\n\t\tLanguage code to use in the Admin and storefront. (If you have not done so already, you can view the list of language codes by entering magento info:language:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--currency\n\t\tDefault currency to use in the storefront. (If you have not done so already, you can view the list of currencies by entering magento info:currency:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--timezone\n\t\tDefault time zone to use in the Admin and storefront. (If you have not done so already, you can view the list of time zones by entering magento info:timezone:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--use-rewrites\n\t\t1 means you use web server rewrites for generated links in the storefront and Admin.\n\t\t0 disables the use of web server rewrites. This is the default.\n\t\tNo\n\t\n\t\n\t\t--use-secure\n\t\t1 enables the use of Secure Sockets Layer (SSL) in storefront URLs. Make sure your web server supports SSL before you select this option.\n\t\t0 disables the use of SSL with Magento. In this case, all other secure URL options are assumed to also be 0. This is the default.\n\t\t\n\t\tNo\n\t\n\t\n\t\t--base-url-secure\n\t\tSecure base URL to use to access your Magento Admin and storefront in the following format:\n\t\thttp[s]://&lt;host or ip&gt;/&lt;your Magento install dir&gt;/\n\t\t\n\t\tNo\n\t\n\n\t\n\t\t--use-secure-admin\n\t\t1 means you use SSL to access the Magento Admin. Make sure your web server supports SSL before you select this option.\n\t\t0 means you do not use SSL with the Admin. This is the default.\n\t\tNo\n\t\n\t\n\t\t--admin-use-security-key\n\t\t1 causes the Magento software to use a randomly generated key value to access pages in the Magento Admin and in forms. These key values help prevent cross-site script forgery attacks. This is the default.\n\t\t0 disables the use of the key.\n\t\tNo\n\t\n\t\n\t\n\t\t--session-save\n\t\tUse any of the following:\n\t\tdb to store session data in the database. Choose database storage if you have a clustered database; otherwise, there might not be much benefit over file-based storage.\n\n\t\t\tfiles to store session data in the file system. File-based session storage is appropriate unless the Magento file system access is slow or you have a clustered database.\n\t\n\t\tNo\n\t\n\t\n\t\t--key\n\t\tIf you have one, specify a key to encrypt sensitive data in the Magento database. If you don't have one, Magento generates one for you.\n\t\tNo\n\t\n\t\n\t\t--cleanup-database\n\t\tTo drop database tables before installing the Magento software, specify this parameter without a value. Otherwise, the Magento database is left intact.\n\t\tNo\n\t\n\t\n\t\t--db-init-statements\n\t\tAdvanced MySQL configuration parameter. Uses database initialization statements to run when connecting to the MySQL database. Consult a reference similar to this one before you set any values.\n\t\t\tDefault is SET NAMES utf8;.\n\t\tNo\n\t\n\t\n\t\t--sales-order-increment-prefix\n\t\tSpecify a string value to use as a prefix for sales orders. Typically, this is used to guarantee unique order numbers for payment processors.\n\t\tNo\n\t\n\n--amqp-host\nMagento Commerce only. Do not use the `--amqp` options unless you have already set up an installation of RabbitMQ. See RabbitMQ installation for more information about installing and configuring RabbitMQ.\nThe host name where RabbitMQ is installed.\nNo\n\n\n--amqp-port\nMagento Commerce only. The port to use to connect to RabbitMQ. The default is 5672.\nNo\n\n\n--amqp-user\nMagento Commerce only. The user name for connecting to RabbitMQ. Do not use the default user guest.\nNo\n\n\n--amqp-password\nMagento Commerce only. The password for connecting to RabbitMQ. Do not use the default password guest.\nNo\n\n\t\n\n\n  \n\n  To enable or disable modules after installing Magento, see Enable and disable modules.\n  \t\n\n\n  \n\n    What is sensitive data?\n    Magento uses your encryption key to encrypt the following:\n\n    \n      Credit card information\n      User names and passwords specified in the Magento Admin configuration  (for example, logins to payment gateways)\n      CAPTCHA values sent over the network\n    \n\n    Magento does not encrypt:\n\n    \n      Administrative and customer user names and passwords (these passwords are hashed)\n      Address\n      Phone number\n      Other types of personally identifiable information except for credit card numbers\n    \n\n    Sample localhost installations\n\n    Example 1\n\n    The following example installs Magento with the following options:\n\n    \n      \n        The Magento software is installed in the magento2 directory relative to the web server docroot on localhost and the path to the Magento Admin is admin; therefore:\n\n        Your storefront URL is http://127.0.0.1\n      \n      \n        The database server is on the same host as the web server.\n\n        The database name is magento, and the user name and password are both magento\n      \n      \n        Uses server rewrites\n      \n      \n        The Magento administrator has the following properties:\n\n        \n          First and last name are Magento User\n          User name is admin and the password is admin123\n          E-mail address is user@example.com\n        \n      \n      Default language is en_US (U.S. English)\n      Default currency is U.S. dollars\n      \n        Default time zone is U.S. Central (America/Chicago)\n\n        magento setup:install --base-url=http://127.0.0.1/magento2/ \\\n--db-host=localhost --db-name=magento --db-user=magento --db-password=magento \\\n--admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n--admin-user=admin --admin-password=admin123 --language=en_US \\\n--currency=USD --timezone=America/Chicago --use-rewrites=1\n        \n      \n    \n\n    Messages similar to the following display to indicate a successful installation:\n\n    Post installation file permissions check...\nFor security, remove write permissions from these directories: '/var/www/html/magento2/app/etc'\n[Progress: 274 / 274]\n[SUCCESS]: Magento installation complete.\n[SUCCESS]: Admin Panel URI: /admin_puu71q\n    \n\n    Example 2 (with additional options)\n\n    The following example installs Magento with the following options:\n\n    \n      \n        The Magento software is installed in the magento2 directory relative to the web server docroot on localhost and the path to the Magento Admin is admin; therefore:\n\n        Your storefront URL is http://127.0.0.1\n      \n      \n        The database server is on the same host as the web server.\n\n        The database name is magento, and the user name and password are both magento\n      \n      \n        The Magento administrator has the following properties:\n\n        \n          First and last name are is Magento User\n          User name is admin and the password is admin123\n          E-mail address is user@example.com\n        \n      \n      Default language is en_US (U.S. English)\n      Default currency is U.S. dollars\n      Default time zone is U.S. Central (America/Chicago)\n      The installer first cleans up the database before installing the tables and schema\n      You use a sales order increment prefix ORD$ and because it contains a special character ($), the value must be enclosed in double quotes\n      Session data is saved in the database\n      \n        Uses server rewrites\n\n        magento setup:install --base-url=http://127.0.0.1/magento2/ \\\n--db-host=localhost --db-name=magento \\\n--db-user=magento --db-password=magento \\\n--admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n--admin-user=admin --admin-password=admin123 --language=en_US \\\n--currency=USD --timezone=America/Chicago --cleanup-database \\\n--sales-order-increment-prefix=\"ORD$\" --session-save=db --use-rewrites=1\n        \n      \n    \n\n    Messages similar to the following display to indicate a successful installation:\n\n    Post installation file permissions check...\nFor security, remove write permissions from these directories: '/var/www/html/magento2/app/etc'\n[Progress: 274 / 274]\n[SUCCESS]: Magento installation complete.\n[SUCCESS]: Admin Panel URI: /admin_puu71q\n    \n\n    \n\n  The command must be entered either on a single line or, as in the preceding example, with a \\ character at the end of each line.\n\n\n    Next step\n    \n      \n        If you have one user account to access the Magento server, see Optionally set a umask.\n\n        This type of setup is typical for shared hosting.\n      \n      \n        Verify the installation.\n      \n    \n\n    Related topics\n\n    \n      Installing the Magento software using the command line\n      Remove sample data modules or update sample data\n      Display or change the Admin URI\n      Enable or disable modules\n      Uninstall modules\n      Create or update the deployment configuration\n      Enable or disable maintenance mode\n      Create the Magento database schema\n      Update the Magento database schema and data\n      Configure the store\n      Create a Magento administrator\n      Back up and roll back the file system, media, and database\n      Uninstall themes\n      Uninstall language packages\n      Uninstall the Magento software\n      Update the Magento software\n      Reinstall the Magento software\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-install.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-sample-data-clone-html": {
      "title": "Install by cloning repositories",
      "content": "\n\n  Install sample data by cloning repositories\n  This topic discusses how to get the Magento sample data if you cloned the Magento GitHub repository. This method is intended only for contributing developers (that is, developers who plan to contribute to the Magento 2 codebase).\n\n  If you’re not a contributing developer, choose one of the other options displayed in the table of contents on the left side of the page.\n\n  Contributing developers can use this method of installing sample data only if all of the following are true:\n\n  \n    You use Magento Open Source\n    You cloned the Magento 2 repository.\n  \n\n  \n    You can use sample data with either the develop branch (more current) or a released branch (such as 2.0 or 2.0.1 (more stable)). We recommend you use a released branch because it's more stable. If you're contributing code to the Magento 2 repository and you need the most recent code, use the develop branch.\n    Regardless of the branch you choose, you must clone the corresponding branch of the Magento 2 GitHub repository. For example, sample data for the develop branch can be used only with the Magento 2 develop branch.\n\n\n  See the following sections:\n\n  \n    Clone the sample data repository\n    Set file system ownership and permissions\n  \n\n  Clone the sample data repository\n  This section discusses how to install Magento sample data by cloning the sample data repository. You can clone the sample data repository in any of the following ways:\n\n  \n    Clone with the SSH protocol\n    Clone with the HTTPS protocol\n  \n\n  Clone with SSH\n  To clone the Magento sample data GitHub repository using the SSH protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    Next to the name of the branch, click SSH from the list.\n    \n      Click Copy to clipboard\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n\n      Need help locating the docroot?\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone git@github.com:magento/magento2-sample-data.git\n      \n    \n    \n      Wait for the repository to clone on your server.\n\n      \n    If the following error displays, make sure you shared your SSH key with GitHub: \n        Cloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n    \n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n    \n    \n      Wait for the command to complete.\n    \n    See Set file system permissions and ownership.\n  \n\n  Clone with HTTPS\n  To clone the Magento sample data GitHub repository using the HTTPS protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    On the right side of the page, under the clone URL field, click HTTPS.\n    \n      Click Copy to clipboard.\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone https://github.com/magento/magento2-sample-data.git\n      \n    \n    Wait for the repository to clone on your server.\n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n\n      For example,\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"/var/www/magento2\"\n      \n    \n    Wait for the command to complete.\n    See the next section.\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  Set file system ownership and permissions\n  Because the php build-sample-data.php script creates symlinks between the sample data repository and your Magento 2 repository, you must set file system permissions and ownership in the sample data repository. Failure to do so results in errors accessing the storefront.\n\n  To set file system permissions and ownership on the sample data repository:\n\n  \n    Change to your sample data clone directory.\n    \n      Set ownership:\n\n      chown -R :&lt;your web server group name&gt; .\n      \n\n      Typical examples:\n\n      CentOS: chown -R :apache .\n\n      Ubuntu: chown -R :www-data .\n    \n    \n      Set permissions:\n\n      find . -type d -exec chmod g+ws {} \\;\n      \n    \n    \n      Clear static files:\n\n      cd &lt;your Magento Open Source install dir&gt;/var\nrm -rf cache/* page_cache/* generation/*\n      \n    \n  \n\n  \n\n  Install the Magento software\n  After sample data installation is complete, install the Magento software using the command line.\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-sample-data-clone.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-sample-data-composer-html": {
      "title": "Install using Composer",
      "content": "\n\n  This section discusses how to install sample data if you got the Magento software in any of the following ways:\n\n  \n    \n      Downloaded a compressed archive from Magento.\n\n      If you downloaded an archive from Github, this method won’t work because the composer.json file doesn’t contain the repo.magento.com URL.\n    \n    \n      Used composer create-project\n    \n  \n\n  You can use this method of getting sample data for both Magento Open Source or Magento Commerce, but you must use the same authentication keys you used to install Magento.\n\n  \n    If you encounter errors, such as Could not find package... or ...no matching package found..., make sure there aren’t any typos in your command. If you still encounter errors, you may not have access to the right Composer repositories, especially if your using Magento Commerce. Contact Magento support for help.\n  \n\n  You can use Composer to install sample data either before or after installing Magento; however, there might be additional tasks.\n\n  If you’re a contributing developer, refer to Install by cloning repositories.\n\n  \n    Do not install sample data if your Magento application is set for production mode. Switch to developer mode first. Installing sample data in production mode fails.\n\n\n  To install sample data using the command line, enter the following command as the Magento file system owner:\n\n  php &lt;your Magento install dir&gt;/bin/magento sampledata:deploy\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  You are required to authenticate to complete the action.\n\n  Authentication error\n  The following authentication error might display:\n\n  [Composer\\Downloader\\TransportException]\nThe 'https://repo.magento.com/packages.json' URL required authentication.\nYou must be using the interactive console to authenticate\n  \n\n  If the error displays, change to your Magento installation directory and run composer update, which will prompt you for your authentication keys.\n\n  Install the Magento software\n  After sample data installation is complete, install the Magento software using the command line.\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-sample-data-composer.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-sample-data-other-html": {
      "title": "Remove sample data modules or update sample data",
      "content": "\n\n  Remove sample data modules or update sample data\n\n  This topic discusses how to:\n\n  \n    \n      Remove sample data modules from the Magento installation composer.json\n\n      This option does not remove sample data from the database.\n    \n    \n      Prepare to update sample data (for example, before updating the Magento application).\n    \n  \n\n  First steps\n\n  \n\n    \n      \n        Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n        If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n        su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n        \n\n        If the Magento file system owner does not allow logins you can do the following:\n\n        sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n        \n      \n      \n        To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n        Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n        bash shell example for CentOS:\n\n        export PATH=$PATH:/var/www/html/magento2/bin\n        \n      \n    \n\n    \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n    Remove sample data modules\n    Enter the following command:\n\n    magento sampledata:remove \n    \n\n    \n\n    Prepare to update sample data\n    This command enables you to update sample data before you update the Magento application.\n\n    To prepare sample data for updating, enter the following command:\n\n    magento sampledata:reset\n    \n\n    After that, update the Magento application.\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-sample-data-other.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-sample-data-html": {
      "title": "Install optional sample data modules",
      "content": "\n\n  Introduction to Magento sample data\n  Magento sample data provides a storefront based on the Luma theme outfitted with products, categories, customer registration, and so on. It functions just like a Magento storefront and you can manipulate prices, inventory, and promotional pricing rules using the Magento Admin.\n\n  You can install sample data either before or after installing the Magento software. When you’re done with the sample data, you can either remove it or you can install it fresh as discussed in Remove sample data modules or update sample data.\n\n  \n    There is currently no way to uninstall sample data. We recommend you use sample data only to learn about how Magento works. Avoid doing any development in a system in which you installed sample data.\n\n\n  You can install optional sample data in any of the following ways:\n\n  \n\t\n\t\t\n\t\t\tInstallation method\n\t\t\tDescription\n\t\t\tRequired skill level\n\t\t\n\t\t\n\t\n\t\tUsing Composer\n\t\tRun magento sampledata:deploy to modify Magento's root composer.json to enable sample data modules.\n\t\tRequires Composer knowledge and access to the Magento file system.\n\t\n\t\n\t\tCloning repositories\n\t\tClone the Magento 2 repository and the sample data repository, then link them together.\n\t\tFor contributing developers only. Everyone else should use one of the preceding methods.\n\t\n\t\n\n\n  \n\n  For more detail about these options, see:\n\n  \n    Install using Composer\n    Install by cloning repositories\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-sample-data.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-admin-html": {
      "title": "Create, edit, or unlock a Magento administrator account",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you can use this command, you must do all of the following:\n\n  \n    Create the deployment configuration\n    Enable at minimum the Magento_Authorization and Magento_User modules\n    Create the Magento database schema\n  \n\n  \n    The simplest way to create the database is to use the command magento setup:upgrade.\n  \n\n  Create or edit an administrator\n  Use this command to create a new administrator or to edit an existing administrator. If you’re editing an administrator, only the first name, last name, and password can be edited.\n\n  Command usage:\n\n  magento admin:user:create [--&lt;parameter_name&gt;=&lt;value&gt;, ...]\n  \n\n  Where the following table defines parameters and values:\n\n  \n  \n  \n  \n  \n    \n      Name\n      Value\n      Required?\n    \n    \n      \n        --admin-firstname\n      \n      \n        Magento administrator user's first name.\n      \n      \n        Yes\n      \n    \n    \n      \n        --admin-lastname\n      \n      \n        Magento administrator user's last name.\n      \n      \n        Yes\n      \n    \n    \n      \n        --admin-email\n      \n      \n        Magento administrator user's e-mail address.\n      \n      \n        Yes\n      \n    \n    \n      \n        --admin-user\n      \n      \n        Magento administrator user name.\n      \n      \n        Yes\n      \n    \n    \n      \n        --admin-password\n      \n      \n        Magento administrator user password.\n        The password must be at least 7 characters in length and must include at least one alphabetic and at least one numeric character.\n        We recommend a longer, more complex password. Enclose the entire password string in single quotes. For example, --admin-password=''A0b9%t_3g'.\n      \n      \n        Yes\n      \n    \n  \n\n\n  Unlock an administrator account\n  Use this command to unlock the account of an administrator that was locked, typically because of multiple incorrect login attempts.\n\n  magento admin:user:unlock {user name}\n  \n\n  You must specify the administrator’s user name. Example:\n\n  magento admin:user:unlock admin\nThe user account \"admin\" has been unlocked\n  \n\n  If the account is either not unlocked or if there was a problem, the following message displays:\n\n  The user account \"admin\" was not locked or could not be unlocked\n  \n\n  Verify the user is an administrator, the user is active, and that the account is currently locked. To view the list of locked users in the Admin, log in as an administrator and click System &gt; Permissions &gt; Locked Users.\n\n  If the account doesn’t exist, the following message displays:\n\n  Couldn't find the user account \"bob\"\n  \n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-admin.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-db-upgr-html": {
      "title": "Update the Magento database schema and data",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you use this command, you must install the Magento software.\n\n  Upgrade the Magento database schema and data\n  Anytime you perform an action that causes the Magento database schema or data to change, you must update them by running the command discussed in this section. A partial list of reasons follows:\n\n  \n    You upgraded the Magento software using the command line\n    You installed or updated a component using the command line\n    You enabled or disabled a component using the command line\n  \n\n  Note the following:\n\n  \n    If you used the Web Setup Wizard to do any of the preceding, you don’t have to use the command discussed in this topic.\n    A Magento component can be a module, theme, or language pack; it doesn’t matter whether the component comes from the Magento Marketplace or not\n  \n\n  Command usage:\n\n  magento setup:upgrade [--keep-generated]\n  \n\n  where --keep-generated is an optional argument that does not update static view files. This optional argument is for use only in limited circumstances by experienced system integrators. It should be used only in production mode. It should not be used in developer mode.\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-db-upgr.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-db-html": {
      "title": "Create the Magento database schema",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you run this command, you must Create or update the deployment configuration.\n\n  Configure the database and add data\n  Command usage:\n\n  magento setup:db-schema:upgrade\nmagento setup:db-data:upgrade\n  \n\n  To see the status of the database, enter\n\n  magento setup:db:status\n  \n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-db.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-deployment-html": {
      "title": "Create or update the deployment configuration",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  There are no prerequisites for using this command.\n\n  Create or update the Magento deployment configuration\n  Magento’s deployment configuration provides the information Magento needs to initialize and bootstrap.\n\n  You can use this command if:\n\n  \n    You previously installed the Magento software and you want to modify the deployment configuration\n    If you want to create only the deployment configuration and continue the Magento installation some other way\n    To update the deployment configuration without affecting anything else\n  \n\n  Command options:\n\n  magento setup:config:set [--&lt;parameter&gt;=&lt;value&gt;, ...]\n  \n\n  The following table discusses the meanings of installation parameters and values.\n\n  \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tParameter\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\n\t\n\t\t--backend-frontname\n\t\tUniform Resource Identifier (URI) to access the Magento Admin.\n\t\t\tTo prevent exploits, we recommend you not use a common word like admin, backend, and so on. The Admin URI can contain alphanumeric values and the underscore character (_) only. \n\t\tNo\n\t\n\t\n\t\t--db-host\n\t\tUse any of the following:\n\t\tThe database server's fully qualified host name or IP address.\n\t\tlocalhost (default) or 127.0.0.1 if your database server is on the same host as your web server.localhost means the MySQL client library uses UNIX sockets to connect to the database. 127.0.0.1 causes the client library to use the TCP protocol. For more information about sockets, see the PHP PDO_MYSQL documentation.\n\t\tNote: You can optionally specify the database server port in its host name like www.example.com:9000\n\n\t\tNo\n\t\n\t\n\t\t--db-name\n\t\tName of the Magento database instance in which you want to install the Magento database tables.\n\t\t\tDefault is magento2.\n\t\tNo\n\t\n\t\n\t\t--db-user\n\t\tUser name of the Magento database instance owner.\n\t\t\tDefault is root.\n\t\tNo\n\t\n\t\n\t\t--db-password\n\t\tMagento database instance owner's password.\n\t\tNo\n\t\n\t\n\t\t--db-prefix\n\t\tUse only if you're installing the Magento database tables in a database instance that has Magento tables in it already.\n\t\tIn that case, use a prefix to identify the Magento tables for this installation. Some customers have more than one Magento instance running on a server with all tables in the same database.\n\t\tThe prefix can be a maximum of five characters in length. It must begin with a letter and can include only letters, numbers, and underscore characters.\n\t\tThis option enables those customers to share the database server with more than one Magento installation.\n\t\tNo\n\t\n\t\n\t\t--session-save\n\t\tUse any of the following:\n\t\tdb to store session data in the database. Choose database storage if you have a clustered database; otherwise, there might not be much benefit over file-based storage.\n\n    files to store session data in the file system. File-based session storage is appropriate unless the Magento file system access is slow oe you have a clustered database.\n    \n\t\n\t\tNo\n\t\n\t\n\t\t--key\n\t\tIf you have one, specify a key to encrypt sensitive data in the Magento database. If you don't have one, Magento generates one for you.\n\t\tNo\n\t\n\t\n\t\n\t\t--db-init-statements\n\t\tAdvanced MySQL configuration parameter. Uses database initialization statements to run when connecting to the MySQL database.\n\t\t\tDefault is SET NAMES utf8;.\n\t\t\tConsult a reference similar to this one before you set any values.\n\t\tNo\n\t\n\t\n\t\t--http-cache-hosts\n\t\tComma-separated list of HTTP cache gateway hosts to which to send purge requests. (For example, Varnish servers.) Use this parameter to specify the host or hosts to purge in the same request. (It doesn't matter if you have only one host or many hosts.)\n\t\t\tFormat must be &lt;hostname or ip&gt;:&lt;listen port&gt;, where you can omit &lt;listen port&gt; if it's port 80. For example, --http-cache-hosts=192.0.2.100,192.0.2.155:6081. Do not separate hosts with a space character. \n\t\tNo\n\t\n\t\n\n\n  \n\n    What is sensitive data?\n    Magento uses your encryption key to encrypt the following:\n\n    \n      Credit card information\n      User names and passwords specified in the Magento Admin configuration  (for example, logins to payment gateways)\n      CAPTCHA values sent over the network\n    \n\n    Magento does not encrypt:\n\n    \n      Administrative and customer user names and passwords (these passwords are hashed)\n      Address\n      Phone number\n      Other types of personally identifiable information except for credit card numbers\n    \n\n    If applicable, continue your Magento software installation:\n\n    \n      Command line installation\n      Setup Wizard installation\n    \n\n    \n\n    Related topics\n\n    \n      Installing the Magento software using the command line\n      Remove sample data modules or update sample data\n      Enable or disable modules\n      Display or change the Admin URI\n      Uninstall modules\n      Enable or disable maintenance mode\n      Create the Magento database schema\n      Update the Magento database schema and data\n      Configure the store\n      Create or unlock a Magento administrator\n      Back up and roll back the file system, media, and database\n      Uninstall themes\n      Uninstall language packages\n      Uninstall the Magento software\n      Update the Magento software\n      Reinstall the Magento software\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-deployment.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-enable-html": {
      "title": "Enable or disable modules",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  This command has no prerequisites.\n\n  Module enable, disable\n  To enable or disable available modules, use the following command:\n\n  magento module:enable [-c|--clear-static-content] [-f|--force] [--all] &lt;module-list&gt;\nmagento module:disable [-c|--clear-static-content] [-f|--force] [--all] &lt;module-list&gt;\n  \n\n  where\n\n  \n    &lt;module-list&gt; is a space-delimited list of modules to enable or disable. If any module name contains special characters, enclose the name in either single or double quotes.\n    --all to enable or disable all modules at the same time.\n    -f or --force to force a module to be enabled or disabled despite dependencies. Before you use this option, see About enabling and disabling modules.\n    \n      -c or --clear-static-content cleans generated static view files.\n\n      Failure to clear static view files might result in issues if there are multiple files with the same name and you don’t clear all of them.\n\n      In other words, because of static file fallback rules, if you do not clear static files and there is more than one file named logo.gif that are different, fallback might cause the wrong file to display.\n    \n  \n\n  Use the following command to list enabled and disabled modules:\n\n  magento module:status\n  \n\n  For example, to disable the Weee module, enter:\n\n  magento module:disable Magento_Weee\n  \n\n  For important information about enabling and disabling modules, see About enabling and disabling modules.\n\n  Update the database\n  If you enabled one or more modules, run the following command to update the database:\n\n  magento setup:upgrade\n  \n\n  About enabling and disabling modules\n  Magento enables you to enable or disable currently available modules; in other words, any Magento-provided module or any third-party module that is currently available.\n  Certain modules have dependencies on other modules, in which case you might not be able to enable or disable a module because it has dependencies on other modules. \n  In addition, there might be conflicting modules that cannot both be enabled at the same time.\n  Examples:\n  Module A depends on Module B. You cannot disable Module B unless you first disable Module A.\n\tModule A depends on Module B, both of which are disabled. You must enable module B before you can enable module A.\n\tModule A conflicts with Module B. You can disable Module A and Module B, or you can disable either module but you cannot enable Module A and Module B at the same time.\n\n  Dependencies are declared in the require field in Magento's composer.json file for each module. Conflicts are declared in the conflict field in modules' composer.json files. We use that information to build a dependency graph:\n  A-&gt;B means module A depends on module B.\n\tA dependency chain is the path from a module to another one. For example, if module A depends on module B and module B depends on module C, then the dependency chain is A-&gt;B-&gt;C.\n  If you attempt to enable or disable a module that depends on other modules, the dependency graph displays in the error message.\n  \n\n  It's possible that module A's composer.json declares a conflict with module B but not vice versa.\n\n\n  Command line module enable or disable subcommand only: To force a module to be enabled or disabled regardless of its dependencies, use the optional --force argument.\n\n  \n    Using --force can disable your Magento store and cause problems accessing the Magento Admin.\n\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-enable.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-maint-html": {
      "title": "Enable or disable maintenance mode",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you use this command, you must install the Magento software.\n\n  Enable or disable maintenance mode\n  Magento uses maintenance mode to disable bootstrapping; for example, while you’re maintaining, upgrading, or reconfiguring your site.\n\n  Magento detects maintenance mode as follows:\n\n  \n    If var/.maintenance.flag does not exist, maintenance mode is off and Magento operates normally.\n    \n      Otherwise, maintenance mode is on unless var/.maintenance.ip exists:\n\n      var/.maintenance.ip can contain a list of IP addresses. If an entry point is accessed using HTTP and the client IP address corresponds to one of the entries in that list, then maintenance mode is off.\n    \n  \n\n  Command usage:\n\n  magento maintenance:enable [--ip=&lt;ip address&gt; ... --ip=&lt;ip address&gt;] | [ip=none]\nmagento maintenance:disable [--ip=&lt;ip address&gt; ... --ip=&lt;ip address&gt;] | [ip=none]\nmagento maintenance:status\n  \n\n  where\n\n  --ip=&lt;ip address&gt; is an IP address to exempt from maintenance mode (for example, developers doing the maintenance). To exempt more than one IP address in the same command, use the option multiple times.\n\n  \n\n  Using --ip=&lt;ip address&gt; with magento maintenance:disable means only that you're saving the list of IPs for later use.\n  \tTo clear the list of exempt IPs, you can use magento maintenance:enable --ip=none or see Maintain the list of exempt IP addresses.\n\n\n  magento maintenance:status displays the current status of maintenance mode.\n\n  For example, to enable maintenance mode with no IP address exemptions:\n\n  magento maintenance:enable\n  \n\n  To enable maintenance mode for all clients except 192.0.2.10 and 192.0.2.11:\n\n  magento maintenance:enable --ip=192.0.2.10 --ip=192.0.2.11\n  \n\n  Maintain the list of exempt IP addresses\n  To maintain the list of exempt IP addresses, you can either use the [--ip=&lt;ip list&gt;] option in the preceding commands or you can use the following:\n\n  magento maintenance:allow-ips &lt;ip address&gt; .. &lt;ip address&gt; [--none]\n  \n\n  where\n\n  &lt;ip address&gt; .. &lt;ip address&gt; is an optional space-delimited list of IP addresses to exempt.\n\n  --none clears the list.\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-maint.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-store-html": {
      "title": "Configure the store",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you run this command, you must do all of the following or you must install the Magento software:\n\n  \n    Create or update the deployment configuration\n    Create the Magento database schema\n  \n\n  \n\n    Completely secure installation\n    To use Secure Sockets Layer (SSL), also referred to as HTTPS, for both the Magento Admin and the storefront, you must set all of the following parameters:\n\n    \n      --use-secure: Set to 1\n      --base-url-secure: Set to a secure URL (that is, starting with https://)\n      --use-secure-admin Set to 1\n\n    \n\n    More details about these parameters can be found later in this topic.\n\n    Configure the store\n    Command usage:\n\n    magento setup:store-config:set [--&lt;parameter_name&gt;=&lt;value&gt;, ...]\n    \n\n    where the following table defines parameters and values.\n\n    \n\t\n\t\n\t\n\t\n\t\t\n\t\t\tName\n\t\t\tValue\n\t\t\tRequired?\n\t\t\n\t\t\n\t\t--base-url\n\t\tBase URL to use to access your Magento Admin and storefront in any of the following formats:\n\t\thttp[s]://&lt;host or ip&gt;/&lt;your Magento install dir&gt;/.\n\t\tNote: The scheme (http:// or https://) and a trailing slash are both required.\n\t\t&lt;your Magento install dir&gt; is the docroot-relative path in which to install the Magento software. Depending on how you set up your web server and virtual hosts, the path might be magento2 or it might be blank.\n\t\tTo access Magento on localhost, you can use http://127.0.0.1/&lt;your Magento install dir&gt;/.\n\t\t&#123;&#123;base_url&#125;&#125; which represents a base URL defined by a virtual host setting or by a virtualization environment like Docker. For example, if you set up a virtual host for Magento with the host name magento.example.com, you can install the Magento software with --base-url=&#123;&#123;base_url&#125;&#125; and access the Magento Admin with a URL like http://magento.example.com/admin.\t\t\n\t\tNo\n\t\n\t\n\t\t--language\n\t\tLanguage code to use in the Admin and storefront.\n\t\t\t(If you have not done so already, you can view the list of language codes by entering magento info:language:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--currency\n\t\tDefault currency to use in the storefront. \n\t\t\t(If you have not done so already, you can view the list of currencies by entering magento info:currency:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--timezone\n\t\tDefault time zone to use in the Admin and storefront. (If you have not done so already, you can view the list of time zones by entering magento info:timezone:list from the bin directory.)\n\t\tNo\n\t\n\t\n\t\t--use-rewrites\n\t\t1 means you use web server rewrites for generated links in the storefront and Admin.\n\t\t0 disables the use of web server rewrites. This is the default.\n\t\tNo\n\t\n\t\n\t\t--use-secure\n\t\t1 enables the use of Secure Sockets Layer (SSL) in storefront URLs. Make sure your web server supports SSL before you select this option.\n\t\t0 disables the use of SSL with Magento. In this case, all other secure URL options are assumed to also be 0. This is the default.\n\t\tNo\n\t\n\t\n\t\t--base-url-secure\n\t\tSecure base URL to use to access your Magento Admin and storefront in the following format:\n\t\thttp[s]://&lt;host or ip&gt;/&lt;your Magento install dir&gt;/\n\t\tNo\n\t\n\n\t\n\t\t--use-secure-admin\n\t\t1 means you use SSL to access the Magento Admin. Make sure your web server supports SSL before you select this option.\n\t\t0 means you do not use SSL with the Admin. This is the default.\n\t\tNo\n\t\n\t\n\n\n    Related topics\n\n    \n      Installing the Magento software using the command line\n      Remove sample data modules or update sample data\n      Enable or disable modules\n      Display or change the Admin URI\n      Uninstall modules\n      Create or update the deployment configuration\n      Enable or disable maintenance mode\n      Create the Magento database schema\n      Update the Magento database schema and data\n      Create or unlock a Magento administrator\n      Back up and roll back the file system, media, and database\n      Uninstall themes\n      Uninstall language packages\n      Uninstall the Magento software\n      Update the Magento software\n      Reinstall the Magento software\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands-store.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-subcommands-html": {
      "title": "Get started with the command-line installation",
      "content": "Before you start your installation\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nAfter you log in to the Magento server, switch to a user that has permissions to write to the Magento file system. One way to do this is discussed in switch to the Magento file system owner.\n\n\n\nThe installer is designed to be run multiple times if necessary so you can:\n\n\n  \n    Provide different values\n\n    For example, after you configure your web server for Secure Sockets Layer (SSL), you can run the installer to set SSL options.\n  \n  Correct mistakes in previous installations\n  Install Magento in a different database instance\n\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Command summary\n  The following table summarizes the available commands. Commands are shown in summary form only; for more information about a command, click the link in the Command column.\n\n  \n\t\n  \t\n  \t\n\t\n\t\t\n\t\t\tCommand\n\t\t\tDescription\n\t\t\tPrerequisites\n\t\t\n\t\t\n\t\n\t\tmagento setup:install\n\t\tInstalls the Magento software\n\t\tNone\n\t\n\t\n\t\tmagento setup:uninstall\n\t\tRemoves the Magento software.\n\t\tMagento software installed\n\t\n\t\n\t\tmagento setup:upgrade\n\t\tUpdates the Magento software.\n\t\tDeployment configuration\n\t\n\t\n\t\tmagento maintenance:{enable|disable}\n\t\tEnables or disables maintenance mode (in maintenance mode, only exempt IP addresses can access the Magento Admin or storefront).\n\t\tMagento software installed\n\t\n\t\n\t\tmagento setup:config:set\n\t\tCreates or updates the deployment configuration.\n\t\tNone\n\t\n\t\n\t\tmagento module:{enable|disable}\n\t\tEnable or disable modules.\n\t\tNone\n\t\n\t\n\t\tmagento setup:store-config:set\n\t\tSets storefront-related options, such as base URL, language, timezone, and so on.\n\t\tDeployment configuration\n\t\t\tDatabase (simplest way is to use magento setup:upgrade)\n\t\t\t\t\n\t\n\t\n\t\tmagento setup:db-schema:upgrade\n\t\tUpdates the Magento database schema.\n\t\tDeployment configuration\n\t\n\t\n\t\tmagento setup:db-data:upgrade\n\t\tUpdates the Magento database data.\n\t\tDeployment configuration\n\t\n\t\n\t\tmagento setup:db:status\n\t\tChecks if the database is up-to-date with the code.\n\t\tDeployment configuration\n\t\n\t\n\t\tmagento admin:user:create\n\t\tCreates a Magento administrator.\n\t\tAll of the following:\n\t\t\tDeployment configuration\n\t\t\t\tEnable at minimum the Magento_User and Magento_Authorization modules\n\t\t\t\tDatabase (simplest way is to use magento setup:upgrade)\n\t\t\t\t\n\t\n\t\n\t\tmagento list\n\t\tLists all available commands.\n\t\tNone\n\t\n\t\n\t\tmagento help\n\t\tProvides help for the specified command.\n\t\tNone\n\t\n\t\n\t\n\t\n\n\n  Help commands\n  To display a complete list of commands, enter:\n  magento --list\n  To get help for a particular command, enter:\n  magento --help &lt;command&gt;\n  For example,\n  magento --help setup:install\nmagento --help cache:enable\n\n  Common arguments\n  The following arguments are common to all commands. These commands can be run either before or after the Magento software is installed:\n  \n\t\n\t\t\n  \t\t\n  \t\t\n\t\t\n\t\t\tLong version\n\t\t\tShort version\n\t\t\tMeaning\n\t\t\n\t\t\n\t\n\t\t--help\n\t\t-h\n\t\tGet help for any command. For example, ./magento help setup:install or ./magento help setup:config:set.\n\t\n\t\n\t\t--quiet\n\t\t-q\n\t\tQuiet mode; no output.\n\t\n\t\n\t\t--no-interaction\n\t\t-n\n\t\tNo interactive questions.\n\t\n\t\n\t\t--verbose=1|2|3\n\t\t-v|vv|vvv\n\t\tVerbosity level. For example, --verbose=3 or -vvv displays debug verbosity, which is the most verbose output. Default is --verbose=1 or -v.\n\t\n\t\n\t\t--version\n\t\t-V\n\t\tDisplay this application version\n\t\n\t\n\t\t--ansi\n\t\tn/a\n\t\tForce ANSI output\n\t\n\t\t\n\t\t--no-ansi\n\t\tn/a\n\t\tDisable ANSI output\n\t\n\t\n\t\n\t\n\n\n  Commands\n  The following sections discuss the available commands.\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-subcommands.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-theme-uninstall-html": {
      "title": "Uninstall themes Composer packages",
      "content": "Prerequisite\nBefore you use this command, you must know the relative path to your theme. Themes are located in a subdirectory of &lt;your Magento install dir&gt;/app/design/&lt;area name&gt;. You must specify the path to the theme starting with the area, which is either frontend (for storefront themes) or adminhtml (for Magento Admin themes).\n\nFor example, the path to the Luma theme provided with Magento 2 is frontend/Magento/luma.\n\nFor more information about themes, see Magento theme structure.\n\nOverview of uninstalling themes\nThis section discusses how to uninstall one or more themes, optionally including the themes’ code from the file system. You can create backups first so you can restore the data at a later time.\n\nThis command uninstalls only themes that are specified in composer.json; in other words, themes that are provided as Composer packages. If your theme is not a Composer package, you must uninstall it manually by:\n\n\n  Updating the parent node information in theme.xml to remove references to the theme.\n  \n    Removing theme code from the file system.\n\n    More information about theme inheritance.\n  \n\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Uninstall themes\n  Command usage:\n\n  magento theme:uninstall [--backup-code] [-c|--clear-static-content] {theme path} ... {theme path}\n  \n\n  where\n\n  \n    {theme path} is the relative path to the theme, starting with the area name. For example, the path to the Blank theme supplied with Magento 2 is frontend/Magento/blank.\n    --backup-code backs up the Magento 2 codebase as discussed in the paragraphs that follow.\n    --clear-static-content cleans generated static view files, which is necessary to cause static view files to display properly.\n  \n\n  The command performs the following tasks:\n\n  \n    Verifies that the specified theme paths exist; if not, the command terminates.\n    Verifies that the theme is a Composer package; if not, the command terminates.\n    \n      Checks for dependencies; if there are any, the command terminates.\n\n      To work around this, you can either uninstall all themes at the same time or you can uninstall the depending theme first.\n    \n    Verifies that the theme is not being used; if it is being used, the command terminates.\n    Verifies that the theme is not the base of the virtual theme; if it is the base of a virtual theme, the command terminates.\n    Puts the store in maintenance mode.\n    \n      If --backup-code is specified, backs up the Magento 2 codebase, excluding the pub/static, pub/media, and var directories.\n\n      The backup file name is var/backups/&lt;timestamp&gt;_filesystem.tgz\n\n      You can restore backups at any time using the magento setup:rollback command.\n    \n    Removes themes from the theme database table.\n    Remove themes from code base using composer remove.\n    Cleans the cache.\n    Cleans generated classes\n    If --clear-static-content is specified, cleans generated static view files.\n  \n\n  For example, if you attempt to uninstall a theme that another theme depends on, the following message displays:\n\n  Cannot uninstall frontend/ExampleCorp/SampleModuleTheme because the following package(s) depend on it:\n    ExampleCorp/sample-module-theme-depend\n  \n\n  One alternative is to uninstall both themes at the same time as follows after backing up the Magento codebase:\n\n  magento theme:uninstall frontend/ExampleCorp/SampleModuleTheme frontend/ExampleCorp/SampleModuleThemeDepend --backup-code\n  \n\n  Messages similar to the following display:\n\n  Code backup is starting...\nCode backup filename: 1435261098_filesystem_code.tgz (The archive can be uncompressed with 7-Zip on Windows systems)\nCode backup path: /var/www/html/magento2/var/backups/1435261098_filesystem_code.tgz\n[SUCCESS]: Code backup completed successfully.Removing frontend/ExampleCorp/SampleModuleTheme, frontend/ExampleCorp/SampleModuleThemeDepend from database\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nRemoving frontend/ExampleCorp/SampleModuleTheme, frontend/ExampleCorp/SampleModuleThemeDepend from Magento codebase\n  - Removing ExampleCorp/sample-module-theme-depend (dev-master)\nRemoving ExampleCorp/SampleThemeDepend\n  - Removing ExampleCorp/sample-module-theme (dev-master)\nRemoving ExampleCorp/SampleTheme\nWriting lock file\nGenerating autoload files\nCache cleared successfully.\nAlert: Generated static view files were not cleared. You can clear them using the --clear-static-content option.\nFailure to clear static view files might cause display issues in the Admin and storefront.\nDisabling maintenance mode\n  \n\n  \n  To uninstall a Magento Admin theme, you must also remove it from your component's dependency injection configuration, &lt;component root directory&gt;/etc/di.xml.\n\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-theme-uninstall.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-uninstall-langpk-html": {
      "title": "Uninstall language packages",
      "content": "Overview of uninstalling language packages\nThis section discusses how to uninstall one or more language packages, optionally including the language packages’ code from the file system. You can create backups first so you can restore the data at a later time.\n\nThis command uninstalls only language packages that are specified in composer.json; in other words, language packages that are provided as Composer packages. If your language package is not a Composer package, you must uninstall it manually by removing language package code from the file system.\n\nYou can restore backups at any time using the magento setup:rollback command.\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Uninstall language packages\n  Command usage:\n\n  magento i18n:uninstall [-b|--backup-code] {language package name} ... {language package name}\n  \n\n  The language package uninstall command performs the following tasks:\n\n  \n    \n      Checks for dependencies; if so, the command terminates.\n\n      To work around this, you can either uninstall all dependent language packages at the same time or you can uninstall the depending language packages first.\n    \n    If --backup code is specified, backs up the Magento file system (excluding var and pub/static directories) to var/backups/&lt;timestamp&gt;_filesystem.tgz\n    Removes language packages files from the codebase using composer remove.\n    Cleans the cache.\n  \n\n  For example, if you attempt to uninstall a language package that another language package depends on, the following message displays:\n\n  Cannot uninstall vendorname/language-en_us because the following package(s) depend on it:\n    vendorname/language-en_gb\n  \n\n  One alternative is to uninstall both language packages after backing up the Magento codebase:\n\n  magento i18n:uninstall vendorname/language-en_us vendorname/language-en_gb --backup-code\n  \n\n  Messages similar to the following display:\n\n  Code backup is starting...\nCode backup filename: 1435261098_filesystem_code.tgz (The archive can be uncompressed with 7-Zip on Windows systems)\nCode backup path: /var/www/html/magento2/var/backups/1435261098_filesystem_code.tgz\n[SUCCESS]: Code backup completed successfully.\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Removing vendorname/language-en_us (dev-master)\nRemoving Magento/LanguageEn_us\n  - Removing vendorname/language-en_br (dev-master)\n\tRemoving vendorname/language-en_br (dev-master)\nWriting lock file\nGenerating autoload files\n  \n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Uninstall modules\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-uninstall-langpk.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-uninstall-mods-html": {
      "title": "Uninstall modules",
      "content": "Prerequisites\nBefore you use this command, you must install the Magento software.\n\nOverview of uninstalling modules\nThis section discusses how to uninstall one or more modules. During uninstallation, you can optionally remove the modules’ code, database schema, and database data. You can create backups first so you can recover the data at a later time.\n\nYou should uninstall a module only if you’re certain you won’t use it. Instead of uninstalling a module, you can disable it as discussed in Enable or disable modules.\n\n\n\n  This command checks only dependencies declared in composer.json. If you uninstall a module that is not defined in composer.json, this command uninstalls the module without checking for dependencies. This command does not, however, remove the module's code from the Magento file system. You must use file system tools to remove the module's code (for example, rm -rf &lt;path to module&gt;.\n  As an alternative, you can disable non-Composer modules.\n\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Uninstall modules\n  Command usage:\n\n  magento module:uninstall [--backup-code] [--backup-media] [--backup-db] [-r|--remove-data] [-c|--clear-static-content] \\\n{ModuleName} ... {ModuleName}\n  \n\n  where {ModuleName} specifies the module name in &lt;VendorName&gt;_&lt;ModuleName&gt; format. For example, the Magento Customer module name is Magento_Customer. To get a list of module names, enter magento module:status\n\n  The module uninstall command performs the following tasks:\n\n  \n    \n      Verifies that the specified modules exist in the code base and are packages installed by Composer.\n\n      This command works only with modules defined as Composer packages.\n    \n    \n      Checks for dependencies with other modules; if there are any, the command terminates..\n\n      To work around this, you can either uninstall all modules at the same time or you can uninstall the depending modules first.\n    \n    Requests confirmation to proceed.\n    Puts the store in maintenance mode.\n    \n      Processes the following command options.\n\n      \n\n\n\n\n    \n        Option\n        Meaning\n        Backup file name and location\n    \n\t\t\n\n    --backup-code\n    Backs up the Magento file system (excluding var and pub/static directories).\n    var/backups/&lt;timestamp&gt;_filesystem.tgz\n\n\n    --backup-media\n    Backs up the pub/media directory.\n    var/backups/&lt;timestamp&gt;_filesystem_media.tgz\n\n\n    --backup-db\n    Backs up the Magento 2 database.\n    var/backups/&lt;timestamp&gt;_db.gz\n\n\n\n    \n    \n      If --remove-data is specified, removes the database schema and data defined in the module’s Uninstall classes.\n\n      For each specified module to uninstall, invokes the uninstall method in its Uninstall class. This class must inherit from Magento\\Framework\\Setup\\UninstallInterface.\n    \n    Removes the specified modules from the setup_module database table.\n    Removes the specified modules from the module list in the deployment configuration.\n    \n      Removes code from the codebase using composer remove.\n\n      \n    \n  \t\tUninstalling a module always runs composer remove. The --remove-data option removes database data and schema defined by the module's Uninstall class.\n\n    \n    Cleans the cache.\n    Updates generated classes.\n    If --clear-static-content is specified, cleans generated static view files.\n    Takes the store out of maintenance mode.\n  \n\n  For example, if you attempt to uninstall a module that another module depends on, the following message displays:\n\n  magento module:uninstall Magento_SampleMinimal\n\tCannot uninstall module 'Magento_SampleMinimal' because the following module(s) depend on it:\n    Magento_SampleModifyContent\n  \n\n  One alternative is to uninstall both modules after backing up the Magento module file system, pub/media files, and database tables but not removing the module’s database schema or data:\n\n  magento module:uninstall Magento_SampleMinimal Magento_SampleModifyContent --backup-code --backup-media --backup-db\n  \n\n  Messages similar to the following display:\n\n  You are about to remove code and/or database tables. Are you sure?[y/N]y\nEnabling maintenance mode\nCode backup is starting...\nCode backup filename: 1435261098_filesystem_code.tgz (The archive can be uncompressed with 7-Zip on Windows systems)\nCode backup path: /var/www/html/magento2/var/backups/1435261098_filesystem_code.tgz\n[SUCCESS]: Code backup completed successfully.\nMedia backup is starting...\nMedia backup filename: 1435261098_filesystem_media.tgz (The archive can be uncompressed with 7-Zip on Windows systems)\nMedia backup path: /var/www/html/magento2/var/backups/1435261098_filesystem_media.tgz\n[SUCCESS]: Media backup completed successfully.\nDB backup is starting...\nDB backup filename: 1435261098_db.gz (The archive can be uncompressed with 7-Zip on Windows systems)\nDB backup path: /var/www/html/magento2/var/backups/1435261098_db.gz\n[SUCCESS]: DB backup completed successfully.\nYou are about to remove a module(s) that might have database data. Remove the database data manually after uninstalling, if desired.\nRemoving Magento_SampleMinimal, Magento_SampleModifyContent from module registry in database\nRemoving Magento_SampleMinimal, Magento_SampleModifyContent from module list in deployment configuration\t\nRemoving code from Magento codebase:\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Removing magento/sample-module-modifycontent (1.0.0)\nRemoving Magento/SampleModifycontent\n  - Removing magento/sample-module-minimal (1.0.0)\nRemoving Magento/SampleMinimal\nWriting lock file\nGenerating autoload files\nCache cleared successfully.\nGenerated classes cleared successfully.\nAlert: Generated static view files were not cleared. You can clear them using the --clear-static-content option. Failure to clear static view files might cause display issues in the Admin and storefront.\nDisabling maintenance mode\n  \n\n  \n\t\n\tErrors display if you attempt to uninstall a module with a dependency on another module. In that case, you cannot uninstall one module; you must uninstall both.\n\n\n  Roll back the file system, database, or media files\n  To restore the Magento codebase to the state at which you backed it up, use the following command:\n\n  magento setup:rollback [-c|--code-file=\"&lt;filename&gt;\"] [-m|--media-file=\"&lt;filename&gt;\"] [-d|--db-file=\"&lt;filename&gt;\"]\n  \n\n  where &lt;filename&gt; is the name of the backup file located in &lt;your Magento install dir&gt;/var/backups. To display a list of backup files, enter magento info:backups:list\n\n  \n    This command deletes the specified files or the database before restoring them. (For example, the --media-file option deletes media assets under pub/media before restoring from the specified rollback file.) Make sure you have made no changes to the file system or database that you want to keep before using this command.\n\n\n  \n\t\n\tTo display a list of available backup files, enter magento info:backups:list\n\n\n  This command performs the following tasks:\n\n  \n    Puts the store in maintenance mode.\n    Verifies the backup file name.\n    \n      If you specify a code rollback file:\n\n      a.\tVerifies the rollback destination locations are writable (note that the pub/static and var folders are ignored).\n\n      b.\tDeletes all files and directories under your Magento 2 installation directory.\n\n      c.\tExtracts the archive file to the destination locations.\n    \n    \n      If you specify a database rollback file:\n\n      a.\tDrops the entire Magento database.\n\n      b.\tRestores the database using the database backup.\n    \n    \n      If you specify a media rollback file:\n\n      a.\tVerifies the rollback destination locations are writable.\n\n      b.\tDeletes all files and directories under pub/media\n\n      c.\tExtracts the archive file to the destination locations.\n    \n    Takes the store out of maintenance mode.\n  \n\n  For example, to restore a code (that is, file system) backup, enter the following commands in the order shown:\n\n  \n    \n      Display a list of backups:\n\n      magento info:backups:list\n      \n    \n    \n      Restore a file backup named 1433876616_filesystem.tgz:\n\n      magento setup:rollback --code-file=\"1433876616_filesystem.tgz\"\n      \n\n      Messages similar to the following display:\n\n      Enabling maintenance mode\nCode rollback is starting ...\nCode rollback filename: 1433876616_filesystem.tgz\nCode rollback file path: /var/www/html/magento2/var/backups/1433876616_filesystem.tgz\n[SUCCESS]: Code rollback has completed successfully.\nDisabling maintenance mode\n      \n    \n  \n\n  \n\t\n\tTo run the magento command again without changing directories, you might need to enter cd `pwd`\n\n\n  Related topics\n\n  \n    Installing the Magento software using the command line\n    Remove sample data modules or update sample data\n    Enable or disable modules\n    Display or change the Admin URI\n    Create or update the deployment configuration\n    Enable or disable maintenance mode\n    Create the Magento database schema\n    Update the Magento database schema and data\n    Configure the store\n    Create or unlock a Magento administrator\n    Back up and roll back the file system, media, and database\n    Uninstall themes\n    Uninstall language packages\n    Uninstall the Magento software\n    Update the Magento software\n    Reinstall the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-uninstall-mods.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-uninstall-html": {
      "title": "Uninstall or reinstall Magento",
      "content": "First steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments discussed here, see Common arguments.\n\n  Prerequisites\n  Before you use this command, you must install the Magento software.\n\n  Update the Magento software\n  To update the Magento software:\n\n  \n    If you installed the software from an archive or if you used ‘composer-create-project’, use the Component Manager or System Upgrade utilities.\n    If you are a contributing developer (that is, you used git clone), see Contributing developers—update, reinstall Magento.\n  \n\n  Reinstall the Magento software\n  This section discusses how to uninstall and then reinstall the Magento software with the latest version.\n\n  The way you reinstall the Magento application from the command line depends on your role:\n\n  \n    If you installed the software from an archive or if you used ‘composer-create-project’, see Reinstall as a system integrator.\n    If you’re a contributing developer (that is, you started using composer clone), see Contributing developers—update, reinstall Magento.\n  \n\n  Reinstall as a system integrator\n  To reinstall the Magento software as a system integrator:\n\n  \n    Log in to your Magento server as a user with permissions to modify files in the Magento file system (for example, the &gt;switch to the Magento file system owner.\n    \n      Enter the following commands in the order shown:\n\n      cd &lt;your Magento install dir&gt;\ngit pull origin develop\nphp bin/magento setup:uninstall\n      \n\n      \n    \n  \t\t\tIf git pull origin develop fails, see troubleshooting. \n  \t\t\t\tTo use your existing Magento software version , omit the git pull origin develop command.\n\n    \n    \n      Install the Magento software:\n\n      \n        Install the Magento software using the command line\n        Install the Magento software using the Setup Wizard\n      \n    \n  \n\n  Uninstall the Magento software\n  Uninstalling the Magento software drops and restores the database, removes the deployment configuration, and clears directories under var.\n\n  To uninstall the Magento software, enter the following command:\n\n  magento setup:uninstall\n  \n\n  The following message displays to confirm a successful uninstallation:\n\n  [SUCCESS]: Magento uninstallation complete.\n  \n\n  Optionally keeping generated files\n  By default, magento setup:upgrade clears compiled code and the cache. Typically, you use magento setup:upgrade to update components and each component can require different compiled classes.\n\n  However, in some situations (particularly, deploying Magento to production), you might wish to avoid clearing compiled code because it can take some time. (The cache is still cleared.) To update the Magento database schema and data without clearing compiled code, enter:\n\n  magento setup:upgrade --keep-generated\n  \n\n  \n    The optional --keep-generated option should be used only in limited circumstances by experienced system integrators. --keep-generated should never be used in a development environment.\n    Improper use of this optional parameter can cause errors during code execution.\n\n\n  \n    \n      Install the Magento software:\n\n      \n        Install the Magento software using the command line\n        Install the Magento software using the Setup Wizard\n      \n    \n  \n\n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli-uninstall.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-cli-install-cli-html": {
      "title": "Install the Magento software using the command line",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\n\n  If you chose to enable SELinux, see SELinux and iptables.\n\n\nIntroducing the Magento command-line interface (CLI)\nMagento has one command-line interface that performs both installation and configuration tasks: &lt;your Magento install dir&gt;/bin/magento. The new interface performs multiple tasks, including:\nInstalling Magento (and related tasks such as creating or updating the database schema, creating the deployment configuration, and so on)\n\tClearing the cache\n\tManaging indexes, including reindexing\n\tCreating translation dictionaries and translation packages\n\tGenerating non-existent classes such as factories and interceptors for plug-ins, generating the dependency injection configuration for the object manager.\n\tDeploying static view files\n\tCreating CSS from LESS\nOther benefits:\nA single command (php &lt;your Magento install dir&gt;/bin/magento list) lists all available installation and configuration commands\nConsistent user interface based on Symfony\nThe CLI is extensible so third party developers can \"plug in\" to it\nThis has the additional benefit of eliminating users' learning curve\nCommands for disabled modules do not display.\n\nThis topic discusses installing the Magento software using the CLI. For information about configuring Magento, see the Configuration Guide.\n\nBefore you start your installation\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nAfter you log in to the Magento server, switch to a user that has permissions to write to the Magento file system. One way to do this is discussed in switch to the Magento file system owner.\n\n\n\n\n  If you chose to enable SELinux, see SELinux and iptables.\n\n\nFirst steps\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  Next steps\n\n  \n    Get started with the command-line installation\n    Install the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/cli/install-cli.html"
    }
    ,
  
    "guides-v2-0-cloud-howtos-install-components-html": {
      "title": "Install, manage, and upgrade modules",
      "content": "This information includes information for adding modules to Magento Commerce (Cloud), managing enabled and disabled modules, and upgrading module code.\n\nWhen adding modules (or extensions) to Magento Commerce (Cloud), you should add the code to a Git branch, test in Integration, deploy and test in Staging, before finally pushing and using in Production.\n\nModules include the following:\n\n\n  Modules to extend Magento capabilities, with options through Magento Marketplace and directly through company sites\n  Themes to change the look and feel of your storefronts\n  Language packages to localize the storefront and Admin\n\n\nThese instructions walk through module installation purchased from Magento Marketplace. You can use the same procedure to install any module with the module’s Composer name. To find it, open the module’s composer.json file and note the values for \"name\" and \"version\".\n\nCreate a branch for adding or updating the module\nWe recommend using a branch for adding or updating, configuring, and testing your module.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Install an module\n  Module installation uses the following steps:\n\n  \n    Purchase an module or module from Magento Marketplace or another site.\n    Create a branch to work with the files.\n    Get the module’s Composer name and version from your purchase history.\n    In your local Magento Commerce (Cloud) project, update the Magento composer.json file with the name and version of the module and add the code to Git. The code builds, deploys, and is available through the environment.\n    Verify the module installed properly.\n  \n\n  Step 1: Get the module’s Composer name and version\n  If you already know the module’s Composer name and version, skip this step and continue with Update Magento’s composer.json.\n\n  \n\n    This section discusses how to get a module’s Composer name and its version from Magento Marketplace. Alternatively, you can find the name and version of any module (whether or not you purchased it on Marketplace) in the module’s composer.json file. Open composer.json in a text editor and write down the values of \"name\" and \"version\".\n\n    To get the module’s Composer name from Magento Marketplace:\n\n    \n      Log in to Magento Marketplace with the user name and password you used to purchase the component.\n      \n        In the upper right corner, click &lt;your user name&gt; &gt; My Account as the following figure shows.\n\n        \n      \n      \n        On the My Account page, click My Purchases as the following figure shows.\n\n        \n      \n      \n        On the My Purchases page, click Technical Details for the module you purchased as the following figure shows.\n\n        \n      \n      Click Copy to copy the component name to the clipboard.\n      Open a text editor.\n      Paste the module name in the text editor.\n      Append a colon character (:) to the component name.\n      In Technical Details on the My Purchases page, click Copy to copy the version to the clipboard.\n      \n        Append the version number to the component name after the colon.\n\n        A sample follows:\n\n        pixlee/magento2:1.0.1\n        \n      \n    \n\n    Step 2: Update Magento’s composer.json\n    When adding the module to composer.json, the file app/etc/config.php will also be updated. This file includes a list of installed modules, themes, and language packages, and shared configuration settings.\n\n    To update composer.json:\n\n    \n      If you haven’t done so already, change to your environment root directory.\n      \n        Enter the following commands to update it:\n\n        composer require &lt;component-name&gt;:&lt;version&gt; --no-update\ncomposer update\n        \n\n        For example:\n\n        composer require pixlee/magento2:1.0.1 --no-update\ncomposer update\n        \n      \n      Wait for project dependencies to update.\n      \n        Enter the following commands in the order shown to commit your changes, including composer.lock:\n\n         git add -A\n git commit -m \"&lt;message&gt;\"\n git push origin &lt;environment ID&gt;\n        \n      \n    \n\n    If there are errors, see module deployment failure.\n\n    \nWhen installing and adding the module, you must add the `composer.lock` to your Git branch for deployment. If the module is not in the file, the module won't load in Magento Commerce (Cloud). This ensures when the `composer install` command is used, the module properly loads. This command uses the `composer.lock` file.\n\n\n    Step 3: Verify the module\n    To verify the module installed properly, you can check its functionality in the Magento Admin or you can make sure it is enabled as follows:\n\n    \n      SSH to the environment on which the module is installed.\n      \n        Enter the following command to display a list of enabled modules:\n\n        php bin/magento module:status\n        \n      \n      Verify the module is listed.\n    \n\n    The module name is in the format &lt;VendorName&gt;_&lt;ComponentName&gt;. It will not be in the same format as the Composer name.\n\n    Manage modules\n    To manage your modules, you can enable and disable or change settings per environment.\n\n    Enable and disable modules\n    You can use CLI commands or directly edit app/etc/config.php to enable or disable modules. After updating this file, push your changes from your local to the remote Git and deploy across all environments.\n\n    \n      In a terminal, access your local development environment.\n      \n        You need a specific name of the extension or module. Use the following command to locate the name:\n\n         php bin/magento module:status\n        \n      \n      \n        To enable, use the following command.\n\n         php bin/magento module:enable &lt;module name&gt;\n        \n      \n      \n        To disable, use the following command.\n\n         php bin/magento module:disable &lt;module name&gt;\n        \n      \n      \n        Use the following command to verify the changed status of the module:\n\n         php bin/magento module:status\n        \n      \n    \n\n    You can also navigate to and edit the app/etc/config.php file to verify the module is disabled.\n\n      return array (\n    'modules' =&gt;\n    array (\n      'Magento_Core' =&gt; 1,\n      'Magento_Store' =&gt; 1,\n      'Magento_Theme' =&gt; 1,\n      'Magento_Authorization' =&gt; 1,\n      'Magento_Directory' =&gt; 1,\n      'Magento_Backend' =&gt; 1,\n      'Magento_Backup' =&gt; 1,\n      'Magento_Eav' =&gt; 1,\n      'Magento_Customer' =&gt; 1,\n  ...\n    ),\n  );\n  \n\n    The value 1 or 0 indicates whether a module is enabled or disabled.\n    \n      \n        Push your updates to the Git branch:\n\n         git add -A\n git commit -m \"&lt;message&gt;\"\n git push origin &lt;environment ID&gt;\n        \n      \n      \n        Complete deployment to Integration for testing, then Staging for testing, and finally Production.\n      \n    \n\n    Modify configurations\n    To change settings for your modules and modules, you should make those changes in all environments as needed. We recommend using similar or matching settings between Staging and Production to fully test functionality. If you have an module or module using sandbox credentials and settings, you make sure to switch those to live settings if in Production.\n\n    Upgrade an module\n    You should have a branch to work in when updating your module. These instructions use composer to update the files. Before you continue, you must:\n\n    \n      Know the module’s Composer name and version\n      Know the module is compatible with your project and Magento Commerce (Cloud) version. In particular, check the required PHP version.\n    \n\n    To update an module:\n\n    \n      If you haven’t done so already, change to your environment root directory.\n      Open composer.json in a text editor.\n      Locate your module and update the version.\n      Save your changes to composer.json and exit the text editor.\n      \n        Use the following command to update project dependencies:\n\n        composer update\n        \n      \n      \n        Enter the following commands in the order to commit the changes and deploy the project, including composer.lock:\n\n        git add -A\ngit commit -m \"&lt;message&gt;\"\ngit push origin &lt;environment ID&gt;\n        \n      \n      Wait for the project to deploy and verify in your environment.\n    \n\n    If there are errors, see Component deployment failure.\n\n    Related topics\n    \n      Update components\n      Install optional sample data\n      Merge and delete an environment\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/howtos/install-components.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-flow-diagram-html": {
      "title": "Installation flow diagram",
      "content": "The following diagram provides a high-level overview of installing the Magento software:\n\n\n\n  \n\n  The diagram shows the following:\n\n  \n    \n      Set up your server environment.\n\n      Install the prerequisite software, including PHP, Apache, and MySQL. Consult the system requirements for specific information:\n\n      \n        2.0.x system requirements\n        2.1.x system requirements\n      \n    \n    \n      Get the Magento software.\n\n      \n        \n          For simplicity, get a compressed Magento Open Source or Magento Commerce archive, extract it on your Magento server, and start your installation.\n        \n        \n          If you are more technical and you are familiar with Composer, get a Magento Open Source or Magento Commerce metapackage.\n        \n        \n          If you want to contribute to the Magento Open Source codebase or customize the Magento application, clone the Magento 2 GitHub repository. (This method requires familiarity with both GitHub and Composer.)\n        \n      \n\n      \n    To be able to use the Web Setup Wizard to install or upgrade the Magento software, or to manage extensions you get from Magento Marketplace, you must either get a compressed archive or a Composer metapackage.\n    If you clone the GitHub repository, you cannot use the Web Setup Wizard to upgrade the Magento software and extensions. You must upgrade using Composer and git commands.\n\n    \n    \n      Install the Magento software using either the Web Setup Wizard or command line.\n\n      For simplicity, only the Web Setup Wizard is shown in the diagram.\n\n      At each step, the Web Setup Wizard validates the information you entered. As shown in the preceding diagram, if validation fails, you must manually fix the issues before you proceed.\n\n      If the step fails because prerequisite software isn’t set up correctly, review our Prerequisites.\n\n      For other types of failures, see our Troubleshooting.\n    \n    \n      Verify the installation by viewing your storefront and the Magento Admin.\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install-flow-diagram.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-quick-ref-html": {
      "title": "Installation quick reference (tutorial)",
      "content": "We know it’s challenging to install the Magento software. We’d like to help you by simplifying the process as much as possible.\n\nThis topic assumes:\n\n\n  You have your own Magento server (you’re not using a shared hosting provider).\n  You’re starting the installation using composer create-project, which enables you to get the most recent Magento software and to add your own customizations to it, if desired.\n  Everything is installed on one host (database, web server, and so on).\n  \n    The host you’re installing on is either Ubuntu or CentOS.\n\n    (You can use the same instructions to install on other UNIX distributions like RedHat Enterprise Linux (RHEL), or Debian, but these instructions aren’t for Mac or Windows.)\n  \n  \n    Your host’s IP address is 192.0.2.5.\n\n    This is just an example IP address that you’ll see in detailed examples throughout this topic. You can substitute it with whatever internal/external IP address matches your server.\n  \n  \n    You’re installing to the magento2 subdirectory under your web server’s docroot (full path is /var/www/html/magento2)\n\n    You can optionally set up static routing or a virtual host to install to a host name instead of an IP but that’s beyond the scope of this topic.\n  \n\n\nWe’ve broken the installation process into three main parts: getting started, installing, and post-installation. We hope that what follows helps you; if you’d like to suggest improvements, click Edit this page on GitHub at the top of this page and let us know.\n\nPrecondition: How advanced are you?\nDo you know what a “terminal” application is? Do you know what operating system your server runs? Do you know what Apache is?\n\nIf not, see the Installation overview.\n\nInstallation part 1: Getting started\n\n  See the system requirements.\n  \n    If your system lacks any requirements, see the prerequisites documentation:\n\n    \n      Apache\n      PHP (Ubuntu)\n      PHP (CentOS)\n      MySQL\n    \n  \n  Just as importantly, set up the Magento file system owner on the server.\n  Switch to the Magento file system owner.\n\n\nGet the Magento software\nWhen all prerequisites have been met, get the Magento software using Composer as follows:\n\ncd &lt;web server docroot directory&gt;\ncomposer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition magento2\n\n\nYou’re required to authenticate; see Get your authentication keys for details. This downloads Magento code only; it doesn’t install the software for you.\n\n\n\tAlternatively, you can also download a Magento software archive.\n\n\n\n\n  Set pre-installation file system ownership and permissions\n  This topic discusses how to set read-write permissions for the web server group before you install the Magento software. This is necessary so the Setup Wizard or command line can write files to the Magento file system.\n\n  The procedure you use is different, depending on whether you use shared hosting and have one user or if you use a private server and have two users.\n\n  \n  If you're using a Magento version earlier than 2.0.6, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead.\n\n\n  Set permissions for shared hosting (one user)\n  This section discusses how to set pre-installation permissions if you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n\n  To set ownership and permissions for a one-user system: To set permissions before you install the Magento software:\n\n\n  Log in to your Magento server.\n  \n    Use a file manager application provided by your shared hosting provider to verify write permissions are set on the following directories:\n\n    \n      vendor (Composer or compressed archive installation)\n      app/etc\n      pub/static\n      var\n      Any other static resources\n    \n  \n  \n    If you have command-line access, enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\;\nchmod u+x bin/magento\n    \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\; &amp;&amp; chmod u+x bin/magento\n    \n  \n  \n    If you haven’t done so already, get the Magento software in one of the following ways:\n\n    \n      Compressed archive\n      Composer metapackage\n      Clone the repository (contributing developers only)\n    \n  \n  \n    After you have set file system ownership and permissions, continue with any of the following:\n\n    \n      Command-line installation\n      Setup Wizard installation\n    \n  \n\n\n\n  To further restrict permissions after installing the Magento software, you configure a Magento umask.\n\n\n\n\n  Set ownership and permissions for two users\n  This section discusses how to set ownership and permissions for your own server or a private hosting setup. In this type of setup, you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user.\n\n  To set ownership and permissions for a two-user system: Complete the following tasks in the order shown:\n\n\n  About the shared group\n  Step 1: Create the Magento file system owner and give the user a strong password\n  Step 2: Find the web server group\n  Step 3: Put the Magento file system owner in the web server’s group\n  Step 4: Get the Magento software\n  Step 5: Set ownership and permissions for the shared group\n\n\nAbout the shared group\nTo enable the web server to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files (including files created using the Magento Admin or other web-based utilities).\n\nThis section discusses how to create a new Magento file system owner and put that user in the web server’s group. You can use an existing user account if you wish; we recommend the user have a strong password for security reasons.\n\n\n\tSkip to step 2 if you plan on using an existing user account.\n\n\nStep 1: Create the Magento file system owner and give the user a strong password\nThis section discusses how to create the Magento file system owner. (Magento file system owner is another term for the command-line user.)\n\nTo create a user on CentOS or Ubuntu, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nStep 2: Find the web server user’s group\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nStep 3: Put the Magento file system owner in the web server’s group\nTo put the Magento file system owner in the web server’s group (assuming the typical Apache group name for CentOS and Ubuntu), enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -a -G apache &lt;username&gt;\n  Ubuntu: usermod -a -G www-data &lt;username&gt;\n\n\n\n  The -a -G options are important because they add apache or www-data as a secondary group to the user account, which preserves the user’s primary group. Adding a secondary group to a user account helps restrict file ownership and permissions to ensure members of a shared group only have access to certain files.\n\n\nFor example, to add apache as a secondary group to user magento_user on CentOS:\n\nsudo usermod -a -G apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups magento_user\n\n\nThe following sample result shows the user’s primary (magento) and secondary (apache) groups.\n\nmagento_user : magento_user apache\n\n\n\n  Typically, the user name and primary group name are the same.\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nStep 4: Get the Magento software\nIf you haven’t done so already, get the Magento software in one of the following ways:\n\n\n  Compressed archive\n  Composer metapackage\n  Clone the repository (contributing developers only)\n\n\nStep 5: Set ownership and permissions for the shared group\nTo set ownership and permissions before you install the Magento software:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nsudo chown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Next step\n  After you have set file system ownership and permissions, continue with any of the following:\n\n  \n    Command-line installation\n    Setup Wizard installation\n  \n\n\n\n  Switch to the Magento file system owner\n  After you’ve performed the other tasks in this topic, enter one of the following commands to switch to that user:\n\n  \n    Ubuntu: su &lt;username&gt;\n    CentOS: su - &lt;username&gt;\n  \n\n  For example,\n\n  su magento_user\n  \n\n  Installation part 2: Installing the Magento software\n  You can choose to install the Magento software using either a web-based Setup Wizard or using the command line.\n\n  Command line installation\n\n  Click to view the command-line installation The following example shows how to install using the command line with the following options:\n\n\n  \n    The Magento software is installed in the /var/www/html/magento2 directory, which means your storefront URL is http://192.0.2.5/magento2/\n  \n  \n    The database server is on the same host as the web server.\n\n    The database name is magento, and the user name and password are both magento\n  \n  \n    Uses server rewrites\n  \n  \n    The Magento administrator has the following properties:\n\n    \n      First and last name are Magento User\n      User name is admin and the password is admin123\n      E-mail address is user@example.com\n    \n  \n  Default language is en_US (U.S. English)\n  Default currency is U.S. dollars\n  \n    Default time zone is U.S. Central (America/Chicago)\n\n    php /var/www/html/magento2/bin/magento setup:install --base-url=http://192.0.2.5/magento2/ \\\n--db-host=localhost --db-name=magento --db-user=magento --db-password=magento \\\n--admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n--admin-user=admin --admin-password=admin123 --language=en_US \\\n--currency=USD --timezone=America/Chicago --use-rewrites=1\n    \n  \n\n\nOptionally switch to developer mode.\n\ncd &lt;your Magento install dir&gt;/bin\nphp magento deploy:mode:set developer\n\n\n\n  Web Setup Wizard\n\n  Click to view the Web Setup Wizard installation The following example shows how to install using the Web Setup Wizard with the following options:\n\n\n  \n    The Magento software is installed in the magento2 directory relative to the web server docroot, which means your storefront URL is http://192.0.2.5/magento2/\n  \n  \n    The database server is on the same host as the web server.\n\n    The database name is magento, and the user name and password are both magento\n  \n  \n    The Magento administrator has the following properties:\n\n    \n      User name is admin and the password is admin123\n      E-mail address is user@example.com\n    \n  \n  Default language is en_US (U.S. English)\n  Default currency is U.S. dollars\n  Default time zone is U.S. Central (America/Chicago)\n\n\nTo run the Web Setup Wizard:\n\n\n  \n    Enter the following URL in your browser’s address or location field:\n\n    http://192.0.2.5/magento2/setup\n    \n  \n  \n    At the welcome page, click Agree and Setup Magento.\n\n    \n  \n  \n    Step 1: Readiness Check verifies your system is ready to install the Magento software.\n\n    Click Start Readiness Check\n\n    \n\n    \n      If the readiness check passes, click Next and continue with the next step.\n      If the readiness check fails, see Readiness check issues\n    \n  \n  \n    Step 2: Add a Database enables you to set up your Magento database.\n\n    \n  \n  \n    Step 3: Web Configuration enables you to enter the storefront and Magento Admin URLs.\n\n    \n  \n  \n    Step 4: Customize Your Store enables you to enter a default store currency, time zone, and language.\n\n    \n  \n  \n    Step 5: Create Admin Account enables you to set up a Magento administrator. This user can perform all actions in the Magento Admin.\n\n    \n  \n  \n    Step 6: Install starts the installation when you click Install Now.\n\n    You can optionally expand Console Log to see installation messages while the installation is in progress.\n\n    If errors display, see Troubleshooting suggestions.\n  \n\n\n\n  Installation part 3: Post-installation\n  \n    Verify the installation was successful.\n    Troubleshoot issues if necessary.\n    Learn about the Component Manager and System Upgrade for future updates.\n  \n\n",
      "url": "/guides/v2.0/install-gde/install-quick-ref.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-install-rabbitmq-html": {
      "title": "RabbitMQ",
      "content": "RabbitMQ is an open source message broker that offers a reliable, highly available, scalable and portable messaging system.\n\nMessage queues provide an asynchronous communications mechanism in which the sender and the receiver of a message do not contact each other. Nor do they need to communicate with the message queue at the same time. When a sender places a messages onto a queue, it is stored until the recipient receives them.\n\nMagento Commerce uses RabbitMQ to manage these message queues. RabbitMQ cannot be used with Magento Open Source installations.\n\nThe message queue system must be established before you install Magento. The basic sequence is\n\n\n  Install RabbitMQ and any prerequisites.\n  Connect RabbitMQ and Magento.\n\n\n\n  A basic message queue system can be implemented on Magento Commerce using cron instead of RabbitMQ. See Configure message queues for more information.\n\n\nInstall RabbitMQ on Ubuntu\n\nTo install RabbitMQ on Ubuntu 16 enter the following command:\n\nsudo apt install -y rabbitmq-server\n\n\nThis command also installs the required Erlang packages.\n\nIf you have an older version of Ubuntu, RabbitMQ recommends installing the package from their website.\n\n\n  Download rabbitmq-server_3.6.6-1_all.deb.\n  Install the package with dpkg.\n\n\nRefer to Installing on Debian/Ubuntu for more information.\n\nInstall RabbitMQ on CentOS\n\nInstall Erlang\n\nRabbitMQ was written using the Erlang programming language, which must be installed on the same system as RabbitMQ.\n\nSee Manual installation for more information.\n\nRun the following commands to install this feature.\n\n\n  wget http://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm\n  rpm -Uvh erlang-solutions-1.0-1.noarch.rpm\n\n\nInstall RabbitMQ\n\nThe RabbitMQ server is included on CentOS, but the version is often old. RabbitMQ recommends installing the package from their website.\n\n\n  Download rabbitmq-server-3.5.6-1.noarch.rpm.\n  Run the following commands as a user with root permissions:\n\n\nrpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc{:target=\"&amp;#95;blank\"}\nyum install rabbitmq-server-3.5.6-1.noarch.rpm`\n\nRefer to Installing on RPM-based Linux for more information.\n\nConfigure RabbitMQ\n\nReview the official RabbitMQ documentation to configure and manage RabbitMQ. Pay attention to the following items:\n\n\n  Environment variables\n  Port access\n  Default user accounts\n  Starting and stopping the broker\n  System limits\n\n\nConnect RabbitMQ to Magento Commerce\n\nAdd the following command line parameters when you install Magento Commerce:\n\n--amqp-host=\"&lt;hostname&gt;\" --amqp-port=\"5672\" --amqp-user=\"&lt;user_name&gt;\" --amqp-password=\"&lt;password&gt;\" --amqp-virtualhost=\"/\"\n\nwhere:\n\n\n\nParameterDescription\n\n\namqp-host\nThe host name where RabbitMQ is installed.\n\n\namqp-port\nThe port to use to connect to RabbitMQ. The default is 5672.\n\n\namqp-user\nThe user name for connecting to RabbitMQ. Do not use the default user `guest`. \n\n\namqp-password\nThe password for connecting to RabbitMQ. Do not use the default password `guest`. \n\n\namqp-virtualhost\nThe virtual host for connecting to RabbitMQ. The default is /. \nFor additional information, see RabbitMQ documentation:\nVirtual hosts\nAccess control\n\n\n\nStart the message queue consumers\n\nAfter you have connected Magento Commerce and RabbitMQ, you must start the message queue consumers. See Configure message queues for details.\n\nRelated topics\n\n  Installing optional software\n  Apache\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  Configuring security options\n  How to get the Magento software\n  Message queue overview\n  Manage message queues\n\n",
      "url": "/guides/v2.0/install-gde/prereq/install-rabbitmq.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-resource-diagram-html": {
      "title": "Installation flow diagram",
      "content": "The following diagram provides a high-level overview of installing the Magento software:\n\n\n\n  \n\n  The diagram shows the following:\n\n  \n    \n      Set up your server environment.\n\n      Install the prerequisite software, including PHP, Apache, and MySQL. Consult the system requirements for specific information:\n\n      \n        2.0.x system requirements\n        2.1.x system requirements\n      \n    \n    \n      Get the Magento software.\n\n      \n        \n          For simplicity, get a compressed Magento Open Source or Magento Commerce archive, extract it on your Magento server, and start your installation.\n        \n        \n          If you are more technical and you are familiar with Composer, get a Magento Open Source or Magento Commerce metapackage.\n        \n        \n          If you want to contribute to the Magento Open Source codebase or customize the Magento application, clone the Magento 2 GitHub repository. (This method requires familiarity with both GitHub and Composer.)\n        \n      \n\n      \n    To be able to use the Web Setup Wizard to install or upgrade the Magento software, or to manage extensions you get from Magento Marketplace, you must either get a compressed archive or a Composer metapackage.\n    If you clone the GitHub repository, you cannot use the Web Setup Wizard to upgrade the Magento software and extensions. You must upgrade using Composer and git commands.\n\n    \n    \n      Install the Magento software using either the Web Setup Wizard or command line.\n\n      For simplicity, only the Web Setup Wizard is shown in the diagram.\n\n      At each step, the Web Setup Wizard validates the information you entered. As shown in the preceding diagram, if validation fails, you must manually fix the issues before you proceed.\n\n      If the step fails because prerequisite software isn’t set up correctly, review our Prerequisites.\n\n      For other types of failures, see our Troubleshooting.\n    \n    \n      Verify the installation by viewing your storefront and the Magento Admin.\n    \n  \n\n\n",
      "url": "/guides/v2.0/install-gde/install-resource-diagram.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-resources-parent-html": {
      "title": "Helpful resources",
      "content": "You can use the following resources at any time to help you with your Magento installation:\n\n\n  Quick reference (tutorial), a quick tutorial to get your installation off the ground quickly\n  Roadmap (reference), a detailed reference of all your installation and post-installation options\n  Flow diagram, a conceptual diagram to orient you to the installation process\n\n\n",
      "url": "/guides/v2.0/install-gde/install-resources-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-roadmap-cli-html": {
      "title": "Installation roadmap (reference)",
      "content": "\n\n  This roadmap provides a reference for the installation process. Refer to this topic at any time to move back and forth through the stages of installation.\n\n  This is a list of the most common topics you’ll need for installation; the list is not comprehensive, however. You’ll find additional information using the table of contents on the left side of the page.\n\n  Precondition: How advanced are you?\n\n  Do you know what a “terminal” application is? Do you know what operating system your server runs? Do you know what Apache is? If not, see the Installation overview.\n\n  Installation part 1: Getting started\n  Topics include: \n  Choose how to get the Magento software\n  System requirements\n  Prerequisites\n  The Magento file system owner\n\n\n\n  Installation part 2: Installing\n  Topics include: \n  Command line installation\n  Setup Wizard installation\n  Optional sample data\n\n\n\n  Installation part 3: Post-installation\n  Topics include: \n  Verifying\n  Troubleshooting\n  Configuring\n  Optional sample data (after installing Magento)\n  Magento in production\n\n\n\n  Upgrade, update\n  Topics include: \n  Upgrading (or patching the Magento application)\n  Updating components (including install, uninstall, update, enable, disable)\n  Contributing developers only: Contributing developers—update, reinstall Magento\n\n\n\n  Deploy to production\n  Deploy Magento to production\n\n\n",
      "url": "/guides/v2.0/install-gde/install-roadmap_cli.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-roadmap-part1-html": {
      "title": "Installation roadmap (reference)",
      "content": "\n\n  This roadmap provides a reference for the installation process. Refer to this topic at any time to move back and forth through the stages of installation.\n\n  This is a list of the most common topics you’ll need for installation; the list is not comprehensive, however. You’ll find additional information using the table of contents on the left side of the page.\n\n  Precondition: How advanced are you?\n\n  Do you know what a “terminal” application is? Do you know what operating system your server runs? Do you know what Apache is? If not, see the Installation overview.\n\n  Installation part 1: Getting started\n  Topics include: \n  Choose how to get the Magento software\n  System requirements\n  Prerequisites\n  The Magento file system owner\n\n\n\n  Installation part 2: Installing\n  Topics include: \n  Command line installation\n  Setup Wizard installation\n  Optional sample data\n\n\n\n  Installation part 3: Post-installation\n  Topics include: \n  Verifying\n  Troubleshooting\n  Configuring\n  Optional sample data (after installing Magento)\n  Magento in production\n\n\n\n  Upgrade, update\n  Topics include: \n  Upgrading (or patching the Magento application)\n  Updating components (including install, uninstall, update, enable, disable)\n  Contributing developers only: Contributing developers—update, reinstall Magento\n\n\n\n  Deploy to production\n  Deploy Magento to production\n\n\n",
      "url": "/guides/v2.0/install-gde/install-roadmap_part1.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-roadmap-trouble-html": {
      "title": "Installation roadmap (reference)",
      "content": "\n\n  This roadmap provides a reference for the installation process. Refer to this topic at any time to move back and forth through the stages of installation.\n\n  This is a list of the most common topics you’ll need for installation; the list is not comprehensive, however. You’ll find additional information using the table of contents on the left side of the page.\n\n  Precondition: How advanced are you?\n\n  Do you know what a “terminal” application is? Do you know what operating system your server runs? Do you know what Apache is? If not, see the Installation overview.\n\n  Installation part 1: Getting started\n  Topics include: \n  Choose how to get the Magento software\n  System requirements\n  Prerequisites\n  The Magento file system owner\n\n\n\n  Installation part 2: Installing\n  Topics include: \n  Command line installation\n  Setup Wizard installation\n  Optional sample data\n\n\n\n  Installation part 3: Post-installation\n  Topics include: \n  Verifying\n  Troubleshooting\n  Configuring\n  Optional sample data (after installing Magento)\n  Magento in production\n\n\n\n  Upgrade, update\n  Topics include: \n  Upgrading (or patching the Magento application)\n  Updating components (including install, uninstall, update, enable, disable)\n  Contributing developers only: Contributing developers—update, reinstall Magento\n\n\n\n  Deploy to production\n  Deploy Magento to production\n\n\n",
      "url": "/guides/v2.0/install-gde/install-roadmap_trouble.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-roadmap-web-html": {
      "title": "Installation roadmap (reference)",
      "content": "\n\n  This roadmap provides a reference for the installation process. Refer to this topic at any time to move back and forth through the stages of installation.\n\n  This is a list of the most common topics you’ll need for installation; the list is not comprehensive, however. You’ll find additional information using the table of contents on the left side of the page.\n\n  Precondition: How advanced are you?\n\n  Do you know what a “terminal” application is? Do you know what operating system your server runs? Do you know what Apache is? If not, see the Installation overview.\n\n  Installation part 1: Getting started\n  Topics include: \n  Choose how to get the Magento software\n  System requirements\n  Prerequisites\n  The Magento file system owner\n\n\n\n  Installation part 2: Installing\n  Topics include: \n  Command line installation\n  Setup Wizard installation\n  Optional sample data\n\n\n\n  Installation part 3: Post-installation\n  Topics include: \n  Verifying\n  Troubleshooting\n  Configuring\n  Optional sample data (after installing Magento)\n  Magento in production\n\n\n\n  Upgrade, update\n  Topics include: \n  Upgrading (or patching the Magento application)\n  Updating components (including install, uninstall, update, enable, disable)\n  Contributing developers only: Contributing developers—update, reinstall Magento\n\n\n\n  Deploy to production\n  Deploy Magento to production\n\n\n",
      "url": "/guides/v2.0/install-gde/install-roadmap_web.html"
    }
    ,
  
    "guides-v2-0-howdoi-install-install-topics-html": {
      "title": "Installation and configuration",
      "content": "Installation\n\n  Installation quick reference\n  Command line installation\n  Setup Wizard installation\n  Component Manager and System Upgrade (post-installation)\n\n\nConfiguration\n\n  Set up caching (general)\n  Set up Redis\n  Set up Varnish\n  \n    Common configuration commands:\n\n    \n      Clean or flush the cache\n      Reindex\n      Run cron (task scheduler)\n      Compile code\n    \n  \n\n",
      "url": "/guides/v2.0/howdoi/install/install-topics.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-sample-data-clone-html": {
      "title": "Install by cloning repositories",
      "content": "\n\n  Install sample data by cloning repositories\n  This topic discusses how to get the Magento sample data if you cloned the Magento GitHub repository. This method is intended only for contributing developers (that is, developers who plan to contribute to the Magento 2 codebase).\n\n  If you’re not a contributing developer, choose one of the other options displayed in the table of contents on the left side of the page.\n\n  Contributing developers can use this method of installing sample data only if all of the following are true:\n\n  \n    You use Magento Open Source\n    You cloned the Magento 2 repository.\n  \n\n  \n    You can use sample data with either the develop branch (more current) or a released branch (such as 2.0 or 2.0.1 (more stable)). We recommend you use a released branch because it's more stable. If you're contributing code to the Magento 2 repository and you need the most recent code, use the develop branch.\n    Regardless of the branch you choose, you must clone the corresponding branch of the Magento 2 GitHub repository. For example, sample data for the develop branch can be used only with the Magento 2 develop branch.\n\n\n  See the following sections:\n\n  \n    Clone the sample data repository\n    Set file system ownership and permissions\n  \n\n  Clone the sample data repository\n  This section discusses how to install Magento sample data by cloning the sample data repository. You can clone the sample data repository in any of the following ways:\n\n  \n    Clone with the SSH protocol\n    Clone with the HTTPS protocol\n  \n\n  Clone with SSH\n  To clone the Magento sample data GitHub repository using the SSH protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    Next to the name of the branch, click SSH from the list.\n    \n      Click Copy to clipboard\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n\n      Need help locating the docroot?\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone git@github.com:magento/magento2-sample-data.git\n      \n    \n    \n      Wait for the repository to clone on your server.\n\n      \n    If the following error displays, make sure you shared your SSH key with GitHub: \n        Cloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n    \n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n    \n    \n      Wait for the command to complete.\n    \n    See Set file system permissions and ownership.\n  \n\n  Clone with HTTPS\n  To clone the Magento sample data GitHub repository using the HTTPS protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    On the right side of the page, under the clone URL field, click HTTPS.\n    \n      Click Copy to clipboard.\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone https://github.com/magento/magento2-sample-data.git\n      \n    \n    Wait for the repository to clone on your server.\n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n\n      For example,\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"/var/www/magento2\"\n      \n    \n    Wait for the command to complete.\n    See the next section.\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  Set file system ownership and permissions\n  Because the php build-sample-data.php script creates symlinks between the sample data repository and your Magento 2 repository, you must set file system permissions and ownership in the sample data repository. Failure to do so results in errors accessing the storefront.\n\n  To set file system permissions and ownership on the sample data repository:\n\n  \n    Change to your sample data clone directory.\n    \n      Set ownership:\n\n      chown -R :&lt;your web server group name&gt; .\n      \n\n      Typical examples:\n\n      CentOS: chown -R :apache .\n\n      Ubuntu: chown -R :www-data .\n    \n    \n      Set permissions:\n\n      find . -type d -exec chmod g+ws {} \\;\n      \n    \n    \n      Clear static files:\n\n      cd &lt;your Magento Open Source install dir&gt;/var\nrm -rf cache/* page_cache/* generation/*\n      \n    \n  \n\n  \n\n  Install the Magento software\n  After sample data installation is complete, install the Magento software using the Web Setup Wizard.\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web-sample-data-clone.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-sample-data-composer-html": {
      "title": "Install using Composer",
      "content": "\n\n  This section discusses how to install sample data if you got the Magento software in any of the following ways:\n\n  \n    \n      Downloaded a compressed archive from Magento.\n\n      If you downloaded an archive from Github, this method won’t work because the composer.json file doesn’t contain the repo.magento.com URL.\n    \n    \n      Used composer create-project\n    \n  \n\n  You can use this method of getting sample data for both Magento Open Source or Magento Commerce, but you must use the same authentication keys you used to install Magento.\n\n  \n    If you encounter errors, such as Could not find package... or ...no matching package found..., make sure there aren’t any typos in your command. If you still encounter errors, you may not have access to the right Composer repositories, especially if your using Magento Commerce. Contact Magento support for help.\n  \n\n  You can use Composer to install sample data either before or after installing Magento; however, there might be additional tasks.\n\n  If you’re a contributing developer, refer to Install by cloning repositories.\n\n  \n    Do not install sample data if your Magento application is set for production mode. Switch to developer mode first. Installing sample data in production mode fails.\n\n\n  To install sample data using the command line, enter the following command as the Magento file system owner:\n\n  php &lt;your Magento install dir&gt;/bin/magento sampledata:deploy\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  You are required to authenticate to complete the action.\n\n  Authentication error\n  The following authentication error might display:\n\n  [Composer\\Downloader\\TransportException]\nThe 'https://repo.magento.com/packages.json' URL required authentication.\nYou must be using the interactive console to authenticate\n  \n\n  If the error displays, change to your Magento installation directory and run composer update, which will prompt you for your authentication keys.\n\n  Install the Magento software\n  After sample data installation is complete, install the Magento software using the Web Setup Wizard.\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web-sample-data-composer.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-sample-data-html": {
      "title": "Install optional sample data modules",
      "content": "\n\n  Introduction to Magento sample data\n  Magento sample data provides a storefront based on the Luma theme outfitted with products, categories, customer registration, and so on. It functions just like a Magento storefront and you can manipulate prices, inventory, and promotional pricing rules using the Magento Admin.\n\n  You can install sample data either before or after installing the Magento software. When you’re done with the sample data, you can either remove it or you can install it fresh as discussed in Remove sample data modules or update sample data.\n\n  \n    There is currently no way to uninstall sample data. We recommend you use sample data only to learn about how Magento works. Avoid doing any development in a system in which you installed sample data.\n\n\n  You can install optional sample data in any of the following ways:\n\n  \n\t\n\t\t\n\t\t\tInstallation method\n\t\t\tDescription\n\t\t\tRequired skill level\n\t\t\n\t\t\n\t\n\t\tUsing Composer\n\t\tRun magento sampledata:deploy to modify Magento's root composer.json to enable sample data modules.\n\t\tRequires Composer knowledge and access to the Magento file system.\n\t\n\t\n\t\tCloning repositories\n\t\tClone the Magento 2 repository and the sample data repository, then link them together.\n\t\tFor contributing developers only. Everyone else should use one of the preceding methods.\n\t\n\t\n\n\n  \n\n  For more information, see:\n\n  \n    Install using Composer\n    Install by cloning repositories\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web-sample-data.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-html": {
      "title": "Setup Wizard installation",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\n\n  If you chose to enable SELinux, see SELinux and iptables.\n\n\n\n\n  This section discusses how to install the Magento software using a web-based wizard interface. To install Magento from the command line, see Install Magento software using the command line.\n\n  Before you start your installation\n\n  Before you begin, make sure that:\n\n  \n    Your system meets the requirements discussed in Magento System Requirements.\n    You completed all prerequisite tasks discussed in Prerequisites.\n    After you log in to the Magento server, switch to the Magento file system owner.\n  \n\n  Enabling and disabling modules\n  The Setup Wizard enables you to enable or disable modules before you install the Magento software. Before you do so, make sure you understand the following.\n\n  Magento enables you to enable or disable currently available modules; in other words, any Magento-provided module or any third-party module that is currently available.\n  Certain modules have dependencies on other modules, in which case you might not be able to enable or disable a module because it has dependencies on other modules. \n  In addition, there might be conflicting modules that cannot both be enabled at the same time.\n  Examples:\n  Module A depends on Module B. You cannot disable Module B unless you first disable Module A.\n\tModule A depends on Module B, both of which are disabled. You must enable module B before you can enable module A.\n\tModule A conflicts with Module B. You can disable Module A and Module B, or you can disable either module but you cannot enable Module A and Module B at the same time.\n\n  Dependencies are declared in the require field in Magento's composer.json file for each module. Conflicts are declared in the conflict field in modules' composer.json files. We use that information to build a dependency graph:\n  A-&gt;B means module A depends on module B.\n\tA dependency chain is the path from a module to another one. For example, if module A depends on module B and module B depends on module C, then the dependency chain is A-&gt;B-&gt;C.\n  If you attempt to enable or disable a module that depends on other modules, the dependency graph displays in the error message.\n  \n\n  It's possible that module A's composer.json declares a conflict with module B but not vice versa.\n\n\n  Command line module enable or disable subcommand only: To force a module to be enabled or disabled regardless of its dependencies, use the optional --force argument.\n\n  \n    Using --force can disable your Magento store and cause problems accessing the Magento Admin.\n\n\n  Running the Setup Wizard\n  The Setup Wizard is a multi-page wizard that enables you to go back and forward one page at a time. You cannot skip pages, and you must enter all required information on every page before you can proceed to the next page.\n\n  In the event of errors, you can run the installer again or you can return to a previous page to fix errors on that page.\n\n  Getting started\n  To install the Magento software using the Setup Wizard:\n\n  \n    \n      Start a web browser.\n    \n    \n      Enter the following URL in the browser’s address or location bar:\n\n      http://&lt;Magento host or IP&gt;/&lt;path to Magento root&gt;/setup\n      \n\n      For example, if the Magento server’s IP address is 192.0.2.10 and you installed Magento 2 in the magento2 directory relative to the web server’s docroot, and you did not configure a Virtual Host, enter:\n\n      http://192.0.2.10/magento2/setup\n      \n    \n    \n      On the initial page, click Agree and Set Up Magento.\n    \n    \n      Continue with the following topics in the order presented to complete the installation.\n    \n  \n\n  Next step\n  Step 1: Readiness Check\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-1-readiness-html": {
      "title": "Step 1. Readiness check",
      "content": "Before you begin\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nYou started your installation as discussed in Getting started.\nYou completed all preceding steps in the Setup Wizard.\n\n\n\n\n  Step 1: Readiness Check\n\n  \n    \n      Click Start Readiness Check.\n\n      If any errors display, you must resolve them before you continue.\n\n      Click More detail if available to see more information about each check.\n    \n    \n      Click Next.\n    \n  \n\n  Next step\n  Step 2. Add a database\n\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_1-readiness.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-2-db-html": {
      "title": "Step 2. Add a Database",
      "content": "Before you begin\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nYou started your installation as discussed in Getting started.\nYou completed all preceding steps in the Setup Wizard.\n\n\n\n\n  Step 2: Add a Database\n\n  \n    \n      Enter the following information:\n\n      \n\n    \n        Item\n        Description\n    \n\n    Database Server Host\n    If the web server and database server are located on the same host, enter localhost. If the database server is located on a different host, enter its fully qualified host name or IP address.\n\n\n    Database Server Username\n    Enter the user name of the Magento database instance owner.\n\n\n    Database Server Password\n    Enter the Magento database user's password, if any. Leave this field blank if you did not configure a password.\n\n\n    Database Name\n    Enter the Magento database instance name.\n\n\n    Table prefix\n    Use only if you're installing the Magento database tables in a database instance that has Magento tables in it already.\n    In that case, use a prefix to identify the Magento tables for this installation. Some customers have more than one Magento instance running on a server with all tables in the same database.\n    The prefix can be a maximum of five characters in length. It must begin with a letter and can include only letters, numbers, and underscore characters.\n    This option enables those customers to share the database server with more than one Magento installation.\n\n\n\n    \n    \n      Click Next.\n    \n  \n\n  Next step\n  Step 3. Web configuration\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_2-db.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-3-web-conf-html": {
      "title": "Step 3. Web Configuration",
      "content": "Before you begin\nBefore you begin, make sure that:\nYour system meets the requirements discussed in Magento System Requirements.\nYou completed all prerequisite tasks discussed in Prerequisites.\nYou started your installation as discussed in Getting started.\nYou completed all preceding steps in the Setup Wizard.\n\n\n\n\n  Step 3: Web Configuration\n\n  \n    \n      Enter the following information:\n\n      \n\n    \n        Item\n        Description\n    \n\n    Your Store Address \n    Enter the URL, including scheme and trailing slash, by which users access your storefront.\n    For example, if your storefront host name is http://www.example.com, enter http://www.example.com/\n\n\n    Magento Admin Address \n    Enter the relative URL by which to access the Magento Admin.\n\n\n\n    \n    \n      Optionally click Advanced Options and enter the following information:\n\n      \n\n\n        Item\n        Description\n    \n\n    HTTPS Options\n    Select the check box to enable the use of Secure Sockets Layer (SSL) in the indicated URL. Make sure your web server supports SSL before you select either check box.\n\n\n    Apache Rewrites\n    Select this check box to use Apache rewrites. We support this option only if you enabled server rewrites when you installed Apache.\n\n\n    Encryption Key\n    Magento uses an encryption key to encrypt sensitive data in the database.\n    Click I want to use a Magento generated key to have Magento generate an encryption key for you.\n    Click I want to use my own encryption key if you already have an encryption key.\n\n\n    Session Save\n    From the list, click the option corresponding to how to store session data.\n        The default is Files, which means session data is saved in the var/session subdirectory of the Magento file system.\n        You can also choose Db, which means session data is stored in the database. &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\t\n\n    \n    \n      Click Next.\n    \n  \n\n  \n\n    What is sensitive data?\n    Magento uses your encryption key to encrypt the following:\n\n    \n      Credit card information\n      User names and passwords specified in the Magento Admin configuration  (for example, logins to payment gateways)\n      CAPTCHA values sent over the network\n    \n\n    Magento does not encrypt:\n\n    \n      Administrative and customer user names and passwords (these passwords are hashed)\n      Address\n      Phone number\n      Other types of personally identifiable information except for credit card numbers\n    \n\n    Next step\n    Step 4. Customize your store\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_3-web-conf.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-4-customize-store-html": {
      "title": "Step 4. Customize Your Store",
      "content": "\n\n  Step 4: Customize Your Store\n\n  \n\n  \n    \n      From the Store Default Time Zone list, click the name of your store’s time zone.\n    \n    \n      From the Store Default Currency list, click the default currency to use in your store.\n    \n    \n      From the Store Default Language list, click the default language to use in your store.\n    \n    \n      Expand Advanced Modules Configuration to optionally enable or disable modules before you install the Magento software.\n\n      Before you enable or disable modules, review the information discussed in Enabling and disabling modules.\n\n      See one of the following sections for more information about enabling and disabling modules:\n\n      \n        General module configuration options\n        Module dependency errors\n      \n    \n    \n      Click Next.\n    \n  \n\n  General module configuration options\n  Modules are listed in Advanced Modules Configuration in alphabetical order; the order has nothing to do with dependencies.\n\n  You have the following options for any module listed:\n\n  \n    To enable a module that is currently disabled, select its check box.\n    To disable a module that is currently enabled, clear its check box.\n    Use the Select All check box to:\n      \n        Enable all modules if any module is currently disabled.\n        Disable all available modules (that is, all modules that do not depend on other enabled modules).\n      \n    \n  \n\n  If a module’s check box is unavailable, some other module depends on it. In the case of a dependency, to change the state of that module, you must first perform the corresponding action on the module on which it depends.\n\n  For example, Magento_GoogleAnalytics can be disabled only if Magento_GoogleOptimizer is disabled first. Conversely, if both modules are disabled, you must enable Magento_GoogleAnalytics first.\n\n  The following figure shows an example of disabling the Magento_GoogleAnalytics and Magento_GoogleOptimizer modules.\n\n  \n\n  Module dependency errors\n  A dependency error occurs when two inter-dependent modules are disabled at the same time.\n\n  If there is a dependency error, a message similar to the following displays.\n\n\n  Click Show details to display details about the dependency error. You can then do any of the following:\n\n  \n    Select the Skip dependency check for individual modules to ignore the issue and continue with your installation. (Additional dependency checks are performed after you click Next.)\n    Resolve the issue by taking the action indicated by the message.\n  \n\n  \n\tUse Skip dependency check for individual modules with caution. We recommend against it because a typical reason for this error is you manually edited the deployment configuration. Editing the deployment configuration is not recommended because future Magento software updates can undo your changes.\n\n\n  Next step\n  Step 5. Create Admin account\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_4-customize-store.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-5-create-admin-html": {
      "title": "Step 5. Create Admin Account",
      "content": "\nStep 5: Create Admin Account\n\n\n  \n    Enter the following information:\n\n    \n\n\n        Item\n        Description\n    \n\n    New Username\n    Enter a user name with which to log in to the Magento Admin. This user is an administrator and can create other users, including other administrative users.\n\n\n    New E-Mail\n    Enter the Magento administrator's e-mail address.\n\n\n    New Password\n    Enter the administrator's password.\n\n\n    Confirm Password\n    Enter the password again for verification.\n\n\n\n  \n  \n    Click Next.\n  \n\n\nNext step\nStep 6. Install\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_5-create-admin.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-web-install-web-6-install-html": {
      "title": "Step 6. Install",
      "content": "\n\n  Step 6: Install\n\n  After completing all preceding steps in the Setup Wizard, click Install Now.\n\n  You have the following options:\n\n  \n    To see installation progress or error details, click Console Log.\n    In the event of problems, click Previous to go back and fix incorrect entries.\n    To try the installation again in the event of failure, click Try Again.\n  \n\n  Installation Success\n\n  The message Success displays to indicate a successful installation.\n\n  If the installation failed, click Previous to review the information you entered, make sure the Magento server and database host are still reachable, or see Troubleshooting.\n\n  You can also run the installer again.\n\n  Viewing the installation log\n  The Setup Wizard creates a log file, named install.log, that you might find useful in debugging issues or in verifying the actions performed by the wizard.\n\n  The Setup Wizard uses the sys_get_temp_dir ( void ) PHP call to determine where to write the installation log. To locate the log:\n\n  \n    \n      Open php.ini in a text editor.\n\n      If you don’t know where php.ini is located:\n\n      \n        Log in as or switch to the switch to the Magento file system owner.\n        Create phpinfo.php in the web server’s docroot.\n        \n          Access phpinfo.php in a web browser.\n\n          The location of php.ini is typically specified as Loaded Configuration File in the displayed results.\n        \n      \n    \n    \n      Search for sys_temp_dir.\n    \n  \n\n  The value of sys_temp_dir determines where install.log is located. If the value is commented out, PHP uses that value as its default.\n\n  A typical default value is /tmp. If that’s the case, the log is /tmp/install.log.\n\n  Next step\n  Verify the installation\n\n\n",
      "url": "/guides/v2.0/install-gde/install/web/install-web_6-install.html"
    }
    ,
  
    "guides-v2-0-test-integration-integration-test-execution-html": {
      "title": "Running Integration Tests",
      "content": "Integration tests require the Magento runtime environment, so they need a little preparation before they can be executed.\nOnce the system is prepared, the tests can be executed using either the command line interface or within an IDE like PHPStorm.\n\nSetting up the integration test framework\n\nIn order to run the integration tests, a test database has to be created and configured.\nBesides this, you might also want to adjust the PHPUnit configuration, depending on your requirements.\n\nPlease refer to Preparing Integration Test Execution for further information on setting up the test environment.\n\nCommand Line Interface (CLI)\n\nThis option can be used for running the tests locally during development or on remote servers during Continuous Integration.\n\nPlease refer to Running Integration Tests in the CLI for further information.\n\nPHPStorm IDE\n\nRunning the integration tests inside an IDE like PHPStorm IDE is convenient during development. This is mostly used when writing a new integration test.\n\nOther then convenience there is no benefit over running the tests on the console.\n\nPlease refer to Running Integration Tests in PHPStorm for further information.\n\nPreparing Integration Test Execution\n\nBefore the Magento integration test framework can be used, the test environment has to be prepared.\nThe following prerequisites are required:\n\n\n  A dedicated integration test database\n  The test framework database configuration\n  The PHPUnit configuration has to match the purpose of the integration test execution\n\n\nThe integration test database\n\nBy default, for every integration test run, the test framework installs a fresh Magento test database.\n\n\n    Do not use the same database as the real Magento instance.\n    Any data (products, customers, orders and everything else) will be lost!\n\n\nFor safety reasons it is recommended to use a dedicated database user for running the tests. That db user should not have access to any other databases.\nHere are example SQL commands to create a test database and a dedicated test user account.\n\nCREATE DATABASE magento_integration_tests;\nGRANT ALL ON magento_integration_tests.* TO 'magento2_test_user'@'localhost' IDENTIFIED BY 'ftYx4pm6^x9.&amp;^hB';\n\n\nReplace the example database and user name and the example password with something that matches your requirements and conventions.\n\nConfiguring the framework to use the test database\n\nThe Magento 2 integration test framework comes with a configuration file template located at\nmage2ce/dev/tests/integration/etc/install-config-mysql.php.dist.\n\nCopy this file to\nmage2ce/dev/tests/integration/etc/install-config-mysql.php\n(without the .dist suffix) and add your test database access credentials.\n\nThe contents will look something like the following. Use the DB access credentials for your test database instead of the example values below.\n\n&lt;?php\n\nreturn [\n    'db-host' =&gt; 'localhost',\n    'db-user' =&gt; 'magento2_test_user',\n    'db-password' =&gt; 'ftYx4pm6^x9.&amp;^hB',\n    'db-name' =&gt; 'magento_integration_tests',\n    'db-prefix' =&gt; '',\n    'backend-frontname' =&gt; 'backend',\n    'admin-user' =&gt; \\Magento\\TestFramework\\Bootstrap::ADMIN_NAME,\n    'admin-password' =&gt; \\Magento\\TestFramework\\Bootstrap::ADMIN_PASSWORD,\n    'admin-email' =&gt; \\Magento\\TestFramework\\Bootstrap::ADMIN_EMAIL,\n    'admin-firstname' =&gt; \\Magento\\TestFramework\\Bootstrap::ADMIN_FIRSTNAME,\n    'admin-lastname' =&gt; \\Magento\\TestFramework\\Bootstrap::ADMIN_LASTNAME,\n];\n\n\n\n  Be sure to leave all the settings that do not start with db- at their default values.\n\n\nAdjusting the PHPUnit configuration file\n\nThe default integration test configuration can be found at dev/tests/integration/phpunit.xml.dist.\n\nWithout adjustments it will run all core integration tests, which is useful for example on a continuous integration server.\n\nWhen making adjustments to the configuration, copy the default file to dev/tests/integration/phpunit.xml (again, without the .dist suffix) and make your changes there. That way your changes will not be overwritten during Magento upgrades.\n\nThere are many settings in the file.\nThis guide will only describes three common adjustments.\nPlease refer to the PHPUnit documentation and the comments in the default file for more information on the available configuration settings.\n\nThe TESTS_CLEANUP Constant\n\nDefault value:\n\n&lt;const name=\"TESTS_CLEANUP\" value=\"enabled\"/&gt;\n\n\nIf this constant is set to enabled, the integration test framework will clean the test database and re-install Magento on every test run.\nThat way any new modules will be automatically picked up, and any cruft that might have been left over from previous test runs will be removed.\nIt also causes the test framework to flush the test Magento configuration, the cache and the code generation before executing any tests.\n\nThe downside of setting TEST_CLEANUP to enabled is that the re-installation of Magento takes time (the exact time depends on the host you are using to run the integration tests and the Magento version.)\n\nDuring the development of new integration tests, where only a subset of the tests is executed repeatedly, that overhead of setting up a fresh execution environment for each run quickly becomes a burden.\n\nIn that case the TEST_CLEANUP constant can be set to disabled.\nThe test execution will start much quicker, but as a consequence the developer has to flush the cache and the database when needed manually.\n\nThe integration test framework creates the temporary test files beneath the directory\ndev/tests/integration/tmp/sandbox-* (followed by a long hash ID).\n\nTo force the test framework to regenerate the cache and the other files, it is enough to remove the directory.\n\n$ rm -r dev/tests/integration/tmp/sandbox-*\n\n\nThe PHP memory_limit\n\nThe default phpunit.xml.dist file does not contain any PHP memory_limit settings.\nHowever, sometimes the PHP configuration restricts the amount of memory PHP may consume.\nThis can make it impossible to run the integration tests.\n\nThe PHP memory limit can be turned off by adding the following configuration to the &lt;php&gt; section of the integration test phpunit.xml file:\n\n&lt;ini name=\"memory_limit\" value=\"-1\"/&gt;\n\n\nExecuting third party integration tests\n\nThe Magento code integration tests reside in the directory dev/tests/integration/testsuite.\nFor core tests it makes sense that the integration tests do not reside within individual modules, because most integration test execute code from many different modules.\n\nShop implementation specific integration tests could also be placed within a different subdirectory of dev/tests/integration/testsuite and then would be executed together with the core tests.\n\nHowever, third party Magento extensions are contained within a single directory, and might supply custom integration tests, too.\nThese tests usually are placed in the subdirectory Test/Integration/ within the module folder.\n\nThese third party integration tests are not picked up by the default integration test configuration.\nA testsuite configuration like the following can be added to the &lt;testsuites&gt; section of the phpunit.xml file so they are included during test execution.\n\n&lt;testsuite name=\"Third Party Integration Tests\"&gt;\n    &lt;directory&gt;../../../app/code/*/*/Test/Integration&lt;/directory&gt;\n    &lt;directory&gt;../../../vendor/*/module-*/Test/Integration&lt;/directory&gt;\n    &lt;exclude&gt;../../../app/code/Magento&lt;/exclude&gt;\n    &lt;exclude&gt;../../../vendor/magento&lt;/exclude&gt;\n&lt;/testsuite&gt;\n\n\nSuch a test suite configuration can then be executed using the --testsuite &lt;name&gt; command option, for example if you are in the dev/tests/integration directory:\n\n$ php ../../../vendor/bin/phpunit --testsuite \"Third Party Integration Tests\"\n\n\nRunning Integration Tests in the CLI\n\nProbably the most common way to execute integration tests is using the command line.\n\nPlease ensure you have prepared the integration test environment before starting.\n\nThe integration tests have to be executed with the current working directory being dev/tests/integration.\nThe test configuration resides in that directory and will be picked up by phpunit automatically, without the need to specify it as a command line option.\n\nRunning all integration tests\n\nBy default, if no additional arguments are specified, the test configuration executes all integration tests in the directory dev/tests/integration/testsuite.\n\n$ cd dev/tests/integration\n$ ../../../vendor/bin/phpunit\nPHPUnit 4.1.0 by Sebastian Bergmann.\n\nConfiguration read from /var/www/magento2/dev/tests/integration/phpunit.xml\n\n..........................\n\n\nNote the path to the phpunit executable installed by composer into the vendor directory is used.\n\nRunning only a custom testsuite\n\nPHPUnit offers several ways to only execute a subset of tests.\nFor example, it is common to only execute a single testsuite from the phpunit.xml configuration.\n\n$ cd dev/tests/integration\n$ ../../../vendor/bin/phpunit --testsuite \"Memory Usage Tests\"\n\n\nRunning a tests from a specific directory tree\n\nTo execute only the tests within a specific directory (for example an extension), pass the path to that directory as an argument to phpunit.\n\n$ cd dev/tests/integration\n$ ../../../vendor/bin/phpunit ../../../app/code/Acme/Example/Test/Integration\n\n\nRunning a single test class\n\nWhen developing a new integration test class, it is common to run only that single test many times.\nPass the path to the file containing the test class as an argument to phpunit.\n\n$ cd dev/tests/integration\n$ ../../../vendor/bin/phpunit ../../../app/code/Acme/Example/Test/Integration/ExampleTest.php\n\n\nRunning a single test within a test class\n\nRunning only a single test within a test class can be done by specifying the test class together with the --filter argument and the name to select the test currently being developed.\n\n$ cd dev/tests/integration\n$ ../../../vendor/bin/phpunit --filter 'testOnlyThisOneIsExecuted' ../../../app/code/Acme/Example/Test/Integration/ExampleTest.php\n\n\nCommon mistakes\n\nCan’t read files specified as arguments\n\nThis happens if the integration tests are executed from a wrong directory.\n\nCould not read “dev/tests/integration/phpunit.xml”\n\nThis error happens if the integration tests are executed from a different directory then dev/tests/integration.\nTo fix the issue, change into the directory dev/tests/integration and run the tests from there with any relative paths adjusted accordingly.\n\nUnable to connect to MySQL\n\nThe PHP interpreter has to be able to connect to the test database. By default this means the tests have to run on the same host as the MySQL server.\nThis problem most commonly crops up during development with vagrant or docker, where the Magento DB is running on a virtual machine.\nIf the tests then are executed using a PHP interpreter on the host system, the database might not be accessible.\n\nThe error usually looks something like this.\n$ phpunit\nexception 'PDOException' with message 'SQLSTATE[HY000] [2002] No such file or directory' in /var/www/magento2/vendor/magento/zendframework1/library/Zend/Db/Adapter/Pdo/Abstract.php:129\n\n\nThere are many ways this problem can be resolved, but the easiest is to run the tests in the virtual machine, too.\n\nRunning Integration Tests in PHPStorm\n\nWhen writing new integration tests or during debugging, it is convenient to execute tests from within the the PHPStorm IDE.\n\nPlease ensure you have prepared the integration test environment before starting.\n\nCreating an integration test run configuration\n\nSetting up a run configuration for integration tests is very similar to creating a run configuration for unit tests.\n\nPlease refer to Running Unit Tests in PHPStorm for instructions on how to create a basic run configuration.\nThen configure the integration test configuration file to be used.\n\nUsing the integration test configuration file\n\nThe only difference in the run configuration is the integration test phpunit.xml.dist or phpunit.xml configuration file from the directory dev/tests/integration has to be selected.\n\n\n\n\n\n",
      "url": "/guides/v2.0/test/integration/integration_test_execution.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-integrator-install-html": {
      "title": "(Integrator) Integrator installation",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\n(Integrator) Overview of integrator installation\nThis topic provides an overview of how to get either the Magento Open Source or Magento Commerce metapackage.\n\nIntended audience\nThe audience for this topic is anyone who downloads the Magento metapackage using composer create-project. If that isn’t you, go back and choose another starting point.\n\nPrerequisites\n\n\n\n  Before you continue, make sure you’ve done all of the following:\n\n  \n    \n      Set up a server that meets our system requirements\n\n      For details, see Prerequisites\n    \n    \n      Created the Magento file system owner\n    \n  \n\n  \n\n    Composer and Magento\n\n    We use Composer for dependency management. Composer enables us to manage the Magento components and their dependencies.\n\n    As an integrator, you want to manage each of your Magento core components and third-party components using the Component Manager and System Upgrade.\n\n    To do so, you start by creating a Composer project from our metapackage. The metapackage installs each component so it can be centrally managed after installation.\n\n    Composer provides you with the following advantages:\n\n    \n      Enables you to reuse third-party libraries without bundling them with source code\n      Component-based architecture with robust dependency management\n      Manages dependencies to reduce extension conflicts and compatibility issues\n      Versioned dependencies\n      Semantic versioning\n      Supports the PHP Framework Interoperability standard\n    \n\n    Next step\n    Install Composer\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/integrator_install.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-integrator-install-ce-html": {
      "title": "Get the Magento Open Source metapackage",
      "content": "To get the Magento Open Source metapackage:\n\n\n  See (Integrator) Integrator installation first.\n  If you haven’t done so already, get your authentication keys.\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to the web server docroot directory, or to a directory you’ve configured as a virtual host docroot.\n  \n    Enter the following command:\n\n    composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition &lt;installation directory name&gt;\n    \n\n    When prompted, enter your authentication keys. Your public key is your username; your private key is your password.\n\n    This command creates the project and downloads dependencies for it. The project is in a directory named &lt;installation directory name&gt; if you provided the parameter or project-community-edition if you did not.\n\n    \n  \t\tIf the following error displays, see troubleshooting:\n  \t\tfile_get_contents(app/etc/NonComposerComponentRegistration.php): failed to open stream: No such file or directory\n\n  \n  Continue with Set file system ownership and permissions.\n\n\n\n\n  Set pre-installation file system ownership and permissions\n  This topic discusses how to set read-write permissions for the web server group before you install the Magento software. This is necessary so the Setup Wizard or command line can write files to the Magento file system.\n\n  The procedure you use is different, depending on whether you use shared hosting and have one user or if you use a private server and have two users.\n\n  \n  If you're using a Magento version earlier than 2.0.6, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead.\n\n\n  Set permissions for shared hosting (one user)\n  This section discusses how to set pre-installation permissions if you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n\n  To set ownership and permissions for a one-user system: To set permissions before you install the Magento software:\n\n\n  Log in to your Magento server.\n  \n    Use a file manager application provided by your shared hosting provider to verify write permissions are set on the following directories:\n\n    \n      vendor (Composer or compressed archive installation)\n      app/etc\n      pub/static\n      var\n      Any other static resources\n    \n  \n  \n    If you have command-line access, enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\;\nchmod u+x bin/magento\n    \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\; &amp;&amp; chmod u+x bin/magento\n    \n  \n  \n    If you haven’t done so already, get the Magento software in one of the following ways:\n\n    \n      Compressed archive\n      Composer metapackage\n      Clone the repository (contributing developers only)\n    \n  \n  \n    After you have set file system ownership and permissions, continue with any of the following:\n\n    \n      Command-line installation\n      Setup Wizard installation\n    \n  \n\n\n\n  To further restrict permissions after installing the Magento software, you configure a Magento umask.\n\n\n\n\n  Set ownership and permissions for two users\n  This section discusses how to set ownership and permissions for your own server or a private hosting setup. In this type of setup, you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user.\n\n  To set ownership and permissions for a two-user system: Complete the following tasks in the order shown:\n\n\n  About the shared group\n  Step 1: Create the Magento file system owner and give the user a strong password\n  Step 2: Find the web server group\n  Step 3: Put the Magento file system owner in the web server’s group\n  Step 4: Get the Magento software\n  Step 5: Set ownership and permissions for the shared group\n\n\nAbout the shared group\nTo enable the web server to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files (including files created using the Magento Admin or other web-based utilities).\n\nThis section discusses how to create a new Magento file system owner and put that user in the web server’s group. You can use an existing user account if you wish; we recommend the user have a strong password for security reasons.\n\n\n\tSkip to step 2 if you plan on using an existing user account.\n\n\nStep 1: Create the Magento file system owner and give the user a strong password\nThis section discusses how to create the Magento file system owner. (Magento file system owner is another term for the command-line user.)\n\nTo create a user on CentOS or Ubuntu, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nStep 2: Find the web server user’s group\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nStep 3: Put the Magento file system owner in the web server’s group\nTo put the Magento file system owner in the web server’s group (assuming the typical Apache group name for CentOS and Ubuntu), enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -a -G apache &lt;username&gt;\n  Ubuntu: usermod -a -G www-data &lt;username&gt;\n\n\n\n  The -a -G options are important because they add apache or www-data as a secondary group to the user account, which preserves the user’s primary group. Adding a secondary group to a user account helps restrict file ownership and permissions to ensure members of a shared group only have access to certain files.\n\n\nFor example, to add apache as a secondary group to user magento_user on CentOS:\n\nsudo usermod -a -G apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups magento_user\n\n\nThe following sample result shows the user’s primary (magento) and secondary (apache) groups.\n\nmagento_user : magento_user apache\n\n\n\n  Typically, the user name and primary group name are the same.\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nStep 4: Get the Magento software\nIf you haven’t done so already, get the Magento software in one of the following ways:\n\n\n  Compressed archive\n  Composer metapackage\n  Clone the repository (contributing developers only)\n\n\nStep 5: Set ownership and permissions for the shared group\nTo set ownership and permissions before you install the Magento software:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nsudo chown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Next step\n  After you have set file system ownership and permissions, continue with any of the following:\n\n  \n    Command-line installation\n    Setup Wizard installation\n  \n\n\n\n  Switch to the Magento file system owner\n  After you’ve performed the other tasks in this topic, enter one of the following commands to switch to that user:\n\n  \n    Ubuntu: su &lt;username&gt;\n    CentOS: su - &lt;username&gt;\n  \n\n  For example,\n\n  su magento_user\n  \n\n  Next step\n  Install the Magento software:\n\n  \n    Command line\n    Setup Wizard\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/integrator_install_ce.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-integrator-install-composer-html": {
      "title": "Install Composer",
      "content": "Install Composer\n\n\n\n  First, check  if Composer is already installed:\n\n  In a command prompt, enter any of the following commands:\n\n  \n    composer --help\n    composer list --help\n  \n\n  If command help displays, Composer is already installed.\n\n  If an error displays, use the following steps to install Composer.\n\n  To install Composer:\n\n  \n    \n      Change to or create an empty directory on your Magento server.\n    \n    \n      Enter the following commands:\n\n      curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n      \n\n      For additional installation options, see the Composer installation documentation.\n    \n  \n\n  Next step\n  \n    Get the Magento Open Source metapackage\n    Get the Magento Commerce metapackage\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/integrator_install_composer.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-integrator-install-ee-html": {
      "title": "Get the Magento Commerce metapackage",
      "content": "To get the Magento Commerce metapackage:\n\n\n  See (Integrator) Integrator installation first.\n  \n    Make sure you know your support portal user name and password.\n\n    If you don’t remember it, contact Magento Support before you continue.\n  \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to the web server docroot directory, or to a directory you’ve configured as a virtual host docroot.\n  \n    Enter the following command:\n\n    composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition &lt;installation directory name&gt;\n    \n\n    When prompted, enter your authentication keys. Your public key is your username; your private key is your password.\n\n    The following error indicates your tokens are incorrect:\n\n      Could not find package magento/project-enterprise-edition with version &lt;version&gt;\n    \n\n    If you receive this error after creating authentication keys as discussed previously, your account might not be authorized to download Magento EE. Contact Magento support to resolve the issue.\n\n    This command creates the project and downloads dependencies for it. The project is in a directory named &lt;installation directory name&gt; if you provided the parameter or project-enterprise-edition if you did not.\n\n    \n  \t\tIf the following error displays, see troubleshooting:\n  \t\tfile_get_contents(app/etc/NonComposerComponentRegistration.php): failed to open stream: No such file or directory\n\n  \n\n\n\n\n  Set pre-installation file system ownership and permissions\n  This topic discusses how to set read-write permissions for the web server group before you install the Magento software. This is necessary so the Setup Wizard or command line can write files to the Magento file system.\n\n  The procedure you use is different, depending on whether you use shared hosting and have one user or if you use a private server and have two users.\n\n  \n  If you're using a Magento version earlier than 2.0.6, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead.\n\n\n  Set permissions for shared hosting (one user)\n  This section discusses how to set pre-installation permissions if you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n\n  To set ownership and permissions for a one-user system: To set permissions before you install the Magento software:\n\n\n  Log in to your Magento server.\n  \n    Use a file manager application provided by your shared hosting provider to verify write permissions are set on the following directories:\n\n    \n      vendor (Composer or compressed archive installation)\n      app/etc\n      pub/static\n      var\n      Any other static resources\n    \n  \n  \n    If you have command-line access, enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\;\nchmod u+x bin/magento\n    \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\; &amp;&amp; chmod u+x bin/magento\n    \n  \n  \n    If you haven’t done so already, get the Magento software in one of the following ways:\n\n    \n      Compressed archive\n      Composer metapackage\n      Clone the repository (contributing developers only)\n    \n  \n  \n    After you have set file system ownership and permissions, continue with any of the following:\n\n    \n      Command-line installation\n      Setup Wizard installation\n    \n  \n\n\n\n  To further restrict permissions after installing the Magento software, you configure a Magento umask.\n\n\n\n\n  Set ownership and permissions for two users\n  This section discusses how to set ownership and permissions for your own server or a private hosting setup. In this type of setup, you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user.\n\n  To set ownership and permissions for a two-user system: Complete the following tasks in the order shown:\n\n\n  About the shared group\n  Step 1: Create the Magento file system owner and give the user a strong password\n  Step 2: Find the web server group\n  Step 3: Put the Magento file system owner in the web server’s group\n  Step 4: Get the Magento software\n  Step 5: Set ownership and permissions for the shared group\n\n\nAbout the shared group\nTo enable the web server to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files (including files created using the Magento Admin or other web-based utilities).\n\nThis section discusses how to create a new Magento file system owner and put that user in the web server’s group. You can use an existing user account if you wish; we recommend the user have a strong password for security reasons.\n\n\n\tSkip to step 2 if you plan on using an existing user account.\n\n\nStep 1: Create the Magento file system owner and give the user a strong password\nThis section discusses how to create the Magento file system owner. (Magento file system owner is another term for the command-line user.)\n\nTo create a user on CentOS or Ubuntu, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nStep 2: Find the web server user’s group\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nStep 3: Put the Magento file system owner in the web server’s group\nTo put the Magento file system owner in the web server’s group (assuming the typical Apache group name for CentOS and Ubuntu), enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -a -G apache &lt;username&gt;\n  Ubuntu: usermod -a -G www-data &lt;username&gt;\n\n\n\n  The -a -G options are important because they add apache or www-data as a secondary group to the user account, which preserves the user’s primary group. Adding a secondary group to a user account helps restrict file ownership and permissions to ensure members of a shared group only have access to certain files.\n\n\nFor example, to add apache as a secondary group to user magento_user on CentOS:\n\nsudo usermod -a -G apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups magento_user\n\n\nThe following sample result shows the user’s primary (magento) and secondary (apache) groups.\n\nmagento_user : magento_user apache\n\n\n\n  Typically, the user name and primary group name are the same.\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nStep 4: Get the Magento software\nIf you haven’t done so already, get the Magento software in one of the following ways:\n\n\n  Compressed archive\n  Composer metapackage\n  Clone the repository (contributing developers only)\n\n\nStep 5: Set ownership and permissions for the shared group\nTo set ownership and permissions before you install the Magento software:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nsudo chown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Next step\n  After you have set file system ownership and permissions, continue with any of the following:\n\n  \n    Command-line installation\n    Setup Wizard installation\n  \n\n\n\n  Switch to the Magento file system owner\n  After you’ve performed the other tasks in this topic, enter one of the following commands to switch to that user:\n\n  \n    Ubuntu: su &lt;username&gt;\n    CentOS: su - &lt;username&gt;\n  \n\n  For example,\n\n  su magento_user\n  \n\n  Next step\n  Install the Magento software:\n\n  \n    Command line\n    Setup Wizard\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/integrator_install_ee.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-intro-intro-composer-gloss-html": {
      "title": "Glossary of common terms",
      "content": "Component\nWe refer to what you’re coding as components. (Composer refers to them as packages; the terms component and package are equivalent.) A Magento component can be classified into the following types:\n\n\n  Module (extend Magento capabilities)\n  Theme (change the look and feel of your storefront and Admin)\n  Language package (localize the storefront and Admin)\n\n\nYou can package your components as follows:\n\n\n  Individually\n  \n    As a metapackage, which is a Magento Marketplace requirement if you’re developing a product that has more than one component.\n\n    A metapackage consists of shared packages. Examples: a metapackage that consists of a module and a theme, two modules, two themes, and so on.\n\n    More information about metapackages can be found in the next section.\n  \n\n\n\n  Magento Marketplace uses the blanket term product to refer to a component or a metapackage.\n\n\nMetapackage\nMagento Marketplace requires more than one component to be packaged as a metapackage, which consists of only a composer.json that specifies individual components and their dependencies. (Magento Marketplace also refers to a metapackage as an extension.)\n\nA metapackage requires or suggests components that we refer to as shared packages. You can use a shared package in multiple metapackages if you wish. (If you use shared packages, Marketplace requires that all components in a metapackage be shared packages.)\n\nFor example, you might want to list two metapackages in the Magento Marketplace—a standard package and a premium package. All of the standard package components could be shared packages used by the premium package. Among other things, this enables merchants to easily upgrade from your standard package to your premium package using the Magento Component Manager.\n\nMerchants do not need to understand that, under the covers, some packages are shared.\n\n\n    You can upload to Magento Marketplace as many shared packages as you want but you must specifically give components access to them. Failure to do so means your components won't work properly after they're installed by merchants. For more information, see the Magento Marketplace User Guide.\n\n\nFor more information\n\n  metapackages\n  component types in composer.json.\n\n\nComponent Manager\nMerchants use the Component Manager (part of the Magento Admin) to do any of the following:\n\n\n  Install, uninstall\n  Update\n  Enable, disable\n\n\nIf you package and upload your components as discussed in this guide and in the Marketplace User Guide, merchants can easily update your components after you publish them.\n\nFor details, see Supported actions for each component type\n",
      "url": "/guides/v2.0/extension-dev-guide/intro/intro-composer-gloss.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-intro-intro-composer-html": {
      "title": "Introduction to Composer",
      "content": "\n\n  Composer and Magento\n\n  We use Composer for dependency management. Composer enables us to manage the Magento components and their dependencies.\n\n  As an integrator, you want to manage each of your Magento core components and third-party components using the Component Manager and System Upgrade.\n\n  To do so, you start by creating a Composer project from our metapackage. The metapackage installs each component so it can be centrally managed after installation.\n\n  Composer provides you with the following advantages:\n\n  \n    Enables you to reuse third-party libraries without bundling them with source code\n    Component-based architecture with robust dependency management\n    Manages dependencies to reduce extension conflicts and compatibility issues\n    Versioned dependencies\n    Semantic versioning\n    Supports the PHP Framework Interoperability standard\n  \n\n  Links to Magento code\n  The key to developing any Magento component is its composer.json, which specifies version and dependency information for a component, among other things. You can look at Magento 2 code, such as:\n\n  \n    Metapackage, look at &lt;your Magento install dir&gt;/composer.json.\n    Customer module\n    Luma theme\n    en_us language package\n  \n\n  For more information\n  For more information about Composer, see the Composer documentation.\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/intro/intro-composer.html"
    }
    ,
  
    "guides-v2-0-mrg-intro-html": {
      "title": "Introduction to Module Reference Guide",
      "content": "The Module Reference Guide contains information about Magento modules of Magento Open Source\n and Magento Commerce.\n\nThe information includes:\n\n\n  module description\n  API description\n\n\nInformation is being published gradually, until we complete work on automation of the process.\n\nRelated topics\n\n\n  Building a new Magento module\n  How to enable/disable a Magento module\n  SOAP Reference\n  REST Reference\n\n",
      "url": "/guides/v2.0/mrg/intro.html"
    }
    ,
  
    "guides-v2-0-mtf-features-isolation-html": {
      "title": "Isolation management",
      "content": "Isolation management feature enables you to isolate a test suite, a test case, or a test using custom logic coded in a script. You can use it to return your system to its initial state (drop a database, clean cache, reset filesystem) or perform any other procedures that you need.\n\nIn general, to manage isolation:\n\n\n  \n    Create an isolation script\n  \n  \n    Set isolation script\n\n    \n      For all functional tests (globally), set isolation configuration. For example, set isolation script globally to be run after each test case, before each test, before and after a test suite.\n      For certain test or test case, define an isolation strategy parameter in PHP Doc annotation of a test case or a test. For example, set isolation script locally to be run after a test case, after each test of a test case, before test of a test case, before a test case and after a test; or excluded for a test case, for a test.\n    \n  \n\n\nIsolation strategy parameter defines when the isolation script must be run relatively to a test suite, a test case, or a test: before, after, both (that is run both before and after), none (never run).\n\nThe following example demonstrates how you can use isolation management.\n\nStep 1: Create an isolation script\n\nAssume that we want to return a database, dumped to /var/www/magento/magento.dump.sql, to its initial state. You can implement it using the following code:\n\n&lt;?php\nexec('mysql -umagento -pmagento -e\"DROP DATABASE magento; CREATE DATABASE magento CHARACTER SET utf8;\"');\nexec('mysql -umagento -pmagento magento &lt; /var/www/magento/magento.dump.sql');\n\nBy default, isolation configuration points to dev/tests/functional/isolation.php.\n\nAdd the code to &lt;magento root dir&gt;/dev/tests/functional/isolation.php.\n\nIt means that during test run the FTF would call http://magento2ce.com/dev/tests/functional/isolation.php (&lt;baseUrl&gt; is set to http://magento2ce.com/) according to selected isolation strategy.\n\n\n  Isolation script is run in a web browser and must be accessible by a web server.\n\n\nStep 2: Set isolation script\n\nYou can set isolation script globally, in configuration file, or locally, directly in a test case. The following examples show different options.\n\n\n  Isolation management for a certain test or test case has higher priority than global.\n\n\nStep 2(a): Globally set isolation script to be run after each test case\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/config.xml.\n  In &lt;isolation&gt;, set &lt;testCase&gt;after&lt;/testCase&gt;, for example:\n\n\n&lt;isolation&gt;\n    &lt;resetUrlPath&gt;dev/tests/functional/isolation.php&lt;/resetUrlPath&gt;\n    &lt;testSuite&gt;none&lt;/testSuite&gt;\n    &lt;testCase&gt;after&lt;/testCase&gt;\n    &lt;test&gt;none&lt;/test&gt;\n&lt;/isolation&gt;\n\nStep 2(b): Globally set isolation script to be run before each test\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/config.xml.\n  In &lt;isolation&gt;, set &lt;test&gt;before&lt;/test&gt;, for example:\n\n\n&lt;isolation&gt;\n    &lt;resetUrlPath&gt;dev/tests/functional/isolation.php&lt;/resetUrlPath&gt;\n    &lt;testSuite&gt;none&lt;/testSuite&gt;\n    &lt;testCase&gt;none&lt;/testCase&gt;\n    &lt;test&gt;before&lt;/test&gt;\n&lt;/isolation&gt;\n\nStep 2(c): Globally set isolation script to be run before and after a test suite\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/config.xml.\n  In &lt;isolation&gt;, set &lt;testSuite&gt;both&lt;/testSuite&gt;, for example:\n\n\n&lt;isolation&gt;\n    &lt;resetUrlPath&gt;dev/tests/functional/isolation.php&lt;/resetUrlPath&gt;\n    &lt;testSuite&gt;both&lt;/testSuite&gt;\n    &lt;testCase&gt;none&lt;/testCase&gt;\n    &lt;test&gt;none&lt;/test&gt;\n&lt;/isolation&gt;\n\nStep 2(d): Locally set isolation script to be run after a test case\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php.\n  Add * @isolation after to the class annotation, for example:\n\n\n/**\n * ...\n * @isolation after\n */\nclass OnePageCheckoutTest extends Scenario\n...\n\n\nStep 2(e): Locally set isolation script to be run after each test of a test case\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php.\n  Add * @isolation test after to the class annotation, for example:\n\n\n/**\n * ...\n * @isolation test after\n */\nclass OnePageCheckoutTest extends Scenario\n...\n\n\nStep 2(f): Locally set isolation script to be run before test of a test case\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\nExample test: test().\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php\n  Add * @isolation before to the test() method annotation, for example:\n\n\n\n    /**\n     * ...\n     * @isolation before\n     */\n    public function test()\n    ...\n\n\nStep 2(g): Locally set isolation script to be run before a test case and after a test\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\nExample test: test().\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php.\n  Add * @isolation before to the class annotation and * @isolation after to the test() method annotation, for example:\n\n\n/**\n * ...\n * @isolation before\n */\nclass OnePageCheckoutTest extends Scenario\n    {\n    /**\n     * ...\n     * @isolation after\n     */\n    public function test()\n    ...\n    }\n\n\nStep 2(h): Locally set isolation script to be excluded for a test case\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php.\n  Add * @isolation none to the class annotation, for example:\n\n\n/**\n * ...\n * @isolation none\n */\nclass OnePageCheckoutTest extends Scenario\n...\n\n\nStep 2(i): Locally set isolation script to be excluded for a test\n\nExample test case: \\Magento\\Checkout\\Test\\TestCase\\OnePageCheckoutTest.\nExample test: test().\n\n\n  Open &lt;magento root dir&gt;/dev/tests/functional/tests/app/Magento/Checkout/Test/TestCase/OnePageCheckoutTest.php.\n  Add * @isolation none to the test() method annotation, for example:\n\n\n\n    /**\n     * ...\n     * @isolation none\n     */\n    public function test()\n    ...\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/features/isolation.html"
    }
    ,
  
    "guides-v2-0-test-js-jasmine-html": {
      "title": "JavaScript unit testing with Jasmine",
      "content": "Magento uses a custom Grunt task named spec to run Jasmine tests. The task collects the tests from &lt;magento_root_dir&gt;dev/tests/js/jasmine/tests and can be run for a theme.\n\nPrepare environment\n\nStep 1. Install Node.js.\n\nStep 2. Install grunt-cli.\n\nStep 3. In &lt;magento_root_dir&gt;, create Gruntfile.js and copy Gruntfile.js.sample into it.\n\nStep 4. In &lt;magento_root_dir&gt;, create package.json and copy package.json.sample into it.\n\nStep 5. In &lt;magento_root_dir&gt;, install all dependencies:\n\n$   npm install\n\nStep 6. In &lt;magento_root_dir&gt;, generate static view files in Magento that are going to be tested\n\n$   php bin/magento setup:static-content:deploy -f\n\nNote that normally you don’t have permissions to &lt;magento_root_dir&gt;/app/code/, in fact the generated static view file is being tested.\n\n\n  For CentOS users\nIf the command fails with error message: \n/var/www/html/magento2ce/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs: error while loading shared libraries: libfontconfig.so.1: cannot open shared object file: No such file or directory\ninstall fonctconfig library:{: target=”_blank”}\n$ yum install fontconfig (CentOS)\n$ apt-get install fontconfig (Ubuntu)\n\n\nLearn more in Deploy static view files.\n\nRun tests\n\nGruntfile.js contains the test run task, so you can run tests for a theme using the following command in the Magento root directory:\n\n$   grunt spec:&lt;THEME&gt;\n\nExample:\n\n$   grunt spec:backend\n\nWrite a test\n\nAll tests are distributed through modules stored in &lt;magento_root_dir&gt;/dev/tests/js/jasmine/tests. Let’s see how to write a test using an example of an existing test:\n\napp/code/Magento/Ui/base/js/grid/columns/actions.test.js\n\nwhich tests a JS module:\n\n&lt;magento_root_dir&gt;/app/code/Magento/Ui/view/base/web/js/grid/columns/actions.js\n\nin its static representations generated in Step 6 previously:\n\n&lt;magento_root_dir&gt;/pub/static/&lt;area&gt;/&lt;theme&gt;/&lt;localisation&gt;/Magento_Ui/js/columns/actions.js.\n\nStep 1. Create a new file with name &lt;fileName&gt;.test.js in an appropriate module directory.\n\nFor convenience, we can reflect the directory structure of a file to test.\n\nA path to JS module that we want to cover with tests: app/code/Magento/Ui/view/base/web/js/grid/columns/actions.js\n\nA path to a test of the module: app/code/Magento/Ui/base/js/grid/columns/actions.test.js\n\nIn &lt;magento_root_dir&gt;/dev/tests/js/jasmine/tests create the test with appropriate path.\n\nStep 2. Require a file that you want to test.\n\nFor our example we need to cover all static view files ending with Magento_Ui/js/grid/columns/actions.\n\ndefine([\n    'Magento_Ui/js/grid/columns/actions'\n], function (Actions) {\n    'use strict';\n\n    //Test code\n    //...\n});\n\nStep 3. Write your Jasmine test code.\n\nA Jasmine test consists of main two parts:\n\n\n  describe blocks\n  it blocks\n\n\nBoth the describe and it functions contains two parameters:\n\n\n  a text string with description of what is going to be done\n  a function with block of code implementing described action\n\n\nIn describe you can use beforeEach and afterEach functions performing a preparation of what must be done before and after every it test followed.\n\nSee the full code of the test/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/grid/columns/actions'\n], function (_, Actions) {\n    'use strict';\n\n    describe('ui/js/grid/columns/actions', function () {\n        var model,\n            action;\n\n        beforeEach(function () {\n            model = new Actions({\n                index: 'actions',\n                name: 'listing_action',\n                indexField: 'id',\n                dataScope: '',\n                rows: [{\n                    identifier: 'row'\n                }]\n            });\n            action = {\n                index: 'delete',\n                hidden: true,\n                rowIndex: 0,\n                callback: function() {\n                    return true;\n                }\n            };\n        });\n\n        it('Check addAction function', function () {\n            expect(model.addAction('delete', action)).toBe(model);\n        });\n\n        it('Check getAction function', function () {\n            var someAction = _.clone(action);\n\n            someAction.index = 'edit';\n            model.addAction('edit', someAction);\n            expect(model.getAction(0, 'edit')).toEqual(someAction);\n        });\n\n        it('Check getVisibleActions function', function () {\n            var someAction = _.clone(action);\n\n            someAction.hidden = false;\n            someAction.index= 'view';\n            model.addAction('delete', action);\n            model.addAction('view', someAction);\n            expect(model.getVisibleActions('0')).toEqual([someAction]);\n        });\n\n        it('Check updateActions function', function () {\n            expect(model.updateActions()).toEqual(model);\n        });\n\n        it('Check applyAction function', function () {\n            model.addAction('delete', action);\n            expect(model.applyAction('delete', 0)).toEqual(model);\n        });\n\n        it('Check isSingle and isMultiple function', function () {\n            var someAction = _.clone(action);\n\n            action.hidden = false;\n            model.addAction('delete', action);\n            expect(model.isSingle(0)).toBeTruthy();\n            someAction.hidden = false;\n            someAction.index = 'edit';\n            model.addAction('edit', someAction);\n            expect(model.isSingle(0)).toBeFalsy();\n            expect(model.isMultiple(0)).toBeTruthy();\n        });\n\n        it('Check isActionVisible function', function () {\n            expect(model.isActionVisible(action)).toBeFalsy();\n            action.hidden = false;\n            expect(model.isActionVisible(action)).toBeTruthy();\n        });\n    });\n});\n\n\nThis topic doesn’t provide Jasmine test writing methodology.\n\nLearn more about testing with Jasmine.\n\nKnown issues and solutions\n\nError: Cannot find module ‘&lt;module&gt;’\n\nIssue:\n\nAn error message appears:\n\nLoading \"Gruntfile.js\" tasks...ERROR\n\n&gt;&gt; Error: Cannot find module '&lt;module&gt;'\n\nWarning: Task \"spec\" not found. Use --force to continue.\n\n\nSolution:\n\n\n  Make sure your Node.js version is up-to-date.\n  Remove package.json, Gruntfile.js.\n  Copy package.json, Gruntfile.js from package.json.sample, Gruntfile.js.sample.\n  Delete the node_modules directory.\n  Run npm install in your terminal.\n\n\nWarning: Cannot read property ‘pid’ of undefined\n\nIssue:\n\nAn error message appears:\n\nWarning: Cannot read property 'pid' of undefined\n\nUse --force to continue. Aborted due to warnings.\n\n\nSolution:\n\nRun in your terminal:\n\n$   cd &lt;magento_root&gt;/node_modules/grunt-contrib-jasmine\n$   npm install\n\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/test/js/jasmine.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-jquery-widgets-about-html": {
      "title": "Magento jQuery widgets",
      "content": "The Magento system uses a jQuery JavaScript library to implement client functionality. This includes a wide usage of standard, customized, and custom jQuery widgets.\n\nThis guide discusses the following widgets:\n\nAccordion widget \nAlert widget \nCalendar widget\nCollapsible widget\nConfirm widget\nDropdownDialog widget\nGallery widget\nList widget\nLoader widget\nMenu widget\nModal widget\nNavigation widget\nPrompt widget\nQuickSearch widget\nTabs widget\n\n\n\n\n  Magento 2 supports jQuery UI 1.9.2, widget options added in later versions might be unavailable.\n\n\n\n  Magento out of the box does not contain jQuery UI styles. Also, it is not recommended to download them as is, because it can break the default Magento design. To use certain jQuery UI styles, you need to add them manually in your custom stylesheets in the {your_theme_dir}/web/css or {your_module_dir}/view/{area}/web/css directory.\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/jquery-widgets-about.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-js-bundling-html": {
      "title": "JavaScript Bundling",
      "content": "JavaScript bundling is an optimization technique you can use to reduce the number of server requests for JavaScript files.\nBundling accomplishes this by merging multiple JavaScript files together into one file to reduce the number of page requests.\n\nEnable JavaScript bundling\n\nMagento must be set to production mode in order for bundling to work.\n\nTo activate JavaScript bundling:\n\n\n  Log in to the Admin area\n  Navigate to Stores -&gt; Configuration -&gt; Advanced -&gt; Developer -&gt; Javascript Settings\n  Set Enable Javascript Bundling to Yes.\n\n\nTo optimize bundling, set the following settings to Yes:\n\n\n  Javascript Settings -&gt; Merge JavaScript Files\n  Javascript Settings -&gt; Minify Javascript Files\n  Static Files Settings -&gt; Sign Static Files\n\n\nHow bundling works in Magento\n\nBy default, Magento bundles all JavaScript files and loads them synchronously on every page load.\nThis means that each bundle is loaded one after the other and causes delays for JavaScript behaviors on a page.\n\nExcluding files\n\nThe &lt;exclude&gt; entry in a theme’s etc/view.xml file tells Magento which files it should not bundle.\nJavaScript files excluded from bundling are loaded asynchronously by RequireJS as needed.\n\nDo not bundle JavaScript files used for testing or development because these will get loaded on every page.\n\nThe following code snippet from Magento’s Luma theme shows the types of files you should exclude in your theme.\n\nShow example &lt;vars module=\"Js_Bundle\"&gt;\n    &lt;var name=\"bundle_size\"&gt;1MB&lt;/var&gt;\n&lt;/vars&gt;\n&lt;exclude&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery.min.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery-ui-1.9.2.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery.ba-hashchange.min.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery.details.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery.details.min.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/jquery.hoverIntent.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::jquery/colorpicker/js/colorpicker.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::requirejs/require.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::requirejs/text.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::date-format-normalizer.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::legacy-build.min.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/captcha.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/dropdown_old.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/list.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/loader_old.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/webapi.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/zoom.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/translate-inline-vde.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/requirejs/mixins.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Lib::mage/requirejs/static.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Customer::js/zxcvbn.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Catalog::js/zoom.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Ui::js/lib/step-wizard.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Ui::js/form/element/ui-select.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Ui::js/form/element/file-uploader.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Ui::js/form/components/insert.js&lt;/item&gt;\n    &lt;item type=\"file\"&gt;Magento_Ui::js/form/components/insert-listing.js&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::js/timeline&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::js/grid&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::js/dynamic-rows&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::templates/timeline&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::templates/grid&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Ui::templates/dynamic-rows&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Magento_Swagger::swagger-ui&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::modernizr&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::tiny_mce&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::varien&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::jquery/editableMultiselect&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::jquery/jstree&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::jquery/fileUploader&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::css&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::lib&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::extjs&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::prototype&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::scriptaculous&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::less&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::mage/adminhtml&lt;/item&gt;\n    &lt;item type=\"directory\"&gt;Lib::mage/backend&lt;/item&gt;\n&lt;/exclude&gt;\n\n\nSetting bundle file size\n\nThe bundle_size entry controls the file size of the generated bundles.\nSetting this to a large number will reduce the number of bundles generated, but the file sizes will be big.\nA small number will increase the number of bundles generated, but the file sizes will be smaller.\n\nYou want to balance the number of files to download on a page with the size of the data.\nA single connection should be around 100kb.\n\nFine tuning your theme\n\nThere are many ways to tune your theme’s etc/view.xml file.\n\nFor example, Magento’s Luma theme is configured to work well for all pages, but \nby adding or removing items inside exclude, you can maximize browser performance for home, catalog, or product pages.\n\nFollow these steps to help you identify which JavaScript files to bundle for your theme:\n\n\n  Create a blank page with the layouts you would like to tune.\n  Compare the JavaScript files loaded in the pages with the JavaScript files in Magento.\n  Use the results of that comparison to build your exclude list.\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/js-bundling.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-resources-html": {
      "title": "JavaScript resources in Magento",
      "content": "Overview\n\nThis topic describes the general concepts of how work with JavaScript components is organized in Magento.\n\nTo address the problem of slow page load, we exclude JavaScript from the page headers and we added the ability to use the RequireJS library.\n\nRequireJS improves the perceived page load, time because it allows JavaScript to load in the background; in particular, because it enables asynchronous JavaScript loading.\n\nExplore JavaScript resources\n\nJS resources location\n\nIn Magento, you can find the JS components on the following levels:\n\n\n  Library level (lib/web). Resources located here are available in any place in Magento.\n  Module level (&lt;module_dir&gt;/view/&lt;areaname&gt;/web). If the module is enabled, resources added here are available in other modules and themes.\n  Theme level, for a particular module (&lt;theme_dir&gt;/&lt;VendorName&gt;_&lt;ModuleName&gt;/web). Resources added here are available for inheriting themes.\n  Theme level  (&lt;theme_dir&gt;/web). Resources added here are available for inheriting themes.\n\n\n\n  Library level can only contain core Magento resources. Do not put custom JS files in  the lib/web directory.\n\n\nSpecifying JS\nWe recommend specifying JavaScript resources in the templates rather than in the layout updates, to ensure processing of the resources in body of a page.\n\nAccessing JS resources\n\nJS resources are accessed using relative paths.\n\nExamples:\n\nExample 1\n\n\n  File actual location: app/code/Magento/ConfigurableProduct/view/frontend/web/js/configurable.js\n  File published to pub/static: pub/static/frontend/Magento/&lt;theme&gt;/&lt;locale&gt;/Magento_Configurable/js/configurable.js. Here &lt;theme&gt; and &lt;locale&gt; are the currently applied in your instance theme and locale.\n  Called in script:\n\n\nrequire([\"Magento_ConfigurableProduct/js/configurable\"], function(Configurable){\n   });\n\nExample 2 \n  File actual location: app/code/design/frontend/Magento/blank/web/js/theme.js\n  File published to pub/static: pub/static/frontend/Magento/&lt;theme&gt;/&lt;locale&gt;/js/theme.js\n  Called in script:\n\n\nrequire([\"js/theme.js\"], function(){\n   });\n\n\nExample 3 \n  File actual location: lib/web/jquery.js\n  File published to pub/static: pub/static/&lt;area&gt;/Magento/&lt;theme&gt;/&lt;locale&gt;/jquery.js\n  Called in script:\n\n\nrequire([\"jquery\"], function($){\n   });\n\n\nThese relative paths are also used in for mapping and setting paths in requirejs-config.js configuration files.\n\nDependencies between JavaScript resources\n\nTo build a dependency on the third-party plugin, specify a shim in the following configuration files:\n\n\n  requirejs-config.js\n\n\nvar config = {\n  \"shim\": {\n    \"3-rd-party-plugin\": [\"jquery\"]\n  }\n};\n\n\n  &lt;third-party-plugin&gt;.js\n\n\n!(function($){\n  // plugin code\n  // where $ == jQuery\n})(jQuery);\n\nRequireJS library\n\nIncluding RequireJS\n\nTo be available for the entire Magento instance, RequireJS library is included in the following layout files:\n\n\n  \n    For the adminhtml area:\n\n    app/code/Magento/Backend/view/adminhtml/layout/default.xml\n  \n\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"admin-1column\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Magento Admin&lt;/title&gt;\n        &lt;meta name=\"viewport\" content=\"width=1024\"/&gt;\n        &lt;meta name=\"format-detection\" content=\"telephone=no\"/&gt;\n  &lt;!-- Here's the library included --&gt;       \n        &lt;link src=\"requirejs/require.js\"/&gt;\n        &lt;css src=\"extjs/resources/css/ext-all.css\"/&gt;\n        &lt;css src=\"extjs/resources/css/ytheme-magento.css\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;attribute name=\"id\" value=\"html-body\"/&gt;\n       &lt;!-- Here's the basic configuration file require_js.phtml specified --&gt;   \n     &lt;block name=\"require.js\" class=\"Magento\\Backend\\Block\\Page\\RequireJs\" template=\"Magento_Backend::page/js/require_js.phtml\"/&gt;\n        &lt;referenceContainer name=\"global.notices\"&gt;\n            &lt;block class=\"Magento\\Backend\\Block\\Page\\Notices\" name=\"global_notices\" as=\"global_notices\" template=\"page/notices.phtml\"/&gt;\n        &lt;/referenceContainer&gt;\n        &lt;referenceContainer name=\"header\"&gt;\n            ...\n        &lt;referenceContainer name=\"after.body.start\"&gt;\n            &lt;!-- Here's the main configuration file requirejs-config.js specified --&gt;\n            &lt;block class=\"Magento\\RequireJs\\Block\\Html\\Head\\Config\" name=\"requirejs-config\"/&gt;\n            &lt;block class=\"Magento\\Translation\\Block\\Html\\Head\\Config\" name=\"translate-config\"/&gt;\n            &lt;block class=\"Magento\\Translation\\Block\\Js\" name=\"translate\" template=\"Magento_Translation::translate.phtml\"/&gt;\n            &lt;block class=\"Magento\\Framework\\View\\Element\\Js\\Components\" name=\"head.components\" as=\"components\" template=\"Magento_Backend::page/js/components.phtml\"/&gt;\n            &lt;block class=\"Magento\\Framework\\View\\Element\\Html\\Calendar\" name=\"head.calendar\" as=\"calendar\" template=\"Magento_Backend::page/js/calendar.phtml\"/&gt;\n        &lt;/referenceContainer&gt;\n    &lt;/body&gt;\n\n\n  For the frontend area the similar configuration is located in app/code/Magento/Theme/view/frontend/layout/default.xml.\n\n\nMapping JS resources\n\nTo make the configurations more precise and specific for different modules/themes, requirejs-config.js files can be placed in different locations depending on your needs.\n\nAll configurations are collected and executed in the following order:\n\n\nLibrary configurations.\n\nConfigurations at the module level.\n\n  \n    Dependencies between the modules or themes are considered as well.\n  \n\nConfigurations at the theme module level for the ancestor themes.\n\nConfigurations at the theme module level for a current theme.\n\nConfigurations at the theme level for the ancestor themes.\n\nConfigurations at the theme level for the current theme.\n\n\nThe baseUrl parameter for RequireJS is specified in the following files:\n\n\n  for the frontend area: app/code/Magento/Theme/view/frontend/templates/page/js/require_js.phtml\n  for the adminhtml area: app/code/Magento/Backend/view/adminhtml/templates/page/js/require_js.phtml\n\n\nRelated reading\n\nAbout AMD modules and RequireJS\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js-resources.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-debug-html": {
      "title": "Locate JavaScript components",
      "content": "Overview\n\nThis topic discusses how to define which JavaScript components and widgets are used on a particular Magento store page.\n\nLocate JS components: walkthrough\n\nTo locate scripts used for a certain element:\n\n\nOpen the store page in a browser, and locate the element's class or id using browser debugging tools, such as Firebug (Firefox) or Inspect Element (Chrome).\n\nSelect to view the page source.\nFind the corresponding element in the page source and see if there are data-mage-init or &lt;script type=&quot;text/x-magento-init&quot;&gt; calls on this element, its children or parents. The calls contain the names of the scripts, as described in JavaScript initialization. \n\n\nTo find the source file of the used script:\n\nIn the &lt;head&gt;&lt;/head&gt; section of the page source, click link to requirejs-config.js file. The file contains the Magento RequireJS configuration, collected from all modules of the current theme.\n\n\nAlternatively, you can open the requirejs-config.js file from the file system: pub/static/_requirejs/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt;/requirejs-config.js\n\n\nIn the var config = {...} section of requirejs-config.js, find the required script name, and view the path to its source file. This path is relative to certain directories, depending on whether it contains module reference:\n\nIf the module context is not specified, the path is relative to &lt;theme_dir&gt;/web (current theme). If the file is not found there, according to the assets fallback, it is searched for in parent theme web directory, and then lib/web(library) directory.\n\nIf the module context is specified, the path is relative to  &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/web (current theme module). If the file is not found there, according to the assets fallback, it is searched for in the same location in the parent theme files, and then in the &lt;module_dir&gt; (module) directory.\n\n\n\n\n&lt;/ol&gt;\n\n\nLocate JS component: example\n\nAs we discussed in the preceding section, you use browser debugging tools to define which JavaScript component or widget is used for an element. An example follows.\nTo find what JS components are used for displaying the main navigation menu in the Luma theme:\n\n\nUsing the Inspect Element feature of the browser, define that the menu section id is store.menu:\n\n\n\n\n\n\n\n\nSearch the page source for store.menu (illustration follows):\n\n\n\n\nWe can see that there's a data-mage-init attribute in the scope of the &lt;div id= &quot;store.menu&quot;&gt;&lt;/div&gt;\n\n\ndata-mage-init='{\"menu\":{\"responsive\":true, \"expanded\":true, \"position\":{\"my\":\"left top\",\"at\":\"left bottom\"}}}'\n\n\nAccording to the JS components initialization notation, this means that this code calls menu.js.\n\nTo find the source file of menu.js, let's open requirejs-config.js by clicking the link to it in the  section of the page source. The path to menu.js is specified there as follows:\n\n\"menu\":                   \"mage/menu\",\n\n\nThis means we should check for mage/menu.js the following locations, in the following priority order (according to the assets fallback rules):\n\n&lt;Magento_Luma_theme_dir&gt;/web/js (current theme JS files)\n&lt;Magento_Blank_theme_dir&gt;/web/js (parent theme JS files)\nlib/web (library files)\n\nThere is no mage/menu.js in the current theme or parent theme JS files, so the source file for menu component used for the main navigation menu is lib/web/mage/menu.js\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js_debug.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-init-html": {
      "title": "Calling and initializing JavaScript",
      "content": "Overview\n\nThis topic talks about how to insert a JavaScript component in .phtml page templates and .js files in Magento 2.\n\nIt covers declarative notation, used when initialization is required, and imperative notation, used in other cases.\n\nWe strongly recommend that you use the described approaches and do not add inline JavaScript.\n\nInsert a JS component in a PHTML template\nDepending on your task, you might want to use declarative or imperative notation. Both ways are described in the following sections.\n\nDeclarative notation\n\nUsing the declarative notation to insert a JS component allows preparing all the configuration on the backend side and outputting it to the page source using standard tools. You should use declarative notation if your JavaScript component requires initialization.\n\nIn Magento 2 there are two ways of declarative notation:\n\n\n  using the data-mage-init attribute\n  using the &lt;script type=\"text/x-magento-init\" /&gt; tag\n\n\nBoth ways are described further.\n\nDeclarative notation using the data-mage-init attribute\n\nUse the data-mage-init attribute to insert a JS component in a certain HTML element. The following code sample is an illustration. Here a JS component is inserted in the &lt;nav/&gt; element:\n\n&lt;nav data-mage-init='{ &quot;&lt;component_name&gt;&quot;: {...} }'&gt;&lt;/nav&gt;\n\n\nWhen inserted in a certain element, the script is called only for this particular element. It is not automatically called for other elements of this type on the page.\n\nHow data-mage-init is processed\n\nOn DOM ready, the data-mage-init attribute is parsed to extract components’ names and configuration to be applied to the element.\nDepending on the type of the inserted JS component, processing is performed as follows:\n\n\nIf an object is returned, the initializer tries to find the &lt;component_name&gt; key. If the corresponding value is a function, the initializer passes the config and element values to this function.\n\nFor example:\n\nreturn {\n    '&lt;component_name&gt;': function(config, element) { ... }\n};\n\n\nIf a function is returned, the initializer passes the config and element values to this function.\n\nFor example:\n\n\nreturn function(config, element) { ... };\n\n\n\nIf neither a function nor an object with the \"&lt;component_name&gt;\" key are returned, then the initializer tries to search for \"&lt;component_name&gt;\" in the jQuery prototype. If found, the initializer applies it as $(element).&lt;component_name&gt;(config).\n\nFor example:\n\n$.fn.&lt;component_name&gt; = function() { ... };\nreturn;\n\n\n\nIf none of the previous cases is true, the component is executed with no further processing.\nSuch a component does not require either config or element. The recommended way to declare such components is using the &lt;script&gt; tag.\n\n\nDeclarative notation using the &lt;script type=\"text/x-magento-init /&gt; tag {decl_tag}\n\nTo call a JS component on a HTML element without direct access to the element or with no relation to a certain element, use the &lt;script type=\"text/x-magento-init\"&gt; tag and attribute. The syntax is following:\n\n&lt;script type=\"text/x-magento-init\"&gt;\n{\n    // components initialized on the element defined by selector\n\t\"&lt;element_selector&gt;\": {\n\t\t\"&lt;js_component1&gt;\": ...,\n\t\t\"&lt;js_component2&gt;\": ...\n    },\n    // components initialized without binding to an element\n    \"*\": {\n        \"&lt;js_component3&gt;\": ...\n    }\n}\n&lt;/script&gt;\n\nWhere:\n\n&lt;element_selector&gt; is a selector (in terms of querySelectorAll) for the element on which the following JS components are called.\n&lt;js_component1&gt; and &lt;js_component2&gt; are the JS components being initialized on the element with the selector specified as &lt;element_selector&gt;.\n&lt;js_component3&gt; is the JS component called with no binding to an element.\n\n\nThe following is a working code sample of a widget call using &lt;script&gt;. Here the accordion and navigation widgets are added to the element with the #main-container selector, and the pageCache script is inserted with no binding to any element.\n\n&lt;script type=\"text/x-magento-init\"&gt;\n{\n    \"#main-container\": {\n        \"navigation\": &lt;?php echo $block-&gt;getNavigationConfig(); ?&gt;,\n        \"accordion\": &lt;?php echo $block-&gt;getNavigationAccordionConfig(); ?&gt;\n    },\n    \"*\": {\n        \"pageCache\": &lt;?php echo $block-&gt;getPageCacheConfig(); ?&gt;\n    }\n}\n&lt;/script&gt;\n\nImperative notation\n\nImperative notation allows using raw JavaScript code on the pages and executing particular business logic. The notation using the &lt;script&gt; tag, without the type=\"text/x-magento-init attribute, is the imperative notation. The syntax is following:\n\n&lt;script&gt;\nrequire([\n    'jquery',\n    'accordion'  // the alias for \"mage/accordion\"\n], function ($) {\n    $(function () { // to ensure that code evaluates on page load\n        $('[data-role=example]')  // we expect that page contains the &lt;tag data-role=\"example\"&gt;..&lt;/tag&gt; markup\n            .accordion({ // now we can use \"accordion\" as jQuery plugin\n                header:  '[data-role=header]',\n                content: '[data-role=content]',\n                trigger: '[data-role=trigger]',\n                ajaxUrlElement: \"a\"\n            });\n    });\n});\n&lt;/script&gt;\n\nCalling JS components requiring initialization in JS files\n\nTo call a widget in JS code, use a notation similar to the following (accordion widget is intiialized on the [data-role=example] element as illustration):\n\n$('[data-role=example]').accordion();\n\nTo initialize a widget with options, use notation similar to the following:\n\n$(function () { // to ensure that code evaluates on page load\n    $('[data-role=example]')  // we expect that page contains markup &lt;tag data-role=\"example\"&gt;..&lt;/tag&gt;\n        .accordion({ // now we can use \"accordion\" as jQuery plugin\n            header:  '[data-role=header]',\n\t    content: '[data-role=content]',\n\t    trigger: '[data-role=trigger]',\n            ajaxUrlElement: 'a'\n        });\n});\n\nIn a similar way, you can initialize any JS component that a returns callback function accepting a config object and element (a DOM node).\n\nFor example:\n\ndefine ([\n    'jquery',\n    'mage/gallery/gallery'\n], function ($, Gallery) {\n\n    $(function () { // to ensure that code evaluates on page load\n        $('[data-role=example]')  // we expect that page contains markup &lt;tag data-role=\"example\"&gt;..&lt;/tag&gt;\n            .each(function (index, element) {\n                Gallery({\n                    options:  {},\n                    data: [{\n                        img: 'https://c2.staticflickr.com/8/7077/27935031965_facd03b4cb_b_d.jpg'\n                    }],\n                    fullscreen: {}\n                }, element);  // 'element' is single DOM node.\n            });\n    });\n});\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js_init.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-mixins-html": {
      "title": "JavaScript mixins",
      "content": "A mixin is a class whose methods are added to, or mixed in, with another class.\n\nA base class includes the methods from a mixin instead of inheriting from it.\nThis allows you to add to or augment the behavior of the base class by adding different mixins to it.\n\nThis topic contains information on how you can use JavaScript mixins to overwrite component methods in Magento.\n\nMixin scope\n\nThe scope of a module’s mixin depends on its directory location under the view directory.\nThis allows you to target component instances in specific areas in Magento.\n\nThe following table maps a directory location to the application area a mixin affects:\n\n\n  \n    \n      Directory\n      Scope\n    \n  \n  \n    \n      view/frontend\n      Storefront\n    \n    \n      view/adminhtml\n      Admin panel\n    \n    \n      view/base\n      All areas (unless a specific frontend or adminhtml entry exists)\n    \n  \n\n\nMixin files\n\nLocation\n\nMixins are JavaScript files located under the web/js directory under an area specific directory. \nThe mixin file can be nested under more directories as long as those directories are under web/js.\n\nFormat\n\nA mixin in Magento is written as an AMD module that returns a callback function.\nThis function accepts a target component(module) as an argument and returns a module.\n\nThis allows you to return a new instance of the target component with your modifications attached to it before it is used in the application.\n\nExample\n\nThe following is an example of a mixin module that extends the target component with a function that introduces a new blockVisibility property to a column element.\n\nFile: OrangeCompany/Sample/view/base/web/js/columns-mixin.js\n\n\ndefine(function () {\n 'use strict';\n\n var mixin = {\n\n     /**\n      *\n      * @param {Column} elem\n      */\n     isDisabled: function (elem) {\n         return elem.blockVisibility || this._super();\n     }\n };\n\n return function (target) { // target == Result that Magento_Ui/.../columns returns.\n     return target.extend(mixin); // new result that all other modules receive\n };\n});\n\n\n\nDeclaring a mixin\n\nMixins are declared in the mixins property in the requirejs-config.js configuration file.\nThis file must be created in the same area specific directory the mixin is defined in.\n\nThe mixins configuration in the requirejs-config.js associates a target component with a mixin using their paths.\n\nExample\n\nThe following is an example of a require-config.js file that adds the columns-mixins, defined in the previous example, to the grid column component.\n\nFile: OrangeCompany/Sample/view/base/require-config.js\n\nvar config = {\n config: {\n     mixins: {\n         'Magento_Ui/js/grid/controls/columns': {\n             'OrangeCompany_Sample/js/columns-mixin': true\n         }\n     }\n }\n};\n\n\nMixin examples in Magento\n\nThe following is a list of files in the Magento_CheckoutAgreement module that declare and define mixins that modify checkout behavior:\n\n\n  view/frontend/requirejs-config.js\n  view/frontend/web/js/model/place-order-mixin.js\n  view/frontend/web/js/model/set-payment-information-mixin.js\n\n\nRelated reading\n\n\n  About AMD modules and RequireJS\n  Configure JS resources\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js_mixins.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-overview-html": {
      "title": "JavaScript",
      "content": "By default, the Magento application uses the RequireJS file and module loader to optimize the time of loading pages with included JavaScript files, and to manage dependencies of JavaScript resources.\n\nYou can follow the same approach when customizing Magento JavaScript, or disable all the default scripts and their load by RequireJS.\n\nFor information about how JS resources are located and configured, see Configure JavaScript\n\nWhat's in this chapter\nTopics of this chapter describe the following:\n\n\n  JavaScript initialization: how to initialize JavaScript components and widgets in JavaScript files and .phtml templates\n  Use custom JavaScript: how to extend or replace default JavaScript components/widgets.\n  Locate JavaScript components: how to define which components (scripts) are used on a particular store page.\n  Magento jQuery widgets: Magento jQuery widget API documentation.\n  Customizing JavaScript illustration: practical illustration of custom widgets related tasks.\n\n\nTerms used\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\nJavaScript component (JS component)\n\n\nAny separate .js file decorated as AMD module.\n\n\n\n\n\nUi component\n\n\nJS component located in the Magento_Ui module, in the app/code/Magento/Ui/view directory.\n\n\n\n\n\njQuery UI widget\n\n\nA JS component/widget provided by jQuery UI library used in Magento.\n\n\n\n\njQuery widget\n\n\nCustom widget created using jQuery UI Widget Factory and decorated as AMD module. Many Magento JS components are jQuery widget.\n\n\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js_overview.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-js-practice-html": {
      "title": "Customizing JavaScript illustration",
      "content": "Overview\nThis topic features a step-by-step illustration of how to customize a jQuery widget and how to use a custom widget instead the default Magento one.\n\nCustomize a default Magento jQuery widget\n\nIn their Orange theme, OrangeCo wants to remove the “Click on image to view it full sized” message displayed on the product page.\n\nThe high-level steps for this task are the following:\n\n\n  Define how the message is output.\n  Add the custom script extending the default one.\n  Update RequireJS configuration to use the custom script instead of the default one.\n\n\nLet’s look at each step in more detail.\n\nStep 1: Define how the message is output\n\nOrangeCo needs to define how the message is output. To do this, they take the following steps:\n\n\nOpen a product page.\nSelect to view the page source.\nSearch for the \"Click on image to view it full sized\" string. The illustration of the search result follows:\n\n\n\nView that it is output by gallery.js.\n\n\n\n\nWe see that the script which OrangeCo needs to alter is gallery.js.\n\nTo be able to extend gallery.js, OrangeCo needs to know the path to it. To get this info, they refer to requirejs-config.js, which can be reached from the page source view or from the file system. According to the configuration, the path for gallery is mage/gallery. The illustration follows:\n\n\n\nStep 2: Add the custom widget extending the gallery widget\n\nIn the app/design/OrangeCo/orange/web/js OrangeCo adds orange-gallery.js with the following content:\n\ndefine([\n  'jquery',\n  'jquery/ui',\n  'mage/gallery'\n], function($){\n\n  $.widget('orange.gallery', $.mage.gallery, {\n    _create: function() { // special method of jQuery UI Widgets\n      this._setOption('controls', {'notice': {}});\n    }\n  });\n\n  return $.orange.gallery;\n});\n\n\nStep 3: Update the RequireJS configuration\nOrangeCo adds the custom app/design/OrangeCo/orange/requirejs-config.js with the following content:\n\nvar config = {\n  \"map\": {\n    \"*\": {\n      \"gallery\": \"js/orange-gallery\"\n    }\n  }\n};\n\n\nThe new behavior is applied once the store pages are reloaded.\n\nAdd and use a custom widget (jCarousel)\nOrangeCo wants to use the jCarousel widget to display product images on product pages.\nThe high level steps for this task are the following:\n\n\n  Define how product images are displayed by default.\n  Add the custom script to the file system.\n  Update RequireJS configuration to use the custom script instead of the default one.\n\n\nLet’s look at each step in more detail.\nStep 1: Define what is the default implementation\nUsing the approach described in the previous section, OrangeCo defines that the product images are displayed by gallery.js, and the configuration path for it is mage/gallery.\n\nStep 2: Add the custom script to the file system\n\nFor the jCarousel widget to be able to use the configuration passed to the gallery widget,\nOrangeCo needs to add a “wrapper” script.\n\nTo do this, OrangeCo adds the following files in the app/design/OrangeCo/orange/web/js directory:\n\n\nThe jCarousel widget source file: jquery.jcarousel.js\nA \"wrapper\" orange-carousel.js with the following content:\n\ndefine([\n  'jquery',\n  'js/jquery.jcarousel'\n], function($){\n\n  return function (config, element) {\n   var jCarouselConfig = {\n     list: '.items.thumbs',\n     items: '.item.thumb'\n   };\n   $(element).jcarousel(jCarouselConfig);\n  }\n});\n\n\n\n\nStep 3: Update RequireJS configuration\nIn the app/design/OrangeCo/orange directory OrangeCo adds requirejs-config.js with the following content:\n\n\nvar config = {\n  \"map\": {\n    \"*\": {\n      \"gallery\": \"js/orange-gallery\"\n    }\n  },\n  \"shim\": {\n    \"js/jquery.jcarousel\": [\"jquery\"] // as jquery.jcarousel isn't an AMD module\n  }\n};\n\n\nRecommended reading\nUse custom JavaScript\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/js_practice.html"
    }
    ,
  
    "guides-v2-0-cloud-live-launch-steps-html": {
      "title": "Launch steps",
      "content": "Previous step:\nGo live checklist\n\nAfter testing and completing your launch checklist, you can start the final steps to launch. These steps include entering tickets, cutting over access, and finally testing your store(s) when live.\n\nMagento support staff work with you through the process, checking status, and helping if any questions or issues occur. All issues should be tracked with tickets to best capture what happened and how it was resolved. When you begin continuous iterations deploying updates to your launched store, you may have similar issues occur again. These tickets can help pinpoint the issues and help adjust your deployment tasks.\n\nContact Magento to go live\nContact Magento support and update any go live tickets with the intended date and time to switch over and launch your store(s).\n\nSwitch DNS to the new site\nThe Time-to-Live changed value is important for checking your changed domain. When you modify the A and CNAME records, the update will take the TTL configured time to update correctly. For details on DNS settings, see DNS configurations.\n\nTo cut over to the new site:\n\n\n  Access your DNS service.\n  Update your A and CNAME records for your domains and hostnames.\n  Wait for the TTL time to pass and restart your web browser.\n  Access your store using the storefront domain.\n\n\nTest the live store\nComplete a few UAT tests in your live store to make sure everything is loading and actions complete correctly. For a list of tests, see Test deployment.\n\nPost-Launch\nMagento will activate checks and monitor the site to ensure all services and access are in the green. We remain on hand as needed to walk-through and check all system logs, services, caching, and functions are working as you and your customers need.\n\nIf any issues occur, create and track issues with Support. Include as much information as possible including date/time, specific feature with a problem, symptoms and odd behaviors, extensions, and so on. We will investigate the logs, the issue, and work with you to resolve quickly as possible.\n",
      "url": "/guides/v2.0/cloud/live/launch-steps.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-layout-extend-html": {
      "title": "Extend a layout",
      "content": "Create a theme extending file\n\nRather than copy extensive page layout or page configuration code and then modify what you want to change, in the Magento system, you only need to create an extending layout file that contains the changes you want.\n\nTo add an extending page configuration or generic layout file:\n\n\n  Put the layout file in the following location:\n\n\n&lt;theme_dir&gt;\n&nbsp;|__/&lt;Namespace&gt;_&lt;Module&gt;\n&nbsp;&nbsp;&nbsp;|__/layout\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout1&gt;.xml\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout2&gt;.xml\n\n\nFor example, to customize the layout defined in &lt;Magento_Catalog_module_dir&gt;/view/frontend/layout/catalog_product_view.xml, you need to add a layout file with the same name in your custom theme, like following:\n\n&lt;theme_dir&gt;/Magento_Catalog/layout/catalog_product_view.xml\n\nTo add an extending page layout file:\n\n\n  Put the file in the following location:\n\n\n&lt;theme_dir&gt;\n&nbsp;|__/&lt;Namespace&gt;_&lt;Module&gt;\n&nbsp;&nbsp;&nbsp;|__/page_layout\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout1&gt;.xml\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout2&gt;.xml\n\n\n\n\nRelated topics:\n\n\n  Override a layout\n  XML instructions\n  Create a theme\n  Magento UI library\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/layout-extend.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-layout-override-html": {
      "title": "Override a layout",
      "content": "What's in this topic\n\nNot all layout customizations can be performed by extending existing layouts. If the amount of customizations is large, you can use the overriding function for the needed layout file. This means that the new file that you place in the theme will be used instead of the parent theme layout file of base layout file.\n\nIn this article, page layouts, page configurations, and generic layouts are referred to as layout files, as the mechanism of overriding is similar for all of them.\n\nLayout files with instructions that override the default or parent theme files are referred to as overriding layout files.\n\nExamples of customizations that involve overriding layouts\nExamples of customizations that involve overriding layouts:\n\n\n  \n    Suppressing method invocation.\n\n    \n    Overriding is not necessary if a block has a method that cancels the effect of the originally invoked method. In this case, you can customize the layout by adding a layout file where the canceling method is invoked.\n\n  \n  Modifying method arguments.\n  Canceling block/container removal using the remove attribute.\n  \n    Setting XML attributes of blocks and containers.\n\n    \n    Certain attributes, like htmlClass, htmlId, label attributes can be changed in extending layouts.\n\n  \n  Removing block arguments.\n  Modifying and suppressing handles inclusion.\n  Removing all handle instructions by declaring an overriding layout file with an empty handle.\n\n\nHow to override a layout\n\nThis section discusses how to override:\n\n\n  Base layout\n  Theme layout\n\n\nOverride base layouts\n\nTo add an overriding base layout file (to override a base layout provided by the module):\n\n\n  Put a layout file with the same name in the following location:\n\n\n\n&lt;theme_dir&gt;\n&nbsp;&nbsp;|__/&lt;Namespace_Module&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;|__/layout\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/base\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout1&gt;.xml\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout2&gt;.xml\n\n\n\nThese files override the following layouts:\n\n\n&lt;module_dir&gt;/view/frontend/layout/&lt;layout1&gt;.xml\n&lt;module_dir&gt;/view/frontend/layout/&lt;layout2&gt;.xml\n\n\nOverride theme layouts\n\nTo add an overriding theme file (to override a parent theme layout):\n\n\n  Put a layout file with the same name in the following location:\n\n\n\n&lt;theme_dir&gt;\n&nbsp;&nbsp;|__/&lt;Namespace_Module&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;|__/layout\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/theme\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/&lt;Parent_Vendor&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|__/&lt;parent_theme&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout1&gt;.xml\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|--&lt;layout2&gt;.xml\n\n\nThese files override the following layouts:\n\n\n&lt;parent_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout/&lt;layout1&gt;.xml\n&lt;parent_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout/&lt;layout2&gt;.xml\n\n\n\n\n  To override page layout files, use 'page_layout' directory name instead of 'layout'\n\n\nCustomization mistakes\n\nAlthough the layout overriding mechanism provides great customization flexibility, it’s possible to use it to add logically irrelevant changes. We strongly recommend you not make the following changes:\n\n\n  Changing block name or alias. The name of a block should not be changed, and neither should the alias of a block remaining in the same parent element.\n  Changing handle inheritance. For example, you should not change the page type parent handle.\n\n\nRelated topics:\n\n\n  Extend a layout\n  Create a theme\n  Layout instructions\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/layout-override.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-layout-overview-html": {
      "title": "Layout overview",
      "content": "What's in this topic\nThis article describes the basic concepts you need to know to create layouts for your custom theme.\n\nIntroduction\nIn Magento, the basic components of page design are layouts, containers, and blocks. A layout represents the structure of a web page (1). Containers represent the placeholders within that web page structure (2). And blocks represent the UI controls or components within the container placeholders (3). These terms are illustrated and defined below.\n\n\n\n(1) Layouts provide the structures for web pages using an XML file that identifies all the containers and blocks composing the page. The details of layout XML files are described later in this section.\n\n(2) Containers assign content structure to a page using container tags within a layout XML file. A container has no additional content except the content of included elements. Examples of containers include the header, left column, main column, and footer.\n\n(3) Blocks render the UI elements on a page using block tags within a layout XML file. Blocks use templates to generate the HTML to insert into its parent structural block. Examples of blocks include a category list, a mini cart, product tags, and product listing.\n\nBasic layouts\n\nThe basic view of all Magento storefront pages in defined in two page configuration layout files located in the Magento_Theme module:\n\n\n  &lt;Magento_Theme_module_dir&gt;/view/frontend/layout/default.xml: defines the page layout.\n  &lt;Magento_Theme_module_dir&gt;/view/frontend/layout/default_head_blocks.xml: defines the scripts, images, and meta data included in pages’ &lt;head&gt; section.\n\n\nThese basic page configuration layouts are extended in other Magento modules and in Magento themes.\n\nYou can also extend or override these files in your custom theme.\n\nLayout handles\n\n\n\nA layout handle is a uniquely identified set of layout instructions that serves as a name of a layout file.\n\nThere are three kinds of layout handles:\n\n\n  page-type layout handles – Synonyms of the page type identifiers. Correspond to “full action names” of controller actions, for example, catalog_product_view.\n  page layout handles – Identifiers of specific pages. Correspond to controller actions with parameters that identify specific pages, for example, catalog_product_view_type_simple_id_128 or for a CMS page, cms_page_view_id_home.xml.\n  arbitrary handles - Do not correspond to any page type, but other handles use them by including.\n\n\nLayout files types and conventions\n\nLayout file types: by role\n\nFor a particular page, its layout is defined by two major layout components: page layout file and page configuration file (or generic layout for pages returned in AJAX requests, emails, and so on).\n\nFollowing are the definitions of each layout file type:\n\n\n  Page layout: an XML file declaring a page wireframe inside the &lt;body&gt; section of the HTML page markup, for example, two-column page layout.\n  Page configuration: an XML file declaring detailed structure, contents and meta-information of a page (includes the &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; sections of the HTML page markup).\n  Generic layout: an XML file declaring page detailed structure and contents inside the body section of the HTML page markup. Used for pages returned by AJAX requests, emails, HTML snippets, and so on.\n\n\nFor details, refer to Layout file types.\n\nIn this guide we use layout files when talking about concepts which are similarly applied to all of these types of layout files.\n\nModule and theme layout files\n\nThe following terms are used to distinguish layouts provided by different application components:\n\n\n  Base layouts: Layout files provided by modules. Conventional location:\n    \n      Page configuration and generic layout files: &lt;module_dir&gt;/view/frontend/layout\n      Page layout files: &lt;module_dir&gt;/view/frontend/page_layout\n    \n  \n  Theme layouts: Layout files provided by themes. Conventional location:\n    \n      Page configuration and generic layout files: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout\n      Page layout files: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/page_layout\n    \n  \n\n\nCustomize layout\n\nTo ensure stability and secure your customizations from being deleted during upgrade, do not change out-of-the-box Magento module and theme layouts.\n\nTo make the necessary changes, create extending and overriding layout files in your custom theme.\n\nLayout files processing\n\nThe Magento application processes layout files in the following order:\n\n\n  Collects all layout files from modules. The order is determined by the modules order in the module list from app/etc/config.php.\n  Determines the sequence of inherited themes [&lt;parent_theme&gt;, ..., &lt;parent1_theme&gt;] &lt;current_theme&gt;\n  \n    Iterates the sequence of themes from last ancestor to current:\n\n    a.\tAdds all extending theme layout files to the list.\n\n    b.\tReplaces overridden layout files in the list.\n  \n  Merges all layout files from the list.\n\n\n\n  Layout files that belong to inactive modules or modules with disabled output are ignored.\n\n\nRelated topics\n\n\n  Layout instructions\n  Common layout customization tasks\n  Extend a layout\n  Override a layout\n  Customizing layout - step-by-step illustration\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/layout-overview.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-layout-practice-html": {
      "title": "Customizing layout illustration",
      "content": "What's in this topic\nThis article features a step-by-step illustration of how a real-life layout customization task is performed. Namely, it illustrates how to change the layout of customer account links in a Magento store page header.\n\nMoving customer account links\nIn their Orange theme, OrangeCo wants to transform the header links block to a drop-down, the way it is done in the Magento Luma theme:\n\n\n\n\n\nTo do this, they need to wrap the list of header links with a container and add a greeting with a drop-down arrow before the list.\n\nThe Orange theme inherits from Blank, so by default the rendered header links markup in Orange looks like following:\n\n\n\n\n\nThe markup, that is needed for a drop-down:\n\n\n\n\n\nStep 1: Define the blocks\n\nOrangeCo applies the Luma theme. Using the approach described in Locate templates, layouts, and styles they find out that the blocks responsible for displaying the header links are defined in &lt;Magento_Customer_module_dir&gt;/view/frontend/layout/default.xml:\n\n...\n    &lt;referenceBlock name=\"top.links\"&gt;\n        &lt;block class=\"Magento\\Customer\\Block\\Account\\Link\" name=\"my-account-link\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"label\" xsi:type=\"string\" translate=\"true\"&gt;My Account&lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/block&gt;\n        &lt;block class=\"Magento\\Customer\\Block\\Account\\RegisterLink\" name=\"register-link\"&gt;\n            &lt;arguments&gt;\n                &lt;argument name=\"label\" xsi:type=\"string\" translate=\"true\"&gt;Create an Account&lt;/argument&gt;\n            &lt;/arguments&gt;\n        &lt;/block&gt;\n        &lt;block class=\"Magento\\Customer\\Block\\Account\\AuthorizationLink\" name=\"authorization-link\" template=\"account/link/authorization.phtml\"/&gt;\n    &lt;/referenceBlock&gt;\n...\n\nStep 2: Define the templates\n\nSimilar to the way they defined the layout on the previous step, OrangeCo \ndefines the template which is used for rearranging the links:\n\n&lt;Magento_Customer_module_dir&gt;/view/frontend/templates/account/customer.phtml\n\n&lt;?php if($block-&gt;customerLoggedIn()): ?&gt;\n    &lt;li class=\"customer-welcome\"&gt;\n        &lt;span class=\"customer-name\"\n              role=\"link\"\n              tabindex=\"0\"\n              data-mage-init='{\"dropdown\":{}}'\n              data-toggle=\"dropdown\"\n              data-trigger-keypress-button=\"true\"\n              data-bind=\"scope: 'customer'\"&gt;\n            &lt;span data-bind=\"text: customer().fullname\"&gt;&lt;/span&gt;\n            &lt;button type=\"button\"\n                    class=\"action switch\"\n                    tabindex=\"-1\"\n                    data-action=\"customer-menu-toggle\"&gt;\n                &lt;span&gt;&lt;?php /* @escapeNotVerified */ echo __('Change')?&gt;&lt;/span&gt;\n            &lt;/button&gt;\n        &lt;/span&gt;\n        &lt;script type=\"text/x-magento-init\"&gt;\n        {\n            \"*\": {\n                \"Magento_Ui/js/core/app\": {\n                    \"components\": {\n                        \"customer\": {\n                            \"component\": \"Magento_Customer/js/view/customer\"\n                        }\n                    }\n                }\n            }\n        }\n        &lt;/script&gt;\n        &lt;?php if($block-&gt;getChildHtml()):?&gt;\n        &lt;div class=\"customer-menu\" data-target=\"dropdown\"&gt;\n            &lt;?php echo $block-&gt;getChildHtml();?&gt;\n        &lt;/div&gt;\n        &lt;?php endif; ?&gt;\n    &lt;/li&gt;\n&lt;?php endif; ?&gt;\n\nStep 3: Extend the base layout to add a block\n\nOrangeCo needs to create a new block, say, header.links, in the header.panel container, to move the links there. As the links can be added to this list by different modules, it is better to add this block to the default.xml page configuration of the Magento_Theme module.\n\nSo the following extending layout is added in the Orange theme:\n\napp/design/frontend/OrangeCo/orange/Magento_Theme/layout/default.xml\n\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;body&gt;\n        &lt;referenceContainer name=\"header.panel\"&gt;\n            &lt;block class=\"Magento\\Framework\\View\\Element\\Html\\Links\" name=\"header.links\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"css_class\" xsi:type=\"string\"&gt;header links&lt;/argument&gt;\n                &lt;/arguments&gt;\n            &lt;/block&gt;\n        &lt;/referenceContainer&gt;\n    &lt;/body&gt;\n&lt;/page&gt;\n\nStep 4: Move links\n\nTo move the links to the header.links block, OrangeCo adds an extending layout:\n\napp/design/frontend/OrangeCo/orange/Magento_Customer/layout/default.xml\n\n    &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n        &lt;body&gt;\n            &lt;referenceBlock name=\"header.links\"&gt;\n                &lt;block class=\"Magento\\Customer\\Block\\Account\\Customer\" name=\"customer\" template=\"account/customer.phtml\" before=\"-\"/&gt;\n                &lt;block class=\"Magento\\Customer\\Block\\Account\\AuthorizationLink\" name=\"authorization-link-login\" template=\"account/link/authorization.phtml\"/&gt;\n            &lt;/referenceBlock&gt;\n            &lt;block class=\"Magento\\Theme\\Block\\Html\\Header\" name=\"header\" as=\"header\"&gt;\n                &lt;arguments&gt;\n                    &lt;argument name=\"show_part\" xsi:type=\"string\"&gt;welcome&lt;/argument&gt;\n                &lt;/arguments&gt;\n            &lt;/block&gt;\n            &lt;move element=\"header\" destination=\"header.links\" before=\"-\"/&gt;\n            &lt;move element=\"register-link\" destination=\"header.links\"/&gt;\n            &lt;move element=\"top.links\" destination=\"customer\"/&gt;\n            &lt;move element=\"authorization-link\" destination=\"top.links\" after=\"-\"/&gt;\n        &lt;/body&gt;\n    &lt;/page&gt;\n\nNow the customer links look like following:\n\n\n\n\n\n\nThe last touch is adding styles:\n\n\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/layout-practice.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-layout-types-html": {
      "title": "Layout file types",
      "content": "\n\t\n\nWhat's in this topic\nFor a particular page, its layout is defined by two major layout components: page layout file and page configuration file.\n\nA page layout file defines the page wireframe, for example, one-column layout. Technically page layout is an .xml file defining the structure inside the &lt;body&gt; section of the HTML page markup. Page layouts feature only containers. \nAll page layouts used for page rendering should be declared in the page layout declaration file.\n\nPage configuration is also an .xml file. It defines the detailed structure (page header, footer, etc.), contents and page meta information, including the page layout used. Page configuration features both main elements, blocks of particular classes and containers.\n\nWe also distinguish the third type of layout files, generic layouts. They are .xml files which define the contents and detailed structure inside the &lt;body&gt; section of the HTML page markup. These files are used for pages returned by AJAX requests, emails, HTML snippets and so on.\n\nThis article gives a comprehensive description of each layout file type.\n\nPage layout\nPage layout declares the wireframe of a page inside the &lt;body&gt; section, for example one-column layout or two-column layout.\n\nAllowed layout instructions:\n\n\n   &lt;container&gt;\n   &lt;referenceContainer&gt;\n   &lt;move&gt;\n   &lt;update&gt;\n\n\nSample page layout:\n\n&lt;Magento_Theme_module_dir&gt;/view/frontend/page_layout/2columns-left.xml\n\n&lt;layout xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_layout.xsd\"&gt;\n    &lt;update handle=\"1column\"/&gt;\n    &lt;referenceContainer name=\"columns\"&gt;\n        &lt;container name=\"div.sidebar.main\" htmlTag=\"div\" htmlClass=\"sidebar sidebar-main\" after=\"main\"&gt;\n            &lt;container name=\"sidebar.main\" as=\"sidebar_main\" label=\"Sidebar Main\"/&gt;\n        &lt;/container&gt;\n        &lt;container name=\"div.sidebar.additional\" htmlTag=\"div\" htmlClass=\"sidebar sidebar-additional\" after=\"div.sidebar.main\"&gt;\n            &lt;container name=\"sidebar.additional\" as=\"sidebar_additional\" label=\"Sidebar Additional\"/&gt;\n        &lt;/container&gt;\n    &lt;/referenceContainer&gt;\n&lt;/layout&gt;\n\nPage layout files conventional location\n\nConventionally page layouts must be located as follows:\n\n\n  Module page layouts: &lt;module_dir&gt;/view/frontend/page_layout\n  Theme page layouts: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/page_layout\n\n\nPage layouts declaration\n\nTo be able to use a layout for actual page rendering, you need to declare it in layouts.xml.\n\nConventionally layout declaration file can be located in one of the following locations:\n\n\nModule layout declarations: &lt;module_dir&gt;/view/frontend/layouts.xml\nTheme layout declaration: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layouts.xml\n\n\n\n\nDeclare a layout file using the &lt;layout&gt;&lt;/layout&gt; instruction, for which specify the following:\n\n\n &lt;layout&nbsp;id=&quot;layout_file_name&quot;&gt;. For example, the 2columns-left.xml page layout is declared like following: &lt;layout&nbsp;id&nbsp;=&nbsp;&quot;2columns-left&quot;/&gt;\n\n&lt;label&nbsp;translate=&quot;true|false&quot;&gt;{Label_used_in_Admin}&lt;/label&gt;\n\n\nSample page layout declaration file:\n\n&lt;Magento_Theme_module_dir&gt;/view/frontend/layouts.xml\n\n\n&lt;page_layouts xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/PageLayout/etc/layouts.xsd\"&gt;\n    &lt;layout id=\"1column\"&gt;\n        &lt;label translate=\"true\"&gt;1 column&lt;/label&gt;\n    &lt;/layout&gt;\n    &lt;layout id=\"2columns-left\"&gt;\n        &lt;label translate=\"true\"&gt;2 columns with left bar&lt;/label&gt;\n    &lt;/layout&gt;\n    &lt;layout id=\"2columns-right\"&gt;\n        &lt;label translate=\"true\"&gt;2 columns with right bar&lt;/label&gt;\n    &lt;/layout&gt;\n    &lt;layout id=\"3columns\"&gt;\n        &lt;label translate=\"true\"&gt;3 columns&lt;/label&gt;\n    &lt;/layout&gt;\n&lt;/page_layouts&gt;\n\nPage configuration\n\nThe page configuration adds content to the wireframe defined in a page layout file. A page configuration also contains page meta-information, and contents of the &lt;head&gt; section.\n\nPage configuration file conventional location\n\nConventionally page configuration files must be located as follows:\n\n\n Module page configurations: &lt;module_dir&gt;/view/frontend/layout\n Theme page configurations: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout\n\n\nPage configuration structure and allowed layout instructions\n\nThe following table describes the instructions specific for page configuration files. For the descriptions of common layout instructions see the Layout instructions article.\n\n\n  \n    \n      Element\n      Attributes\n      Parent of\n      Description\n    \n    \n      \n        &lt;page&gt;&lt;/page&gt;\n      \n      \n        \n          \n            layout = {layout}\n          \n          \n            xsi:noNamespaceSchemaLocation =\"{path_to_schema}\"            \n          \n        \n      \n      \n        \n          &lt;html&gt;\n          &lt;head&gt;\n          &lt;body&gt;\n          &lt;update&gt;\n        \n      \n      Mandatory root element.\n    \n    \n      &lt;html&gt;&lt;/html&gt;\n      \n        none\n      \n      \n        \n          &lt;attribute&gt;\n        \n      \n      \n        Mandatory element.\n      \n    \n    \n      &lt;head&gt;&lt;/head&gt;\n      none\n      \n        \n          &lt;title&gt;\n          &lt;meta&gt;\n          &lt;link&gt;\n          &lt;css&gt;\n          &lt;script&gt;\n        \n      \n      \n    \n    \n      &lt;body&gt;&lt;/body&gt;\n      none\n      \n        \n          &lt;block&gt;\n          &lt;container&gt;\n          &lt;move&gt;\n       &lt;attribute&gt;\n          &lt;referenceBlock&gt;\n          &lt;referenceContainer&gt;\n          &lt;action&gt;\n        \n      \n      \n    \n    \n      &lt;attribute&gt;\n      \n        \n          name = {arbitrary_name}\n          \n          value = {arbitrary_value}\n          \n        \n      \n      \n      \n        Specified for &lt;html&gt;, rendered like following:\n        &lt;html name=\"value'&gt;\n      \n    \n    \n      \n        &lt;title&gt;\n      \n      none\n      none\n      Page title\n    \n    \n      \n        &lt;meta&gt;\n      \n      \n        \n          \n            content\n          \n          \n            charset\n          \n          \n            http-equiv\n          \n          \n            name\n          \n          \n            scheme\n          \n        \n      \n      \n        none\n      \n      \n    \n    \n      \n        &lt;link&gt;\n      \n      \n        \n          \n            defer\n          \n          \n            ie_condition\n          \n          \n            charset\n          \n          \n            hreflang\n          \n          \n            media\n          \n          \n            rel\n          \n          \n            rev\n          \n          \n            sizes\n          \n          \n            src\n          \n          \n            src_type\n          \n          \n            target\n          \n          \n            type\n          \n        \n      \n      \n        none\n      \n       \n    \n    \n      \n        &lt;css&gt;\n      \n      \n        \n          \n            defer\n          \n          \n            ie_condition\n          \n          \n            charset\n          \n          \n            hreflang\n          \n          \n            media\n          \n          \n            rel\n          \n          \n            rev\n          \n          \n            sizes\n          \n          \n            src\n          \n          \n            src_type\n          \n          \n            target\n          \n          \n            type\n          \n        \n      \n      \n        none\n      \n      \n    \n    \n      \n        &lt;script&gt;\n      \n      \n        \n          \n            defer\n          \n          \n            ie_condition\n          \n          \n            async\n          \n          \n            charset\n          \n          \n            src\n          \n          \n            src_type\n          \n          \n            type\n          \n        \n      \n      \n        none\n      \n      \n    \n  \n\n\nGeneric layout\n\nGeneric layouts define the contents and detailed structure inside the &lt;body&gt; section of the HTML page markup.\n\nGeneric layout file conventional location\n\nConventionally generic layout files must be located as follows:\n\n\nModule generic layouts: &lt;module_dir&gt;/view/frontend/layout\nTheme generic layouts: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout\n\n\nGeneric layout structure and allowed layout instructions\n\nThe following table describes the instructions specific for generic layout files. For the descriptions of common layout instructions see the Layout instructions article.\n\n\n  \n    \n      Element\n      Attributes\n      Parent of\n      Description\n    \n    \n      \n         &lt;layout&gt;&lt;/layout&gt; \n      \n      \n        \n          \n            \n              xsi:noNamespaceSchemaLocation=\"{path_to_schema}\"\n\n          \n        \n      \n      \n        \n          &lt;container&gt;\n          &lt;update&gt;\n\n        \n      \n      Mandatory root element.\n    \n    \n      \n         &lt;update&gt; \n      \n      \n        \n          \n            handle=\"{name_of_handle_to_include}\"\n          \n        \n      \n      \nnone\n      \n\n    \n    \n      &lt;container&gt;\n      \n\nname=\"root\"\nFor complete list of attributes, see Layout instructions\n\n\n      \n        \n          &lt;block&gt;\n          &lt;container&gt;\n          &lt;referenceBlock&gt;\n          &lt;referenceContainer&gt;\n          \n        \n      \n       Mandatory element\n    \n\n\n  \n\n\nSample generic layout:\n\n&lt;layout xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/layout_generic.xsd\"&gt;\n    &lt;update handle=\"formkey\"/&gt;\n    &lt;update handle=\"adminhtml_googleshopping_types_block\"/&gt;\n    &lt;container name=\"root\"&gt;\n        &lt;block class=\"Magento\\Backend\\Block\\Widget\\Grid\\Container\" name=\"googleshopping.types.container\" template=\"Magento_Backend::widget/grid/container/empty.phtml\"/&gt;\n    &lt;/container&gt;\n&lt;/layout&gt;\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/layout-types.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-legacy-file-system-perms-html": {
      "title": "Appendix&amp;mdash;Magento file system ownership and appendix (legacy)",
      "content": "Overview: Magento file system ownership and appendix (legacy)\nThis topic is provided for convenience for anyone using Magento Open Source or Magento Commerce versions 2.0.0–2.0.5.\n\nIn versions before 2.0.6, Magento explicitly set file system permissions when we created files, such as cache and static view files. Starting with 2.0.6, we do not set permissions explicitly. For more detail about file system ownership and permissions for version 2.0.6 and later, see Overview of ownership and permissions.\n\nSummary of file system permissions\nThis section summarizes the permissions Magento uses when creating files in the file system.\n\nDeveloper mode permissions\nIn developer mode, Magento sets permissions as follows:\n\n\n  \n    Directories: 770\n\n    770 permissions give full control to the owner and to the group, and no permissions to anyone else.\n  \n  \n    Files: 660\n\n    660 permissions give read-write permissions to the owner and to the group, and no permissions to anyone else.\n  \n\n\nProduction mode permissions\nChanging modes affects permissions and ownership the following subdirectories in your Magento installation:\n\nvar/view_preprocessed\nvar/generation\nvar/di\n\n\nWhen you change to production mode, we set the following permissions on these directories and subdirectories:\n\n\n  \n    Directories: 750\n\n    750 permissions give full control to the owner, read and execute permissions to the group, and no permissions to anyone else.\n  \n  \n    Files: 640\n\n    640 permissions give read-write permissions to the owner, read-only permissions to the group, and no permissions to anyone else.\n  \n\n\nSet permissions before installing the Magento software\nUse the following steps:\n\n\n  If you haven’t already done so, log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Change to the Magento installation directory:\n\n    cd &lt;web server docroot&gt;/&lt;magento2 base dir&gt;\n    \n\n    The base directory is typically a subdirectory named magento2 under your web server’s docroot. Need help locating the docroot? Click here.\n\n    Examples:\n\n    \n      Ubuntu: /var/www/magento2\n      CentOS: /var/www/html/magento2\n    \n  \n  \n    Set ownership:\n\n    chown -R :&lt;your web server group name&gt; .\n    \n\n    Typical examples:\n\n    \n      CentOS: chown -R :apache .\n      Ubuntu: chown -R :www-data .\n    \n  \n  \n    Set permissions:\n\n    find . -type d -exec chmod 770 {} \\; &amp;&amp; find . -type f -exec chmod 660 {} \\; &amp;&amp; chmod u+x bin/magento\n    \n\n    If you must enter the commands as sudo, use:\n\n    sudo find . -type d -exec chmod 770 {} \\; &amp;&amp; sudo find . -type f -exec chmod 660 {} \\; &amp;&amp; sudo chmod u+x bin/magento\n    \n  \n\n",
      "url": "/guides/v2.0/install-gde/install/legacy-file-system-perms.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-prepare-lifecycle-html": {
      "title": "Extension Lifecycle",
      "content": "This topic describes a module’s lifecycle and how to create classes that execute code when your module is initialized, upgraded, or uninstalled.\nThese executable classes can perform tasks that set up the database, update data, and clean up data.\n\nNote: Theme and language package extensions do not need initialization or uninstallation tasks because they do not install database schemas or update data.\n\nLifecycle guidelines\n\nFollow these guidelines when developing your executable classes to have them run during specific lifecycle stages:\n\n\n  Put your executable class in the Setup directory inside your module’s root directory.\n  Use the specific file and class name for your class’s target lifecycle stage.\n  Implement the specific class interface and function for your class’s target stage.\n  Follow Magento’s versioning policy when changing your module’s version.\n\n\nSchema initialization stages\n\nThe schema initialization stages are the first set of processes Magento runs when your module is installed, re-installed, or upgraded.\n\nSchema installation\n\nMagento executes the schema installation class during your module’s initial install. \nIf the schema_version for your module is found in the setup_module table, Magento skips this stage and proceeds to the schema upgrade stage.\n\n\n  \n    \n      Class name:\n      InstallSchema\n    \n    \n      Interface:\n      InstallSchemaInterface\n    \n    \n      Method:\n      install()\n    \n  \n\n\nExample: InstallSchema.php\n\nclass \\VendorName\\ModuleName\\Setup\\InstallSchema implements \\Magento\\Framework\\Setup\\InstallSchemaInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function install(SchemaSetupInterface $setup, ModuleContextInterface $context)\n    {\n        //Install schema logic\n    }\n}\n\n\nSchema upgrade\n\nMagento executes your module’s schema upgrade class when it detects an earlier installation. \nThe purpose of this class is to update the database structure or apply patches.\n\n\n  \n    \n      Class name\n      UpgradeSchema\n    \n    \n      Interface\n      UpgradeSchemaInterface\n    \n    \n      Method\n      upgrade()\n    \n  \n\n\nExample: UpgradeSchema.php\n\nclass \\VendorName\\ModuleName\\Setup\\UpgradeSchema implements \\Magento\\Framework\\Setup\\UpgradeSchemaInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function upgrade(SchemaSetupInterface $setup, ModuleContextInterface $context)\n    {\n        //Upgrade schema logic\n    }\n}\n\n\nRecurring schema event\n\nMagento executes your module’s recurring schema event class after every schema installation or upgrade stage.\nThis class makes final modifications to the database schema after it has been installed or updated.\n\n\n  \n    \n      Class name\n      Recurring\n    \n    \n      Interface\n      InstallSchemaInterface\n    \n    \n      Method\n      install()\n    \n  \n\n\nExample: Recurring.php\n\nclass \\VendorName\\ModuleName\\Setup\\Recurring implements \\Magento\\Framework\\Setup\\InstallSchemaInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function install(SchemaSetupInterface $setup, ModuleContextInterface $context)\n    {\n        //Recurring schema event logic\n    }\n}\n\n\nData initialization\n\nMagento goes through your module’s data initialization stages after the schema initialization processes complete.\n\nData installation\n\nMagento executes the data installation class during your module’s initial install unless an existing version entry is found in the database.\nThe purpose of this class is to populate the database with initial data.\n\n\n  \n    \n      Class name\n      InstallData\n    \n    \n      Interface\n      InstallDataInterface\n    \n    \n      Method\n      install()\n    \n  \n\n\nExample: InstallData.php\n\nclass \\VendorName\\ModuleName\\Setup\\InstallData implements \\Magento\\Framework\\Setup\\InstallDataInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function install(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n    {\n        // Data install logic\n    }\n}\n\n\nData upgrade\n\nMagento executes the data upgrade class when it detects an earlier version in the schema_version field for the module in the setup_module table.\nThe purpose of this class is to fix corrupted data or populate a new data field after a schema change.\n\n\n  \n    \n      Class name\n      UpgradeData\n    \n    \n      Interface\n      UpgradeDataInterface\n    \n    \n      Method\n      upgrade()\n    \n  \n\n\nExample: UpgradeData.php\n\nclass \\VendorName\\ModuleName\\Setup\\UpgradeData implements \\Magento\\Framework\\Setup\\UpgradeDataInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function upgrade(ModuleDataSetupInterface $setup, ModuleContextInterface $context);\n    {\n        // Data upgrade logic\n    }\n}\n\n\nRecurring data event\n\nMagento executes your module’s recurring data event class after every data installation or upgrade stage.\nThis class makes final modifications to the database store after data has been installed or updated.\n\n\n  \n    \n      Class name\n      RecurringData\n    \n    \n      Interface\n      InstallDataInterface\n    \n    \n      Method\n      install()\n    \n  \n\n\nExample: InstallDataInterface.php\n\nclass \\VendorName\\ModuleName\\Setup\\RecurringData implements \\Magento\\Framework\\Setup\\InstallDataInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function install(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n    {\n        // Recurring data event logic\n    }\n}\n\n\nDatabase interface\n\nUse the ModuleDataSetupInterface when you need to do database manipulations.\nIf your installation or upgrade logic spans multiple classes, pass this resource on to other classes that need to modify the database.\n\nExample: Customer module’s InstallData.php\n\nclass InstallData implements InstallDataInterface\n{\n    /**\n     * @var CustomerFactory\n     */\n    private $customerSetupFactory;\n\n    /**\n     * @param CustomerFactory $customerSetupFactory\n     */\n    public function __construct(CustomerFactory $customerSetupFactory)\n    {\n        $this-&gt;customerSetupFactory = $customerSetupFactory;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function install(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n    {\n        /** @var Customer $customerSetup */\n        $customerSetup = $this-&gt;customerSetupFactory-&gt;create(['setup' =&gt; $setup]);\n\n        $setup-&gt;startSetup();\n\n        ...\n\n        $customerSetup-&gt;installEntities();\n\n        $customerSetup-&gt;installCustomerForms();\n\n        $disableAGCAttribute = $customerSetup-&gt;getEavConfig()-&gt;getAttribute('customer', 'disable_auto_group_change');\n        \n        ...\n    }\n}\n\n\nModule version\n\nUse the ModuleContextInterface to get the current module version and execute logic based on the version.\n\nExample: User module’s UpgradeData.php\n\nnamespace Magento\\User\\Setup;\n\nuse Magento\\Framework\\Encryption\\Encryptor;\nuse Magento\\Framework\\Setup\\ModuleContextInterface;\nuse Magento\\Framework\\Setup\\ModuleDataSetupInterface;\nuse Magento\\Framework\\Setup\\UpgradeDataInterface;\n\nclass UpgradeData implements UpgradeDataInterface\n{\n    /**\n     * @inheritdoc\n     */\n    public function upgrade(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n    {\n        $setup-&gt;startSetup();\n        if (version_compare($context-&gt;getVersion(), '2.0.1', '&lt;')) {\n            $this-&gt;upgradeHash($setup);\n        }\n        $setup-&gt;endSetup();\n    }\n\n    ...\n\n}\n\n\nUninstall event\n\nMagento executes the uninstall event class when your module is uninstalled using the Component Manager or with the following command line command:\n\nbin/magento module:uninstall --remove-data &lt;module_name&gt;\n\nIn this phase, your module should remove all traces of its existence in the database by dropping tables, deleting data, or restoring data.\n\n\n  \n    \n      Class name\n      Uninstall\n    \n    \n      Interface\n      UninstallInterface\n    \n    \n      Method\n      uninstall()\n    \n  \n\n\nExample: Uninstall.php\nclass \\VendorName\\ModuleName\\Setup\\Uninstall implements \\Magento\\Framework\\Setup\\UninstallInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function uninstall(SchemaSetupInterface $setup, ModuleContextInterface $context)\n    {\n        //Uninstall logic\n    }\n}\n\n\nDisabled modules\n\nA disabled module can still execute its uninstall event.\nHowever, module-specific configurations such as its dependency injection and event/observer configurations will not be available and will cause problems.\n\nAvoid this situation by not including dependencies in your uninstall event class\n\nRelated Topics\n\n\n  Magento’s versioning policy\n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/prepare/lifecycle.html"
    }
    ,
  
    "guides-v2-0-pattern-library-navigation-links-links-html": {
      "title": "Admin Design Pattern Library",
      "content": "Links\nWithin the Magento application, users often need to navigate through information inside or outside of the application by using links. These links should follow this guideline.\n\nWhen to Use\n\n  Navigating between pages inside of the application.\n  Navigating to pages outside of the application.\n  Open a slide-in panel or modal (if a button could not be used)\n\n\nWhen Not to Use\n\n  When initiating an action or a process\n\n\nStyle\n\n\n\nAccessibility\n\nFull Guideline Reference: http://www.w3.org/TR/WCAG10-HTML-TECHS/#links\n\nLinks Text\n\n  Clearly identify the target of each link. (Good link text should not be overly general; don’t use “click here.”)\n  Provide a text equivalent for every non-text element\n\n\nGrouping and Bypassing Links\n\n  Group related links, identify the group (for user agents), and, until user agents do so, provide a way to bypass the group.\n  Until user agents (including assistive technologies) render adjacent links distinctly, include non-link, printable characters (surrounded by spaces) between adjacent links.\n\n\nKeyboard Access\n\n  Create a logical tab order through links, form controls, and objects.\n  Provide keyboard shortcuts to important links (including those in client-side image maps), form controls, and groups of form controls.\n\n\nAnchors and Target\n\n  Until user agents allow users to turn off spawned windows, do not cause pop-ups or other windows to appear and do not change the current window without informing the user.\n\n\n Usage Examples \n\nLinks in forms/body of text that goes to an external page\n\n\n\n\n\nBreadcrumbs\n\nGuideline\n\n\n  Must always locate above the title as shown.\n  Not be used if all the pages are on the same level. Breadcrumbs are intended to show hierarchy.\n  Show hierarchy and not history. To go back, users use the browser’s back button. Replicating this facility defies the purpose of having breadcrumbs.\n  Progress from the highest level to the lowest, one step at a time.\n  Have a simple link for each level.\n  Include the full page title in the breadcrumb trail. Also ensure consistency between the page address and the breadcrumb. If the page titles include keywords, then this will make your breadcrumbs both human and search engine friendly.\n  Include the full navigational path from the homepage to last level of current page. Not displaying certain levels will confuse users.\n  Never replace primary navigation. They have been devised as a secondary navigation aid and should always be used as such.\n\n\nExample\n\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Links PSD source\n\n",
      "url": "/guides/v2.0/pattern-library/navigation/links/links.html"
    }
    ,
  
    "guides-v2-0-rest-list-html": {
      "title": "List of REST APIs by module",
      "content": "List of REST APIs for Magento Commerce\n\nThe REST APIs for Magento Commerce are available on Commerce installations only. Commerce installations automatically have access to all Magento Open Source REST APIs.\n\nAdditions since 2.0 are marked with asterisks (*).\n\nCustomerBalance\n\nPOST   /V1/carts/mine/balance/apply\n\n\nGiftCardAccount\n\nGET    /V1/carts/:quoteId/giftCards\nPUT    /V1/carts/:cartId/giftCards\nDELETE /V1/carts/:quoteId/giftCards/:giftCardCode\nPOST   /V1/carts/mine/giftCards\nPOST   /V1/carts/guest-carts/:cartId/giftCards\nGET    /V1/carts/guest-carts/:cartId/checkGiftCard/:giftCardCode\nGET    /V1/carts/mine/checkGiftCard/:giftCardCode\n\n\nGiftRegistry\n\nPOST   /V1/giftregistry/mine/estimate-shipping-methods\nPOST   /V1/guest-giftregistry/:cartId/estimate-shipping-methods\n\n\nGiftWrapping\n\nGET    /V1/gift-wrappings/:id\nPOST   /V1/gift-wrappings\nPUT    /V1/gift-wrappings/:wrappingId\nGET    /V1/gift-wrappings\nDELETE /V1/gift-wrappings/:id\n\n\nReward\n\nPOST   /V1/reward/mine/use-reward\n\n\nRma\n\nPOST   /V1/returns/:id/tracking-numbers\nDELETE /V1/returns/:id/tracking-numbers/:trackId\nGET    /V1/returns/:id\nDELETE /V1/returns/:id\nPOST   /V1/returns/:id/comments\nPOST   /V1/returns\nPUT    /V1/returns/:id\nGET    /V1/returns/:id/comments\nGET    /V1/returns\nGET    /V1/returnsAttributeMetadata/:attributeCode\nGET    /V1/returnsAttributeMetadata/form/:formCode\nGET    /V1/returnsAttributeMetadata\nGET    /V1/returnsAttributeMetadata/custom\nGET    /V1/returns/:id/tracking-numbers\nGET    /V1/returns/:id/labels\n\n\nList of REST APIs for Magento Open Source\n\nThe Magento Commerce REST APIs are available on all installations.\n\nAdditions since 2.0 are marked with asterisks (*).\n\n\nBackend\n\nGET    /V1/modules\n\n\nBundle\n\nPOST   /V1/bundle-products/:sku/links/:optionId\nPUT    /V1/bundle-products/:sku/links/:id\nGET    /V1/bundle-products/:productSku/children\nDELETE /V1/bundle-products/:sku/options/:optionId/children/:childSku\nGET    /V1/bundle-products/:sku/options/all\nGET    /V1/bundle-products/options/types\nGET    /V1/bundle-products/:sku/options/:optionId\nPOST   /V1/bundle-products/options/add\nPUT    /V1/bundle-products/options/:optionId\nDELETE /V1/bundle-products/:sku/options/:optionId\n\n\nCatalog\n\nPOST   /V1/products\nPUT    /V1/products/:sku\nDELETE /V1/products/:sku\nGET    /V1/products\nGET    /V1/products/:sku\nGET    /V1/products/attributes/types\nGET    /V1/products/attributes/:attributeCode\nGET    /V1/products/attributes\nGET    /V1/categories/attributes/:attributeCode\nGET    /V1/categories/attributes\nGET    /V1/categories/attributes/:attributeCode/options\nPOST   /V1/products/attributes\nPUT    /V1/products/attributes/:attributeCode\nDELETE /V1/products/attributes/:attributeCode\nGET    /V1/products/types\nGET    /V1/products/attribute-sets/sets/list\nGET    /V1/products/attribute-sets/:attributeSetId\nDELETE /V1/products/attribute-sets/:attributeSetId\nPOST   /V1/products/attribute-sets\nPUT    /V1/products/attribute-sets/:attributeSetId\nGET    /V1/products/attribute-sets/:attributeSetId/attributes\nPOST   /V1/products/attribute-sets/attributes\nDELETE /V1/products/attribute-sets/:attributeSetId/attributes/:attributeCode\nGET    /V1/products/attribute-sets/groups/list\nPOST   /V1/products/attribute-sets/groups\nPUT    /V1/products/attribute-sets/:attributeSetId/groups\nDELETE /V1/products/attribute-sets/groups/:groupId\nGET    /V1/products/attributes/:attributeCode/options\nPOST   /V1/products/attributes/:attributeCode/options\nDELETE /V1/products/attributes/:attributeCode/options/:optionId\nGET    /V1/products/media/types/:attributeSetName\nGET    /V1/products/:sku/media/:entryId\nPOST   /V1/products/:sku/media\nPUT    /V1/products/:sku/media/:entryId\nDELETE /V1/products/:sku/media/:entryId\nGET    /V1/products/:sku/media\nGET    /V1/products/:sku/group-prices/:customerGroupId/tiers\nPOST   /V1/products/:sku/group-prices/:customerGroupId/tiers/:qty/price/:price\nDELETE /V1/products/:sku/group-prices/:customerGroupId/tiers/:qty\nDELETE /V1/categories/:categoryId\nGET    /V1/categories/:categoryId\nPOST   /V1/categories\nGET    /V1/categories\nPUT    /V1/categories/:id\nPUT    /V1/categories/:categoryId/move\nGET    /V1/products/options/types\nGET    /V1/products/:sku/options\nGET    /V1/products/:sku/options/:optionId\nPOST   /V1/products/options\nPUT    /V1/products/options/:optionId\nDELETE /V1/products/:sku/options/:optionId\nGET    /V1/products/links/types\nGET    /V1/products/links/:type/attributes\nGET    /V1/products/:sku/links/:type\nPOST   /V1/products/:sku/links\nDELETE /V1/products/:sku/links/:type/:linkedProductSku\nPUT    /V1/products/:sku/links\nGET    /V1/categories/:categoryId/products\nPOST   /V1/categories/:categoryId/products\nPUT    /V1/categories/:categoryId/products\nDELETE /V1/categories/:categoryId/products/:sku\n* POST   /V1/products/:sku/websites\n* PUT    /V1/products/:sku/websites\n* DELETE /V1/products/:sku/websites/:websiteId\n\n\nCatalogInventory\n\nGET    /V1/stockItems/:productSku\nPUT    /V1/products/:productSku/stockItems/:itemId\nGET    /V1/stockItems/lowStock/\nGET    /V1/stockStatuses/:productSku\n\n\nCheckout\n\n* POST   /V1/guest-carts/:cartId/shipping-information\nPOST   /V1/carts/mine/shipping-information\nPOST   /V1/carts/:cartId/shipping-information\nPOST   /V1/carts/:cartId/totals-information\nPOST   /V1/guest-carts/:cartId/totals-information\nPOST   /V1/carts/mine/totals-information\nPOST   /V1/guest-carts/:cartId/payment-information\nGET    /V1/guest-carts/:cartId/payment-information\nPOST   /V1/carts/mine/payment-information\nGET    /V1/carts/mine/payment-information\nPOST   /V1/guest-carts/:cartId/set-payment-information\nPOST   /V1/carts/mine/set-payment-information\n\n\nCheckoutAgreements\n\nGET    /V1/carts/licence\n\n\nCms\n\nGET    /V1/cmsPage/:pageId\nGET    /V1/cmsPage/search\nPOST   /V1/cmsPage\nPUT    /V1/cmsPage/:id\nDELETE /V1/cmsPage/:pageId\nGET    /V1/cmsBlock/:blockId\nGET    /V1/cmsBlock/search\nPOST   /V1/cmsBlock\nPUT    /V1/cmsBlock/:id\nDELETE /V1/cmsBlock/:blockId\n\n\nConfigurableProduct\n\nGET    /V1/configurable-products/:sku/children\nDELETE /V1/configurable-products/:sku/children/:childSku\nPUT    /V1/configurable-products/variation\nPOST   /V1/configurable-products/:sku/child\nGET    /V1/configurable-products/:sku/options/:id\nGET    /V1/configurable-products/:sku/options/all\nPOST   /V1/configurable-products/:sku/options\nPUT    /V1/configurable-products/:sku/options/:id\nDELETE /V1/configurable-products/:sku/options/:id\n\n\nCustomer\n\nGET    /V1/customerGroups/:id\nGET    /V1/customerGroups/default/:storeId\nGET    /V1/customerGroups/default\nGET    /V1/customerGroups/:id/permissions\nGET    /V1/customerGroups/search\nPOST   /V1/customerGroups\nPUT    /V1/customerGroups/:id\nDELETE /V1/customerGroups/:id\nGET    /V1/attributeMetadata/customer/attribute/:attributeCode\nGET    /V1/attributeMetadata/customer/form/:formCode\nGET    /V1/attributeMetadata/customer\nGET    /V1/attributeMetadata/customer/custom\nGET    /V1/attributeMetadata/customerAddress/attribute/:attributeCode\nGET    /V1/attributeMetadata/customerAddress/form/:formCode\nGET    /V1/attributeMetadata/customerAddress\nGET    /V1/attributeMetadata/customerAddress/custom\nGET    /V1/customers/:customerId\nPOST   /V1/customers\nPUT    /V1/customers/:id\nPUT    /V1/customers/me\nGET    /V1/customers/me\nPUT    /V1/customers/me/activate\nGET    /V1/customers/search\nPUT    /V1/customers/:email/activate\nPUT    /V1/customers/me/password\nGET    /V1/customers/:customerId/password/resetLinkToken/:resetPasswordLinkToken\nPUT    /V1/customers/password\nGET    /V1/customers/:customerId/confirm\nPOST   /V1/customers/confirm\nPUT    /V1/customers/validate\nGET    /V1/customers/:customerId/permissions/readonly\nDELETE /V1/customers/:customerId\nPOST   /V1/customers/isEmailAvailable\nGET    /V1/customers/addresses/:addressId\nGET    /V1/customers/me/billingAddress\nGET    /V1/customers/:customerId/billingAddress\nGET    /V1/customers/me/shippingAddress\nGET    /V1/customers/:customerId/shippingAddress\nDELETE /V1/addresses/:addressId\n\n\nDirectory\n\nGET    /V1/directory/currency\nGET    /V1/directory/countries\nGET    /V1/directory/countries/:countryId\n\n\nDownloadable\n\nGET    /V1/products/:sku/downloadable-links\nGET    /V1/products/:sku/downloadable-links/samples\nPOST   /V1/products/:sku/downloadable-links\nPUT    /V1/products/:sku/downloadable-links/:id\nDELETE /V1/products/downloadable-links/:id\nPOST   /V1/products/:sku/downloadable-links/samples\nPUT    /V1/products/:sku/downloadable-links/samples/:id\nDELETE /V1/products/downloadable-links/samples/:id\n\n\nEav\n\nGET    /V1/eav/attribute-sets/list\nGET    /V1/eav/attribute-sets/:attributeSetId\nDELETE /V1/eav/attribute-sets/:attributeSetId\nPOST   /V1/eav/attribute-sets\nPUT    /V1/eav/attribute-sets/:attributeSetId\n\n\nGiftMessage\n\nGET    /V1/carts/:cartId/gift-message\nGET    /V1/carts/:cartId/gift-message/:itemId\nPOST   /V1/carts/:cartId/gift-message\nPOST   /V1/carts/:cartId/gift-message/:itemId\nGET    /V1/carts/mine/gift-message\nGET    /V1/carts/mine/gift-message/:itemId\nPOST   /V1/carts/mine/gift-message\nPOST   /V1/carts/mine/gift-message/:itemId\nGET    /V1/guest-carts/:cartId/gift-message\nGET    /V1/guest-carts/:cartId/gift-message/:itemId\nPOST   /V1/guest-carts/:cartId/gift-message\nPOST   /V1/guest-carts/:cartId/gift-message/:itemId\n\n\nIntegration\n\nPOST   /V1/integration/admin/token\nPOST   /V1/integration/customer/token\n\n\nQuote\n\nGET    /V1/carts/:cartId\n* GET    /V1/carts/search\nPOST   /V1/carts/\nPOST   /V1/customers/:customerId/carts\nPUT    /V1/carts/:cartId\nPOST   /V1/carts/mine\nGET    /V1/carts/mine\n* PUT    /V1/carts/mine\nPUT    /V1/carts/mine/order\nGET    /V1/guest-carts/:cartId\n* POST   /V1/guest-carts\n* PUT    /V1/guest-carts/:cartId\nPUT    /V1/guest-carts/:cartId/order\nGET    /V1/carts/:cartId/shipping-methods\nPOST   /V1/carts/:cartId/estimate-shipping-methods\nPOST   /V1/carts/:cartId/estimate-shipping-methods-by-address-id\nGET    /V1/carts/mine/shipping-methods\nPOST   /V1/carts/mine/estimate-shipping-methods\nPOST   /V1/carts/mine/estimate-shipping-methods-by-address-id\nGET    /V1/guest-carts/:cartId/shipping-methods\nPOST   /V1/guest-carts/:cartId/estimate-shipping-methods\nGET    /V1/carts/:cartId/items\nPOST   /V1/carts/:quoteId/items\nPUT    /V1/carts/:cartId/items/:itemId\nDELETE /V1/carts/:cartId/items/:itemId\nGET    /V1/guest-carts/:cartId/items\nPOST   /V1/guest-carts/:cartId/items\nPUT    /V1/guest-carts/:cartId/items/:itemId\nDELETE /V1/guest-carts/:cartId/items/:itemId\nGET    /V1/carts/mine/items\nPOST   /V1/carts/mine/items\nPUT    /V1/carts/mine/items/:itemId\nDELETE /V1/carts/mine/items/:itemId\nGET    /V1/carts/:cartId/selected-payment-method\nPUT    /V1/carts/:cartId/selected-payment-method\nGET    /V1/carts/:cartId/payment-methods\nGET    /V1/guest-carts/:cartId/selected-payment-method\nPUT    /V1/guest-carts/:cartId/selected-payment-method\nGET    /V1/guest-carts/:cartId/payment-methods\nGET    /V1/carts/mine/selected-payment-method\nPUT    /V1/carts/mine/selected-payment-method\nGET    /V1/carts/mine/payment-methods\nGET    /V1/carts/:cartId/billing-address\nPOST   /V1/carts/:cartId/billing-address\nGET    /V1/guest-carts/:cartId/billing-address\nPOST   /V1/guest-carts/:cartId/billing-address\nGET    /V1/carts/mine/billing-address\nPOST   /V1/carts/mine/billing-address\nGET    /V1/carts/:cartId/coupons\nPUT    /V1/carts/:cartId/coupons/:couponCode\nDELETE /V1/carts/:cartId/coupons\nGET    /V1/guest-carts/:cartId/coupons\nPUT    /V1/guest-carts/:cartId/coupons/:couponCode\nDELETE /V1/guest-carts/:cartId/coupons\nGET    /V1/carts/mine/coupons\nPUT    /V1/carts/mine/coupons/:couponCode\nDELETE /V1/carts/mine/coupons\nPUT    /V1/carts/:cartId/order\nGET    /V1/carts/:cartId/totals\nPUT    /V1/guest-carts/:cartId/collect-totals\nGET    /V1/guest-carts/:cartId/totals\nGET    /V1/carts/mine/totals\nPUT    /V1/carts/mine/collect-totals\n\n\nSales\n\nGET    /V1/orders/:id\nGET    /V1/orders\nGET    /V1/orders/:id/statuses\nPOST   /V1/orders/:id/cancel\nPOST   /V1/orders/:id/emails\nPOST   /V1/orders/:id/hold\nPOST   /V1/orders/:id/unhold\nPOST   /V1/orders/:id/comments\nGET    /V1/orders/:id/comments\nPUT    /V1/orders/create\nPUT    /V1/orders/:parent_id\n* GET    /V1/orders/items/:id\n* GET    /V1/orders/items\nGET    /V1/invoices/:id\nGET    /V1/invoices\nGET    /V1/invoices/:id/comments\nPOST   /V1/invoices/:id/emails\nPOST   /V1/invoices/:id/void\nPOST   /V1/invoices/:id/capture\nPOST   /V1/invoices/comments\nPOST   /V1/invoices/\nGET    /V1/creditmemo/:id/comments\nGET    /V1/creditmemos\nGET    /V1/creditmemo/:id\nPUT    /V1/creditmemo/:id\nPOST   /V1/creditmemo/:id/emails\nPOST   /V1/creditmemo/:id/comments\nPOST   /V1/creditmemo\nGET    /V1/shipment/:id\nGET    /V1/shipments\nGET    /V1/shipment/:id/comments\nPOST   /V1/shipment/:id/comments\nPOST   /V1/shipment/:id/emails\nPOST   /V1/shipment/track\nDELETE /V1/shipment/track/:id\nPOST   /V1/shipment/\nGET    /V1/shipment/:id/label\nPOST   /V1/orders/\nGET    /V1/transactions/:id\nGET    /V1/transactions\n* POST /V1/order/:orderId/invoice\n* POST /V1/order/:orderId/ship\n* POST /V1/invoice/:invoiceId/refund  +  * POST /V1/order/:orderId/refund\n\n\nSalesRule\n\nGET    /V1/salesRules/:ruleId\nGET    /V1/salesRules/search\nPOST   /V1/salesRules\nPUT    /V1/salesRules/:ruleId\nDELETE /V1/salesRules/:ruleId\nGET    /V1/coupons/:couponId\nGET    /V1/coupons/search\nPOST   /V1/coupons\nPUT    /V1/coupons/:couponId\nDELETE /V1/coupons/:couponId\nPOST   /V1/coupons/generate\nPOST   /V1/coupons/deleteByIds\nPOST   /V1/coupons/deleteByCodes\n\n\nSearch\n\nGET    /V1/search\n\n\nStore\n\nGET    /V1/store/storeViews\nGET    /V1/store/storeGroups\nGET    /V1/store/websites\nGET    /V1/store/storeConfigs\n\n\nTax\n\nPOST   /V1/taxRates\nGET    /V1/taxRates/:rateId\nPUT    /V1/taxRates\nDELETE /V1/taxRates/:rateId\nGET    /V1/taxRates/search\nPOST   /V1/taxRules\nPUT    /V1/taxRules\nDELETE /V1/taxRules/:ruleId\nGET    /V1/taxRules/:ruleId\nGET    /V1/taxRules/search\nPOST   /V1/taxClasses\nGET    /V1/taxClasses/:taxClassId\nPUT    /V1/taxClasses/:classId\nDELETE /V1/taxClasses/:taxClassId\nGET    /V1/taxClasses/search\n\n",
      "url": "/guides/v2.0/rest/list.html"
    }
    ,
  
    "guides-v2-0-cloud-live-live-prot-html": {
      "title": "Protective block",
      "content": "Magento Commerce (Cloud) has a protective blocking feature that, under certain circumstances, restricts access to web sites with security vulnerabilities. We use this partial blocking method to prevent exploitation of known security vulnerabilities.\n\nOutdated software often contains exploits we protect against by partially blocking access to these sites.\n\nHow the protective block works\nMagento Commerce maintains a database of signatures of known security vulnerabilities in open-source software that are commonly deployed on our infrastructure. The security check analyzes only known vulnerabilities in open-source projects; it cannot examine customizations you write.\n\nWe analyze the code of your application:\n\n\n  When you push new code to Git\n  When new vulnerabilities are added to our database\n\n\nIf a critical vulnerability is detected in your application, it rejects the Git push.\n\nWe run two types of blocks:\n\n\n  \n    For development web sites, we run complete blocks.\n\n    The error message accompanying git push provides detailed information about the vulnerability.\n  \n  \n    For production web sites, we run a “partial block” that allows the site to stay mostly online.\n\n    Depending on the nature of the vulnerability, parts of a request, such as a query string, cookies or any additional headers, might be removed from GET requests. All other requests may be blocked entirely—this could apply to logging in, form submission, or product checkout.\n  \n\n\nUnblocking is automated upon resolution of the security risk. The block is removed soon after you apply a security upgrade that removes the vulnerability.\n\nOpt out of the protective block\nThe protective block is there to protect you against known vulnerabilities in the software you deploy on Magento Commerce.\n\nHowever, you can opt out of the protective block by adding the following to .magento.app.yaml:\n\npreflight:\n   enabled: false\n\n\nYou can also explicitly opt-out of some specific check as follows:\n\npreflight:\n   enabled: true\n   ignore_rules: [ \"drupal:SA-CORE-2014-005\" ]\n\n",
      "url": "/guides/v2.0/cloud/live/live-prot.html"
    }
    ,
  
    "guides-v2-0-cloud-live-live-sanity-check-html": {
      "title": "Build and deploy on local",
      "content": "Before pushing your code to your Starter or Pro Staging and Production environments, you should fully build on your local. Fully testing builds and deploys along with full site testing can reduce the risk of issues or delays for your final site deployment, and expose any issues early for debugging.\n\nThese tasks walk through:\n\n\n  Complete development on your local\n  Complete a full build and deploy process on your local (deploys to the associated active development environment)\n  Test fully before continuing deployment to Staging\n\n\nFor more information on the full five step process, see the Deployment process.\n\n\n  We highly recommend completing your testing in an Integration active environment and the Staging environment. Only complete final tests for going live in the Production environment. Your Staging environment is best for testing with code, data, and services including Fastly, New Relic, and others.\n\n\nUpdate composer if you add extensions\nIf you modified your composer.json to add modules, we recommend running the composer update command in a terminal. This command updates any dependencies in the composer.lock. During the build phase, we run composer install on a fresh clone of your Git branch of code to retrieve the latest dependencies.\n\nVerify all required files in Git\nYour Git branch must have the following files for building and deploying for your local and to Integration, Staging, and Production environments:\n\n\n  auth.json in the root Magento directory. This file includes the Magento authentication keys entered when creating the project. If you need to verify the file and settings, see Troubleshoot deployment.\n  config.local.php if you used Configuration Management for 2.1.X\n  config.php if you used Configuration Management for 2.2.X\n  .magento.app.yaml is updated and saved in the root directory\n  services.yaml is updated and saved in magento/\n  routes.yaml is updated and saved in magento/\n\n\nTest build your code locally before pushing\nSometimes you just want to test your build prior to pushing your code to Git. You can use a specific set of commands to build locally. The generated build files from this test build should not be pushed into Git. This is just a trial run to ensure no issues occur before pushing to Git. Remember, when you push to the remote Git branch, a full build and deploy process begins.\n\n\n  SSH into your local Magento workspace.\n  Move to another location to run your build. You should keep this build separate from your usual Git branch.\n  \n    Run the following command to build locally. The command builds the current project locally strictly to test the build without the full patching and commit process.\n\n     magento-cloud local:build\n    \n\n    For details, enter magento-cloud local:build --help.\n  \n  Watch for the results. A series of files will generate for the build. If you do not encounter errors, you can push code to the remote Git branch and continue.\n\n\nIf errors occur during the build, you can investigate and resolve the code issues. You should not commit the files from this build to Git.\n\nTo remove these test builds, you can use the magento-cloud local:clean command. For details, enter magento-cloud local:clean --help.\n\nPush code to Git and Integration\nBefore you continue, make sure you push all current code to the remote Cloud server so that, in event of issues, you can recover the state of the Magento application.\n\nTo prepare your code and branch:\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  To push code to your remote environment:\n\n  \n    If you haven’t already, change to your project root directory.\n    \n      Enter the following commands to complete code commits in a terminal:\n\n      git add -A &amp;&amp; git commit -m \"&lt;comment&gt;\"\ngit push origin &lt;branch name&gt;\n      \n    \n    The build and deploy phases begin. Wait for the deployment to complete.\n  \n\n  Build phase\n  During the build phase, we perform the following tasks:\n\n  \n    Apply patches distributed to all Magento Commerce (Cloud) accounts\n    Apply patches we provided specifically to you\n    Enable all modules to build\n    Compile code and the dependency injection configuration\n  \n\n  The build also checks for a configuration file. If the file exists, the static file deployment is also completed during the build stage. If not, it’s completed in the deployment stage.\n\n  Before you continue, you must know the file system path to any patch we provided specifically to you. Typically, hot fixes are in the &lt;Magento root dir&gt;/m2-hotfixes directory.\n\n  To build your site:\n\n  \n    \n      Apply patches distributed to all Magento Commerce (Cloud) accounts.\n\n      Enter the following command from the project root directory:\n\n      php vendor/magento/magento-cloud-configuration/patch.php\n      \n\n      Output includes the following:\n\n      [2016-11-30 15:05:15] Copying static.php to front-static.php\n[2016-11-30 15:05:15] Command:git apply /var/www/html/magento2/vendor/magento/magento-cloud-configuration/patches/000-MAGETWO-57719-2.1.2.patch\n[2016-11-30 15:05:15] Status:0\n[2016-11-30 15:05:15] Output:array (\n)\n[2016-11-30 15:05:15] Command:git apply /var/www/html/magento2/vendor/magento/magento-cloud-configuration/patches/MAGETWO-52660-scd-improvement.patch\n[2016-11-30 15:05:15] Status:0\n[2016-11-30 15:05:15] Output:array (\n)\n\n... more ...\n                    )\n      \n    \n    \n      Apply hot fixes and other patches provided to you:\n\n      git apply &lt;path to patch&gt;\n      \n\n      For example, to apply hot fixes:\n\n      git apply m2-hotfixes/&lt;patch file name&gt;\n      \n\n      If the m2-hotfixes directory is empty, skip this step.\n\n      If patches are present, output from this command is similar to the patches command.\n    \n    \n      Enable all modules:\n\n      php bin/magento module:enable --all\n      \n    \n    \n      Compile code and the dependency injection configuration:\n\n      php bin/magento  setup:di:compile\n      \n\n      This command can take several minutes to complete.\n\n      Messages similar to the following are displayed:\n\n      Compilation was started.\n0% 1 sec 54.0 MiB%message% 0/7 [&gt;---------------------------]\n0% 1 sec 54.0 MiBProxies code generation...\n0/7 [&gt;---------------------------]\n0% 1 sec 54.0 MiB\nProxies code generation... 1/7 [====&gt;-----------------------]  14% 1 sec 58.0 MiB\nRepositories code generation... 1/7 [====&gt;-----------------------]  14% 1 sec 58.0 MiB\nRepositories code generation... 2/7 [========&gt;-------------------]  28% 30 secs 176.0 MiB\n\n... more ...\nInterception cache generation... 7/7 [============================] 100% 5 mins 324.0 MiB\n      \n    \n  \n\n  If errors display, debug them if possible or open a support ticket to get additional assistance.\n\n  We strongly recommend you do all your testing in an integration or staging environment only, and not in production.\n\n  Deploy phase\n  We highly recommend having Magento already installed prior to deployment. During the deployment phase, we perform the following tasks:\n\n  \n    Install the Magento application if needed\n    If the Magento application is installed, upgrade components\n    Clear the cache\n    Set the Magento application for production mode\n  \n\n  To deploy your site:\n\n  \n    If you haven’t already, log in as or switch to the Magento file system owner.\n    Change to your project root directory.\n    \n      Enter the following command:\n\n      php bin/magento setup:upgrade\n      \n\n      We highly recommend having Magento already installed if you followed the First time deployment. If you haven’t installed the Magento application yet, use the magento setup:install command instead. Be advised, you may encounter issues with enabled modules on a fresh installation.\n    \n    \n      Clean the Magento cache:\n\n      php bin/magento cache:clean\n      \n    \n    \n      Set the Magento application for production mode:\n\n      php bin/magento deploy:mode:set production\n      \n    \n  \n\n  If errors display, debug them if possible, review logs, or open a support ticket to get additional assistance.\n\n  Next step\n  Prepare to deploy to Staging and Production\n\n",
      "url": "/guides/v2.0/cloud/live/live-sanity-check.html"
    }
    ,
  
    "guides-v2-0-cloud-live-live-html": {
      "title": "Go live and launch",
      "content": "When you have completed deployment and testing in Integration and Staging environments, you can start going live. First, you should complete all development and testing prior to touching Production. Feel ready to launch? Review our checklists, best practices, and final steps to go live.\n\nIf you checked this information prior to deploying and testing in Staging, consider reviewing the benefits of testing in Staging first in the next section. Staging is a near-production environment running on similar hardware, configurations, architecture, and services. It can reduce your downtime and make your extension, service, custom configurations, and merchant User Acceptance Testing vital components to releasing your sites and stores.\n\nInfo you need to go live\nYou need the following information to go live:\n\n\n  CNAME record information for configuring the DNS\n  List of all storefront domains to add to the certificate\n  SSL certificate if not using the shared-SSL (requires option purchase)\n\n\nAs part of Magento Commerce (Cloud) subscription, you have access to a shared Domain-Validated SSL (HTTPS) certificate that is issued by GlobalSign. This certificate is shared with other merchants and included for all Cloud accounts. If you want to deploy an Extended Validation SSL (not-shared) certificate for your company, this option can be purchased when you first sign-up with Magento Commerce. If you need to purchase this option, contact your account representative.\n\nWhy test fully in Integration and Staging?\nWe strongly recommend testing in these environments due to the complexity of your custom code, themes, Magento extensions, 3rd party integrations all working together to provide a single or multiple stores. Every deployment can differ between merchants. The following are common issues you can find early and solve before touching Production:\n\n\n  Staging supports all Production services, features, database data, technology stack, architecture, and more. It mirrors Production, which means if errors occur in Staging, you have a warning before it occurs in Production.\n  Extensions may need to be installed and configured in a specific order. Some extensions touch similar pieces of code in the back and front end, sometimes clashing and causing errors.\n  Extensions typically are heavily tested in Developer mode, not Production mode. When you move to Staging and use Production mode, you may find error and surprises between extensions, your custom code, and Magento.\n  Configurations and code may work great in your developer Integration environments and run into issues in Staging and Production. Working in your local doesn’t confirm it works perfectly in production.\n  Integration environments don’t have all the incredible services available in Staging and Production, like Fastly, New Relic, and Blackfire.\n  Fully test your site with a variety of tools in Staging for load, stress, performance, and site assets\n  Integration environments may only have databases populated with test data, not matching a production-like environment\n\n\nSet up Magento Security Scan Tool\nThe Magento Security Scan Tool enables you to regularly monitor your store websites and receive updates for security risks, malware, and unauthorized access. This is a free service available for all implementations and versions of Magento Commerce (Cloud). You access the tool through your Magento Marketplace account.\n\n\n  Monitor your sites security status\n  Increase your security monitoring with an optional SSH scan\n  Receive security updates and site specific notifications\n\n\nFor detailed instructions to set up and perform scans, see the Magento User Guide. Typically, you want to start using this tool as you enter UAT testing.\n\nEach site to be scanned must be registered through Magento Security Scan tab. This registration process includes acceptance of Magento’s disclaimer prior to scanning. You control both scan scheduling and the authorization of personnel to be notified when each scan is completed. Scans can be scheduled for either a specific, recurring date and time or on-demand as required.\n\nTo scan your site:\n\n\n  Access your Magento Marketplace account.\n  Click the Security Scan tab and select Go to Security Scan.\n  In the Actions column for the site, select Run Scan. A notification status displays the scheduled scan.\n\n\nTo review the report:\n\n\n  When the report completes, a notification displays.\n  In the site row, select the report you want to view from the Reports column. The order is latest to oldest.\n\n\nThe report lists issues including Failed Scans, Unidentified Results, and Successful Scans. Each entry provides detailed information for the scan, any issues to investigate, and actions to take. Some of these actions may require downloading and installing security patches. Make sure to add those via branches and Git pushes through your local.\n\nScan results include a general label that describes whether a site passed or failed plus detailed information about the checks performed. Failed indicates that the website contains a serious vulnerability, while unidentified suggests that a deeper review is required by your team or hosting provider to determine if further action is required. We also provide suggested remediation steps for each failed security test. Security scan results are protected and viewable only by the registered user, and notifications of scan completion are restricted to the users designated in the site registration process.\n\nReady to go live\nYou are ready to start go live steps:\n\n\n  Go live checklist\n  Launch steps\n\n",
      "url": "/guides/v2.0/cloud/live/live.html"
    }
    ,
  
    "guides-v2-0-config-guide-log-log-db-html": {
      "title": "Example&amp;mdash;logging database activity",
      "content": "Example—logging database activity\nTo log database activity, use Magento\\Framework\\DB\\LoggerInterface, which has two implementations:\n\n\n  Logs nothing (default): Magento\\Framework\\DB\\Logger\\Quiet\n  Logs to the Magento var/log directory: Magento\\Framework\\DB\\Logger\\File\n\n\nTo change the preference to \\Magento\\Framework\\DB\\Logger\\File, edit your app/etc/di.xml.\n\nFirst, change the default preference\n\n&lt;preference for=\"Magento\\Framework\\DB\\LoggerInterface\" type=\"Magento\\Framework\\DB\\Logger\\Quiet\"/&gt;\n\n\nto\n\n&lt;preference for=\"Magento\\Framework\\DB\\LoggerInterface\" type=\"Magento\\Framework\\DB\\Logger\\File\"/&gt;\n\n\nAfter that, add the following block to configure file-based logging:\n\n&lt;type name=\"Magento\\Framework\\DB\\Logger\\File\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"logAllQueries\" xsi:type=\"boolean\"&gt;true&lt;/argument&gt;\n        &lt;argument name=\"debugFile\" xsi:type=\"string\"&gt;log/db.log&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n\n",
      "url": "/guides/v2.0/config-guide/log/log-db.html"
    }
    ,
  
    "guides-v2-0-config-guide-log-log-intro-html": {
      "title": "Custom logging",
      "content": "Logging overview\nLogs provide visibility into Magento system processes; for example, debugging information that assists you with understanding when an error occurred or what lead to the error.\n\nThis topic focuses on file-based logging, although Magento provides the flexibility to store logs in the database as well.\n\nWe recommend using centralized application logging for the following reasons:\n\n\n  \n    It allows storage of logs on a server other than the application server and decreases disk I/O operations, simplifying support of the application server.\n  \n  \n    It makes processing of logs data more effective by using special tools without impact to a production server (for example, logstash, logplex, or fluentd).\n  \n\n\n\n  Magento does not recommend or endorse any particular logging solution.\n\n\nMagento PSR-3 compliance\nThe PSR-3 standard defines a common PHP interface for logging libraries. The main goal of PSR-3 is to allow libraries to receive a Psr\\Log\\LoggerInterface object and write logs to it in a simple and universal way.\n\nThis provides the ability for the implementation to be replaced easily without worry that such replacement may break the application code. It also guarantees a custom component will work even when the Magento log implementation is changed in a future version of the system.\n\nNext\nMagento logging in more detail\n",
      "url": "/guides/v2.0/config-guide/log/log-intro.html"
    }
    ,
  
    "guides-v2-0-config-guide-log-log-magento-html": {
      "title": "Magento logging in more detail",
      "content": "Monolog\nMagento 2 complies with the PSR-3 standard. By default, Magento uses Monolog. Monolog implemented as a preference for Psr\\Log\\LoggerInterface in the Magento application di.xml.\n\nMonolog is a popular PHP logging solution with a wide range of handlers that enable you to build advanced logging strategies. Following is a summary of how Monolog works.\n\nA Monolog logger is a channel that has its own set of handlers. Monolog has a large number of handlers, including:\n\n\n  Log to files and syslog\n  Send alerts and e-mails\n  Log specific servers and networked logging\n  Logging in development (integration with FireBug and ChromePHP, among others)\n  Log to the database\n\n\nEach handler can either process the input message and stop propagation or pass the control to the next handler in a chain.\n\nLog messages can be processed in many different ways. For example, you can store all debug information into a file on disk, put the messages with higher log levels into a database, and finally send messages with log level “critical” by e-mail.\n\nOther channels can have a different set of handlers and logic.\n\nGet started with logging\nTo start working with a logger, you must get a \\Psr\\Log\\LoggerInterface instance. One way to do that is illustrated in our database logging example.\n\nAnother way follows:\n\nclass SomeModel\n {\n     private $logger;\n\n     public function __construct(\\Psr\\Log\\LoggerInterface $logger)\n     {\n         $this-&gt;logger = $logger;\n     }\n\n     public function doSomething()\n     {\n         try {\n             //do something\n         } catch (\\Exception $e) {\n             $this-&gt;logger-&gt;critical('Error message', ['exception' =&gt; $e]);\n         }\n     }\n }\n\nThe preceding example shows that SomeModel receives a \\Psr\\Log\\LoggerInterface object using constructor injection. In a method doSomething, if some error occurred, it’s logged to a method critical ($this-&gt;logger-&gt;critical($e);).\n\nRFC 5424 defines eight log levels (debug, info, notice, warning, error, critical, alert, and emergency).\n\nNext\nExample—logging database activity\n",
      "url": "/guides/v2.0/config-guide/log/log-magento.html"
    }
    ,
  
    "guides-v2-0-config-guide-bootstrap-mage-dirs-html": {
      "title": "Customize base directory paths (MAGE_DIRS)",
      "content": "Introduction to Magento base directory paths\nThe MAGE_DIRS environment variable enables you to specify custom base directory paths and fragments of base URLs that are used by the Magento application to build absolute paths to various files or for generating URLs.\n\nSet MAGE_DIRS\nSpecify an associative array where keys are constants from \\Magento\\App\\Filesystem\\DirectoryList and values are absolute paths of directories or their URL paths, respectively.\n\nYou can set MAGE_DIRS in any of the following ways:\n\n\n  Set the value of bootstrap parameters\n  Use a custom entry point script such as the following:\n\n\n\tuse Magento\\Framework\\App\\Filesystem\\DirectoryList;\n\tuse Magento\\Framework\\App\\Bootstrap;\n \n\trequire __DIR__ . '/app/bootstrap.php';\n\t$params = $_SERVER;\n\t$params[Bootstrap::INIT_PARAM_FILESYSTEM_DIR_PATHS] = [\n       DirectoryList::CACHE =&gt; [DirectoryList::PATH =&gt; '/mnt/nfs/cache'],\n       DirectoryList::MEDIA =&gt; [DirectoryList::PATH =&gt; '/mnt/nfs/media', DirectoryList::URL_PATH =&gt; ''],\n\t];\n\n\t$params[Bootstrap::INIT_PARAM_FILESYSTEM_DIR_PATHS] = [\n\tDirectoryList::PUB =&gt; [DirectoryList::URL_PATH =&gt; ''],\t\n\tDirectoryList::MEDIA =&gt; [DirectoryList::URL_PATH =&gt; 'media'],\n\tDirectoryList::STATIC_VIEW =&gt; [DirectoryList::URL_PATH =&gt; 'static'],\n\tDirectoryList::UPLOAD =&gt; [DirectoryList::URL_PATH =&gt; 'media/upload'],\n\t];\n\t$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $params);\n\t/** @var \\Magento\\Framework\\App\\Http $app */\n\t$app = $bootstrap-&gt;createApplication('Magento\\Framework\\App\\Http');\n\t$bootstrap-&gt;run($app);\n\t\n\nThe preceding example sets paths for [cache] and [media] directories to /mnt/nfs/cache and /mnt/nfs/media, respectively.\n",
      "url": "/guides/v2.0/config-guide/bootstrap/mage-dirs.html"
    }
    ,
  
    "guides-v2-0-config-guide-bootstrap-mage-profiler-html": {
      "title": "Enable profiling (MAGE_PROFILER)",
      "content": "Magento profiling enables you to:\n\n\n  \n    Enable a built-in profiler.\n\n    You can use a built-in profiler with Magento to perform tasks such as analyzing performance. (The nature of profiling depends on the analytical tools you use. We support multiple formats, including HTML.)\n  \n  \n    Displays dependency graphs on a Magento page. A dependency graph is a list of object dependencies and all of their all their dependencies, and all the dependencies for those dependencies, and so on.\n\n    You should be particularly interested in the list of unused dependencies, which are objects that were created because they were requested in some constructor, but were never used (that is, none of their methods were called). As a result, processor time and memory spent to create these dependencies are wasted.\n  \n\n\nMagento provides the base functionality in Magento\\Framework\\Profiler.\n\nSet MAGE_PROFILER\nMAGE_PROFILER supports the following values:\n\n\n  \n    1 to enable a specific profiler’s output.\n\n    You can also use one of the following values to enable a specific profiler:\n\n    \n      csvfile which uses Magento\\Framework\\Profiler\\Driver\\Standard\\Output\\Csvfile\n      Any other value (except 2), including an empty value, which uses Magento\\Framework\\Profiler\\Driver\\Standard\\Output\\Html\n    \n  \n  \n    2 to enable dependency graphs.\n\n    Dependency graphs typically display at the bottom of a page. The following figure shows portion of the output:\n\n    \n  \n\n\nYou can set the value of MAGE_PROFILER in any of the ways discussed in Set the value of bootstrap parameters.\n",
      "url": "/guides/v2.0/config-guide/bootstrap/mage-profiler.html"
    }
    ,
  
    "guides-v2-0-config-guide-bootstrap-magento-bootstrap-html": {
      "title": "Magento application initialization and bootstrap",
      "content": "Overview of bootstrapping\nTo run the Magento application, the following actions are implemented in index.php:\n\n\n  Include app/bootstrap.php which performs essential initialization routines, such as error handling, initializing the autoloader, setting profiling options, setting the default timezone, and so on.\n  Create an instance of \\Magento\\Framework\\App\\Bootstrap. \n  Create a Magento application instance (\\Magento\\Framework\\AppInterface).\n  Run Magento\n\n\nBootstrap run logic\n\nThe bootstrap object uses the following algorithm to run the Magento application:\n\n\n  Initializes the error handler.\n  Creates the object manager and basic shared services that are used everywhere and are affected by the environment. The environment parameters are injected properly into these objects.\n  Asserts that maintenance mode is not enabled; otherwise, terminates.\n  Asserts that the Magento application is installed; otherwise, terminates.\n  \n    Starts the Magento application.\n\n    Any uncaught exception during application launch is automatically passed back to Magento in the catchException() method which you can use to handle the exception. The latter must return either true or false:\n\n    \n      If true: Magento handled exception successfully. No need to do anything else.\n      If false (or any other empty result): Magento did not handle the exception. The bootstrap object performs the default exception handling subroutine.\n    \n  \n  Sends the response provided by the application object.\n\n\n\n\n  The assertions that the Magento application is installed and not in maintenance mode is the default behavior of the \\Magento\\Framework\\App\\Bootstrap class. You can modify it using an entry point script when creating the bootstrap object.\n\n\nSample entry point script that modifies the bootstrap object:\n\nuse Magento\\Framework\\App\\Bootstrap;\nrequire __DIR__ . '/app/bootstrap.php';\n$params = $_SERVER;\n$params[Bootstrap::PARAM_REQUIRE_MAINTENANCE] = true; // default false\n$params[Bootstrap::PARAM_REQUIRE_IS_INSTALLED] = false; // default true\n$bootstrap = Bootstrap::create(BP, $params);\n/** @var \\Magento\\Framework\\App\\Http $app */\n$app = $bootstrap-&gt;createApplication('Magento\\Framework\\App\\Http');\n$bootstrap-&gt;run($app);\n\nDefault exception handling\nThe bootstrap object specifies how the Magento application handles uncaught exceptions as follows:\n\n\n  In developer mode, displays the exception as-is.\n  In any other mode, attempts to log exception and display a generic error message.\n  Terminates Magento with error code 1\n\n\nEntry point applications\nWe have the following entry point applications (that is, applications defined by Magento that are used by the web server as a directory index):\n\n\n  HTTP entry point\n  Static resource entry point\n  Media resource entry point\n\n\nHTTP entry point\n\\Magento\\Framework\\App\\Http operates as follows:\n\n\n  Determines the application area.\n  Starts the front controller and routing systems in order to find and execute a controller action.\n  Uses an HTTP response object to return result obtained from the controller action.\n  Error handling (in the following priority order):\n    \n      If you’re using developer mode:\n        \n          If the Magento application is not installed, redirect to Setup Wizard.\n          If the Magento application is installed, display an error and HTTP status code 500 (Internal Server Error).\n        \n      \n      If the Magento application is in maintenance mode, display a user-friendly “Service Unavailable” landing page with HTTP status code 503 (Service Temporary Unavailable).\n      If the Magento application is not installed, redirect to Setup Wizard.\n      If the session is invalid, redirect to the home page.\n      If there is any other application initialization error, display a user-friendly “Page Not Found” page with HTTP status code 404 (Not Found).\n      On any other error, display a user-friendly “Service Unavailable” page with HTTP response 503 and generate an error report and display its ID on the page.\n    \n  \n\n\nStatic resource entry point\n\\Magento\\Framework\\App\\StaticResource is an application for retrieving static resources (for example, CSS, JavaScript, and images). It postpones any actions with a static resource until the resource is requested.\n\n\n\n  The entry point for static view files is not used in production mode to avoid potential exploits on the server. In production mode, the Magento application expects that all necessary resources already exist in the &lt;your Magento install dir&gt;/pub/static directory.\n\n\nIn default or developer mode, a request for a non-existent static resource is redirected to the static entry point according to the rewrite rules specified by the appropriate .htaccess.\nWhen the request is redirected to the entry point, the Magento application parses the requested URL based on retrieved parameters and finds the requested resource.\n\n\n  In developer mode, the content of the file is returned so that every time the resource is requested, the returned content is up to date.\n  \n    In default mode, the retrieved resource is published so it is accessible by the previously requested URL.\n\n    All future requests for the static resource are processed by the server the same as static files; that is, without involving the entry point. If it’s necessary to synchronize published files with original ones, the pub/static directory should be removed; as a result, files are automatically republished with the next request.\n  \n\n\nMedia resource entry point\nMagento\\MediaStorage\\App\\Media retrieves media resources (that is, any files uploaded to media storage) from the database. It is used whenever the database is configured as a media storage.\n\n\\Magento\\Core\\App\\Media attempts to find the media file in the configured database storage and write it into the pub/static directory, then return its contents. On error, it returns an HTTP 404 (Not Found) status code in the header with no contents.\n\nRelated topics\nThis topic discussed the basics of Magento application initialization and bootstrapping. To find out how to set bootstrap environment variables, see one of the following topics:\n\n\n  Customize base directory paths (MAGE_DIRS)\n  Set the mode (MAGE_MODE)\n  Enable an HTML profiler (MAGE_PROFILER)\n\n",
      "url": "/guides/v2.0/config-guide/bootstrap/magento-bootstrap.html"
    }
    ,
  
    "guides-v2-0-magento-devdocs-whatsnew-html": {
      "title": "What's new on DevDocs",
      "content": "This page contains recent changes that we think you’d like to know about. We exclude from this list proofreading, spelling checks, and all minor updates.\n\nFebruary 2018\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Added upgrade path for Magento Cloud metapackage.\n      2.1.x, 2.2.x\n      Updated\n      Feb 23\n    \n    \n      Added reference and examples for two, new environment variables—CACHE_CONFIGURATION and SESSION_CONFIGURATION—that help with customizing Redis storage and default caching configuration.\n      2.1.x, 2.2.x\n      Updated\n      Feb 20\n    \n    \n      Listed the adminhtml option in the Observers best practices topic.\n      2.x\n      Updated\n      Feb 09\n    \n    \n      The MFTF-2 Guide has been added to Magento 2.2 documentation\n      2.2.x\n      Updated\n      Feb 09\n    \n    \n      Learn how to customize and extend the acceptance functional tests using Merging in the MFTF 2.\n      2.3 pre-release\n      New\n      Feb 07\n    \n    \n      We added a new troubleshooting topic to help customers resolve an issue with message queues.\n      2.2.x\n      New\n      Feb 07\n    \n    \n      We added a new troubleshooting topic to help customers identify and resolve site availability issue related to Redis.\n      2.x\n      New\n      Feb 01\n    \n  \n\n\nJanuary 2018 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Updated documentation about how to create a payment token.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      Release notes for Magento Commerce (Cloud) ece-tools v2002.0.8.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      We added instructions for managing message queues on Magento Commerce (Cloud) using the CRON_CONSUMERS_RUNNER environment variable.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      We merged vendor/magento/ece-patches with vendor/magento/ece-tools v2002.0.8. You no longer need to update the vendor/magento/ece-patches package separately.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      You can now manage build and deploy actions across all your environments—including Pro Staging and Production—using a .magento.env.yaml file.\n      2.2.x\n      New\n      Jan 31\n    \n    \n      You can now unlock specific stuck cron jobs in Magento Commerce (Cloud) with the cron:unlock command instead of stopping and re-launching all of them.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      The deployment process creates backup files for the configuration files. You can restore the configuration files using the restore command.\n      2.2.x\n      Updated\n      Jan 31\n    \n    \n      MFTF 1.0: Updated descriptions for the before and after attributes in Actions\n      2.2.x\n      Updated\n      Jan 23\n    \n    \n      Advanced Reporting: added more details to Prerequisites\n      2.2.x\n      Updated\n      Jan 22\n    \n    \n      We updated the quarterly contributors page for Q4 2017.\n      2.x\n      Updated\n      Jan 18\n    \n    \n      MFTF: Updated actions and added Changelog\n      2.2.x\n      Updated\n      Jan 12\n    \n    \n      Added information about the index prefix when configuring Elasticsearch, which is necessary when using a single Elasticsearch instance with multiple Magento installations, like Staging and Production environments.\n      2.1.x, 2.2.x\n      Updated\n      Jan 10\n    \n    \n      Created a new topic describing different scenarios for working with environment variables to the Magento Commerce (Cloud) guide. For example, connecting an existing search or AMQP-based service to your Magento site.Added guidance for using these variables in the Set up RabbitMQ and Set up Elasticsearch topics.\n      2.1.x, 2.2.x\n      New and Updated\n      Jan 10\n    \n    \n      Added Magento Shipping release notes\n      2.2.x\n      New\n      Jan 05\n    \n    \n      We added code examples to help explain the following Technical Guidelines related to class design:- 2.4. All dependencies MUST be requested by the most generic type that is required by the client object.- 2.6. Inheritance SHOULD NOT be used. Composition SHOULD be used for code reuse.- 2.1.4 Temporal coupling MUST be avoided.\n      2.x\n      Updated\n      Jan 03\n    \n  \n\n\n\nDecember 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Added details about backward incompatible changes between 2.0.0 and 2.2.0 in Open Source and Commerce\n      2.2.x\n      Updated\n      Dec 24\n    \n    \n      Action Groups in the MFTF\n      2.2.x\n      New\n      Dec 22\n    \n    \n      Added a new section in the Magento Commerce (Cloud) guide for release notes related to the ece-patches Composer package.\n      2.2.x\n      New, Updated\n      Dec 20\n    \n    \n      Published release notes for the Magento Commerce (Cloud) ece-tools 2002.0.7 Composer package.\n      2.2.x\n      Updated\n      Dec 20\n    \n    \n      Added a new topic about setting up the Bitbucket integration for Magento Commerce (Cloud).\n      2.x\n      New\n      Dec 18\n    \n    \n      You must prepend environment variables with env: when using the Magento Commerce (Cloud) Project Web Interface to override configuration settings.\n      2.x\n      Updated\n      Dec 14\n    \n    \n      Advanced reporting: Overview, Modules, Data collection, Report XML\n      2.2.x\n      New\n      Dec 13\n    \n    \n      Added info about backward incompatible changes (Open Source 2.1.10 - 2.1.11 and Commerce 2.1.10-2.1.11; Open Source 2.2.1 - 2.2.2 and Commerce 2.2.1-2.2.2; B2B)\n      2.1.x, 2.2.x\n      Updated\n      Dec 13\n    \n    \n      Magento Functional Testing Framework Guide\n      2.2.x\n      New\n      Dec 08\n    \n    \n      Instant Purchase module\n      2.2.x\n      New\n      Dec 07\n    \n    \n      Revised guidance on which environments are limited to 5-minute cron intervals in the Magento Commerce (Cloud) guide. See Configure cron settings in the Magento Admin for more information.\n      2.2.x\n      Updated\n      Dec 06\n    \n    \n      Added a new topic to the Magento Commerce (Cloud) guide about configuring email and Slack notifications for build/deploy actions in an environment.\n      2.2.x\n      New\n      Dec 06\n    \n    \n      Updated the following Magento Commerce (Cloud) topics to include details about static content compression during build/deploy phases:- Configuration Management- Deployment process\n      2.2.x\n      Updated\n      Dec 06\n    \n    \n      Magento Commerce (Cloud) will now auto-generate an app/etc/config.php file if it doesn’t detect one in your project directory during the build phase. Updated references to configuration management in the Deployment process topic.\n      2.2.x\n      Updated\n      Dec 06\n    \n    \n      Replaced references to the mysqldump command with the new vendor/bin/ece-tools db-dump CLI command for Staging and Production environments in the Magento Commerce (Cloud) guide\n      2.2.x\n      Updated\n      Dec 06\n    \n    \n      Tech guidelines: Added strict mode requirement 1.3.1\n      2.2.x\n      Updated\n      Dec 05\n    \n  \n\n\n\nNovember 2017 \n  \n    \n      Added a new troubleshooting section to the Magento Commerce (Cloud) cron topic describing how to reset Magento cron jobs\n      2.2.x\n      Updated\n      Nov 30\n    \n    \n      Revised and added new content for Magento Commerce (Cloud) for custom Fastly VCLs including Custom Fastly VCL snippets, Custom whitelist VCL, Custom blacklist VCL, Custom extend Admin timeout VCL, Custom redirect to Wordpress VCL, and Custom block bad referer VCL.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Nov 29\n    \n    \n      Update content for Magento Commerce (Cloud) for Composer commands and files, add new content for Git, added Security Scan Tool info to Go live and launch, add .gitignore info to Project structure, add notes to Patch Magento Commerce (Cloud), update information for upgrading Fastly in Upgrade Magento Commerce (Cloud), and updated redirects\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 29\n    \n    \n      Updated the Devdocs Quarterly Contributors page for Q3 2017\n       \n      Updated\n      Nov 29\n    \n    \n      Updated Magento Commerce (Cloud) content for MS SQL Server drivers in Configure your environments\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 27\n    \n    \n      Updated and added content for Magento Commerce (Cloud) including Theme troubleshooting, POP locations for Set up Fastly, notes to Set up cron jobs, security for Manage branches with the Project Web Interface, worker information for .magento.app.yaml, and branch information in Pro architecture\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 27\n    \n    \n      Update troubleshooting content for EAV and extension attributes\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 27\n    \n    \n      Updated Magento Commerce (Cloud) for Import existing code into a project, Prepare your existing Magento Commerce code, Import code and data to Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 22\n    \n    \n      Added detailed backward incompatible changes descriptions for deltas of minor releases (Open Source 2.0.0 - 2.1.0 and 2.1.0-2.2.0; Commerce  2.0.0 - 2.1.0 and 2.1.0-2.2.0)\n      2.1.x, 2.2.x\n      Updated\n      Nov 21\n    \n    \n      Removed detailed backward incompatible changes for deltas 2.0.7-2.1.0 and 2.1.9-2.2.0\n      2.1.x, 2.2.x\n      Updated\n      Nov 17\n    \n    \n      Updated the recommended Fastly module version 1.2.33 for Magento Commerce (Cloud): Fastly, Technologies and requirements, and Magento Commerce (Cloud) third party licenses\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 15\n    \n    \n      Updated content for Magento Commerce (Cloud) including Configuration Management for 2.1.X and 2.2.X, Deployment Process 2.0.X, 2.1.X, and 2.2.X\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 14\n    \n    \n      Updated Set up Fastly and Fastly troubleshooting for Magento Commerce (Cloud) for handling existing Fastly accounts\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 14\n    \n    \n      Updated how to Configure Xdebug for Magento Commerce (Cloud).\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 13\n    \n    \n      Updated Subscriptions and plans with information on options you can purchase including AWS Managed VPN Connection Service access\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 13\n    \n    \n      Published backward incompatible changes: Open Source 2.0.16-2.0.17, Open Source 2.1.9-2.1.10, Open Source 2.2.0-2.2.1 and Commerce 2.0.16-2.0.17, Commerce 2.1.9-2.1.10, Commerce 2.2.0-2.2.1\n      2.0.x, 2.1.x, 2.2.x\n      Updated\n      Nov 09\n    \n    \n      Updated Set up Magento B2B with additional documentation links and error message updates for Magento Commerce (Cloud)\n      2.2.x\n      Updated\n      Nov 09\n    \n    \n      Updated Magento Commerce (Cloud) information for Blackfire.io module enablement and environment naming and New Relic APM for their university information\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 09\n    \n    \n      Added the ability to open a search results page when searching with the top bar. When entering a search term or phrase on any page, hit enter to open a full results page with faceted search options.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 07\n    \n    \n      Updated Magento application environment variables and Deployment process with scopes and SCD_STRATEGY variable for Magento Commerce (Cloud) 2.2.1\n      2.2.x\n      Updated\n      Nov 07\n    \n    \n      Updated New Relic APM license and environment information for Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 06\n    \n    \n      Update relationship name for RabbitMQ service for Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 06\n    \n    \n      Update Magento Commerce (Cloud) content for deploy commands in Deploy code and migrate static files and datafor new and existing Pro plans and Magento application environment variables\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 06\n    \n    \n      Updated Fastly troubleshooting and supported features for Magento Commerce (Cloud) in Fastly and Fastly troubleshooting\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Nov 03\n    \n  \n\n\n\nOctober 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Added guideline on mocking auto-generated factories in Unit tests\n      2.0.x, 2.1.x\n      Updated\n      Oct 31\n    \n    \n      Updated Magento Commerce (Cloud) content for Fastly including Fastly, Set up Fastly, Custom Fastly VCL snippets, and Troubleshoot Fastly\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 30\n    \n    \n      Add B2B module set up information for Magento Commerce (Cloud)\n      2.2.x\n      New\n      Oct 27\n    \n    \n      Update SSH tunneling info to Magento Commerce (Cloud) in SSH and sFTP and Manage branches with the CLI.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 25\n    \n    \n      Update database troubleshooting for Magento Commerce (Cloud) in Migrate and deploy static files and data for 2.1 and 2.2\n      2.1.x, 2.2.x\n      Updated\n      Oct 24\n    \n    \n      Add new content for trial Onboarding Portal for Magento Commerce (Cloud) including Subscription and plans, Onboarding tasks, Onboarding Portal management, Prepare project environments, and Welcome to Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Oct 23\n    \n    \n      Updated content for Magento Commerce (Cloud) for the updated Pro projects in Manage your project, Add Staging and Production to Pro projects, Deploy your store, Deployment process, Prepare to deploy to Staging and Production, and Test deployment\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 20\n    \n    \n      Added more information about docroot and created a new tutorial for modifying your web server’s docroot to enhance the security of your Magento installation\n      2.x\n      Updated, New\n      Oct 18\n    \n    \n      Update Magento Commerce (Cloud) content for new features for Pro plan: Manage your project, Add Staging and Production to Pro projects, Configure your project, Create and manage users, Manage branches with the Interface, Magento Cloud CLI reference, Welcome to Magento Commerce (Cloud), Starter architecture, and Pro architecture\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 18\n    \n    \n      Update Magento Commerce (Cloud) content for Starter develop and deploy workflow, Pro develop and deploy workflow, Install Magento, Configuration management and Example of managing system-specific settings, Upgrade Magento Commerce (Cloud), and Welcome to Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 17\n    \n    \n      Add cron and sFTP content for Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Oct 12\n    \n    \n      Added overview of DocBlock annotations usage in integration tests\n      2.0.x, 2.1.x, 2.2.x\n      New\n      Oct 11\n    \n    \n      Update Magento Commerce (Cloud) content for Prepare project environments, First-time local development setup, Clone and branch the project, Deployment process, and Magento application environment variables\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 11\n    \n    \n      Published backward incompatible changes between 2.0.15 and 2.0.16 versions in Open Source and Commerce\n      2.0.x\n      Updated\n      Oct 10\n    \n    \n      Update Magento Commerce (Cloud) 2.2 Release Notes with changes in deployment\n      2.2.x\n      Updated\n      Oct 06\n    \n    \n      Updated Magento Commerce (Cloud) content for services.yaml, Elasticsearch, Solr, Redis, MySQL, and RabbitMQ\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Oct 06\n    \n    \n      Added a new option to the bin/magento migrate:data command in the Migration Guide.Added an example of configuring the Data Migration Tool to use TLS (e.g., private/public keys) to connect to MySQL in the Migration Guide.\n      2.2.x\n      Updated\n      Oct 03\n    \n  \n\n\n\nSeptember 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Update Admin account password change on project provision and creation for Magento Commerce (Cloud)\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Sep 27\n    \n    \n      Published backward incompatible changes between 2.2.0 and 2.1.9 versions in Open Source and Commerce\n      2.2.x\n      Updated\n      Sep 27\n    \n    \n      Add third party license information for Magento Commerce (Cloud) 2.0.X, 2.1.X, and 2.2\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Sep 27\n    \n    \n      Added new topics for installing any extension from the command line and installing the B2B extension specifically\n      2.2.x\n      New\n      Sep 26\n    \n    \n      Updated Magento Commerce (Cloud) 2.2 content for upgrade instructions, Configuration Management and Pipeline Deployment, Magento application variables, .magento.app.yaml, and requirements\n      2.2.x\n      Updated\n      Sep 26\n    \n    \n      Updated Fastly snippet examples and process for adding new VCL snippets\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Sep 20\n    \n    \n      HHVM compatibility removed in tech-stack.\n      2.2.x\n      Updated\n      Sep 14\n    \n    \n      Updated backward incompatible changes after 2.2.0 RC3.0 in Open Source and Commerce\n      2.2.x\n      Updated\n      Sep 14\n    \n    \n      Added a rule set for the PHP_CodeSniffer\n      2.2.x\n      Updated\n      Sep 13\n    \n    \n      Added troubleshooting information for Redis.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Sep 11\n    \n    \n      Updated database dump commands for patching and upgrading Magento Commerce Cloud, and for Migrate and deploy content.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Sep 08\n    \n    \n      Updated custom Fastly VCL snippet information\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      Updated\n      Sep 08\n    \n    \n      Added troubleshooting information for generating and adding sitemap.xml and robots.txt.\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Sep 08\n    \n    \n      Updated content for Configuration Management and corresponding examples for in Magento Commerce (Cloud).\n      2.2.x\n      Updated\n      Sep 08\n    \n    \n      VersioningCodebase ChangesModule version dependency\n      2.x\n      New and Updated\n      Sep 05\n    \n    \n      Updated backward incompatible changes after 2.2.0 RC2.3 in Open Source and Commerce\n      2.2.x\n      Updated\n      Sep 04\n    \n    \n      Added information for Magento Commerce (Cloud) Starter architecture and development and deploy workflow, and Pro architecture and development and deploy workflow\n      2.0.x, 2.1.x, 2.2.x\n      Updated\n      Sep 01\n    \n    \n      Updated information on Magento encryption keys\n      2.0.x, 2.1.x, 2.2.x\n      Updated\n      Sep 01\n    \n  \n\n\n\nAugust 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Added explanation of AggregatedFieldDataConverter\n      2.2.x\n      Updated\n      Aug 30\n    \n    \n      Added information for Fastly set up, custom VCL snippets, and troubleshooting\n      2.0.x, 2.1.x, 2.2.x, 2.x\n      New\n      Aug 28\n    \n    \n      Added backward incompatible changes for 2.2.0 RC2.2 in Open Source and Commerce\n      2.2.x\n      Updated\n      Aug 28\n    \n    \n      Added backward incompatible changes for 2.2.0 RC2.1 in Open Source and Commerce\n      2.2.x\n      Updated\n      Aug 22\n    \n    \n      Frontend Product RepositoryRender prices on frontend with Ui componentAdded backward incompatible changesUpdated the list of REST endpoints\n      2.2.x\n      New and Updated\n      Aug 21\n    \n    \n      Rendering prices with UI ComponentsFrontend Product Repository\n      2.2.x\n      New\n      Aug 21\n    \n    \n      Elasticsearch update\n      2.2.x\n      Updated\n      Aug 21\n    \n    \n      Added backward incompatible changes for 2.2.0 RC2.0 in Open Source and Commerce\n      2.2.x\n      Updated\n      Aug 18\n    \n    \n      Added Composer-based installation instructions for 2.2.0 RC 2.0.\n      2.2.x\n      Updated\n      Aug 16\n    \n    \n      Updated backward incompatible changes\n      2.2.x\n      Updated\n      Aug 14\n    \n    \n      Updated docs about config.php being in .gitignore\n      2.2.x\n      Updated\n      Aug 11\n    \n    \n      Major revisions for deployment content\n      2.0.x, 2.1.x, 2.2.x\n      Updated\n      Aug 11\n    \n    \n      Added backward incompatible changes for delta of 2.1.8 and 2.1.7 versions in Open Source and Commerce\n      2.1.x\n      Updated\n      Aug 10\n    \n    \n      Added a new topic describing how to install Magento 2 on an nginx web server (Ubuntu 16 and CentOS 7).\n      2.x\n      New\n      Aug 08\n    \n    \n      Added backward incompatible changes for 2.2.0 RC1.8 in Open Source and Commerce\n      2.2.x\n      Updated\n      Aug 07\n    \n    \n      Migrating data to Cloud: add triggers to DB dump command\n      2.x\n      Updated\n      Aug 03\n    \n  \n\n\n\nJuly 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Added generated BICs for delta RC1.6-RC1.5\n      2.2.x\n      Updated\n      Jul 31\n    \n    \n      Migration Best Practices: use a copy of your DB when testing migrationMigration Plan: recommendations on system upgrade, dry run, cron jobs, changes in migrated dataData Migration Tool Preconditions: avoid creating new entities in Magento 2 before migration\n      2.x\n      Updated\n      Jul 28\n    \n    \n      Added generated BICs for delta RC1.5-RC1.4\n      2.2.x\n      Updated\n      Jul 24\n    \n    \n      Technical Guidelines 2.2\n      2.2.x\n      New\n      Jul 21\n    \n    \n      Added BICs for delta Magento CE 2.2.0 RC1.4-RC1.3Added BICs for delta Magento EE 2.2.0 RC1.4-RC1.3\n      2.2.x\n      Updated\n      Jul 17\n    \n    \n      Backward compatible changes for delta Magento 2.2.0 RC1.3 and RC1.2\n      2.2.x\n      Updated\n      Jul 12\n    \n    \n      Fix code example on the video tutorial page\n      2.x\n      Updated\n      Jul 10\n    \n    \n      Cron groups: run twice when using the command line\n      2.x\n      Updated\n      Jul 07\n    \n    \n      Added tables with BICs for delta 2.2.0-RC1.2 and 2.2.0-RC1.1\n      2.2.x\n      Updated\n      Jul 07\n    \n    \n      Added known issues to Jasmine tests\n      2.x\n      Updated\n      Jul 05\n    \n    \n      Added BIC about moved directories\n      2.2.x\n      Updated\n      Jul 03\n    \n  \n\n\n\nJune 2017 Release Notes\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      2.2.x Release Information\n      2.2\n      New\n      June 23\n    \n    \n      Magento CE 2.2 Release Candidate Release Notes\n      2.2\n      New\n      June 23\n    \n    \n      Magento EE 2.2 Release Candidate Release Notes\n      2.2\n      New\n      June 23\n    \n    \n      Magento 2.2 backward incompatible changes\n      2.2\n      New\n      June 23\n    \n  \n\n\nInstallation Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Change to a released version\n      2.2\n      Updated\n      June 23\n    \n    \n      Check the Magento database status\n      2.2\n      New\n      June 23\n    \n    \n      Enable or disable maintenance mode\n      2.2\n      Updated\n      June 23\n    \n    \n      Overview of ownership and permissions\n      2.2\n      Updated\n      June 23\n    \n    \n      Configure the Magento application\n      2.2\n      Updated\n      June 23\n    \n    \n      Update installation dependencies\n      2.2\n      Updated\n      June 23\n    \n    \n      Installation quick reference (tutorial)\n      2.2\n      Updated\n      June 23\n    \n    \n      Overview of ownership and permissions\n      2.2\n      Updated\n      June 23\n    \n    \n      Set pre-installation ownership and permissions\n      2.2\n      Updated\n      June 23\n    \n    \n      Get the Magento CE metapackage\n      2.2\n      Updated\n      June 23\n    \n    \n      Get the Magento EE metapackage\n      2.2\n      Updated\n      June 23\n    \n    \n      (Easy) Install the Magento archive on your server\n      2.2\n      Updated\n      June 23\n    \n    \n      Magento 2.2.x technology stack requirements\n      2.2\n      Updated\n      June 23\n    \n    \n      Access issues\n      2.2\n      Updated\n      June 23\n    \n    \n      Exceptions during installation\n      2.2\n      Updated\n      June 23\n    \n    \n      Errors installing optional sample data\n      2.2\n      Updated\n      June 23\n    \n    \n      Cannot write to the generated/code directory\n      2.2\n      Updated\n      June 23\n    \n  \n\n\nConfiguration Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Configuration Guide\n      2.2\n      Updated\n      June 23\n    \n    \n      Database caching\n      2.2\n      Updated\n      June 23\n    \n    \n      Static Content Signing\n      2.2\n      New\n      June 23\n    \n    \n      Magento’s deployment configuration\n      2.2\n      Updated\n      June 23\n    \n    \n      Pipeline Deployment\n      2.2\n      New\n      June 23\n    \n    \n      Single machine deployment\n      2.2\n      New\n      June 23\n    \n    \n      Configure 2.2 message queues\n      2.2\n      New\n      June 23\n    \n    \n      Migrate message queue configuration\n      2.2\n      Updated\n      June 23\n    \n    \n      Magento Optimization Guide\n      2.2\n      Updated\n      June 23\n    \n    \n      Configure Magento to use Varnish\n      2.2\n      Updated\n      June 23\n    \n    \n      Advanced Varnish configuration\n      2.2\n      New\n      June 23\n    \n  \n\n\nMagento Cloud updates\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Import Magento EE into Magento Commerce (Cloud)\n      2.0, 2.1, 2.2\n      Updated\n      June 29\n    \n    \n      Prepare your existing Magento EE system\n      2.0, 2.1, 2.2\n      Updated\n      June 29\n    \n    \n      Resolve issues with encryption key\n      2.0, 2.1, 2.2\n      New\n      June 29\n    \n    \n      Go live\n      2.0, 2.1, 2.2\n      Updated\n      June 29\n    \n    \n      Magento application environment variables\n      2.0, 2.1, 2.2\n      Updated\n      June 27\n    \n  \n\n\nB2B Developer Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      B2B Developer Guide\n      2.2\n      New\n      June 23\n    \n  \n\n\nFrontend Developer Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      How CSS and LESS files are preprocessed and how to debug them\n      2.2\n      New\n      June 23\n    \n    \n      Compile LESS using Grunt\n      2.2\n      New\n      June 23\n    \n    \n      Layout overview\n      2.2\n      New\n      June 23\n    \n    \n      Common layout customization tasks\n      2.2\n      New\n      June 23\n    \n    \n      Templates XSS security\n      2.2\n      New\n      June 23\n    \n    \n      Uninstall a storefront theme\n      2.2\n      New\n      June 23\n    \n    \n      Additional tools for frontend developers\n      2.2\n      New\n      June 23\n    \n    \n      Using Grunt for Magento tasks\n      2.2\n      New\n      June 23\n    \n  \n\n\nUI Components Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Using the new structure in UI components XML configuration\n      2.2\n      New\n      June 23\n    \n    \n      Magento custom Knockout.js bindings\n      2.2\n      New\n      June 23\n    \n    \n      UI components XML configuration structure\n      2.2\n      New\n      June 23\n    \n    \n      Declare a custom UI component\n      2.2\n      New\n      June 23\n    \n  \n\n\nModule Reference Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Advanced Reporting modules\n      2.2\n      New\n      June 23\n    \n    \n      B2B modules\n      2.2\n      New\n      June 23\n    \n    \n      Magento_Signifyd module\n      2.2\n      New\n      June 23\n    \n  \n\n\nComponent Manager and System Upgrade Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Upgrade the Magento application and modules\n      2.2\n      New\n      June 23\n    \n    \n      Command-line upgrade\n      2.2\n      New\n      June 23\n    \n    \n      Run the Extension Manager\n      2.2\n      New\n      June 23\n    \n    \n      Run the Module Manager\n      2.2\n      New\n      June 23\n    \n    \n      Prerequisites\n      2.2\n      New\n      June 23\n    \n    \n      Run System Upgrade\n      2.2\n      New\n      June 23\n    \n  \n\n\nMagento payment provider gateway\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Signifyd fraud protection\n      2.2\n      New\n      June 23\n    \n  \n\n\nREST and SOAP References\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Swagger documentation\n      2.2\n      Updated\n      June 23\n    \n    \n      List of REST endpoints by module\n      2.2\n      Updated\n      June 23\n    \n    \n      List of service names per module\n      2.2\n      Updated\n      June 23\n    \n    \n      SOAP Reference\n      2.2\n      Updated\n      June 23\n    \n  \n\n\nPHP Developer Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      The di.xml file\n      2.2\n      New\n      June 23\n    \n    \n      Bulk Operations\n      2.2\n      New\n      June 23\n    \n    \n      Example bulk operations implementation\n      2.2\n      New\n      June 23\n    \n    \n      Code generation\n      2.2\n      New\n      June 23\n    \n    \n      Configuration importers\n      2.2\n      New\n      June 23\n    \n    \n      Sensitive and environment settings\n      2.2\n      New\n      June 23\n    \n    \n      Serialize Library\n      2.2\n      New\n      June 23\n    \n    \n      Indexer optimization\n      2.2\n      New\n      June 23\n    \n    \n      Plugins (Interceptors)\n      2.2\n      New\n      June 23\n    \n    \n      Searching with Repositories\n      2.2\n      New\n      June 23\n    \n    \n      XSS prevention strategies\n      2.2\n      New\n      June 23\n    \n  \n\n\nMagento Testing Framework Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Functional Testing Framework Configuration\n      2.2\n      New\n      June 23\n    \n    \n      Test suite in the Functional Testing Framework\n      2.2\n      New\n      June 23\n    \n    \n      Typified element\n      2.2\n      New\n      June 23\n    \n    \n      Quick start. Prepare Magento application\n      2.2\n      New\n      June 23\n    \n  \n\n\nExtension Developer Best Practices\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Writing secure code\n      2.2\n      New\n      June 23\n    \n    \n      Serialized to JSON data upgrade\n      2.2\n      New\n      June 23\n    \n  \n\n\nJavaScript Developer Guide\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      JavaScript Logger\n      2.2\n      New\n      June 23\n    \n  \n\n\nAdditional updates\n\n\n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Customize the list of shipping methods\n      2.2\n      New\n      June 23\n    \n    \n      Clear directories during development\n      2.2\n      New\n      June 23\n    \n    \n      Add custom fields that influence other Checkout fields\n      2.0, 2.1\n      New\n      June 8\n    \n    \n      JavaScript unit testing with Jasmine\n      2.2\n      New\n      June 23\n    \n  \n\n\n\nMay 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Magento custom Knockout.js bindings\n      2.1\n      New\n      May 25\n    \n  \n\n\n\nApril 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Description and configuration options of the mostly used Magento UI components\n      2.1\n      New\n      Apr 28\n    \n    \n      Install a third-party storefront theme\n      2.x\n      New\n      Apr 27\n    \n    \n      Uninstall a storefront theme\n      2.x\n      New\n      Apr 27\n    \n    \n      Payments integrations: response validators and payment method facade\n      2.0, 2.1.x\n      Updated\n      Apr 27\n    \n    \n      Technical guidelines for working with Events\n      2.1.x\n      New\n      Apr 19\n    \n    \n      Migration: Follow-up after running the Data Migration Tool\n      2.x\n      Updated\n      Apr 14\n    \n  \n\n\n\nMarch 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Coding standards technical guidelines\n      2.1.x\n      New\n      Apr 1\n    \n    \n      Update sample contribution template\n      2.x\n      Updated\n      Apr 1\n    \n    \n      Update performance test data\n      2.x\n      Updated\n      Mar 21\n    \n    \n      Versioning and compatibility\n      2.x\n      New\n      Mar 31\n    \n    \n      How to test a block\n      2.x\n      Updated\n      Mar 24\n    \n    \n      Tutorial: Order processing with REST APIs\n      2.1.x\n      New\n      Mar 23\n    \n    \n      Magento U video tutorials\n      2.x\n      New\n      Mar 15\n    \n    \n      Top quarterly devdocs contributors\n      2.x\n      Updated\n      Mar 15\n    \n    \n      Community contribution to adding attributes to an entity\n      2.x\n      Updated\n      March 15\n    \n    \n      Tutorial on copying fieldsets\n      2.x\n      New\n      Mar 9\n    \n    \n      Backward incompatible changes now includes Magento 2.0.x, added tables\n      2.x\n      Updated\n      Mar 9\n    \n    \n      Import a Magento EE project into Magento Commerce (Cloud) (MECE)\n      2.x\n      New\n      Mar 1\n    \n    \n      MECE configuration management\n      2.1.x\n      New\n      Mar 3\n    \n    \n      Reorganize and update how to get started with an MECE environment\n      2.x\n      Updated\n      Mar 3\n    \n    \n      Reorganize and correct issues with MECE workspace\n      2.x\n      Updated\n      Mar 2\n    \n    \n      Magento Functional Test Framework scenario test\n      2.x\n      New\n      Mar 3\n    \n  \n\n\n\nFeb 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Magento Commerce (Cloud) (MECE) deployment\n      2.x\n      Updated\n      Feb 23\n    \n    \n      How to use logs to troubleshoot MECE\n      2.x\n      New\n      Feb 23\n    \n    \n      How to SSH in to an MECE integration, staging, or production system\n      2.x\n      Updated\n      Feb 23\n    \n    \n      Set up multiple MECE database users\n      2.x\n      New\n      Feb 21\n    \n    \n      MECE 2.1.5 and 2.0.13 Release Notes\n      2.1.5\n      New\n      Feb 21\n    \n    \n      Magento Community Edition (CE) 2.1.5 Release Notes\n      2.1.5\n      New\n      Feb 21\n    \n    \n      Magento Enterprise Edition (EE) 2.1.5 Release Notes\n      2.1.5\n      New\n      Feb 21\n    \n    \n      Magento CE 2.0.13 Release Notes\n      2.0.13\n      New\n      Feb 21\n    \n    \n      Magento EE 2.0.13 Release Notes\n      2.0.13\n      New\n      Feb 21\n    \n    \n      How Magento Commerce (Cloud) uses Composer\n      2.x\n      New\n      Feb 17\n    \n    \n      Prohibit usage of DocBlock templates, add License Notice and Copyright\n      2.x\n      Updated\n      Feb 11\n    \n    \n      How to create a Fastly error or maintenance page\n      2.x\n      Updated\n      Feb 10\n    \n    \n      Magento Commerce (Cloud) 2.1.4 and 2.0.12 Release Notes\n      2.x\n      New\n      Feb 7\n    \n    \n      Magento Community Edition (CE) 2.0.12 Release Notes\n      2.0.x\n      New\n      Feb 7\n    \n    \n      Magento Enterprise Edition (EE) 2.0.12 Release Notes\n      2.0.x\n      New\n      Feb 7\n    \n    \n      Magento CE 2.1.4 Release Notes\n      2.1.x\n      New\n      Feb 7\n    \n    \n      Magento EE 2.1.4 Release Notes\n      2.1.x\n      New\n      Feb 7\n    \n    \n      Use PhpStorm, PHPUnit, and Xdebug with DevBox\n      2.x\n      New\n      Feb 8\n    \n    \n      Clarify file system permissions for production\n      2.x\n      Updated\n      Jan 27\n    \n    \n      Corrected instructions to set up multiple websites or stores on Magento Commerce (Cloud)\n      2.x\n      Updated\n      Jan 31\n    \n  \n\n\n\nJanuary 2017 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Date\n    \n  \n  \n    \n      Asynchronous module definition and RequireJS concepts\n      2.1.x\n      New\n      Jan 25\n    \n    \n      Added information about the RequireJS library\n      2.x\n      Updated\n      Jan 26\n    \n    \n      Data Migration Guide troubleshooting\n      2.x\n      New\n      Jan 20\n    \n    \n      Updated @deprecated tag and added requirements for @inheritdoc\n      2.x\n      Updated\n      Jan 20\n    \n    \n      How to install and use Magento DevBox (easy developer installation)\n      2.x\n      New\n      Jan 19\n    \n    \n      Functional Testing Framework isolation management tutorial\n      2.x\n      New\n      Jan 18\n    \n    \n      How to test a patch on Magento Commerce (Cloud)\n      2.x\n      Updated\n      Jan 10\n    \n    \n      Add type prefixes and product, project in description of composer.json\n      2.x\n      Updated\n      Jan 9\n    \n    \n      Docblock coding standard\n      2.x\n      Updated\n      Jan 6\n    \n    \n      Use payment vault in the Admin\n      2.1.x\n      Updated\n      Jan 6\n    \n  \n\n\n\nDecember 2016 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Week ending\n    \n  \n  \n    \n      Magento UI components explained\n      2.1.x\n      New\n      Dec 30 (includes week ending Dec 23)\n    \n    \n      Magento Community Edition (CE) 2.1.3 Release Notes\n      2.1.3\n      New\n      Dec 16\n    \n    \n      Magento CE 2.0.11 Release Notes\n      2.0.11\n      New\n      Dec 16\n    \n    \n      Magento Enterprise Edition (EE) 2.1.3 Release Notes\n      2.1.3\n      New\n      Dec 16\n    \n    \n      Magento EE 2.0.11 Release Notes\n      2.0.11\n      New\n      Dec 16\n    \n    \n      Configure the Magento functional testing framework\n      2.x\n      New\n      Dec 16\n    \n    \n      Add custom integrations and vault payments to the Magento payment provider gateway\n      2.x\n      New\n      Dec 9\n    \n  \n\n\n\nNovember 2016 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Week ending\n    \n  \n  \n    \n      Set up the Magento application to use multiple stores\n      2.x\n      Updated\n      Dec 2\n    \n    \n      Set up multiple Magento stores on Magento Commerce (Cloud)\n      2.x\n      New\n      Dec 2\n    \n    \n      Install the Magento data migration tool\n      2.x\n      Updated\n      Dec 2\n    \n    \n      Upgrade the Magento data migration tool\n      2.x\n      Updated\n      Dec 2\n    \n    \n      Add REST APIs for Magento Enterprise Edition\n      2.x\n      Updated\n      Dec 2\n    \n    \n      Add REST API endpoints for Magento EE\n      2.x\n      Updated\n      Dec 2\n    \n    \n      Use Jasmine for JavaScript unit testing\n      2.x\n      New\n      Nov 25\n    \n    \n      Use adapters with third-party libraries\n      2.x\n      New\n      Nov 25\n    \n    \n      Debug the Fastly extension with Magento Commerce (Cloud)\n      2.x\n      New\n      Nov 25\n    \n    \n      Magento Commerce (Cloud) requirements\n      2.x\n      Updated\n      Nov 18\n    \n    \n      Data migration toolkit directory structure\n      2.x\n      Updated\n      Nov 18\n    \n    \n      Added information about the @import directive and usage\n      2.x\n      Updated\n      Nov 18\n    \n    \n      How to use adapters with third-party libraries\n      2.x\n      New\n      Nov 11\n    \n    \n      Added detail about Magento Commerce (Cloud) (MECE) deployment\n      2.x\n      Updated\n      Nov 4\n    \n    \n      Where MECE logs are located\n      2.x\n      New\n      Nov 4\n    \n    \n      Tutorial on setting up a custom cron job and cron group\n      2.x\n      New\n      Nov 4\n    \n    \n      Troubleshoot OPcache-related error\n      2.x\n      New\n      Nov 4\n    \n    \n      UI components linking properties\n      2.1.x\n      New\n      Nov 4\n    \n  \n\n\n\nOctober 2016 \n  \n    \n      Description\n      Versions applied to\n      New or Updated\n      Week ending\n    \n  \n  \n    \n      Magento Commerce (Cloud) (MECE) added descriptions of build and deployment scripts and other improvements to deployment\n      2.x\n      Updated\n      Oct 28\n    \n    \n      MECE added description of build and deployment logs in staging and production\n      2.x\n      Updated\n      Oct 28\n    \n    \n      MECE how to patch the Magento software\n      2.x\n      New\n      Oct 28\n    \n    \n      MECE how to upgrade the Magento software\n      2.x\n      New\n      Oct 28\n    \n    \n      Magento Functional Test Framework (FTF) create a report\n      2.x\n      New\n      Oct 28\n    \n    \n      DataSource UI component\n      2.1.x\n      New\n      Oct 28\n    \n    \n      Home page for Magento 2.x system requirements\n      2.x\n      New\n      Oct 28\n    \n    \n      Home page for Magento 2.x technical bulletins\n      2.x\n      New\n      Oct 28\n    \n    \n      Home page for Magento 2.x third-party license agreements\n      2.x\n      New\n      Oct 28\n    \n    \n      Using code sniffers\n      2.x\n      New\n      Oct 28\n    \n    \n      Updated cron group options (use_separate_process applies to 2.1.x only)\n      2.x\n      Updated\n      Oct 21\n    \n    \n      Magento Commerce (Cloud) (MECE) Release Notes home page\n      2.x\n      New\n      Oct 21\n    \n    \n      MECE 2.1.2 and 2.0.10 Release Notes\n      2.0.10, 2.1.2\n      New\n      Oct 21\n    \n    \n      Added HTTP response codes to Web API topic\n      2.x\n      Updated\n      Oct 21\n    \n    \n      System requirements home page\n      2.x\n      New\n      Oct 21\n    \n    \n      How to apply the SUPEE-8788 security patch\n      1.x\n      Updated\n      Oct 21\n    \n    \n      Magento CE 2.0.10 release notes\n      2.0.x\n      New\n      Oct 14\n    \n    \n      Magento EE 2.0.10 release notes\n      2.0.x\n      New\n      Oct 14\n    \n    \n      Magento CE 2.1.2 release notes\n      2.1.x\n      New\n      Oct 14\n    \n    \n      Magento EE 2.1.2 release notes\n      2.1.x\n      New\n      Oct 14\n    \n    \n      Proposed outline for evolving UI Components guide\n      2.1.x\n      New\n      Oct 14\n    \n    \n      Preventing cache poisoning\n      See topic\n      New\n      Oct 14\n    \n    \n      Updated system requirements\n      2.x\n      Updated\n      Oct 14\n    \n    \n      JSON responses added by Tim Reynolds\n      1.x\n      Updated\n      Oct 14\n    \n    \n      JSON responses added by Tim Reynolds\n      1.x\n      Updated\n      Oct 14\n    \n    \n      Magento CE 1.9.3 release notes\n      1.x\n      New\n      Oct 14\n    \n    \n      Magento EE 1.14.3 release notes\n      1.x\n      New\n      Oct 14\n    \n    \n      Updated system requirements\n      1.x\n      Updated\n      Oct 14\n    \n    \n      Indexing (add information about improving indexing performance)\n      2.x\n      Updated\n      Oct 7\n    \n    \n      Magento 2 documentation resources for Magento Commerce (Cloud) (MECE)\n      2.x\n      New\n      Oct 7\n    \n    \n      MECE environment variables\n      2.x\n      Updated\n      Oct 7\n    \n    \n      MECE add more information about project directory structure\n      2.x\n      Updated\n      Oct 7\n    \n    \n      MECE completely revise new environment setup\n      2.x\n      Updated\n      Oct 7\n    \n    \n      MECE responsibilities of the account owner\n      2.x\n      New\n      Oct 7\n    \n    \n      MECE Magento file system owner for local development\n      2.x\n      New\n      Oct 7\n    \n    \n      MECE setting MySQL auto_increment_increment=3\n      2.x\n      New\n      Oct 7\n    \n    \n      MECE moving from integration to staging and production (see also associated topics)\n      2.x\n      New\n      Oct 7\n    \n    \n      Added info about using tokens in authentication requests\n      2.x\n      Updated\n      Oct 7\n    \n    \n      How to programmatically create a category with custom attributes\n      2.x\n      New\n      Oct 7\n    \n  \n\n\n",
      "url": "/guides/v2.0/magento-devdocs-whatsnew.html"
    }
    ,
  
    "guides-v2-0-config-guide-bootstrap-magento-how-to-set-html": {
      "title": "Set the value of bootstrap parameters",
      "content": "Overview of setting bootstrap parameter values\nThis topic discusses how to set the values of Magento application bootstrap parameters. More information about Magento application bootstrapping.\n\nThe following table discusses the bootstrap parameters you can set:\n\n\n\t\n  \t\n\t\n\t\t\n\t\t\tBootstrap parameter\n\t\t\tDescription\n\t\t\n\t\n\t\tMAGE_DIRS\n\t\tSpecifies custom directory and URL paths\n\t\t\n\t\n\t\tMAGE_PROFILER\n\t\tEnables dependency graphs and HTML profiling\n\t\n\n\t\n\t\n\n\n\n\n  Not all bootstrap parameters are documented at this time.\n  \tYou now set the Magento mode (developer, default, production) using the magento deploy:mode:set {mode} command.\n\n\nSpecifying a parameter value using an environment variable\nThis section discusses how to set the values of bootstrap parameters using environment variables.\n\nSet the mode using an environment variable\nYou can specify Magento bootstrap variables as system-wide environment variables, which enables all processes to use them.\n\nFor example, you can use the MAGE_PROFILER system environment variable to specify a mode as follows:\n\nMAGE_PROFILER={firebug|csv|&lt;custom value&gt;}\n\n\nSet the variable using a shell-specific command. Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\nbash shell example for CentOS:\n\nexport MAGE_PROFILER=firebug\n\n\n\n\n  If a PHP Fatal error displays in the browser after you set a profiler value, restart your web server. The reason might be related to PHP bytecode caching, which caches bytecodes and PHP classpaths.\n\n\nSpecifying a parameter value\nThis section discusses how to specify the mode for either Apache or nginx.\n\nSee one of the following sections for more information:\n\n\n  Specify a variable using an nginx setting\n  Specify a variable using .htaccess (Apache only)\n  Specify a variable using an Apache setting\n\n\nSpecify a variable using an nginx setting\nSee the nginx sample configuration on GitHub.\n\nSpecify a variable using .htaccess (Apache only)\nOne way to set the Magento mode is by editing .htaccess. This way, you don’t have to change Apache settings.\n\nYou can modify .htaccess in any of the following locations, depending on your entry point to the Magento application:\n\n\n  &lt;your Magento install dir&gt;/.htaccess\n  &lt;your Magento install dir&gt;/pub/.htaccess\n\n\nTo set a variable:\n\n\n  \n    Open any of the preceding files in a text editor and either add or uncomment the desired setting.\n\n    For example, to specify a mode, uncomment the following:\n\n    #   SetEnv MAGE_PROFILER firebug\n    \n  \n  \n    Set the value of MAGE_PROFILER to any of the following:\n\n    firebug\ncsvfile\n&lt;custom value&gt;\n    \n  \n  \n    Save your changes to .htaccess; you don’t need to restart Apache for the change to take effect.\n  \n\n\nSpecify a variable using an Apache setting\nThe Apache web server supports setting the Magento mode using mod_env directives.\n\nThe Apache mod_env directive is slightly different in version 2.2 and version 2.4.\n\nThe procedures that follows show how to set the Magento mode in an Apache virtual host. This is not the only way to use mod_env directives; consult the Apache documentation for details.\n\n\n  Specify a bootstrap variable for Apache on Ubuntu\n  Specify a bootstrap variable for Apache on CentOS\n\n\nSpecify a bootstrap variable for Apache on Ubuntu\nThis section assumes you’ve already set up your virtual host. If you have not, consult a resource such as this digitalocean tutorial.\n\nTo set a Magento bootstrap variable using your web server’s environment:\n\n\n  \n    As a user with root privileges, open your virtual host configuration file in a text editor.\n\n    For example, if your virtual host is named my.magento,\n\n    \n      Apache 2.4: vim /etc/apache2/sites-available/my.magento.conf\n      Apache 2.2: vim /etc/apache2/sites-available/my.magento\n    \n  \n  \n    Anywhere in the virtual host configuration, add the following line:\n\n    SetEnv \"&lt;variable name&gt;\" \"&lt;variable value&gt;\"\n    \n\n    For example,\n\n    SetEnv \"MAGE_PROFILER\" \"firebug\"\n    \n  \n  Save your changes and exit the text editor.\n  \n    Enable your virtual host if you haven’t already done so:\n\n    a2ensite &lt;virtual host config file name&gt;\n    \n\n    For example,\n\n    a2ensite my.magento.conf\n    \n  \n  \n    Restart the web server:\n\n    \n      Ubuntu: service apache2 restart\n      CentOS: service httpd restart\n    \n  \n\n\nSpecify a bootstrap variable for Apache on CentOS\nThis section assumes you’ve already set up your virtual host. If you have not, consult a resource such as this digitalocean tutorial.\n\nTo set a Magento bootstrap variable using your web server’s environment:\n\n\n  \n    As a user with root privileges, open /etc/httpd/conf/httpd.conf in a text editor.\n  \n  \n    Anywhere in the virtual host configuration, add the following line:\n\n    SetEnv \"&lt;variable name&gt;\" \"&lt;variable value&gt;\"\n    \n\n    For example,\n\n    SetEnv \"MAGE_PROFILER\" \"firebug\"\n    \n  \n  \n    Save your changes and exit the text editor.\n  \n\n\nAfter setting the mode, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nRelated topics\n\n\n  Customize base directory paths (MAGE_DIRS)\n  Set the Magento mode\n  Enable an dependency graphs and built-in profiler (MAGE_PROFILER)\n\n",
      "url": "/guides/v2.0/config-guide/bootstrap/magento-how-to-set.html"
    }
    ,
  
    "guides-v2-0-config-guide-bootstrap-magento-modes-html": {
      "title": "About Magento modes",
      "content": "You can run Magento in any of the following modes:\n\n\n\t\n\t\t\n\t\t\tMode name\n\t\t\tDescription\n\t\t\n\t\t\n\t\tdefault\n\t\tEnables you to deploy the Magento application on a single server without changing any settings. However, default mode is not optimized for production.\n\t\t\tTo deploy the Magento application on more than one server or to optimize it for production, change to one of the other modes.\n\t\t\tSymlinks to static view files are published to the pub/static directory\n\t\t\t\tExceptions are not displayed to the user; instead, exceptions are written to log files.\n\t\t\t\tHides custom X-Magento-&#42; HTTP request and response headers\n\t\t\t\n\t\n\t\n\t\tdeveloper\n\t\tIntended for development only, this mode:\n\t\t\tSymlinks to static view files are published to the pub/static directory\n\t\t\t\tProvides verbose logging\n\t\t\t\tEnables automatic code compilation\n\t\t\t\tEnables enhanced debugging\n\t\t\t\tShows custom X-Magento-&#42; HTTP request and response headers\n\t\t\t\tResults in the slowest performance (because of the preceding)\n        \n        Magento Commerce (Cloud) supports production mode only.\n        \n    \n\t\n\t\n\t\tproduction\n\t\tIntended for deployment on a production system, this mode:\n\t\t\tDoes not show exceptions to the user (exceptions are written to logs only).\n\t\t\t\tServes static view files from cache only.\n\t\t\t\tPrevents automatic code file compilation. New or updated files are not written to the file system.\n\t\t\t\tDoes not allow you to enable or disable cache types in Magento Admin. More information about enabling and disabling the cache.\n\t\t\t\n\t\n\n\n\nDefault mode\nAs its name implies, default mode is how the Magento software operates if no other mode is specified. Default mode enables you to deploy the Magento application on a single server without changing any settings. However, default mode is not as optimized for production as is production mode.\n\nTo deploy the Magento application on more than one server or to optimize it for production, change to one of the other modes.\n\nIn default mode:\n\n\n  Errors are logged to the file reports at server, and never shown to a user\n  A symlink to a static view file is published to the pub/static directory for each requested file\n  Default mode is not optimized for a production environment, primarily because of the adverse performance impact of static files being dynamically generated rather than materialized. In other words, creating static files and caching them has a greater performance impact than generating them using the static files creation tool.\n\n\nFor more information, see Set the Magento mode.\n\nDeveloper mode\nYou should run the Magento software in developer mode when you’re extending or customizing it.\n\n\nMagento Commerce (Cloud) supports production mode only.\n\n\nIn developer mode:\n\n\n  A symlink to a static view file is published to the pub/static directory for each requested file\n  Uncaught exceptions display in the browser\n  System logging in var/report is verbose\n  An exception is thrown in the error handler, rather than being logged\n  An exception is thrown when an event subscriber cannot be invoked\n\n\nFor more information, see Set the Magento mode.\n\nProduction mode\nYou should run the Magento software in production mode when it’s deployed to a production server. After optimizing the server environment (database, web server, and so on), you should run the static view files deployment tool to write static view files to the Magento pub/static directory.\n\nThis improves performance because static files don’t go through the fallback mechanism; instead, URLs for static files are created as needed.\n\nIn production mode:\n\n\n  Static view files are not materialized, and URLs for them are composed on the fly without going through the fallback mechanism. (Static view files are served from cache only.)\n  Errors are logged to the file system and are never displayed to the user\n\n\nNext step\nTo set a mode, see Set the Magento mode.\n\nRelated topic\nTo generate static view files for production mode, see Deploy static view files\n",
      "url": "/guides/v2.0/config-guide/bootstrap/magento-modes.html"
    }
    ,
  
    "magento-release-information-html": {
      "title": "Magento release information",
      "content": "To find Release Notes, technical bulletins, and backward-incompatible information for the Magento 2.0.x, 2.1.x, and 2.2.x releases, see the following:\n\n\n  Magento 2.0.x release information\n  Magento 2.1.x release information\n  Magento 2.2.x release information\n\n",
      "url": "/magento-release-information.html"
    }
    ,
  
    "magento-release-notes-html": {
      "title": "Magento Release Notes",
      "content": "TBD\n",
      "url": "/magento-release-notes.html"
    }
    ,
  
    "magento-techbull-html": {
      "title": "Magento Technical Bulletins",
      "content": "Magento Technical Bulletins\nThis page lists technical bulletins for the Magento application.\n\nMagento 2.0.x and 2.1.x\n\nUSPS Service Name Change (September 7, 2017)\n\nTransport Layer Security (TLS) 1.1+ requirement for repo.magento.com (June 30, 2016)\n\nMagento 2.0.x\n\n  Required patch for PHP 5.5.x and Setup Application environments (June 6, 2016)\n  Magento upgrade issues (Jan. 28, 2016)\n\n\nMagento 2.1.x\n\nMasterCard BIN Range Update (May 19, 2017)\nImage resize Issue for Magento version 2.1.6 (May 17, 2017)\n\nUpgrade to Magento version 2.1 (June 22, 2016)\n",
      "url": "/magento-techbull.html"
    }
    ,
  
    "magento-third-party-html": {
      "title": "Magento third party licenses",
      "content": "Magento third party licenses\nThis page lists third party license agreements for the Magento application.\n\nMagento 2.0.x\n\n  Magento Open Source third-party licenses\n  Magento Commerce third-party licenses\n\n\nMagento 2.1.x\n\n  Magento Open Source third-party licenses\n  Magento Commerce third-party licenses\n\n",
      "url": "/magento-third-party.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-maint-mode-html": {
      "title": "Maintenance mode options for upgrade",
      "content": "This topic discusses how you can create a custom maintenance page to display to users while your Magento application is being upgraded. Creating a custom page is optional but recommended because your site is accessible during part of the upgrade.\n\nCreating a custom page to which to redirect users prevents any access to the site and also informs your users that the site is undergoing maintenance.\n\n\n  You must perform the tasks in this section as a user with root privileges.\n\n\nSee one of the following sections for more information:\n\n\n  Create the custom maintenance page\n  Custom maintenance page for Apache\n  Custom maintenance page for nginx\n\n\nCreate the custom maintenance page\nTo create a maintenance page and redirect to it, first create a maintenance page named:\n\n\n  Apache: &lt;web server docroot&gt;/maintenance.html\n  nginx: &lt;your Magento install dir&gt;/maintenance.html\n\n\nAdd to it the following contents:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Temporarily Offline&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n&lt;style&gt;\nh1\n{ font-size: 50px; }\n\nbody\n{ text-align:center; font: 20px Helvetica, sans-serif; color: #333; }\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Temporarily offline&lt;/h1&gt;\n&lt;p&gt;We're down for a short time to perform maintenance on our site to give you the best possible experience. Check back soon!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nCustom maintenance page for Apache\nThis section discusses how to create a custom maintenance page and how to redirect traffic to it.\n\nThe example in this section shows how to modify the following files, which is one way to set up your maintenance page:\n\n\n  Apache 2.4: /etc/apache2/sites-available/000-default.conf\n  Apache 2.2: /etc/apache2/sites-available/default (Ubuntu), /etc/httpd/conf/httpd.conf (CentOS)\n\n\nTo redirect traffic to a custom maintenance page:\n\n\n  \n    Update your Apache configuration to do the following:\n\n    \n      Redirect all traffic to the maintenance page\n      Whitelist certain IPs so an administrator can run the System Upgrade utility to upgrade the Magento software.\n    \n\n    The following example whitelists 192.0.2.110.\n\n    Add the following at the end of your Apache configuration file:\n\n    RewriteEngine On\nRewriteCond %{REMOTE_ADDR} !^192\\.0\\.2\\.110\nRewriteCond %{DOCUMENT_ROOT}/maintenance.html -f\nRewriteCond %{DOCUMENT_ROOT}/maintenance.enable -f\nRewriteCond %{SCRIPT_FILENAME} !maintenance.html\nRewriteRule ^.*$ /maintenance.html [R=503,L]\nErrorDocument 503 /maintenance.html\nHeader Set Cache-Control \"max-age=0, no-store\"\n    \n  \n  \n    Restart Apache:\n\n    \n      CentOS: service httpd restart\n      Ubuntu: service apache2 restart\n    \n  \n  \n    Enter the following command:\n\n     touch &lt;web server docroot&gt;/maintenance.enable\n    \n  \n  Upgrade your system.\n  Test your site to make sure it functions correctly.\n  After the upgrade is done, delete maintenance.enable.\n\n\nCustom maintenance page for nginx\nThis section discusses how to create a custom maintenance page and how to redirect traffic to it.\n\nTo redirect traffic to a custom maintenance page:\n\n\n  Use a text editor to open the nginx configuration file that contains your server block.\n  \n    Add the following to the server block (server is shown for clarity only; don’t add a second server block).\n\n    The following whitelists IP address 192.0.2.110 and 192.0.2.115 on a system where Magento is installed in /var/www/html/magento2:\n\n    server {\nlisten 80;\nset $MAGE_ROOT /var/www/html/magento2;\n\nset $maintenance off;\n\nif (-f $MAGE_ROOT/maintenance.enable) {\nset $maintenance on; \n}\n\nif ($remote_addr ~ (192.0.2.110|192.0.2.115)) {\nset $maintenance off;\n}\n\nif ($maintenance = on) {\nreturn 503;\n}\n\nlocation /maintenance {\n}\n\nerror_page 503 @maintenance;\n\nlocation @maintenance {\nroot $MAGE_ROOT;\nrewrite ^(.*)$ /maintenance.html break;\n\ninclude /var/www/html/magento2/nginx.conf;\n}\n    \n  \n  \n    Enter the following command:\n\n     touch &lt;your Magento install dir&gt;/maintenance.enable\n    \n  \n  \n    Reload the nginx configuration:\n\n     service nginx reload\n    \n  \n  Upgrade your system.\n  Test your site to make sure it functions correctly.\n  After the upgrade is done, delete or rename maintenance.enable\n  \n    Reload the nginx configuration:\n\n    service nginx reload\n    \n  \n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/maint-mode.html"
    }
    ,
  
    "guides-v2-0-config-guide-mq-manage-mysql-html": {
      "title": "Manage message queues",
      "content": "If you don’t want to implement the RabbitMQ solution, you can manage message queues with cron jobs (or an external process manager) and the command line to ensure that consumers are retrieving messages.\n\nProcess management\nCron jobs are the default mechanism to restart consumers. Processes started by cron consume the specified number of messages and then terminate. Re-running cron restarts the consumer.\n\nA magic method, whose name is the same as the consumer name, is used as a callback when declaring a new consumer run job in crontab.xml. Using magic methods allows you to pass the name of the consumer implicitly via method name. Alternatively, virtual types based on abstract consumer runner should be declared with a concrete consumer name specified as an argument (this approach is more complex and requires extra configuration).\n\nThe following shows a crontab group entry:\n\n&lt;group id=\"default\"&gt;\n    &lt;job name=\"consumerCustomerCreatedListener\" instance=\"Magento\\Amqp\\Model\\ConsumerRunner\" method=\"customerCreatedListener\"&gt;\n        &lt;schedule&gt;0 0 * * *&lt;/schedule&gt;\n    &lt;/job&gt;\n&lt;/group&gt;\n\n\n  How often you check message queues depends on your business logic and available system resources. In general, you’ll probably want to check for newly created customers and send welcome emails more frequently than a more resource intensive process (e.g., updating your catalog). You should define cron schedules according to your business needs.\n\n  See Configure and run cron for more information about using cron with Magento.\n\n\nYou can also use a process manager, such as Supervisor, to monitor the status of processes. The manager can use the command line to restart processes as needed.\n\nCommand line interface\n\nStart consumers\nUse the magento command to start message queue consumers. You can start multiple consumers simultaneously.\n\n./bin/magento queue:consumers:start &lt;consumer_name&gt; [--max-messages=&lt;value&gt;]\n\n\nwhere &lt;consumer_name&gt; is the consumer to start and --max-messages=&lt;value&gt; specifies the maximum number of messages to consume per invocation.\n\n\n  If the number of queued messages is less than the specified max, the consumer polls for new messages until it has processed the max. If you don’t specify --max-messages, the process runs continuously.\n\n\nAfter consuming all available messages, the command terminates. You can run the command again manually or with a cron job. You can also run multiple instances of the magento queue:consumers:start command to process large message queues. For example, you can append &amp; to the command to run it in the background, return to a prompt, and continue running commands (e.g., bin/magento queue:consumers:start &lt;consumer_name&gt; &amp;).\n\nList consumers\nUse the following command to return a list of message queue consumers:\n\n./bin/magento queue:consumers:list\n\n\nRelated Topics\n\n  Message Queues Overview\n  Configure and run cron\n  Command-line configuration\n  Message Queues\n\n",
      "url": "/guides/v2.0/config-guide/mq/manage-mysql.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-marketplace-marketplace-html": {
      "title": "Magento Marketplace example",
      "content": "This topic provides a simple example of getting free extensions for Magento Community Edition (CE). For more detail, see the Marketplace quick tour.\n\nLog in to Magento Marketplace\nTo get started, log in to Magento Marketplace using your magento.com credentials.\n\nIf you don’t have an account yet:\n\n\n  \n    Click Sign In and the top right of the page as the following figure shows:\n\n    \n  \n  \n    In the right pane, click Create an account.\n\n    \n  \n\n\nFind an extension or theme\nBrowse Marketplace to find an extension or theme. For example, you can enter all or part of a name in the search field, you can scroll down the page, or you can select options from the filters.\n\nAdd to cart\nSupply any required information for the extension or theme and click Add to Cart.\n\nCheck out\nThe following figure shows a sample cart.\n\n\n\nWhen you’re ready, click Go to Checkout and follow the prompts on your screen to complete your purchase.\n\nInstall your new purchases\nUse the Component Manager to install your purchases.\n\n",
      "url": "/guides/v2.0/comp-mgr/marketplace/marketplace.html"
    }
    ,
  
    "guides-v2-0-config-guide-memcache-memcache-html": {
      "title": "Use memcached for session storage",
      "content": "Overview of memcached session storage\nmemcached is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. (Source: Wikipedia)\n\nmemcache provides a very large hash table that can be distributed across multiple machines. When the table is full, subsequent inserts cause older data to be purged in least recently used (LRU) order. The size of this hash table is often very large. (Source: memcached.org)\n\nMagento uses memcached for session storage but not for page caching. For page caching, we recommend Redis or Varnish.\n\n\n   \n   We recommend you use memcached for session storage. The Redis session handler in the phpredis PHP extension does not support session locking, which might cause issues with distributed systems and applications that rely on Ajax.\n\n\nNext step\n\n  Install, configure, verify memcached on Ubuntu\n  Install, configure, verify memcached on CentOS\n\n",
      "url": "/guides/v2.0/config-guide/memcache/memcache.html"
    }
    ,
  
    "guides-v2-0-config-guide-memcache-memcache-centos-html": {
      "title": "Install, configure, verify memcached on CentOS",
      "content": "\n\n  PHP memcache and memcached extensions\n  Because PHP has no native support for memcache, you must install an extension for PHP to use it. There are two PHP extensions available and it’s important to decode which to use:\n\n  \n    \n      memcache (no d), an older but very popular extension that is not maintained regularly. The memcache extension currently does not with PHP 7.\n\n      PHP documentation for memcache\n\n      The exact name is php5-memcache for Ubuntu and php-pecl-memcache for CentOS\n    \n    \n      memcached (with a d), a newer and maintained extension that should be compatible with PHP 7.\n\n      PHP documentation for memcached\n\n      The exact name is php5-memcached for Ubuntu and php-pecl-memcached for CentOS\n    \n  \n\n  \n   \n   For simplicity, we use the PHP memcache extension in this guide although we provide examples for both when configuring Magento to use memcache.\n\n\n  Install and configure memcached on CentOS\n  This section provides instructions to install memcached on CentOS and Ubuntu. For additional information, consult the memcached wiki.\n\n  \n   \n   We recommend using the latest stable memcache or memcached version (currently, 3.0.8 for memcache and 2.2.0 for memcached).\n\n\n  To install memcached on CentOS, perform the following tasks as a user with root privileges:\n\n  \n    \n      Install memcached and its dependencies:\n\n      yum -y update\nyum install -y libevent libevent-devel\nyum install -y memcached\nyum install -y php-pecl-memcache\n      \n\n      \n    \n    The syntax of the preceding commands might depend on what package repositories you use. For example, if you use webtatic and PHP 5.6, enter yum install -y php56w-pecl-memcache. Use yum search memcache|grep php to find the appropriate package name.\n\n    \n    \n      Change the memcached configuration setting for CACHESIZE and OPTIONS:\n\n      \n        Open /etc/sysconfig/memcached in a text editor.\n        \n          Locate the value for CACHESIZE and change it to at least 1GB.\n\n          For example,\n\n          CACHESIZE=\"1GB\"\n          \n        \n        Locate the value for OPTIONS and change it to localhost or 127.0.0.1\n      \n\n      For more information about configuring memcached, see the memcached wiki.\n    \n    Save your changes to memcached and exit the text editor.\n    \n      Restart memcached.\n\n      service memcached restart\n      \n    \n    \n      Restart your web server.\n\n      For Apache, service httpd restart\n    \n    Continue with the next section.\n  \n\n  Verify memcached works before installing Magento\n  We recommend testing memcached to make sure it works before you install Magento. Doing so takes only a few minutes and can simplify troubleshooting later.\n\n  Verify memcached is recognized by the web server\n\n  To verify memcached is recognized by the web server:\n\n  \n    \n      Create a phpinfo.php file in the web server’s docroot:\n\n      &lt;?php\n\n// Show all information, defaults to INFO_ALL\nphpinfo();\n      \n    \n    \n      Go to that page in your web browser.\n\n      For example, http://192.0.2.1/phpinfo.php\n    \n    \n      Make sure memcache displays as follows:\n\n      \n\n      Verify you’re using memcached version 3.0.5 or later.\n\n      If memcache does not display, restart the web server and refresh the browser page. If it still does not display, verify you installed the php-pecl-memcache extension.\n    \n  \n\n  Create a memcache test consisting of a MySQL database and PHP script\n\n  The test uses a MySQL database, table, and data to verify you can retrieve the database data and store it in memcache. A PHP script first searches the cache. If the result does not exist, the script queries database. After the query has been fulfilled by the original database, the script stores the result in memcache, using the set command.\n\n  More details about this test\n\n  Create the MySQL database:\n\n  mysql -u root -p\n  \n\n  At the mysql prompt, enter the following commands:\n\n  create database memcache_test;\nGRANT ALL ON memcache_test.* TO memcache_test@localhost IDENTIFIED BY 'memcache_test';\nuse memcache_test;\ncreate table example (id int, name varchar(30));\ninsert into example values (1, \"new_data\");\nexit\n  \n\n  Create cache-test.php in your web server’s docroot:\n\n  if (class_exists('Memcache')) {\n    $meminstance = new Memcache();\n} else {\n    $meminstance = new Memcached();\n}\n\n$meminstance-&gt;addServer('&lt;memcache host name or ip&gt;', &lt;memcache port&gt;);\n\n$query = \"select id from example where name = 'new_data'\";\n$querykey = \"KEY\" . md5($query);\n\n$result = $meminstance-&gt;get($querykey);\n\nif (!$result) {\n   try {\n        $dbh = new PDO('mysql:host=localhost;dbname=memcache_test','memcache_test','memcache_test');\n        $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        $result = $dbh-&gt;query(\"select id from example where name = 'new_data'\")-&gt;fetch();\n        $meminstance-&gt;set($querykey, $result, 0, 600);\n        print \"got result from mysql\\n\";\n        return 0;\n    } catch (PDOException $e) {\n        die($e-&gt;getMessage());\n    }\n}\nprint \"got result from memcached\\n\";\nreturn 0;\n\n  where &lt;memcache host name or ip&gt; is either localhost, 127.0.0.1, or the memcache host name or IP address. &lt;memcache port&gt; is its listen port; by default, 11211.\n\n  Run the script from the command line.\n\n  cd &lt;web server docroot&gt;\nphp cache-test.php\n  \n\n  The first result is got result from mysql. This means that the key didn’t exist in memcache but it was retrieved from MySQL.\n\n  The second result is got result from memcached, which verifies that the value is stored successfully in memcache.\n\n  Finally, you can view the memcache keys using Telnet:\n\n  telnet localhost &lt;memcache port&gt;\n  \n\n  At the prompt, enter\n\n  stats items\n  \n\n  The result is similar to the following:\n\n  STAT items:3:number 1\nSTAT items:3:age 1075\nSTAT items:3:evicted 0\nSTAT items:3:evicted_nonzero 0\nSTAT items:3:evicted_time 0\nSTAT items:3:outofmemory 0\nSTAT items:3:tailrepairs 0\n  \n\n  Flush the memcache storage and quit Telnet:\n\n  flush_all\nquit\n  \n\n  Additional information about the Telnet test\n\n  Next step\n  Configure Magento to use memcached\n\n",
      "url": "/guides/v2.0/config-guide/memcache/memcache_centos.html"
    }
    ,
  
    "guides-v2-0-config-guide-memcache-memcache-magento-html": {
      "title": "Configure Magento to use memcached",
      "content": "To configure Magento to use memcache:\n\n\n  Open &lt;your Magento install dir&gt;/app/etc/env.php in a text editor.\n  \n    Locate the following:\n\n    'session' =&gt;\n    array (\n    'save' =&gt; 'files',\n),\n    \n  \n  \n    Change it as follows:\n\n    \n      \n        PHP memcache extension\n\n        'session' =&gt;\n   array (\n      'save' =&gt; 'memcache',\n      'save_path' =&gt; 'tcp://&lt;memcache ip or host&gt;:&lt;memcache port&gt;'\n),\n        \n      \n      \n        PHP memcached extension\n\n        'session' =&gt;\n   array (\n      'save' =&gt; 'memcached',\n      'save_path' =&gt; '&lt;memcache ip or host&gt;:&lt;memcache port&gt;'\n),\n        \n      \n    \n\n    Both memcache and memcached have optional startup parameters that are beyond the scope of this guide. You can find more information about them in the memcache or memcached documentation, source code, and changelogs.\n  \n  Continue with the next section.\n\n\nVerify memcached is working with Magento\nTo verify memcached works with Magento:\n\n\n  \n    Delete the contents of the following directories under your Magento installation directory:\n\n    rm -rf var/cache/* var/page_cache/* var/session/*\n    \n  \n  \n    Go to any page on the storefront.\n  \n  \n    Log in to the Magento Admin and browse to several pages.\n\n    If no errors display, congratulations! memcached is working! You can optionally look at memcached storage as discussed in the next step.\n\n    If errors display (such as an HTTP 500 (Internal Server Error)), enable developer mode and diagnose the issue. Make sure memcached is running, configured properly, and that env.php has no syntax errors.\n  \n  \n    (Optional.) Use Telnet to look at memcached storage.\n\n    telnet &lt;memcached host or ip&gt; &lt;memcached port&gt;\nstats items\n    \n\n    The results display similar to the following:\n\n    STAT items:3:number 1\nSTAT items:3:age 7714\nSTAT items:3:evicted 0\nSTAT items:3:evicted_nonzero 0\nSTAT items:3:evicted_time 0\nSTAT items:3:outofmemory 0\nSTAT items:3:tailrepairs 0\n    \n\n    Look at the keys in more detail\n  \n\n\n",
      "url": "/guides/v2.0/config-guide/memcache/memcache_magento.html"
    }
    ,
  
    "guides-v2-0-config-guide-memcache-memcache-ubuntu-html": {
      "title": "Install, configure, verify memcached on Ubuntu",
      "content": "\n\n  PHP memcache and memcached extensions\n  Because PHP has no native support for memcache, you must install an extension for PHP to use it. There are two PHP extensions available and it’s important to decode which to use:\n\n  \n    \n      memcache (no d), an older but very popular extension that is not maintained regularly. The memcache extension currently does not with PHP 7.\n\n      PHP documentation for memcache\n\n      The exact name is php5-memcache for Ubuntu and php-pecl-memcache for CentOS\n    \n    \n      memcached (with a d), a newer and maintained extension that should be compatible with PHP 7.\n\n      PHP documentation for memcached\n\n      The exact name is php5-memcached for Ubuntu and php-pecl-memcached for CentOS\n    \n  \n\n  \n   \n   For simplicity, we use the PHP memcache extension in this guide although we provide examples for both when configuring Magento to use memcache.\n\n\n  Install and configure memcached on Ubuntu\n  This section provides instructions to install memcached on Ubuntu. For additional information, consult the memcached wiki.\n\n  \n   \n   We recommend using memcached version 3.0.5 or later.\n\n\n  To install and configure memcached on Ubuntu:\n\n  \n    \n      As a user with root privileges, enter the following command:\n\n      apt-get -y update\napt-get -y install php5-memcache memcached\n      \n    \n    \n      Change the memcached configuration setting for CACHESIZE and -l:\n\n      \n        Open /etc/memcached.conf in a text editor.\n        Locate the -m parameter.\n        Change its value to at least 1GB\n        Locate the -l parameter.\n        Change its value to 127.0.0.1 or localhost\n        Save your changes to memcached.conf and exit the text editor.\n        \n          Restart memcached.\n\n          service memcached restart\n          \n        \n      \n    \n    \n      Restart your web server.\n\n      For Apache, service apache2 restart\n    \n    \n      Continue with the next section.\n    \n  \n\n  Verify memcached works before installing Magento\n  We recommend testing memcached to make sure it works before you install Magento. Doing so takes only a few minutes and can simplify troubleshooting later.\n\n  Verify memcached is recognized by the web server\n\n  To verify memcached is recognized by the web server:\n\n  \n    \n      Create a phpinfo.php file in the web server’s docroot:\n\n      &lt;?php\n\n// Show all information, defaults to INFO_ALL\nphpinfo();\n      \n    \n    \n      Go to that page in your web browser.\n\n      For example, http://192.0.2.1/phpinfo.php\n    \n    \n      Make sure memcached displays as follows:\n\n      \n\n      Verify you’re using memcached version 3.0.5 or later.\n\n      If memcache does not display, restart the web server and refresh the browser page. If it still does not display, verify you installed the php-pecl-memcache extension.\n    \n  \n\n  Verify memcached can cache data\n  This test uses a PHP script to verify that memcached can store and retrieve cache data.\n\n  For more information about this test, see this digitalocean tutorial.\n\n  Create cache-test.php in the web server’s docroot with the following contents:\n\n  if (class_exists('Memcache')) {\n    $meminstance = new Memcache();\n} else {\n    $meminstance = new Memcached();\n}\n\n$meminstance-&gt;addServer(\"&lt;memcache host name or ip&gt;\", &lt;memcache port&gt;);\n\n$result = $meminstance-&gt;get(\"test\");\n\nif ($result) {\n    echo $result;\n} else {\n    echo \"No matching key found.  Refresh the browser to add it!\";\n    $meminstance-&gt;set(\"test\", \"Successfully retrieved the data!\") or die(\"Couldn't save anything to memcached...\");\n}\n\n  where &lt;memcache host name or ip&gt; is either localhost, 127.0.0.1, or the memcache host name or IP address. &lt;memcache port&gt; is its listen port; by default, 11211.\n\n  Go to that page in a web browser.\n\n  For example, http://192.0.2.1/cache-test.php\n\n  The first time you go to the page, the following displays: No matching key found. Refresh the browser to add it!\n\n  Refresh the browser. The message changes to Successfully retrieved the data!\n\n  Finally, you can view the memcache keys using Telnet:\n\n  telnet localhost &lt;memcache port&gt;\n  \n\n  At the prompt, enter\n\n  stats items\n  \n\n  The result is similar to the following:\n\n  STAT items:2:number 1\nSTAT items:2:age 106\nSTAT items:2:evicted 0\nSTAT items:2:evicted_nonzero 0\nSTAT items:2:evicted_time 0\nSTAT items:2:outofmemory 0\nSTAT items:2:tailrepairs 0\nSTAT items:2:reclaimed 0\nSTAT items:2:expired_unfetched 0\nSTAT items:2:evicted_unfetched 0\n  \n\n  Flush memcache storage and quit Telnet:\n\n  flush_all\nquit\n  \n\n  Additional information about the Telnet test\n\n  Next step\n  Configure Magento to use memcached\n\n",
      "url": "/guides/v2.0/config-guide/memcache/memcache_ubuntu.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-merch-install-html": {
      "title": "Newbie installation first steps",
      "content": "Newbie installation\nBefore you can install the Magento software, you must get your hosted system ready. This topic is geared specifically for GoDaddy but you can use the same instructions for any other hosting provider.\n\nIf you don’t use GoDaddy, you might need to contact your hosting provider’s technical support for specific questions.\n\nStep 1: Verify the software on your system\nMagento requires the following software to run:\n\n\n  Web server: Apache 2.2 or 2.4\n  Programming language: PHP 5.6.x or 5.5.x\n  Database: MySQL 5.6.x\n\n\n\n  We recommend you contact GoDaddy support to verify all of the preceding are installed and get their assistance if any of the software is not installed.\n\n\nFor complete details, see System requirements.\n\nStep 2: Start the cPanel configuration utility\nTo start configuring your hosted system:\n\n\n  Log in with your provided credentials.\n  On the first page, in the Web Hosting row, click Manage.\n  If necessary, log in to cPanel.\n\n\nStep 3: Configure a database and a database user\n\n",
      "url": "/guides/v2.0/install-gde/prereq/merch_install.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-message-queues-message-queues-html": {
      "title": "Message Queues",
      "content": "Message queues provide an asynchronous communications mechanism in which the sender and the receiver of a message do not contact each other. Nor do they need to communicate with the message queue at the same time. When a sender places a messages onto a queue, it is stored until the recipient receives them.\n\nIn Magento Commerce, the Message Queue Framework (MQF) is a fully-functional system that allows a module to publish messages to queues. It also creates consumers to receive them asynchronously. The MQF primarily uses RabbitMQ as the messaging broker, which  provides a scalable platform for sending and receiving messages. It also includes a mechanism for storing undelivered messages. RabbitMQ is based on the Advanced Message Queuing Protocol (AMQP) 0.9.1 specification.\n\nA basic message queue system can also be set up without using RabbitMQ. In this system, a MySQL adapter stores messages in the database. Three database tables (queue, queue_message, and queue_message_status) manage the message queue workload. Cron jobs ensure the consumers are able to receive messages. This solution is not very scalable. RabbitMQ should be used whenever possible.\n\nSee Configure message queue topology for information about setting up the message queue system.\n\nSend a message from the publisher to a queue\n\nThe following code sends a message to the queue. The publish method is defined in PublisherInterface\n\n$publisher-&gt;publish($topic, $message)\n\nIn an MySQL adapter environment, when a message is published to multiple queues, create a single record in queue_message and multiple records in queue_message_status: one for each queue. (A join on the queue, queue_message, and queue_message_status tables is required).\n\nInstantiate a consumer\n\nThe procedure for instantiating a consumer differs, depending on which message queue system is being used.\n\nRabbitMQ\nThis instantiates a consumer that is defined in a queue.xml file. The consumer (customer_created_listener)listens to the queue and receives all new messages. For every message, it invokes Magento\\Some\\Class::processMessage($message)\n\n$this-&gt;consumerFactory-&gt;get('customer_created_listener')\n    -&gt;process();\n\nMySQL adapter\n\nImplement \\Magento\\Framework\\MessageQueue\\ConsumerInterface::process($maxNumberOfMessages) to instantiate a consumer.\n\nPerform the following actions:\n\n\n  Define the queue name associated with current consumer using \\Magento\\Framework\\MessageQueue\\ConsumerConfigurationInterface::getQueueName.\n  Select $maxNumberOfMessages message records, filtering on the  queue_name field. You must join on all 3 tables. To accomplish this, you may want to extract fewer records at a time to improve load distribution between multiple consumers.\n  Decode the message using topic name taken from the \\Magento\\Framework\\MessageQueue\\ConsumerConfigurationInterface.\n  Invoke callback  Magento\\Framework\\MessageQueue\\ConsumerConfigurationInterface::getCallback and pass the decoded data as an argument.\n\n\nOverride topic configuration\nThe following sample introduces a runtime configuration that allows you to redefine the adapter for a topic.\n\n'queue' =&gt;\n    array(\n     'topics' =&gt; array(\n        'customer.created' =&gt; [publisher=\"default-rabitmq\"],\n        'order.created' =&gt; [publisher=\"default-rabitmq\"],\n    ),\n),\n\nRelated Topics\n\n\n  Message Queues Overview\n  Configure message queue topology\n  Install RabbitMQ\n\n",
      "url": "/guides/v2.0/extension-dev-guide/message-queues/message-queues.html"
    }
    ,
  
    "guides-v2-0-howdoi-migrate-migrate-code-html": {
      "title": "Code Migration",
      "content": "Migrate code from Magento 1 to Magento 2\n\nCustom code used by your Magento 1 store is compatible with Magento 2 in most cases. The code will require either rewriting or migrating.\n\nMagento offers code migration tools that can help with this process. Note that due to platform differences, the migration output requires additional work to make sure it can be successfully installed in a Magento 2 store.\n\nLearn more about the Code Migration Toolkit.\n",
      "url": "/guides/v2.0/howdoi/migrate/migrate-code.html"
    }
    ,
  
    "guides-v2-0-howdoi-migrate-migrate-data-html": {
      "title": "Data Migration",
      "content": "Migrate data from Magento 1 to Magento 2\n\nData Migration allows you to migrate several types of data from your Magento 1 store to Magento 2 store.\n\nStart your migration\n\n  Make sure that the Data Migration Tool has a network access to connect to Magento 1 and Magento 2 databases. Open ports in your firewall.\n  Stop all activity in the Magento 1.x Admin Panel (except for order management, such as shipping, creating invoice, credit memos etc.)\nNOTE: Activity cannot resume until your Magento 2 store goes live.\n  Stop all Magento 1.x cron jobs. \n  Use the migration tool to migrate settings and websites.\n  Copy your Magento 1.x media files to Magento 2.0. (You must copy these manually from &lt;magento1-root&gt;/media to &lt;magento2-root&gt;/pub/media) \n  Use Data Migration Tool to migrate your data from Magento 1 database to Magento 2 database. If some of your extensions have data you want to migrate, you might need to install these extensions adapted for Magento 2. In case the extensions have a different structure in Magento 2 database, use the mapping files provided with the Data Migration Tool.\n  Use the magento indexer:reindex command to reindex all indexers.\n  Thoroughly test your Magento 2.0 site.\n\n\nIncremental updates\n\nNow that you’ve migrated your data, you must incrementally capture data updates that are added in Magento 1 store (such as new orders, reviews and changes in customer profiles) and migrate it to Magento 2 store.\n\n\n  Start the incremental migration; updates run continually. \nYou can stop the updates at any time by pressing CTRL+C\n  Test your Magento 2 site during this time so you can catch any issues as soon as possible.\nIn case you find any issues, press Control+C to stop incremental migration and start it again after issues are resolved\n\n\nGo live\n\nNow that your Magento 2 site is up-to-date with Magento 1 and is functioning normally, do the following to cut over to the new site:\n\n\n  Put your Magento 1 system in maintenance mode (DOWNTIME STARTS).\n  Press Control+C in the migration tool command window to stop incremental updates.\n  Start your Magento 2 cron jobs.\n  In your Magento 2 system, reindex the stock indexer using the command magento indexer:reindex cataloginventory_stock.\n  Using a tool of your choice, hit pages in your Magento 2 system to cache pages in advance of customers using your storefront.\n  Perform any final verification of your Magento 2 site.\n  Change DNS, load balancers, and so on to point to new production hardware (DOWNTIME ENDS)\n  Magento 2 store is ready to use. You and Your customers can resume all activities.\n\n\nFor full information please see the complete Migration Guide\n\n",
      "url": "/guides/v2.0/howdoi/migrate/migrate-data.html"
    }
    ,
  
    "guides-v2-0-howdoi-migrate-migrate-extensions-html": {
      "title": "Migrate extensions",
      "content": "Migrate extensions from Magento 1 to Magento 2\n\nMagento 1 extensions in most cases will not be compatible with Magento 2 code. Many extension providers offer updated versions of their products available for purchase or download on the Magento Marketplace.\n\nUse this chance to review the list of extensions. To simplify future upgrades, install only the extensions that are required for your business.\n\nThere are no official tools available for migrating Magento 1 extensions to Magento 2.\nYou must create a new extension from your old code using the Magento 2 coding standard.\n\n",
      "url": "/guides/v2.0/howdoi/migrate/migrate-extensions.html"
    }
    ,
  
    "guides-v2-0-howdoi-migrate-migrate-themes-html": {
      "title": "Migrate themes",
      "content": "Migrate themes from Magento 1 to Magento 2\n\nMagento 1 themes cannot be migrated to Magento 2 directly but we provide the following options:\n\n\n  \n    Working with your frontend developer or designer to create a new theme for Magento 2. Use this chance to make sure your site is responsive and to follow best practices.\n\n    For assistance, see the Frontend Developer Guide\n  \n  \n    Installing one of the available themes from the Magento Marketplace.\n  \n  \n    Use the default Luma theme as a starting point and match the look and feel of your Magento 1 theme.\n  \n\n\n",
      "url": "/guides/v2.0/howdoi/migrate/migrate-themes.html"
    }
    ,
  
    "guides-v2-0-howdoi-migrate-migrate-html": {
      "title": "Migrate from Magento 1 to Magento 2",
      "content": "Migrate from Magento 1 to Magento 2\nMigration to Magento 2 involves four components: data, extensions, themes, and customizations.\n\nTo have a successful migration, use the following guidelines:\n\nBuild and test Magento 2\n\nTo prepare for the migration, make sure you do all of the following:\n\n\n  Set up a Magento 2.0 system using a topology and design that at least matches your existing Magento 1 system\n  To provide redundancy in the event of unexpected issues, we advise you to replicate your Magento 1.x database and use this Magento 1.x data for your migration\n  Install Magento 2 on a system that meets our system requirements\n\n\nNext steps\n\nFollow the links below to learn more about each of the four components.\n\n\n  Theme Migration\n  Extension Migration\n  Customizations Migration\n  Data Migration\n\n",
      "url": "/guides/v2.0/howdoi/migrate/migrate.html"
    }
    ,
  
    "guides-v2-0-migration-migration-manually-html": {
      "title": "Data that needs to be migrated manually",
      "content": "Data types\n\nThere are four kinds of data that need to be migrated manually:\n\n\n  \n    Media\n  \n  \n    Storefront design\n  \n  \n    Admin user accounts\n  \n  \n    Access Control Lists (ACLs)\n  \n\n\nMedia\n\nThis section discusses how to manually migrate media files.\n\nMedia files stored in the database\n\nThis section applies to you only if you store media files in the Magento database. This step should be performed before migration of data:\n\n\n  \n    Log in to the Magento 1 Admin Panel as an administrator.\n  \n  \n    Click System &gt; Configuration &gt; ADVANCED &gt; System.\n  \n  \n    In the right pane, scroll to Storage Configuration for Media.\n  \n  \n    From the Select Media Database list, click the name of your media storage database.\n  \n  \n    Click Synchronize.\n  \n\n\nThen, repeat the same steps in your Magento 2 Admin panel.\n\nMedia files in the file system\n\nAll media files (images for products, categories, the WYSIWYG editor, and so on) should be copied manually from &lt;your Magento 1 install dir&gt;/media to &lt;your Magento 2 install dir&gt;/pub/media.\n\nHowever, do not copy the .htaccess files located in the Magento 1 media folder. Magento 2 has its own .htaccess that should be preserved.\n\nStorefront design\n\n\n  \n    Design in files (CSS, JS, templates, XML layouts) changed its location and format\n  \n  \n    Layout Updates stored in database. Placed through Magento 1 Admin in CMS Pages, CMS Widgets, Category Pages and Product Pages\n  \n\n\nAccess Control Lists (ACLs)\n\nYou must manually re-create all:\n\n\n  \n    credentials for web service APIs (SOAP, XML-RPC, and REST)\n  \n  \n    administrative user accounts and associate them with access privileges\n  \n\n\n\n    \n        You may adjust the time zone for a database entity using the \\Migration\\Handler\\Timezone handler. See the Follow-up section for more details.\n    \n\n\nRelated topics\n\n\n  After migration\n\n",
      "url": "/guides/v2.0/migration/migration-manually.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-after-html": {
      "title": "After Migration",
      "content": "After you have completed your migration and thoroughly tested your new Magento 2 site, perform the following tasks:\n\n\n  \n    Put Magento 1 in maintenance mode and permanently stop all Admin activities\n  \n  \n    Start Magento 2 cron jobs\n  \n  \n    Flush all Magento 2 cache types\n  \n  \n    Reindex all Magento 2 indexers\n  \n  \n    Change DNS, load balancers, etc. to point to Magento 2 production hardware\n  \n\n",
      "url": "/guides/v2.0/migration/migration-migrate-after.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-data-html": {
      "title": "Migrate data",
      "content": "Before you start: routine preparations\n\n\n  \n    Log in to Magento server as the file system owner.\n  \n  \n    Change to the Magento /bin directory or make sure it is added to your system PATH.\n  \n\n\nSee the First steps section for more details.\n\nRun the data migration command\nTo start migrating data, run:\n\nbin/magento migrate:data [-r|--reset] {&lt;path to config.xml&gt;}\n\n\nwhere:\n\n\n  \n    [-r|--reset] is an optional argument that starts migration from the beginning. You can use this argument for testing migration.\n  \n  \n    {&lt;path to config.xml&gt;} is the absolute file system path to config.xml; this argument is required\n  \n\n\n\n\n  The Data Migration Tool saves its current progress as it runs. If errors or user intervention stop it from running, the Tool resumes progress at the last known good state.\n  To force the Data Migration Tool to run from the beginning, use the --reset argument. In that case, we recommend you restore your Magento 2 database dump to prevent duplicating previously migrated data.\n\n\nPossible consistency errors\n\nWhile running, the Data Migration Tool may report inconsistencies between Magento 1 and Magento 2 databases, and display messages like this:\n\nSource documents are not mapped: &lt;EXTENSION_TABLE&gt;\n\nSee the Troubleshooting section of this guide for more information and recommendations.\n\n\n\nNext migration step\n\nMigrate changes\n",
      "url": "/guides/v2.0/migration/migration-migrate-data.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-delta-html": {
      "title": "Migrate changes",
      "content": "Overview\n\nIncremental migration enables you to migrate only the changes made in Magento 1 since the last time you migrated data. These changes are:\n\n\n  \n    data that customers added via storefront (created orders, reviews, changes in customer profiles, etc.)\n  \n  \n    all operations with orders in the Magento Admin panel\n  \n\n\nBefore you start: routine preparations\n\n\n  \n    Log in to Magento server as the file system owner.\n  \n  \n    Change to the Magento /bin directory or make sure it is added to your system PATH.\n  \n\n\nSee the First steps section for more details.\n\nRun the incremental migration command\n\nTo start migrating incremental changes, run:\n\nbin/magento migrate:delta [-r|--reset] {&lt;path to config.xml&gt;}\n\n\nwhere;\n\n\n  \n    [-r|--reset] is an optional argument that starts migration from the beginning. You can use this argument for testing migration.\n  \n  \n    {&lt;path to config.xml&gt;} is the absolute file system path to config.xml; this argument is required.\n  \n\n\n\n\n  Incremental migration runs continuously until you stop it by pressing CTRL+C.\n\n\nMigrate data created by 3rd party extensions\n\nIn the Delta mode, the Data Migration Tool migrates data created only by Magento’s own modules and is not responsible for the code or extensions made by third-party developers. If these extensions created data in the storefront database and the merchant wants to have this data in Magento 2 — config files of the Data Migration Tool should be created and modified accordingly.\n\nIf an extension has its own tables, and you need to track their changes for delta migration, follow these steps:\n\n\n  \n    Add the tables to be tracked to the deltalog.xml file\n  \n  \n    Create an additional delta class which extends the Migration\\App\\Step\\AbstractDelta\n  \n  \n    Add the name of the newly created class to the delta mode section of config.xml\n  \n\n\nRelated topics\n\n\n  Data that needs to be migrated manually\n\n",
      "url": "/guides/v2.0/migration/migration-migrate-delta.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-follow-up-html": {
      "title": "Follow-up (info and steps)",
      "content": "Overview\n\nSome behaviour and logic of Magento 1 has been implemented differently in Magento 2. The Data Migration Tool takes care of it. Although, there are some migration aspects you should know about, and sometimes you must take minor steps for some functionalities to work smoothly after migration.\n\nInformation\n\nSplit database not supported\n\nThe Data Migration Tool doesn’t support split databases.\n\nGroup Prices converted to Tier Prices\n\nAll Group Prices are automatically converted to Tier Prices during migration.\n\nNew numbering for sales entities\n\nReference numbers for Orders, Invoices, Shipments, Credit Memos, and RMA migrate as is. But after migration, the new Magento 2 number assignment rules will apply. Thus, the numeration for the new sales entities will be different.\n\nSteps\n\nResave Customer Segments [Magento Commerce only]\n\nAfter migration, Customer Segments must be resaved from the Admin Panel to get them up and running.\n\nConfigure time zone offset\n\nIf your Magento 1 server has the time zone set to anything other than UTC, you must configure the offset to migrate timestamp fields. To transform time to a different time zone, use the Data Migration Tool’s \\Migration\\Handler\\Timezone handler.\n\nIn the following example, the Magento 1 server timezone is UTC-7. To convert the customer account creation date properly, add the following rule to map-customer.xml:\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;map xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" xs:noNamespaceSchemaLocation=\"../map.xsd\"&gt;\n  &lt;!--...--&gt;\n  &lt;destination&gt;\n      &lt;field_rules&gt;\n          &lt;!--...--&gt;\n          &lt;transform&gt;\n              &lt;field&gt;customer_entity.created_at&lt;/field&gt;\n              &lt;handler class=\"\\Migration\\Handler\\Timezone\"&gt;\n                  &lt;param name=\"offset\" value=\"-7\" /&gt;\n              &lt;/handler&gt;\n          &lt;/transform&gt;\n      &lt;/field_rules&gt;\n  &lt;/destination&gt;\n&lt;/map&gt;\n\n",
      "url": "/guides/v2.0/migration/migration-migrate-follow-up.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-settings-html": {
      "title": "Migrate settings",
      "content": "Overview\n\nThe Settings mode migrates stores, websites, and system configuration like shipping, payment, tax settings, etc.\nAccording to our data migration order, you should migrate settings first.\n\nBefore you start: routine preparations\n\n\n  \n    Log in to Magento server as the file system owner.\n  \n  \n    Change to the Magento /bin directory or make sure it is added to your system PATH.\n  \n\n\nSee the First steps section for more details.\n\nRun the settings migration command\n\nTo start migrating settings, run:\n\nbin/magento migrate:settings [-r|--reset] {&lt;path to config.xml&gt;}\n\n\nwhere:\n\n\n  \n    [-r|--reset] is an optional argument that starts migration from the beginning. You can use this argument for testing migration\n  \n  \n    {&lt;path to config.xml&gt;} is the absolute file system path to config.xml; this argument is required.\n  \n\n\n\n\n  This command does not migrate all configuration settings. Verify all settings in the Magento 2 Admin before proceeding.\n\n\nThe Migration completed message is displayed after the settings are transferred successfully.\n\nConfigure custom migration rules\n\nYou may ignore, rename or change the system configurations when migrating settings. For this, specify your custom rules in the settings.xml file.\n\n\n  \n    Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n  \n    Change to the following directory:\n\n    &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/&lt;edition-to-edition&gt;\n    \n\n    For example, if Magento 2 is installed in /var/www/html, you’ll find settings.xml.dist in one of the following directories:\n\n    /var/www/html/vendor/magento/data-migration-tool/etc/opensource-to-commerce\n/var/www/html/vendor/magento/data-migration-tool/etc/commerce-to-commerce\n/var/www/html/vendor/magento/data-migration-tool/etc/opensource-to-opensource\n    \n  \n  \n    To create a settings.xml file from the provided sample, run:\n\n     cp settings.xml.dist settings.xml\n    \n  \n  \n    Make your changes in settings.xml.\n  \n  \n    Specify the new name of the settings file for mapping. To do that, change the &lt;settings_map_file&gt; tag in the path/to/config.xml file.\n  \n\n\nFor more details, see the Settings migration mode section of the Tool’s specification.\n\nNext migration step\n\n\n  Migrate data\n\n",
      "url": "/guides/v2.0/migration/migration-migrate-settings.html"
    }
    ,
  
    "guides-v2-0-migration-migration-migrate-html": {
      "title": "Migrate using Data Migration Tool",
      "content": "General rules for successful migration\n\nBefore you start migration, stop all Magento 1 cron jobs.\n\nDuring the migration process, do not:\n\n\n  \n    Make any changes in the Magento 1 Admin except for order management (shipping, creating invoice, credit memos, etc.)\n  \n  \n    Alter any code\n  \n  \n    Make changes in the Magento 2 Admin and storefront\n  \n\n\n\n  All operations in Magento 1 storefront are allowed at this time.\n\n\nRun Data Migration Tool\nThis section shows how to run the Data Migration Tool to migrate settings, data, or incremental changes.\n\nFirst steps\n\n\n\n  \n    \n      Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n      If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n      su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n      \n\n      If the Magento file system owner does not allow logins you can do the following:\n\n      sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n      \n    \n    \n      To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n      Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n      bash shell example for CentOS:\n\n      export PATH=$PATH:/var/www/html/magento2/bin\n      \n    \n  \n\n  \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n  In addition to the command arguments mentioned here, see Common arguments\n\n  Command syntax\n\n  Below is a typical command example:\n\n  bin/magento migrate:&lt;mode&gt; [-r|--reset] {&lt;path to config.xml&gt;}\n\n  where:\n\n  \n    \n      &lt;mode&gt; may be: settings, data, or delta\n    \n    \n      [-r|--reset] is an optional argument that starts migration from the beginning. You can use this argument for testing migration.\n    \n    \n      {&lt;path to config.xml&gt;} is the absolute file system path to config.xml; this argument is required.\n    \n  \n\n  \n\n  Logs are written to the &lt;your Magento install dir&gt;/var/ directory.\n\n\n  Migration order\n\n  When we created the Data Migration Tool, we assumed the following data transfer sequence:\n\n  \n    Settings\n    Data\n    Changes\n  \n\n  That’s why we strongly recommend to keep this order to migrate quickly and with no issues.\n\n",
      "url": "/guides/v2.0/migration/migration-migrate.html"
    }
    ,
  
    "guides-v2-0-migration-migration-overview-how-html": {
      "title": "How migration works",
      "content": "Terminology\n\nThis document uses the following terminology to discuss the Data Migration Tool:\n\n\n  \n    Step: A unique migration task that must be executed in a prescribed order\n  \n  \n    Map: A set of rules that describe connections between Magento 1.x and Magento 2.x data structures\n  \n  \n    Mode: Represented by a separate Data Migration Tool command, defines the basic mode of operation as:\n\n    \n      \n        Settings: Migrates the system configuration and website-related settings\n      \n      \n        Data: Migrates database assets in bulk\n      \n      \n        Delta: Migrates incremental changes (for example, orders and inventory)\n      \n    \n  \n\n\nMigration modes (phases)\n\nThis guide provides information about migration using the Data Migration Tool that can transfer and adapt data from Magento 1 to Magento 2 stores. The migration in overall is split into three phases (or “modes”):\n\n\n  \n    Configuration settings\n  \n  \n    Data\n  \n  \n    Delta (changes since the last run)\n  \n\n\nEach mode is divided into steps, each of which is responsible for transferring particular data (for example, URL rewrite step, EAV step, settings step, and so on). At the begin of a run, a step checks the table structures of Magento 1 and Magento 2 for consistency. Then the actual data is transferred to Magento 2. In the end, this data is verified.\n\nThis section previews your migration experience by providing a high-level overview of the Data Migration Tool.\n\nConceptual overview\n\nThe data migration tool recognizes the differences in database structure between Magento 1.x versions. Most of these database structural differences are declared in map files. Each step in the process uses map files to transform data for use in your Magento 2 store.\n\nFor example, when you transform data from a Magento Open Source 1.8.0.0 database to Magento Open Source 2.x.x, the map file accounts for the fact that a table was renamed and renames it accordingly in the destination database. If there are no differences in data structure or data format, the Data Migration Tool transfers it as-is to the Magento 2 database, including data from tables created by extensions.\n\nWhen differences are not declared in map files, then the Data Migration Tool displays an error and does not start.\n\nMapping files are discussed in more detail in  Data Migration Tool Technical Specification.\n\nMigration flow diagram\n\n\n",
      "url": "/guides/v2.0/migration/migration-overview-how.html"
    }
    ,
  
    "guides-v2-0-migration-migration-overview-practices-html": {
      "title": "Best practices and benchmarking",
      "content": "Overview\n\nThis section provides our best information about how to speed up and simplify your migration, and provides guidance about how much time you can expect migration to require.\n\nBest practices and recommendations\n\n\n  \n    Use a copy of the database from Magento 1 instance when performing migration testing. Do not involve the main instance of your Magento 1 store database so that your production environment is not affected.\n  \n  \n    Remove outdated and redundant data from your Magento 1 database before migration.\n\n    Such data may include logs, order quotes, recently viewed or compared products, visitors, event-specific categories, promotional rules, etc.\n  \n  \n    Follow our General Rules for Successful Migration to avoid issues or conflicts.\n  \n  \n    To boost performance, you may enable the direct_document_copy option in your config.xml:\n\n      &lt;direct_document_copy&gt;1&lt;/direct_document_copy&gt;\n    \n\n    In this case, Magento 1 and Magento 2 databases must be located in the same MySQL instance, and the database account must have access to each database.\n  \n\n\nBenchmarking estimates\n\nWe tested migration on the following system:\n\n\n  \n    Environment: Virtual Box VM, CentOS 6, 2.5Gb RAM, CPU 1 core 2.6GHz\n  \n  \n    Database had 177k products, 355k orders, 214k customers\n  \n\n\nPerformance results\n\n\n  \n    Settings migration time: ~10 mins\n  \n  \n    Data migration time: ~9 hrs (all data except URL Rewrites, ~85% of total data)\n  \n  \n    Site downtime estimate: a few minutes to reindex and change DNS settings. Additional time required to “warm up” the page cache\n  \n\n",
      "url": "/guides/v2.0/migration/migration-overview-practices.html"
    }
    ,
  
    "guides-v2-0-migration-migration-overview-supported-html": {
      "title": "Versions supported",
      "content": "Migration from versions\n\nThe Data Migration Tool supports migration from the following versions:\n\n\n  \n    Magento Commerce:\n\n    \n      \n        1.11.x\n      \n      \n        1.12.x\n      \n      \n        1.13.x\n      \n      \n        1.14.x\n      \n    \n  \n  \n    Magento Open Source:\n\n    \n      \n        1.6.x\n      \n      \n        1.7.x\n      \n      \n        1.8.x\n      \n      \n        1.9.x\n      \n    \n  \n\n\nIf you migrate from Magento Open Source to Magento Commerce, the following versions are supported:\n\n\n  \n    1.6.x\n  \n  \n    1.7.x\n  \n  \n    1.8.x\n  \n  \n    1.9.x\n  \n\n\nMigration to version\n\nTo know the supported Magento 2 version (the one you’re migrating to), see the Data Migration Tool’s Release page.\n",
      "url": "/guides/v2.0/migration/migration-overview-supported.html"
    }
    ,
  
    "guides-v2-0-migration-migration-plan-html": {
      "title": "Creating a migration plan",
      "content": "To migrate successfully and avoid issues, you need to thourougly plan and test your migration. We hope the guidelines below will prove helpful.\n\nBefore you start: Consider upgrade\n\nMigration is a perfect moment to make serious changes and get your site ready for the next level of growth. Consider whether your new site needs to be designed with more hardware or a more advanced topology with better caching tiers, etc.\n\nStep 1: Review extensions on your current site\n\n\n  \n    What extensions have you installed?\n  \n  \n    Have you identified if you need all these extensions on your new site?  (There might be old ones you can safely remove.)\n  \n  \n    Have you determined if Magento 2 versions of your extensions exist?  (Visit Magento Marketplace to find the latest versions or contact your extension provider.)\n  \n  \n    What database assets from your extensions do you want to migrate?\n  \n\n\nStep 2: Build and prepare Magento 2 store for migration\n\n\n  \n    Set up a Magento 2 hardware system using topology and design that at least matches your existing Magento 1 system\n  \n  \n    Install Magento 2.x (with all modules of this release) and the Data Migration Tool on a system that meets the Magento system requirements\n  \n  \n    Make your custom adjustments to the Data Migration Tool code in case you do not need to migrate some data (like CMS Pages, Sales Rules, etc.) or want to convert your Magento customization during migration. Read the Data Migration Tool’s Technical Specification to better understand how migration works from inside\n  \n\n\nStep 3: Dry run\n\nBefore you start migration on the production environment, it would be best to go through all the migration steps on your testing environment.\n\nIn such migration testing, follow these steps:\n\n\n  \n    Copy your Magento 1 store to a staging server\n  \n  \n    Fully migrate the replicated Magento 1 store to Magento 2\n  \n  \n    Thoroughly test your new store\n  \n\n\nStep 4: Start your migration\n\n\n  \n    Make sure that the Data Migration Tool has a network access to connect to Magento 1 and Magento 2 databases. Open the corresponding ports in your firewall.\n  \n  \n    Stop all activities in the Magento 1.x Admin Panel, except for order management, such as shipping, creating invoice, credit memos, etc (the list of allowed activities can be extended by adjusting settings of the Delta mode in the Data Migration Tool). Note: such activities must not be resumed until your Magento 2 store goes live.\n  \n  \n    We recommend to stop all Magento 1.x cron jobs.\n\n    Still, if some jobs are required to run during migration, make sure they do not create new database entities or change the existing ones in the way that such entities cannot be processed by the Delta mode.\n\n    For example: the enterprise_salesarchive_archive_orders cron job moves old orders to archive. Running this job during migration is safe because the Delta mode takes the job into account and thus properly processes the archived orders.\n  \n\n\n\n  \n    Use the Data Migration Tool to migrate settings and websites.\n  \n  \n    Copy your Magento 1.x media files to Magento 2.x.\n\n    You must copy these files manually from the magento1-root/media directory to magento2-root/pub/media.\n  \n\n\n\n  \n    Use the Data Migration Tool to bulk copy your data from Magento 1 database to Magento 2 database.\n\n    If some of your extensions have data you want to migrate, you might need to install these extensions adapted for Magento 2. In case the extensions have a different structure in Magento 2 database, use the mapping files provided with the Data Migration Tool.\n  \n\n\n\n  Reindex all Magento 2.x indexers. For details, see the Configuration guide.\n\n\nStep 5: Make changes to the migrated data (if needed)\n\nSometimes you may want to have your Magento 2 store with different catalog structure, sales rules, CMS pages, etc. after migration.\n\nIt is is important to practice caution while working through manual data changes. Mistakes will create errors in the incremental data migration step that follows.\n\nFor example, a product deleted from Magento 2: the one that has been bought on your live Magento 1 store and which is not available anymore in your Magento 2 store. Transferring data about such purchase might cause an error while running the Data Migration Tool in Delta mode.\n\nStep 6: Update incremental data\n\nAfter migrating data, you must incrementally capture data updates that have been added in the Magento 1 store (such as new orders, reviews, and changes in customer profiles) and transfer these updates to the Magento 2 store using the Delta mode.\n\n\n  \n    Start the incremental migration; updates will run continually.\nYou can stop transferring updates at any time by pressing Ctrl+C\n  \n  \n    Test your Magento 2 site during this time to catch any issues as soon as possible.\nIn case of such issues, press Ctrl+C to stop incremental migration and start it again after issues are resolved\n  \n\n\n\n  Volume check warnings may appear in case you conduct testing of your Magento 2 site and run migration process at the same time. It happens because in Magento 2 you create entities that do not exist in Magento 1 instance.\n\n\nStep 7: Go live\n\nNow that your Magento 2 site is up-to-date with Magento 1 and is functioning normally, do the following to cut over to the new site:\n\n\n  \n    Put your Magento 1 system in maintenance mode (DOWNTIME STARTS).\n  \n  \n    Press Control+C in the migration tool command window to stop incremental updates.\n  \n  \n    Start your Magento 2 cron jobs.\n  \n  \n    In your Magento 2 system, reindex the stock indexer. For more information, see the Configuration guide.\n  \n  \n    Using a tool of your choice, hit pages in your Magento 2 system to cache pages in advance of customers who use your storefront.\n  \n  \n    Perform any final verification of your Magento 2 site.\n  \n  \n    Change DNS, load balancers, and so on to point to new production hardware (DOWNTIME ENDS).\n  \n  \n    Magento 2 store is now ready to use. You and your customers can resume all activities.\n  \n\n\n\n",
      "url": "/guides/v2.0/migration/migration-plan.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-configure-html": {
      "title": "Configure migration",
      "content": "Overview of Data Migration Tool configuration\n\nAfter you install the data migration tool, the following directory contains mapping and configuration files:\n\n\n  \n    Magento Open Source:\n\n    \n      &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/ce-to-ce: Configuration and scripts for migrating from Magento Open Source 1 to Magento Open Source 2\n    \n  \n  \n    Magento Commerce:\n\n    \n      &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/ce-to-ee: Configuration and scripts for migrating from Magento Open Source 1 to Magento Commerce 2\n      &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/ee-to-ee: Configuration and scripts for migrating from Magento Commerce 1 to Magento Commerce 2\n    \n  \n\n\nThe preceding directories contain subdirectories for each supported version.\n\nConfiguring the migration\n\nBefore you migrate any data, you must create a config.xml configuration file from the provided sample.\n\nTo create a configuration file:\n\n\n  \n    Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n  \n    Change to the following directory:\n\n    &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/&lt;migration edition&gt;/&lt;ce or version&gt;\n    \n  \n  \n    Enter the following command to create a config.xml from the provided sample:\n\n    cp config.xml.dist config.xml\n    \n  \n  \n    Open config.xml in a text editor.\n  \n  \n    Specify the following at minimum:\n  \n\n\n&lt;source&gt;\n    &lt;database host=\"127.0.0.1\" name=\"magento1\" user=\"root\"/&gt;\n&lt;/source&gt;\n&lt;destination&gt;\n    &lt;database host=\"127.0.0.1\" name=\"magento2\" user=\"root\"/&gt;\n&lt;/destination&gt;\n&lt;options&gt;\n    &lt;crypt_key /&gt;\n&lt;/options&gt;\n\nThe &lt;crypt_key&gt; tag is mandatory to fill. It can be found in local.xml file which is located in the directory of Magento 1 instance at app/etc/local.xml in &lt;key&gt; tag\n\nOptional parameters:\n\n\n  \n    Database user password: password=&lt;password&gt;\n  \n  \n    Table prefix: &lt;source_prefix&gt;, &lt;dest_prefix&gt;\n  \n\n\nFor example, if your database owner’s user name is root with password pass and you use the prefix magento1 in your Magento 1 database, use the following in config.xml:\n\n&lt;source&gt;\n    &lt;database host=\"127.0.0.1\" name=\"magento1\" user=\"root\" password=\"pass\"/&gt;\n&lt;/source&gt;\n&lt;destination&gt;\n    &lt;database host=\"127.0.0.1\" name=\"magento2\" user=\"root\" password=\"pass\"/&gt;\n&lt;/destination&gt;\n&lt;options&gt;\n    &lt;source_prefix&gt;magento1&lt;/source_prefix&gt;\n    &lt;crypt_key&gt;f3e25abe619dae2387df9fs594f01985&lt;/crypt_key&gt;\n&lt;/options&gt;\n\nWhen finished, save your changes to config.xml and exit the text editor.\n\nWork with configuration and mapping files\n\nThe Data Migration Tool uses mapping files to enable you to perform custom database mapping between your Magento 1 and Magento 2 databases, including:\n\n\n  \n    Changing table names\n  \n  \n    Changing field names\n  \n  \n    Ignoring tables or fields\n  \n  \n    Adapt transferring data of a field to Magento 2 format\n  \n\n\nMapping files for supported Magento versions are located in subdirectories of &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc\n\nTo use the mapping files:\n\n\n  \n    Rename or copy them to remove the .dist extension.\n  \n  \n    Edit them using the schema located in\n\n    &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc.\n  \n  \n    Then change config.xml in &lt;options&gt; node with the new name of the file.\n  \n\n\nThe &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc and &lt;your Magento 2 install dir&gt;/vendor/magento/data-migration-tool/etc/&lt;ce version&gt; directories contain the following configuration files:\n\nEven though you will be working with map.xml.dist file most of the time, the following table discusses each mapping and other files.\n\n\n\n\t\n\t\tMapping file name\n\t\tDescription\n\t\n\n\tclass-map.xml.dist\n\tDictionary of class mappings between Magento 1 and Magento 2\n\n\n\tconfig.xml.dist\n\tMain configuration file that specifies the Magento 1 and Magento 2 database configurations, step configuration, and links to mapping files\n\n\n\tMagento Commerce only. customer-attr-document-groups.xml.dist\n\tList of tables used in the custom customer attributes step.\n\n\n\tMagento Commerce only. customer-attr-map.xml.dist\n\tMap file that is used in Custom Customer Attributes Step.\n\n\n\tdeltalog.xml.dist\n\tContains the list of tables required for database routines setup.\n\n\n\teav-attribute-groups.xml.dist\n\tContains list of attributes that are used in Eav Step.\n\n\n\teav-document-groups.xml.dist\n\tContains list of tables that are used in Eav Step.\n\n\n\tlog-document-groups.xml.dist\n\tContains list of tables that are used in Log Step.\n\n\n\tmap-eav.xml.dist\n\tMap file that is used in EAV Step.\n\n\n\tmap-log.xml.dist\n\tLog mapping file.\n\n\n\tMagento Commerce only. map-sales.xml.dist\n\tMap file that is used in SalesOrder step.\n\n\n\tmap.xml.dist\n\tMapping file required for the map step.\n\n\n\tsettings.xml.dist\n\tSetting migration configuration file that specifies rules required for migrating the core_config_data table.\n\n\n\n\tcustomer-attribute-groups.xml\n\tContains list of attributes that are used in Customer Attributes Step.\n\n\n\n\tcustomer-document-groups.xml\n\tContains list of tables that are used in Customer Attributes Step.\n\n\n\n\tmap-customer.xml\n\tMap file that is used in Customer Attributes Step.\n\n\n\n\torder-grids-document-groups.xml\n\tContains list of tables that are used in OrderGrids Step.\n\n\n\n\n\nYou can refer to  Data Migration Tool Technical Specification for more details.\n\nNext step\nMigrate using data migration tool\n",
      "url": "/guides/v2.0/migration/migration-tool-configure.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-install-html": {
      "title": "Install Data Migration Tool",
      "content": "Prerequisite: Versions of Magento and Data Migration Tool must match\n\nMake sure you are using the same released version of both Magento 2 and the Data Migration Tool. For example, for Magento version 2.1.2, you must also use the Data Migration Tool version 2.1.2.\n\nCheck your Magento 2 version\n\nComposer metapackage\n\nIf you downloaded the Magento software using a Composer metapackage, enter the following command:\n\nphp &lt;your Magento install dir&gt;/bin/magento --version\n\n\nGithub repository\n\nIf you cloned the Magento 2 GitHub repository, enter the following commands:\n\ncd &lt;your Magento 2 clone directory&gt;\ngit branch\n\n\nIf you’re currently in the develop branch, you must change to a released branch before you continue.\n\n\n\tIf you haven't installed the Magento software yet, install it now.\n\n\tIf you're cloning the GitHub repository, make sure you check out a release tag as discussed in (Contributor) Clone the Magento repository.\n\n\nFind released versions of Data Migration Tool\n\nGo to the Releases page of the Data Migration Tool Github repository to find available released versions.\n\nInstall Data Migration Tool\n\nYou may install the Data Migration Tool from:\n\n\n  \n    repo.magento.com\n  \n  \n    GitHub\n  \n\n\n\n  Before installing, make sure you have:\n\t\n\t\t\n\t\t\tCompleted all tasks mentioned in the Preconditions section\n\t\t\n\n\t\t\n\t\t\tVerified the version of the Magento 2 software\n\t\t\n\t\n\n\nInstall from repo.magento.com\n\nTo install the Data Migration Tool, you must update composer.json in the Magento root installation directory to provide the location of the Data Migration Tool package.\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to Magento 2 root directory.\n  \n    Enter the following commands:\n\n    composer config repositories.magento composer https://repo.magento.com\ncomposer require magento/data-migration-tool:&lt;version&gt;\n    \n\n    where &lt;version&gt; must match the version of the Magento 2 codebase.\n\n    For example, for version 2.1.2, enter:\n\n    composer config repositories.magento composer https://repo.magento.com\ncomposer require magento/data-migration-tool:2.1.2\n    \n  \n  When prompted, enter your authentication keys. Your public key is your username; your private key is your password.\n\n\nInstall from GitHub\n\nIf you’ve cloned Magento 2 from the GitHub repository, follow the steps below to install the Data Migration Tool.\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to Magento 2 root directory.\n  \n    Enter the following commands:\n\n    composer config repositories.data-migration-tool git https://github.com/magento/data-migration-tool\ncomposer require magento/data-migration-tool:&lt;version&gt;\n    \n\n    where &lt;version&gt; must match the version of the Magento 2 codebase.\n\n    For example, for version 2.1.2, enter:\n\n    composer config repositories.data-migration-tool git https://github.com/magento/data-migration-tool\ncomposer require magento/data-migration-tool:2.1.2\n    \n  \n\n\nCheck version of installed Data Migration Tool\n\n\n  \n    Change to your Data Migration Tool directory: &lt;vendor&gt;/magento/data-migration-tool.\n  \n  \n    Open composer.json in a text editor.\n  \n  \n    The version entry in that file is the version of the Data Migration Tool.\n  \n\n\nRelated topics\n\n\n  Configure migration\n  Preconditions\n\n\n",
      "url": "/guides/v2.0/migration/migration-tool-install.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-internal-spec-html": {
      "title": "Data Migration Tool Technical Specification",
      "content": "Overview\n\nThis section describes an implementation details of Data Migration Tool and how to extend its functionality.\n\nRepositories\n\nData Migration Tool repository migration-tool\n\nSystem requirements\n\nSame as for Magento 2\n\nInternal structure\n\nDirectory structure\n\nThe following diagram represents directory structure of Data Migration Tool:\n\n\n\n├── etc                                    --- all configuration files\n│   ├── opensource-to-opensourc            --- configuration files for migration from Magento Open Source 1 to Magento Open Source 2\n│   │   ├── 1.9.1.1\n│   │   │   ├── config.xml.dist\n│   │   │   └── map.xml.dist\n│   │   ├── 1.9.2.0\n│   │   │   ├── config.xml.dist\n│   │   │   └── map.xml.dist\n│   │   ├── ........\n│   │   ├── class-map.xml.dist\n│   │   ├── deltalog.xml.dist\n│   │   └── settings.xml.dist\n│   │   ├── ........\n│   ├── opensource-to-commerce              --- configuration files for migration from Magento Open Source 1 to Magento Commerce 2\n│   ├── commerce-to-commerce                --- configuration files for migration from Magento Commerce 1 to Magento Commerce 2\n│   ├── class-map.xsd\n│   ├── config.xsd\n│   ├── map.xsd\n│   └── settings.xsd\n├── src\n│   └── Migration\n│       ├── App                             --- application framework\n│       ├── Console\n│       ├── Handler                         --- handlers are used by map files\n│       │   ├── AbstractHandler.php\n│       │   ├── AddPrefix.php\n│       │   ├── ConvertIp.php\n│       │   ├── ........\n│       ├── Logger\n│       ├── Reader\n│       ├── Mode\n│       │   ├── AbstractMode.php\n│       │   ├── Data.php\n│       │   ├── Delta.php\n│       │   └── Settings.php\n│       ├── ResourceModel                   --- contains adapter for connection to data storage and classes to work with structured data\n│       │   ├── Adapter\n│       │   │   └── Mysql.php\n│       │   ├── AbstractCollection.php\n│       │   ├── AbstractResource.php\n│       │   ├── AdapterInterface.php\n│       │   ├── Destination.php\n│       │   ├── Document.php\n│       │   ├── Record.php\n│       │   ├── Source.php\n│       │   └── Structure.php\n│       ├── Config.php\n│       ├── Exception.php\n│       └── Step                            --- functionality for migrating specific data\n│           ├── Eav\n│           │   ├── Data.php\n│           │   ├── Helper.php\n│           │   ├── InitialData.php\n│           │   ├── Integrity.php\n│           │   └── Volume.php\n│           ├── Map\n│           │   ├── Data.php\n│           │   ├── Delta.php\n│           │   ├── Helper.php\n│           │   ├── Integrity.php\n│           │   └── Volume.php\n│           ├── UrlRewrite\n│           │   ├── Version11300to2000.php\n│           │   ├── Version11410to2000.php\n│           │   └── Version191to2000.php\n│           ├── ..........\n└── tests\n    ├── integration\n    ├── static\n    └── unit\n\n\n\nEntry Point\n\nScript that runs migration process is located at magento-root/bin/magento\n\nConfiguration\n\nThe Schema for configuration file config.xsd is placed under etc/directory. Default configuration file config.xml.dist is created for each version of Magento 1.x. It is placed in separate directories under etc/.\n\nDefault configuration file can be replaced by custom one using CLI (see –config &lt;value&gt; parameter).\n\nConfiguration file has the following structure:\n\n&lt;config xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" xs:noNamespaceSchemaLocation=\"config.xsd\"&gt;\n    &lt;steps mode=\"settings\"&gt;\n        &lt;step title=\"Settings step\"&gt;\n            &lt;integrity&gt;Migration\\Step\\Settings&lt;/integrity&gt;\n            &lt;data&gt;Migration\\Step\\Settings&lt;/data&gt;\n        &lt;/step&gt;\n    &lt;/steps&gt;\n    &lt;steps mode=\"data\"&gt;\n        &lt;step title=\"Map step\"&gt;\n            &lt;integrity&gt;Migration\\Step\\Map\\Integrity&lt;/integrity&gt;\n            &lt;data&gt;Migration\\Step\\Map\\Data&lt;/data&gt;\n            &lt;volume&gt;Migration\\Step\\Map\\Volume&lt;/volume&gt;\n        &lt;/step&gt;\n        ...\n    &lt;/steps&gt;\n    &lt;steps mode=\"delta\"&gt;\n        &lt;step title=\"Map step\"&gt;\n            &lt;delta&gt;Migration\\Step\\Map\\Delta&lt;/delta&gt;\n            &lt;volume&gt;Migration\\Step\\Map\\Volume&lt;/volume&gt;\n        &lt;/step&gt;\n        ...\n    &lt;/steps&gt;\n    &lt;source&gt;\n        &lt;database host=\"localhost\" name=\"magento1\" user=\"root\" password=\"\"/&gt;\n    &lt;/source&gt;\n    &lt;destination&gt;\n        &lt;database host=\"localhost\" name=\"magento2\" user=\"root\" password=\"\"/&gt;\n    &lt;/destination&gt;\n    &lt;options&gt;\n        &lt;map_file&gt;map-file.xml&lt;/map_file&gt;\n        &lt;settings_map_file&gt;settings-map-file.xml&lt;/settings_map_file&gt;\n        &lt;bulk_size&gt;100&lt;/bulk_size&gt;\n        &lt;custom_option&gt;custom_option_value&lt;/custom_option&gt;\n        &lt;source_prefix /&gt;\n        &lt;dest_prefix /&gt;\n        ...\n    &lt;/options&gt;\n&lt;/config&gt;\n\n\n  \n    steps - describes all steps that are processed during migration\n  \n  \n    source - configuration for data source. Available source types: database\n  \n  \n    destination - configuration for data destination. Available destination types: database\n  \n  \n    options - list of parameters. Contains both mandatory (map_file, settings_map_file, bulk_size) and optional (custom_option, resource_adapter_class_name, prefix_source, prefix_dest, log_file) parameters\n  \n\n\nChange prefix option in case Magento was installed with prefix in database tables. It can be set for Magento 1 and Magento 2 databases. Use the “source_prefix” and “dest_prefix” configuration options accordingly.\n\nConfiguration data is accessible via \\Migration\\Config class.\n\nStep internals\n\nThe migration process consists of steps.\n\nStep is a unit that provides functionality required for migration some separated data. Step can consist of one or more stages e.g. integrity check, data, volume check, delta.\n\nBy default, there are several steps (Map, EAV, URL Rewrites, and so on). You can optionally add your own steps as well.\n\nSteps related classes are located in the src/Migration/Step directory.\n\nTo execute a Step class, the class must be defined in config.xml file.\n\n&lt;config xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" xs:noNamespaceSchemaLocation=\"config.xsd\"&gt;\n    &lt;steps mode=\"mode_name\"&gt;\n        &lt;step title=\"Step Name\"&gt;\n            &lt;integrity&gt;Migration\\Step\\StepName\\Inegrity&lt;/integrity&gt;  &lt;!-- integrity check stage of the step --&gt;\n            &lt;data&gt;Migration\\Step\\StepName\\Data&lt;/data&gt;\n            &lt;volume&gt;Migration\\Step\\StepName\\Volume&lt;/volume&gt;\n        &lt;/step&gt;\n        ...\n    &lt;/steps&gt;\n    ...\n&lt;/config&gt;\n\nEvery stage class must implement StageInterface.\n\n\nclass&nbsp;StageClass&nbsp;implements&nbsp;StageInterface\n{\n&nbsp;&nbsp;/**\n&nbsp;&nbsp;&nbsp;*&nbsp;Perform&nbsp;the&nbsp;stage\n&nbsp;&nbsp;&nbsp;*\n&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;bool\n&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;public&nbsp;function&nbsp;perform()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n}\n\n\nIf the data stage supports rollback, it should implement the RollbackInterface interface.\n\nVisualization of the running step is provided by Symfony’s ProgressBar component (see http://symfony.com/doc/current/components/console/helpers/progressbar.html). Access this component in a step as LogLevelProcessor.\n\nMain methods for use are:\n\n$this-&gt;progress-&gt;start();\n$this-&gt;progress-&gt;advance();\n$this-&gt;progress-&gt;finish();\n\nStages\n\nIntegrity check\n\nEach step has to check that the structure of data source (Magento 1 by default) and the structure of data destination (Magento 2) are compatible. If not - an error will be shown with entities that are not compatible. In case when fields have different datatypes (e.g. the same field has decimal datatype in Magento 1 and integer in Magento 2), a warning message will be shown (except when it was covered in Map file).\n\nData Transfer\n\nIn case integrity check passed, transferring data is running. If some error appears then rollback will run to revert to previous state of Magento 2. If a step class implements RollbackInterface then “rollback” method will be executed in case of error.\n\nVolume check\n\nAfter data has been migrated Volume Check provides additional check that all data was transferred correctly.\n\nDelta delivery\n\nDelta functionality is responsible for delivering the rest of data that was added after main migration.\n\nRunning modes\n\nThe tool should be run in three different modes in particular order:\n\n\n  settings - migration of system settings\n  data - main migration of data\n  delta - migration of the rest of data that was added after main migration\n\n\nEach mode has its own list of steps to be executed. See config.xml\n\nSettings migration mode\n\nSettings migration mode of this tool is used to transfer following entities:\n\n\n  Websites, stores, store views.\n  Store configuration (mainly Stores-&gt;Configuration in M2 or System-&gt;Configuration in M1)\n\n\nAll store configuration keeps its data in core_config_data table in database. settings.xml file contains rules for this table that are applied during migration process. This file describes settings that should be ignored, renamed or should change their values. settings.xml file has the following structure:\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;settings xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" xs:noNamespaceSchemaLocation=\"settings.xsd\"&gt;\n    &lt;key&gt;\n        &lt;ignore&gt;\n            &lt;path&gt;path/to/ignore*&lt;/path&gt;\n        &lt;/ignore&gt;\n        &lt;rename&gt;\n            &lt;path&gt;path/to/rename&lt;/path&gt;\n            &lt;to&gt;new/path/renamed&lt;/to&gt;\n        &lt;/rename&gt;\n    &lt;key&gt;\n    &lt;value&gt;\n        &lt;transform&gt;\n            &lt;path&gt;some/key/to/change&lt;/path&gt;\n            &lt;handler class=\"Some\\Handler\\Class\"/&gt;\n        &lt;/transform&gt;\n    &lt;/value&gt;\n&lt;/settings&gt;\n\nUnder node &lt;key&gt; there are rules that work with ‘path’ column of core_config_data table. &lt;ignore&gt; rules make the tool not to transfer some setting. Wildcards can be used in this node. All other settings not listed in &lt;ignore&gt; node, will be migrated. If path of some setting is changed in Magento 2, it should be added to //key/rename node, where old path indicates in //key/rename/path node and new path indicates in //key/rename/to node.\n\nUnder node &lt;value&gt; there are rules that work with ‘value’ column of core_config_data table. These rules aim to transform value of settings by handlers (classes that implement Migration\\Handler\\HandlerInterface) and adapt it for Magento 2.\n\nData migration mode\n\nIn this mode most of the data will be migrated. Before data migration the integrity check stages run for each step. If integrity check passed the Data Migration Tool installs deltalog tables (with prefix m2cl*) and corresponding triggers to Magento 1 database. And runs data migration stage of steps. When migration is completed without errors the volume check checks data consistency. It can show a warning message if you migrate live store. Do not worry, delta migration will take care of this incremental data. Next the most valuable migration steps are described. It is Map Step, URL Rewrite Step, EAV Step.\n\nMap Step\n\nMap step is responsible for transferring most of data from Magento 1 to Magento 2. This step reads instructions from map.xml file (located in etc dir). The file describes differences between data structures of source (Magento 1) and destination (Magento 2). In case Magento 1 contains tables or fields that belong to some extension that does not exist in Magento 2, then these entities can be placed here to ignore them by Map Step. Otherwise it will show an error message.\n\nMap file has the next format:\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;map xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\" xs:noNamespaceSchemaLocation=\"map.xsd\"&gt;\n    &lt;source&gt;\n        &lt;document_rules&gt;\n            &lt;ignore&gt;\n                &lt;document&gt;some_document2&lt;/document&gt;\n            &lt;/ignore&gt;\n            &lt;rename&gt;\n                &lt;document&gt;some_document&lt;/document&gt;\n                &lt;to&gt;some_dest_document&lt;/to&gt;\n            &lt;/rename&gt;\n            &lt;log_changes&gt;\n                &lt;document key=\"primary_key\"&gt;some_dest_document&lt;/document&gt;\n            &lt;/log_changes&gt;\n        &lt;/document_rules&gt;\n\n        &lt;field_rules&gt;\n            &lt;move&gt;\n                &lt;field&gt;some_document1.field1&lt;/field&gt;\n                &lt;to&gt;some_document1.field2&lt;/to&gt;\n            &lt;/move&gt;\n            &lt;ignore&gt;\n                &lt;field&gt;some_document3.field8&lt;/field&gt;\n            &lt;/ignore&gt;\n            &lt;transform&gt;\n                &lt;field&gt;some_document1.field1&lt;/field&gt;\n                &lt;handler class=\"\\Migration\\Handler\\Convert\"&gt;\n                    &lt;param name=\"map\" value=\"[value1:value2;value3:value4;value5:value6;]\" /&gt;\n                &lt;/handler&gt;\n            &lt;/transform&gt;\n        &lt;/field_rules&gt;\n    &lt;/source&gt;\n    &lt;destination&gt;\n        &lt;document_rules&gt;\n            &lt;ignore&gt;\n                &lt;document&gt;some_document8&lt;/document&gt;\n            &lt;/ignore&gt;\n        &lt;/document_rules&gt;\n\n        &lt;field_rules&gt;\n            &lt;transform&gt;\n                &lt;field&gt;some_document5.field3&lt;/field&gt;\n                &lt;handler class=\"\\Migration\\Handler\\SetValue\"&gt;\n                    &lt;param name=\"value\" value=\"10\" /&gt;\n                &lt;/handler&gt;\n            &lt;/transform&gt;\n        &lt;/field_rules&gt;\n    &lt;/destination&gt;\n&lt;/map&gt;\n\nAreas:\n\n\n  \n    source - contains rules of source database\n  \n  \n    destination - contains rules of destination database\n  \n\n\nOptions:\n\n\n  \n    ignore - document, field or datatype marked with this option will be ignored\n  \n  \n    rename - describes name relations between documents with the different name. In a case when destination document name is not the same with the source document - you can use rename option to set source document name similar to destination table name\n  \n  \n    move - sets rule to move specified field from source document to destination document. NOTE: destination document name should be the same with the source document name. If source and destination document names are different - you need to use rename option for document that contains moved field\n  \n  \n    transform - is an option that allows user to migrate fields according to behavior described in handlers\n  \n  \n    handler - describes transformation behavior for fields. To call the handler you need to specify a handler class name in a  tag. Use  tag with the parameter name and value data to pass it to handler\n  \n\n\nSource available operations:\n\n\n\t\n\t\tDocument\n\t\tField\n\t\n\n\tignore\n    \trename\n\tignore\n\t\tmove\n\t\ttransform\n\n\n\n\nDestination available operations:\n\n\n\n\t\n\t\tDocument\n\t\tField\n\t\n\n\tignore\n\tignore\n\t\ttransform\n\n\n\n\nWildcards\nTo ignore documents with similar parts (e.g. document_name_1, document_name_2 e.t.c), you can use wildcard functionality. Just put * symbol instead of repeating part (e.g. document_name_*) and this mask will cover all source or destination documents that meet this mask.\n\nURL Rewrite Step\n\nThis step is quite complex because there are many different algorithms developed in Magento 1 which are not compatible with Magento 2. For different versions of Magento 1 there can be different algorithms. Thus under Step/UrlRewrite folder there are classes that were developed for some of particular versions of Magento and Migration\\Step\\UrlRewrite\\Version191to2000 is one of them. It can transfer URL Rewrites data from Magento 1.9.1 to Magento 2.\n\nEAV Step\n\nThis step transfers all attributes (e.g. product, customer, RMA) from Magento 1 to Magento 2. It uses map-eav.xml file that contains rules similar to the ones in map.xml file for specific cases of processing data.\n\nSome of the tables that are processed in the step:\n\n\n  eav_attribute\n  eav_attribute_group\n  eav_attribute_set\n  eav_entity_attribute\n  catalog_eav_attribute\n  customer_eav_attribute\n  eav_entity_type\n  …\n\n\nDelta migration mode\n\nAfter main migration, additional data could have been added to the Magento 1 database (for example, by customers on storefront). To track this data, the Tool sets up the database triggers for tables in the beginning of migration process. For more information, see Migrate data created by 3rd party extensions.\n\nData Sources\n\nTo reach to the data sources of Magento 1 and Magento 2 and operate with its data (select, update, insert, delete) there are many classes in Resource folder. Migration\\ResourceModel\\Source and Migration\\ResourceModel\\Destination are main classes. All migration steps use it to operate with data. This data is contained in classes like Migration\\ResourceModel\\Document, Migration\\ResourceModel\\Record, Migration\\ResourceModel\\Structure etc.\n\nHere is a class diagram of these classes:\n\n\n\nLogging\n\nIn order to implement output of migration process and control all possible levels PSR logger, which is used in Magento, is applied. \\Migration\\Logger\\Logger class was implemented to provide logging functionality. To use the logger you should inject it via constructor dependency injection.\n\nclass SomeClass\n{\n    ...\n    protected $logger;\n\n    public function __construct(\\Migration\\Logger\\Logger $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n    ...\n}\n\n\nAfter that you can use this class for logging of some events:\n\n$this-&gt;logger-&gt;info(\"Some information message\");\n$this-&gt;logger-&gt;debug(\"Some debug message\");\n$this-&gt;logger-&gt;error(\"Message about error operation\");\n$this-&gt;logger-&gt;warning(\"Some warning message\");\n\n\nThere is a possibility to customize where log information should be written. You can do that by adding handler to logger using pushHandler() method of the logger. Each handler should implement \\Monolog\\Handler\\HandlerInterface interface. As for now there are two handlers:\n\n\n  \n    ConsoleHandler: writes messages to console\n  \n  \n    FileHandler: writes messages to log file that has been set in “log_file” config option\n  \n\n\nAlso it is possible to implement any additional handler. There is a set of handlers in Magento framework. Example of adding handlers to logger:\n\n// $this-&gt;consoleHandler is the object of Migration\\Logger\\ConsoleHandler class\n// $this-&gt;logger is the object of Migration\\Logger\\Logger class\n$this-&gt;logger-&gt;pushHandler($this-&gt;consoleHandler);\n\n\nTo set additional data for logger (e.g. current mode, table name e.t.c) you can use logger processors. There is one existing processor (MessageProcessor). It’s created to add “extra” data for logging messages and will be called each time when log method is executed. MessageProcessor has protected $extra var, which contain empty values for ‘mode’, ‘stage’, ‘step’ and ‘table’. Extra data can be passed to processor as a second parameter (context) for log method. Currently additional data sets to processor in AbstractStep-&gt;runStage (pass current mode, stage and step to processor) method and data classes where used logger-&gt;debug method (pass migrating table name). Example of adding processors to logger:\n\n// $this-&gt;processoris the object of Migration\\Logger\\messageProcessor class\n// $this-&gt;logger is the object of Migration\\Logger\\Logger class\n$this-&gt;logger-&gt;pushProcessor([$this-&gt;processor, 'setExtra']);\n// As a second array value you need to pass method that should be executed when processor called\n\n\nThere is a possibility to set the level of verbosity. As for now there are 3 levels: ERROR(writes only errors to the log), INFO(only important information is written to the log, default value), DEBUG(everything is written). Verbosity log level can be set for each handler separately by calling setLevel() method. If you want to set verbosity level via command line parameter, you should change ‘verbose’ option at application launch.\n\nThere is a possibility to format log messages via monolog formatter. To make formatter functionality work it needs to be set to specified log handler using setFormatter() method. Currently we have one formatter class (MessageFormatter) that sets certain format (depends on verbosity level) during message handling (via format() method executed from handler).\n\nAs for now manipulation with logger, adding handler(s), processor(s) to it and processing verbose mode is performed in process() method of Migration\\Logger\\Manager class. Mentioned method is called during application start.\n\nExtension Points\n\nCustom Resource Type of Source\n\nBy default Data Migration Tool works with MySQL DB of Magento 1 as source of data to transfer it to Magento 2. But source data type can be changed to CSV as an example. There is resource_adapter_class_name option in config.xml that can hold custom class name to resource adapter which can be implemented to work with CSV as an example or any other data type.\n\nMap Step configuration\n\nIn most cases modification of map will be enough.\n\nCustom Handler\n\nCustom handlers can be used for cases where data in a field should be transformed with more complex algorithm. There are a lot of custom handlers out of the box in src/Migration/Handler/ folder. Custom handlers are used in Settings step and Map step.\n\nCustom Steps\n\nData Migration Tool provides possibility to add custom steps to migration procedure (see Step internals).\n\nAutomatic Tests\n\nThere are 3 types of tests in Data Migration Tool: static, unit and integration tests. They all are located in tests/ directory of the tool and they are located in folders, which are the same as the type of the test (e.g. unit tests are located in tests/unit folder). To launch the test you should have phpunit installed. In such case you should change current folder to the folder of test and launch phpunit. See the example below.\n\n[10:32 AM]-[vagrant@debian-70rc1-x64-vbox4210]-[/var/www/magento2/vendor/magento/migration-tool]-[git master]\n$ cd tests/unit\n\n[10:33 AM]-[vagrant@debian-70rc1-x64-vbox4210]-[/var/www/magento2/vendor/magento/migration-tool/tests/unit]-[git master]\n$ phpunit\nPHPUnit 4.1.0 by Sebastian Bergmann.\n....\n\n",
      "url": "/guides/v2.0/migration/migration-tool-internal-spec.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-preconditions-html": {
      "title": "Preconditions",
      "content": "Before starting migration, make sure the following requirements are met.\n\nMagento 2 system\n\n\n  \n    Set up your Magento 2 system so that it meets the system requirements.\n\n    Use a topology and design that at least matches your existing Magento 1 system.\n  \n  \n    Install Magento 2.\n  \n\n\nCron\n\nDo not start Magento 2 cron jobs.\n\nDatabase\n\n\n  \n    After installation, back up or dump your Magento 2 database as soon as possible. This allows you to restore the initial database state if migration is not successful.\n  \n  \n    Verify if the Data Migration Tool has network access to connect the Magento 1 and Magento 2 databases.\n\n    Open ports in your firewall so that the Migration Tool can communicate with the databases.\n  \n  \n    Make sure your MySQL accounts have all the necessary privileges to access Magento databases.\n\n    If Binary Logging is enabled for your Magento 1 database, set the global log_bin_trust_function_creators MySQL system variable to 1, or grant the SUPER privilege to your account.\n  \n  \n    We do not recommend creating new entities (products, categories, attributes, etc.) in your Magento 2 store before migration because the Data Migration Tool overwrites such new entities with the old ones from Magento 1.\n  \n\n\nExtensions\n\nMigrate Magento 1 extension code to Magento 2.\n\nTo find the latest extensions versions, visit Magento Marketplace or contact your extension provider.\n\nYou can also use the Magento Code Migration Tool.\n\nRelated topics\n\n\n  Install the Data Migration Tool\n\n",
      "url": "/guides/v2.0/migration/migration-tool-preconditions.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-upgrade-html": {
      "title": "Upgrade Data Migration Tool",
      "content": "Why do I need to upgrade?\n\nTo make sure the versions of your current Magento 2 installation and the Data Migration Tool match exactly, you may need to upgrade the Tool.\n\nPrerequisites\n\nBefore upgrading the Data Migration Tool, you must:\n\n\n  \n    Upgrade your Magento software to get the latest version\n  \n  \n    Back up the vendor/magento/data-migration-tool directory\n  \n  \n    Make sure the Data Migration Tool version matches the Magento application version\n  \n\n\nUpgrade your Magento software\n\nIf you haven’t already done so, run the System Upgrade utility to upgrade the Magento software.\n\nBack up the vendor/magento/data-migration-tool directory\n\nBefore you upgrade the Data Migration Tool, back up at least the vendor/magento/data-migration-tool directory. During upgrade, it could be deleted and replaced by the updated code.\n\nYou can also back up the entire Magento codebase and database using the following command:\n\nphp &lt;your Magento install dir&gt;/bin/magento setup:backup --code --db\n\n\n\n    The vendor/magento/data-migration-tool directory contains your custom code. Failure to back it up means you can lose your customizations during upgrade.\n\n\nMake sure versions match\n\nThe versions of the Data Migration Tool and your Magento software must match exactly. For example, Magento 2.1.2 requires version 2.1.2 of the Data Migration Tool.\n\nSee the Install Data Migration Tool topic to know how to:\n\n\n  \n    Check your Magento 2 version\n  \n  \n    Find released versions of the Data Migration Tool\n  \n  \n    Check the Data Migration Tool version\n  \n\n\nUpgrade Data Migration Tool\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  Change to Magento 2 root directory.\n  \n    Enter the following command:\n\n    composer require magento/data-migration-tool:&lt;version&gt;\n\n    where &lt;version&gt; must match the version of the Magento 2 codebase.\n\n    For example, for version 2.1.2, enter:\n\n    composer require magento/data-migration-tool:2.1.2\n  \n  Wait while the command completes.\n\n\nRelated topics\n\n\n  Configure migration\n  Preconditions\n\n",
      "url": "/guides/v2.0/migration/migration-tool-upgrade.html"
    }
    ,
  
    "guides-v2-0-migration-migration-tool-html": {
      "title": "Data Migration Tool",
      "content": "Overview\n\nData Migration Tool is a command-line interface (CLI) used for transferring data from Magento 1 to Magento 2. The Tool verifies consistency between Magento 1 and 2 database structures (tables and fields), tracks the data transfer progress, creates logs, and runs data verification tests.\n\nModes\n\nThe Tool operates in three modes:\n\n\n  \n    Settings: migrates configuration settings\n  \n  \n    Data: bulk migrates main data in the database\n  \n  \n    Delta: transfers incremental data updates, added to Magento 1 storefront and Admin Panel while running previous migration modes\n  \n\n\nSteps\nEach mode consists of several steps that perform tasks specific to the mode (for example: URL rewrite, EAV, settings, etc.). Each step initially checks for data and structure integrity between Magento 1 and Magento 2 databases and, after verification succeeds, performs the transfer. The Tool then checks the volume of transferred data.\n",
      "url": "/guides/v2.0/migration/migration-tool.html"
    }
    ,
  
    "guides-v2-0-migration-migration-troubleshooting-html": {
      "title": "Troubleshooting",
      "content": "Common error messages\n\nThis section is about the errors that might occur when you run the Data Migration Tool, and how to deal with them.\n\nSource documents/fields not mapped\n\nSource documents are not mapped: &lt;EXTENSION_TABLE&gt;\n\nSource fields are not mapped. Document: &lt;EXTENSION_TABLE&gt;. Fields: &lt;EXTENSION_FIELD&gt;\n\nIn rare cases, the message might mention Destination documents or Destination fields instead of source ones.\n\nExplanation\n\nSome Magento 1 entities (in most cases, coming from extensions) do not exist in the Magento 2 database.\n\nThis message appears because the Data Migration Tool runs internal tests to verify that tables and fields are consistent between source (Magento 1) and destination (Magento 2) databases.\n\nPossible solutions\n\n\n  \n    Install the corresponding Magento 2 extensions from Magento Marketplace\n\n    If the conflicting data originates from an extension which adds own database structure elements, then the Magento 2 version of the same extension may add such elements to the destination (Magento 2) database, thus fixing the issue.\n  \n  \n    Configure the Tool to ignore the problematic data\n  \n\n\nTo ignore database entities, add the &lt;ignore&gt; tag to an entity in the map.xml file, like this:\n\n&lt;ignore&gt;\n   &lt;field&gt;sales_order_address_id&lt;/field&gt;\n&lt;/ignore&gt;\n\n\n   Before ignoring entities, make sure you do not need the affected data in your Magento 2 store.\n\n\nClass does not exist but mentioned\n\nClass &lt;extension/class_name&gt; does not exist but mentioned in:\n&lt;eav_attribute.frontend_model&gt; for &lt;attribute_id=196&gt;\n\nExplanation\n\nA class from Magento 1 codebase could not be found in Magento 2 codebase during the EAV migration step. In most cases, the missing class belongs to an extension.\n\nPossible solutions\n\n\n  \n    Install the corresponding Magento 2 extension\n  \n  \n    Ignore the attribute that causes the issue\n\n    For this, add the attribute to the ignore group in the eav-attribute-groups.xml.dist file.\n  \n  \n    Add class mapping using the class-map.xml.dist file\n  \n\n\nForeign key constraint fails\n\nError message text\n\nForeign key &lt;KEY_NAME&gt; constraint fails.\nOrphan records id: &lt;id_1&gt;, &lt;id_2&gt; from &lt;child_table&gt;.\n&lt;field_id&gt; has no referenced records in &lt;parent_table&gt;\n\nExplanation\n\nThere are missing database records in the parent_table to which the field_id of the child_table is pointing to.\n\nPossible solution\n\nDelete the records from the child_table, if you do not need them.\n\nTo keep the records, disable the Data Integrity Step by modifying the Data Migration Tool’s config.xml.\n\nDuplicates in URL rewrites\n\nThere are duplicates in URL rewrites:\nRequest path: towel.html Store ID: 2 Target path: catalog/product/view/id/10\nRequest path: towel.html Store ID: 2 Target path: catalog/product/view/id/12\n\nExplanation\n\nThe Target path in a URL rewrite must be specified by a unique pair of Request path + Store ID. This error reports two entries that use the same Request path + Store ID pair with two different Target path values.\n\nPossible solution\n\nEnable the auto_resolve_urlrewrite_duplicates option in your config.xml file.\n\nThis configuration adds a hash-string to the conflicting records of URL rewrites, and shows the resolution result in your command line interface.\n\nMismatch of entities\n\nMismatch of entities in the document: &lt;DOCUMENT&gt;\n\nExplanation\n\nThe error occurs during the Volume Check step. It means the Magento 2 database record count of the document is not the same as in Magento 1.\n\nMissing records happen when a customer places an order during migration.\n\nSolution\n\nRun the Data Migration Tool in Delta mode to transfer incremental changes.\n",
      "url": "/guides/v2.0/migration/migration-troubleshooting.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-and-areas-html": {
      "title": "Modules and areas",
      "content": "Overview\n\nAn area is a logical component that organizes code for optimized request processing. Magento uses areas to streamline web service calls by loading only the dependent code for the specified area.  Each of the default areas defined by Magento can contain completely different code on how to process URLs and requests.\n\nFor example, if you are invoking a REST web service call, rather than load all the code related to generating user HTML pages, you can specify a separate area that loads code whose scope is limited to answering  REST calls.\n\nMagento area types\n\nMagento is organized into these main areas:\n\n\n  \n    Magento Admin (adminhtml): entry point for this area is index.php or pub/index.php. The Admin panel area includes the code needed for store management. The /app/design/adminhtml directory contains all the code for components you’ll see while working in the Admin panel.\n  \n  \n    Storefront (frontend): entry point for this area is index.php or pub/index.php. The storefront (or frontend)  contains template and layout files that define the appearance of your storefront.\n  \n  \n    Basic (base): used as a fallback for files absent in adminhtml and frontend areas.\n  \n\n\nYou can also send requests to Magento using the SOAP and REST APIs. These two areas\n\n\n  \n    Web API REST (webapi_rest): entry point for this area is index.php or pub/index.php. The REST area has a front controller that understands how to do URL lookups for REST-based URLs.\n  \n  \n    Web API SOAP (webapi_soap): entry point for this area is index.php or pub/index.php.\n  \n\n\nHow areas work with modules\n\nModules define which resources are visible and accessible in an area, as well as an area’s behavior. The same module can influence several areas. For instance, the RMA module is represented partly in the adminhtml area and partly in the frontend area.\n\nIf your extension works in several different areas, ensure it has separate behavior and view components for each area.\n\nEach area declares itself within a module. All resources specific for an area are located within the same module as well.\n\nYou can enable or disable an area within a module. If this module is enabled, it injects an area’s routers into the general application’s routing process. If this module is disabled, Magento will not load an area’s routers and, as a result, an area’s resources and specific functionality are not available.\n\nQuick view of module/area interactions\n\n\n  \n    Modules should not depend on other modules’ areas.\n  \n  \n    Disabling an area does not result in disabling the modules related to it.\n  \n  \n    Areas are registered in the Dependency Injection framework di.xml file.\n  \n\n\nNote about Magento request processing\n\nMagento processes a URL request by first stripping off the base URL. The first path segment of the remaining URL identifies the request area.\n\nAfter the area name, the URI segment specifies the full front name. When an HTTP request arrives, the handle is extracted from the URL. Magento uses the handle to identify which controller (a PHP class) and action (a PHP method in the class) to execute. A common action to display a HTML page is index, which returns an HTML page.\n\nRelated topics\n\n\n  Module overview\n\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_and_areas.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-conventions-html": {
      "title": "Module conventions",
      "content": "Overview\n\nModules must conform to Magento conventions regarding code location and file names. Keep these conventions in mind when working with or developing modules.\n\nBe sure to research additional Magento conventions, beyond those applicable to modules. For  more information, see Coding Standards.\n\nModule location conventions\n\nThe following table shows the recommended location within the Magento file system for specific components.\n\n(A module must include a registration.php file in its root folder.)\n\nWe refer to a component’s root directory as the top-level directory in which you develop component code. Typically, this directory is located in one of the following directories relative to the Magento root directory:\n\n\n  \n    \n      Entity\n      Location\n    \n  \n  \n    \n      Code base of your custom module\n      /app/code/&lt;Vendor&gt;/&lt;Module&gt;\n    \n    \n      Custom theme files (storefront)\n      /app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;\n    \n    \n      Custom theme files (modules)\n      &lt;Module&gt;/&lt;theme&gt;\n    \n    \n      If you want to use a library\n      /lib/&lt;Vendor_Library&gt;\n    \n  \n\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_conventions.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-depend-html": {
      "title": "Module dependencies",
      "content": "Overview\n\nA software dependency identifies  one software component’s reliance on another for proper functioning. A core principle of Magento architecture is the minimization of software dependencies. Instead of being closely interrelated with other modules, modules are optimally designed to be loosely coupled. Loosely coupled modules require little or no knowledge of other modules to perform their tasks.\n\nEach Magento module is responsible for a unique feature. In practice, this means that:\n\n\n  \n    Several modules cannot be responsible for one feature.\n  \n  \n    One module cannot be responsible for several features.\n  \n  \n    Module dependencies on other modules must be declared explicitly. You must also declare any dependency upon other components (for example, a theme, language package, or library).\n  \n  \n    Removing or disabling a module does not result in disabling other modules.\n  \n\n\nWhat components can modules depend upon?\n\nAlthough Magento architecture favors loosely coupled software components, modules can contain dependencies upon these software components:\n\n\n  \n    other modules\n  \n  \n    PHP extensions\n  \n  \n    libraries (either Magento Framework library or third party libraries)\n  \n\n\n\nNote: You can lose the historical information contained in a module if the module is removed or disabled. We recommend alternative storage of module information before you remove or disable a module.\n\nManaging module dependencies\n\nAt a high level, there are three main steps for managing module dependencies:\n\n\n  \n    Name and declare the module in the module.xml file.\n  \n  \n    Declare any dependencies that the module has (whether on other modules or on a different component) in the module’s composer.json file.\n  \n  \n    (Optional) Define the desired load order of config files and .css files in the module.xml file.\n  \n\n\nExample: Module A declares a dependency upon Module B. Thus, in Module A’s module.xml file, Module B is listed in the &lt;sequence&gt; list, so that B’s files are loaded before A’s. Additionally, you must declare a dependency upon Module B in A’s composer.json file. Furthermore, in the deployment configuration, Modules A and B must both be defined as enabled.\n\nRelated topics\n\nModule overview\n\nTypes of module dependencies\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_depend.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-depend-types-html": {
      "title": "Module dependency types",
      "content": "Two types of dependencies\n\nThere are two types of Magento module dependencies: hard and soft dependencies.\n\nHard dependencies\n\nModules with a hard dependency on another module cannot function without the module it depends on. Specifically:\n\n\n  \n    The module contains code that directly uses logic from another module  (for example, the latter module’s instances, class constants, static methods, public class properties, interfaces, and traits).\n  \n  \n    The module contains strings that include class names, method names, class constants, class properties, interfaces, and traits from another module.\n  \n  \n    The module deserializes an object declared in another module.\n  \n  \n    The module uses or modifies the database tables used by another module.\n  \n\n\nSoft dependencies\n\nModules with a soft dependency on another module can function properly without the other module, even if it has a dependency upon it. Specifically:\n\n\n  \n    The module directly checks another module’s availability.\n  \n  \n    The module extends another module’s configuration.\n  \n  \n    The module extends another module’s layout.\n  \n\n\n\n  \n    Note: If a module uses code from another module, it should declare the dependency explicitly.\n  \n\n\nMagento installs modules in the following order:\n\n1) the module serving as a dependency for another module\n\n2) the module dependent on it\n\nInappropriate dependencies\n\nAvoid creating the following dependencies:\n\n\n  \n    Circular (both direct and indirect)\n  \n  \n    Undeclared\n  \n  \n    Incorrect\n  \n\n\nDependencies between modules in different product layers\n\nYou can build dependencies between the modules belonging to different layers.\n\nDependencies in the Framework layer\n\nModules belonging to the Magento Framework can be used in the application layer by an explicit dependency.\n\n\n  Note: In this case, using interfaces is preferable to using classes. \n  You can build dependencies between classes in the Magento Framework even if they belong to different modules.\n\n\nDependencies in the Application layer\nModules belonging to the application layer cannot be used in the Magento Framework.\n\nYou can build dependencies between classes in the application layer, but these classes must belong to the same module. Dependencies between the modules of the application layer should be built only by the service contract or the service provider interface (SPI).\n\nRelated topics\n\nModule dependencies\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_depend_types.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-intro-html": {
      "title": "Module overview",
      "content": "What is a Magento module?\n\nA module is a logical group – that is, a directory containing blocks, controllers, helpers, models – that are related to a specific business feature. In keeping with Magento’s commitment to optimal modularity, a module encapsulates one feature and has minimal dependencies on other modules.\n\nModules and themes are the units of customization in Magento. Modules provide business features, with supporting logic,  while themes strongly influence user experience and storefront appearance. Both components have a life cycle that allows them to be installed, deleted, and disabled. From the perspective of both merchants and extension developers, modules are the central unit of Magento organization.\n\nThe Magento Framework provides a set of core logic: PHP code, libraries, and the basic functions that are inherited by the modules and other components.\n\nModule purpose\n\nThe purpose of each module is to provide specific product features by implementing new functionality or extending the functionality of other modules. Each module is designed to function independently, so the inclusion or exclusion of a particular module does not typically affect the functionality of other modules.\n\nModule components\n\nA module is a directory that contains the PHP and XML files (blocks, controllers, helpers, models) that are related to a specific business feature, such as Shipping. Specifically, a Magento module is composed of these software components: themes, libraries, and language packages.\n\nWhere do modules live?\n\nModules typically live in the vendor directory of a Magento installation, in a directory with the following PSR-0 compliant format: vendor/&lt;vendor&gt;/&lt;type&gt;-&lt;module-mame&gt;, where &lt;type&gt; can be one of the following values:\n\n  module - for modules (module-customer-import-export)\n  theme - for frontend and admin themes (theme-frontend-luma or theme-adminhtml-backend)\n  language - for language packs (language-de_de)\n\n\nFor example, the Customer Import/Export module of Magento can be found at vendor/magento/module-customer-import-export.\n\nBut if you are creating a new module for distribution, you can just create the app/code/&lt;vendor&gt;/&lt;type&gt;-&lt;module-name&gt; directory and the required directories within it.\n\nInside this folder, you will find all the code related to this module, including the etc/module.xml file, which contains the name and version of the module, as well as any dependencies.\n\nWorking with modules\n\nMagento developers, administrators, and anyone building a Magento web site will want to review all relevant topics surrounding their particular goals and use cases.\n\nSee PHP Developer Guide for specific instructions on extending modules.\n\nSee\nFrontend Developer Guide for information on implementing themes and other components.\n\nRelated topics\n\nModule dependencies\n\nModules and areas\n\nModule location and naming conventions\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_intro.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-components-modules-mod-relationships-html": {
      "title": "Module relationships",
      "content": "Overview\n\nUnderstanding how one module relates to another helps determine how it reacts to changes in that module.\n\nA single module can have the following types of relationships with another module:\n\n\n  \n    uses: module A uses module B if it invokes behavior of module B\n  \n  \n    reacts to: module A reacts to module B if its behavior is triggered by an event in module B without module B knowing about module A\n  \n  \n    customizes: module A customizes module B if it modifies the behavior of module B\n  \n  \n    implements: module A implements module B if it implements some, not necessarily all, behavior that is defined in module B\n  \n  \n    replaces: module A replaces module B if it provides its own version of the API exposed and implemented by module B\n  \n\n\nRelationship types and scenarios\n\nA uses B, C customizes B\n\nIn a scenario where module A uses module B and module C customizes module B, the customizations in module C cannot break the API of module B so that module A still functions properly in the face of these customizations.\n\n\n\nA reacts to B, C customizes B\n\nSimilarly, in a case where module A reacts to module B and module C customizes module B, the customizations in module C must not interfere with the events in module B that module A depends on.\n\n\n\nA and C customize B\n\nIf both module A and C customize module B, be careful about how these customizations are implemented so that you avoid conflicts (see below).\n\n\n\nA replaces B\n\nIf module A replaces module B, it needs to be able to do so in such a way that other modules are not affected. That will mean not having direct hard dependencies on module B, but rather dependencies on a third module, module C, that both module A and B implement.\n\n\n\nRelated topics\n\nModule overview\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/components/modules/mod_relationships.html"
    }
    ,
  
    "guides-v2-0-howdoi-install-mode-switch-html": {
      "title": "Magento mode switch",
      "content": "The Magento application has three modes of operation that make it convenient for you to deploy it in a development or production environment.\n\nThe two modes you hear the most about are developer mode and production mode. Aptly named, these modes are intended for development and production use, respectively.\n\n\nMagento Commerce (Cloud) supports production mode only.\n\n\nNot only do these modes enable you to change Magento application behavior, switching between them using the magento deploy:mode:set command also sets file system permissions automatically.\n\nTo switch modes:\n\n\n  Log in as, or switch to, the Magento file system owner.\n  Change to the &lt;your Magento install dir&gt;/bin directory.\n  \n    Use the magento deploy:mode:set command as summarized in the following table.\n\n    \n\n    \n        Mode\n        Command\n        File system permissions\n    \n    \n    developer\n    magento deploy:mode:set developer\n    Directories: 770 (owner and group have full control, all others have no access)\n        Files: 660 (owner and group have write access, all others have no access)&lt;/td&gt;\n&lt;/tr&gt;\n\n    production\n    magento deploy:mode:set production [--keep-generated]\n    Directories: 750 (owner has full control, group has read and execute access, all others have no access)\n        Files: 640 (owner has write access, group has read-only access, all others have no access)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n  \n\n",
      "url": "/guides/v2.0/howdoi/install/mode-switch.html"
    }
    ,
  
    "guides-v2-0-mtf-features-modularity-html": {
      "title": "Modularity in the Functional Testing Framework",
      "content": "The Functional Testing Framework (FTF) enables you to follow the principle of modularity as Magento does. Functional tests for each module are collected in separate directory with the name of corresponding module.\n\n\n\nModularity gives the following advantages:\n\n\n  You can add and remove Magento modules with no affect to functional tests. For this purpose the FTF has a special structure of functional test, which is split into different entities.\n  You can use scenarios in functional testing. Test flow in scenario tests can be modified.\n\n\nIt is achieved due to the FTF capabilities like:\n\n\n  merging that is applicable for fixture, data set, page, fixture repository\n  extending a fixture.\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/features/modularity.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-module-development-html": {
      "title": "Component development",
      "content": "Magento 2 is flexible and as a result has varied functionality, so developing a component in Magento takes into account a number of different of the following topics. Please read the information on compatibility — Service Contracts, Design Patterns, and the information on Dependency Injection, Routing, and Working With Public Interfaces and APIs closely; they are essential to creating a good Magento 2 component.\n\n\n  Compatibility (backward and forward)\n    \n      Service contracts\n      Design patterns\n    \n  \n  Working with public interfaces and APIs\n  Object manager and dependency injection\n  Code generation\n  EAV attributes\n  Plug-ins (aka interceptors)\n  Routing\n  Indexing\n  Configure a service as a web API\n\n",
      "url": "/guides/v2.0/extension-dev-guide/module-development.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-module-file-structure-html": {
      "title": "Create your component file structure",
      "content": "In this section, we go over the different file structures for the component types. The Magento application looks for the files that make up a component including configuration files in particular places inside the component file structure. Follow the predefined file structures for the component type you are developing to ensure that it works as expected.\n\n\n\n  Root directory location\n  A component’s root directory is the top-level directory for that component under which its folders and files are located. Depending on how your Magento development environment was installed, your component’s root directory can be located in two places:\n\n  \n    \n      &lt;Magento install directory&gt;/app: This is the recommended location for component development. You can easily set up this type of environment by Cloning the Magento 2 GitHub repository.\n\n      \n        For modules, use app/code.\n        For storefront themes, use app/design/frontend.\n        For Admin themes, use app/design/adminhtml.\n        For language packages, use app/i18n.\n      \n    \n    \n      &lt;Magento install directory&gt;/vendor: This location is found in the alternative setups where the composer create-project command was used to get a Magento 2 metapackage (which downloads the CE or EE code), or a compressed Magento 2 archive was extracted in order to install Magento.\n\n      Any third party components (and the Magento application itself) are downloaded and stored under the vendor directory. If you are using Git to manage project, this directory is typically added to the .gitignore file. Therefore, we recommend you do your customization work in app/code, not vendor.\n    \n  \n\n  Required files\n  The following files are required for all components:\n\n  \n    registration.php: Among other things, this file specifies the directory in which the component is installed by vendors in production environments. By default, composer automatically installs components in the &lt;Magento root dir&gt;/vendor directory. For more information, see Component registration.\n    etc/module.xml: This file specifies basic information about the component such as the components dependencies and its version number. This version number is used to determine schema and data updates when bin/magento setup:upgrade is run.\n    composer.json: Specifies component dependencies and other metadata. For more information, see Composer integration.\n  \n\n  Module file structure\n  A typical file structure for a Magento 2 module can look like the following:\n\n  \n\n  Common directories\n  Following are some common module directories:\n\n  \n    Block: contains PHP view classes as part of Model View Controller(MVC) vertical implementation of module logic.\n    Controller: contains PHP controller classes as part of MVC vertical implementation of module logic.\n    etc: contains configuration files; in particular, module.xml, which is required.\n    Model: contains PHP model classes as part of MVC vertical implementation of module logic.\n    Setup: contains classes for module database structure and data setup which are invoked when installing or upgrading.\n  \n\n  Additional directories\n  Additional folders can be added for configuration and other ancillary functions for items like plugin-ins, localization, and layout files.\n\n  \n    Api: contains any PHP classes exposed to the API.\n    i18n: contains localization files.\n    Plugin: contains any needed plug-ins.\n    view: contains view files, including static view files, design templates, email templates, and layout files.\n  \n\n  Theme file structure\n  A typical theme file structure can look like the following:\n\n  ├── composer.json\n├── etc\n│   └── view.xml\n├── i18n\n│   └── en_US.csv\n├── LICENSE_AFL.txt\n├── LICENSE.txt\n├── media\n│   └── preview.jpg\n├── registration.php\n└── web\n    ├── css\n    │   ├── email.less\n    │   ├── print.less\n    │   ├── source\n    │   │   ├── _actions-toolbar.less\n    │   │   ├── _breadcrumbs.less\n    │   │   ├── _buttons.less\n    │   │   ├── components\n    │   │   │   └── _modals_extend.less\n    │   │   ├── _icons.less\n    │   │   ├── _layout.less\n    │   │   ├── _theme.less\n    │   │   ├── _tooltips.less\n    │   │   ├── _typography.less\n    │   │   └── _variables.less\n    │   ├── _styles.less\n    │   ├── styles-l.less\n    │   └── styles-m.less\n    ├── images\n    │   └── logo.svg\n    └── js\n        ├── navigation-menu.js\n        ├── responsive.js\n        └── theme.js\n  \n\n  Common directories\n  Typical theme directories are:\n\n  \n    etc: Contains configuration files such as the view.xml file which contains image configurations for all images and thumbnails.\n    i18n: Translation dictionaries, if any.\n    media: Theme preview images (screen capture of your theme) can be put in here.\n    \n      web: Optional directory that contains static files organized into the following subdirectories:\n\n      \n        css/source: Contains a theme’s less configuration files that invoke mixins for global elements from the Magento UI library, and the theme.less file that overrides the default variables values.\n        css/source/lib: Contains view files that override the UI library files stored in lib/web/css/source/lib.\n        fonts: The folder to place the different fonts for your theme.\n        images: Static images folder.\n        js: The folder for your JavaScript files.\n      \n    \n  \n\n  For more details on the theme folder structure, see Magento theme structure.\n\n  Language package file structure\n  A typical directory structure for three language packages follows:\n\n  ├── de_DE\n│   ├── composer.json\n│   ├── language.xml\n│   ├── LICENSE_AFL.txt\n│   ├── LICENSE.txt\n│   └── registration.php\n├── en_US\n│   ├── composer.json\n│   ├── language.xml\n│   ├── LICENSE_AFL.txt\n│   ├── LICENSE.txt\n│   └── registration.php\n├── pt_BR\n│   ├── composer.json\n│   ├── language.xml\n│   ├── LICENSE_AFL.txt\n│   ├── LICENSE.txt\n│   └── registration.php\n  \n\n  The only required directory for a language package is the top-level directory. Although not required, we recommend that the directory name match the ISO code to identify the locale.\n\n  For more information about language packages, see Translation dictionaries and language packages.\n\n  Next\n\n  Register your component\n\n",
      "url": "/guides/v2.0/extension-dev-guide/build/module-file-structure.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-module-load-order-html": {
      "title": "Component load order",
      "content": "You may need to specify your component’s dependency on other components or files from other components using your component’s composer.json. Further, you can specify a load order in your component’s module.xml file using the &lt;sequence&gt; tag to ensure that needed files from other components are already loaded when your component loads.\n\n&lt;sequence&gt; declares the list of components that must be loaded before the current component is loaded. It’s used for loading different kind of files: configuration files, view files (including CSS, LESS, and template files), or setup classes. Note that &lt;sequence&gt; does not affect the loading of regular classes (non-setup classes).\nSetup classes are classes in the component that create or update database schema or data.\n\nIf you know that your component’s logic depends on something in another component then you should add it to require in composer.json and &lt;sequence&gt; in module.xml.\n\n\n\t\n\tIf you change the component load order using &lt;sequence&gt;, you must regenerate the component list in config.php; otherwise, the load order does not take effect.\nCurrently, the only way to do this is to enable the component using magento module:enable &lt;module-list&gt;, where &lt;module-list&gt; is the component or components to which you added &lt;sequence&gt;.\n\n\nExamples\n\nAssume you have a component that needs a configuration file from another component:\n\nComponent A introduces gadgetlayout.xml, which updates block gadgetBlock from component B. In this case, layout files from component A should be loaded before component B, so you should specify that in component B’s &lt;sequence&gt; entry in module.xml. In other words, component B is dependent on component A. That is to say:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n    &lt;module name=\"Vendor_ComponentB\" setup_version=\"0.0.1\"&gt;\n        &lt;sequence&gt;\n\t    &lt;!-- Vendor_ComponentB is dependent on Vendor_ComponentA: --&gt;\n            &lt;module name=\"Vendor_ComponentA\" /&gt;\n        &lt;/sequence&gt;\n    &lt;/module&gt;\n&lt;/config&gt;\n\nFor each particular scenario, files of the same type are loaded from different components taking into account the sequence information provided in each component’s module.xml file.\n\nIn another scenario, let’s say you want to load all of the layout files with the name default.xml. Component A specifies component B in &lt;sequence&gt;. The files load in the following order:\n\n\n  component X/view/frontend/layout/default.xml—Either we don’t care about when component X loads or perhaps component B requires it to be loaded before it.\n  component B/view/frontend/layout/default.xml\n  component A/view/frontend/layout/default.xml—Loads after component B because component B is listed in component A’s &lt;sequence&gt; tag.\n  component Z/view/frontend/layout/default.xml—Either we don’t care about the sequence for component Z or perhaps component Z requires component A files to be loaded before it.\n\n\nThere are no limitations—you can specify any valid component in &lt;sequence&gt;.\n\nIf you do specify a component in &lt;sequence&gt;, make sure that you have also added it to the require section in that component’s composer.json file.\n\n\n\n  Take care when using &lt;sequence&gt; in multiple components because it's possible to define circular dependencies. If you do, Magento aborts the installation when it detects the circular dependency.\n\n\nNext\n\nEnable or disable your component\n",
      "url": "/guides/v2.0/extension-dev-guide/build/module-load-order.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-mq-parent-html": {
      "title": "Message queues (Magento Commerce only)",
      "content": "\n",
      "url": "/guides/v2.0/extension-dev-guide/mq-parent.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-site-ms-apache-html": {
      "title": "Tutorial&amp;mdash;Set up multiple websites with Apache",
      "content": "Set values in an entry point script\nIf necessary, copy the existing index.php entry point script for your website or store view and add to it the following:\n\n\n  \n    You’re working on a development machine (laptop, virtual machine, and so on)\n\n    Additional tasks might be required to deploy multiple websites in a hosted environment; check with your hosting provider for more information.\n\n    Additional tasks are required to set up Magento Commerce (Cloud). After you complete the tasks discussed in this topic, see Set up multiple Magento Commerce (Cloud) websites or stores.\n  \n  \n    You use one virtual host per website; the virtual host configuration file is /etc/httpd/httpd.conf\n\n    Different versions of Apache on different operating systems set up virtual hosts differently. Consult the Apache documentation or a network administrator if you’re not sure how to set up a virtual host.\n  \n  The Magento software is installed in /var/www/html/magento2\n  \n    You have two websites other than the default:\n\n    \n      french.mysite.mg with website code french and store view code fr\n      german.mysite.mg with website code german and store view code de\n    \n  \n\n\nRoadmap for setting up multiple websites with Apache\nSetting up multiple stores consists of the following tasks:\n\n\n  Set up websites, stores, and store views in the Magento Admin.\n  Create one Apache virtual host per Magento website.\n\n\nStep 1: Create websites, stores, and store views in the Magento Admin\n\nSee Set up multiple websites, stores, and store views in the Admin.\n\nStep 2: Create Apache virtual hosts\nThis section discusses how to set values for MAGE_RUN_TYPE and MAGE_RUN_CODE using the Apache server variable SetEnvIf in a virtual host.\n\nFor more information about SetEnvIf, see:\n\n\n  Apache 2.2\n  Apache 2.4\n\n\nTo create Apache virtual hosts: \n  \n    As a user with root privileges, open the virtual host configuration file in a text editor.\n\n    For example, open /etc/httpd/conf/httpd.conf\n  \n  Locate the section starting with &lt;VirtualHost *:80&gt;.\n  \n    Create the following virtual hosts after any existing virtual hosts:\n\n     &lt;VirtualHost *:80&gt;\n    ServerName          mysite.mg\n    DocumentRoot        /var/www/html/magento2/pub/\n &lt;/VirtualHost&gt;\n\n &lt;VirtualHost *:80&gt;\n    ServerName          french.mysite.mg\n    DocumentRoot        /var/www/html/magento2/pub/\n    SetEnv MAGE_RUN_CODE \"french\"\n    SetEnv MAGE_RUN_TYPE \"website\"\n &lt;/VirtualHost&gt;\n\n &lt;VirtualHost *:80&gt;\n    ServerName          german.mysite.mg\n    DocumentRoot        /var/www/html/magento2/pub/\n    SetEnv MAGE_RUN_CODE \"german\"\n    SetEnv MAGE_RUN_TYPE \"website\"\n &lt;/VirtualHost&gt;\n    \n  \n  Save your changes to httpd.conf and exit the text editor.\n  \n    Restart Apache:\n\n    \n      CentOS: service httpd restart\n      Ubuntu: service apache2 restart\n    \n  \n\n\n\nVerify your site\n\n\n  Unless you have DNS set up for your stores’ URLs, you must add a static route to the host in your hosts file:\n\n  \n    Locate your operating system’s hosts file.\n    \n      Add the static route in the format:\n\n      &lt;ip address&gt; french.mysite.mg\n&lt;ip address&gt; german.mysite.mg\n      \n    \n    \n      Go to one of the following URLs in your browser:\n\n      http://mysite.mg/admin\nhttp://french.mysite.mg/frenchstoreview\nhttp://german.mysite.mg/germanstoreview\n      \n    \n  \n\n  You’re done!\n\n  \n  Additional tasks might be required to deploy multiple websites in a hosted environment; check with your hosting provider for more information.\n    Additional tasks are required to set up Magento Commerce (Cloud); for more information, see Set up multiple Cloud websites or stores\n\n\n  Troubleshooting\n  \n    If your French and German sites return 404s but your Admin loads, make sure you completed Step 6: Add the store code to the base URL.\n    If all URLs return 404s, make sure you restarted your web server.\n    If the Magento Admin doesn’t function properly, make sure you set up your virtual hosts properly.\n  \n\n\n",
      "url": "/guides/v2.0/config-guide/multi-site/ms_apache.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-site-ms-nginx-html": {
      "title": "Tutorial&amp;mdash;Set up multiple websites or stores with nginx",
      "content": "Set up multiple websites with nginx\nThis tutorial shows you step-by-step how to set up multiple websites using nginx.\n\nAssumptions\nWe assume the following:\n\n\n  \n    You’re working on a development machine (laptop, virtual machine, and so on)\n\n    Additional tasks might be required to deploy multiple websites in a hosted environment; check with your hosting provider for more information.\n\n    Additional tasks are required to set up Magento Commerce (Cloud). After you complete the tasks discussed in this topic, see Set up multiple Magento Commerce (Cloud) websites or stores.\n  \n  You use one virtual host per website; the virtual host configuration files are located in /etc/nginx/sites-available\n  You use nginx.conf.sample provided by Magento with only the modifications discussed in this tutorial\n  The Magento software is installed in /var/www/html/magento2\n  \n    You have two websites other than the default:\n\n    \n      french.mysite.mg with website code french and store view code fr\n      german.mysite.mg with website code german and store view code de\n    \n\n    \n      Refer to Create websites and Create store views for help locating these values.\n    \n  \n\n\nRoadmap for setting up multiple websites with nginx\nSetting up multiple stores consists of the following tasks:\n\n\n  Set up websites, stores, and store views in the Magento Admin.\n  Create one nginx virtual host per Magento website.\n  \n    Pass the values of the Magento variables $MAGE_RUN_TYPE and $MAGE_RUN_CODE to nginx using the Magento-provided nginx.conf.sample.\n\n    \n      \n        $MAGE_RUN_TYPE can be either store or website\n\n        \n          Use website to load your website in your storefront.\n          Use store to load any store view in your storefront.\n        \n      \n      \n        $MAGE_RUN_CODE is the unique website or store view code that corresponds to $MAGE_RUN_TYPE\n      \n    \n  \n\n\nStep 2: Create nginx virtual hosts\nThis section discusses how to load websites on the storefront. You can use either websites or store views; if you use store views, you must adjust parameter values accordingly. You must complete the tasks in this section as a user with root privileges.\n\nTo create virtual hosts: \n  \n    Open a text editor and add the following contents to a new file named /etc/nginx/sites-available/french.mysite.mg.conf:\n\n    map $http_host $MAGE_RUN_CODE {\n   french.mysite.mg french;\n}\n\nserver {\n   listen 80;\n   server_name french.mysite.mg;\n   set $MAGE_ROOT /var/www/html/magento2;\n   set $MAGE_MODE developer;\n   include /var/www/html/magento2/nginx.conf;\n}\n    \n  \n  \n    Create another file named german.mysite.mg.conf in the same directory with the following contents:\n\n    map $http_host $MAGE_RUN_CODE {\n   german.mysite.mg german;\n}\n\nserver {\n   listen 80;\n   server_name german.mysite.mg;\n   set $MAGE_ROOT /var/www/html/magento2;\n   set $MAGE_MODE developer;\n   include /var/www/html/magento2/nginx.conf;\n}\n    \n  \n  Save your changes to the files and exit the text editor.\n  \n    Verify the server configuration:\n\n    nginx -t\n    \n  \n  \n    If successful, the following message displays:\n\n    nginx: configuration file /etc/nginx/nginx.conf test is successful\n    \n\n    If errors display, check the syntax of your virtual host configuration files.\n  \n  \n    Create symbolic links in the /etc/nginx/sites-enabled directory:\n\n    cd /etc/nginx/sites-enabled\nln -s /etc/nginx/sites-available/french.mysite.mg french.mysite.mg\nln -s /etc/nginx/sites-available/german.mysite.mg german.mysite.mg\n    \n  \n\n\nFor more detail about the map directive, see nginx documentation on the map directive.\n\n\nVerify your site\n\n\n  Unless you have DNS set up for your stores’ URLs, you must add a static route to the host in your hosts file:\n\n  \n    Locate your operating system’s hosts file.\n    \n      Add the static route in the format:\n\n      &lt;ip address&gt; french.mysite.mg\n&lt;ip address&gt; german.mysite.mg\n      \n    \n    \n      Go to one of the following URLs in your browser:\n\n      http://mysite.mg/admin\nhttp://french.mysite.mg/frenchstoreview\nhttp://german.mysite.mg/germanstoreview\n      \n    \n  \n\n  You’re done!\n\n  \n  Additional tasks might be required to deploy multiple websites in a hosted environment; check with your hosting provider for more information.\n    Additional tasks are required to set up Magento Commerce (Cloud); for more information, see Set up multiple Cloud websites or stores\n\n\n  Troubleshooting\n  \n    If your French and German sites return 404s but your Admin loads, make sure you completed Step 6: Add the store code to the base URL.\n    If all URLs return 404s, make sure you restarted your web server.\n    If the Magento Admin doesn’t function properly, make sure you set up your virtual hosts properly.\n  \n\n\n",
      "url": "/guides/v2.0/config-guide/multi-site/ms_nginx.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-site-ms-over-html": {
      "title": "Multiple websites or stores",
      "content": "Introduction to multiple Magento stores and websites\nOne instance of the Magento software can enable you to start multiple websites or store views that use different:\n\n\n  Default languages\n  Domain names\n  Categories\n\n\nThis flexible solution enables one Magento codebase and Magento Admin to administer and display different stores.\n\nYou configure the websites, stores, and store views in the Magento Admin. You use the MAGE_RUN_TYPE and MAGE_RUN_CODE variables in virtual hosts to start the Magento application using these websites or store views.\n\nA typical use of MAGE_RUN_TYPE and MAGE_RUN_CODE is to set up stores with different options in different domains. For example, you could have one set of categories and products on one domain and another domain that has categories and products for a different language.\n\nConfigure Magento websites and stores\nThis section discusses the minimum tasks required to use the MAGE_RUN_TYPE and MAGE_RUN_CODE variables.\n\nWe use the following terms:\n\n\n  \n    Website is the top-level container for sites, shipping methods, payment methods, and so on. To create completely separate sites that do not share cart, shipping methods, and so on,  you must create separate websites.\n  \n  \n    Store is contained by a website. In turn, a store contains at least one store view.\n  \n\n\nMultiple stores can share cart, user sessions, payment gateways, and so on, but they have separate catalog structures. \n\nStore views change the way pages are presented, and are typically used to display a store with different layouts or languages. \n\n\nEach website and each store view must have a unique identifier. This identifier is required to use MAGE_RUN_TYPE and MAGE_RUN_CODE as follows:\n\n\n  MAGE_RUN_TYPE can be either store or website\n\n\n*    Use `website` to load a website in your storefront.\n*    Use `store` to load any store view in your storefront.\n\n\n\n  MAGE_RUN_CODE is the unique website or store view code that corresponds to MAGE_RUN_TYPE\n\n\nFollowing is a summary of the tasks you must perform. More details are provided in the sections that follow.\n\n\n  Define websites, stores, and store views in the Magento Admin.\n  Create one virtual host per Magento website or store view.\n  Pass the values of MAGE_RUN_TYPE and MAGE_RUN_CODE to the web server.\n\n\nRelated topics\n\n  Set up multiple websites, stores, and store views in the Admin\n  Set up multiple websites with nginx\n  Set up multiple websites with Apache\n\n",
      "url": "/guides/v2.0/config-guide/multi-site/ms_over.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-site-ms-websites-html": {
      "title": "Set up multiple websites, stores, and store views in the Admin",
      "content": "Set up multiple websites, stores, and store views in the Admin\nThis task requires you to create a root category (and additional categories if desired) for each store.\n\nThe tasks discussed in this topic provide one way to set up multiple stores. For additional information, see the following resources in the Magento User Guide:\n\n\n  Categories\n  Adding Websites\n  Store URLs\n  Content\n\n\n\n  For example purposes only, we use a French website with website code french in this topic. For step-by-step tutorials, see:\n\n  \n    Tutorial—Set up multiple websites with Apache\n    Tutorial—Set up multiple websites with nginx\n  \n\n\n\nStep 1: Create root categories\nCreating a root category is optional, but we show how to do it in this tutorial in the event you want each website to have a unique root category. You can create additional categories if you choose.\n\nTo create a root category: \n  Log in to the Magento Admin as a user authorized to create categories.\n  Click Products &gt; Categories.\n  Click Add Root Category.\n  In the Category Name field, enter a unique name to identify this category.\n  \n    Make sure Enable Category is set to Yes.\n\n    For information about the other options on this page, see Root Categories.\n\n    The following figure shows an example.\n\n    \n  \n  Click Save.\n  Repeat these tasks as many times as necessary to create root categories for your stores.\n\n\n\nStep 2: Create websites\n\nTo create a website: \n  Log in to the Magento Admin as a user authorized to create websites, stores, and store views.\n  Click Stores &gt; Settings &gt; All Stores.\n  \n    On the Stores page, click Create Website.\n\n    \n      Name field: Enter a name to identify the website.\n      Code field: Enter a unique code; for example, if you have a French store, you can enter french\n      Sort Order field: Enter an optional numerical sort order.\n    \n\n    The following figure shows an example.\n\n    \n  \n  Click Save Web Site.\n  Repeat these tasks as many times as necessary to create your websites.\n\n\n\nStep 3: Create stores\n\nTo create a store: \n  In the Magento Admin, click Stores &gt; Settings &gt; All Stores.\n  \n    On the Stores page, click Create Store.\n\n    \n      Web Site list: Click the name of the website with which to associate this store.\n      Name field: Enter a name to identify the store.\n      Code field: Enter a unique code to identify the store.\n      Root Category list: Click the name of the root category for this store.\n    \n\n    The following figure shows an example.\n\n    \n  \n  Click Save Store.\n  Repeat these tasks as many times as necessary to create your stores.\n\n\n\nStep 4: Create store views\n\nTo create a store view: \n  In the Magento Admin, click Stores &gt; Settings &gt; All Stores.\n  \n    On the Stores page, click Create Store View.\n\n    \n      Store list: Click the name of the store with which to associate this store view.\n      Name field: Enter a name to identify this store view.\n      Code field: Enter a unique name to identify this store view.\n      Status list: Click Enabled.\nThe following figure shows an example.\n    \n\n    \n  \n  Click Save Store View.\n  Repeat these tasks as many times as necessary to create your store views.\n\n\n\nStep 5: Change a website’s base URL\nTo access a website using a unique URL like http://french.magento.mg, you must change the base URL for each site in the Magento Admin.\n\nTo change the website's base URL: \n  In the Admin, click Stores &gt; Settings &gt; Configuration &gt; General &gt; Web.\n  \n    From the Store View list at the top of the page, click the name of one of your websites as the following figure shows.\n\n    \n  \n  In the right pane, expand Base URLs.\n  In the Base URL section, clear the Use Default check box.\n  \n    Enter http://french.magento.mg as the following example shows.\n\n    \n\n    \n  \t\tIf you're setting up a base URL for deployment Magento Commerce (Cloud), you must replace the first period with three dashes. For example, if your base URL is french.branch-sbg7pPa-f3dueAiM03tpy.us.magentosite.cloud, enter http://french---branch-sbg7pPa-f3dueAiM03tpy.us.magentosite.cloud.\n  \t\tIf you're setting up a base URL for local testing, use a period.\n\n  \n  Click Save Config.\n  Repeat these tasks for other websites.\n\n\n\nStep 6: Add the store code to the base URL\nMagento gives you the option to add the store code to the site’s base URL, which simplifies the process of setting up multiple stores. Using this option, you don’t have to create directories on the Magento file system to store index.php and .htaccess.\n\nThis prevents index.php and .htaccess from getting out of sync with the Magento codebase in future upgrades.\n\nFor more information, see the Magento User Guide.\n\nTo add the store code to the website's base URL: \n  In the Admin, click Stores &gt; Settings &gt; Configuration &gt; General &gt; Web.\n  \n    From the Store View list at the top of the page, click Default Config as the following figure shows.\n\n    \n  \n  In the right pane, expand Url Options.\n  Clear the Use system value check box next to Add Store Code to Urls.\n  \n    From the Add Store Code to Urls list, click Yes as the following figure shows.\n\n    \n  \n  Click Save Config.\n  If prompted, flush the Magento cache. (System &gt; Cache Management).\n\n\n\nStep 7: Change the default store view’s base URL\nYou must perform this step last because after it’s done, you’ll lose access to the Magento Admin; your access returns after you set up virtual hosts as discussed in the web-server-specific topics.\n\nTo change the default store view's base URL: \n  In the Admin, click Stores &gt; Settings &gt; Configuration &gt; General &gt; Web.\n  \n    From the Store View list at the top of the page, click Default Config as the following figure shows.\n\n    \n  \n  In the right pane, expand Base URLs.\n  \n    Enter http://mysite.mg as the following example shows.\n\n    \n\n    \n  \t\tIf you're setting up a base URL for Magento Commerce (Cloud), you must replace the first period with three dashes. For example, if your base URL is french.branch-sbg7pPa-f3dueAiM03tpy.us.magentosite.cloud, enter http://french---branch-sbg7pPa-f3dueAiM03tpy.us.magentosite.cloud.\n\n  \n  Click Save Config.\n\n\n\nNext step\n\n  Magento Commerce (Cloud): Set up multiple Magento Commerce (Cloud) websites or stores\n  Tutorial—Set up multiple websites or stores with nginx\n  Tutorial—Set up multiple websites with Apache\n\n\nRelated information\nAdd content to your websites\n",
      "url": "/guides/v2.0/config-guide/multi-site/ms_websites.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-block-html": {
      "title": "Block",
      "content": "In functional tests we use Page Object Design Pattern. Under this pattern, a block is an area of the UI that a test interacts with, and a page is a container for blocks.\n\nThe Page Object Design Pattern is used to avoid unnecessary duplication of code and to make tests easier to support.\n\nBlock as a class represents a set of methods to manipulate with Magento UI blocks. It contains all logic you want to apply to the Magento block under test.\n\nA block can have the following features:\n\n\n  A block can contain other blocks.\n  A block can be used in several pages and blocks.\n\n\nThis topic shows how to create a new block and explore its structure. It discusses how to use mapping for forms in blocks and forms in tabs.\n\nExample\n\nA block Magento\\Ui\\Test\\Block\\Messages extends a basic block Magento\\Mtf\\Block\\Block and implements methods to interact with messages.\n\nShow/hide the code /**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Ui\\Test\\Block;\n\nuse Magento\\Mtf\\Block\\Block;\nuse Magento\\Mtf\\Client\\Locator;\n\n/**\n * Global messages block.\n */\nclass Messages extends Block\n{\n    /**\n     * Success message selector.\n     *\n     * @var string\n     */\n    protected $successMessage = '[data-ui-id$=message-success]';\n\n    /**\n     * Last success message selector.\n     *\n     * @var string\n     */\n    protected $lastSuccessMessage = '[data-ui-id$=message-success]:last-child';\n\n    /**\n     * Error message selector.\n     *\n     * @var string\n     */\n    protected $errorMessage = '[data-ui-id$=message-error]';\n\n    /**\n     * Notice message selector.\n     *\n     * @var string\n     */\n    protected $noticeMessage = '[data-ui-id$=message-notice]';\n\n    /**\n     * Warning message selector.\n     *\n     * @var string\n     */\n    protected $warningMessage = '[data-ui-id$=message-warning]';\n\n    /**\n     * Wait for success message.\n     *\n     * @return bool\n     */\n    public function waitSuccessMessage()\n    {\n        return $this-&gt;waitForElementVisible($this-&gt;successMessage, Locator::SELECTOR_CSS);\n    }\n\n    /**\n     * Get all success messages which are present on the page.\n     *\n     * @return array\n     */\n    public function getSuccessMessages()\n    {\n        $this-&gt;waitForElementVisible($this-&gt;successMessage);\n        $elements = $this-&gt;_rootElement-&gt;getElements($this-&gt;successMessage);\n\n        $messages = [];\n        foreach ($elements as $element) {\n            $messages[] = $element-&gt;getText();\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Get all notice messages which are present on the page.\n     *\n     * @return array\n     */\n    public function getNoticeMessages()\n    {\n        $this-&gt;waitForElementVisible($this-&gt;noticeMessage);\n        $elements = $this-&gt;_rootElement-&gt;getElements($this-&gt;noticeMessage);\n\n        $messages = [];\n        foreach ($elements as $element) {\n            $messages[] = $element-&gt;getText();\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Get last success message which is present on the page.\n     *\n     * @return string\n     */\n    public function getSuccessMessage()\n    {\n        $this-&gt;waitForElementVisible($this-&gt;successMessage);\n\n        return $this-&gt;_rootElement-&gt;find($this-&gt;lastSuccessMessage)-&gt;getText();\n    }\n\n    /**\n     * Wait for element is visible in the page.\n     *\n     * @param string $selector\n     * @param string $strategy\n     * @return bool|null\n     */\n    public function waitForElementVisible($selector, $strategy = Locator::SELECTOR_CSS)\n    {\n        $browser = $this-&gt;browser;\n        return $browser-&gt;waitUntil(\n            function () use ($browser, $selector, $strategy) {\n                $message = $browser-&gt;find($selector, $strategy);\n                return $message-&gt;isVisible() ? true : null;\n            }\n        );\n    }\n\n    /**\n     * Get all error message which is present on the page.\n     *\n     * @return string\n     */\n    public function getErrorMessage()\n    {\n        return $this-&gt;_rootElement\n            -&gt;find($this-&gt;errorMessage, Locator::SELECTOR_CSS)\n            -&gt;getText();\n    }\n\n    /**\n     * Get notice message which is present on the page.\n     *\n     * @return string\n     */\n    public function getNoticeMessage()\n    {\n        $this-&gt;waitForElementVisible($this-&gt;noticeMessage);\n        return $this-&gt;_rootElement-&gt;find($this-&gt;noticeMessage)-&gt;getText();\n    }\n\n    /**\n     * Get warning message which is present on the page.\n     *\n     * @return string\n     */\n    public function getWarningMessage()\n    {\n        $this-&gt;waitForElementVisible($this-&gt;warningMessage);\n        return $this-&gt;_rootElement-&gt;find($this-&gt;warningMessage)-&gt;getText();\n    }\n}\n\n\nBasic blocks\n\nMagento contains basic blocks for the functional testing with a logic that you can reuse. The most popular are the following:\n\n\n  Magento\\Mtf\\Block\\Block\n  Magento\\Mtf\\Block\\Form\n  Magento\\Backend\\Test\\Block\\Widget\\Tab\n  Magento\\Backend\\Test\\Block\\Widget\\FormTabs\n  Magento\\Backend\\Test\\Block\\Widget\\Grid\n  Magento\\Ui\\Test\\Block\\Adminhtml\\DataGrid\n\n\nBlock identifier\n\nEach block has an identifier that includes selector and searching strategy. This identifier is determined by the Magento\\Mtf\\Client\\Element\\Locator class and is stored in the _rootElement property of the Magento\\Mtf\\Block\\Block class.\n\nYou can use the _rootElement to find an element in the current block.\n\nExample from the WidgetInstance.php block:\n\n&lt;?php\nprotected function addLayoutUpdates()\n{\n   $this-&gt;_rootElement-&gt;find($this-&gt;addLayoutUpdates)-&gt;click();\n}\n\nThis code uses _rootElement to search the button element by the $this-&gt;addLayoutUpdates selector. The advantage of the _rootElement is that it enables search in the context of the block to which the element belongs.\n\nForm mapping\n\nOften, you need to test a Magento block that contains a form. And of course, tests require entering data in the forms. The Functional Testing Framework (FTF) has a Magento\\Mtf\\Block\\Form class that enables you to fill the forms automatically. One of the advantages of using this class is that you can list elements that must be automatically filled. These elements can be grouped in separate XML files. In the FTF we call this process “a mapping”. You can use mapping to transfer data to the block from the fixture.\n\nA mapping file is an XML file which has the same name and path as the block does, and contains fields that represent form fields. Field name in the mapping file shall match the one in the fixture.\n\nLet’s see the Customer Login block. The block has two input fields: email and password.\n\n\n\nThe mapping file for the block is stored in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Customer/Test/Block/Form/Login.xml, along with the block.\n\n\n\nThe mapping file defines the fields from the form.\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;mapping strict=\"1\"&gt;\n    &lt;wrapper&gt;login&lt;/wrapper&gt;\n    &lt;fields&gt;\n        &lt;email&gt;\n            &lt;selector&gt;[name='login[username]']&lt;/selector&gt;\n        &lt;/email&gt;\n        &lt;password /&gt;\n    &lt;/fields&gt;\n&lt;/mapping&gt;\n\nSee a description of the nodes in the following table.\n\n\nNode Description Value from example\nmapping Root node with a strict attribute. If strict equals 0, then all the fixture field data must be entered in the block form. If strict equals 1, then only the mapping file fields data must be entered in the block form. \"1\". Only the mapping file fields data must be entered in the block form.\nwrapper Automatically adds group_name to the selector of the field, when selector has not been specified. login\nfields The node containing mapping fields. &lt;email&gt;, &lt;password /&gt;.\nselector Value for the selector that is used to find the field. Default: [name='group_name[field_node_name]']. Default value is assigned automatically if the node is absent in the field. For the &lt;email&gt;, the [name='login[username]']. For the &lt;password /&gt;, the [name='login[password]'] that is the default value where wrapper=\"login\".\nstrategy The strategy of the selection. Available values: css selector, xpath. Default: css selector. css selector as a default value.\ninput Type of the input element. Available values: select checkbox &lt;typified element&gt; simple simple is for simple input element. Default: simple. Do not use class node, if you use input in the field. simple as a default value.\nclass Class of the element. Applicable if non of the input options fits. Do not use input, if you use class in the field. This node has not been used in the example.\n\n\nAll nodes are optional. Default value is assigned automatically if a node (selector, strategy, input) is absent in the field.\n\nThe general structure of the form mapping file:\n\n\n\nForm tab mapping\n\nYou can use mapping for the forms on tabs (a form tab) that enables you to automate switching between tabs and entering the data.\nTo get the block class with form tab mapping, extend your class from Magento\\Backend\\Test\\Block\\Widget\\FormTabs . If you want to use custom tab logic you can extend your class from Magento\\Backend\\Test\\Block\\Widget\\Tab class.\n\nFor example, let’s see tabs for the Magento Widget: Settings, Storefront properties, Frontend App Options, Layout Updates .\n\n\n\nFour tabs are mapped in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Block/Adminhtml/Widget/Instance/Edit/WidgetForm.xml file, which is stored along with the block class.\n\n\n\nThe file contains the following mapping:\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;tabs&gt;\n    &lt;settings&gt;\n        &lt;class&gt;\\Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\Instance\\Edit\\Tab\\Settings&lt;/class&gt;\n        &lt;selector&gt;#widget_instace_tabs_settings_section&lt;/selector&gt;\n        &lt;strategy&gt;css selector&lt;/strategy&gt;\n        &lt;fields&gt;\n            &lt;code&gt;\n                &lt;input&gt;select&lt;/input&gt;\n            &lt;/code&gt;\n            &lt;theme_id&gt;\n                &lt;input&gt;select&lt;/input&gt;\n            &lt;/theme_id&gt;\n        &lt;/fields&gt;\n    &lt;/settings&gt;\n    &lt;frontend_properties&gt;\n        &lt;class&gt;\\Magento\\Backend\\Test\\Block\\Widget\\Tab&lt;/class&gt;\n        &lt;selector&gt;#widget_instace_tabs_main_section&lt;/selector&gt;\n        &lt;strategy&gt;css selector&lt;/strategy&gt;\n        &lt;fields&gt;\n            &lt;title /&gt;\n            &lt;store_ids&gt;\n                &lt;input&gt;multiselectgrouplist&lt;/input&gt;\n                &lt;selector&gt;[id=\"store_ids\"]&lt;/selector&gt;\n            &lt;/store_ids&gt;\n        &lt;/fields&gt;\n    &lt;/frontend_properties&gt;\n    &lt;widget_options&gt;\n        &lt;class&gt;\\Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\Instance\\Edit\\Tab\\Parameters&lt;/class&gt;\n        &lt;selector&gt;#widget_instace_tabs_properties_section&lt;/selector&gt;\n        &lt;strategy&gt;css selector&lt;/strategy&gt;\n    &lt;/widget_options&gt;\n    &lt;widget_instance&gt;\n        &lt;class&gt;\\Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\Instance\\Edit\\Tab\\WidgetInstance&lt;/class&gt;\n        &lt;selector&gt;#widget_instace_tabs_main_section&lt;/selector&gt;\n        &lt;strategy&gt;css selector&lt;/strategy&gt;\n    &lt;/widget_instance&gt;\n&lt;/tabs&gt;\n\nSee the following table to understand the node’s purpose.\n\n\n\n\n\ntabs nodes Description\nwrapper Automatically adds group_name to the selector of the field, when selector has not been specified.\nclass Reference to the class that handles tab’s behavior.\nselector Identifier for the selector of the tab in the HTML code, used to open the tab.\nstrategy Strategy of the selector. Can be css selector or xpath.\nfields List of fields with parameters, that are the same as in the form mapping. Also field in tab can include more then one field, in this case add field attribute composite=\"1\".\n\n\n\nExample of composite field from ProductForm.xml:\n\nIn the mapping file:\n\n&lt;quantity_and_stock_status composite=\"1\"&gt;\n    &lt;qty&gt;\n        &lt;selector&gt;[name=\"product[quantity_and_stock_status][qty]\"]&lt;/selector&gt;\n    &lt;/qty&gt;\n    &lt;is_in_stock&gt;\n        &lt;selector&gt;[name=\"product[quantity_and_stock_status][is_in_stock]\"]&lt;/selector&gt;\n        &lt;input&gt;select&lt;/input&gt;\n    &lt;/is_in_stock&gt;\n&lt;/quantity_and_stock_status&gt;\n\nOn the UI:\n\n\n\nThe general structure of the form tab mapping file:\n\n\n\nMerging form tab mapping files\n\nWhen you test a module that extends the functionality of the other module by adding a tab to the testing module entity, you can merge their form tab mapping files.\n\nThe form tab mapping files that have the same name and path inside different modules are merged automatically.\n\nForm tab mapping files in the following example will be merged automatically:\n\n\n\nRenders\n\nRenders help to unify a polymorphic behavior of the block. If you want to test the functionality of the object, which behavior differs depending on the type of the object, you can create a separate class for each type and call the corresponding class using render.\n\nHowTos\n\nCreate a block\n\nA basic flow is the following:\n\n\n  Get name and path of the block you want to test\n  Create block class with logic you need for the tests\n  Add block to the page\n  Run the page generator\n\n\nHow to determine a block name and a path\n\nThe block name and path in the Magento functional tests (&lt;magento2_root_dir&gt;/dev/tests/functional/tests/app) should reflect a corresponding block in the Magento code base for your convenience.\nFor example, you develop a functional test for the bundle product creation, that uses the Bundle Items section. In the Magento code base, the block, which is responsible for the bundle option, is the .../Magento/Bundle/Block/Adminhtml/Catalog/Product/Edit/Tab/Bundle/Option.php, so in the Magento functional tests you can create a new file .../Magento/Bundle/Block/Test/Adminhtml/Catalog/Product/Edit/Tab/Bundle/Option.php.\n\nMagento can show you a full class name of the block and path to the PHTML template on the Magento page (changes web page design) or implicitly in the HTML code of the page.\n\nGet the name and the path of blocks in UI\n\nTo enable this feature follow:\n\n\n  Log in to Magento Admin as administrator\n  Follow STORES &gt; Configuration\n  Change Store View to Main Website (the template path and block name will only appear for current website)\n  Follow ADVANCED &gt; Developer\n  Expand the Debug tab\n  Set Template Path Hints to Yes\n  Set Add Block Name to Hints to Yes\n  Save Config\n\n\n\n\nNow each UI block has hint about its name and path. Also, you can see the path to a PHTML template, where you can find a path to the Magento block, if you cannot find it in the hint.\n\n\n\n\n  If the name and path cover partially each other, hover the mouse pointer over the name or the path (whatever you need) with mouse pointer to see the full phrase.\n\n\nGet the name and the path of blocks in the code\n\nIf you want to change the representation of block details, you can change a Template.php:\n\n\n  \n    Open &lt;magento2_root_dir&gt;/lib/internal/Magento/Framework/View/Element/Template.php\n  \n  \n    Find the method\n  \n\n\n&lt;?php\nprotected function _toHtml()\n{\n    if (!$this-&gt;getTemplate()) {\n        return '';\n    }\n    return $this-&gt;fetchView($this-&gt;getTemplateFile());\n}\n\n\n  Change the code to the following\n\n\n&lt;?php\nprotected function _toHtml()\n{\n    if (!$this-&gt;getTemplate()) {\n        return '';\n    }\n    $name = $this-&gt;getNameInLayout();\n    $template = $this-&gt;getTemplateFile();\n    $class = get_class($this);\n    return \"&lt;!-- BEGIN $name using $template \\n\" . $class . \"--&gt;\"\n        . $this-&gt;fetchView($template)\n        . \"&lt;!-- END $name using $template --&gt;\";\n}\n\n\n  Save the file\n\n\nNow you can inspect any element in a browser, and find which block contains it.\n\n\n\nAdd a block to the page\n\nBlocks are tested as part of the page object. To add the block to the page you must add a corresponding node to the XML file of the page object.\n\nFor example, the WidgetGrid.php is a part of the page that is defined in WidgetInstanceIndex.xml.\n\nblock is the node that adds the block to the page:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"WidgetInstanceIndex\" area=\"Adminhtml\" mca=\"admin/widget_instance/index\" module=\"Magento_Widget\"&gt;\n        ...\n        &lt;block name=\"widgetGrid\" class=\"Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\WidgetGrid\" locator=\"#widgetInstanceGrid\" strategy=\"css selector\" /&gt;\n        ...\n    &lt;/page&gt;\n&lt;/config&gt;\n\n\n\n  See the block node attributes details in the following table:\n\n  \n    \n      \n        block attribute\n        Description\n        Is required\n        Values\n        Example\n      \n    \n    \n      \n        name\n        Name of the block\n        Required\n        Unique in the page. The method to get the block class instance is generated using this value.\n        widgetGrid\n      \n      \n        class\n        Full name of the block class\n        Required\n        Class name\n        Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\WidgetGrid\n      \n      \n        locator\n        CSS selector or XPath locator of the block\n        Required\n        CSS Selectors, XPath\n        CSS: #widgetInstanceGrid, XPath: //*[@id=\"widgetInstanceGrid\"]\n      \n      \n        strategy\n        Selector strategy\n        Required\n        css selector or xpath\n        css selector\n      \n    \n  \n\n\n\nRun the page generator\n\nTo apply all changes you've made to the page (XML file), run the class generator.\nphp &lt;magento2&gt;/dev/tests/functional/utils/generate.php\nThe page will be updated in the &lt;magento2&gt;/dev/tests/functional/generated directory.\n\nUse blocks inside blocks\n\nYou can get other blocks in the block using the BlockFactory class and a selector.\n\nSee the following example:\n\n&lt;?php\nprotected function getTemplateBlock()\n{\n    return $this-&gt;blockFactory-&gt;create(\n        'Magento\\Backend\\Test\\Block\\Template',\n        ['element' =&gt; $this-&gt;_rootElement-&gt;find($this-&gt;templateBlock, Locator::SELECTOR_XPATH)]\n    );\n}\n\nIn this code we are creating the Magento\\Backend\\Test\\Block\\Template block with the selector $this-&gt;templateBlock.\n\nCreate and use renders\n\nUse case: We want to test the “Add to cart” functionality. To add different types of products, we need to configure each type in a different way. For the configuration, we need options of the type we want to configure. We can use render to get product options. Render specifies which class to use for the specific type of product.\n\nLet’s see the Catalog/Test/Page/Product/CatalogProductView.xml page. For the better readability we reduced a list of blocks to one block.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogProductView\" area=\"Product\" mca=\"catalog/product/view\" module=\"Magento_Catalog\"&gt;\n        &lt;block name=\"viewBlock\" class=\"Magento\\Catalog\\Test\\Block\\Product\\View\" locator=\"#maincontent\" strategy=\"css selector\" module=\"Magento_Catalog\"/&gt;        \n    &lt;/page&gt;\n&lt;/config&gt;\n\nThis page relates to the Magento_Catalog module and contains ViewBlock. This block has reference to the Magento\\Catalog\\Test\\Block\\Product\\View class, that is responsible to enter data in Product form fields. But different types of products, such as bundle, each have their own ViewBlock in a corresponding module. And that is where you can use render!\n\nCreate a render\n\nLet’s create render for the bundle product.\n\nStep 1. Create Bundle/Test/Page/Product/CatalogProductView.xml page to merge with the basic page Catalog/Test/Page/Product/CatalogProductView.xml. Learn more about page merging.\n\nStep 2. In the Bundle/Test/Page/Product/CatalogProductView.xml, copy page node from the Catalog/Test/Page/Product/CatalogProductView.xml without module attribute\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogProductView\" area=\"Product\" mca=\"catalog/product/view\"&gt;\n                \n    &lt;/page&gt;\n&lt;/config&gt;\n\nStep 3. Insert block with the same name of block and add a render that indicates the type of product and the class that processes this block\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogProductView\" area=\"Product\" mca=\"catalog/product/view\"&gt;\n        &lt;block name=\"viewBlock\"&gt;\n            &lt;render name=\"bundle\" class=\"Magento\\Bundle\\Test\\Block\\Catalog\\Product\\View\" /&gt;\n        &lt;/block&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nDetails:\n\n\n  The PHP class for the page will be generated in the Magento_Catalog module, because we did not mention module attribute in the page node\n  In the block, we indicate name attribute only\n\n\nStep 4. Run the page generator\n\nTo apply all changes you've made to the page (XML file), run the class generator.\nphp &lt;magento2&gt;/dev/tests/functional/utils/generate.php\nThe page will be updated in the &lt;magento2&gt;/dev/tests/functional/generated directory.\n\nUse a render\n\nLet’s take a look at the basic class Magento\\Catalog\\Test\\Block\\Product\\View, where a render calls the getOptions() method from Magento\\Bundle\\Test\\Block\\Catalog\\Product\\View.\n\n&lt;?php\npublic function getOptions(FixtureInterface $product)\n{\n    /** @var CatalogProductSimple $product */\n    $dataConfig = $product-&gt;getDataConfig();\n    $typeId = isset($dataConfig['type_id']) ? $dataConfig['type_id'] : null;\n    \n    return $this-&gt;hasRender($typeId)\n        ? $this-&gt;callRender($typeId, 'getOptions', ['product' =&gt; $product])\n        : $this-&gt;getCustomOptionsBlock()-&gt;getOptions($product);\n}\n\nIt contains the getOptions() method that:\n\n\n  \n    Gets from the Bundle/Test/Fixture/BundleProduct.php fixture the type_id field value $dataConfig['type_id']. In our case, type_id='bundle'.\n  \n  \n    Calls the hasRender() method to check if there is a render with the name bundle\n  \n  \n    Calls the render if there is a render with the name bundle\n  \n\n\n$this-&gt;callRender($typeId, 'getOptions', ['product' =&gt; $product])\n\n\n\n  Calls a default method if the render is absent\n\n\n$this-&gt;getCustomOptionsBlock()-&gt;getOptions($product);\n\n\nDefine a selector/locator\n\nThere are some rules that should be followed to define a selector:\n\n\n  Use CSS and XPath strategies.\n  To work with forms, use the name attribute as a selector.\n  If an attribute is static (not auto-generated), use the id attribute.\n  If you cannot use id, use data-* attributes.\n  We recommend not to use the class attribute, because it can be changed and not unique very often.\n  Do not use complex hard-coded structures like //div/div[2]//tbody//tr[1]/td[0], they can be unpredictably changed.\n  Do not use enclosed text such as button or label names like //button[contains(., \"Sign in\")]\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_block.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-changelog-html": {
      "title": "Changelog of the Functional Testing Framework",
      "content": "Check current state of the Functional Testing Framework, history of changes and list of releases on GitHub.\n\n",
      "url": "/guides/v2.0/mtf/mtf_changelog.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-constraint-html": {
      "title": "Constraint",
      "content": "The Functional Testing Framework (FTF) constraint performs assertions after a test flow. A test flow is a set of test steps without assertions.\nEach constraint name must be globally unique in Magento application and must be placed in the module to which it belongs. Constraints run automatically after test flow has finished.\n\n\n\nConstraint structure\n\nConstraint directory\n\nA module in functional tests (&lt;magento2_root_dir&gt;/dev/tests/app/Magento/) stores constraints in the Constraint directory. The following image shows the Constraint directory of the Magento_Widget module.\n\n\n\nConstraint class\n\nThe constraint PHP class must:\n\n\n  \n    Have unique name created using the following template Assert{MagentoEntityName}{verification|action|place}. For example:\n\n    \n      AssertUserSuccessDeleteMessage corresponds to Assert{entityName}{verification}\n      AssertOrderPlaced corresponds to Assert{entityName}{action}\n      AssertProductForm corresponds to Assert{entityName}{place}\n    \n  \n  \n    Extend the Magento\\Mtf\\Constraint\\AbstractConstraint class.\n  \n  \n    Contain the following methods:\n\n    \n      processAssert() which contains assertions. A PHPUnit_Framework_Assert class (&lt;magento2_root_dir&gt;/dev/tests/functional/vendor/phpunit/phpunit/src/Framework/Assert.php) can be used to simplify assertions.\n      toString() which returns a success message if the assertion is performed successfully\n    \n  \n\n\nConstraint arguments\n\nIn the FTF, data set values are shared with a test class and constraints. A node name in data set can be complex like item1/item2/item3. The argument name in processAssert() must be the same as the item1 to transfer data from data set to constraint.\n\nIf a data set variable is used in the test, and is overwritten, it is transferred as altered to the constraint. Variables can be overwritten in the injectable test case  class in test(), __inject() and __prepare() methods, and then passed to the constraint class by return. Furthermore, any returned value of these methods can be used as an argument in constraint.\n\nAn object that is not defined in the data set or isn’t returned from the test case is created using the Object Manager.\n\nLet’s see the following images for the CreateSimpleProductEntityTest test and the AssertProductPricesOnCategoryPage constraint. Data set from the diagrams contains three variables with data: product, category and price.\n\n\n\nGreen arrows show that product value is transferred to the test and the constraint.\n\n\n\nOrange arrows show that category variable is transferred to the test directly, overwritten by testCreate() method and only then transferred to constraint.\n\n\n\nBlue arrow shows that price value is transferred to the constraint only.\n\nConstraint in the test\n\nA test case’s constraints are nodes in variations of a data set. The data set has references to the PHP classes with assertions.\n\nConstraints are performed in order they listed in the data set. However, you can use prev (previous) and next attributes to set your custom order.\n\n&lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertCategorySaveMessage\" next=\"Magento\\Catalog\\Test\\Constraint\\AssertCategoryForm\"/&gt;\n&lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertCategoryForm\" prev=\"Magento\\Catalog\\Test\\Constraint\\AssertCategorySaveMessage\" next=\"Magento\\Catalog\\Test\\Constraint\\AssertCategoryPage\"/&gt;\n&lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertCategoryPage\" prev=\"Magento\\Catalog\\Test\\Constraint\\AssertCategoryForm\" /&gt;\n\n\n    Constraint failure causes interruption of constraints execution within variation, and a test continues to perform from the next variation.\n\n\nA test can contain constraints from different modules.\n\n\n  Be careful when you use constraints from another module. A module that is referred by constraint can be disabled, that fails in the test execution. It is safe to use constraints of different modules in one test case if that modules have hard dependencies.\n  \n\n\nThe following example shows the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/TestCase/DeleteWidgetEntityTest.xml data set with two constraints.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Widget\\Test\\TestCase\\DeleteWidgetEntityTest\" summary=\"Delete Widget\" ticketId=\"MAGETWO-28459\"&gt;\n        &lt;variation name=\"DeleteWidgetEntityTestVariation1\"&gt;\n            &lt;data name=\"widget/dataset\" xsi:type=\"string\"&gt;default&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetSuccessDeleteMessage\" /&gt;\n            &lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetAbsentOnFrontendHome\" /&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nImmediately after the test steps complete, both constraints are performed in the order listed.\n\nTagging\n\nTagging enables you to indicate what constraints must be called.\n\nYou can tag constraints in &lt;module&gt;/Test/etc/di.xml using a severity argument. Severity tagging of constraints is used for the customization of test run.\n\nYou can use the following severity tags:\n\n\n  high\n  middle\n  low\n\n\nTo assign severity tags do the following:\n\n\n  Create di.xml file in Test/etc of the module.\n  Assign severity to constraints in the following format:\n\n\n&lt;type name=\"Magento\\[Module_name]\\Test\\Constraint\\Assert...\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"severity\" xsi:type=\"string\"&gt;high|middle|low&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n\nFor example, &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/CatalogRule/Test/etc/di.xml:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n  &lt;type name=\"Magento\\CatalogRule\\Test\\Constraint\\AssertCatalogPriceRuleAppliedProductPage\"&gt;\n    &lt;arguments&gt;\n      &lt;argument name=\"severity\" xsi:type=\"string\"&gt;high&lt;/argument&gt;\n    &lt;/arguments&gt;\n  &lt;/type&gt;\n  &lt;type name=\"Magento\\CatalogRule\\Test\\Constraint\\AssertCatalogPriceRuleAppliedCatalogPage\"&gt;\n    &lt;arguments&gt;\n      &lt;argument name=\"severity\" xsi:type=\"string\"&gt;high&lt;/argument&gt;\n    &lt;/arguments&gt;\n  &lt;/type&gt;\n  &lt;type name=\"Magento\\CatalogRule\\Test\\Constraint\\AssertCatalogPriceRuleAppliedShoppingCart\"&gt;\n    &lt;arguments&gt;\n      &lt;argument name=\"severity\" xsi:type=\"string\"&gt;high&lt;/argument&gt;\n    &lt;/arguments&gt;\n  &lt;/type&gt;\n&lt;/config&gt;\n\nHow to create constraint\n\nUse case: We want to assert widget availability in a widget grid.\n\nStep 1. What module does it belong?\n\nWidget grid and widget fixture are related to the Magento_Widget module.\n  Thus, we need to create constraint in the Magento_Widget module, in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Constraint.\n\nStep 2. What name should constraint have?\n\nUsing constraint naming principle, the constraint should be named as AssertWidgetInGrid.\n\nStep 3. Create &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Constraint/AssertWidgetInGrid.php with required structure\n\n&lt;?php\n\nnamespace Magento\\Widget\\Test\\Constraint;\n\nuse Magento\\Mtf\\Constraint\\AbstractConstraint;\n\n/**\n * Assert widget is available in widget grid.\n */\nclass AssertWidgetInGrid extends AbstractConstraint\n{\n    /**\n     * Assert widget availability in widget grid.\n     * \n     * @return void\n     */\n    public function processAssert()\n    {\n\n    }\n\n    /**\n     * Returns a string representation of the object.\n     *\n     * @return string\n     */\n    public function toString()\n    {\n        return 'Widget is present in widget grid.';\n    }\n}\n\nStep 4. Implement assertion in processAssert()\n\nAssertion logic: Take title of the widget from the widget fixture, open the page with a grid, check if the grid has our title.\n\n&lt;?php\n\nnamespace Magento\\Widget\\Test\\Constraint;\n\nuse Magento\\Widget\\Test\\Fixture\\Widget;\nuse Magento\\Widget\\Test\\Page\\Adminhtml\\WidgetInstanceIndex;\nuse Magento\\Mtf\\Constraint\\AbstractConstraint;\n\n/**\n * Assert widget is available in widget grid.\n */\nclass AssertWidgetInGrid extends AbstractConstraint\n{\n    /**\n     * Assert widget availability in widget grid.\n     * \n     * @return void\n     */\n    public function processAssert(Widget $widget, WidgetInstanceIndex $widgetInstanceIndex)\n    {\n        $filter = ['title' =&gt; $widget-&gt;getTitle()];\n        $widgetInstanceIndex-&gt;open();\n        \\PHPUnit_Framework_Assert::assertTrue(\n            $widgetInstanceIndex-&gt;getWidgetGrid()-&gt;isRowVisible($filter),\n            'Widget with title \\'' . $widget-&gt;getTitle() . '\\' is absent in Widget grid.'\n        );\n    }\n\n    /**\n     * Returns a string representation of the object.\n     *\n     * @return string\n     */\n    public function toString()\n    {\n        return 'Widget is present in widget grid.';\n    }\n}\n\nHow to use constraint\n\nTo use constraint we’ve created in previous section, add a corresponding node to the data set of your test\n\n&lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetInGrid\" /&gt;\n\nin the order that it must be performed.\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Widget\\Test\\TestCase\\CreateWidgetEntityTest\" summary=\"Create Widget\" ticketId=\"MAGETWO-27916\"&gt;\n        &lt;variation name=\"CreateWidgetEntityTestVariation1\"&gt;\n            &lt;data name=\"widget/data/code\" xsi:type=\"string\"&gt;CMS Static Block&lt;/data&gt;\n            &lt;data name=\"widget/data/theme_id\" xsi:type=\"string\"&gt;Magento Luma&lt;/data&gt;\n            &lt;data name=\"widget/data/title\" xsi:type=\"string\"&gt;Title_%isolation%&lt;/data&gt;\n            &lt;data name=\"widget/data/store_ids/dataset\" xsi:type=\"string\"&gt;all_store_views&lt;/data&gt;\n            &lt;data name=\"widget/data/widget_instance/dataset\" xsi:type=\"string\"&gt;on_category&lt;/data&gt;\n            &lt;data name=\"widget/data/parameters/dataset\" xsi:type=\"string\"&gt;cmsStaticBlock&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetSuccessSaveMessage\" /&gt;\n            &lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetInGrid\" /&gt;\n            &lt;constraint name=\"Magento\\Widget\\Test\\Constraint\\AssertWidgetOnFrontendInCatalog\" /&gt;     \n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_constraint.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-dataset-html": {
      "title": "Data set",
      "content": "A data set contains data used by a test case and constraints.\nA data set can have several variations.\nEach variation has constraints that are called at the end of the test flow.\n\nExample data set\n\nLet’s see an example for CreateSimpleProductEntityTest. A data set and its corresponding test case must be placed in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Catalog/Test/TestCase/Product directory.\n\n\n\nThe CreateSimpleProductEntityTest.xml data set contains:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Catalog\\Test\\TestCase\\Product\\CreateSimpleProductEntityTest\" summary=\"Create Simple Product\" ticketId=\"MAGETWO-23414\"&gt;\n        &lt;variation name=\"CreateSimpleProductEntityTestVariation1\" summary=\"Create product with custom options(fixed price)\"&gt;\n            &lt;data name=\"product/data/url_key\" xsi:type=\"string\"&gt;simple-product-%isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/name\" xsi:type=\"string\"&gt;Simple Product %isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/sku\" xsi:type=\"string\"&gt;simple_sku_%isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/price/value\" xsi:type=\"string\"&gt;10000&lt;/data&gt;\n            &lt;data name=\"product/data/price/dataset\" xsi:type=\"string\"&gt;drop_down_with_one_option_fixed_price&lt;/data&gt;\n            &lt;data name=\"product/data/short_description\" xsi:type=\"string\"&gt;Simple Product short_description %isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/description\" xsi:type=\"string\"&gt;Simple Product description %isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/weight\" xsi:type=\"string\"&gt;50&lt;/data&gt;\n            &lt;data name=\"product/data/quantity_and_stock_status/qty\" xsi:type=\"string\"&gt;657&lt;/data&gt;\n            &lt;data name=\"product/data/custom_options/dataset\" xsi:type=\"string\"&gt;drop_down_with_one_option_fixed_price&lt;/data&gt;\n            &lt;data name=\"product/data/checkout_data/dataset\" xsi:type=\"string\"&gt;simple_drop_down_with_one_option_fixed_price&lt;/data&gt;\n            &lt;data name=\"tag\" xsi:type=\"string\"&gt;test_type:acceptance_test&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductSaveMessage\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductInGrid\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductInCategory\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductPage\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductInCart\" /&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nThis is a data set that:\n\n\n  corresponds to the XSD schema &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/etc/variations.xsd\n  relates to the Magento\\Catalog\\Test\\TestCase\\Product\\CreateSimpleProductEntityTest test case (performs creation of the simple product)\n  relates to the ticket MAGETWO-23414 in Jira\n  contains variation CreateSimpleProductEntityTestVariation1 that\n    \n      contains data to create product with fixed price (see descriptions in the following table)\n      defines tag that can be used to customize the test suite run\n      defines constraints that will be performed after the test flow in the order they are presented in the data set\n    \n  \n\n\nThe CreateSimpleProductEntityTestVariation1 variation contains the following $product data:\n\n\n\n\nFixture fieldDescription\n\nurl_key \nfield is assigned with simple-product-%isolation%. More info about %isolation%.\n\n\nnamefield is assigned with Simple Product %isolation%\n\n\nskufield is assigned with simple_sku_%isolation%\n\n\nprice\n\n\n product/data/price/value is processed by a data source Magento\\Catalog\\Test\\Fixture\\Product\\Price and is assigned 10000\nproduct/data/price/dataset is assigned with a data set drop_down_with_one_option_fixed_price from the Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\Price repository. This data set is used by a constraint.\n\n\n\n\nshort_description\nfield is assigned with Simple Product short_description %isolation%\n\n\ndescription\nfield is assigned with Simple Product description %isolation%\n\n\nweight\nfield is assigned with 50\n\n\nquantity_and_stock_status/qty\nfield is assigned with 657\n\n\ncustom_options\nfield is processed by a data source Magento\\Catalog\\Test\\Fixture\\Product\\CustomOptions using a data set drop_down_with_one_option_fixed_price from the repository Magento\\Catalog\\Test\\Repository\\Product\\CustomOptions\n\n\ncheckout_data\nfields are assigned with a data set simple_drop_down_with_one_option_fixed_price from the Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\CheckoutData repository\n\n\n\nData set structure\n\nA data set is an XML file that contains test variations for a test case.\n\nEach variation includes:\n\n\n  Data used during the test flow and assertions\n  Constraints that are called after the test flow\n\n\nThe following table shows structure of the data set:\n\n\n\n\n\nNode Semantics Attributes \n\nconfig \nThe root element that defines an XML namespace and an XML Schema. \n\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"\n \n\n\ntestCase \nContains a reference to the test case class in attribute and variations in child elements. \n\nname - full name of a test case class. Required.\nsummary - description of a test case. Required.\nticketId - identifier of related ticket. Optional.\n \n\n\nvariation\nContains variation description in attributes and data with constraints in child elements.\n\nname - a variation name. Required.\nfirstConstraint - a full name of constraint that is performed first. Optional.\nmethod - a name of the test method from the test class. Optional.\nsummary - description of the variation. Optional.\nticketId - an identifier of the related ticket. Optional.\n\n\n\ndata \nData to be used by a test case. \n\nname - a name of variable with extra data. More details. Required.\nxsi:type - a type of the value. \nThe following data types are available:\n\narray\nstring\nboolean\nobject\nnumber\nnull\nRequired.\n \n\n\nconstraint\nReference to the constraint class performed after the test flow.  \n\nname - a full name of the constraint class. Required.\nnext - a full name of the constraint class performing next in a queue. Optional.\nprev - a full name of the constraint class performing previous in a queue. Optional.\n\n\n\n\n  A variation should contain only data that is required for its flow and constraints.\n\n\nA data set should be placed in the same directory with a corresponding test case.\n\nData set merging\n\nThe FTF enables you to merge data sets from different modules. For example, if you create a new module that adds a menu option to an existing module, the FTF allows you to merge the new data with the existing data sets. As a result, you don’t have to edit the existing module to include the new information, and your tests continue to work. If you decide to later remove the same new module, you don’t need to clean the data sets in other modules.\n\nThere are two options to merge data sets in the FTF:\n\n\n  add a new variation\n  extend an existing variation\n\n\nHowTos\n\nA data set is a flexible FTF entity that allows to perform different tasks. Learn their descriptions in the following sections.\n\nDefine name in the &lt;data&gt; node\n\nAs you can see in the structure table, the name data has a specific structure. Why? To make your test more flexible.\n\nData mapping by name is performed for the test methods in test case  and processAssert() method in constraints. Let’s see the logic of the &lt;data&gt; processing.\n\nSlash / means array nesting. For example:\n\n\n  &lt;data name=var/index1&gt;value&lt;/data&gt; is converted as var[index1 =&gt; value]\n  &lt;data name=var/index1/index2&gt;value&lt;/data&gt; is converted as var[index1 =&gt; [index2 =&gt; value]]\n\n\nwhere var is a name of an argument of a test case or a constraint.\n\nIf a variable is assigned more than one value:\n\n&lt;data name=\"price/shopping_cart/total\" xsi:type=\"string\"&gt;50&lt;/data&gt;\n&lt;data name=\"price/product_page/special_price/excluding_tax\" xsi:type=\"string\"&gt;6&lt;/data&gt;\n\nthe value is processed as an array:\n\n$price = [\n    'data' =&gt; [\n        'shopping_cart' =&gt; [\n            'total' =&gt; '50'\n        ],\n        'product_page' =&gt; [\n            'special_price' =&gt; [\n                'excluding_tax' =&gt; '6'\n            ]   \n        ]\n    ]\n]\n\n\nAlso, in similar cases you can use array type in a data set, like:\n\n&lt;data name=\"price\" xsi:type=\"array\"&gt;\n    &lt;item name=\"shopping_cart\" xsi:type=\"array\"&gt;\n        &lt;item name=\"total\" xsi:type=\"string\"&gt;50&lt;/item&gt;\n    &lt;item name=\"product_type\" xsi:type=\"array\"&gt;\n        &lt;item name=\"special_price\" xsi:type=\"array\"&gt;\n            &lt;item name=\"excluding_tax\" xsi:type=\"string\"&gt;6&lt;/item&gt;\n        &lt;/item&gt;\n    &lt;/item&gt;\n&lt;/data&gt;\n\nSet a simple variable\n\nFor example, if a test case or constraint has an argument $price, then the test case takes from the data set all the &lt;data&gt; nodes with a name price. Assume a method with the $price argument.\n\npublic function testCreate($price)\n{\n    //\n}\n\nTo assign it with 10 in one of the variations, add the following field to a variation of the corresponding data set:\n\n&lt;data name=\"price\" xsi:type=\"string\"&gt;10&lt;/data&gt;\n\nSet data to a fixture field\n\nIn your test you often need to use injectable fixture instances. For example:\n\npublic function testCreate(\\Magento\\Catalog\\Test\\Fixture\\CatalogProductSimple $product)\n{\n    //\n}\n\nIn this case, the ObjectManager sends data to the InjectableFixture constructor. It declares that your data can be passed to the fixture in $data variable as an array. For example, to assign the existing fixture field weight with 50 you can use the following notation:\n\n &lt;data name=\"product/data/weight\" xsi:type=\"string\"&gt;50&lt;/data&gt;\n\nSet data to a fixture from a repository\n\nThe InjectableFixture class enables you to use a fixture repository. It can be injected in a $dataset variable. For example, to use dataset = product_with_special_symbols_in_name from the repository assigned in the fixture, you can use:\n\n&lt;data name=\"product/dataset\" xsi:type=\"string\"&gt;product_with_special_symbols_in_name&lt;/data&gt;\n\nSet data to a fixture field from a repository\n\nYou can assign data to a fixture field from its repository.\n\nLet’s see an example:\n\n&lt;data name=\"product/data/price/dataset\" xsi:type=\"string\"&gt;drop_down_with_one_option_fixed_price&lt;/data&gt;\n&lt;data name=\"product/data/checkout_data/dataset\" xsi:type=\"string\"&gt;simple_drop_down_with_one_option_fixed_price&lt;/data&gt;\n\nA CatalogProductSimple.xml fixture contains the following declarations:\n\n&lt;field name=\"price\" is_required=\"1\" group=\"product-details\" source=\"Magento\\Catalog\\Test\\Fixture\\Product\\Price\" repository=\"Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\Price\" /&gt;\n&lt;field name=\"checkout_data\" group=\"null\" repository=\"Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\CheckoutData\" /&gt;\n\nThe price fixture field contains the data source that assigns values from a repository. After the InjectableFixture class has passed data to the CatalogProductSimple fixture, Magento\\Catalog\\Test\\Fixture\\Product\\Price data source receives ['dataset' =&gt; 'drop_down_with_one_option_fixed_price'] and assigns values from the ['dataset' =&gt; 'drop_down_with_one_option_fixed_price'] of the Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\Price repository.\n\nThe checkout_data doesn’t contain source and is assigned with values from the Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\\CheckoutData directly.\n\nAdd a new variation\n\nTo add a new variation using merging, you should simply use the name of a test case that you want to merge with. For example, you want to add a new variations from the Magento_ProductVideo module to the Magento\\Catalog\\Test\\TestCase\\Product\\UpdateSimpleProductEntityTest that is placed in the Magento_Catalog module. You can create data set in the Magento_ProductVideo module, containing variations you need, and paste the test case name that you want to merge with:\n\n\n  Create &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/ProductVideo/Test/TestCase/Product/UpdateSimpleProductEntityTest.xml with the following code:\n\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Catalog\\Test\\TestCase\\Product\\UpdateSimpleProductEntityTest\" summary=\"Add Video to PCF\" ticketId=\"PV-1\"&gt;\n        &lt;variation name=\"DeleteVideoFromPCFTestVariation1\" summary=\"Delete video youtube\"&gt;\n            &lt;data name=\"initialProduct/dataset\" xsi:type=\"string\"&gt;product_with_video_youtube&lt;/data&gt;\n            &lt;data name=\"product/data/sku\" xsi:type=\"string\"&gt;sku_simple_product_with_video_%isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/media_gallery/images\" xsi:type=\"string\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductNoImageInGrid\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductForm\" /&gt;\n            &lt;constraint name=\"Magento\\ProductVideo\\Test\\Constraint\\AssertNoVideoCategoryView\" /&gt;\n            &lt;constraint name=\"Magento\\ProductVideo\\Test\\Constraint\\AssertNoVideoProductView\" /&gt;\n        &lt;/variation&gt;\n        &lt;variation name=\"DeleteVideoFromPCFTestVariation2\" summary=\"Delete video vimeo\"&gt;\n            &lt;data name=\"initialProduct/dataset\" xsi:type=\"string\"&gt;product_with_video_vimeo&lt;/data&gt;\n            &lt;data name=\"product/data/sku\" xsi:type=\"string\"&gt;sku_simple_product_with_video_%isolation%&lt;/data&gt;\n            &lt;data name=\"product/data/media_gallery/images\" xsi:type=\"string\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductNoImageInGrid\" /&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductForm\" /&gt;\n            &lt;constraint name=\"Magento\\ProductVideo\\Test\\Constraint\\AssertNoVideoCategoryView\" /&gt;\n            &lt;constraint name=\"Magento\\ProductVideo\\Test\\Constraint\\AssertNoVideoProductView\" /&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\nVariations DeleteVideoFromPCFTestVariation1 and DeleteVideoFromPCFTestVariation2 will be used by the Magento\\Catalog\\Test\\TestCase\\Product\\UpdateSimpleProductEntityTest class during the test run.\n\nExtend a variation with data\n\nIf you want to extend variation in another module using merging, you should use a test case name that you want to merge with and a variation name that you want to extend.\n\nFor example, see how in Magento/Catalog/Test/TestCase/Product/ValidateOrderOfProductTypeTest.xml\n\n &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Catalog\\Test\\TestCase\\Product\\ValidateOrderOfProductTypeTest\" summary=\"Validate product types order on product grid page\" ticketId=\"MAGETWO-37146\"&gt;\n        &lt;variation name=\"ValidateOrderOfProductTypeTestVariation1\"&gt;\n            &lt;data name=\"menu/0\" xsi:type=\"string\"&gt;Simple Product&lt;/data&gt;\n            &lt;data name=\"menu/3\" xsi:type=\"string\"&gt;Virtual Product&lt;/data&gt;\n            &lt;constraint name=\"Magento\\Catalog\\Test\\Constraint\\AssertProductTypeOrderOnCreate\" /&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\n \n\nthe variation ValidateOrderOfProductTypeTestVariation1 is extended by the Magento_Bundle module:\n\n &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/variations.xsd\"&gt;\n    &lt;testCase name=\"Magento\\Catalog\\Test\\TestCase\\Product\\ValidateOrderOfProductTypeTest\"&gt;\n        &lt;variation name=\"ValidateOrderOfProductTypeTestVariation1\"&gt;\n            &lt;data name=\"menu/4\" xsi:type=\"string\"&gt;Bundle Product&lt;/data&gt;\n        &lt;/variation&gt;\n    &lt;/testCase&gt;\n&lt;/config&gt;\n\n  \n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_dataset.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-html": {
      "title": "Functional Testing Framework Entities",
      "content": "Functional Testing Framework entities enable you to create and modify functional tests. \nFor example, you want to cover with functional tests the process of creation the widget Catalog Category Link.\nTo do this you have to create injectable test. As widget functionality is not covered with tests, you need to create widget fixture, that is your object for testing. You will describe the test data that will be applied to the widget object in repository topic. You want to automatize creating of Catalog Category Link widget, that requires to have a category. As far creating of new category is out of the scope of your testing, you will use handlers to prepare it. To understand what blocks and pages you need in the test, you should perform tests manually. Using blocks and pages entities you can create and define blocks and pages objects for tests. When you have all building blocks for the test you can determine steps of injectable test. Any test requires different variations of data sets and corresponding constraints.\n\nFollowing is a list of all FTF entities.\n\n\n  Fixture\n    \n      Fixture overview\n      Create new fixture\n      Read and update new fixture\n      Add repository to the fixture field\n      Add data source to the fixture field\n      Merge fixtures\n      Extend fixture\n    \n  \n  \n    Fixture Repository\n  \n  \n    Handler\n  \n  \n    Block\n  \n  \n    Typified element\n  \n  \n    Page\n  \n  \n    Constraint\n  \n  \n    Data set\n  \n  \n    Test case\n  \n  Scenario test\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-fixture-repo-html": {
      "title": "Fixture Repository",
      "content": "The repository stores pre-defined data for the fixture.\nIt contains only data sets that are used in the test along with the associated field data.\nRepositories are stored in the Repository directory in the module to which they belong.\nReference to the repository is placed in the fixture XML file in attribute named repository.\n\nIn this topic you will learn how to create, use, and merge a repository.\n\nCreate a repository for the entire fixture\n\nLet’s create a repository for the Widget fixture &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Fixture/Widget.xml.\n\nMore details about fixtures.\n\nAssume that we have the following fixture:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"widget\"\n             module=\"Magento_Widget\"\n             type=\"flat\"\n             entity_type=\"widget_instance\"\n             collection=\"Magento\\Widget\\Model\\Resource\\Widget\\Instance\\Collection\"\n             identifier=\"parameters\"\n             repository_class=\"Magento\\Widget\\Test\\Repository\\Widget\"\n             handler_interface=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\"\n             class=\"Magento\\Widget\\Test\\Fixture\\Widget\"&gt;\n        &lt;field name=\"code\" group=\"settings\" /&gt;\n        &lt;field name=\"theme_id\" group=\"settings\" /&gt;\n        &lt;field name=\"anchor_text\" /&gt;\n        &lt;field name=\"title\" group=\"frontend_properties\" /&gt;\n        &lt;field name=\"template\" /&gt;\n        &lt;field name=\"chosen_option\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\ChosenOption\" /&gt;\n        &lt;field name=\"display_type\" /&gt;\n        &lt;field name=\"show_pager\" /&gt;\n        &lt;field name=\"products_count\" /&gt;\n        &lt;field name=\"cache_lifetime\" /&gt;\n        &lt;field name=\"page_size\" /&gt;\n        &lt;field name=\"store_ids\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\StoreIds\" group=\"frontend_properties\" /&gt;\n        &lt;field name=\"widget_instance\" /&gt;\n        &lt;field name=\"parameters\" /&gt;\n        &lt;field name=\"id\" /&gt;\n        &lt;field name=\"page_id\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\PageIds\" /&gt;\n        &lt;field name=\"layout\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\LayoutUpdates\" repository=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\" group=\"layout_updates\" /&gt;\n        &lt;field name=\"widgetOptions\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\WidgetOptions\" repository=\"Magento\\Widget\\Test\\Repository\\Widget\\WidgetOptions\" group=\"widget_options\" /&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nThe repository_class=\"Magento\\Widget\\Test\\Repository\\Widget\" attribute tells us that this fixture uses data from the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository/Widget.xml repository.\n\nIn this section we will show the logic of how to create this repository.\n\nAlso layout and widgetOptions fields use &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository/Widget/LayoutUpdates.xml and &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository/Widget/WidgetOptions.xml repositories respectively.\n\n Learn how to create repository for the fixture field.\n\nWe want to specify data sets for two cases of submitting Widget forms: default with minimum data, and cms_page_link with data needed to create new CMS page link.\n\nTo create a new CMS page link the user must enter data of all required fields. The widget has three forms with fields to specify: Settings, Storefront Properties, Frontend Apps Options. The following text along with screenshots gives an example of how to create a data set of the repository.\n\nSee entire repository code.\n\nSettings form\n\n\n\n\n  Set the Type field (field name=\"code\") to “CMS Page Link”. It corresponds to the following code in the repository data set &lt;field name=\"code\" xsi:type=\"string\"&gt;CMS Page Link&lt;/field&gt;.\n  Set the Design Theme field (field name=\"theme_id\") to “Magento Blank”. It corresponds to the following code in the repository data set &lt;field name=\"theme_id\" xsi:type=\"string\"&gt;Magento Blank&lt;/field&gt;.\n\n\nStorefront Properties form\n\n\n\n\n  Set the Frontend App Title field to “Cms Page Link [random integer value]”. It corresponds to the following code in the repository data set &lt;field name=\"title\" xsi:type=\"string\"&gt;Cms Page Link %isolation%&lt;/field&gt;.\n  Set the Assign to Store Views field to “All Store Views”. It corresponds to the following code in the repository data set:\n\n\n &lt;field name=\"store_ids\" xsi:type=\"array\"&gt;\n    &lt;item name=\"dataset\" xsi:type=\"string\"&gt;all_store_views&lt;/item&gt;\n&lt;/field&gt;\n\n\n  Provide data for the Layout Updates complex field. In the repository code, complex fields are represented as arrays of items. An item can be an array of items also, depending on the hierarchy of fields. This field is defined as &lt;field name=\"widget_instance\" xsi:type=\"array\"&gt;&lt;/field&gt;. As it is possible to create more than one instance of a layout update, we define our instance as the first element of an array with index “0” as &lt;item name=\"0\" xsi:type=\"array\"&gt;&lt;/item&gt;.\n    \n      Set the Display on field to “All pages:. It corresponds to the following code in the repository data set &lt;item name=\"page_group\" xsi:type=\"string\"&gt;All Pages&lt;/item&gt;. Daughter fields are appeared, when Display on field is specified. All daughter fields must be wrapped in &lt;item name=\"all_pages\" xsi:type=\"array\"&gt;&lt;/item&gt;.\n        \n          Set the Container field to “Main content area”. It corresponds to the following code in the repository data set &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;.\n          Set the Template field to “CMS Page Link Block Template”. It corresponds to the following code in the repository data set &lt;item name=\"template\" xsi:type=\"string\"&gt;CMS Page Link Block Template&lt;/item&gt;.\n        \n      \n    \n  \n\n\nFrontend App Options\n\n\n\n\n  Set the Anchor Custom Text field to “text”.\n  Set the Anchor Custom Title field to “anchor title”.\n  Choose in the CMS Page grid newly created CMS page.\n\n\n&lt;field name=\"widgetOptions\" xsi:type=\"array\"&gt;\n    &lt;item name=\"0\" xsi:type=\"array\"&gt;\n       &lt;item name=\"type_id\" xsi:type=\"string\"&gt;cmsPageLink&lt;/item&gt;\n    &lt;/item&gt;\n&lt;/field&gt;\n\nThis simple code contains a bit more complex logic, where the repository is applied to the fixture field. Just to remind you, how this field is represented in the fixture: &lt;field name=\"widgetOptions\" source=\"Magento\\Widget\\Test\\Fixture\\Widget\\WidgetOptions\" repository=\"Magento\\Widget\\Test\\Repository\\Widget\\WidgetOptions\" group=\"widget_options\" /&gt;.\n\nIn brief, we reference another repository &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository/Widget/WidgetOptions.xml, and a source that is &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Fixture/Widget/WidgetOptions.php.\n\nThe WidgetOptions.xml repository includes cmsPageLink data set:\n\n&lt;dataset name=\"cmsPageLink\"&gt;\n    &lt;field name=\"anchor_text\" xsi:type=\"string\"&gt;text&lt;/field&gt;\n    &lt;field name=\"title\" xsi:type=\"string\"&gt;anchor title/field&gt;\n    &lt;field name=\"entities\" xsi:type=\"array\"&gt;\n        &lt;item name=\"0\" xsi:type=\"string\"&gt;cmsPage::default&lt;/item&gt;\n    &lt;/field&gt;\n&lt;/dataset&gt;\n\nThe source understands the entities field as an instruction to create a CMS Page using &lt;dataset name=\"default\"&gt; from the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Cms/Test/Repository/CmsPage.xml repository.\n\nWidget.xml\n\nNow we can create a repository XML file Widget.xml. In our case the file should be placed in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository. The full name must be specified in the repository_class attribute of the fixture: repository_class=\"Magento\\Widget\\Test\\Repository\\Widget\".\n\nSee the entire repository sample so far:\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/Magento/Mtf/Repository/etc/repository.xsd\"&gt;\n    &lt;repository class=\"Magento\\Widget\\Test\\Repository\\Widget\"&gt;\n        &lt;dataset name=\"default\"&gt;\n            &lt;field name=\"title\" xsi:type=\"string\"&gt;Test Frontend App&lt;/field&gt;\n            &lt;field name=\"store_ids\" xsi:type=\"array\"&gt;\n                &lt;item name=\"0\" xsi:type=\"string\"&gt;All Store Views&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"widget_instance\" xsi:type=\"array\"&gt;\n                &lt;item name=\"0\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"page_group\" xsi:type=\"string\"&gt;all_pages&lt;/item&gt;\n                    &lt;item name=\"all_pages\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"layout_handle\" xsi:type=\"string\"&gt;default&lt;/item&gt;\n                        &lt;item name=\"for\" xsi:type=\"string\"&gt;all&lt;/item&gt;\n                        &lt;item name=\"block\" xsi:type=\"string\"&gt;content&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;widget/block.phtml&lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"theme_id\" xsi:type=\"number\"&gt;2&lt;/field&gt;\n        &lt;/dataset&gt;\n\n        &lt;dataset name=\"cms_page_link\"&gt;\n            &lt;field name=\"code\" xsi:type=\"string\"&gt;CMS Page Link&lt;/field&gt;\n            &lt;field name=\"title\" xsi:type=\"string\"&gt;Cms Page Link %isolation%&lt;/field&gt;\n            &lt;field name=\"store_ids\" xsi:type=\"array\"&gt;\n                &lt;item name=\"dataset\" xsi:type=\"string\"&gt;all_store_views&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"widget_instance\" xsi:type=\"array\"&gt;\n                &lt;item name=\"0\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"page_group\" xsi:type=\"string\"&gt;All Pages&lt;/item&gt;\n                    &lt;item name=\"all_pages\" xsi:type=\"array\"&gt;\n                        &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n                        &lt;item name=\"template\" xsi:type=\"string\"&gt;CMS Page Link Block Template&lt;/item&gt;\n                    &lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"theme_id\" xsi:type=\"string\"&gt;Magento Blank&lt;/field&gt;\n            &lt;field name=\"widgetOptions\" xsi:type=\"array\"&gt;\n                &lt;item name=\"0\" xsi:type=\"array\"&gt;\n                    &lt;item name=\"type_id\" xsi:type=\"string\"&gt;cmsPageLink&lt;/item&gt;\n                &lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n    &lt;/repository&gt;\n&lt;/config&gt;\n\nRepository structure\n\nLet’s look at the repository structure.\n\n\n  &lt;config&gt; is a root node that defines the path to the repository.xsd schema.\n  &lt;repository&gt; specifies a repository class in the required class attribute and stores data sets. class contains the full name of the repository class. The repository contains data sets.\n    \n      In case of an entire fixture repository, the full name of the class (including the namespace) must be built as &lt;path to module where the fixture is placed&gt;\\Repository\\&lt;file with the name of fixture&gt;. Example: Magento\\Widget\\Test\\Repository\\Widget\n      In case of a fixture field repository, the full name of the class (including the namespace) must be built as &lt;path to module where the fixture is placed&gt;\\Repository\\&lt;directory with the name of fixture&gt;\\&lt;file with the name of field&gt;. Example: Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates.\n    \n  \n  &lt;dataset&gt; specifies the name of data set in the required name attribute. This name serves as a reference to the data set that will be used in the test. Each data set contains fields.\n  &lt;field&gt; defines the value of the field. Field can contain either value, or items if the field is complex.\n\n\n\n  \n    \n      field attribute\n      Semantics\n      Is required?\n    \n  \n  \n    \n      name\n      Field name in fixture\n      Required\n    \n    \n      xsi:type\n      Type of field value\n      Required\n    \n  \n\n\n\n  \n    \n      field daughter element\n      Semantics\n      Is required?\n    \n  \n  \n    \n      &lt;item&gt;\n      Element of complex field. Items can be complex like fields. Complex items contain items. Item has key=&gt;value structure.\n      Required if &lt;field xsi:type=\"array\" ...&gt;\n    \n  \n\n\n\n  \n    \n      item attribute\n      Semantics\n      Is required?\n    \n  \n  \n    \n      name\n      Key name of the item\n      Required\n    \n    \n      xsi:type\n      Type of the item value\n      Required\n    \n  \n\n\nThe default data set is used in the test when the repository hasn’t been specified in the test, although you can explicitly specify default. If repository name in the test is cms_page_link, then fields will be filled with data from &lt;dataset name=\"cms_page_link\"&gt;.\n\nCreate a repository for the fixture field\n\nIn the preceding section, the Widget fixture code contains fields with the links for repositories. Let’s consider the field layout with repository=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates.\n\nThe repository value is a reference to the repository XML file. Therefore, we should create &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Repository/Widget/LayoutUpdates.xml. The XML structure of this repository is the same as of repository for the entire fixture.\n\nAssume that we want to provide data for the Layout Update block for the following cases shown on the screenshots (name of data sets have orange font, fields defined in repository are highlighted in orange).\n\nCase 1. all_pages data set:\n\n\n  Set the Display on field (item name=\"page_group\") to “All Pages”, which is the subcategory of “Generic Pages” (see drop-down menu on the following screenshot). It corresponds to the following code in the repository data set &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Generic Pages/All Pages&lt;/item&gt;\n  Set the Container field (item name=\"block\") to “Main content Area”. It corresponds to the following code in the repository data set  &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n\n\n\n\nCase 2. on_category data set:\n\n\n  Set the Display on field (item name=\"page_group\") to “Non-Anchor Categories” that is item of “Categories”. It corresponds to the following code in the repository data set &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Categories/Non-Anchor Categories&lt;/item&gt;.\n  Set the Categories field (item name=\"for\") to “Specific Categories”. It corresponds to the following code in the repository data set &lt;item name=\"for\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;.\n  Set the in a tree of categories the Default Category (item name=\"entities\"). It corresponds to the following code in the repository data set &lt;item name=\"entities\" xsi:type=\"string\"&gt;category::default_subcategory&lt;/item&gt;.\n  Set the Container field (item name=\"block\") to “Main content Area”. It corresponds to the following code in the repository data set &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;.\n\n\n\n\nCase 3. for_cms_page_link data set:\n\n\n  Set the Display on field (item name=\"page_group\") to “All Pages” that is item of “Generic Pages”. It corresponds to the following code in the repository data set &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Generic Pages/All Pages&lt;/item&gt;.\n  Set the Container field (item name=\"block\") to “Main content Area”. It corresponds to the following code in the repository data set &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;.\n  Set the Template field (item name=\"template\") to “CMS Page Link Block Template”. It corresponds to the following code in the repository data set &lt;item name=”template” xsi:type=”string”&gt;CMS Page Link Block Template&lt;/item&gt;.\n\n\n\n\nThe repository code for these cases follows:\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/Magento/Mtf/Repository/etc/repository.xsd\"&gt;\n    &lt;repository class=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\"&gt;\n        &lt;dataset name=\"all_pages\"&gt;\n            &lt;field name=\"0\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Generic Pages/All Pages&lt;/item&gt;\n                &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n\n        &lt;dataset name=\"on_category\"&gt;\n            &lt;field name=\"0\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Categories/Non-Anchor Categories&lt;/item&gt;\n                &lt;item name=\"for\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;\n                &lt;item name=\"entities\" xsi:type=\"string\"&gt;category::default_subcategory&lt;/item&gt;\n                &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n\n        &lt;dataset name=\"for_cms_page_link\"&gt;\n            &lt;field name=\"0\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Generic Pages/All Pages&lt;/item&gt;\n                &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n                &lt;item name=\"template\" xsi:type=\"string\"&gt;CMS Page Link Block Template&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n    &lt;/repository&gt;\n&lt;/config&gt;\n\nConfiguration repository\n\nThe configuration repository stores predefined data sets for Magento configuration settings. It is the repository for the Magento_Config module and is named ConfigData.xml.\n\nLet’s see the following example of configuration settings for Authorize.Net module &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Authorizenet/Test/Repository/ConfigData.xml.\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/Magento/Mtf/Repository/etc/repository.xsd\"&gt;\n    &lt;repository class=\"Magento\\Config\\Test\\Repository\\ConfigData\"&gt;\n        &lt;dataset name=\"authorizenet\"&gt;\n            &lt;field name=\"payment/authorizenet/active\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;\n                &lt;item name=\"value\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/login\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n                &lt;item name=\"value\" xsi:type=\"string\"&gt;PAYMENT_AUTHORIZENET_LOGIN&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/trans_key\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n                &lt;item name=\"value\" xsi:type=\"string\"&gt;PAYMENT_AUTHORIZENET_TRANS_KEY&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/test\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"&gt;No&lt;/item&gt;\n                &lt;item name=\"value\" xsi:type=\"number\"&gt;0&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/cgi_url\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n                &lt;item name=\"value\" xsi:type=\"string\"&gt;https://test.authorize.net/gateway/transact.dll&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/debug\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;\n                &lt;item name=\"value\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n            &lt;/field&gt;\n            &lt;field name=\"payment/authorizenet/useccv\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;\n                &lt;item name=\"value\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n        &lt;dataset name=\"authorizenet_rollback\"&gt;\n            &lt;field name=\"payment/authorizenet/active\" xsi:type=\"array\"&gt;\n                &lt;item name=\"scope\" xsi:type=\"string\"&gt;payment&lt;/item&gt;\n                &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n                &lt;item name=\"label\" xsi:type=\"string\"&gt;No&lt;/item&gt;\n                &lt;item name=\"value\" xsi:type=\"number\"&gt;0&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n    &lt;/repository&gt;\n&lt;/config&gt;\n\nPath to the Authorizenet UI form in Admin is STORES &gt; Configuration &gt; SALES &gt; Payment Methods &gt; Authorize.net Direct Post.\n\nThis repository contains two data sets: authorizenet that covers seven fields, and authorizenet_rollback that covers one field.\n\nSemantics of the field attributes:\n\n\n  \n    \n      field attribute\n      Semantics\n      Value\n    \n  \n  \n    \n      name\n      Path to the Magento UI element\n      Example: payment/authorizenet/active.\n    \n    \n      xsi:type\n      Type of the field content\n      array\n    \n  \n\n\nEach field contains 4 items:\n\n\n  \n    \n      Item name\n      Semantics\n    \n  \n  \n    \n      scope\n      Magento configuration section\n    \n    \n      scope_id\n      Magento scope identifier. UI representation is shown on the screenshot following this table.\n    \n    \n      label\n      Text represented in the UI field\n    \n    \n      value\n      Value of the field\n    \n  \n\n\nThe following screenshot helps to understand the scope_id attribute.\n\n\n\nLet’s see the authorizenet data set in action. Fields defined in repository are in orange. Other fields are set in default values.\n\n\n\nMerging repositories\n\nThe FTF enables you to split data sets among different modules. The configuration repository is a good example.\n\nModules that require configuration adjustment store ConfigData.xml in their Repository directory. All ConfigData.xml repositories have reference to the Config repository class. See the example on the following screenshot:\n\n\n\nAs you can see, the ConfigData.xml of the Magento_Authorizenet module and the ConfigData.xml of the Magento_Backend module have the same reference to the repository class; that is Magento\\Config\\Test\\Repository\\ConfigData.\n\nConfigData.php will be generated in &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento/Config/Test/Repository. This PHP repository will contain repository data sets from all Magento modules that have a ConfigData.xml repository.\n\nTo run the generator, enter the following command in your terminal:\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nThe preceding is an example of repository merging. Using the approach from the example you can merge repositories for any other fixture, not Config only.\n\nCredentials and %isolation% in repository\n\nCredentials are stored in an *.xml file that is specified in phpunit.xml.\n\nYou can find a template for credentials in &lt;magento2_root_dir&gt;/dev/tests/functional/credentials.xml.dist.\n\nCredentials always should stay invisible for security reasons. The FTF implicitly pastes credentials during the test run only.\nThere are two ways to paste credentials:\n\n\n  Using path. If a field in a repository has a name that matches field path in credentials.xml, then the value of this field will be substituted for the value from credential.xml during the test.\n  Using placeholder. If a field in a repository has value wrapped in % % that matches the value of the replace field attribute in credentials.xml, then the value of this field will be substituted with the value from credential.xml during the test.\n\n\nExample with substitution by path\n\nAssume, that you have the following credentials in credentials.xml.\n\n&lt;field path=\"carriers/ups/password\" value=\"strong_password\" /&gt;\n&lt;field path=\"carriers/ups/username\" value=\"my_name\" /&gt;\n&lt;field path=\"carriers/ups/access_license_number\" value=\"20150825\" /&gt;\n&lt;field path=\"carriers/ups/shipper_number\" value=\"321852741789\" /&gt;\n\nIn the repository these fields can be defined as:\n\n&lt;field name=\"carriers/ups/password\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;CARRIERS_UPS_PASSWORD&lt;/item&gt;\n&lt;/field&gt;\n&lt;field name=\"carriers/ups/username\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;CARRIERS_UPS_USERNAME&lt;/item&gt;\n&lt;/field&gt;\n&lt;field name=\"carriers/ups/access_license_number\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;CARRIERS_UPS_ACCESS_LICENSE_NUMBER&lt;/item&gt;\n&lt;/field&gt;\n&lt;field name=\"carriers/ups/shipper_number\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;CARRIERS_UPS_SHIPPER_NUMBER&lt;/item&gt;\n&lt;/field&gt;\n\nDuring the test run these fields are filled with values from credentials.xml.\n\nExample with replacement by replace\n\nFor example, you have the following credentials in credentials.xml:\n\n&lt;field replace=\"carriers_dhl_id_eu\" value=\"123654987\" /&gt;\n&lt;field replace=\"carriers_dhl_password_eu\" value=\"my_dh1_pas$worD\" /&gt;\n&lt;field replace=\"carriers_dhl_account_eu\" value=\"8521236987452\" /&gt;\n\nThen you should define repository fields as the following:\n\n&lt;field name=\"carriers/dhl/id\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;%carriers_dhl_id_eu%&lt;/item&gt;\n&lt;/field&gt;\n&lt;field name=\"carriers/dhl/password\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;%carriers_dhl_password_eu%&lt;/item&gt;\n&lt;/field&gt;\n&lt;field name=\"carriers/dhl/account\" xsi:type=\"array\"&gt;\n    &lt;item name=\"scope\" xsi:type=\"string\"&gt;carriers&lt;/item&gt;\n    &lt;item name=\"scope_id\" xsi:type=\"number\"&gt;1&lt;/item&gt;\n    &lt;item name=\"label\" xsi:type=\"string\"/&gt;\n    &lt;item name=\"value\" xsi:type=\"string\"&gt;%carriers_dhl_account_eu%&lt;/item&gt;\n&lt;/field&gt;\n\nWhen the test is run, credentials from credentials.xml are transferred to the defined fields.\n\n%isolation% placeholder\n\nYou can use %isolation% placeholder where you want to put a random value. It is useful when you need a unique value, for example sku, that has to be unique each test cycle.\n\nSome examples:\n\n&lt;field name=\"title\" xsi:type=\"string\"&gt;Cms Page Link %isolation%&lt;/field&gt;\n&lt;field name=\"sku\" xsi:type=\"string\"&gt;sku_simple_product_%isolation%&lt;/field&gt;\n&lt;field name=\"url_key\" xsi:type=\"string\"&gt;simple-product-%isolation%&lt;/field&gt;\n\nAll placeholders %isolation% will be replaced with mt_rand() function during the test run.\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_fixture-repo.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-fixture-html": {
      "title": "Fixture",
      "content": "An FTF fixture is a list of properties of the Magento entity under test.\n\nA fixture is represented as an XML file located in the Fixture directory that corresponds to a module in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/functional. Example for Widget:\n\n\n  &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Fixture/Widget.xml\n\n\nYou will need fixture:\n\n\n  as test data for particular set\n  as precondition for the test\n\n\nIn this chapter, we will create a new fixture and modify it, considering different use cases.\n\nTo apply any changes in fixture, run generate tool:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nThis tool creates PHP classes that are used by the test.\n\nYou can check fixture PHP class in corresponding module in the &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento directory.\n\nCreate new fixture\n\nLet’s imagine that we want to create new fixture to test our Widget module.\n\nMagento has a tool, generateFixtureXml.php,, to automatically generate fixture with parameters indicated in arguments. It is located in &lt;magento2_root_dir&gt;/dev/tests/functional/utils.\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp -f generateFixtureXml.php -- --name widget --entity_type widget_instance --collection Magento\\\\Widget\\\\Model\\\\Resource\\\\Widget\\\\Instance\\\\Collection\n\n\n\nPlease note that the generateFixtureXml tool does not replace an existing XML fixture. For example, if you already have Widget.xml fixture, you cannot create new one with the same name.\n\n\n\nTo work with generateFixtureXml tool, Magento must be installed.\n\n\nIn the following table see generateFixtureXml arguments.\n\n\n  \n    \n      Argument\n      Semantics\n      Value from command above\n      Note\n    \n  \n  \n    \n      --name\n      Name of fixture.\n      widget\n      Required\n    \n    \n      --type\n      Table type for the entity. Can be eav, flat, composite.\n      flat\n      Default value: flat.\n    \n    \n      --entity_type\n      Database table name, where entity data is stored.\n      widget_instance\n      Required\n    \n    \n      --collection\n      Collection to generate data sets\n      Magento\\\\Widget\\\\Model\\\\Resource\\\\Widget\\\\Instance\\\\Collection\n      Required. Escape all backslashes.\n    \n    \n      --help\n      List of arguments with definitions.\n       \n       \n    \n  \n\n\nThis tool creates a new fixture using data from a database table you specified using the --entity_type argument.\n\nFollowing is the generated Widget fixture located in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Fixture/Widget.xml.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"widget\"\n             module=\"Magento_Widget\"\n             type=\"flat\"\n             collection=\"Magento\\Widget\\Model\\Resource\\Widget\\Instance\\Collection\"\n             repository_class=\"Magento\\Widget\\Test\\Repository\\Widget\"\n             handler_interface=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\"\n             class=\"Magento\\Widget\\Test\\Fixture\\Widget\"\n             entity_type=\"widget_instance\"&gt;\n        &lt;field name=\"instance_id\" is_required=\"1\"/&gt;\n        &lt;field name=\"instance_type\" is_required=\"0\"/&gt;\n        &lt;field name=\"theme_id\" is_required=\"0\"/&gt;\n        &lt;field name=\"title\" is_required=\"0\"/&gt;\n        &lt;field name=\"store_ids\" is_required=\"0\"/&gt;\n        &lt;field name=\"sort_order\" is_required=\"0\"/&gt;\n        &lt;field name=\"widget_parameters\" is_required=\"0\"/&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nTo generate PHP classes, enter the following commands in the order shown:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nThat’s it!\n\nFor a detailed description of XML structure, see next section.\n\nRead and update your new fixture\n\nLet’s look closer at fixture structure.\n\n\n  &lt;config&gt; is a root node that defines path to fixture.xsd schema.\n  &lt;fixture&gt; defines fixture configuration.\n  &lt;data_config&gt; defines additional fixture configuration for the fixture.\n  &lt;field&gt; defines field in fixture.\n\n\nFollowing table describes &lt;fixture&gt; attributes.\n\n\n  \n    \n      &lt;fixture&gt; attribute\n      Semantics\n      Value\n      Example\n      Is required?\n    \n  \n  \n    \n      name\n      Name of fixture.\n      string\n      catalogProductSimple\n      required\n    \n    \n      module\n      Name of the module in which to place the fixture.\n      string\n      Magento_Catalog\n      required\n    \n    \n      class\n      Path to the PHP class. Generator will use this path to locate automatically generated PHP file.\n      string\n      Magento\\Catalog\\Test\\Fixture\\CatalogProductSimple\n      required\n    \n    \n      type\n      Table type for the entity.\n      eav, flat, virtual, composite\n      eav\n      optional\n    \n    \n      entity_type\n      Database table name where the entity data is stored. Specify more than one database table as a comma-separated list (for example, \"eav_attribute, catalog_eav_attribute\") and assign type = \"composite\".\n      string\n      catalog_product\n      optional\n    \n    \n      product_type\n      Type of product. Applicable only for product fixtures.\n      string\n      simple\n      optional\n    \n    \n      collection\n      Collection to generate data sets. It is taken from &lt;magento2_root_dir&gt;/app/code/Magento.\n      string\n      Magento\\Catalog\\Model\\Resource\\Product\\Collection\n      optional\n    \n    \n      identifier\n      Field used to create data set names in the repository.\n      string\n      sku\n      optional\n    \n    \n      repository_class\n      Reference to the repository class.\n      string\n      Magento\\Catalog\\Test\\Repository\\CatalogProductSimple\n      optional\n    \n    \n      handler_interface\n      Reference to the handler interface class.\n      string\n      Magento\\Catalog\\Test\\Handler\\CatalogProductSimple\\CatalogProductSimpleInterface\n      optional\n    \n    \n      extends\n      Reference to the class from which you want to extend.\n      string\n      \\Magento\\Widget\\Test\\Fixture\\Widget\n      optional\n    \n  \n\n\nThe following table describes &lt;field&gt; attributes.\n\n\n  \n    \n      &lt;field&gt; attribute\n      Semantics\n      Value\n      Example\n      Is required?\n    \n  \n  \n    \n      name\n      Field name.\n      string\n      layout_updates\n      required\n    \n    \n      is_required\n      Specifies whether field is required on the form.\n      1 - required, 0 - optional\n      1\n      optional\n    \n    \n      group\n      Tab name that contains field (for example, title field is placed on Storefront properties tab on widget creation page).\n      string\n      storefront_properties\n      optional\n    \n    \n      source\n      Class that prepares field data for use. See Add the data source to the fixture field.\n      string\n      Magento\\Widget\\Test\\Fixture\\Widget\\LayoutUpdates\n      optional\n    \n    \n      repository\n      Reference to  the class that stores data sets for the field. More details about the repository.\n      string\n      Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\n      optional\n    \n  \n\n\nThe following image shows how XML is connected with GUI of your new widget.\n\n\n\nOrange arrows show relations between &lt;field&gt; nodes of fixture and GUI element of Magento widget, that we are going to test.\n\nAs you can see, we added some information to the picture. New text is highlighted in orange.\n\nFor convenience, we added a group attribute that matches the name of the tab where the UI elements are located. Except for instance_id, this field does not display which is why it belongs to the null group.\n\nWe also defined a new field, layout_updates on the UI but this field is absent from the list of fields in our XML fixture. This is because the field is not present in the database table widget_instance specified by the entity_type.\n\nLet’s manually add a new field and group attribute to the Widget.xml. See what we have now.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"widget\"\n             module=\"Magento_Widget\"\n             type=\"flat\"\n             collection=\"Magento\\Widget\\Model\\Resource\\Widget\\Instance\\Collection\"\n             repository_class=\"Magento\\Widget\\Test\\Repository\\Widget\"\n             handler_interface=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\"\n             class=\"Magento\\Widget\\Test\\Fixture\\Widget\"\n             entity_type=\"widget_instance\"&gt;\n        &lt;field name=\"instance_id\" is_required=\"1\" group=\"null\" /&gt;\n        &lt;field name=\"instance_type\" is_required=\"0\" group=\"settings\" /&gt;\n        &lt;field name=\"theme_id\" is_required=\"0\" group=\"settings\" /&gt;\n        &lt;field name=\"title\" is_required=\"0\" group=\"storefront_properties\" /&gt;\n        &lt;field name=\"store_ids\" is_required=\"0\" group=\"storefront_properties\" /&gt;\n        &lt;field name=\"sort_order\" is_required=\"0\" group=\"storefront_properties\" /&gt;\n        &lt;field name=\"widget_parameters\" is_required=\"0\" group=\"frontend_options\" /&gt;\n        &lt;field name=\"layout_updates\" is_required=\"0\" group=\"storefront_properties\" /&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nTo apply the changes, enter the following commands:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nAdd a repository to the fixture field\n\nNow we have a new fixture for Widget. All fields are defined and ready to take test data. Let’s assume that we are not focused on layout updates functionality and want to use pre-defined data.\n\nFor this goal, link to the repository where all test data has already been defined.\n\n&lt;field name=\"layout_updates\" repository=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\" group=\"storefront_properties\" /&gt;\n\nRepository is located in Repository directory of corresponding module. Repository directory contains a subdirectory with the name of fixture, and repository XML file in it with the name of fixture field.\n\nThe repository is located in &lt;magento2_root_dir&gt;/dev/tests/functional/app/Magento/Widget/Test/Repository/Widget/LayoutUpdates.xml.\n\nFollowing is the code of LayoutUpdates.xml. It specifies two data sets that you can choose to define in your test.\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/Magento/Mtf/Repository/etc/repository.xsd\"&gt;\n    &lt;repository class=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\"&gt;\n        &lt;dataset name=\"all_pages\"&gt;\n            &lt;field name=\"0\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Generic Pages/All Pages&lt;/item&gt;\n                &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n\n        &lt;dataset name=\"on_category\"&gt;\n            &lt;field name=\"0\" xsi:type=\"array\"&gt;\n                &lt;item name=\"page_group\" xsi:type=\"string\"&gt;Categories/Non-Anchor Categories&lt;/item&gt;\n                &lt;item name=\"for\" xsi:type=\"string\"&gt;Yes&lt;/item&gt;\n                &lt;item name=\"entities\" xsi:type=\"string\"&gt;category::default_subcategory&lt;/item&gt;\n                &lt;item name=\"block\" xsi:type=\"string\"&gt;Main Content Area&lt;/item&gt;\n            &lt;/field&gt;\n        &lt;/dataset&gt;\n    &lt;/repository&gt;\n&lt;/config&gt;\n\nTo apply changes, enter following commands:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nAdd data source to fixture field\n\nOur new field layout_updates is complex and contains different elements and logic, depending on the type of layout chosen.\n\n\n\nYou can use a data source that provides additional processing of the field (for example, parsing or creation of new field).\n\nAll data source logic is defined in a PHP file which must be linked as specified in the field’s source attribute.\n\nIt is located in Fixture directory of corresponding module. That contains subdirectory with the name of fixture, and source class in it with the name of fixture field. See the following example.\n\n&lt;field name=\"layout_updates\"\n       is_required=\"0\"\n       repository=\"Magento\\Widget\\Test\\Repository\\Widget\\LayoutUpdates\"\n       source=\"Magento\\Widget\\Test\\Fixture\\Widget\\LayoutUpdates\"\n       group=\"storefront_properties\" /&gt;\n\nLet’s see our data source file &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Fixture/Widget/LayoutUpdates.php\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n \nnamespace Magento\\Widget\\Test\\Fixture\\Widget;\n\nuse Magento\\Mtf\\Fixture\\FixtureFactory;\nuse Magento\\Mtf\\Fixture\\DataSource;\nuse Magento\\Mtf\\Repository\\RepositoryFactory;\n\n/**\n * Prepare Layout Updates for widget.\n */\nclass LayoutUpdates extends DataSource\n{\n    /**\n     * @constructor\n     * @param RepositoryFactory $repositoryFactory\n     * @param FixtureFactory $fixtureFactory\n     * @param array $params\n     * @param array $data\n     */\n    public function __construct(\n        RepositoryFactory $repositoryFactory,\n        FixtureFactory $fixtureFactory,\n        array $params,\n        array $data = []\n    ) {\n        $this-&gt;params = $params;\n        if (isset($data['dataset']) &amp;&amp; isset($this-&gt;params['repository'])) {\n            $this-&gt;data = $repositoryFactory-&gt;get($this-&gt;params['repository'])-&gt;get($data['dataset']);\n            foreach ($this-&gt;data as $index =&gt; $layouts) {\n                if (isset($layouts['entities'])) {\n                    $explodeValue = explode('::', $layouts['entities']);\n                    $fixture = $fixtureFactory-&gt;createByCode($explodeValue[0], ['dataset' =&gt; $explodeValue[1]]);\n                    $fixture-&gt;persist();\n                    $this-&gt;data[$index]['entities'] = $fixture;\n                }\n            }\n        } else {\n            $this-&gt;data = $data;\n        }\n    }\n}\n\nTo apply the changes, enter the following commands:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\n\nYou should mention repository in data source class to use it for fixture field.\n\nExample from LayoutUpdates.php\n$this-&gt;data = $repositoryFactory-&gt;get($this-&gt;params['repository'])-&gt;get($data['dataset']);\n\n\nMerge fixtures\n\nWe have a module that adds new field to Widget module.\n\nWe can create file that adds field new_field to our widget fixture.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"widget\"&gt;\n        &lt;field name=\"new_field\" is_required=\"0\" group=\"storefront_properties\" /&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nTo apply the changes, enter the following commands:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nnew_field has been added in fixture Widget.php.\n\nExtend fixture\n\nLet’s assume that you want to add new fixture based on our Widget.xml fixture to another Magento entity.\n\nTo do that you should supplement your Widget.xml code with extends attribute in &lt;fixture&gt; node. As you already know, extends value stores a link to the class from which you want to extend your fixture.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/etc/fixture.xsd\"&gt;\n    &lt;fixture name=\"adWidget\"\n             repository_class=\"Magento\\AdWidget\\Test\\Repository\\AdWidget\"\n             handler_interface=\"Magento\\AdWidget\\Test\\Handler\\AdWidget\\AdWidgetInterface\"\n             class=\"Magento\\AdWidget\\Test\\Fixture\\AdWidget\"\n             extends=\"\\Magento\\Widget\\Test\\Fixture\\Widget\"&gt;\n        &lt;field name=\"custom_field\" repository=\"Magento\\AdWidget\\Test\\Repository\\AdWidget\\CustomField\" group=\"storefront_properties\" /&gt;\n    &lt;/fixture&gt;\n&lt;/config&gt;\n\nIn this example you will create a new fixture PHP class AdWidget that extends Widget fixture. It creates a fixture with the same name, and a field named custom_field.\n\nTo generate your new fixture PHP class, enter the following commands:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_fixture.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-handler-html": {
      "title": "Handler",
      "content": "You can use a handler to set up preconditions and prepare an initial testing environment for particular tests. For example, your scenario requires a particular widget that must be implicitly created before the test is started. You need a fixture, a data set, and a handler. The handler transfers data to the application being tested. The data is a list of fields from a fixture and values from data sets.\n\nThis topic focuses on handlers, and we’ll discuss types of handlers as well as how to create and use one.\n\nTypes of handlers\n\nThe FTF enables you to use any type of handler.\n\nMagento uses the following handlers:\n\n\n  \n    \n      Type of handler\n      Mechanism\n      Example\n      Tip\n    \n  \n  \n    \n      UI\n      Drives the web browser.\n      Set of scripts for Selenium that simulate user actions to create a widget through a web browser.\n      The UI handler is much slower then the other handlers. When the test execution time is critical, you should avoid use of the UI handler. The UI handler code is very similar to the code of the test that doesn’t contain constraints. If you have a test for widget creation, you can re-use the code, because the code of UI handler that creates widget is very similar.\n    \n    \n      cURL\n      Sends POST or PUT requests to the server hosting the application that is being tested.\n      HTTP POST request to the application server, that transfers Widget fixture fields and corresponding values from the data set.\n      Browser is not involved, that’s why the cURL handler works much faster than the UI handler.\n    \n    \n      WebAPI\n      Sends a POST request using the REST API. See REST API reference documentation.\n      Similar to cURL but uses the REST API entry point.\n      Has the advantage of testing the API, faster than cURL.\n    \n  \n\n\nFurthermore, you can create your own handlers, such as Direct, which is very fast because the Direct handler sends a direct call to the Magento application using Magento models. The Direct handler requires deep understanding of the Magento application, and also requires access to the Magento code and the database. Difficulties can be caused when the Magento code and Magento tests are run on different hosts.\n\nConfiguration\n\nOne fixture can have various handlers. When we create an entity in the test we do not indicate which handler to use. This work is delegated to a fallback, which is a queue of handlers in the priority order specified in config.xml.\n\nconfig.xml\n\nThe default configuration for handlers is set in &lt;magento2&gt;/dev/tests/functional/etc/config.xml.dist.  Create a duplicate of the file, and keep both, but make changes to the new one, which is called config.xml:\n\ncp config.xml.dist config.xml\n\n\nThe following nodes influence handlers:\n\n\nNodeSemanticsExample\n&lt;backendLoginUrl&gt;Reference to the login form of the Admin.&lt;backendLoginUrl&gt;admin/auth/login&lt;/backendLoginUrl&gt;\n&lt;backendLogin&gt;A username to access the Admin as a Magento administrator.&lt;backendLogin&gt;admin&lt;/backendLogin&gt;\n&lt;backendPassword&gt;A password to access the Admin as a Magento administrator.&lt;backendPassword&gt;pas$worD&lt;/backendPassword&gt;\n&lt;handler&gt;Specifies priorities for different types of handler. The less the value, the higher the priority. The highest priority has value 0. token contains access token (used by WebAPI handlers only).\n\n&lt;handler&gt;\n  &lt;webapi priority=&quot;0&quot;&gt;\n    &lt;token&gt;integration_token&lt;/token&gt;\n  &lt;/webapi&gt;\n  &lt;curl priority=&quot;1&quot; /&gt;\n  &lt;ui priority=&quot;2&quot; /&gt;\n&lt;/handler&gt;\n\n\n\n\nHandler components\n\nHandler interface\n\nEach handler must implement a handler interface.\n\nYou should mention in a fixture the handler_interface attribute with a reference to the PHP class: Magento\\[module_name]\\Test\\Handler\\[object_name]\\[object_name]Interface (example for the Widget: Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface).\n\nExample of WidgetInterface.php (should be placed in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Handler/Widget):\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Handler\\HandlerInterface;\n\n/**\n * Interface WidgetInterface\n */\ninterface WidgetInterface extends HandlerInterface\n{\n    //\n}\n\nHandler class\n\nTo use the handler class, create an interface, declare a fallback in the config.xml, and declare interface/class relationships in the di.xml. When this class is created, you can call the persist() method to create Magento entity (for example, widget). The method returns data that are matched with fixture fields. All fixture fields that are matched are assigned values from the handler.\n\nThe persist() method is declared in the InjectableFixture class by path &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/Magento/Mtf/Fixture/InjectableFixture.php.\n\n&lt;?php\n/**\n * Persists Fixture Data into application.\n *\n * @return void\n */\npublic function persist()\n{\n    $this-&gt;eventManager-&gt;dispatchEvent(['persist_before'], [get_class($this)]);\n    if (!empty($this-&gt;handlerInterface)) {\n        $result = $this-&gt;handlerFactory-&gt;create($this-&gt;handlerInterface)-&gt;persist($this);\n        if (!empty($result)) {\n            foreach ($result as $key =&gt; $value) {\n                $this-&gt;data[$key] = $value;\n            }\n        }\n    }\n    $this-&gt;eventManager-&gt;dispatchEvent(['persist_after'], [get_class($this)]);\n}\n\nCreate the handler in the same directory where the interface is stored: &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/[module_name]/Test/Handler/[object_name]/[type_of_handler].php\n\ndi.xml\n\nThe di.xml file declares relationship between the interface and the handler class. The file must be placed in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/[module_name]/Test/etc/[handler_type].\n\nSee an example for the Widget cURL handler (&lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/etc/curl/di.xml):\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;preference for=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\" type=\"\\Magento\\Widget\\Test\\Handler\\Widget\\Curl\" /&gt;\n&lt;/config&gt;\n\nIn this example, the di.xml file causes the Curl class to replace the WidgetInterface.\n\nSee the directory structure mentioned for the case with the Widget cURL handler:\n\n\n\nHow to create a cURL handler\n\nLet’s create a cURL handler that creates a new widget.\n\n\n  Create a directory with the name Widget in the Handler directory of the Magento_Widget module - &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Handler/Widget.\n  In the same directory, create the interface for the cURL handler, and call the file WidgetInterface.php. Our new interface extends HandlerInterface class.\n\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Handler\\HandlerInterface;\n\n/**\n * Interface WidgetInterface\n */\ninterface WidgetInterface extends HandlerInterface\n{\n    //\n}\n\n\n  Create Curl.php in the same directory. This file contains a handler class, which defines preparation of a data to create a new widget.\n\n\nThe following code includes detailed comments for better understanding.\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Fixture\\FixtureInterface;\nuse Magento\\Mtf\\Handler\\Curl as AbstractCurl;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport\\BackendDecorator;\n\n/**\n * Curl handler for creating widgetInstance/frontendApp.\n */\nclass Curl extends AbstractCurl\n{\n    /**\n     * Mapping values for data.\n     *\n     * @var array\n     */\n    protected $mappingData = [\n        'code' =&gt; [\n            'CMS Page Link' =&gt; 'cms_page_link',\n        ],\n        'block' =&gt; [\n            'Main Content Area' =&gt; 'content',\n            'Sidebar Additional' =&gt; 'sidebar.additional',\n            'Sidebar Main' =&gt; 'sidebar.main',\n        ]\n    ];\n\n    /**\n     * Post request for creating widget instance.\n     *\n     * @param FixtureInterface $fixture [optional]\n     * @throws \\Exception\n     * @return null|array instance id\n     */\n    public function persist(FixtureInterface $fixture = null)\n    {\n        // Prepare data to send it using cURL.\n        $data = $this-&gt;prepareData($fixture);\n        // Build url to send post request to create widget.\n        $url = $_ENV['app_backend_url'] . 'admin/widget_instance/save/code/'\n            . $data['code'] . '/theme_id/' . $data['theme_id'];\n        // Create CurlTransport instance to operate with cURL. BackendDecorator is used to log in to Magento backend.\n        $curl = new BackendDecorator(new CurlTransport(), $this-&gt;_configuration);\n        // Send request to url with prepared data.\n        $curl-&gt;write($url, $data);\n        // Read response.\n        $response = $curl-&gt;read();\n        // Close connection to server.\n        $curl-&gt;close();\n        // Verify whether request has been successful (check if success message is present).\n        if (!strpos($response, 'data-ui-id=\"messages-message-success\"')) {\n            throw new \\Exception(\"Widget instance creation by curl handler was not successful! Response: $response\");\n        }\n        // Get id of created widget in order to use in other tests.\n        $id = null;\n        if (preg_match_all('/\\/widget_instance\\/edit\\/instance_id\\/(\\d+)/', $response, $matches)) {\n            $id = $matches[1][count($matches[1]) - 1];\n        }\n        return ['id' =&gt; $id];\n    }\n\n    /**\n     * Prepare data to create widget.\n     *\n     * @param FixtureInterface $widget\n     * @return array\n     */\n    protected function prepareData(FixtureInterface $widget)\n    {\n        // Replace UI fixture values with values that are applicable for cURL. Property $mappingData is used.\n        $data = $this-&gt;replaceMappingData($widget-&gt;getData());\n        // Perform data manipulations to prepare the cURL request based on input data.\n        ...\n        return $data;\n    }\n    // Additional methods.\n}\n\n\n  Create di.xml in the etc/curl directory of the Magento_Widget module.\n\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2013-2017 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;preference for=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\" type=\"\\Magento\\Widget\\Test\\Handler\\Widget\\Curl\" /&gt;\n&lt;/config&gt;\n\ncURL authentication classes\n\nIn the previously mentioned example of the Curl.php code, authentication in the Admin is realized using the BackendDecorator class.\n\nThe FrontendDecorator class manages authentication in the storefront.\n\nBackendDecorator class\n\nBackendDecorator manages authentication in Admin and saves the Admin’s session.\n\nFull class name is Mtf\\Util\\Protocol\\CurlTransport\\BackendDecorator.\n\nAdd to the Curl.php the following code:\n\n$curl = new BackendDecorator(new CurlTransport(), new Config());\n\nConfig() takes Admin’s configuration from config.xml, where the username and the password are stored.\n\nFrontendDecorator class\n\nFrontendDecorator helps to authorize the customer and saves his session.\n\nFull class name is Mtf\\Util\\Protocol\\CurlTransport\\FrontendDecorator.\n\nUse the following code in the Curl.php file:\n\n$curl = new FrontendDecorator(new CurlTransport(), $this-&gt;customer);\n\nHow to create a UI handler\n\nLet’s create a UI handler that creates a new widget.\n\n\n  Create a directory with the name Widget in the Handler directory of the Magento_Widget module - &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Handler/Widget.\n  In the same directory, create interface for the UI handler, and call the file WidgetInterface.php. Our new interface extends HandlerInterface class.\n\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Handler\\HandlerInterface;\n\n/**\n * Interface WidgetInterface\n */\ninterface WidgetInterface extends HandlerInterface\n{\n    //\n}\n\n\n  Create Ui.php in the same directory. This file contains a handler class, which defines preparation of a data to create a new widget.\n\n\nThe code has detailed comments for better understanding.\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Fixture\\FixtureInterface;\nuse Magento\\Mtf\\Handler\\Curl as AbstractCurl;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport\\BackendDecorator;\n\n/**\n * Curl handler for creating widgetInstance/frontendApp.\n */\nclass Curl extends AbstractCurl\n{\n    /**\n     * Mapping values for data.\n     *\n     * @var array\n     */\n    protected $mappingData = [\n        'code' =&gt; [\n            'CMS Page Link' =&gt; 'cms_page_link',\n        ],\n        'block' =&gt; [\n            'Main Content Area' =&gt; 'content',\n            'Sidebar Additional' =&gt; 'sidebar.additional',\n            'Sidebar Main' =&gt; 'sidebar.main',\n        ]\n    ];\n\n    /**\n     * Post request for creating widget instance.\n     *\n     * @param FixtureInterface $fixture [optional]\n     * @throws \\Exception\n     * @return null|array instance id\n     */\n    public function persist(FixtureInterface $fixture = null)\n    {\n        // Prepare data to send it using cURL.\n        $data = $this-&gt;prepareData($fixture);\n        // Build url to send post request to create widget.\n        $url = $_ENV['app_backend_url'] . 'admin/widget_instance/save/code/'\n            . $data['code'] . '/theme_id/' . $data['theme_id'];\n        // Create CurlTransport instance to operate with cURL. BackendDecorator is used to log in to Magento backend.\n        $curl = new BackendDecorator(new CurlTransport(), $this-&gt;_configuration);\n        // Send request to url with prepared data.\n        $curl-&gt;write($url, $data);\n        // Read response.\n        $response = $curl-&gt;read();\n        // Close connection to server.\n        $curl-&gt;close();\n        // Verify whether request has been successful (check if success message is present).\n        if (!strpos($response, 'data-ui-id=\"messages-message-success\"')) {\n            throw new \\Exception(\"Widget instance creation by curl handler was not successful! Response: $response\");\n        }\n        // Get id of created widget in order to use in other tests.\n        $id = null;\n        if (preg_match_all('/\\/widget_instance\\/edit\\/instance_id\\/(\\d+)/', $response, $matches)) {\n            $id = $matches[1][count($matches[1]) - 1];\n        }\n        return ['id' =&gt; $id];\n    }\n\n    /**\n     * Prepare data to create widget.\n     *\n     * @param FixtureInterface $widget\n     * @return array\n     */\n    protected function prepareData(FixtureInterface $widget)\n    {\n        // Replace UI fixture values with values that are applicable for cURL. Property $mappingData is used.\n        $data = $this-&gt;replaceMappingData($widget-&gt;getData());\n        // Perform data manipulations to prepare the cURL request based on input data.\n        ...\n        return $data;\n    }\n    // Additional methods.\n}\n\n\n  Create di.xml in the etc/ui directory of the Magento_Widget module.\n\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;preference for=\"Magento\\Widget\\Test\\Handler\\Widget\\WidgetInterface\"\n                type=\"\\Magento\\Widget\\Test\\Handler\\Widget\\Ui\" /&gt;\n&lt;/config&gt;\n\nHow to create a WebAPI handler\n\nLet’s create a WebAPI handler that creates a new tax rule.\n\n\n  Create a directory with the name TaxRule in the Handler directory of the Magento_Tax module - &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Tax/Test/Handler/TaxRule.\n  In the same directory, create interface for the WebAPI handler, and call the file TaxRuleInterface.php. Our new interface extends HandlerInterface class.\n\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Handler\\HandlerInterface;\n\n/**\n * Interface WidgetInterface\n */\ninterface WidgetInterface extends HandlerInterface\n{\n    //\n}\n\n\n  Create Webapi.php in the same directory. The file contains a handler class. In the following example WebAPI handler uses some cURL handler methods to prepare data.\n\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Widget\\Test\\Handler\\Widget;\n\nuse Magento\\Mtf\\Fixture\\FixtureInterface;\nuse Magento\\Mtf\\Handler\\Curl as AbstractCurl;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport;\nuse Magento\\Mtf\\Util\\Protocol\\CurlTransport\\BackendDecorator;\n\n/**\n * Curl handler for creating widgetInstance/frontendApp.\n */\nclass Curl extends AbstractCurl\n{\n    /**\n     * Mapping values for data.\n     *\n     * @var array\n     */\n    protected $mappingData = [\n        'code' =&gt; [\n            'CMS Page Link' =&gt; 'cms_page_link',\n        ],\n        'block' =&gt; [\n            'Main Content Area' =&gt; 'content',\n            'Sidebar Additional' =&gt; 'sidebar.additional',\n            'Sidebar Main' =&gt; 'sidebar.main',\n        ]\n    ];\n\n    /**\n     * Post request for creating widget instance.\n     *\n     * @param FixtureInterface $fixture [optional]\n     * @throws \\Exception\n     * @return null|array instance id\n     */\n    public function persist(FixtureInterface $fixture = null)\n    {\n        // Prepare data to send it using cURL.\n        $data = $this-&gt;prepareData($fixture);\n        // Build url to send post request to create widget.\n        $url = $_ENV['app_backend_url'] . 'admin/widget_instance/save/code/'\n            . $data['code'] . '/theme_id/' . $data['theme_id'];\n        // Create CurlTransport instance to operate with cURL. BackendDecorator is used to log in to Magento backend.\n        $curl = new BackendDecorator(new CurlTransport(), $this-&gt;_configuration);\n        // Send request to url with prepared data.\n        $curl-&gt;write($url, $data);\n        // Read response.\n        $response = $curl-&gt;read();\n        // Close connection to server.\n        $curl-&gt;close();\n        // Verify whether request has been successful (check if success message is present).\n        if (!strpos($response, 'data-ui-id=\"messages-message-success\"')) {\n            throw new \\Exception(\"Widget instance creation by curl handler was not successful! Response: $response\");\n        }\n        // Get id of created widget in order to use in other tests.\n        $id = null;\n        if (preg_match_all('/\\/widget_instance\\/edit\\/instance_id\\/(\\d+)/', $response, $matches)) {\n            $id = $matches[1][count($matches[1]) - 1];\n        }\n        return ['id' =&gt; $id];\n    }\n\n    /**\n     * Prepare data to create widget.\n     *\n     * @param FixtureInterface $widget\n     * @return array\n     */\n    protected function prepareData(FixtureInterface $widget)\n    {\n        // Replace UI fixture values with values that are applicable for cURL. Property $mappingData is used.\n        $data = $this-&gt;replaceMappingData($widget-&gt;getData());\n        // Perform data manipulations to prepare the cURL request based on input data.\n        ...\n        return $data;\n    }\n    // Additional methods.\n}\n\n\n  Create di.xml in the etc/webapi directory of the Magento_Tax module.\n\n\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n    &lt;preference for=\"Magento\\Tax\\Test\\Handler\\TaxRule\\TaxRuleInterface\"\n                type=\"\\Magento\\Tax\\Test\\Handler\\TaxRule\\Webapi\" /&gt;\n&lt;/config&gt;\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_handler.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-installation-html": {
      "title": "Installation of the Functional Testing Framework Entities",
      "content": "Well, you are on the way to install the Functional Testing Framework!\n\nFollow the next three steps:\n\n\n  \n    Check pre-installation conditions\n  \n  \n    Perform the installation\n  \n  \n    Check the installation\n  \n\n\nCheck pre-installation conditions\n\nInstall the Magento application\nTo install the Magento application, see Magento Installation Guide.\n\nCheck if all required software installed and configured\n\nPHP\n\nFor more details about PHP verification, installation and configuration (Ubuntu, CentOS).\n\n\n    In php.ini file, make sure extension=php_openssl.dll is not commented out.\n\n\nCheck if the Functional Testing Framework has been already installed\n\n\n  Find directory &lt;magento2_root_dir&gt;/dev/tests/functional/.\n  Find the vendor directory. If the directory exists, you already have the Functional Testing Framework installed in vendor/magento/mtf.\n\n\nPerform the installation\n\nThe Functional Testing Framework requires Composer, which downloads libraries defined in &lt;magento2_root_dir&gt;/dev/tests/functional/composer.json.\n\n\n  If you're not sure that Composer is installed, see Install Composer.\n\n\n\n  Open a command prompt.\n  Log in to your Magento server as a user with permissions to modify the Magento file system. (This is typically the Magento file system owner.)\n\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/\ncomposer install\n\n\n\n  If command failed, maybe Composer hasn't been installed globally.\n  Copy composer.phar to /usr/local/bin/composer.\n  To run it locally put composer.phar into directory, where composer.json file is located (that is, &lt;magento2&gt;/dev/tests/functional/).\nAnd run from this directory php composer.phar install.\n\n\nCheck the installation\n\nFind the Functional Testing Framework directory\n\nCheck whether the vendor directory exists in &lt;magento2_root_dir&gt;/dev/tests/functional/.\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/\nls\n\n\nFind the mtf directory.\n\ncd vendor/magento\nls\n\n\nVerify the Functional Testing Framework version\n\nOpen &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/CHANGELOG.md. The latest version in CHANGELOG.md is version of the FTF you installed.\n\nNext Steps\nAdjust FTF configuration \n",
      "url": "/guides/v2.0/mtf/mtf_installation.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-introduction-html": {
      "title": "Introduction to the Functional Testing Framework",
      "content": "This guide provides instructions on installing and configuring the Functional Testing Framework (FTF). Using the FTF, you can create and run functional tests to make it easier to perform basic acceptance testing, smoke testing, regression testing, and so on.\n\nFTF is an open source cross-platform solution (that is, does not depend on a specific operating system).\n\nFTF enables you to quickly develop functional tests for the Magento application. These tests can be performed at any time.\n\nYou can run a single test independently, many tests together (that is, a test suite), or you can run all available tests.\n\nFTF does not contain tests. All functional tests are located in &lt;magento2 root dir&gt;/dev/tests/functional/.\n\nWhat tools should I use to run tests with FTF?\n\n\n  \n    PHPUnit (downloaded via composer during installation)\n  \n  \n    Selenium Standalone Server\n  \n  \n    Web browser\n  \n\n\nWhat do I have as output after running tests with FTF?\n\n\n  \n    Tested application\n  \n  \n    Basic PHPUnit results\n  \n  \n    Screenshots of failures\n  \n  \n    Logs of failures\n  \n\n\nAudience\n\nThis guide is intended to be used by any Magento developer. In addition, it can be used by software engineers such as QA specialists, PHP developers, and system integrators.\n\nGoal\n\nFacilitate functional testing and minimize efforts to perform\nregression testing.\n\nScope\n\nFTF is purposed to test user interactions with web application under\ntest.\n\nFTF works with functional tests located in\n&lt;magento2_root_dir&gt;/dev/tests/functional/.\n\nOut-of-the-box tests cover basic functionality. Extended functionality\ncan be tested using customized tests, created with FTF.\n\nRelative to your software development lifecycle, the FTF can help you:\n\n\n  \n    During the development phase, test any changes of functionality (new modules, update modules, fix bugs).\n  \n  \n    During the maintenance phase, for periodic automated regression testing.\n  \n\n\nFTF use cases examples\n\n\n  \n    As Magento developer I want to cover implemented functionality with new tests (for example, added attribute on Customer Form, extended Search functionality, added tags for Products etc).\n  \n  \n    As a software engineer I want to perform regression testing before release to be confident that Magento works as expected with new functionality.\n  \n\n\nNon-functional testing\n\nFTF works with tests from &lt;magento2_root_dir&gt;/dev/tests/functional only.\n\nFor other tests please see the following topics:\n\n\n  \n    How to run unit tests during development on the command line or PHPStorm.\n  \n  \n    How to run unit and integration tests using bin/magento in continuous integration.\n  \n  \n    More information about JavaScript unit tests.\n  \n  \n    More information about performance testing.\n  \n\n\nFTF on GitHub\n\nFollow the FTF project and contribute on GitHub\nhttps://github.com/magento/mtf.\n\n",
      "url": "/guides/v2.0/mtf/mtf_introduction.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-page-html": {
      "title": "Page",
      "content": "A page object is a class that serves to interact with the Magento page under test.\nA page serves as container for blocks.\n\nIn the functional tests, Page Object Design Pattern is used. Test uses block methods of page object class to interact with application under test.\n\nBenefit of this approach is that tests don’t need to be changed after changes in the UI. Only code in corresponding block must be changed. This approach provides the following advantages:\n\n\n  Clean separation between test code and page specific code like locator.\n  Single repository for the services or operations provided by the page.\n  Decreased duplication of the code.\n\n\nYou can learn from this topic how to create new page, add blocks to the page. Furthermore, it discusses mechanism of extending the page in another module.\n\nCreate page\n\nThe general flow is the following:\n\n\n  \n    Create an XML file in the Page directory of the module to which it belongs\n  \n  \n    Add the previously created blocks presented on this page to the &lt;page&gt; node\n  \n  \n    Run the page generator\n  \n\n\nLet’s see an example of the Magento Widget page:\n\n&lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Widget/Test/Page/Adminhtml/WidgetInstanceIndex.xml\n\nwhere four blocks have been added:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"WidgetInstanceIndex\" area=\"Adminhtml\" mca=\"admin/widget_instance/index\" module=\"Magento_Widget\"&gt;\n        &lt;block name=\"pageActionsBlock\" class=\"Magento\\Backend\\Test\\Block\\GridPageActions\" locator=\".page-main-actions\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"widgetGrid\" class=\"Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\WidgetGrid\" locator=\"#widgetInstanceGrid\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"messagesBlock\" class=\"Magento\\Backend\\Test\\Block\\Messages\" locator=\"#messages\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"systemMessageDialog\" class=\"Magento\\AdminNotification\\Test\\Block\\System\\Messages\" locator='[role=\"dialog\"].ui-popup-message' strategy=\"css selector\" /&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nThe following table explains &lt;page&gt; attributes.\n\n\n  \n    \n      &lt;page&gt; attribute\n      Description\n      Example with explanation\n    \n  \n  \n    \n      name\n      Name of the page PHP class, that will be generated in &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento/&lt;module&gt;/Page/&lt;area&gt;/&lt;name&gt;.php.\n      WidgetInstanceIndex\n    \n    \n      area\n      The page usage area. Determines a type of the page. The directory with the name assigned to area will be created in the module. Value can be Adminhtml for the Admin area, or any other for another area.\n      Adminhtml. The page class will be generated in the &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento/Widget/Page/Adminhtml.\n    \n    \n      mca\n      Path following the base URL for the Magento pages (storefront or Admin), or full URL for other pages. MCA is an abbreviation of the Module Controller Action.\n      admin/widget_instance/index. Considering that area=\"Adminhtml\", the Magento page under test is http://example.com/admin/admin/widget_instance/index\n    \n    \n      module\n      Module where the page will be generated.\n      Magento_Widget. The page will be generated in the &lt;magento2_root_dir&gt;/dev/tests/functional/Magento/Widget/Page\n    \n  \n\n\n\n\n  See the block node attributes details in the following table:\n\n  \n    \n      \n        block attribute\n        Description\n        Is required\n        Values\n        Example\n      \n    \n    \n      \n        name\n        Name of the block\n        Required\n        Unique in the page. The method to get the block class instance is generated using this value.\n        widgetGrid\n      \n      \n        class\n        Full name of the block class\n        Required\n        Class name\n        Magento\\Widget\\Test\\Block\\Adminhtml\\Widget\\WidgetGrid\n      \n      \n        locator\n        CSS selector or XPath locator of the block\n        Required\n        CSS Selectors, XPath\n        CSS: #widgetInstanceGrid, XPath: //*[@id=\"widgetInstanceGrid\"]\n      \n      \n        strategy\n        Selector strategy\n        Required\n        css selector or xpath\n        css selector\n      \n    \n  \n\n\n\nAlso, block can contain a render node. Read about renders in the Block topic.\n\nTo apply all changes you've made to the page (XML file), run the class generator.\nphp &lt;magento2&gt;/dev/tests/functional/utils/generate.php\nThe page will be updated in the &lt;magento2&gt;/dev/tests/functional/generated directory.\n\nPage types\n\nDepending on area and mca attributes, page can be of one of the following types:\n\n\n  Admin page is extended from Magento\\Mtf\\Page\\BackendPage class\n  Storefront page is extended from Magento\\Mtf\\Page\\FrontendPage class\n  External page is extended from Magento\\Mtf\\Page\\ExternalPage class\n\n\nAdmin page\n\nAdmin page has attribute area=\"Adminhtml\" in &lt;page&gt; node of the page XML file. Generated page extends  Magento\\Mtf\\Page\\BackendPage class. You will log in automatically to the Admin.\n\nThe page will be opened as a concatenation of app_backend_url from &lt;magento2_root_dir&gt;/dev/tests/functional/phpunit.xml and mca link.\n\nStorefront page\n\nStorefront page is recognizable by area assigned any value except Adminhtml, and mca doesn’t have http. This type of page extends class Magento\\Mtf\\Page\\FrontendPage.\n\nPage will be opened as concatenation of app_frontend_url from &lt;magento2_root_dir&gt;/dev/tests/functional/phpunit.xml and mca link.\n\nExternal page\n\nExternal page has area assigned any value except Adminhtml, and mca containing http. Generated page extends class Magento\\Mtf\\Page\\ExternalPage.\n\nThe page will be opened using mca link.\n\nMerge pages\n\nPage merging can help you to override modules declared in a page, or add blocks from different modules.\n\nPages are merged when they have the same name attribute value.\n\nPages are merged module by module in the order that modules are loaded in Magento. All new modules are loaded after related Magento modules (according to the dependencies) so that the pages from new modules are merged the last.\n\nAdd blocks from different modules\n\nTo add blocks from different modules to the page, you can merge pages by following steps:\n\nStep 1. Create an XML page in the corresponding module\n\nStep 2. Assign page attributes\n\n\n  with the same name as the page you want to merge\n  with the same mca\n  the module and area attributes can be omitted\n\n\nStep 3. Add blocks to the page\n\nStep 4. Run the page generator\n\nFor example, we have dev/tests/functional/tests/app/Magento/Catalog/Test/Page/Product/CatalogProductView.xml page and want to add three blocks from the Magento_Review module.\n\ndev/tests/functional/tests/app/Magento/Catalog/Test/Page/Product/CatalogProductView.xml contains:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogProductView\" area=\"Product\" mca=\"catalog/product/view\" module=\"Magento_Catalog\"&gt;\n        &lt;block name=\"viewBlock\" class=\"Magento\\Catalog\\Test\\Block\\Product\\View\" locator=\"#maincontent\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"additionalInformationBlock\" class=\"Magento\\Catalog\\Test\\Block\\Product\\Additional\" locator=\"#additional\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"customOptionsBlock\" class=\"Magento\\Catalog\\Test\\Block\\Product\\View\\CustomOptions\" locator=\"#product-options-wrapper\" strategy=\"css selector\" /&gt;        \n        &lt;block name=\"messagesBlock\" class=\"Magento\\Backend\\Test\\Block\\Messages\" locator=\".page.messages\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"titleBlock\" class=\"Magento\\Theme\\Test\\Block\\Html\\Title\" locator=\".page-title-wrapper h1.page-title .base\" strategy=\"css selector\" /&gt;        \n    &lt;/page&gt;\n&lt;/config&gt;\n\nWe should create dev/tests/functional/tests/app/Magento/Review/Test/Page/Product/CatalogProductView.xml page with blocks we want to add:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogProductView\" mca=\"catalog/product/view\"&gt;\n        &lt;block name=\"reviewSummary\" class=\"Magento\\Review\\Test\\Block\\Product\\View\\Summary\" locator=\".product-reviews-summary\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"customerReviewBlock\" class=\"Magento\\Review\\Test\\Block\\Product\\View\" locator=\"#customer-reviews\" strategy=\"css selector\" /&gt;\n        &lt;block name=\"reviewFormBlock\" class=\"Magento\\Review\\Test\\Block\\ReviewForm\" locator=\"#review-form\" strategy=\"css selector\" /&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nAnd generate the updated page:\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nThe result is in the &lt;magento2_root_dir&gt;/dev/tests/functional/generated/Magento/Catalog/Test/Page/Product/CatalogProductView.php with the following code:\n\n&lt;?php\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Catalog\\Test\\Page\\Product;\nuse Magento\\Mtf\\Page\\FrontendPage;\n/**\n * Class CatalogProductView\n */\nclass CatalogProductView extends FrontendPage\n{\n    const MCA = 'catalog/product/view';\n    /**\n     * Blocks' config\n     *\n     * @var array\n     */\n    protected $blocks = [\n        'viewBlock' =&gt; [\n            'class' =&gt; 'Magento\\Catalog\\Test\\Block\\Product\\View',\n            'locator' =&gt; '#maincontent',\n            'strategy' =&gt; 'css selector',\n        ],\n        'additionalInformationBlock' =&gt; [\n            'class' =&gt; 'Magento\\Catalog\\Test\\Block\\Product\\Additional',\n            'locator' =&gt; '#additional',\n            'strategy' =&gt; 'css selector',\n        ],\n        'customOptionsBlock' =&gt; [\n            'class' =&gt; 'Magento\\Catalog\\Test\\Block\\Product\\View\\CustomOptions',\n            'locator' =&gt; '#product-options-wrapper',\n            'strategy' =&gt; 'css selector',\n        ],\n        'messagesBlock' =&gt; [\n            'class' =&gt; 'Magento\\Backend\\Test\\Block\\Messages',\n            'locator' =&gt; '.page.messages',\n            'strategy' =&gt; 'css selector',\n        ],\n        'titleBlock' =&gt; [\n            'class' =&gt; 'Magento\\Theme\\Test\\Block\\Html\\Title',\n            'locator' =&gt; '.page-title-wrapper h1.page-title .base',\n            'strategy' =&gt; 'css selector',\n        ],\n        'reviewSummary' =&gt; [\n            'class' =&gt; 'Magento\\Review\\Test\\Block\\Product\\View\\Summary',\n            'locator' =&gt; '.product-reviews-summary',\n            'strategy' =&gt; 'css selector',\n        ],\n        'customerReviewBlock' =&gt; [\n            'class' =&gt; 'Magento\\Review\\Test\\Block\\Product\\View',\n            'locator' =&gt; '#customer-reviews',\n            'strategy' =&gt; 'css selector',\n        ],\n        'reviewFormBlock' =&gt; [\n            'class' =&gt; 'Magento\\Review\\Test\\Block\\ReviewForm',\n            'locator' =&gt; '#review-form',\n            'strategy' =&gt; 'css selector',\n        ],\n    ];\n    /**\n     * @return \\Magento\\Catalog\\Test\\Block\\Product\\View\n     */\n    public function getViewBlock()\n    {\n        return $this-&gt;getBlockInstance('viewBlock');\n    }\n    /**\n     * @return \\Magento\\Catalog\\Test\\Block\\Product\\Additional\n     */\n    public function getAdditionalInformationBlock()\n    {\n        return $this-&gt;getBlockInstance('additionalInformationBlock');\n    }\n    /**\n     * @return \\Magento\\Catalog\\Test\\Block\\Product\\View\\CustomOptions\n     */\n    public function getCustomOptionsBlock()\n    {\n        return $this-&gt;getBlockInstance('customOptionsBlock');\n    }\n    /**\n     * @return \\Magento\\Backend\\Test\\Block\\Messages\n     */\n    public function getMessagesBlock()\n    {\n        return $this-&gt;getBlockInstance('messagesBlock');\n    }\n    /**\n     * @return \\Magento\\Theme\\Test\\Block\\Html\\Title\n     */\n    public function getTitleBlock()\n    {\n        return $this-&gt;getBlockInstance('titleBlock');\n    }\n    /**\n     * @return \\Magento\\Review\\Test\\Block\\Product\\View\\Summary\n     */\n    public function getReviewSummary()\n    {\n        return $this-&gt;getBlockInstance('reviewSummary');\n    }\n    /**\n     * @return \\Magento\\Review\\Test\\Block\\Product\\View\n     */\n    public function getCustomerReviewBlock()\n    {\n        return $this-&gt;getBlockInstance('customerReviewBlock');\n    }\n    /**\n     * @return \\Magento\\Review\\Test\\Block\\ReviewForm\n     */\n    public function getReviewFormBlock()\n    {\n        return $this-&gt;getBlockInstance('reviewFormBlock');\n    }\n}\n\nBlock overriding\n\nYour module can influence functionality of another module that is defined in a corresponding block of that module. In this case, you can override existing block by a block from your module.\n\nTo override blocks, follow:\n\nStep 1. Create an XML page in your new module with the name of page you want to merge.\n\nStep 2. Assign page attributes\n\n\n  with the same name as the page you want to merge\n  with the same mca\n  without module and area attributes\n\n\nStep 3. Add blocks that you want to override (indicating a block class with new behaviour)\n\nStep 4. Run the page generator.\n\nLet’s see an example with the following use case:\n\n\n  A Magento_NewModule changes the category creation behaviour of a Magento_Catalog module.\n  editForm block from page \\Magento\\Catalog\\Test\\Page\\Adminhtml\\CatalogCategoryEdit must be changed according to new functionality.\n\n\nLet us see page \\Magento\\Catalog\\Test\\Page\\Adminhtml\\CatalogCategoryEdit:\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!--\n/**\n * Copyright © 2015 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n --&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogCategoryEdit\" area=\"Adminhtml\" mca=\"catalog/category/edit\" module=\"Magento_Catalog\"&gt;\n        &lt;block name=\"messagesBlock\" class=\"Magento\\Backend\\Test\\Block\\Messages\" locator=\"#messages\" strategy=\"css selector\"/&gt;\n        &lt;block name=\"formPageActions\" class=\"Magento\\Catalog\\Test\\Block\\Adminhtml\\Category\\Edit\\PageActions\" locator=\".page-main-actions\" strategy=\"css selector\"/&gt;\n        &lt;block name=\"editForm\" class=\"Magento\\Catalog\\Test\\Block\\Adminhtml\\Category\\Edit\\CategoryForm\" locator=\"#container\" strategy=\"css selector\"/&gt;\n        &lt;block name=\"modalBlock\" class=\"Magento\\Ui\\Test\\Block\\Adminhtml\\Modal\" locator=\"._show[data-role=modal]\" strategy=\"css selector\"/&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nThe block that we want to change is:\n\n&lt;block name=\"editForm\" class=\"Magento\\Catalog\\Test\\Block\\Adminhtml\\Category\\Edit\\CategoryForm\" locator=\"#container\" strategy=\"css selector\"/&gt;\n\nWe shouldn’t change the editForm block in the Magento_Catalog module because in case of disabling of a Magento_NewModule module, the test will fail. Best way in this case is to create a new block in a Magento_NewModule module that covers new functionality.\n\nAssume that we already created the new block \\Magento\\NewModule\\Test\\Block\\Adminhtml\\Category\\Edit\\CategoryForm.\n\nTo use the editForm block from the Magento_NewModule, we must follow:\n\nStep 1. Create a CatalogCategoryEdit.xml page in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/NewModule/Test/Page/Adminhtml directory.\n\nStep 2. Assign page attributes\n\n\n  with the same name as the page you want to merge\n  with the same mca\n  without module and area attributes\n\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogCategoryEdit\" mca=\"catalog/category/edit\"&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nStep 3. Add blocks that you want to redirect.\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../../vendor/magento/mtf/etc/pages.xsd\"&gt;\n    &lt;page name=\"CatalogCategoryEdit\" mca=\"catalog/category/edit\"&gt;\n        &lt;block name=\"editForm\" class=\"\\Magento\\NewModule\\Test\\Block\\Adminhtml\\Category\\Edit\\CategoryForm\" locator=\"//div[contains(@data-bind, 'category_form')]\" strategy=\"xpath\"/&gt;\n    &lt;/page&gt;\n&lt;/config&gt;\n\nStep 4. Run the page generator.\n\nEnter in terminal:\n\nphp &lt;magento2_root_dir&gt;/dev/tests/functional/utils/generate.php\n\n\nNow when you call editForm block from the CatalogCategoryEdit page, class \\Magento\\NewModule\\Test\\Block\\Adminhtml\\Category\\Edit\\CategoryForm will be used.\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_page.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-html": {
      "title": "Quick start with the Functional Testing Framework",
      "content": "In this chapter you will learn how to:\n\n\n  Adjust configuration to set PHPUnit, the FTF, and credentials for Magento modules if required\n  Prepare environment for the test\n    \n      Run the Selenium Server\n      Run tests on non default browser\n      Run generator\n    \n  \n  Run functional tests\n    \n      Run all tests\n      Run particular test\n    \n  \n  Check logs for failed tests\n    \n      Check FTF logs\n      Check Magento logs\n    \n  \n\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-mtf-quickstart-config-html": {
      "title": "Quick start. Adjust configuration",
      "content": "Edit phpunit.xml to configure PHPUnit\n\nFind phpunit.xml in &lt;magento2_root_dir&gt;/dev/tests/functional, and open it in editor.\n\n\n  If you cannot find phpunit.xml, create it from phpunit.xml.dist.\n\n\nSet URL for Magento storefront under test\n\nFind &lt;php&gt; element.\nFor name=\"app_frontend_url\" set value that is your actual URL for Magento storefront under test.\n\nExample:\n&lt;env name=\"app_frontend_url\" value=\"http://example.com/magento2/\"/&gt;\n\nSet URL for Magento Admin URL under test\n\nFor name=\"app_backend_url\" set value that is your actual URL for Magento Admin URL under test.\n\nExample:\n&lt;env name=\"app_backend_url\" value=\"http://example.com/magento2/admin/\"/&gt;\n\nEdit config.xml to configure Functional Testing Framework\n\n\n  The default configuration is set in &lt;magento2&gt;/dev/tests/functional/etc/config.xml.dist. It should be copied as config.xml for further changes.\n\n\nFind config.xml in &lt;magento2_root_dir&gt;/dev/tests/functional/etc, and open it in editor.\n\nSet credentials for Magento Admin under test\nIn &lt;application&gt; element find elements &lt;backendLogin&gt; and &lt;backendPassword&gt;. Change content of these elements to your actual credentials for Magento Admin URL.\n\nSet browser that the FTF will use for tests\nThe default browser is Mozilla Firefox.\n\nIf you want to use another browser for tests you have to specify it in config.xml.\n\nCopy &lt;server&gt; element from &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/etc/config.xml&gt; and paste it in &lt;magento2_root_dir&gt;/dev/tests/functional/etc/config.xml after &lt;install&gt; element.\n\nEnter actual data in &lt;browserName&gt; and &lt;browser&gt; attributes.\n\nExample for Google Chrome:\n\n&lt;server&gt;\n&lt;item name=\"selenium\"\n      type=\"default\"\n      browser=\"Google Chrome\"\n      browserName=\"chrome\"\n      host=\"localhost\"\n      port=\"4444\"\n      seleniumServerRequestsTimeout=\"90\"\n      sessionStrategy=\"shared\"&gt;\n    &lt;desiredCapabilities&gt;\n        &lt;platform&gt;ANY&lt;/platform&gt;\n    &lt;/desiredCapabilities&gt;\n&lt;/item&gt;\n&lt;/server&gt;\n\nEdit credentials.xml to work with Magento modules that requires credentials\n\nFind credentials.xml in &lt;magento2_root_dir&gt;/dev/tests/functional, and open it in editor.\n\n\n  If you cannot find credentials.xml, create it from credentials.xml.dist.\n\n\nSet credentials for Magento modules under test\nOpen credentials.xml.\n\nFind block of elements for the Magento module you want to test.\n\nEnter actual data in value attribute of corresponding field element.\n\nNext Steps\n\nPrepare Magento application &gt;&gt;\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart/mtf_quickstart_config.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-mtf-quickstart-environment-html": {
      "title": "Quick start. Prepare environment for test run",
      "content": "Run the Selenium Server on default browser\n\nThe Selenium Server drives a browser to execute your tests.\nYou can download the Selenium Server from Selenium project website.\n\n\n  Install Java to work with Selenium Server.\n\n\nSpecific versions of the Selenium Server are compatible with specific versions of browsers. Read more about compatibility of browser version and Selenium server version.\n\n\n  Use Mozilla Firefox ESR 45 with Selenium 2.53.1. Later versions have compatibility issues.\n\n\nEnter in terminal:\n\njava -jar &lt;path_to_selenium_directory&gt;/selenium-server.jar\n\n\nRun tests on non-default browser\n\nIf the Selenium Server does not work directly with your browser, find the corresponding web driver.\n\nIn config.xml define the browser that the FTF must use for tests.\n\nRun the Selenium Server with an additional argument.\n\nExample for Google Chrome with Selenium 2:\n\njava -Dwebdriver.chrome.driver=&lt;path_to_chrome_driver&gt;/chromedriver.exe -jar &lt;path_to_selenium_directory&gt;/selenium-server.jar\n\n\n\n  For Selenium 3 add the web driver to the directory where selenium-server.jar is located and run tests without additional argument: java -jar &lt;path_to_selenium_directory&gt;/selenium-server.jar\n\n\nRun generator\n\nGenerator generates fixtures, repositories, and page objects. Once the FTF is initialized, all classes must be pre-generated to facilitate creating and running the tests. Modules in the FTF are processed by generator in alphabetical order.\n\nEnter in terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/utils\nphp generate.php\n\n\nNext Steps\n\n\n  \n    \n      &lt;&lt; Prepare Magento application\n       Test run &gt;&gt;\n    \n  \n\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart/mtf_quickstart_environment.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-mtf-quickstart-logs-html": {
      "title": "Quick start. See logs for failed tests",
      "content": "All failed tests are logged in &lt;magento2_root_dir&gt;/dev/tests/functional/var/log.\n\n\n  This path is set in &lt;magento2&gt;/dev/tests/functional/phpunit.xml, element &lt;env name=\"basedir\" value=\"&lt;path_to_directory&gt;\" /&gt;.\n\n\nAll Magento errors are logged in &lt;magento2_root_dir&gt;/var/log.\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart/mtf_quickstart_logs.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-mtf-quickstart-magento-html": {
      "title": "Quick start. Prepare Magento application",
      "content": "Change WYSIWYG settings\n\nA Selenium web-driver cannot enter data to fields with WYSIWYG. This option disables the WYSIWYG and enables the web-driver to process these fields as simple text areas.\n\n\n  Log in to the Magento Admin as an administrator.\n  Follow Stores &gt; Configuration &gt; General &gt; Content Management &gt; WYSIWYG Options.\n  Set Enable WYSIWYG Editor to Disabled Completely.\n  Click Save Config.\n\n\n\n\nChange security settings\n\nDisable the Secret Key in URL setting to open pages using direct URLs.\n\n\n  Follow Stores &gt; Configuration &gt; Advanced &gt; Admin &gt; Security.\n  Set Add Secret Key to URLs to No.\n\n\n\n\nRefresh page cache\n\n\n  Go to Cache Management.\n\n\n\n\n\n  Select the check box next to Configuration and Page Cache.\n  From the Actions list in the upper left, click Refresh.\n  Click Submit.\n\n\n\n  \n    \n      &lt;&lt; Adjust configuration\n      Prepare environment for test run &gt;&gt;\n    \n  \n\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart/mtf_quickstart_magento.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-quickstart-mtf-quickstart-runtest-html": {
      "title": "Quick start. Test run",
      "content": "All tests classified by categories in corresponding directories in &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento.\n\nFTF uses PHPUnit, which is located in &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/bin directory.\n\nBe sure that your system is ready for test run.\n\n\n  Magento is ready for tests\n  The Functional Testing Framework is installed\n  The Functional Testing Framework is configured\n  Environment is ready to test run\n\n\nRun all tests\n\nEnter in terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit\n\n\nThis command will run all tests from &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/.\n\nRun particular test\n\nEnter in terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit --filter &lt;name of test&gt;\n\n\nName of test is the name of PHP file with test.\n\nExample:\n\nLet’s check creating of new category. For this we should run &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/Catalog/Test/TestCase/Category/CreateCategoryEntityTest.php. To run this test enter the following script in your terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit --filter CreateCategoryEntityTest\n\n\nNext Steps\n\n\n  \n    \n      &lt;&lt; Prepare environment for test\n      See logs for failed tests &gt;&gt;\n    \n  \n\n",
      "url": "/guides/v2.0/mtf/mtf_quickstart/mtf_quickstart_runtest.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-scenariotest-html": {
      "title": "Scenario test",
      "content": "Scenario test is a case of separate test steps where each step is a distinct class. Test steps can be grouped in any order that makes functional testing more agile comparatively with injectable test.\n\nScenario test has the following advantages:\n\n\n  Each step in the scenario is a separate PHP class that is placed in the module it belongs to.\n  Scenario test reduces code duplication because each step can be used multiple times.\n  Scenario tests are flexible and support Magento modularity.\n  New test can be easily created using existing steps.\n\n\nScenario test is split into four logical components:\n\n\n  test case, which executes tests steps in the order defined in a tests scenario\n  data set, which contains variations of data and constraints for test steps\n  test scenario, which defines order of test steps\n  test step, which contains a test flow\n\n\nTest case class\n\nTest cases are located in &lt;magento2 root dir&gt;/dev/tests/functional/tests/app/Magento/&lt;module&gt;/Test/TestCase along with corresponding data sets. Each test case is a PHP class that only runs corresponding scenario, it doesn’t contain any other logic than that. In general, the difference between scenario test case and injectable test case is that all test logic is moved to distinct test steps, and their sequence is defined separately in XML file.\n\nImplementation of a scenario test is always the same. You have to change the name of your test case only.\n\n&lt;?php\n\nnamespace Magento\\YourModule\\Test\\TestCase;\n\nuse Magento\\Mtf\\TestCase\\Scenario;\n\n/**\n * Preconditions:\n * 1. ....\n * 2. ....\n  *\n * Steps:\n * 1. ....\n * 2. ....\n * 3. ....\n */\nclass FunctionalityYouWantToTest extends Scenario\n{\n    /**\n     * Runs the scenario test case for functionality you want to test.\n     *\n     * @return void\n     */\n    public function test()\n    {\n        $this-&gt;executeScenario();\n    }\n}\n\nScenario test case is a PHP class that extends the \\Magento\\Mtf\\TestCase\\Scenario\\ class and implements the test() method that calls executeScenario(). However, the Scenario class is not an interface, so the method can have any other name than test().\n\nTest scenario\n\nTest scenario is a sequence of test steps. Each scenario test case has its own scenario. All scenarios for a module are collected in an XML file located in &lt;magento2 root dir&gt;dev/tests/functional/tests/app/Magento/&lt;module&gt;/Test/etc/testcase.xml.\n\n&lt;?xml version=\"1.0\"?&gt;\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../vendor/magento/mtf/Magento/Mtf/TestCase/etc/testcase.xsd\"&gt;\n    &lt;scenario name=\"{name of test case}\" firstStep=\"{name of step to be run first}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\" next=\"{name of test step to be run next}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\" next=\"{name of test step to be run next}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\" next=\"{name of test step to be run next}\"&gt;\n    &lt;/scenario&gt;\n    &lt;scenario name=\"{name of test case}\" firstStep=\"{name of step to be run first}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\" next=\"{name of test step to be run next}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\" next=\"{name of test step to be run next}\"&gt;\n        &lt;step name=\"{name of test step}\" module=\"{name of the module where the test step is located}\"&gt;\n    &lt;/scenario&gt;\n&lt;/config&gt;\n\n&lt;scenario&gt; element\n\nEach &lt;scenario&gt; node defines a name of related test case in name and optionally a name of test step to be run first as firstStep.\n\nExample:\n\n&lt;scenario name=\"OnePageCheckoutTest\" firstStep=\"setupConfiguration\"&gt;\n...\n&lt;/scenario&gt;\n\nThe example declares a scenario for TestCase/OnePageCheckoutTest.php where &lt;step&gt; with name=\"setupConfiguration\" is to be run first.\n\n&lt;step&gt; element\n\nEach scenario contains test steps as &lt;step&gt; child elements. Each &lt;step&gt; requires name and module to define the name of a test step and the module to which it belongs to. All test steps are located in &lt;module&gt;/Test/TestStep.\n\nExample:\n\n&lt;step name=\"setupConfiguration\" module=\"Magento_Config\"/&gt;\n&lt;step name=\"createProducts\" module=\"Magento_Catalog\"/&gt;\n\nThe example defines the following test steps:\n\n\n  Config/Test/TestStep/SetupConfigurationStep.php\n  Catalog/Test/TestStep/CreateProductsStep.php\n\n\nnext and prev attributes\n\nUsing next and prev attributes you can specify previous or next test step as part of the node.\n\nThe following examples show tangled structure to demonstrate logic of the attributes.\n\n&lt;scenario name=\"OnePageCheckoutTest\" firstStep=\"setupConfiguration\"&gt;\n    &lt;step name=\"createProducts\" module=\"Magento_Catalog\"/&gt;\n    &lt;step name=\"setupConfiguration\" module=\"Magento_Config\" next=\"createProducts\"/&gt;\n&lt;/scenario&gt;\n\n&lt;scenario name=\"OnePageCheckoutTest\" firstStep=\"setupConfiguration\"&gt;\n    &lt;step name=\"createProducts\" module=\"Magento_Catalog\" prev=\"setupConfiguration\"/&gt;\n    &lt;step name=\"setupConfiguration\" module=\"Magento_Config\"/&gt;\n&lt;/scenario&gt;\n\nBoth examples define the following test steps and their sequence:\n\n\n  Config/Test/TestStep/SetupConfigurationStep.php.\n  Catalog/Test/TestStep/CreateProductsStep.php.\n\n\nalias attribute\n\nSometimes you want to use the same test step more then once in your scenario. In this case, you can use the alias attribute to define another name for a step that has been already listed as &lt;step&gt;.\n\n\n  Note that you can use &lt;step&gt; with the same name in a scenario only once.\n\n\nExample:\n\n&lt;scenario name=\"OnePageCheckoutTest\" firstStep=\"setupConfiguration\"&gt;\n    &lt;step name=\"setupConfiguration\" module=\"Magento_Config\" next=\"createProducts\"/&gt;\n    &lt;step name=\"createProducts\" module=\"Magento_Catalog\" next=\"setupConfigurationAfter\"/&gt;\n    &lt;step name=\"setupConfigurationAfter\" alias=\"setupConfiguration\" module=\"Magento_Config\"/&gt;\n&lt;/scenario&gt;\n\nThe example defines the following test steps and their sequence:\n\n\n  Config/Test/TestStep/SetupConfigurationStep.php\n  Catalog/Test/TestStep/CreateProductsStep.php\n  Config/Test/TestStep/SetupConfigurationStep.php\n\n\nTest step class\n\nAll test steps are located in &lt;module&gt;/Test/TestStep as PHP classes in the following format:\n\n&lt;?php\n\nnamespace Magento\\YourModule\\Test\\TestStep;\n\nuse Magento\\Mtf\\TestStep\\TestStepInterface;\n\nclass YourTestStep implements TestStepInterface\n{\n    public function __construct\n    (\n        // data that are required for this step along with other dependencies.\n    ) {\n        // all required classes (fixtures, pages, etc.) have to be assigned here.\n    };\n    \n    public function run()\n    {\n        // logic of the functional test step.\n    }\n    \n    public function cleanup()\n    {\n        // additional logic to be executed after the test step.\n    }\n    \n}\n\nA tests step must implement Magento\\Mtf\\TestStep\\TestStepInterface and define:\n\n\n  constructor (optional)\n  public method run() (required)\n  public method cleanup() (optional)\n\n\nLet’s see a test step on the example with Magento\\Customer\\Test\\TestStep\\LoginCustomerOnFrontendStep.\n\nShow/hide example  &lt;?php\n /**\n  * Copyright © 2016 Magento. All rights reserved.\n  * See COPYING.txt for license details.\n  */\n \n namespace Magento\\Customer\\Test\\TestStep;\n \n use Magento\\Cms\\Test\\Page\\CmsIndex;\n use Magento\\Customer\\Test\\Fixture\\Customer;\n use Magento\\Customer\\Test\\Page\\CustomerAccountLogin;\n use Magento\\Mtf\\TestStep\\TestStepInterface;\n \n /**\n  * Login customer on frontend.\n  */\n class LoginCustomerOnFrontendStep implements TestStepInterface\n {\n     /**\n      * Customer fixture.\n      *\n      * @var Customer\n      */\n     protected $customer;\n \n     /**\n      * Cms index page.\n      *\n      * @var CmsIndex\n      */\n     protected $cmsIndex;\n \n     /**\n      * Customer login page.\n      *\n      * @var CustomerAccountLogin\n      */\n     protected $customerAccountLogin;\n \n     /**\n      * Logout customer on frontend step.\n      *\n      * @var LogoutCustomerOnFrontendStep\n      */\n     protected $logoutCustomerOnFrontend;\n \n     /**\n      * @constructor\n      * @param CmsIndex $cmsIndex\n      * @param CustomerAccountLogin $customerAccountLogin\n      * @param LogoutCustomerOnFrontendStep $logoutCustomerOnFrontend\n      * @param Customer $customer\n      */\n     public function __construct(\n         CmsIndex $cmsIndex,\n         CustomerAccountLogin $customerAccountLogin,\n         LogoutCustomerOnFrontendStep $logoutCustomerOnFrontend,\n         Customer $customer\n     ) {\n         $this-&gt;cmsIndex = $cmsIndex;\n         $this-&gt;customerAccountLogin = $customerAccountLogin;\n         $this-&gt;customer = $customer;\n         $this-&gt;logoutCustomerOnFrontend = $logoutCustomerOnFrontend;\n     }\n \n     /**\n      * Login customer.\n      *\n      * @return void\n      */\n     public function run()\n     {\n         $this-&gt;logoutCustomerOnFrontend-&gt;run();\n         $this-&gt;cmsIndex-&gt;getLinksBlock()-&gt;openLink('Sign In');\n         $this-&gt;cmsIndex-&gt;getCmsPageBlock()-&gt;waitPageInit();\n         $this-&gt;customerAccountLogin-&gt;getLoginBlock()-&gt;login($this-&gt;customer);\n         $this-&gt;cmsIndex-&gt;getCmsPageBlock()-&gt;waitPageInit();\n     }\n \n     /**\n      * Logout customer on fronted.\n      *\n      * @return void\n      */\n     public function cleanup()\n     {\n         $this-&gt;logoutCustomerOnFrontend-&gt;run();\n     }\n }\n \n\n\nconstructor() method\n\nYou can optionally use the constructor() method which injects data to be used by run(). The data may include classes like pages, variation data, data returned by previous executed steps, etc.\n\nOn the previous example the constructor():\n\n\n  injects the CmsIndex and CustomerAccountLogin pages\n  injects the LogoutCustomerOnFrontendStep step\n  injects the Customer fixture data\n  assigns arguments to corresponding class properties\n\n\nrun() method\n\nThe run() method is required to perform a test step and contains logic of the step.\n\nOn the previous example the run() method:\n\n\n  logs out if the customer was logged in\n  clicks ‘Sign In’ on the LinksBlock of the cmsIndex page\n  waits for requested page loading\n  logs in the customer on the customerAccountLogin page\n  waits for logging in the customer\n\n\ncleanup() method\n\nThe cleanup() method is optional. It serves to reset Magento to initial state or execute any other logic after each variation of a test step.\n\nOn the previous example the clean() method:\n\n\n  logs out the customer\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_scenariotest.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-testcase-html": {
      "title": "Test case",
      "content": "The Magento Functional Testing Framework supports two types of functional tests:\n\n\n  Injectable test: the main type of the FTF test that uses XML data set files as inputs\n  Scenario test: supports a Magento modularity and enables you to inject one step into another test\n\n\nThis topic discusses the injectable test only.\n\nTest case structure\n\nA test case class extends the Mtf\\TestCase\\Injectable class. It contains one test() method and can optionally include __prepare(), __inject(), and tearDown() methods.\n\nDocblock\n\nAll out-of-the-box test cases contain description of a test flow at the beginning of a code. The description consists of the test steps and preconditions. Preconditions are the conditions to be performed before steps execution.\nUsage of docblock is a good practice for your new tests. See Magento\\Catalog\\Test\\TestCase\\Product\\UpdateSimpleProductEntityTest class as an example.\n\n__prepare() (optional)\n\nThe __prepare() method can be useful to prepare the unchangeable data that is repeatedly used for different test variations. The most popular use case is to create a fixture or a configuration setup that is used in the test.\n\nThis method is called one time only during the test launch and is optional to use. __prepare can return an array of arguments which can be used as arguments in the test() method of a test case and the processAssert() method in constraints. The following example creates and returns the $customer fixture.\n\npublic function __prepare(Customer $customer)\n{\n    $customer-&gt;persist();\n    return ['customer' =&gt; $customer];\n}\n\n\nA returned argument $customer is available in the test and in constraints.\n\n__inject() (optional)\n\nThe __inject() method is used to inject data in a test (usually to initialize a page). For an example:\n\npublic function __inject(\n    CatalogProductIndex $productGrid,\n    CatalogProductEdit $editProductPage\n) {\n    $this-&gt;productGrid = $productGrid;\n    $this-&gt;editProductPage = $editProductPage;\n}\n\n\nThis method is run before each variation test started. Returned arguments from this method are available in constraints and in the test as well.\n\ntest() (required)\n\nThe test() method must contain the test steps described in a docblock. The returned arguments from this method are available in constraints. This method is run for each variation in a data set. The test() method is required.\n\nIn the following example, the test includes preconditions and test steps. Preconditions contain a logic of different scenarios about creating a product (depending on the category state). Test steps are the following:\n\n\n  opening of the product creation grid page\n  searching by the sku parameter and opening of the product\n  editing of the found product\n  saving of the edited product\n\n\n&lt;?php\n/**\n * Run update product simple entity test.\n *\n * @param CatalogProductSimple $initialProduct\n * @param CatalogProductSimple $product\n * @param string $configData\n * @return array\n */\npublic function test(CatalogProductSimple $initialProduct, CatalogProductSimple $product, $configData = '')\n{\n    $this-&gt;configData = $configData;\n    // Preconditions\n    $initialProduct-&gt;persist();\n    $initialCategory = $initialProduct-&gt;hasData('category_ids')\n        ? $initialProduct-&gt;getDataFieldConfig('category_ids')['source']-&gt;getCategories()[0]\n        : null;\n    $category = $product-&gt;hasData('category_ids') &amp;&amp; $product-&gt;getCategoryIds()[0]\n        ? $product-&gt;getDataFieldConfig('category_ids')['source']-&gt;getCategories()[0]\n        : $initialCategory;\n    $this-&gt;objectManager-&gt;create(\n        'Magento\\Config\\Test\\TestStep\\SetupConfigurationStep',\n        ['configData' =&gt; $configData]\n    )-&gt;run();\n    // Steps\n    $filter = ['sku' =&gt; $initialProduct-&gt;getSku()];\n    $this-&gt;productGrid-&gt;open();\n    $this-&gt;productGrid-&gt;getProductGrid()-&gt;searchAndOpen($filter);\n    $this-&gt;editProductPage-&gt;getProductForm()-&gt;fill($product);\n    $this-&gt;editProductPage-&gt;getFormPageActions()-&gt;save();\n    return ['category' =&gt; $category];\n}\n\nA returned array is available in constraints within current variation.\n\ntearDown() (optional)\n\nWhen constraints of the variation have been performed, you can use the tearDown() method to get back the testing application to the initial state to be ready for the next variation execution (for example, logging out, clearing data, clearing cache).\n\nFor example, the following code deletes a sales rule after each variation:\n\npublic function tearDown()\n{\n    $this-&gt;promoQuoteIndex-&gt;open();\n    $this-&gt;promoQuoteIndex-&gt;getPromoQuoteGrid()-&gt;searchAndOpen(['name' =&gt; $this-&gt;salesRuleName]);\n    $this-&gt;promoQuoteEdit-&gt;getFormPageActions()-&gt;delete();\n    $this-&gt;promoQuoteEdit-&gt;getModalBlock()-&gt;acceptAlert();\n}\n\n\nTest case flow\n\nAll data required for the test are stored in variations of a data set. A __prepare() method is run first to prepare entities needed for a whole test. Arguments returned by a __prepare() method are available during all test including constraints. Further, the __inject() method injects data in the test. The test() method performs all the test steps using the data from the variation 1. Then, constraints listed in the variation 1 are run in the order they are listed. After that, the tearDown() method “cleans up” to be ready for the next test or variation. When a variation fails, the test launches for the next variation in a queue.\n\n\n\nHow to create a test case\n\nStep 1. Create a data set\n\nStep 2. Create a PHP class in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/&lt;module&gt;/TestCase directory\n\nStep 3. Give it a name using the following format:\n\n{action}{entityName}Entity{additional_description_if_needed}Test\n\nFor example:\n\n\n  CreateConfigurableProductEntityTest\n  CreateCatalogEventEntityFromCategoryPageTest\n\n\nStep 4. If you have preconditions, prepare the data using a __prepare() method\n\nStep 5. Inject the initial data for a test using a __inject() method\n\nStep 6. Declare all the test steps in the test() method\n\nStep 7. If you want to perform any actions after constraints, use a tearDown() method\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_testcase.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-entities-mtf-typified-element-html": {
      "title": "Typified element",
      "content": "A typified element is an element of the GUI (Select, Multiselect etc). Magento has custom typified elements with a special logic, for example: Customized Select, Suggest Dropdown, Store View Selector. Typified elements are often used as elements of a form or a grid.\n\nFunctional Testing Framework (FTF) enables you to test any typified element.\n\n\n\nThis example shows the optgroup typified element. You can use the \\Magento\\Mtf\\Client\\Element\\OptgroupselectElement class to test it.\n\nThis topic discusses how to create classes for a typified element and to use them in tests.\n\nStructure\n\nGeneral\n\nA typified element class in the FTF contains methods to be used in the test to manipulate typified elements in the Magento application. You can extend a basic class or a Magento class to cover your typified element.\n\n\n  The most important methods are setValue() and getValue(). These methods are required when you work with a form.\n\n\nClasses and relations with UI\n\nThere are two types of typified elements: default typified elements and Magento custom typified elements.\n\n\n  \n    Default typified elements are the web elements that are typically used in a web application\n  \n  \n    Magento custom typified elements are the web elements that are specific to the Magento application\n  \n\n\nDefault typified elements\n\nDefault typified elements are stored in the &lt;magento2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/Magento/Mtf/Client/Element directory.\n\nA root class for a typified element is the \\Magento\\Mtf\\Client\\Element\\SimpleElement class. This class implements ElementInterface which contains methods such as click(), doubleClick(), isVisible(), setValue(), getValue(), getText(), find(), dragAndDrop(), getElements() etc.\n\n\n  \n    \n      UI element\n      FTF class\n      Notes\n    \n  \n  \n    \n      &lt;input type=\"checkbox\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\CheckboxElement\n      Extends SimpleElement\n    \n    \n      &lt;select multiple /&gt;\n      \\Magento\\Mtf\\Client\\Element\\MultiselectElement\n      Extends SelectElement\n    \n    \n      &lt;input type=\"radio\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\RadiobuttonElement\n      Extends SimpleElement\n    \n    \n      &lt;select /&gt;\n      \\Magento\\Mtf\\Client\\Element\\SelectElement\n      Extends SimpleElement\n    \n    \n      &lt;select multiple /&gt;\n      \\Magento\\Mtf\\Client\\Element\\StrictmultiselectElement\n      Extends MultiselectElement. setValue() sets the exact value, as opposed to MultiselectElement.\n    \n    \n      &lt;select /&gt;\n      \\Magento\\Mtf\\Client\\Element\\StrictselectElement\n      Extends SelectElement. setValue() sets the exact value, as opposed to SelectElement.\n    \n  \n\n\nMagento custom typified elements\n\nMagento custom typified elements are stored in the &lt;magento2_root_dir&gt;/dev/tests/functional/lib/Magento/Mtf/Client/Element directory.\n\n\n  \n    \n      UI element\n      FTF class\n      Notes\n    \n  \n  \n    \n      &lt;div class=\"rule-tree\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\ConditionsElement\n      Extends SimpleElement\n    \n    \n      &lt;div id=\"ui-datepicker-div\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\DatepickerElement\n      Extends SimpleElement\n    \n    \n      &lt;div class=\"action-select admin__action-multiselect\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\DropdownmultiselectElement\n      Extends MultiselectElement\n    \n    \n      &lt;div class=\"search-global\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\GlobalsearchElement\n      Extends SimpleElement\n    \n    \n      &lt;div class=\"tree x-tree jstree\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\JquerytreeElement\n      Extends Tree\n    \n    \n      &lt;div class=\"store-switcher /&gt;\n      \\Magento\\Mtf\\Client\\Element\\LiselectstoreElement\n      Extends SimpleElement\n    \n    \n      &lt;select class=\"admin__control-multiselect\"&gt;     &lt;option /&gt;      &lt;optgroup /&gt;   &lt;/select&gt;\n      \\Magento\\Mtf\\Client\\Element\\MultiselectgrouplistElement\n      Extends MultiselectElement. Contains option and optgroup elements.\n    \n    \n      &lt;section class=\"block mselect-list\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\MultiselectlistElement\n      Extends MultiselectElement\n    \n    \n      &lt;div class=\"mage-suggest\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\MultisuggestElement\n      Extends SuggestElement. Allows multiple selection.\n    \n    \n      &lt;select&gt;         &lt;optgroup /&gt;      &lt;optgroup /&gt;   &lt;/select&gt;\n      \\Magento\\Mtf\\Client\\Element\\OptgroupselectElement\n      Extends SelectElement. Contains optgroup elements.\n    \n    \n      &lt;select&gt;       &lt;option /&gt;      &lt;optgroup /&gt;   &lt;/select&gt;\n      \\Magento\\Mtf\\Client\\Element\\SelectstoreElement\n      Extends SelectElement. Contains option and optgroup elements.\n    \n    \n      &lt;select class=\"admin__control-select\"&gt;       &lt;optgroup&gt;          &lt;option data-title/&gt;      &lt;/optgroup&gt;  &lt;/select&gt;\n      \\Magento\\Mtf\\Client\\Element\\SimplifiedselectElement\n      Extends SelectElement. Contains option and optgroup elements. option has a data-title attribute.\n    \n    \n      &lt;div class=\"mage-suggest\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\SuggestElement\n      Extends SimpleElement\n    \n    \n      Not available\n      \\Magento\\Mtf\\Client\\Element\\Tree\n      Abstract class\n    \n    \n      &lt;div class=\"tree x-tree\" /&gt;\n      \\Magento\\Mtf\\Client\\Element\\TreeElement\n      Extends Tree\n    \n  \n\n\nHow to create a class for the typified element\n\nStep 1. Create a PHP class in the &lt;magento2_root_dir&gt;/dev/tests/functional/lib/Magento/Mtf/Client/Element directory\n\nIt must be named according to the following naming convention. Two capital letters in the name: the first letter and a capital E in the Element.php. For example: OptgroupselectElement.php.\n\n \n &lt;?php\n\n namespace Magento\\Mtf\\Client\\Element;\n /**\n  * Typified element class for option group selectors.\n  */\n class OptgroupselectElement\n {\n    //\n }\n  \n\nStep 2. Extend your class from the default element or the Magento custom element class\n\nclass OptgroupselectElement extends SelectElement\n\n\nStep 3. Redefine methods of the extended class according to your goals\n\n/**\n * Option group locator\n *\n * @var string\n */\nprotected $optionGroupValue = \".//optgroup[@label = '%s']/option[text() = '%s']\";\n\n/**\n * Select value in dropdown that has option groups\n *\n * @param string $value\n * @return void\n */\npublic function setValue($value)\n{\n    $this-&gt;eventManager-&gt;dispatchEvent(['set_value'], [__METHOD__, $this-&gt;getAbsoluteSelector()]);\n    list($group, $option) = explode('/', $value);\n    $xpath = sprintf($this-&gt;optionGroupValue, $group, $option);\n    $option = $this-&gt;find($xpath, Locator::SELECTOR_XPATH);\n    $option-&gt;click();\n}\n\n\nHow to use\n\nTypified elements are used in the FTF blocks.\nUse a find() method to find an element. This method is declared in the SimpleElement class:\n\n/**\n * Find element using locator in context of current element\n *\n * @param string $selector\n * @param string $strategy [optional]\n * @param null|string $type [optional]\n * @return ElementInterface\n */\npublic function find($selector, $strategy = Locator::SELECTOR_CSS, $type = null)\n{\n    return $this-&gt;driver-&gt;find($selector, $strategy, $type, $this);\n}\n\n\nThe following code is an example of the find() method usage from the \\Magento\\Catalog\\Test\\Block\\Adminhtml\\Category\\Tree block:\n\n/**\n * Check category in category tree\n *\n * @param Category $category\n * @return bool\n */\npublic function isCategoryVisible(Category $category)\n{\n    $categoryPath = $this-&gt;prepareFullCategoryPath($category);\n    $categoryPath = implode('/', $categoryPath);\n    return $this-&gt;_rootElement-&gt;find($this-&gt;treeElement, Locator::SELECTOR_CSS, 'tree')\n        -&gt;isElementVisible($categoryPath);\n}\n\n\nMapping\n\nTypified elements can be used in the form mapping.\n\n\n\nThe following code is a corresponding mapping with the typified element optgroupselect from the previous image:\n\n&lt;mapping strict=\"0\"&gt;\n    &lt;wrapper&gt;store&lt;/wrapper&gt;\n    &lt;fields&gt;\n        &lt;group_id&gt;\n            &lt;input&gt;optgroupselect&lt;/input&gt;\n        &lt;/group_id&gt;\n        &lt;name /&gt;\n        &lt;code /&gt;\n        &lt;is_active&gt;\n            &lt;input&gt;select&lt;/input&gt;\n        &lt;/is_active&gt;\n    &lt;/fields&gt;\n&lt;/mapping&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/mtf_entities/mtf_typified-element.html"
    }
    ,
  
    "guides-v2-0-mtf-mtf-update-html": {
      "title": "Update the Functional Testing Framework",
      "content": "Two types of updates are available.\n\n\n  Install a new version of the Functional Testing Framework\n\n\n\nUse this type of update if the version of the Functional Testing Framework in &lt;magento2&gt;/dev/tests/functional/composer.json and last version in &lt;magento2&gt;/dev/tests/functional/vendor/magento/mtf/CHANGELOG.md are different. For example, when you updated Magento.\n\n\n\n  Update components from dependencies in &lt;magento2&gt;/dev/tests/functional/composer.json\n\n\n\nUse this type of update if you want to update dependent software from composer.json, or changed composer.json dependencies.\n\n\nInstall a new version of the Functional Testing Framework\n\nStep 1.    To avoid conflicts with the previous version, remove directory &lt;magento2_root_dir&gt;/dev/tests/functional/generate.\n\nStep 2.    Remove file &lt;magento2_root_dir&gt;/dev/tests/functional/composer.lock.\n\n\n  Why: Composer reads dependencies from composer.lock instead of reading composer.json. File composer.lock currently is not maintained.\n\n\nStep 3.    Perform and check installation.\n\nUpdate components from dependencies in composer.json\n\nEnter in terminal:\n\ncd &lt;magento2_root_dir&gt;/dev/tests/functional/\ncomposer update\n\n",
      "url": "/guides/v2.0/mtf/mtf_update.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-master-multi-master-html": {
      "title": "Split database performance solution (Magento Commerce only)",
      "content": "Overview of the split database solution\nThis feature is available in Magento Commerce only.\n\nMagento Commerce offers number of scalability advantages, including the ability to use three separate master databases for different functional areas of the Magento application.\n\nCheckout, orders, and product data can all each use a separate master databases that you can optionally replicate. This separation independently scales load from website checkouts, order management activities, website browsing, and merchandising activities, depending on your needs.  These changes provide considerable flexibility in how the database tier can be scaled.\n\n\n  Magento Commerce (Cloud) does not support this feature at this time.\n\n\nThe ResourceConnections class provides the unified MySQL database connection to the Magento application. For queries to the master databases, we implement the Command Query Responsibility Segregation (CQRS) database pattern. This pattern handles the logic for routing the read and write queries to the appropriate databases. Developers do not need to know which configuration is being used and there are no separate read and write database connections.\n\nIf you set up optional database replication, you get the following advantages:\n\n\n  Data backup\n  Data analysis without affecting the master database\n  Scalability\n\n\nMySQL databases replicate asynchronously, which means slaves do not need to be connected permanently to receive updates from the master.\n\nThe following figure shows how this feature works.\n\n\n\nIn Magento Open Source, only one master database is used.\n\nMagento Commerce uses three master databases and a configurable number of slave databases for replication. Magento Commerce has a single interface for database connections, resulting in faster performance and better scalability.\n\nConfiguration options\nBecause of the way the split database performance solution is designed, your custom code and installed components cannot do any of the following:\n\n\n  Write directly to the database (instead, you must use the Magento Commerce database interface)\n  Use JOINs that affect the sales or quote databases\n  Use foreign keys to tables in the checkout, sales, or main databases\n\n\n\n    Contact component developers to verify whether or not their components do any of the preceding. If so, you must choose only one of the following:\n    Ask the component developers to update their components.\n    \tUse the components as-is without the split database solution.\n    \tRemove the components so you can use the split database solution.\n\n\nThis also means you can either:\n\n\n  \n    Configure the split database solution before putting Magento into production.\n\n    We recommend configuring split databases as soon as possible after you install the Magento software.\n  \n  \n    Manually configure the split database solution.\n\n    You must perform this task if you’ve already installed components or if Magento is already in production. (Do not update a production system; make the updates in a development system and synchronize the changes after you’ve tested them.)\n  \n\n\n\n    You must back up the two additional database instances manually. Magento backs up only the main database instance. The 'magento setup:backup --db command and Magento Admin options do not back up the additional tables.\n\n\nPrerequisites\nThe split database requires you to set up three MySQL master databases on any host (all three on the Magento server, each database on a separate server, and so on). These are the master databases and they’re used as follows:\n\n\n  One master database for checkout tables\n  One master database for sales tables (also referred to as Order Management System, or OMS, tales)\n  One master database for the remainder of the Magento 2 application tables\n\n\nIn addition, you can optionally set up any number of slave databases that serve as load balancers and backups.\n\nThis guide discusses how to set up the master databases only. We provide sample configurations and references for you to set up slave databases if you wish.\n\nIn this guide, the three master databases are named:\n\n\n  magento_quote\n  magento_sales\n  magento\n\n\n(You can name your databases anything you wish.)\n\nNext step\n\n\n  If you have not installed components or put Magento into production: Automatically configure master databases\n  If Magento is already in production or if you’ve already installed components: Manually configure master databases\n\n",
      "url": "/guides/v2.0/config-guide/multi-master/multi-master.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-master-multi-master-manual-html": {
      "title": "Manually configure master databases",
      "content": "Overview of manual split database configuration\nIf the Magento application is already in production or if you’ve already installed custom code or components, you might need to configure split databases manually. Before continuing, contact Magento Support to see if this is necessary in your case.\n\nManually splitting databases involves:\n\n\n  Create the checkout and order management system (OMS) databases\n  \n    Run a series of SQL scripts that:\n\n    \n      Drop foreign keys\n      Back up sales and quote database tables\n      Move tables from your main Magento database to the sales and quote databases\n    \n  \n\n\n\n    If any custom code uses JOINs with tables in the sales and quote databases, you cannot use split databases. If in doubt, contact the authors of any custom code or extensions to make sure their code does not use JOINs.\n\n\nThis topic uses the following naming conventions:\n\n\n  The main Magento database name is magento and its user name and password are both magento\n  \n    The quote database name is magento_quote and its user name and password are both magento_quote\n\n    The quote database is also referred to as the checkout database.\n  \n  \n    The sales database name is magento_sales and its user name and password are both magento_sales\n\n    The sales database is also referred to as the order management system (OMS) database.\n  \n\n\n\n\n  This guide assumes all three databases are on the same host as the Magento application. However, the choice of where to locate the databases and what they're named is up to you. We hope our examples make the instructions easier to follow.\n\n\nBack up the Magento system\nWe strongly recommend you back up your current database and file system so you can restore it later in the event of issues during the process.\n\nClick to show how to back up Magento To back up your system:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands:\n\n    magento setup:backup --code --media --db\n    \n  \n  Continue with the next section.\n\n\n\nSet up additional master databases\nThis section discusses how to create database instances for sales and quote tables.\n\nClick to show how to create database instances Create sales and OMS quote databases as follows:\n\n\n  Log in to your database server as any user.\n  \n    Enter the following command to get to a MySQL command prompt:\n\n    mysql -u root -p\n    \n  \n  Enter the MySQL root user’s password when prompted.\n  \n    Enter the following commands in the order shown to create database instances named magento_quote and magento_sales with the same user names and passwords:\n\n    create database magento_quote;\nGRANT ALL ON magento_quote.* TO magento_quote@localhost IDENTIFIED BY 'magento_quote';\n\ncreate database magento_sales;\nGRANT ALL ON magento_sales.* TO magento_sales@localhost IDENTIFIED BY 'magento_sales';\n    \n  \n  \n    Enter exit to quit the command prompt.\n  \n  \n    Verify the databases, one at a time:\n\n    quote database:\n\n    mysql -u magento_quote -p\nexit\n    \n\n    Order management database:\n\n    mysql -u magento_sales -p\nexit\n    \n\n    If the MySQL monitor displays, you created the database properly. If an error displays, repeat the preceding commands.\n  \n  Continue with the next section.\n\n\n\nConfigure the sales database\nThis section discusses how to create and run SQL scripts that alter quote database tables and back up data from those tables.\n\nSales database table names start with:\n\n\n  salesrule_\n  sales_\n  magento_sales_\n  The magento_customercustomattributes_sales_flat_order table is also affected\n\n\n\n  This section contains scripts with specific database table names. If you've performed customizations or if you want to see a complete list of tables before you perform actions on them, see Reference scripts.\n\n\nFor more information, see:\n\n\n  Create sales database SQL scripts\n  Back up sales data\n\n\nCreate sales database SQL scripts\n\nClick to create and run sales database SQL scripts Create the following SQL scripts in a location that is accessible by the user as whom you log in to your Magento server. For example, if you log in or run commands as root, you can create the scripts in the /root/sql-scripts directory.\n\nRemove foreign keys\nThis script removes foreign keys that refer to non-sales tables from the sales database.\n\nCreate the following script and give it a name like 1_foreign-sales.sql. Replace &lt;your main Magento DB name&gt; with the name of your Magento database.\n\nuse &lt;your main Magento DB name&gt;;\nALTER TABLE salesrule_coupon_aggregated_order DROP FOREIGN KEY SALESRULE_COUPON_AGGREGATED_ORDER_STORE_ID_STORE_STORE_ID;\nALTER TABLE salesrule_coupon_aggregated DROP FOREIGN KEY SALESRULE_COUPON_AGGREGATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE salesrule_coupon_aggregated_updated DROP FOREIGN KEY SALESRULE_COUPON_AGGREGATED_UPDATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE salesrule_coupon_usage DROP FOREIGN KEY SALESRULE_COUPON_USAGE_CUSTOMER_ID_CUSTOMER_ENTITY_ENTITY_ID;\nALTER TABLE salesrule_customer_group DROP FOREIGN KEY SALESRULE_CSTR_GROUP_CSTR_GROUP_ID_CSTR_GROUP_CSTR_GROUP_ID;\nALTER TABLE salesrule_customer DROP FOREIGN KEY SALESRULE_CUSTOMER_CUSTOMER_ID_CUSTOMER_ENTITY_ENTITY_ID;\nALTER TABLE salesrule_label DROP FOREIGN KEY SALESRULE_LABEL_STORE_ID_STORE_STORE_ID;\nALTER TABLE salesrule_product_attribute DROP FOREIGN KEY SALESRULE_PRD_ATTR_ATTR_ID_EAV_ATTR_ATTR_ID;\nALTER TABLE salesrule_product_attribute DROP FOREIGN KEY SALESRULE_PRD_ATTR_CSTR_GROUP_ID_CSTR_GROUP_CSTR_GROUP_ID;\nALTER TABLE salesrule_product_attribute DROP FOREIGN KEY SALESRULE_PRODUCT_ATTRIBUTE_WEBSITE_ID_STORE_WEBSITE_WEBSITE_ID;\nALTER TABLE salesrule_website DROP FOREIGN KEY SALESRULE_WEBSITE_WEBSITE_ID_STORE_WEBSITE_WEBSITE_ID;\nALTER TABLE sales_bestsellers_aggregated_daily DROP FOREIGN KEY SALES_BESTSELLERS_AGGRED_DAILY_PRD_ID_CAT_PRD_ENTT_ENTT_ID;\nALTER TABLE sales_bestsellers_aggregated_monthly DROP FOREIGN KEY SALES_BESTSELLERS_AGGRED_MONTHLY_PRD_ID_CAT_PRD_ENTT_ENTT_ID;\nALTER TABLE sales_bestsellers_aggregated_yearly DROP FOREIGN KEY SALES_BESTSELLERS_AGGRED_YEARLY_PRD_ID_CAT_PRD_ENTT_ENTT_ID;\nALTER TABLE sales_bestsellers_aggregated_daily DROP FOREIGN KEY SALES_BESTSELLERS_AGGREGATED_DAILY_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_bestsellers_aggregated_monthly DROP FOREIGN KEY SALES_BESTSELLERS_AGGREGATED_MONTHLY_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_bestsellers_aggregated_yearly DROP FOREIGN KEY SALES_BESTSELLERS_AGGREGATED_YEARLY_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_creditmemo_grid DROP FOREIGN KEY SALES_CREDITMEMO_GRID_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_creditmemo DROP FOREIGN KEY SALES_CREDITMEMO_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_invoiced_aggregated_order DROP FOREIGN KEY SALES_INVOICED_AGGREGATED_ORDER_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_invoiced_aggregated DROP FOREIGN KEY SALES_INVOICED_AGGREGATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_invoice_grid DROP FOREIGN KEY SALES_INVOICE_GRID_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_invoice DROP FOREIGN KEY SALES_INVOICE_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order_aggregated_created DROP FOREIGN KEY SALES_ORDER_AGGREGATED_CREATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order_aggregated_updated DROP FOREIGN KEY SALES_ORDER_AGGREGATED_UPDATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order DROP FOREIGN KEY SALES_ORDER_CUSTOMER_ID_CUSTOMER_ENTITY_ENTITY_ID;\nALTER TABLE sales_order_grid DROP FOREIGN KEY SALES_ORDER_GRID_CUSTOMER_ID_CUSTOMER_ENTITY_ENTITY_ID;\nALTER TABLE sales_order_grid DROP FOREIGN KEY SALES_ORDER_GRID_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order_item DROP FOREIGN KEY SALES_ORDER_ITEM_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order_status_label DROP FOREIGN KEY SALES_ORDER_STATUS_LABEL_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_order DROP FOREIGN KEY SALES_ORDER_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_refunded_aggregated_order DROP FOREIGN KEY SALES_REFUNDED_AGGREGATED_ORDER_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_refunded_aggregated DROP FOREIGN KEY SALES_REFUNDED_AGGREGATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_shipment_grid DROP FOREIGN KEY SALES_SHIPMENT_GRID_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_shipment DROP FOREIGN KEY SALES_SHIPMENT_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_shipping_aggregated_order DROP FOREIGN KEY SALES_SHIPPING_AGGREGATED_ORDER_STORE_ID_STORE_STORE_ID;\nALTER TABLE sales_shipping_aggregated DROP FOREIGN KEY SALES_SHIPPING_AGGREGATED_STORE_ID_STORE_STORE_ID;\nALTER TABLE magento_sales_creditmemo_grid_archive DROP FOREIGN KEY MAGENTO_SALES_CREDITMEMO_GRID_ARCHIVE_STORE_ID_STORE_STORE_ID;\nALTER TABLE magento_sales_invoice_grid_archive DROP FOREIGN KEY MAGENTO_SALES_INVOICE_GRID_ARCHIVE_STORE_ID_STORE_STORE_ID;\nALTER TABLE magento_sales_order_grid_archive DROP FOREIGN KEY MAGENTO_SALES_ORDER_GRID_ARCHIVE_CSTR_ID_CSTR_ENTT_ENTT_ID;\nALTER TABLE magento_sales_order_grid_archive DROP FOREIGN KEY MAGENTO_SALES_ORDER_GRID_ARCHIVE_STORE_ID_STORE_STORE_ID;\nALTER TABLE magento_sales_shipment_grid_archive DROP FOREIGN KEY MAGENTO_SALES_SHIPMENT_GRID_ARCHIVE_STORE_ID_STORE_STORE_ID;\nALTER TABLE downloadable_link_purchased_item DROP FOREIGN KEY DL_LNK_PURCHASED_ITEM_ORDER_ITEM_ID_SALES_ORDER_ITEM_ITEM_ID;\nALTER TABLE downloadable_link_purchased DROP FOREIGN KEY DOWNLOADABLE_LINK_PURCHASED_ORDER_ID_SALES_ORDER_ENTITY_ID;\nALTER TABLE paypal_billing_agreement_order DROP FOREIGN KEY PAYPAL_BILLING_AGREEMENT_ORDER_ORDER_ID_SALES_ORDER_ENTITY_ID;\n\nConfigure the sales database\nRun the preceding script:\n\n\n  \n    Log in to your MySQL database as the root or administrative user:\n\n    mysql -u root -p\n    \n  \n  \n    At the mysql&gt; prompt, run the script as follows:\n\n    source &lt;path&gt;/&lt;script&gt;.sql\n    \n\n    For example,\n\n    source /root/sql-scripts/1_foreign-sales.sql\n    \n  \n  \n    After the script run, enter exit.\n  \n\n\n\nBack up sales data\nThis section discusses how to back up sales tables from the main Magento database so you can restore them in the separate sales database.\n\nClick to back up and restore sales data If you’re currently at the mysql&gt; prompt, enter exit to return to the command shell.\n\nRun the following mysqldump commands, one at a time, from the command shell. In each, substitute the following:\n\n\n  &lt;your database root user name&gt; with the name of your database root user\n  &lt;your database root user password&gt; with the user’s password\n  &lt;your main magento DB name&gt; with the name of your Magento database\n  &lt;path&gt; with a writable file system path\n\n\nScript 1\n\nmysqldump -u &lt;your database root user name&gt; -p &lt;your main magento DB name&gt; sales_bestsellers_aggregated_daily sales_bestsellers_aggregated_monthly sales_bestsellers_aggregated_yearly sales_creditmemo sales_creditmemo_comment sales_creditmemo_grid sales_creditmemo_item sales_invoice sales_invoice_comment sales_invoice_grid sales_invoice_item sales_invoiced_aggregated sales_invoiced_aggregated_order sales_order sales_order_address sales_order_aggregated_created sales_order_aggregated_updated sales_order_grid sales_order_item sales_order_payment sales_order_status sales_order_status_history sales_order_status_label sales_order_status_state sales_order_tax sales_order_tax_item sales_payment_transaction sales_refunded_aggregated sales_refunded_aggregated_order sales_sequence_meta sales_sequence_profile sales_shipment sales_shipment_comment sales_shipment_grid sales_shipment_item sales_shipment_track sales_shipping_aggregated sales_shipping_aggregated_order &gt; /&lt;path&gt;/sales.sql\n\nScript 2\n\nmysqldump -u &lt;your database root user name&gt; -p &lt;your main magento DB name&gt; magento_sales_creditmemo_grid_archive magento_sales_invoice_grid_archive magento_sales_order_grid_archive magento_sales_shipment_grid_archive &gt; /&lt;path&gt;/salesarchive.sql\n\nScript 3\n\nmysqldump -u &lt;your database root user name&gt; -p &lt;your main magento DB name&gt; magento_customercustomattributes_sales_flat_order magento_customercustomattributes_sales_flat_order_address &gt; /&lt;path&gt;/customercustomattributes.sql\n\nScript 4\n\nmysqldump -u &lt;your database root user name&gt; -p &lt;your main magento DB name&gt; sequence_creditmemo_0 sequence_creditmemo_1 sequence_invoice_0 sequence_invoice_1 sequence_order_0 sequence_order_1 sequence_rma_item_0 sequence_rma_item_1 sequence_shipment_0 sequence_shipment_1 &gt; /&lt;path&gt;/sequence.sql\n\nRestore sales data\nThis script restores sales data in your quote database.\n\nNDB requirement\nIf you are using a Network Database (NDB) cluster:\n\n\n  \n    Convert tables from InnoDb to NDB type in dump files:\n\n    sed -ei 's/InnoDb/NDB/' &lt;file name&gt;.sql\n    \n  \n  \n    Remove rows with a FULLTEXT key from dumps because NDB tables don’t support FULLTEXT.\n  \n\n\nRestore the data\nRun the following commands:\n\nmysql -u &lt;root user name&gt; -p &lt;your sales DB name&gt; &lt; /&lt;path&gt;/sales.sql\nmysql -u &lt;root user name&gt; -p &lt;your sales DB name&gt; &lt; /&lt;path&gt;/sequence.sql\nmysql -u &lt;root user name&gt; -p &lt;your sales DB name&gt; &lt; /&lt;path&gt;/salesarchive.sql\nmysql -u &lt;root user name&gt; -p &lt;your sales DB name&gt; &lt; /&lt;path&gt;/customercustomattributes.sql\n\nwhere\n\n\n  \n    &lt;your sales DB name&gt; with the name of your sales database.\n\n    In this topic, the sample database name is magento_sales.\n  \n  &lt;root user name&gt; with your MySQL root user name\n  &lt;root user password&gt; with the user’s password\n  Verify the location of the backup files you created earlier (for example, /var/sales.sql)\n\n\n\nConfigure the quote database\nThis section discusses tasks required to drop foreign keys from sales database tables and move tables to the sales database.\n\n\n  This section contains scripts with specific database table names. If you've performed customizations or if you want to see a complete list of tables before you perform actions on them, see Reference scripts.\n\n\nQuote database table names start with quote. The magento_customercustomattributes_sales_flat_quote and magento_customercustomattributes_sales_flat_quote_address tables are also affected\n\nDrop foreign keys from quote tables\nThis script removes foreign keys that refer to non-quote tables from quote tables. Replace  with the name of your Magento database.\n\nClick to drop foreign keys from quote tables Create the following script and give it a name like 2_foreign-key-quote.sql:\n\nuse &lt;your Magento main DB name&gt;;\nALTER TABLE quote DROP FOREIGN KEY QUOTE_STORE_ID_STORE_STORE_ID;\nALTER TABLE quote_item DROP FOREIGN KEY QUOTE_ITEM_PRODUCT_ID_CATALOG_PRODUCT_ENTITY_ENTITY_ID;\nALTER TABLE quote_item DROP FOREIGN KEY QUOTE_ITEM_STORE_ID_STORE_STORE_ID;\n\nRun the script as follows:\n\n\n  \n    Log in to your MySQL database as the root or administrative user:\n\n    mysql -u root -p\n    \n  \n  \n    At the mysql&gt; prompt, run the script as follows:\nit`.\n    source /\n\n    source /root/sql-scripts/2_foreign-key-quote.sql\n    \n  \n  \n    After the script runs, enter exit.\n  \n\n\n\nBack up quote tables\nThis section discusses how to back up quote tables from the main Magento database and restore them in your quote database.\n\nClick to back up and restore quote tables Run the following command from a command prompt:\n\nmysqldump -u &lt;your database root user name&gt; -p &lt;your main Magento DB name&gt; magento_customercustomattributes_sales_flat_quote magento_customercustomattributes_sales_flat_quote_address quote quote_address quote_address_item quote_item quote_item_option quote_payment quote_shipping_rate quote_id_mask &gt; /&lt;path&gt;/quote.sql;\n\n\nNDB requirement\nIf you are using a Network Database (NDB) cluster:\n\n\n  \n    Convert tables from InnoDb to NDB type in dump files:\n\n    sed -ei 's/InnoDb/NDB/' &lt;file name&gt;.sql\n    \n  \n  \n    Remove rows with a FULLTEXT key from dumps because NDB tables don’t support FULLTEXT.\n  \n\n\nRestore tables to the quote database\n\nmysql -u root -p magento_quote &lt; /&lt;path&gt;/quote.sql\n\n\n\nDrop sales and quote tables from the Magento database\nThis script sales and quote tables from the Magento database. Replace  with the name of your Magento database.\n\nClick to drop sales and quote tables Create the following script and give it a name like 3_drop-tables.sql:\n\nuse &lt;your Magento main DB name&gt;;\nSET foreign_key_checks = 0;\nDROP TABLE magento_customercustomattributes_sales_flat_quote; \nDROP TABLE magento_customercustomattributes_sales_flat_quote_address;\nDROP TABLE quote;\nDROP TABLE quote_address;\nDROP TABLE quote_address_item;\nDROP TABLE quote_item;\nDROP TABLE quote_item_option;\nDROP TABLE quote_payment;\nDROP TABLE quote_shipping_rate;\nDROP TABLE quote_id_mask;\nDROP TABLE sales_bestsellers_aggregated_daily;                        \nDROP TABLE sales_bestsellers_aggregated_monthly;                      \nDROP TABLE sales_bestsellers_aggregated_yearly;                       \nDROP TABLE sales_creditmemo;                                          \nDROP TABLE sales_creditmemo_comment;                                  \nDROP TABLE sales_creditmemo_grid;                                     \nDROP TABLE sales_creditmemo_item;                                     \nDROP TABLE sales_invoice;                                             \nDROP TABLE sales_invoice_comment;                                     \nDROP TABLE sales_invoice_grid;                                        \nDROP TABLE sales_invoice_item;                                        \nDROP TABLE sales_invoiced_aggregated;                                 \nDROP TABLE sales_invoiced_aggregated_order;                           \nDROP TABLE sales_order;                                               \nDROP TABLE sales_order_address;                                       \nDROP TABLE sales_order_aggregated_created;                            \nDROP TABLE sales_order_aggregated_updated;                            \nDROP TABLE sales_order_grid;                                          \nDROP TABLE sales_order_item;                                          \nDROP TABLE sales_order_payment;                                       \nDROP TABLE sales_order_status;                                        \nDROP TABLE sales_order_status_history;                                \nDROP TABLE sales_order_status_label;                                  \nDROP TABLE sales_order_status_state;                                  \nDROP TABLE sales_order_tax;                                           \nDROP TABLE sales_order_tax_item;                                      \nDROP TABLE sales_payment_transaction;                                 \nDROP TABLE sales_refunded_aggregated;                                 \nDROP TABLE sales_refunded_aggregated_order;                           \nDROP TABLE sales_sequence_meta;                                       \nDROP TABLE sales_sequence_profile;                                    \nDROP TABLE sales_shipment;                                            \nDROP TABLE sales_shipment_comment;                                    \nDROP TABLE sales_shipment_grid;                                       \nDROP TABLE sales_shipment_item;                                       \nDROP TABLE sales_shipment_track;                                      \nDROP TABLE sales_shipping_aggregated;                                 \nDROP TABLE sales_shipping_aggregated_order;                           \nDROP TABLE magento_sales_creditmemo_grid_archive;                     \nDROP TABLE magento_sales_invoice_grid_archive;                        \nDROP TABLE magento_sales_order_grid_archive;                          \nDROP TABLE magento_sales_shipment_grid_archive;                       \nDROP TABLE magento_customercustomattributes_sales_flat_order;         \nDROP TABLE magento_customercustomattributes_sales_flat_order_address; \nDROP TABLE sequence_creditmemo_0;                                     \nDROP TABLE sequence_creditmemo_1;                                     \nDROP TABLE sequence_invoice_0;                                        \nDROP TABLE sequence_invoice_1;                                        \nDROP TABLE sequence_order_0;                                          \nDROP TABLE sequence_order_1;                                          \nDROP TABLE sequence_rma_item_0;                                       \nDROP TABLE sequence_rma_item_1;                                       \nDROP TABLE sequence_shipment_0;                                       \nDROP TABLE sequence_shipment_1;     \nSET foreign_key_checks = 1;\n\nRun the script as follows:\n\n\n  \n    Log in to your MySQL database as the root or administrative user:\n\n    mysql -u root -p\n    \n  \n  \n    At the mysql&gt; prompt, run the script as follows:\n\n    source &lt;path&gt;/&lt;script&gt;.sql\n    \n\n    For example,\n\n    source /root/sql-scripts/3_drop-tables.sql\n    \n  \n  \n    After the script runs, enter exit.\n  \n\n\n\nUpdate your deployment configuration\nThe final step in manually splitting databases is to add connection and resource information to Magento’s deployment configuration, env.php.\n\nClick to update the Magento deployment configuration \n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Back up your deployment configuration:\n\n    cp &lt;your Magento install dir&gt;/app/etc/env.php &lt;your Magento install dir&gt;/app/etc/env.php.orig\n    \n  \n  Open &lt;your Magento install dir&gt;/app/etc/env.php in a text editor and update it using the guidelines discussed in the following sections.\n\n\nUpdate database connections\n\nLocate the block starting with 'default' (under 'connection') and add 'checkout' and 'sales' sections. Replace sample values with values appropriate for your site.\n\n 'default' =&gt; \n      array (\n        'host' =&gt; 'localhost',\n        'dbname' =&gt; 'magento',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n      'checkout' =&gt; \n      array (\n        'host' =&gt; 'localhost',\n        'dbname' =&gt; 'magento_quote',\n        'username' =&gt; 'magento_quote',\n        'password' =&gt; 'magento_quote',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n      'sales' =&gt; \n      array (\n        'host' =&gt; 'localhost',\n        'dbname' =&gt; 'magento_sales',\n        'username' =&gt; 'magento_sales',\n        'password' =&gt; 'magento_sales',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n    ),\n\nUpdate resources\nLocate the block starting with 'resource' and add 'checkout' and 'sales' sections to it as follows:\n\n'resource' =&gt; \n  array (\n    'default_setup' =&gt; \n    array (\n      'connection' =&gt; 'default',\n    ),\n    'checkout' =&gt; \n    array (\n      'connection' =&gt; 'checkout',\n    ),\n    'sales' =&gt; \n    array (\n      'connection' =&gt; 'sales',\n    ),\n\n\nReference scripts\nThis section provides scripts you can run that print a complete list of affected tables without performing any actions on them. You can use them to see what tables are affected before you manually split databases, which can be useful if you use extensions that customize the Magento database schema.\n\nClick to view reference SQL scripts To use these scripts:\n\n\n  Create a .sql script with the contents of each script in this section.\n  \n    In each script, replace &lt;your main magento DB name&gt; with the name of your Magento database.\n\n    In this topic, the sample database name is magento.\n  \n  Run each script from the mysql&gt; prompt as source &lt;script name&gt;\n  Examine the output.\n  Copy the result of each script to another .sql script, removing the pipe characters (|).\n  \n    Run each script from the mysql&gt; prompt as source &lt;script name&gt;.\n\n    Running this second script performs the actions in your main Magento database.\n  \n\n\nRemove foreign keys (sales tables)\nThis script is the removes foreign keys that refer to non-sales tables from the sales database.\n\nselect concat(\n    'ALTER TABLE ',\n    replace(for_name, '&lt;your main magento DB name&gt;/', ''),\n    ' DROP FOREIGN KEY ',\n    replace(id, '&lt;your main magento DB name&gt;/', ''),\n    ';'\n    )\nfrom information_schema.INNODB_SYS_FOREIGN\nwhere for_name like  '&lt;your main magento DB name&gt;/|sales_%' escape '|'\n    and ref_name not like  '&lt;your main magento DB name&gt;/|sales_%' escape '|'\nunion all\nselect concat(\n    'ALTER TABLE ',\n    replace(for_name, '&lt;your main magento DB name&gt;/', ''),\n    ' DROP FOREIGN KEY ',\n    replace(id, '&lt;your main magento DB name&gt;/', ''),\n    ';'\n    )\nfrom information_schema.INNODB_SYS_FOREIGN\nwhere for_name like  '&lt;your main magento DB name&gt;/|magento_sales|_%' escape '|'\n    and ref_name not like  '&lt;your main magento DB name&gt;/|sales|_%' escape '|'\n;\n\nRemove foreign keys (quote tables)\nThis script removes foreign keys that refer to non-quote tables from quote tables.\n\nselect concat(\n    'ALTER TABLE ',\n    replace(for_name, '&lt;your main magento DB name&gt;/', ''),\n    ' DROP FOREIGN KEY ',\n    replace(id, '&lt;your main magento DB name&gt;/', ''),\n    ';'\n    )\nfrom information_schema.INNODB_SYS_FOREIGN\nwhere for_name like '&lt;your main magento DB name&gt;/%'\n    and ref_name like '&lt;your main magento DB name&gt;/sales\\_%'\nunion all\nselect concat(\n    'ALTER TABLE ',\n    replace(for_name, '&lt;your main magento DB name&gt;/', ''),\n    ' DROP FOREIGN KEY ',\n    replace(id, '&lt;your main magento DB name&gt;/', ''),\n    ';'\n    )\nfrom information_schema.INNODB_SYS_FOREIGN\nwhere for_name like '&lt;your main magento DB name&gt;/%'\n    and ref_name like '&lt;your main magento DB name&gt;/magento_sales\\_%'\nunion all\nselect concat(\n    'ALTER TABLE ',\n    replace(for_name, '&lt;your main magento DB name&gt;/', ''),\n    ' DROP FOREIGN KEY ',\n    replace(id, '&lt;your main magento DB name&gt;/', ''),\n    ';'\n    )\nfrom information_schema.INNODB_SYS_FOREIGN\nwhere for_name like '&lt;your main magento DB name&gt;/%'\n    and ref_name like '&lt;your main magento DB name&gt;/magento_customercustomattributes\\_%'\n;\n\nDrop sales tables\nThis script drops sales tables from the Magento database.\n\nuse &lt;your main magento DB name&gt;;\nselect ' SET foreign_key_checks = 0;' as querytext\nunion all\nselect\n    concat('DROP TABLE IF EXISTS ' , table_name, ';')\nfrom information_schema.tables\nwhere table_schema = '&lt;your main magento DB name&gt;'\nand table_name like 'sales/_%' escape '/'\nunion all\nselect\n    concat('DROP TABLE IF EXISTS ' , table_name, ';')\nfrom information_schema.tables\nwhere table_schema = '&lt;your main magento DB name&gt;'\nand table_name like 'magento_sales/_%' escape '/'\nunion all\nselect\n    concat('DROP TABLE IF EXISTS ' , table_name, ';')\nfrom information_schema.tables\nwhere table_schema = '&lt;your main magento DB name&gt;'\nand table_name like 'magento_customercustomattributes_sales_flat_order%' escape '/'\nunion all\nselect\n    concat('DROP TABLE IF EXISTS ' , table_name, ';')\nfrom information_schema.tables\nwhere table_schema = '&lt;your main magento DB name&gt;'\nand table_name like 'sequence/_%' escape '/'\nunion all\nselect 'SET foreign_key_checks = 1;';\n\nDrop quote tables\nDrop all tables that start with quote_.\n\n\nNext step\nVerify split databases\n",
      "url": "/guides/v2.0/config-guide/multi-master/multi-master_manual.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-master-multi-master-masterdb-html": {
      "title": "Automatically configure master databases",
      "content": "Overview of master databases\nThis topic discusses how to get started with the split database solution by:\n\n\n  Installing Magento Commerce with a single master database (named magento)\n  Creating two additional master databases for checkout and OMS (named magento_quote and magento_sales)\n  Configuring Magento Commerce to use the checkout and sales databases\n\n\n\n\n  This guide assumes all three databases are on the same host as the Magento application and that they're named magento, magento_quote, and magento_sales. However, the choice of where to locate the databases and what they're named is up to you. We hope our examples make the instructions easier to follow.\n\n\nInstall the Magento Commerce software\nYou can enable split databases at any time after you install the Magento Commerce software; in other words, you can add split databases to a Magento Commerce system that already has checkout and order data. Use the instructions in the Magento Commerce README or the installation guide to install the Magento Commerce software using a single master database.\n\n\n\n  Set up additional master databases\n  Create checkout and OMS master databases as follows:\n\n  \n    Log in to your database server as any user.\n    \n      Enter the following command to get to a MySQL command prompt:\n\n      mysql -u root -p\n      \n    \n    Enter the MySQL root user’s password when prompted.\n    \n      Enter the following commands in the order shown to create database instances named magento_quote and magento_sales with the same user names and passwords:\n\n      create database magento_quote;\nGRANT ALL ON magento_quote.* TO magento_quote@localhost IDENTIFIED BY 'magento_quote';\n\ncreate database magento_sales;\nGRANT ALL ON magento_sales.* TO magento_sales@localhost IDENTIFIED BY 'magento_sales';\n      \n    \n    \n      Enter exit to quit the command prompt.\n    \n    \n      Verify the databases, one at a time:\n\n      Checkout database:\n\n      mysql -u magento_quote -p\nexit\n      \n\n      Order management database:\n\n      mysql -u magento_sales -p\nexit\n      \n\n      If the MySQL monitor displays, you created the database properly. If an error displays, repeat the preceding commands.\n    \n  \n\n  Configure Magento Commerce to use the master databases\n  After setting up a total of three master databases, use the Magento command line to configure Magento to use them. (The command sets up database connections and distributes tables among the master databases.)\n\n  First steps\n\n  \n\n    \n      \n        Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n        If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n        su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n        \n\n        If the Magento file system owner does not allow logins you can do the following:\n\n        sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n        \n      \n      \n        To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n        Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n        bash shell example for CentOS:\n\n        export PATH=$PATH:/var/www/html/magento2/bin\n        \n      \n    \n\n    \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n    Configure the checkout database\n    Command syntax:\n\n    magento setup:db-schema:split-quote --host=\"&lt;checkout db host or ip&gt;\" --dbname=\"&lt;name&gt;\" --username=\"&lt;checkout db username&gt;\" --password=\"&lt;password&gt;\"\n    \n\n    For example,\n\n    magento setup:db-schema:split-quote --host=\"localhost\" --dbname=\"magento_quote\" --username=\"magento_quote\" --password=\"magento_quote\"\n    \n\n    The following message displays to confirm a successful setup:\n\n    Migration has been finished successfully!\n    \n\n    Configure the OMS database\n    Command syntax:\n\n    magento setup:db-schema:split-sales --host=\"&lt;checkout db host or ip&gt;\" --dbname=\"&lt;name&gt;\" --username=\"&lt;checkout db username&gt;\" --password=\"&lt;password&gt;\"\n    \n\n    For example,\n\n    magento setup:db-schema:split-sales --host=\"localhost\" --dbname=\"magento_sales\" --username=\"magento_sales\" --password=\"magento_sales\"\n    \n\n    The following message displays to confirm a successful setup:\n\n    Migration has been finished successfully!\n    \n\n    Next step\n    Verify split databases\n  \n\n",
      "url": "/guides/v2.0/config-guide/multi-master/multi-master_masterdb.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-master-multi-master-slavedb-html": {
      "title": "Set up optional database replication",
      "content": "Setting up database replication provides the following benefits:\n\n\n  Provides data backup\n  Enables data analysis without affecting the master database\n  Scalability\n\n\nMySQL databases replicate asynchronously, which means slaves do not need to be connected permanently to receive updates from the master.\n\nConfigure database replication\nAn in-depth discussion of database replication is beyond the scope of this guide. To set it up, you can consult a resource like:\n\n\n  MySQL documentation\n  How To Set Up Master Slave Replication in MySQL (digitalocean)\n\n\nMagento provides sample MySQL configurations for your slave databases. A simple configuration is provided with the ResourceConnections class README.md.\n\nThe following is more advanced and is provided for your information only:\n\n\treturn array (\n   //...\n  'db' =&gt;\n  array (\n    'connection' =&gt;\n    array (\n      'indexer' =&gt;\n      array (\n        'host' =&gt; 'default-master-host',\n        'dbname' =&gt; 'magento',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'active' =&gt; '1',\n        'persistent' =&gt; NULL,\n      ),\n      'default' =&gt;\n      array (\n        'host' =&gt; 'default-master-host',\n        'dbname' =&gt; 'magento',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'active' =&gt; '1',\n      ),\n      'checkout' =&gt;\n      array (\n        'host' =&gt; 'checkout-master-host',\n        'dbname' =&gt; 'checkout',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n      'sales' =&gt;\n      array (\n        'host' =&gt; 'sales-master-host',\n        'dbname' =&gt; 'sales',\n        'username' =&gt; 'magento',\n        'password' =&gt; 'magento',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n    ),\n    'slave_connection' =&gt;\n    array (\n      'default' =&gt;\n      array (\n        'host' =&gt; 'default-slave-host',\n        'dbname' =&gt; 'magento',\n        'username' =&gt; 'read_only',\n        'password' =&gt; 'password',\n        'active' =&gt; '1',\n      ),\n      'checkout' =&gt;\n      array (\n        'host' =&gt; 'checkout-slave-host',\n        'dbname' =&gt; 'checkout',\n        'username' =&gt; 'read_only',\n        'password' =&gt; 'password',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n      'sales' =&gt;\n      array (\n        'host' =&gt; 'sales-slave-host',\n        'dbname' =&gt; 'sales',\n        'username' =&gt; 'read_only',\n        'password' =&gt; 'password',\n        'model' =&gt; 'mysql4',\n        'engine' =&gt; 'innodb',\n        'initStatements' =&gt; 'SET NAMES utf8;',\n        'active' =&gt; '1',\n      ),\n    ),\n    'table_prefix' =&gt; '',\n  ),\n//.......\n\nPerformance improvement\nTo improve the performance of master-slave replication, you can filter some tables on slave instances. We recommend filtering all temporary tables with name pattern search\\_tmp\\_% that are used for catalog search.\n\nTo do this, add the following line to your my.cnf file on your slave instances:\n\nreplicate-wild-ignore-table=%.search\\_tmp\\_%\n\n\nFor more information about this setting, see MySQL documentation.\n\n",
      "url": "/guides/v2.0/config-guide/multi-master/multi-master_slavedb.html"
    }
    ,
  
    "guides-v2-0-config-guide-multi-master-multi-master-verify-html": {
      "title": "Verify split databases",
      "content": "After configuration, the master databases are configured as follows:\n\n\n  Main magento database: 250 tables\n  Magento quote database: 10 tables\n  Magento sales database: 54 tables\n\n\nTo verify your split databases are working properly, perform the following tasks and verify that data is added to the database tables using a database tool like phpmyadmin:\n\n\n\n\t\n\t\n\t\n\t\tWhat to verify\n\t\tHow to verify\n\t\n\n\tquote database is working\n\tAdd items to a cart. Verify that rows have been added to your quote database's quote, quote_address, and quote_item tables.\n\n\n\tsales database is working\n\tComplete an order (any payment method, including check/money order). Verify that rows have been added to your sales database's sales_order_address, sales_order_item, and sales_order_payment tables.\n\n\n\n\n\n    You must back up the two additional database instances manually. Magento backs up only the main database instance. The 'magento setup:backup --db command and Magento Admin options do not back up the additional tables.\n\n\nNext step (optional)\nSet up optional database replication\n",
      "url": "/guides/v2.0/config-guide/multi-master/multi-master_verify.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-mysql-html": {
      "title": "MySQL",
      "content": "Help if you’re just starting out\nIf you’re new to all this and need some help getting started, we suggest the following:\n\n\n  Is the Magento software installed already?\n  What is the software that the Magento server needs to run?\n  What operating system is my server running?\n  How do I log in to my Magento server using a terminal, command prompt, or SSH?\n\n\nGeneral guidelines\n\n  The Magento application requires MySQL 5.6.x.\n  Magention versions 2.1.2 and later are compatible with MySQL 5.7.x.\n\n\nMagento strongly recommends you observe the following standard when you set up your Magento database:\n\n\n  Magento uses MySQL database triggers to improve database access during reindexing. Magento does not support any custom triggers in the Magento database because custom triggers can introduce incompatibilities with future Magento versions.\n  Familiarize yourself with these potential MySQL trigger limitations before you continue.\n  If you use MySQL database replication, be aware that Magento does not support MySQL statement-based replication. Make sure you use only row-based replication.\n\n\n\n\n  If your web server and database server are on different hosts, perform the tasks discussed in this topic on the database server host then see Set up a remote MySQL database connection.\n\n\nInstalling MySQL on Ubuntu\nSee one of the following sections for more information:\n\n\n  Installing and configuring MySQL 5.7 on Ubuntu 16\n  Installing MySQL 5.6 on Ubuntu 14\n  Installing MySQL 5.6 on Ubuntu 12\n\n\nInstalling and configuring MySQL 5.7 on Ubuntu 16\nThis section discusses how to install MySQL 5.7 on Ubuntu 16.\n\n\n\n  The Magento application 2.1.2 and later are compatible with MySQL 5.7.\n\n\nTo install MySQL 5.7 on Ubuntu 16:\n\n\n  \n    Enter the following command:\n\n    sudo apt install -y mysql-server mysql-client\n    \n  \n  \n    Secure the installation.\n\n    sudo mysql_secure_installation\n    \n  \n  \n    Test the installation by entering the following command:\n\n    mysql -u root -p\n    \n\n    Sample output:\n\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 45\nServer version: 5.6.19-0ubuntu0.14.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;\n    \n  \n  \n    If you expect to import large numbers of products into Magento, you can increase the value for max_allowed_packet that is larger than the default, 16MB.\n\n    \n\n      To increase the value, open /etc/mysql/mysql.cnf in a text editor and locate the value for max_allowed_packet. Save your changes to mysql.cnf, close the text editor, and restart MySQL (service mysql restart).\n\n      To optionally verify the value you set, enter the following command at a mysql&gt; prompt:\n\n       SHOW VARIABLES LIKE 'max_allowed_packet';\n      \n\n    \n  \n  \n    Configure the Magento database instance.\n  \n\n\nInstalling MySQL 5.6 on Ubuntu 14\nTo install MySQL 5.6 on Ubuntu 14:\n\n\n  \n    Enter the following command:\n\n    apt-get -y install mysql-server-5.6 mysql-client-5.6\n    \n  \n  \n    Secure the installation.\n\n    mysql_secure_installation\n    \n  \n  \n    Test the installation by entering the following command:\n\n    mysql -u root -p\n    \n\n    Sample output:\n\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 45\nServer version: 5.6.19-0ubuntu0.14.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;\n    \n  \n  \n    If you expect to import large numbers of products into Magento, you can increase the value for max_allowed_packet that is larger than the default, 16MB.\n\n    \n\n      To increase the value, open /etc/mysql/mysql.cnf in a text editor and locate the value for max_allowed_packet. Save your changes to mysql.cnf, close the text editor, and restart MySQL (service mysql restart).\n\n      To optionally verify the value you set, enter the following command at a mysql&gt; prompt:\n\n       SHOW VARIABLES LIKE 'max_allowed_packet';\n      \n\n    \n  \n  \n    Configure the Magento database instance.\n  \n\n\nInstalling MySQL 5.6 on Ubuntu 12\n\nTo install MySQL 5.6 on Ubuntu 12, use the following instructions from askubuntu.com.\n\n\n  \n    Enter the following commands in the order shown:\n\n    apt-get -y update\napt-add-repository ppa:ondrej/mysql-5.6\napt-get -y update\napt-get -y install mysql-server\n    \n  \n  \n    Secure the installation.\n\n    mysql_secure_installation\n    \n  \n  \n    Test the installation by entering the following command:\n\n    mysql -u root -p\n    \n\n    Messages similar to the following display:\n\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 43\nServer version: 5.6.21-1+deb.sury.org~precise+1 (Ubuntu)\n\nCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;\n    \n  \n  \n    If you expect to import large numbers of products into Magento, you can increase the value for max_allowed_packet that is larger than the default, 16MB.\n\n    \n\n      To increase the value, open /etc/mysql/mysql.cnf in a text editor and locate the value for max_allowed_packet. Save your changes to mysql.cnf, close the text editor, and restart MySQL (service mysql restart).\n\n      To optionally verify the value you set, enter the following command at a mysql&gt; prompt:\n\n       SHOW VARIABLES LIKE 'max_allowed_packet';\n      \n\n    \n  \n  \n    Configure the Magento database instance.\n  \n\n\nInstalling and configuring MySQL 5.7 on CentOS\nThis section discusses how to to install MySQL 5.7 on CentOS 6 or CentOS 7.\n\n\n  The Magento application 2.1.2 and later are compatible with MySQL 5.7.\n\n\nGet MySQL 5.7 for CentOS 7\nThe following procedure is based on How to Install Latest MySQL 5.7.9 on RHEL/CentOS 7/6/5 and Fedora 23/22/21.\n\nAs a user with root privileges, enter the following commands in the order shown:\n\nwget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\nyum -y localinstall mysql57-community-release-el7-7.noarch.rpm\n\n\nContinue with Install and configure MySQL 5.7 on CentOS 6 or 7.\n\nGet MySQL 5.7 for CentOS 6\nThe following procedure is based on How to Install Latest MySQL 5.7.9 on RHEL/CentOS 7/6/5 and Fedora 23/22/21.\n\nAs a user with root privileges, enter the following commands in the order shown:\n\nwget http://dev.mysql.com/get/mysql57-community-release-el6-7.noarch.rpm\nyum -y localinstall mysql57-community-release-el6-7.noarch.rpm\n\n\nContinue with the next section.\n\nInstall and configure MySQL 5.7 on CentOS 6 or 7\n\n  \n    Enter the following commands in the order shown:\n\n    yum -y install mysql-community-server\nservice mysqld start\n    \n  \n  \n    Verify the version using the following command:\n\n    mysql --version\n    \n\n    Sample output follows:\n\n    mysql  Ver 14.14 Distrib 5.7.12, for Linux (x86_64) using  EditLine wrapper\n    \n  \n  \n    Enter the following command to get the temporary database root user password:\n\n    grep 'temporary password' /var/log/mysqld.log\n    \n  \n  \n    Enter the following command to secure the installation:\n\n    mysql_secure_installation\n    \n\n    Follow the prompts on your screen to set a new password and configure other options.\n  \n  \n    Configure MySQL 5.7 as discussed in Configuring the Magento database instance.\n  \n\n\nInstalling and configuring MySQL 5.6 on CentOS\nThe following procedure is based on Install MySQL Server 5.6 in CentOS 6.x and Red Hat 6.x Linux.\n\n\n  \n    CentOS 6 Install the MySQL database:\n\n    yum -y update\nsudo wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm &amp;&amp; sudo rpm -ivh mysql-community-release-el6-5.noarch.rpm\nsudo yum -y install mysql-server\n    \n  \n  \n    CentOS 7 Install the MySQL database:\n\n    yum -y update\nsudo wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm &amp;&amp; sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm\nsudo yum -y install mysql-server\n    \n  \n  \n    Start MySQL.\n\n    service mysqld start\n    \n  \n  \n    Set a password for the root user and set other security-related options. Enter the following command and follow the prompts on your screen to complete the configuration.\n\n    mysql_secure_installation\n    \n  \n  \n    Verify the MySQL server version.\n\n    mysql -u root -p\n    \n\n    Messages similar to the following display:\n\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 15\nServer version: 5.6.23 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n    \n  \n  \n    If you expect to import large numbers of products into Magento, you can configure MySQL to use the max_allowed_packet parameter. We recommend a value of at least 16MB.\n\n    \n\n      To increase the value, open /etc/mysql.cnf in a text editor and add search for max_allowed_packet. Set the value to 16M or larger.\n\n      If it does not exist, add it before [mysqld_safe].\n\n      Save your changes to mysql.cnf, close the text editor, and restart MySQL (service mysqld restart).\n\n      To optionally verify the value you set, enter the following command at a mysql&gt; prompt:\n\n       SHOW VARIABLES LIKE 'max_allowed_packet';\n      \n\n    \n  \n  \n    Configure the Magento database instance as discussed in the next section.\n  \n\n\nConfiguring the Magento database instance\nThis section discusses how to create a new database instance for Magento. Although a new database instance is recommended, you can optionally install Magento into an existing database instance.\n\nTo configure a MySQL database instance:\n\n\n  Log in to your database server as any user.\n  \n    Enter the following command to get to a MySQL command prompt:\n\n    mysql -u root -p\n    \n  \n  Enter the MySQL root user’s password when prompted.\n  \n    Enter the following commands in the order shown to create a database instance named magento with user name magento:\n\n    create database magento;\nGRANT ALL ON magento.* TO magento@localhost IDENTIFIED BY 'magento';\n    \n  \n  \n    Enter exit to quit the command prompt.\n  \n  \n    Verify the database:\n\n    mysql -u magento -p\n    \n\n    If the MySQL monitor displays, you created the database properly. If an error displays, repeat the preceding commands.\n  \n  If your web server and database server are on different hosts, perform the tasks discussed in this topic on the database server host then see Set up a remote MySQL database connection.\n\n\n\n  We recommend you configure your database instance as appropriate for your business. When configuring your database, please keep the following in mind:\n\n  \n    \n      Indexers require higher tmp_table_size and max_heap_table_size values (e.g., 64M).\n    \n    \n      For optimal performance, make sure all MySQL and Magento index tables can be kept in memory (e.g., configure innodb_buffer_pool_size).\n    \n  \n\n\nRelated topics\n\n  Set up a remote MySQL database connection\n  Installing optional software\n  Apache\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  Configuring security options\n  How to get the Magento software\n\n",
      "url": "/guides/v2.0/install-gde/prereq/mysql.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-mysql-remote-html": {
      "title": "Set up a remote MySQL database connection",
      "content": "When to set up a remote database connection\nThis topic discusses how to set up a connection from your Magento web node to a MySQL server on another host. If you have a separate database host, you must perform the tasks discussed in this topic to install and use the Magento software. (The Magento web node is the server on which you installed the Magento software and that runs your web server.)\n\n\n  This is an advanced topic that should be used only by an experienced network administrator or database administrator. You must have root access to the file system and you must be able to log in to MySQL as root.\n\n\nPrerequisites\nBefore you begin, you must:\n\n\n  Install MySQL server on the database server\n  Create a database instance on the database server\n  Install the MySQL client on your Magento web node. Consult MySQL documentation for details.\n\n\nHigh availability\nUse the following guidelines to configure remote database connections if your web server or database server are clustered:\n\n\n  You must configure a connection for each web server node\n  \n    Typically, you configure a database connection to the database load balancer; however, database clustering can be complex and configuring it is up to you. Magento makes no specific recommendations for database clustering.\n\n    For more information, see MySQL documentation.\n  \n\n\nResolving connection issues\nIf you have issues connecting to either host, first ping the other host to make sure it’s reachable. You also might need to allow connections from one host to another by modifying firewall and SELinux rules (if you use SELinux).\n\nCreate the remote connection\nTo create a remote connection:\n\n\n  \n    On your database server, as a user with root privileges, open your MySQL configuration file.\n\n    To locate it, enter the following command:\n\n    mysql --help\n    \n\n    The location displays similar to the following:\n\n    Default options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf\n    \n\n    \n  \t\tOn Ubuntu 16, the path is typically /etc/mysql/mysql.conf.d/mysqld.cnf.\n    \n  \n  \n    Search the configuration file for bind-address.\n\n    If it exists, change the value as follows.\n\n    If it doesn’t exist, add it anywhere except the [mysqld] section.\n\n    bind-address = &lt;ip address of your Magento web node&gt;\n    \n\n    See MySQL documentation, especially if you have a clustered web server.\n  \n  Save your changes to the configuration file and exit the text editor.\n  \n    Restart the MySQL service:\n\n    CentOS: service mysqld restart\n\n    Ubuntu: service mysql restart\n  \n\n\n\n  \tIf MySQL fails to start, look in syslog for the source of the issue. Resolve the issue using MySQL documentation or another authoritative source.\n\n\nGrant access to a database user\nTo enable your web node to connect to the database server, you must grant a web node database user access to the database on the remote server.\n\nThis example grants the root database user full access to the database on the remote host.\n\nTo grant access to a database user:\n\n\n  Log in to the database server.\n  Connect to the MySQL database as the root user.\n  \n    Enter the following command:\n\n    GRANT ALL ON &lt;local database name&gt;.* TO &lt;remote web node user name&gt;@&lt;remote web node server ip address&gt; IDENTIFIED BY '&lt;database user password&gt;';\n    \n\n    For example,\n\n    GRANT ALL ON magento_remote.* TO dbuser@192.0.2.50 IDENTIFIED BY 'dbuserpassword';\n    \n  \n\n\n\n  If your web server is clustered, enter the same command on every web server. You must use the same user name for every web server.\n\n\nVerify database access\nOn your web node host, enter the following command to verify the connection works:\n\nmysql -u &lt;local database user name&gt; -h &lt;database server ip address&gt; -p\n\n\nIf the MySQL monitor displays as follows, the database is ready for the Magento software:\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 213\nServer version: 5.6.26 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\n\nIf your web server is clustered, enter the command on each web server host.\n\nInstall the Magento software\nWhen you install the Magento software using either the command line or Setup Wizard, you must specify the following:\n\n\n  The Base URL (also referred to as the store address) specifies the host name or IP address of the web node\n  Database host is the remote database server IP address (or load balancer if the database server is clustered)\n  Database user name is the local web node database user to which you gave access\n  Database password is the local web node user’s password\n  Database name is the name of the database on the remote server\n\n\nRelated topics\n\n\n  Installing optional software\n  Apache\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  Configuring security options\n  How to get the Magento software\n\n",
      "url": "/guides/v2.0/install-gde/prereq/mysql_remote.html"
    }
    ,
  
    "guides-v2-0-cloud-project-new-relic-html": {
      "title": "New Relic APM",
      "content": "The software analytics product New Relic for application performance management (APM) helps you to analyze and improve application interactions. Each Magento Commerce (Cloud) plan includes a New Relic APM license that supports up to three instances across all environments. You do not need to purchase or install the New Relic extension (different than the APM service). For plan details, see Subscriptions and plans.\n\nKey features\n\nNew Relic APM provides the following features to Magento:\n\n\n  Focus on specific transactions—Actively mark and monitor key customer actions in your site, such as adding to the cart, checking out, or processing a payment.\n  Database query monitoring—Locate and monitor database queries affecting performance.\n  App Map—View all application dependencies within your Magento site, extensions, and external services.\n  Apdex scores—Evaluate performance and create alerts that identify issues and notify you when they occur, such as site performance affected by a flash sale or web event.\n\n\nNew Relic APM credentials\nThe agent software for New Relic is packaged with your Magento Commerce (Cloud) account. You receive your credentials and license information from Magento during launch. You can access your license key in the Project Web Interface by clicking View Details for your project. The NewRelic Service section includes your Account Number, License Key, and other access keys.\n\nAdd New Relic APM to an environment\nThe Magento Commerce (Cloud) plans support up to three instances of your New Relic APM license across all environments. We recommend adding a New Relic license to your staging and production environments, and you can add the license to one other environment of your choice.\n\n\n  If you have more than three active environments using the same New Relic license key, you need to remove a license variable from an existing environment. For details, see Remove New Relic from an environment.\n\n  If you are interested in using New Relic on more than three active environments, contact your dedicated Launch Manager for details, or you can contact New Relic directly at sales@newrelic.com.\n\n\nTo add a New Relic license key to an environment:\n\n\n  Log in to your Project Web Interface.\n  Select an environment.\n  \n    Click Access site and copy the SSH Access link.\n\n    \n  \n  In a terminal, log in using the SSH access link.\n  \n    Set the license variable.\n\n    magento-cloud variable:set --no-visible-build php:newrelic.license &lt;your-new-relic-license-key&gt;\n    \n  \n\n\nRemove New Relic APM from an environment\nThe Magento Commerce (Cloud) plans support up to 3 instances of your New Relic license across all environments. If you have more than 3 active environments using the same New Relic license key, you need to remove a license variable from an existing environment.\n\nTo remove a New Relic license key from an environment:\n\n\n  Log in to your Project Web Interface.\n  Select an environment.\n  \n    Click Access site and copy the SSH Access link.\n\n    \n  \n  In a terminal, log in using the SSH access link.\n  \n    List all variables.\n\n    For project variables: magento-cloud pvget\nFor environment variables: magento-cloud vget\n  \n  \n    Delete an environment variable.\n\n       magento-cloud variable:delete php:newrelic.license\n    \n\n    If you added the license as a project variable, you must remove that project-level variable. A project variable adds the license to every environment branch created, using or exceeding the license limit.\n\n       magento-cloud project:variable:delete php:newrelic.license\n    \n  \n\n\nInvestigate performance\nNew Relic connects and monitors your site using a PHP agent. As it collects data, you can log in and review the responses through the New Relic dashboard.\n\nUsing the New Relic dashboard, you can immediately track and find the following:\n\n\n  Monitor applications and transactions encountering slow responses or bottlenecks\n  Investigate customer comments of issues with your site\n  Identify applications with high transaction time and follow up on queries, calls, and methods with Blackfire\n  Verify and compare traffic to transaction time\n\n\nWe recommend reviewing tracked data:\n\n\n  Most time consuming—Determine time consumption by tracking requests in parallel. For example, you may have the highest transaction time spent in product and category views. If a customer account page suddenly ranks very high in time consumption, there may be a call or query dragging performance.\n  Highest throughput—Identify pages hit the most based on the size and frequency of bytes transmitted.\n\n\nAll collected data details the time spent on an action transmitting data, queries, or Redis data. If queries cause issues, New Relic provides information to track and respond to it.\n\nNew Relic and Blackfire\n\nYou can mix the high-level data captured by New Relic APM and the code-level data captured by the Blackfire Profiler to gain insight into your store performance. Each service has strengths and weaknesses that balance incredibly well together.\n\n\n  The New Relic worst-case requests are not averages, but edge cases; whereas, Blackfire provides more of the average worst-case requests.\n  Blackfire is not detailed in determining and displaying queries giving you trouble, but you can use New Relic to find those.\n  Background processes, like Cron job, can cause issues. These background processes are not monitored by New Relic, but you can watch them using Blackfire.\n\n\nNew Relic APM resources\n\n\n  Introduction to APM\n  View transactions\n  Analyze database and instance-level performance issues\n  Tracking front-end time\n  APM best practices\n  New Relic University\n\n",
      "url": "/guides/v2.0/cloud/project/new-relic.html"
    }
    ,
  
    "guides-v2-0-mtf-create-test-new-test-html": {
      "title": "Create a test in the Functional Testing Framework",
      "content": "The FTF helps to create a new test, you can extend an out-of-the-box test, or create a completely new test.\n\nExtend an out-of-the-box test\n\nYou can extend a test by adding or replacing a test entity. Test entities for the module are stored in the &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/&lt;testing_module&gt; directory.\n\nUsage\n\nThis approach is useful when the Magento functionality was extended. For example, the minor changes were made in the existing functionality of a module. Also you can extend an out-of-the-box test to extend the current test coverage if the target functionality is not completely covered by the out-of-the-box test.\n\nExample use cases:\n\n\n  variation addition\n  variation extension\n  fixture extension\n  repository addition\n  block overriding\n\n\nCreate a functional test\n\nIf new modules are added to Magento you would need to create a new test to check the functionality.\n\nNew test must be stored in the corresponding module &lt;magento2_root_dir&gt;/dev/tests/functional/tests/app/Magento/&lt;testing_module&gt;.\n\nEach test consists of four main components: a test object, test data, a test flow, a test assertion.\n\nTest object\n\nA test object is an object that you are going to test. Most of the test actions are performed under this object.\nThe test object is represented by a fixture.  The fixture defines properties of an object.\n\nTest data\n\nThere are two types of test data:\n\n\n  Data for the test, stored in a data set.\n  Preconditions:\n    \n      Sample data that is stored in a fixture repository. In a data set, it is stored as a name of the fixture repository.\n      A sample test entity that can be created by a handler.\n    \n  \n\n\nTest flow\n\nA test flow is a set of test steps that you want to perform under the test object to check required functionality. Test steps are defined in a test case. Usually, a test step contains a set of actions. Each action is managed by a method defined in a block. A page is a container for blocks. It stores selectors to identify blocks on an HTML page.\n\nTest assertions\n\nA test assertion compares the test flow results with the expected ones. Test assertions are represented by constraints.\n\nLearn more in the “Create a new test” topic.\n\n\n\n",
      "url": "/guides/v2.0/mtf/create_test/new_test.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-nginx-html": {
      "title": "nginx",
      "content": "Magento supports nginx 1.8 (or the latest mainline version). You must also install the latest version of php-fpm.\n\nInstallation instructions vary based on which operating system you’re using:\n\n\n  Ubuntu 16\n  CentOS 7\n\n\nHelp if you’re just starting out\nIf you’re new to all this and need some help getting started, we suggest the following:\n\n\n  Is the Magento software installed already?\n  What is the software that the Magento server needs to run?\n  What operating system is my server running?\n  How do I log in to my Magento server using a terminal, command prompt, or SSH?\n\n\nUbuntu 16\nThe following section describes how to install Magento 2.x on Ubuntu 16 using nginx, PHP, and MySQL.\n\nInstall nginx\n\napt-get -y install nginx\n\n\nAfter completing the following sections and installing Magento, we’ll use a sample configuration file to configure nginx.\n\nInstall and configure php-fpm\nMagento requires several PHP extensions to function properly. In addition to these extensions, you must also install and configure the php-fpm extension if you’re using nginx.\n\nTo install and configure php-fpm:\n\n\n  \n    Install php-fpm and php-cli:\n\n     apt-get -y install php7.0-fpm php7.0-cli\n    \n  \n  \n    Open the php.ini files in an editor:\n\n     vim /etc/php/7.0/fpm/php.ini\n vim /etc/php/7.0/cli/php.ini\n    \n  \n  \n    Edit both files to match the following lines:\n\n     memory_limit = 2G\n max_execution_time = 1800\n zlib.output_compression = On\n    \n\n    \n      We recommend setting the memory limit to 2G when testing Magento. Refer to Required PHP settings for more information.\n    \n  \n  \n    Save and exit the editor.\n  \n  \n    Restart the php-fpm service:\n\n     systemctl restart php7.0-fpm\n    \n  \n\n\nInstall and configure MySQL\nRefer to MySQL for more information.\n\nInstall and configure Magento2\nThere are several ways to download the Magento software, including:\n\n\n  \n    Download an archive\n  \n  \n    Get the Composer metapackage\n  \n  \n    Clone the git repository\n  \n\n\nFor this example, we’ll download and extract an archive.\n\n\n  \n    Change to the web server docroot directory, or to a directory you’ve configured as a virtual host docroot. For this example, we’re using the Ubuntu default /var/www/html.\n\n     cd /var/www/html\n    \n  \n  \n    Download the Magento archive, extract it, and rename the folder magento2/:\n\n     wget https://github.com/magento/magento2/archive/2.0.tar.gz\n tar -xzvf 2.0.tar.gz\n mv magento2-2.0/ magento2/\n    \n  \n  \n    Set directory ownership and file permissions.\n\n     cd /var/www/html/magento2\n find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\n find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\n chown -R :www-data .\n chmod u+x bin/magento\n    \n  \n  \n    Install Composer globally. You’ll need Composer to update dependencies before installing Magento:\n\n     curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/bin --filename=composer\n    \n  \n  \n    Update Magento dependencies:\n\n     cd /var/www/html/magento2\n composer install -v\n    \n  \n  \n    If prompted, enter your Magento authentication keys.\n  \n  \n    Install Magento from the command line.\n\n     cd /var/www/html/magento2/bin\n ./magento setup:install --base-url=http://www.magento-dev.com/ --db-host=localhost --db-name=magento --db-user=magento --db-password=magento --admin-firstname=admin --admin-lastname=admin --admin-email=admin@admin.com --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1\n    \n\n    Replace http://www.magento-dev.com with your domain name.\n\n    \n      You cannot use the Web Setup Wizard when installing Magento on nginx. You must use the command line.\n    \n  \n  \n    Switch to developer mode:\n\n     cd /var/www/html/magento2/bin\n ./magento deploy:mode:set developer\n    \n  \n\n\nConfigure nginx\nWe recommend configuring nginx using the nginx.conf.sample configuration file provided in the Magento installation directory and an nginx virtual host.\n\nThese instructions assume you’re using the Ubuntu default location for the nginx virtual host (e.g., /etc/nginx/sites-available) and Ubuntu default docroot (e.g., /var/www/html), however, you can change these locations to suit your environment.\n\n\n  \n    Create a new virtual host for your Magento site:\n\n     vim /etc/nginx/sites-available/magento\n    \n  \n  \n    Add the following configuration:\n\n     upstream fastcgi_backend {\n     server  unix:/run/php/php7.0-fpm.sock;\n }\n\n server {\n\n     listen 80;\n     server_name www.magento-dev.com;\n     set $MAGE_ROOT /var/www/html/magento2;\n     include /var/www/html/magento2/nginx.conf.sample;\n }\n    \n\n    \n      The include directive must point to the sample nginx configuration file in your Magento installation directory.\n    \n  \n  \n    Replace www.magento-dev.com with your domain name. This must match the base URL you specified when installing Magento.\n  \n  \n    Save and exit the editor.\n  \n  \n    Activate the newly created virtual host by creating a symlink to it in the /etc/nginx/sites-enabled directory:\n\n     ln -s /etc/nginx/sites-available/magento /etc/nginx/sites-enabled\n    \n  \n  \n    Verify that the syntax is correct:\n\n     nginx -t\n    \n  \n  \n    Restart nginx:\n\n     systemctl restart nginx\n    \n  \n\n\nVerify the installation\nOpen a web browser and navigate to your site’s base URL to verify the installation.\n\nCentOS 7\nThe following section describes how to install Magento 2.x on CentOS 7 using nginx, PHP, and MySQL.\n\nInstall nginx\n\nyum -y install epel-release\nyum -y install nginx\n\n\nAfter installation is complete, start nginx and configure it to start at boot time:\n\nsystemctl start nginx\nsystemctl enable nginx\n\n\nAfter completing the following sections and installing Magento, we’ll use a sample configuration file to configure nginx.\n\nInstall and configure php-fpm\nMagento requires several PHP extensions to function properly. In addition to these extensions, you must also install and configure the php-fpm extension if you’re using nginx.\n\n\n  \n    Install php-fpm:\n\n     yum -y install php70w-fpm\n    \n  \n  \n    Open the /etc/php.ini file in an editor.\n  \n  \n    Uncomment the cgi.fix_pathinfo line and change the value to 0.\n  \n  \n    Edit the file to match the following lines:\n\n     memory_limit = 2G\n max_execution_time = 1800\n zlib.output_compression = On\n    \n\n    \n      We recommend setting the memory limit to 2G when testing Magento. Refer to Required PHP settings for more information.\n    \n  \n  \n    Uncomment the session path directory and set the path:\n\n     session.save_path = \"/var/lib/php/session\"\n    \n  \n  \n    Save and exit the editor.\n  \n  \n    Open /etc/php-fpm.d/www.conf in an editor.\n  \n  \n    Edit the file to match the following lines:\n\n     user = nginx\n group = nginx\n listen = /run/php-fpm/php-fpm.sock\n listen.owner = nginx\n listen.group = nginx\n listen.mode = 0660\n    \n  \n  \n    Uncomment the environment lines:\n\n     env[HOSTNAME] = $HOSTNAME\n env[PATH] = /usr/local/bin:/usr/bin:/bin\n env[TMP] = /tmp\n env[TMPDIR] = /tmp\n env[TEMP] = /tmp\n    \n  \n  \n    Save and exit the editor.\n  \n  \n    Create a new directory for the PHP session path and change the owner to the apache user and group:\n\n    mkdir -p /var/lib/php/session/\nchown -R apache:apache /var/lib/php/\n    \n  \n  \n    Create a new directory for the PHP session path and change the owner to the apache user and group:\n\n    mkdir -p /run/php-fpm/\nchown -R apache:apache /run/php-fpm/\n    \n  \n  \n    Start the php-fpm service and configure it to start at boot time:\n\n    systemctl start php-fpm\nsystemctl enable php-fpm\n    \n  \n  \n    Verify that the php-fpm service is running:\n\n    netstat -pl | grep php-fpm.sock\n    \n  \n\n\nInstall and configure MySQL\nRefer to MySQL for more information.\n\nInstall and configure Magento2\nThere are several ways to download the Magento software, including:\n\n\n  \n    Download an archive\n  \n  \n    Get the Composer metapackage\n  \n  \n    Clone the git repository\n  \n\n\nFor this example, we’ll download and extract an archive.\n\n\n  \n    Change to the web server docroot directory, or to a directory you’ve configured as a virtual host docroot. For this example, we’re using the CentoOS default /usr/share/nginx/html.\n\n     cd /usr/share/nginx/html\n    \n  \n  \n    Download the Magento archive, extract it, and rename the folder magento2/:\n\n     wget https://github.com/magento/magento2/archive/2.0.tar.gz\n tar -xzvf 2.0.tar.gz\n mv magento2-2.0/ magento2/\n    \n  \n  \n    Set directory ownership and file permissions.\n\n     cd /usr/share/nginx/html/magento2\n find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\n find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\n chown -R :apache .\n chmod u+x bin/magento\n    \n  \n  \n    Install Composer globally. You’ll need Composer to update dependencies before installing Magento:\n\n     curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/bin --filename=composer\n    \n  \n  \n    Update Magento dependencies:\n\n     cd /usr/share/nginx/html/magento2\n composer install\n    \n  \n  \n    If prompted, enter your Magento authentication keys.\n  \n  \n    Install Magento from the command line.\n\n     cd /usr/share/nginx/html/magento2/bin\n ./magento setup:install --base-url=http://www.magento-dev.com/ \\\n --db-host=localhost --db-name=magento --db-user=magento --db-password=magento \\\n --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n --admin-user=admin --admin-password=admin123 --language=en_US \\\n --currency=USD --timezone=America/Chicago --use-rewrites=1\n    \n\n    Replace http://www.magento-dev.com with your domain name.\n\n    \n      You cannot use the Web Setup Wizard when installing Magento on nginx. You must use the command line.\n    \n  \n  \n    Switch Magento to developer mode:\n\n     cd /usr/share/nginx/html/magento2/bin\n ./magento deploy:mode:set developer\n    \n  \n\n\nConfigure nginx\nWe recommend configuring nginx using the nginx.conf.sample configuration file provided in the Magento installation directory and an nginx virtual host.\n\nThese instructions assume you’re using the CentOS default location for the nginx virtual host (e.g., /etc/nginx/conf.d) and default docroot (e.g., /usr/share/nginx/html), however, you can change these locations to suit your environment.\n\n\n  \n    Create a new virtual host for your Magento site:\n\n     vim /etc/nginx/conf.d/magento.conf\n    \n  \n  \n    Add the following configuration:\n\n     upstream fastcgi_backend {\n     server  unix:/run/php-fpm/php-fpm.sock;\n }\n\n server {\n\n     listen 80;\n     server_name www.magento-dev.com;\n     set $MAGE_ROOT /usr/share/nginx/html/magento2;\n     include /usr/share/nginx/html/magento2/nginx.conf.sample;\n }\n    \n\n    \n      The include directive must point to the sample nginx configuration file in your Magento installation directory.\n    \n  \n  \n    Replace www.magento-dev.com with your domain name.\n  \n  \n    Save and exit the editor.\n  \n  \n    Verify that the syntax is correct:\n\n     nginx -t\n    \n  \n  \n    Restart nginx:\n\n     systemctl restart nginx\n    \n  \n\n\nConfigure SELinux and Firewalld\nSELinux is enabled by default on CentOS 7. Use the following command to see if it’s running:\n\nsestatus\n\n\nTo configure SELinux and firewalld:\n\n\n  \n    Install SELinux management tools:\n\n     yum -y install policycoreutils-python\n    \n  \n  \n    Run the following commands to change the security context for the Magento installation directory:\n\n     semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/magento2/app/etc(/.*)?'\n semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/magento2/var(/.*)?'\n semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/magento2/pub/media(/.*)?'\n semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/html/magento2/pub/static(/.*)?'\n restorecon -Rv '/usr/share/nginx/html/magento2/'\n    \n  \n  \n    Install the firewalld package:\n\n     yum -y install firewalld\n    \n  \n  \n    Start the firewall service and configure it to start at boot time:\n\n     systemctl start firewalld\n systemctl enable firewalld\n    \n  \n  \n    Run the following commands to open ports for HTTP and HTTPS so you can access the Magento base URL from a web browser:\n\n     firewall-cmd --permanent --add-service=http\n firewall-cmd --permanent --add-service=https\n firewall-cmd --reload\n    \n  \n\n\nVerify the installation\nOpen a web browser and navigate to your site’s base URL to verify the installation.\n\nRelated topics:\n\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  MySQL\n  Configuring security options\n  Installing optional software\n  Determine your installation or upgrade path\n\n",
      "url": "/guides/v2.0/install-gde/prereq/nginx.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-security-non-secure-functions-html": {
      "title": "Non-secure functions",
      "content": "Overview\n\nUsing functions that are known to be exploitable or non-secure can lead to remote code execution or weak cryptography.\nAs a developer, you should avoid using functions that introduce vulnerabilities in your code.\n\nPHP functions to avoid\n\nThe following is a list of PHP functions that are known to be vulnerable and exploitable.\nAvoid using these functions in your code.\n\n\n  eval - Using eval is considered bad practice because of its ability to execute arbitrary PHP code.\n  seralize/unserialize - Attackers can create an exploit for these functions by passing a string with a serialized arbitrary object to the unserialize function to run arbitrary code.\n  md5 - The algorithm for this function is known to have cryptographic weaknesses.\nYou should never use this function for hashing passwords or any other sensitive data.\n  srand - Using a predetermined number to seed the random number generator results in a predictable sequence of numbers.\n  mt_srand - This function is a pseudo-random number generator (PRNG) and is not cryptographically secure.\n\n",
      "url": "/guides/v2.0/extension-dev-guide/security/non-secure-functions.html"
    }
    ,
  
    "guides-v2-0-rest-notes-html": {
      "title": "REST usage notes",
      "content": "Parameters in URLs\n\nIn a REST call, a user could potentially specify one ID in the URL and another in the request body. Whenever this type of conflict occurs, Magento uses the value specified in the URL.\n\nFor example:\n\nThe REST URL to update a customer is &lt;route url=\"/V1/customers/:id\" method=\"PUT\"&gt;.  If you specify a ID value of 1 in the URL (http://magento.loc/customer/1), and a body of { \"id\": 2, \"attr\": \"value\" }, the customer with ID of 1 will be modified.\n\nThis applies to all REST APIs where a parameter is passed in the URL. Anything specified in the request body with the same parameter name as the URL will be ignored.\n\nRelated topics\nSearch using REST APIs\n",
      "url": "/guides/v2.0/rest/notes.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-number-formats-number-formats-html": {
      "title": "Admin Number Formats",
      "content": "For more number formats, use the Associated Press (AP) Stylebook on first reference, and the Microsoft Manual of Style on second reference.\n\nBasic Standards\n\n\n  For numbers 10 and higher, use numerals. For numbers lower than 10, spell out numbers. See correct examples:\n    \n      Yes – “We offer this service in nine countries.”\n      Yes – “Over 200 companies use this service.”\n    \n  \n  In headlines and \"pull quotes\", where the number is the focus, use numerals. See correct examples:\n    \n      Yes – “1 in 3 shoppers ...”\n      Yes – “We’re #1”\n    \n  \n  Use numerals for all numbers in the following cases:\n    \n      Units of measurement, including inches, acres, pounds, mph, and percentages\n      Street addresses Example: 9 Franklin St.\n    \n  \n  For large numbers, we use a comma.\n    \n      Correct example: 200,000 - never \"200k\" or \"200 thousand\"\n      Exception: In large-format printing, we can use “200k” to add impact. Where this can be used: Posters, billboards, and small internet banners where space is tight.\n      \n  \n\n\nAddresses\n\nSee Addresses section in Content Formats.\n\nPercentages\n\nIn regular text, write out “percent”. However, the ”%” sign can be used in call-outs, graphics, and large-format content (Example: posters).\n\nExample:\n\n\n  No – “Merchants have reported increased sales of up to 130%”\n  Yes – “Merchants have reported increased sales of up to 130 percent.”\n\n\nMoney\n\nDo not add a space between the symbol and the number. … Examples: $781, £490, €2,183\n\nThis is how we write about money:\n\n\n  \n    \n      Examples:\n    \n    \n      No – “$2.00\"\n      No – “$ 2\"\n      Yes – “$2”\n      Yes – “$2.01”\n      No – “$1232\"\n      No – “$1232.00\"\n      Yes – “$1,232”\n      No – “$53,000,000\"\n      No – “$53m\"\n      No – “$53mil\"\n      Yes – “$53 million”\n      No – “$1,200,000\"\n      No – “$1.2m\"\n      Yes – “$1.2 million”\n    \n  \n\n\nDates and Times\n\nDates\n\n\n  \n    Do not abbreviate months of the year when they appear by themselves or with a year. … Correct example: “September 2015”.”\n  \n  \n    Months:\n\n    \n      \n        March, April, May, June, and July are never abbreviated in text.\n      \n      \n        The remaining months are only abbreviated when followed by a date (Jan. 27).\n      \n      \n        Abbreviations to use: Jan., Feb., Aug., Sept., Oct., Nov., Dec.\n      \n    \n  \n  \n    Never abbreviate …\n\n    \n      \n        Days of the week … Correct example: Use “Wednesday”, not “Weds.”.\n      \n      \n        Years … Correct example: Use “2017”, not “‘17”.\n      \n    \n  \n\n\nCorrect Examples\n\n\n  \n    The conference begins …\n\n    \n      \n        In September\n      \n      \n        In September 2017\n      \n      \n        Sept. 8\n      \n      \n        Friday, Sept. 8\n      \n      \n        Friday, Sept. 8, 2017\n      \n    \n  \n  \n    Date-range format, in a sentence: The conference runs Sept. 8-12, 2017.\n  \n\n\nTimes\n\nGeneral Usage\n\n\n  \n    Formatting. Use numerals and “am” or “pm” without a space. Example: 10am.\n  \n  \n    Omit “:00”. Don’t use minutes for on-the-hour time.\n  \n  \n    Example: Exclude minutes for “7am”; include minutes for “10:30pm”.\n  \n  \n    Use “noon” and “midnight”. Do not use 12pm and 12am.\n  \n\n\nTime Ranges\n\n\n  Use a hyphen between times to indicate a time period. Example: 7am-10:30pm.\n  Exclude the \"am\" and \"pm\" when times are both either in the morning or after noon.\n  Example:\n    \n      No – “6am-9am\"\n      Yes – “6-9am”\n    \n  \n  Simplify range language:\n  Example:\n    \n      No – “Holiday store hours go from 8am-10pm.\"\n      Yes – “Holiday store hours are 8am-10pm.”\n    \n  \n\n\nTime Zones\n\n\n  \n    Formatting. When a time is not adjusted by the system to reflect the current time zone, append the time zone after the time. … Correct examples: “7:30am CT”, “7-10:30am CT”\n  \n  \n    Do not indicate standard or daylight time. … Correct example: Central Time is written as “CT”, not “CST” or “CDT”.\n  \n  \n    Do not use military time. … Inorrect example: Using 19:40, instead of 7:40pm.\n  \n\n",
      "url": "/guides/v2.0/design-styleguide/number-formats/number-formats.html"
    }
    ,
  
    "guides-v2-0-get-started-authentication-oauth-errors-html": {
      "title": "OAuth error codes",
      "content": "When the third-party application makes an invalid request to Magento, the following OAuth-related errors can occur:\n\n\n   \n      HTTP code\n      Error code\n      Text representation\n      Description\n   \n   \n      400\n      1\n      version_rejected\n      The oauth_version parameter does not correspond to the \"1.0\" value.\n   \n   \n      400\n      2\n      parameter_absent\n      A required parameter is missing in the request. The name of the missing parameter is specified additionally in the response.\n   \n   \n      400\n      3\n      parameter_rejected\n      The type of the parameter or its value do not meet the protocol requirements (for example,  array is passed instead of the string).\n   \n   \n      400\n      4\n      timestamp_refused\n      The timestamp value in the oauth_timestamp parameter is incorrect.\n   \n   \n      401\n      5\n      nonce_used\n      The nonce-timestamp combination has already been used.\n   \n   \n      400\n      6\n      signature_method_rejected\n      The signature method is not supported. The following methods are supported: HMAC-SHA1.\n   \n   \n      401\n      7\n      signature_invalid\n      The signature is invalid.\n   \n   \n      401\n      8\n      consumer_key_rejected\n      The Consumer Key has incorrect length or does not exist.\n   \n   \n      401\n      9\n      token_used\n      An attempt of authorization of an already authorized token or an attempt to exchange a not temporary token for a permanent one.\n   \n   \n      401\n      10\n      token_expired\n      The temporary token has expired. At the moment, the mechanism of expiration of temporary tokens is not implemented and the current error is not used.\n   \n   \n      401\n      11\n      token_revoked\n      The token is revoked by the user who authorized it.\n   \n   \n      401\n      12\n      token_rejected\n      The token is not valid, or does not exist, or is not valid for using in the current type of request.\n   \n   \n      401\n      13\n      verifier_invalid\n      The confirmation string does not correspond to the token.\n   \n\n\nRelated topic\nOAuth-based authentication\n",
      "url": "/guides/v2.0/get-started/authentication/oauth-errors.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-object-manager-html": {
      "title": "ObjectManager",
      "content": "Overview\n\nLarge applications, such as the Magento application, use an object manager to avoid boilerplate code when composing objects during instantiation.\n\nIn the Magento framework, the implementation of the ObjectManagerInterface performs the duties of an object manager.\n\n\n  Magento prohibits the direct use of the ObjectManager in your code because it hides the real dependencies of a class.\nSee usage rules.\n\n\nResponsibilities\n\nThe object manager has the following responsibilities:\n\n\n  Object creation in factories and proxies.\n  Implementing the singleton pattern by returning the same shared instance of a class when requested.\n  Dependency management by instantiating the preferred class when a constructor requests its interface.\n  Automatically instantiating parameters in class constructors.\n\n\nConfiguration\n\nThe di.xml file configures the object manager and tells it how to handle dependency injection.\n\nThis file specifies the preferred implementation class the object manager generates for the interface declared in a class constructor.\n\nThe file also specifies whether the object manager should create an object for every request or treat the object as a singleton.\n\nUsage rules\n\nThe Magento framework uses the ObjectManager to generate and inject the classes declared in your constructor.\nClasses should not ask for the ObjectManager itself as a constructor dependency.\n\nYou do not call the object manager directly because the framework handles this automatically.\nDirect use of the create function prevents type validation and type hinting that a factory class provides.\n\nObject creation is also a separate responsibility that should be moved to a dedicated class such as a factory or proxy.\nIn most cases, the framework generates these classes automatically during code compilation.\n\n\n  You may notice in the Magento 2 codebase that some core classes still call the ObjectManager directly.\n\n  This code needs porting or exist for backward compatibility purposes.\n\n  They are not tacit endorsements of using the ObjectManager directly.\n\n\nExceptions\n\nYou can depend on and use the ObjectManager class in the following scenarios:\n\n\n  You can use the object manager in static magic methods like __wakeup(), __sleep(), etc.\n    \n      An example can be found in the __wakeup() method in the Magento/Eav/Model/Entity/Attribute/AbstractAttribute class.\n    \n  \n  You can use the ObjectManager to maintain backward compatibility for a constructor.\n  In a global scope, like in fixtures of integration tests, you can use the object manager.\n  The object manager can be a dependency in classes used for the creation of objects, e.g. factories or proxies.\n\n\nRelated topics\n\n\n  The di.xml file\n  Dependency injection\n\n",
      "url": "/guides/v2.0/extension-dev-guide/object-manager.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-observers-bp-html": {
      "title": "Observers Best Practices",
      "content": "Overview\nObservers are capable of modifying the behavior of a Magento application because they are dynamically injected into the execution flow. Poorly designed and coded observers can cause issues, instabilities, or otherwise break the application.\n\nWe encourage you to follow these best practices aimed towards reducing problems when your observer is executed.\n\nBest practices\n\nMake your observer efficient\n\nTry to keep your observer small and efficient by avoiding complex computations, if possible. This is especially important when your observer is listening to an event that is frequently dispatched. Having complex computations in your observer can slow down application processes.\n\nDo not include business logic\n\nYour observer should not contain logic other than what is needed for it to run. Business logic should be encapsulated in other classes that your observer uses.\n\nDeclare observer in the appropriate scope\n\nMake your observer as specific as it needs to be. Declare your observer in the appropriate scope:\n\n\n  For frontend events, declare observers in &lt;module-dir&gt;/etc/frontend/events.xml\n  For backend events, declare observers in &lt;module-dir&gt;/etc/adminhtml/events.xml\n\n\nUse the global &lt;module-dir&gt;/etc/events.xml file only when an event can occur on both the frontend and the backend.\n\nAvoid cyclical event loops\n\nCyclical event loops occur when your observer calls the method of an object that dispatches an event that triggers a chain of events that ends up dispatching that same initial event that executes your observer in a recurring manner. Make sure your observer is not dispatching an event that it immediately listens to or will listen to in the chain of events that follows.\n\nDo not rely on invocation order\n\nYour observer should not make assumptions about the order in which it will be invoked nor should it rely on the execution of another observer. Observers listening to the same event may be invoked in any order when that event is dispatched.\n\nRecommended Reading\n\n  Events and Observers\n\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/observers-bp.html"
    }
    ,
  
    "guides-v2-0-cloud-onboarding-onboarding-portal-html": {
      "title": "Onboarding Portal management",
      "content": "\n",
      "url": "/guides/v2.0/cloud/onboarding/onboarding-portal.html"
    }
    ,
  
    "guides-v2-0-cloud-onboarding-onboarding-tasks-html": {
      "title": "Onboarding tasks",
      "content": "After your company purchases a subscription plan for Magento Commerce (Cloud), the only person who initially has access to the project and code is the Project Owner.\n\nTo quickly onboard your project to start developing your site and going live, you need to complete specific set up steps and onboarding tasks. Typically, you need the Project Owner to start. Technical Admin(s) with super user access can continue.\n\n\n  If you joined us with a 30-day free trial Magento Commerce (Cloud) account, we completed the following first steps for you:\n\n  \n    Created your Cloud account and project\n    Provisioned the initial environment with a cloned Magento Commerce (Cloud) code base in a master branch\n    Created an environment for the master branch with a web server, database, and services\n    Added Magento authentication keys for the Project Owner\n    Add the ADMIN_EMAIL variable. You can add additional variables for the default admin account to access the Magento Admin panel.\n  \n\n\nProject access and users\nThe Project Owner is typically a “business user” in your business or finance organization that purchased the subscription and is your point of contact with Magento regarding the account overall. The owner can add user accounts to provide access to code, manage branches, enter tickets, and support environments. These user accounts can include in-house development, consultants, and Magento solution specialists.\n\nTypically, the only user the Project Owner must create is the Technical Admin. This user should have a user account with the Super User role. Your Technical Admin can create user accounts for developers, set environment permissions, and manage all branches and environments. Typically, the Technical Admin is a developer, consultant, a Magento Solution Partner, or yourself.\n\nSign up for a Magento Commerce (Cloud) account\nDon’t have a Magento Commerce (Cloud) account yet? Sign up for a free 30-day trial for a Starter or Pro plan, or contact Magento Sales. We will create your account and send you a welcome e-mail that provides instructions to access the project.\n\nThe person who signs up for a Magento Commerce (Cloud) account is referred to as the Project Owner. You receive a welcome e-mail that enables you to set up the project initially. You can also access your project by logging in to your account.\n\nYour welcome e-mail\nAfter you register for an account, Magento sends you a welcome e-mail at the address at which you registered. The e-mail contains a link to your Magento Commerce (Cloud) project.\n\nYou can also access your project by logging in to your account.\n\nGet started with the Project Web Interface\nWhen you sign up for a Trial Pro or Starter subscription plan, we provision your initial environment with a template Magento Commerce (Cloud) repository.\n\nWe provide a Project Web Interface for you to manage your project, add user accounts, and get started developing your store(s). This interface provides a UI for the Project Owner, Technical Admin, and developers to manage all environments and branches, environment variables, environment settings, and routes.\n\nFor non-Trial projects, the Project Owner needs to Prepare project environments:\n\n\n  Create the project\n  Add user accounts to invite developers to the project\n  Generate and provide Magento authentication keys to added accounts\n  Add admin variables to the Project\n  Review credentials for integrated services\n\n\nWe recommend creating a user account with Super User access as your Technical Admin. With super user access, they can help add user accounts, manage branches, and configure environments.\n\n\n\nSign up for Magento status\nWe provide an Magento Commerce (Cloud) environment and service status site. Anyone working on your site and project can subscribe on the site for email notifications and updates. We recommend subscribing and adding a bookmark to check the page daily or as needed.\n\nThe site location is https://status.magento.cloud/. Scroll to the bottom and click Subscribe at the bottom of the page. Complete the prompts with your email address and types of notifications you want to receive.\n\nThe page lists all component and service status. Any issues, updates, and notices are displayed below these status tables by date. For example, any slow issues, outages, or upgraded services are listed with important information and any updates as available.\n\n\n\nAccess your Magento Admin panel\nWhen you initially create your project, you can access the Magento Admin panel to add users, configure your store, and more. To initially access the Magento Admin, you have a couple of options.\n\n\n  \n    Access the Admin panel to change the password:\n\n    \n      \n        We send an email to the Project Owner with the link to your Magento Admin panel with instructions to click the Forgot Password link.\n      \n      \n        Or you can access a store URL available through the Project Web Interface. For the store URL, add /admin at the end. A login panel displays.\n      \n    \n  \n  Click the forgot Password link and complete the process to change the password.\n  Login to the Admin panel using the username Admin and newly changed password.\n\n\nIf you receive an error, you may need to add admin variables for ADMIN_EMAIL, ADMIN_USERNAME, and ADMIN_PASSWORD. Trial accounts should already have the ADMIN_EMAIL variable configured for them. For details, see Add admin variables for Admin access or Magento application environment variables.\n\nRelated topics\n\n  Prepare project environments\n  Manage your project\n  Starter architecture\n  Pro architecture\n  Welcome to Magento Commerce (Cloud)\n\n",
      "url": "/guides/v2.0/cloud/onboarding/onboarding-tasks.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-optional-html": {
      "title": "Optional software",
      "content": "Magento optional software\nWe strongly recommend you install NTP because otherwise, cron-related tasks might not perform properly. (Server dates could be in the past or future, for example.)\n\nThe other optional utilities discussed in this topic might assist you with your installation; however, they are not required to install or use Magento.\n\nInstalling and Configuring Network Time Protocol (NTP)\nNTP enables servers to synchronize their system clocks using globally available pool servers. Magento recommends you use NTP servers you trust, whether they are dedicated hardware solutions your internal network or external, public servers.\n\nIf you are deploying Magento on multiple hosts, NTP is a simple way to guarantee their clocks are all synchronized, no matter what time zone the servers are in. Also, cron-related tasks (such as indexing and transactional e-mails) depend on the server clock being accurate.\n\nSee one of the following sections:\n\n\n  Install and configure NTP on Ubuntu\n  Install and configure NTP on CentOS\n  Use NTP pool servers\n\n\nInstall and configure NTP on Ubuntu\n\nEnter the following command to install NTP:\n\napt-get install ntp\n\n\nContinue with Use NTP pool servers.\n\nInstall and configure NTP on CentOS\n\nTo install and configure NTP:\n\n\n  \n    Enter the following command to find the appropriate NTP software:\n\n    yum search ntp\n  \n  \n    Select a package to install. For example, ntp.x86_64.\n  \n  \n    Install the package.\n\n    yum -y install ntp.x86_64\n  \n  \n    Enter the following command so that NTP starts when the server starts.\n\n    chkconfig ntpd on\n  \n  \n    Continue with the next section.\n  \n\n\nUse NTP pool servers\nSelecting pool servers is up to you. If you use NTP pool servers, ntp.org recommends you use pool servers that are close to your servers’ time zone as discussed on the NTP pool project help page. If you have a private NTP server that is available to all hosts in your Magento deployment, you can use that server instead.\n\n\n  \n    Open /etc/ntp.conf in a text editor.\n  \n  \n    Look for lines similar to the following:\n\n    server 0.centos.pool.ntp.org\nserver 1.centos.pool.ntp.org\nserver 2.centos.pool.ntp.org\n  \n  \n    Replace those lines or add additional lines that specify your NTP pool server or other NTP servers. It’s a good idea to specify more than one.\n  \n  \n    An example of using three United States-based NTP servers follows:\n\n    server 0.us.pool.ntp.org\nserver 1.us.pool.ntp.org\nserver 2.us.pool.ntp.org\n  \n  \n    Save your changes to /etc/ntp.conf and exit the text editor.\n  \n  \n    Restart the service.\n\n    Ubuntu: service ntp restart\n\n    CentOS: service ntpd restart\n  \n  \n    Enter date to check the server’s date.\n\n    If the date is incorrect, make sure the NTP client port (typically, UDP 123) is open in your firewall.\n\n    Try the ntpdate [pool server host name] command. If it fails, search for the error it returns.\n\n    If all else fails, try rebooting the server.\n  \n\n\nCreate phpinfo.php\nphpinfo.php displays a large amount of information about PHP and its extensions.\n\n\n    Use phpinfo.php in a development system only. It can be a security issue in production.\n\n\nAdd the following code anywhere in your web server’s docroot:\n&lt;?php\n\n// Show all information, defaults to INFO_ALL\nphpinfo();\n\nFor more information, see the phpinfo manual page.\n\nTo view the results, enter the following URL in your browser’s location or address field:\n\nhttp://&lt;web server host or IP&gt;/phpinfo.php\n\n\nIf a 404 (Not Found) error displays, check the following:\n\n\n  Start the web server if necessary.\n  \n    Make sure your firewall allows traffic on port 80.\n\n    Help for Ubuntu\n\n    Help for CentOS\n  \n\n\nInstall phpmyadmin\nphpmyadmin is an easy-to-use, free database administration utility. You can use it to check and manipulate the contents of your database. You must log in to phpmyadmin as the MySQL database administrative user.\n\nFor more information about phpmyadmin, see the phpmyadmin home page.\n\nFor more detailed information about installation, see the phpmyadmin installation documentation.\n\n\n    Use phpmyadmin in a development system only. It can be a security issue in production.\n\n\nInstall phpmyadmin on Ubuntu\nTo install phpmyadmin on Ubuntu:\n\n\n  \n    Use the following command:\n\n    apt-get install phpmyadmin\n    \n  \n  \n    Follow the prompts on your screen to complete the installation.\n  \n  \n    To use phpmyadmin, enter the following URL in your browser’s address or location field:\n\n    http://&lt;web server host or IP&gt;/phpmyadmin\n    \n  \n  \n    When prompted, log in using your MySQL database root or administrative user’s user name and password.\n  \n\n\nInstall phpmyadmin on CentOS\nTo install phpmyadmin on CentOS:\n\n\n  \n    Download the epel RPM for the version of CentOS you’re using. A sample follows.\n\n    cd /tmp\nwget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nrpm -ivh epel-release-6-8.noarch.rpm\n    \n  \n  \n    Install phpmyadmin as follows:\n\n    yum -y install phpmyadmin\n    \n  \n  \n    Authorize access to phpmyadmin from your machine’s IP address.\n\n    Open the following file for editing:\n\n    vim /etc/httpd/conf.d/phpMyAdmin.conf\n    \n  \n  \n    Replace the following IP address with your IP address\n\n    Require ip localhost\n    \n\n    For example,\n\n    Require ip 192.51.100.101\n    \n  \n  \n    Replace the following IP with your IP address:\n\n    Allow from localhost\n    \n\n    For example,\n\n    Allow from 192.51.100.101\n    \n  \n  \n    Save your changes to /etc/httpd/conf.d/phpMyAdmin.conf and exit the text editor.\n  \n  \n    Restart Apache.\n\n    service httpd Restart\n    \n  \n  \n    To use phpmyadmin, enter the following command in your browser’s address or location field:\n\n    http://&lt;web server host or IP&gt;/phpmyadmin\n    \n  \n  \n    When prompted, log in using your MySQL database root or administrative user’s user name and password.\n  \n\n\nRelated topics:\n\n\n  Apache\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  MySQL\n  Configuring security options\n  How to get the Magento software\n\n",
      "url": "/guides/v2.0/install-gde/prereq/optional.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-out-of-memory-html": {
      "title": "Out of memory errors",
      "content": "Sometimes when you attempt to install or update, you can encounter an error due to your system running out of physical memory. We recommend you create a swap file to avoid this error.\n\nSymptom\nWhen installing or updating the Magento application or components like extensions, themes, or language packages, an error similar to the following displays:\n\nCould not complete update {\"components\":[\n{\"name\":\"magento/module-bundle-sample-data\",\"version\":\"100.1.0\"}\n]} successfully: proc_open(): fork failed - Cannot allocate memory\n\n\nThe error proc_open(): fork failed - Cannot allocate memory can also display on the command line.\n\nDescription\nWe recommend you allocate 2GB of memory to PHP to make sure your installation or upgrade succeeds. The error might mean you have exhausted the physical memory in your machine and your system has no swap file available. At minimum, we recommend you have at least 2GB of RAM and an enabled swap file.\n\nSolution\nFirst, make sure you allocated 2GB of memory to PHP; otherwise, your installation or upgrade might still run out of memory.\n\nIf you’ve already done that, create a swap file on your machine. A Linux machine uses swap space if it needs more memory resources and the RAM is full. The swap space is used for inactive pages in memory.\n\nThe following are suggestions only; other options might be available. Consult a network administrator or another knowledgeable resource before you continue. You must run the commands to create a swap file as a user with root privileges.\n\nSwap file on Ubuntu\nUse the fallocate command as discussed in these references:\n\n\n  How To Add Swap on Ubuntu 14.04 (Digitalocean)\n  How To Add Swap Space on Ubuntu 16.04 (Digitalocean)\n  SwapFaq (help.ubuntu.com)\n\n\nSwap file on CentOS\nUse the mkswap command as discussed in these references:\n\n\n  How To Add Swap on CentOS 6 (Digitalocean)\n  How To Add Swap on CentOS 7 (Digitalocean)\n  Swap Space (RedHat customer portal)\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/out-of-memory.html"
    }
    ,
  
    "guides-v2-0-mtf-create-test-out-of-the-box-html": {
      "title": "Create a test in the Functional Testing Framework",
      "content": "The out-of-the-box tests are the ready to use functional tests developed by Magento. You can find them in the &lt;magento2_root_dir&gt;/dev/tests/functional directory.\n\nCoverage\n\nTest coverage of the out-of-the-box test depends on a module which it belongs to. The out-of-the-box tests cover the basic functionality of the Magento application. In general, they cover the CRUD functionality for all basic entities (CRUD is an abbreviation for “create”, “read”, “update”, “delete” actions). The most important modules are covered better.\n\nUsage\n\nYou can use out-of-the-box tests in:\n\n\n  \n    Regression testing, to check that new changes don’t break existing Magento functionality\n  \n  \n    Sanity testing, to check the basic functionality after any Magento changes were made\n  \n  \n    Acceptance testing:\n    \n      in combination with your own tests\n      to test a new feature, to check that feature works and it doesn’t break functionality of the Magento application (all other tests passed)\n    \n  \n\n\nHow to use\n\nSee Run the test topic.\n\n\n\n",
      "url": "/guides/v2.0/mtf/create_test/out-of-the-box.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-package-package-html": {
      "title": "Package",
      "content": "Use Composer to package your module.\n\n\n  Using Composer to package a Magento 2 module\n  Use our validation tool to check your package before you distribute it.\n  Distribution on Magento Marketplace only. Upload your package to the Magento Marketplace\n\n",
      "url": "/guides/v2.0/extension-dev-guide/package/package.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-package-package-mktpl-html": {
      "title": "Upload your component to the Magento Marketplace",
      "content": "When component development is complete, upload your components to the Magento Marketplace using the instructions in the Magento Marketplace User Guide.\n",
      "url": "/guides/v2.0/extension-dev-guide/package/package_mktpl.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-package-package-module-html": {
      "title": "Package a component",
      "content": "Contents\n\n  Overview of packaging\n  Create a Magento Composer file\n  Package and publish your extension\n\n\nOverview of packaging\nThe Magento application uses Composer packages to distribute, install, and upgrade components in an application instance.\n\nTo package a component, you must:\n\n\n  Create a Magento Composer file (composer.json).\n  Register the component using registration.php\n  \n    Package and publish your component.\n\n    Use our validation tool to check your package before you distribute it.\n  \n\n\nCreate a Magento Composer file\nThe Magento composer.json file defines the name, requirements, version, and other basic information about the component. This file must be placed in the root directory of the module.\n\nThe composer.json uses Composer’s generic schema, with the following restrictions:\n\n\n  \n    \n      Element\n      Description\n    \n  \n  \n    \n      name\n      A fully-qualified component name, in the format &lt;vendor-name&gt;/&lt;component-name&gt;. All letters must be in lowercase. Use dashes in the &lt;component-name&gt; to separate words.\n    \n    \n      type\n      For modules, this value must be set to magento2-module. Other possible types are metapackage, magento2-theme, and magento2-language.\n    \n    \n      autoload\n      Specify necessary information to be loaded, such as registration.php. For more information, see Autoloading from Composer.\n    \n  \n\n\n\n\n  The following table discusses the component types that Magento Marketplace supports. The composer type column in the following table specifies the value of the type field you must add to composer.json for that type of component.\n\n  \n\n\nFriendly name\ncomposer.json type\nDescription\n\n\nMetapackage\nmetapackage\nTechnically, a Composer package type, not a Magento component type. A metapackage consists of only a composer.json that specifies a list of components and their dependencies. \nFor example, both Magento Open Source and Magento Commerce are metapackages.\n\n\nModule\nmagento2-module\nCode that modifies Magento application behavior. You can upload a single module to the Magento Marketplace or your module can be dependent on some parent package.\n\n\nTheme\nmagento2-theme\nCode that modifies the look and feel of the storefront or Magento Admin.\n\n\nLanguage package\nmagento2-language\nTranslations for the storefront or Admin.\n\n\n\n\n  Using metapackages\n  Metapackages allow you to group an extension that consists of multiple packages into a cohesive unit. This works exactly as described in standard composer.json documentation. If you have an extension that uses more than one package you must use a metapackage as the root package. Otherwise you should not use metapackage. A metapackage that you submit to Magento Marketplace should be a .zip file containing only the metapackage composer.json file.\n\n  \n  We recommend metapackages refer to specific component versions. Do not use wildcards to represent version ranges.\n\n\n  Metapackage example\n  The following example is a composer.json for a metapackage:\n\n  {\n    \"name\": \"magento/product-community-edition\",\n    \"description\": \"A sample metapackage\",\n    \"version\": \"2.0.0\",\n    \"type\": \"metapackage\",\n    \"require\": {\n        \"php\": \"~5.5.0|~5.6.0|~7.0.0\",\n        \"zendframework/zend-stdlib\": \"~2.4.6\",\n        \"zendframework/zend-code\": \"~2.4.6\",\n        \"zendframework/zend-server\": \"~2.4.6\",\n        \"zendframework/zend-soap\": \"~2.4.6\",\n        \"zendframework/zend-uri\": \"~2.4.6\",\n        \"zendframework/zend-validator\": \"~2.4.6\",\n        \"zendframework/zend-crypt\": \"~2.4.6\",\n        \"zendframework/zend-console\": \"~2.4.6\",\n        \"zendframework/zend-modulemanager\": \"~2.4.6\",\n        \"zendframework/zend-mvc\": \"~2.4.6\",\n        \"zendframework/zend-text\": \"~2.4.6\",\n        \"zendframework/zend-i18n\": \"~2.4.6\",\n        \"ext-ctype\": \"*\",\n        \"ext-gd\": \"*\",\n        \"ext-spl\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-simplexml\": \"*\",\n        \"ext-mcrypt\": \"*\",\n        \"ext-hash\": \"*\",\n        \"ext-curl\": \"*\",\n        \"ext-iconv\": \"*\",\n        \"ext-intl\": \"*\",\n        \"ext-xsl\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-openssl\": \"*\"\n        },\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ]\n}\n\n  Sample composer.json file\n  The following example is a composer.json file for a module:\n\n  {\n  \"name\": \"magento/sample-module-newpage\",\n  \"description\": \"A Magento 2 module that creates a new page\",\n  \"type\": \"magento2-module\",\n  \"version\": \"1.0.0\",\n  \"license\": [\n    \"OSL-3.0\",\n    \"AFL-3.0\"\n  ],\n  \"require\": {\n    \"php\": \"~5.5.0|~5.6.0|~7.0.0\",\n    \"magento/framework\": \"~100.0.4\"\n  },\n  \"autoload\": {\n    \"files\": [ \"registration.php\" ],\n    \"psr-4\": {\n      \"Magento\\\\SampleNewPage\\\\\": \"\"\n    }\n  }\n}\n\n  Package and publish your extension\n  Create a package of your extension by performing a zip operation on the directory with your extension (excluding unnecessary directories). For example:\n\n  zip -r vendor-name_package-name-1.0.0.zip package-path/ -x 'package-path/.git/*'\n  \n\n  Use alphanumeric characters for the package filename with dashes to separate words. Do not use whitespaces.\n\n  Magento can retrieve your extension package from any valid GitHub URL.\n\n  \n\n  \n\n  Third party repositories are supported.\n\n\n  Hosting on GitHub and Packagist\n  Prerequisite: git must be set up on your machine.\n\n  \n    Navigate to your component directory, with the composer.json file in the root, and make it a new git repository. See the GitHub documentation for details.\n    When you have committed and pushed your component to your GitHub repository, you can either:\n      \n        Use Composer to refer to it directly, or\n        Use the following steps to refer to the package through Packagist.\n      \n      \n        Register an account at packagist.org.\n        Click the Submit Package button and paste your GitHub repository link. Packagist automatically gathers the information from the component’s composer.json file and link it to the GitHub repository, allowing you to reference the package as vendor/module without any additional repository information, because this is required solely using GitHub.\n      \n    \n  \n\n  Hosting on a private repository\n\n  \n\n  If you use the Setup Wizard, you must use the Magento Marketplace repository.\nA private repository can be used for development or private code but installation must be done with a command line interface (you can install a package that specifies a private repository only with a command line installation).\n\n\n  \n    Set up your own Composer packaging repository using a system such as Satis or Toran.\n    Create the package in a way similar to the described above.\n    Submit/register the package on your own repository. For example, it can be hosted as a reference to a code repository or submitted as a zip-archive.\n    To use the private packaging repository in a project, add the following to your composer.jsonfile:\n  \n\n  {\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": [repository url here]\n        }\n    ]\n}\n\n  All packages on the private repository can now be referenced within the require field.\n\n  \n\n",
      "url": "/guides/v2.0/extension-dev-guide/package/package_module.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-page-caching-html": {
      "title": "Page caching",
      "content": "\n\n  Caching is one of the most effective ways to improve website performance. Generally speaking, there are two methods of caching content:\n\n  \n    Client-side (browser)\n    Server-side\n  \n\n  Retrieving stored (cached) content from a previous request for the same client instead of requesting files from your server every time someone visits your site is a more efficient use of network bandwidth.\n\n  The Magento page cache library contains a simple PHP reverse proxy that enables full page caching out of the box. A reverse proxy acts as an intermediary between visitors and your application and can reduce the load on your server.\n\n  We recommend using Varnish, but you can use Magento’s default caching mechanism instead, which stores cache files in any of the following:\n\n  \n    File system (You don’t need to do anything to use file-based caching.)\n    Database\n    Redis\n  \n\n  Cacheable and uncacheable pages\n  Cacheable and uncacheable are terms we use to indicate whether or not a page should be cached at all. (By default, all pages are cacheable.) If any block in a layout is designated as uncacheable, the entire page is uncacheable.\n\n  To create an uncacheable page, mark any block on that page as uncacheable in the layout using cacheable=\"false\".\n\n  Examples of uncacheable pages include the compare products, cart, checkout pages, and so on.\n\n  Example\n\n  \n    Do not configure content pages (i.e., catalog, product, and CMS pages) to be uncacheable. Doing so has an adverse affect on performance.\n  \n\n  Public and private content\n  Reverse proxies serve “public” or shared content to more than one user. However, most Magento websites generate dynamic and personalized “private” content that should only be served to one user, which presents unique caching challenges. To address these challenges, Magento can distinguish between two types of content:\n\n  \n    \n      Public - Public content is stored server side in your reverse proxy cache storage (e.g., file system, database, Redis, or Varnish) and is available to multiple customers. Examples of public content include header, footer, and category listing.\n    \n    \n      Private - Private content is stored client side (e.g., browser) and is specific to an individual customer. Examples of private content include wishlist, shopping cart, customer name, and address. You should limit stored private content to a small portion of the page’s total content.\n    \n  \n\n  \n    Only HTTP GET and HEAD requests are cacheable. For more information about caching, see RFC-2616 section 13.\n  \n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/page-caching.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-pagegrid-pagegrid-html": {
      "title": "Admin Page Grids",
      "content": "In the Magento Admin, a grid is used on all pages to establish global layouts for page templates. The grid assigns a set number of columns and rows for a page, and designers can create a layout by dividing the columns into sections, where design patterns and content can be placed.\n\nPage Grid\n\n\n\tA 12-column fluid-width content grid is placed next to the page’s 1-column fixed-width left navigation\n\tThe 12-column grid’s minimum width spans 984px. The grid expands its layout across larger screens.\n\tFor views smaller than 984px, a page’s layout doesn’t change as the page shrinks to fit smaller screen widths.\n\n\n\n\nSlide-Out Grid\n\nA Slide-out panel, similar to a modal window, breaks apart and simplifies a complex subtask that is included within a primary task.\n\nFor example:\n\n\tOn a product details form page, a user clicks \"Add Attribute\".\n\tA panel slides over the parent page and shows \"Add Attribute\" functionality.\n\tWhen the user finishes adding attributes, the panel disappears, and the user returns the \t\tproduct details form page.\n\n\nLayout and behavior: When a panel spawns, it slides from right to left atop and almost completely over the parent page. A narrow gutter of space remains at left, showing the left navigation and a small sliver of the parent page.\n\nStandard layout within the edges of a browser screen\n\n\n\n(Panel position in relation to browser edge)\n\nSpacing: Slide-out content is contained in a 12-column page grid, with additional 15px padding on the left edge. The gutter spacing at left is fluid, based on browser width.\n\n\n\n(Nested page-grid with additional padding)\n\nNested Slide-outs: For multiple panels displayed, additional gutter space is used at left to show a small sliver of a Slide-out below another Slide-out.\n\n\n",
      "url": "/guides/v2.0/design-styleguide/pagegrid/pagegrid.html"
    }
    ,
  
    "guides-v2-0-mtf-features-parallel-execution-html": {
      "title": "Parallel execution flow with the Functional Testing Framework",
      "content": "Overview\n\nParallel execution is applicable for test suites only. It decreases the time of testing due to distribution of test cases into multiple threads. A test case cannot be split between different threads. Parallel execution can use one or more copies of the Magento application under test (Magento instances).\n\nA general mechanism is:\n\n\n  The FTF creates the list of all test cases in a test suite.\n  The FTF creates the required quantity of sessions corresponding to the quantity of threads defined in &lt;magento2_root_dir&gt;/dev/tests/functional/phpunit.xml.\n  The FTF distributes test cases between sessions. When a sessions is free, a new test case from the queue runs.\n\n\nComparatively to the common testing flow\n\n\n\nyou can run a test suite using parallel execution flow with one Magento instance\n\n\n\nor run a test suite using parallel execution flow with multiple Magento instances.\n\n\n\nSet up parallel execution\n\nTo set up a parallel execution flow, add Magento instances to &lt;magento2_root_dir&gt;/dev/tests/functional/phpunit.xml in the following format:\n\n&lt;php&gt;\n    ...\n    &lt;env name=\"app_instances\" value=\"&lt;quantity of the Magento instances&gt;\" /&gt;\n    &lt;env name=\"app_frontend_url_&lt;index number of the Magento instance&gt;\" value=\"&lt;frontend URL of the Magento instance&gt;\" /&gt;\n    &lt;env name=\"app_backend_url_&lt;index number of Magento instance&gt;\" value=\"&lt;backend URL of the Magento instance&gt;\" /&gt;\n    ...\n&lt;/php&gt;\n\n\n    The default elements \"app_frontend_url\" and \"app_backend_url\" must be added obligatory. Otherwise FTF returns an error. The default instances are ignored if \"app_instances\" element is present.\n\n\nParallel execution flow with one Magento instance\n\nParallel execution flow with one Magento instance should be used with a caution. In this mode, test cases are executed simultaneously and can conflict with each other (for example, when different tests set the same parameter in different states).\n\n\n    Parallel execution flow with one Magento instance can cause conflict between tests running at the same time.\n\n\nThe following example shows a setup configuration of the flow with one Magento instance.\n\n&lt;php&gt;\n    ...\n    &lt;env name=\"app_frontend_url\" value=\"http://example.com/magento2/index.php/\" /&gt;            // The default frontend instance. Ignored by the FTF.\n    &lt;env name=\"app_backend_url\" value=\"http://example.com/magento2/index.php/backend/\" /&gt;     // The default backend instance. Ignored by the FTF.\n\n    &lt;env name=\"app_instances\" value=\"3\" /&gt;\n    &lt;env name=\"app_frontend_url_0\" value=\"http://example.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_frontend_url_1\" value=\"http://example.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_frontend_url_2\" value=\"http://example.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_backend_url_0\" value=\"http://example.com/magento2/index.php/backend/\" /&gt;\n    &lt;env name=\"app_backend_url_1\" value=\"http://example.com/magento2/index.php/backend/\" /&gt;\n    &lt;env name=\"app_backend_url_2\" value=\"http://example.com/magento2/index.php/backend/\" /&gt;\n    ...\n&lt;/php&gt;\n\nParallel execution flow with multiple Magento instances\n\nThe following example shows a setup configuration of the flow with three Magento instances.\n\n&lt;php&gt;\n    ...\n    &lt;env name=\"app_frontend_url\" value=\"http://example.com/magento2/index.php/\" /&gt;            // The default frontend instance. Ignored by the FTF.\n    &lt;env name=\"app_backend_url\" value=\"http://example.com/magento2/index.php/backend/\" /&gt;     // The default backend instance. Ignored by the FTF.\n\n    &lt;env name=\"app_instances\" value=\"3\" /&gt;\n    &lt;env name=\"app_frontend_url_0\" value=\"http://example_1.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_frontend_url_1\" value=\"http://example_2.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_frontend_url_2\" value=\"http://example_3.com/magento2/index.php/\" /&gt;\n    &lt;env name=\"app_backend_url_0\" value=\"http://example_1.com/magento2/index.php/backend/\" /&gt;\n    &lt;env name=\"app_backend_url_1\" value=\"http://example_2.com/magento2/index.php/backend/\" /&gt;\n    &lt;env name=\"app_backend_url_2\" value=\"http://example_3.com/magento2/index.php/backend/\" /&gt;\n    ...\n&lt;/php&gt;\n\nRun parallel execution flow\n\nTo run parallel execution flow, you must configure and run a test suite and corresponding Magento instances.\n\nRun a test suite:\n\ncd phpunit &lt;magento2_root_dir&gt;/dev/tests/functional\nvendor/bin/phpunit testsuites/Magento/Mtf/TestSuite/InjectableTests.php\n\n\n\n",
      "url": "/guides/v2.0/mtf/features/parallel_execution.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-partial-caching-html": {
      "title": "Partial caching",
      "content": "Magento uses Zend_Cache to interact with the cache storage. However, Magento also has the Magento\\Cache library for implementing Magento-specific caching. These topics discuss how to configure caching and cache types.\n\n\n\tBy default, file system caching is enabled; no configuration is necessary to use it. This means the cache is located under &lt;your Magento install dir&gt;/var.\n\n\nTo change the cache configuration, edit &lt;your Magento install dir&gt;/app/etc/env.php.\n\nThe cache configuration is an associative array similar to the following:\n\n'cache_types' =&gt;\n\tarray (\n\t\t'config' =&gt; 1,\n\t\t'layout' =&gt; 1,\n\t\t'block_html' =&gt; 1,\n\t\t'collections' =&gt; 1,\n\t\t'db_ddl' =&gt; 1,\n\t\t'eav' =&gt; 1,\n\t\t'full_page' =&gt; 1,\n\t\t'translate' =&gt; 1,\n\t\t'config_integration' =&gt; 1,\n\t\t'config_webservice' =&gt; 1,\n\t\t'config_integration_api' =&gt; 1,\n\t),\n);\n\nThe preceding lists all cache types and shows they are all enabled.\n\nMore information about caching\nThe following topics discuss how to set up caching:\n\n\n  Create a cache type\n  Create or extend configuration types\n  Associate cache frontends with cache types\n  Low-level cache options\n  Configure and use Varnish\n  Configure Redis\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/partial-caching.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-payment-gateway-intro-html": {
      "title": "Magento payment provider gateway",
      "content": "What is Magento payment provider gateway\nThe Magento payment provider gateway is a mechanism that allows you to integrate your stores with payment service providers. As a result, you can create and handle transactions based on order details.\n\nThe following diagram shows a simplified interaction flow between Magento sales management and external payment service provider using Magento payment provider gateway:\n\n\n\nMagento payment provider supports the following payment operations:\n\n\n  authorize: process authorization transaction; funds are blocked on customer account, but not withdrawn\n  sale: process authorization transaction and capture automatically, funds are withdrawn\n  capture: withdraw previously authorized amount\n  refund: return previously withdrawn customer funds\n  void: cancel transfer of funds from customer account\n\n\nWhat’s in this chapter\n\nThe topics of this chapter are conceptual and describe the components of the Magento payment provider gateway:\n\n\n  Payment provider gateway structure\n  Gateway Command\n  Gateway Command Pool\n  Request Builder\n  Gateway Client\n  Response Validator\n  Response Handler\n\n\nTerms used\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\nMagento sales management\n\n\nMagento interfaces that provide the ability to create orders, invoices, and shipments.\n\n\n\n\nPayment service provider, payment provider, payment processor\n\n\n Online service for accepting electronic payments, like PayPal, Authorize.Net and so on.\n\n\n\n\nPayload\n\n\nData used for a transaction. Might include the following:\n\n\n payment details \n order items \n shipping, billing addresses \n customer details \n taxes \n merchant's payment provider API credentials \n\n\n\n\n\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/payment-gateway-intro.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-payment-gateway-structure-html": {
      "title": "Payment provider gateway structure",
      "content": "The following diagram shows the basic components of the Magento payment provider gateway:\n\n\n\nThe interaction between the payment gateway components looks like following:\n\n\n\nEach component from this scheme is described in the corresponding topic:\n\n\n  Gateway Command\n  Gateway Command Pool\n  Request Builder\n  Gateway Client\n  Response Validator\n  Response Handler\n\n\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/payment-gateway-structure.html"
    }
    ,
  
    "guides-v2-0-rest-performing-searches-html": {
      "title": "Search using REST APIs",
      "content": "POST, PUT, and DELETE requests to the REST Web API require the service method parameters to be in the body of the request. For example, to create a Customer, you would specify a JSON array (or XML structure) in the body of the message.\n\nFor search APIs that invoke a *Repository::getList(SearchCriteriaInterface *) call, the searchCriteria must be specified in the URL of the GET request. The basic pattern for specifying the criteria is\n\nsearchCriteria[filter_groups][&lt;index&gt;][filters][&lt;index&gt;][field]=&lt;field_name&gt;\nsearchCriteria[filter_groups][&lt;index&gt;][filters][&lt;index&gt;][value]=&lt;search_value&gt;\nsearchCriteria[filter_groups][&lt;index&gt;][filters][&lt;index&gt;][condition_type]=&lt;operator&gt;\n\nwhere:\n\n\n  field is an attribute name.\n  value specifies the value to search for.\n  condition_type is one of the following values:\n\n\n\n  \n    \n      Condition\n      Notes\n    \n  \n  \n    \n      eq\n      Equals.\n    \n    \n      finset\n      A value within a set of values\n    \n    \n      from\n      The beginning of a range. Must be used with to\n    \n    \n      gt\n      Greater than\n    \n    \n      gteq\n      Greater than or equal\n    \n    \n      in\n      In. The value can contain a comma-separated list of values.\n    \n    \n      like\n      Like. The value can contain the SQL wildcard characters when like is specified.\n    \n    \n      lt\n      Less than\n    \n    \n      lteq\n      Less than or equal\n    \n    \n      moreq\n      More or equal\n    \n    \n      neq\n      Not equal\n    \n    \n      nin\n      Not in. The value can contain a comma-separated list of values.\n    \n    \n      notnull\n      Not null\n    \n    \n      null\n      Null\n    \n    \n      to\n      The end of a range. Must be used with from\n    \n  \n\n\n\n  condition_type is optional if the operator is eq.\n\n\nThe filter_groups array defines one or more filters. Each filter defines a search term, and the field, value, and condition_type of a search term must be assigned the same index number, starting with 0. Increment additional terms as needed.\n\nWhen constructing a search, keep the following in mind:\n\n\n  To perform a logical OR, specify multiple filters within a filter_groups.\n  To perform a logical AND, specify multiple filter_groups.\n  You cannot perform a logical OR across different filter_groups, such as (A AND B) OR (X AND Y). ORs can be performed only within the context of a single filter_groups.\n  You can only search top-level attributes.\n\n\nThe following sections provide examples of each type of search. These examples use the Magento Open Source sample data.\n\nSimple search\nThe Magento Open Source sample data uses the category_gear field to describe the categories for each item listed under Gear on sample store. Each item can be assigned to multiple categories. Electronics are assigned the code 86. The following example returns all gear tagged as electronics.\n\nGET http://&lt;magento_host&gt;/rest/V1/products/?\nsearchCriteria[filter_groups][0][filters][0][field]=category_gear&amp;\nsearchCriteria[filter_groups][0][filters][0][value]=86&amp;\nsearchCriteria[filter_groups][0][filters][0][condition_type]=finset\n\nThe system creates an array, as shown in the following pseudo-code.\n\n\nsearchCriteria =&gt; [\n  'filterGroups' =&gt; [\n    0 =&gt; [\n      'filters' =&gt; [\n         0 =&gt; [\n           'field' =&gt; 'category_gear',\n           'value' =&gt; '86',\n           'condition_type' =&gt; 'finset'\n         ]\n      ]\n    ]\n  ]\n\n\nThe query returns 9 items.\n\nSimple search using a timestamp\nThe following search finds all invoices created after the specified time (midnight, July 1 2016). You can set up a similar search to run periodically to poll for changes.\n\nGET http://&lt;magento_host&gt;/rest/V1/invoices?\nsearchCriteria[filter_groups][0][filters][0][field]=created_at&amp;\nsearchCriteria[filter_groups][0][filters][0][value]=2016-07-01 00:00:00&amp;\nsearchCriteria[filter_groups][0][filters][0][condition_type]=gt\n\nLogical OR search\nThe following example searches for all products whose names contain the string Leggings or Parachute. The instances of %25 in the example are converted into the SQL wildcard character %.\n\nGET http://&lt;magento_host&gt;/index.php/rest/V1/products?\nsearchCriteria[filter_groups][0][filters][0][field]=name&amp;\nsearchCriteria[filter_groups][0][filters][0][value]=%25Leggings%25&amp;\nsearchCriteria[filter_groups][0][filters][0][condition_type]=like&amp;\nsearchCriteria[filter_groups][0][filters][1][field]=name&amp;\nsearchCriteria[filter_groups][0][filters][1][value]=%25Parachute%25&amp;\nsearchCriteria[filter_groups][0][filters][1][condition_type]=like\n\nThe system creates an array, as shown in the following pseudo-code.\n\n\nsearchCriteria =&gt; [\n  'filterGroups' =&gt; [\n    0 =&gt; [\n      'filters' =&gt; [\n         0 =&gt; [\n           'field' =&gt; 'name',\n           'value' =&gt; '%25Leggings%25',\n           'condition_type' =&gt; 'like'\n         ]\n         1 =&gt; [\n           'field' =&gt; 'name',\n           'value' =&gt; '%25Parachute%25',\n           'condition_type' =&gt; 'like'\n         ]\n      ]\n    ]\n  ]\n\n\nThe search returns 14 products that contain the string Leggings in the name field and 14 products that contain the string Parachute.\n\nLogical AND search\nThis sample searches for women’s shorts that are size 31 and costs less than $30. In the CE sample data, women’s shorts have a sku value that begins with WSH. The sku also contains the size and color, such as WSH02-31-Yellow.\n\nGET http://&lt;magento_host&gt;/rest/V1/products?\nsearchCriteria[filter_groups][0][filters][0][field]=sku&amp;\nsearchCriteria[filter_groups][0][filters][0][value]=WSH%2531%25&amp;\nsearchCriteria[filter_groups][0][filters][0][condition_type]=like&amp;\nsearchCriteria[filter_groups][1][filters][0][field]=price&amp;\nsearchCriteria[filter_groups][1][filters][0][value]=30&amp;\nsearchCriteria[filter_groups][1][filters][0][condition_type]=lt\n\nThe system creates an array, as shown in the following pseudo-code.\n\n\nsearchCriteria =&gt; [\n  'filterGroups' =&gt; [\n    0 =&gt; [\n      'filters' =&gt; [\n         0 =&gt; [\n           'field' =&gt; 'sku',\n           'value' =&gt; 'WSH%31%',\n           'condition_type' =&gt; 'like'\n         ]\n    1 =&gt; [\n      'filters' =&gt; [\n         0 =&gt; [\n           'field' =&gt; 'price',\n           'value' =&gt; '30',\n           'condition_type' =&gt; 'lt'\n         ]\n      ]\n    ]\n  ]\n\nThe query returns 9 items.\n\nLogical AND and OR search\n\nThis sample is similar the Logical AND sample. It searches the skus for women’s shorts (WSH%) or pants (WP%)in size 29. The system performs two logical ANDs to restrict the results to those that cost from $40 to $49.99\n\nGET http://&lt;magento_host&gt;/rest/V1/products?\nsearchCriteria[filter_groups][0][filters][0][field]=sku&amp;\nsearchCriteria[filter_groups][0][filters][0][value]=WSH%2529%25&amp;\nsearchCriteria[filter_groups][0][filters][0][condition_type]=like&amp;\nsearchCriteria[filter_groups][0][filters][1][field]=sku&amp;\nsearchCriteria[filter_groups][0][filters][1][value]=WP%2529%25&amp;\nsearchCriteria[filter_groups][0][filters][1][condition_type]=like&amp;\nsearchCriteria[filter_groups][1][filters][0][field]=price&amp;\nsearchCriteria[filter_groups][1][filters][0][value]=40&amp;\nsearchCriteria[filter_groups][1][filters][0][condition_type]=from&amp;\nsearchCriteria[filter_groups][2][filters][0][field]=price&amp;\nsearchCriteria[filter_groups][2][filters][0][value]=49.99&amp;\nsearchCriteria[filter_groups][2][filters][0][condition_type]=to\n\nThe query returns 37 items.\n\nOther search criteria\nThe following searchCriteria can be used to determine the sort order and the number of items to return.\n\n\n  \n    searchCriteria[sortOrders][&lt;index&gt;][field]=&lt;field-name&gt; - Specifies the field to sort on. By default, search results are returned in descending order. You can sort on multiple fields. For example, to sort on price first and then by name, call searchCriteria[sortOrders][0][field]=price&amp;searchCriteria[sortOrders][1][field]=name.\n  \n  \n    searchCriteria[sortOrders][&lt;index&gt;][direction]=ASC | DESC - Specifies whether to return results in ascending (ASC) or descending (DESC) order. To expand the previous example and sort the price fields in descending order and the name fields in ascending order, call searchCriteria[sortOrders][0][field]=price&amp;searchCriteria[sortOrders][1][field]=name&amp;searchCriteria[sortOrders][1][direction]=ASC.\n  \n  \n    searchCriteria[pageSize] - Specifies the maximum number of items to return. The value must be an integer. If the pageSize is not specified, the system returns all matches.\n  \n  \n    searchCriteria[currentPage] - Returns the current page.\n  \n\n",
      "url": "/guides/v2.0/rest/performing-searches.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-persist-layer-html": {
      "title": "Persistence layer",
      "content": "Magento uses an active record pattern strategy for persistence. In this system, the model object contains a resource model that maps an object to one or more database rows. A resource model is responsible for performing functions such as:\n\n\n  \n    Executing all CRUD (create, read, update, delete) requests. The resource model contains the SQL code for completing these requests.\n  \n  \n    Performing additional business logic. For example, a resource model could perform data validation, start processes before or after data is saved, or perform other database operations.\n  \n\n\nIf you expect to return multiple items from a database query, then you would implement a special type of resource model known as a collection. A collection is a class that loads multiple models into an array-like structure based on a set of rules. This is similar to a SQL WHERE clause.\n\nA simple resource model defines and interacts with a single table.\n\nHowever, some objects have a vast number of attributes, or they could have a set related objects that have varying numbers of attributes. In these cases, the objects are constructed using Entity-Attribute-Value (EAV) models.\n\nAny model that uses an EAV resource has its attributes spread out over a number of MySQL tables.\n\nThe Customer,Catalog and Order resource models use EAV attributes.\n\nRelated topics\n\nArchitectural diagrams\n\nArchitectural layers overview\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/persist_layer.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-php-centos-html": {
      "title": "PHP 5.5, 5.6, or 7.0&amp;mdash;CentOS",
      "content": "\n\n  If you must install both Apache and PHP, install Apache first.\n\n\nPHP versions supported\n\nMagento requires:\n\n\n\n  \n    \n      \n        7.0.0, 7.0.1\n        7.0.2\n        7.0.3–7.0.5\n        7.0.6–7.0.x\n        7.1.x\n      \n      \n        \n        \n        \n        \n        \n      \n    \n  \n\n  \n    \n      \n        5.6.x\n      \n      \n        \n      \n    \n  \n\n  \n    \n      \n        5.5.0–5.5.21\n        5.5.22–5.5.x\n      \n      \n        \n        \n      \n    \n  \n\n  \n    \n      \n        5.4.x\n      \n      \n        \n      \n    \n  \n\n  Help if you're just starting out\n  If you’re new to all this and need some help getting started, we suggest the following:\n\n  \n    Is the Magento software installed already?\n    What is the software that the Magento server needs to run?\n    What operating system is my server running?\n    How do I log in to my Magento server using a terminal, command prompt, or SSH?\n  \n\n  Verify PHP is installed\n  To verify if PHP is installed already, enter php -v. If PHP is installed, messages similar to the following display:\n\n  PHP 5.6.4 (cli) (built: Dec 20 2014 17:30:46)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\nwith Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\n  \n\n  \n\n  The preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n\n  If PHP is installed, continue with the next prerequisite, MySQL.\n\n  CentOS repositories\n  Linux systems provide software like PHP in one or more repositories. CentOS, unlike Ubuntu, has a set of officially recommended repositories. Other repositories are considered less safe for the reasons stated on the CentOS wiki.\n\n  We’re not aware that you can install PHP 5.5, 5.6, or 7.0 from a CentOS-recommended repository. Therefore, you must consider the following:\n\n  \n    \n      If you’re setting up a system that will be deployed in production, you should choose a hosting provider who uses repositories considered to be safe and reliable.\n\n      You should also consider upgrading to a later version of CentOS that has the desired PHP version in a recommended repository.\n    \n    \n      If you’re setting up a development system, you can use any repository you wish.\n    \n  \n\n  In this topic, we show how to install PHP using the Inline with Upstream Stable (IUS) repository, which is not on the CentOS recommended list. However, packages installed from IUS do not use the same names as CentOS-provided packages, so no existing system packages are replaced.\n\n  Before you continue, review their Getting Started topic.\n\n  \n    Magento does not officially recommend using the IUS repository. We discuss it here for example purposes only.\n\n\n  Continue with one of the following sections:\n\n  \n    PHP 7 on CentOS 6 or 7\n    PHP 5.6 on CentOS\n    PHP 5.5 on CentOS\n  \n\n  PHP 7 on CentOS\n  There is more than one way to install PHP 7.0.2 or later; the following is a suggestion only. Consult a reference for additional options.\n\n  To install PHP 7 on CentOS 6 or 7: \n  \n    CentOS 6. Enter the following commands in the order shown:\n\n    yum -y update\nyum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\nwget https://centos6.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\n    \n  \n  \n    CentOS 7. Enter the following commands:\n\n    yum install -y http://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm\nyum -y update\n    \n  \n  \n    Enter the following command:\n\n    yum -y install php70u php70u-pdo php70u-mysqlnd php70u-opcache php70u-xml php70u-mcrypt php70u-gd php70u-devel php70u-mysql php70u-intl php70u-mbstring php70u-bcmath php70u-json php70u-iconv php70u-soap\n    \n\n    \n  \t\tThe bcmath extension is required for Magento Commerce only.\n\n  \n  \n    Restart Apache: service httpd restart\n  \n  \n    Enter the following command to verify that PHP 7.x is installed:\n\n    php -v\n    \n\n    The following response indicates that PHP 7.0.3 is installed properly:\n\n    PHP 7.0.3 (cli) (built: Feb  4 2016 08:51:10) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\nwith Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    \n\n    \n\n \t The preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n  \n  \n    Continue with Required PHP settings.\n  \n\n\n\n  PHP 5.6 on CentOS 6 or 7\n  There is more than one way to install PHP 5.6 on CentOS; the following is a suggestion only. Consult a reference for additional options.\n\n  To install PHP 5.6 on CentOS 6 or 7: \n  \n    CentOS 6. Enter the following commands in the order shown:\n\n    yum -y update\nyum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\nwget https://centos6.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\nyum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath php56u-soap\n    \n\n    \n  \t\tThe bcmath extension is required for Magento Commerce only.\n\n  \n  \n    CentOS 7. Enter the following commands in the order shown:\n\n    yum -y update\nyum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nwget https://centos7.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\nyum -y install php56u php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-bcmath php56u-soap\n    \n\n    \n  \t\tThe bcmath extension is required for Magento Commerce only.\n\n  \n  \n    Restart Apache: service httpd restart\n  \n  \n    Enter the following command to verify that PHP 5.6 is installed:\n\n    php -v\n    \n\n    The following response indicates that PHP 5.6 is installed properly:\n\n    PHP 5.6.18 (cli) (built: Feb  4 2016 09:29:52)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\nwith Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    \n\n    \n\n \t The preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n  \n  \n    Continue with Required PHP settings.\n  \n\n\n\n  PHP 5.5 on CentOS 6\n  There is more than one way to upgrade CentOS 6 to PHP 5.5; the following is a suggestion only. Consult a reference for additional options.\n\n  To install PHP 5.5 on CentOS 6: \n  \n    Enter the following commands in the order shown.\n\n    yum -y update\nyum -y install epel-release\nwget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\nwget https://centos6.iuscommunity.org/ius-release.rpm\nrpm -Uvh ius-release*.rpm\nyum -y update\nyum -y install php55u php55u-opcache php55u-xml php55u-mcrypt php55u-gd php55u-devel php55u-mysql php55u-intl php55u-mbstring php55u-bcmath php55u-soap\n    \n\n    \n  \t\tThe bcmath extension is required for Magento Commerce only.\n\n  \n  \n    Enter the following command to verify the version:\n\n    php -v\n    \n\n    The following messages display:\n\n    PHP 5.5.32 (cli) (built: Feb  4 2016 09:30:35)\nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies\nwith Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies\n    \n  \n  Restart Apache: service httpd restart\n  Continue with Required PHP settings.\n\n\n\n  Related topics\n\n  \n    PHP 5.5, 5.6, or 7.0—Ubuntu\n    Apache\n    MySQL\n    Configuring security options\n    Installing optional software\n    How to get the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/php-centos.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-php-parent-html": {
      "title": "PHP",
      "content": "\n",
      "url": "/guides/v2.0/install-gde/prereq/php-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-php-settings-html": {
      "title": "Required PHP settings",
      "content": "This topic discusses how to set required PHP options.\n\nAbout required and recommended PHP options: \n  \n    Set the system time zone for PHP; otherwise, errors like the following display during the installation and time-related operations like cron might not work:\n\n    PHP Warning:  date(): It is not safe to rely on the system's timezone settings. [more messages follow]\n    \n  \n  \n    Set always_populate_raw_post_data = -1\n\n    always_populate_raw_post_data is deprecated in PHP 5.6 and is dropped in PHP 7.0.x. This setting causes PHP to always populate $HTTP_RAW_POST_DATA with raw POST data. Failure to set this properly in PHP 5.5 or 5.6 results in errors when connecting to the database.\n  \n  \n    Set the PHP memory limit.\n\n    Our detailed recommendations are:\n\n    \n      Compiling code or deploying static assets, 756M\n      Installing and updating Magento components from Magento Marketplace, 2G\n      Testing, 2G\n    \n  \n  \n    Disable asp_tags\n\n    If asp_tags are enabled, errors display when accessing PHTML templates.\n\n    asp_tags will be removed in PHP 7.\n  \n  \n    Enable opcache.save_comments, which is required for Magento 2.1 and later.\n\n    We recommend you enable the PHP OpCache for performance reasons. The OPcache is enabled in many PHP distributions.\n\n    Magento 2.1 and later use PHP code comments in the getDocComment validation call in the getExtensionAttributes method in Magento\\Framework\\Api\\ExtensionAttributesFactory.php.\n  \n\n\n\n    To avoid issues during installation and upgrade, we strongly recommend you apply the same PHP settings to both the PHP command-line configuration and to the PHP web server plug-in's configuration. For more information, see the next section.\n\n\n\nStep 1: Find PHP configuration files\nThis section discusses how you find the configuration files necesary to update required settings.\n\nTo find the PHP configuration file, php.ini: To find the web server configuration, run a phpinfo.php file in your web browser and look for the Loaded Configuration File as follows:\n\n\n\nTo locate the PHP command-line configuration, enter\n\nphp --ini\n\n\nUse the value of Loaded Configuration file.\n\n\n    If you have only one php.ini file, make the changes in that file. If you have two php.ini files, make the changes in all files. Failure to do so might cause unpredictable performance.\n\n\n\nTo find OPcache configuration settings: PHP OPcache settings are typically located either in php.ini or opcache.ini. The location might depend on your operating system and PHP version. The OPcache configuration file might have an [opcache] section or settings like opcache.enable.\n\nUse the following guidelines to find it:\n\n\n  \n    Apache web server:\n\n    For Ubuntu with Apache, OPcache settings are typically located in php.ini.\n\n    For CentOS with Apache or nginx, OPcache settings are typically located in /etc/php.d/opcache.ini\n\n    If not, use the following command to locate it:\n\n    sudo find / -name 'opcache.ini'\n    \n  \n  \n    nginx web server with PHP-FPM: /etc/php5/fpm/php.ini\n  \n\n\nIf you have more than one opcache.ini, modify all of them.\n\n\nStep 2: How to set PHP options\n\nTo set PHP options: \n  Open a php.ini in a text editor.\n  Locate your server’s time zone in the available time zone settings\n  \n    Locate the following setting and uncomment it if necessary:\n\n    date.timezone =\n    \n  \n  Add the time zone setting you found in step 2.\n  \n    Change the value of memory_limit to one of the values at the beginning of this section.\n\n    For example,\n\n    memory_limit=2G\n    \n  \n  \n    Required for PHP 5.6, recommended for PHP 5.5. Locate always_populate_raw_post_data, uncomment it if necessary, and set it as follows:\n\n    always_populate_raw_post_data = -1\n    \n  \n  \n    Locate the following setting:\n\n    asp_tags =\n    \n  \n  Make sure its value is set to Off.\n  Save your changes and exit the text editor.\n  Open the other php.ini (if they are different) and make the same changes in it.\n\n\n\nStep 3: Set OPcache options\n\nTo set opcache.ini options: \n  \n    Open your OpCache configuration file in a text editor:\n\n    \n      opcache.ini (CentOS)\n      php.ini (Ubuntu)\n      /etc/php5/fpm/php.ini (nginx web server (CentOS or Ubuntu))\n    \n  \n  Locate opcache.save_comments and uncomment it if necessary.\n  Make sure its value is set to 1.\n  Save your changes and exit the text editor.\n  \n    Restart your web server:\n\n    \n      Apache, Ubuntu: service apache2 restart\n      Apache, CentOS: service httpd restart\n      nginx, Ubuntu and CentOS: service nginx restart\n    \n  \n\n\n\nRelated topics\n\n\n  MySQL\n  Apache\n  PHP 5.5, 5.6, or 7.0—CentOS\n  Configuring security options\n  Installing optional software\n  How to get the Magento software\n\n\n",
      "url": "/guides/v2.0/install-gde/prereq/php-settings.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-php-ubuntu-html": {
      "title": "PHP 5.5, 5.6, or 7.0&amp;mdash;Ubuntu",
      "content": "\n\n  If you must install both Apache and PHP, install Apache first.\n\n\nPHP versions supported\nMagento requires:\n\n\n\n  \n    \n      \n        7.0.0, 7.0.1\n        7.0.2\n        7.0.3–7.0.5\n        7.0.6–7.0.x\n        7.1.x\n      \n      \n        \n        \n        \n        \n        \n      \n    \n  \n\n  \n    \n      \n        5.6.x\n      \n      \n        \n      \n    \n  \n\n  \n    \n      \n        5.5.0–5.5.21\n        5.5.22–5.5.x\n      \n      \n        \n        \n      \n    \n  \n\n  \n    \n      \n        5.4.x\n      \n      \n        \n      \n    \n  \n\n  \n\n  Magento no longer supports PHP 5.4.\n\n\n  Help if you're just starting out\n  If you’re new to all this and need some help getting started, we suggest the following:\n\n  \n    Is the Magento software installed already?\n    What is the software that the Magento server needs to run?\n    What operating system is my server running?\n    How do I log in to my Magento server using a terminal, command prompt, or SSH?\n  \n\n  Verify PHP is installed\n  To verify if PHP is installed already, enter php -v. If PHP is installed, messages similar to the following display:\n\n  PHP 5.6.4-1+deb.sury.org~precise+1 (cli) (built: Dec 21 2014 19:26:25)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\nwith Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\n  \n\n  \n\n  The preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n\n  If PHP is installed, continue with the next prerequisite, MySQL.\n\n  If PHP is not installed, see one of the following sections:\n\n  \n    PHP 7.0 on Ubuntu 14 or 16\n    PHP 5.6 on Ubuntu 14\n    PHP 5.5 on Ubuntu 14\n  \n\n  PHP 7.0 on Ubuntu 14 or 16\n\n  To install PHP 7 on Ubuntu 14: \n  \n    Enter the following commands in the order shown:\n\n    sudo apt-get -y update\nsudo add-apt-repository ppa:ondrej/php\nsudo apt-get -y update\nsudo apt-get install -y php7.0 libapache2-mod-php7.0 php7.0 php7.0-common php7.0-gd php7.0-mysql php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl php7.0-mbstring php7.0-zip php7.0-bcmath php7.0-iconv php7.0-soap\n    \n\n    \n  \t\tThe bcmath extension is required for Magento Commerce only.\n\n  \n  \n    Enter the following command to verify PHP 7 installed properly:\n\n    php -v\n    \n\n    Following is a sample response that indicates PHP 7.0.8 is installed:\n\n    PHP 7.0.8-2+deb.sury.org~trusty+1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n  with Zend OPcache v7.0.8-2+deb.sury.org~trusty+1, Copyright (c) 1999-2016, by Zend Technologies\n    \n\n    \n\n  \tThe preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n  \n  \n    Continue with Required PHP settings.\n  \n\n\n\n  PHP 5.6 on Ubuntu 14\n\n  To install PHP 5.6 or to upgrade from PHP 5.5 on Ubuntu 14: \n  \n    Enter the following commands in the order shown:\n\n    apt-get -y update\nadd-apt-repository ppa:ondrej/php\napt-get -y update\napt-get -y install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl php5.6-cli php5.6-mysql php5.6-gd php5.6-intl php5.6-xsl php5.6-zip php5.6-soap\n    \n  \n  \n    Enter the following command to verify PHP 5.6 installed properly:\n\n    php -v\n    \n\n    Following is a sample response that indicates PHP 5.6 is installed:\n\n    PHP 5.6.22-4+deb.sury.org~trusty+1 (cli)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\nwith Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    \n\n    \n\n  \t\tThe preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n  \n  \n    Continue with Required PHP settings.\n  \n\n\n\n  PHP 5.5 on Ubuntu 14\n\n  To install PHP 5.5 on Ubuntu 14: \n  \n    Enter the following commands in the order shown:\n\n    apt-get -y update\napt-get -y install php5 php5-mcrypt php5-curl php5-cli php5-mysql php5-gd php5-intl php5-xsl php5-soap\n    \n  \n  \n    Verify the PHP version by entering php -v. Messages similar to the following should display:\n\n    PHP 5.5.9-1ubuntu4.4 (cli) (built: Sep  4 2014 06:56:34)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nwith Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies\n    \n\n    \n    \n  \t\tThe preceding message confirms that the Zend OPcache is installed. We strongly recommend using the OPcache for performance reasons. If your PHP distribution does not come with the OPcache, see the PHP OPcache documentation.\n\n  \n  \n    Continue with Required PHP settings.\n  \n\n\n\n  Related topics\n\n  \n    MySQL\n    Apache\n    PHP 5.5, 5.6, or 7.0—CentOS\n    Configuring security options\n    Installing optional software\n    How to get the Magento software\n  \n\n",
      "url": "/guides/v2.0/install-gde/prereq/php-ubuntu.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-php-version-html": {
      "title": "PHP version readiness check issues",
      "content": "\n\n  PHP version readiness check issues\n  You might encounter the following issues with the PHP version readiness check:\n\n  \n    \n      The check fails because you’re using an unsupported PHP version.\n\n      To solve this issue, use one of the supported versions listed in our System Requirements.\n    \n    \n      The check reports the incorrect PHP version.\n\n      Typically, this happens only to advanced users who have multiple PHP versions installed. In some cases, the readiness check fails; in other cases, it might pass.\n    \n    \n      The PHP readiness check doesn’t display the PHP version as the following figure shows.\n\n      \n\n      This is a symptom of incorrect cron job setup. For more information, see Set up cron jobs.\n    \n  \n\n  PHP version is incorrect\n  If the PHP version reported by the readiness check is incorrect, it’s the result of a mismatch of PHP versions between the PHP CLI and the web server plug-in. Magento requires you to use one version of PHP for both the CLI (which runs cron) and the web server (which runs the Magento Admin, Component Manager, and System Upgrade).\n\n  We assume that if you have this issue, you’re an advanced user who has likely installed multiple versions of PHP on your system.\n\n  To resolve the issue, try the following:\n\n  \n    Restart your web server or php-fm.\n    Check the $PATH environment variable for multiple paths to PHP\n    Use the which php command to locate the first PHP executable in your path; if it’s not correct, remove it or create a symlink to the correct PHP version\n    Use a phpinfo.php page to collect more information\n    \n      Make sure you’re running a supported PHP version according to our System Requirements:\n\n      \n        Version 2.0\n        Version 2.1\n      \n    \n    Set the same PHP settings for both the PHP command line and the PHP web server plug-in as discussed in PHP configuration options\n  \n\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/php-version.html"
    }
    ,
  
    "guides-v2-0-howdoi-php-php-clear-dirs-html": {
      "title": "Clear directories during development",
      "content": "Contents\n\n  Overview of directory clearing\n  What directories to clear\n  How to clear the directories\n\n\nOverview of directory clearing\nWhile you’re developing Magento components (modules, themes, and language packages), your rapidly changing environment requires you to periodically clear certain directories and caches. Otherwise, your code runs with exceptions and won’t function properly.\n\nThis topic provides guidelines on what directories to clear and when to clear them.\n\n\n  All directories discussed in this topic are default locations. It's possible to customize these locations but doing so is beyond the scope of this topic.\n  \tThis topic is not comprehensive. Please help us improve it by clicking Edit this page on GitHub at the top of this page. Watch this page for updates.\n\n\nWhen you’re developing Magento components (modules, themes, and language packages), the following directories contain temporary or generated files you can clear periodically:\n\n\n\t\n\t\n\t\n\t\t\n\t\t\tDirectory\n\t\t\tWhat it contains\n\t\t\n\t\n\t\tvar/page_cache\n\t\tCached pages from the full page cache mechanism. (This directory is empty if you use a third-party HTTP accelerator like Varnish.)\n\t\n\t\n\t\tvar/cache\n\t\tAll cacheable objects except the page cache. (This directory is empty if you use a third-party cache storage like Redis.)\n\t\n\t\n\t\tvar/composer_home\n\t\tHome directory for the Setup Wizard artifacts. Typically, you shouldn't touch this directory; clear it only if you're an experienced developer and are familiar with the Magento plug-in.\n\t\t\tFor example, if the Component Manager or System Upgrade web-based utilities cannot find the correct components you can try clearing this directory; however, doing so adversely affects the performance of those utilities.\n\t\n\t\n\t\tvar/generation\n\t\tContains generated code.\n\t\n\t\n\t\tvar/di\n\t\tContains the compiled dependency injection configuration for all modules.\n\t\n\t\n\t\tvar/view_preprocessed\n\tMinified templates and compiled LESS (meaning LESS, CSS, and HTML).\n\t\n\n\n\nWhat directories to clear\nThe following table provides guidelines on what you should clear and when.\n\n\n\t\n\t\t\n\t\t\tFor this activity...\n\t\t\tyou should clear these directories\n\t\t\n\t\n\t\tChange a class if there is a plug-in related to it.\n\t\tA change that results in generated factories or proxies (for example, a non-existent factory declared in a class or a proxy declared in di.xml) \n\t\tvar/di, var/generation\n\t\n\t\n\t\tChange any di.xml\n\t\tvar/di, var/generation; also, run the code compiler again\n\t\n\t\n\t\tAdd, remove, enable, or disable modules\n\t\tvar/di, var/generation, var/cache, var/page_cache\n\t\n\t\n\t\tAdd or edit a layout or theme\n\t\tvar/view_preprocessed, var/cache, var/page_cache\n\t\n\t\n\t\tChange LESS or templates\n\t\tvar/view_preprocessed, var/cache, var/page_cache as well\n\t\n\t\n\t\tAdd or edit a CMS page, cacheable block, or use the Magento Admin to change the configuration\n\t\tvar/cache, var/page_cache\n\t\n\n\n\nHow to clear the directories\nTo only clear directories and not perform other actions, log in to the Magento server as the Magento file system owner and clear directories using a command like the following:\n\nrm -rf &lt;your Magento install dir&gt;/var/di/* &lt;your Magento install dir&gt;/var/generation/*\n\n\nYou can also use the following command-line tools clear some directories for you. These commands perform other tasks as well; consult the linked documentation for more details.\n\n\n\t\n\t\t\n\t\t\tTool name\n\t\t\tBrief description\n\t\t\tWhat it clears\n\t\t\n\t\n\t\tmagento setup:upgrade\n\t\tUpdates the Magento database schema and data.\n\t\tvar/di, var/generation\n\t\n\t\n\t\tmagento setup:di:compile\n\t\tGenerates code.\n\t\tvar/generation (after which compiles code again)\n\t\n\t\n\t\tmagento deploy:mode:set {mode}\n\t\tChanges from developer mode to production mode and vice versa.\n\t\tvar/di, var/generation, var/view_preprocessed\n\t\n\t\n\t\tmagento cache:clean [type]\n\t\tCleans the cache.\n\t\tvar/cache, var/page_cache\n\t\n\n\n",
      "url": "/guides/v2.0/howdoi/php/php_clear-dirs.html"
    }
    ,
  
    "guides-v2-0-howdoi-php-php-devs-html": {
      "title": "PHP Development",
      "content": "PHP development\n\n  Get to know Composer\n  Build a module\n  Validate a module\n  Package a module\n  Clear directories during development\n  Add CLI commands\n\n",
      "url": "/guides/v2.0/howdoi/php/php_devs.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-admin-placement-and-design-html": {
      "title": "Admin Panel Placement and Design",
      "content": "Overview\n\nMagento’s flexible platform lets you place an extension anywhere in the Admin panel. However, it can be difficult finding the right place for your extension and how it should look, so we’ve prepared the following guidelines to help.\n\nThings to Avoid\n\nWe discourage practices that diminish the user experience in the Admin. The following design decisions that have been seen in some extensions create a negative user experience and should be avoided.\n\nIcons in the Primary Navigation\nIcons should not be added to the primary navigation panel in the Admin. If every extension added its own icon to the primary navigation panel, the interface will quickly become cluttered and unusable.\n\nIcons should not be used in any of the navigation submenu panels to bring attention to your extension. Your navigation listing should conform to the look and feel of its surroundings and not look out of place.\n\nYour extension’s settings and configuration area is an appropriate place to use icons.\n\nFor more information about icon design and Magento’s icon library, see the article about  Iconography in the Admin Style Guide book.\n\nAdvertising in Navigation\nIt is not appropriate to use the Magento Admin navigation for marketing or to cross-sell extensions after your extensions has been installed in Magento. A new section is under proposal that will possibly be more suitable for marketing and advertising content.\n\nDo not use the name of your company or marketing jargon as part of an extension name or the extension name itself in the Admin. You should create a unique feature name that users will understand because people usually search for extensions by feature or function keywords, not by a company or brand name.\n\nPlacement guidelines for extension types\nFrom the list of extension types below, determine the type of extension you have and read the guidance for placement and style.\n\nThe names for the types of extensions listed below are for reference purposes only.\n\nStandard Connector\nThese extensions provide additional API over Magento’s existing API and is responsible for providing settings between Magento and another system.\n\nPlacement\n\nAll required settings for this connector type should appear in the Stores &gt; Settings &gt; Configuration section. The actual listings for these extension settings should appear after all of Magento’s listed settings. All the setting details and configurations should appear in the section to the right.\n\n\n\nStyle\n\n\n  The style of the listing for your settings should match the look of Magento’s listed settings.\n  Icons or images should not be used in the navigation listing for your settings.\n\n\n\n\nStore Feature Connector\nThese extensions are responsible for integrating with different systems and need additional\nsettings displayed under specific entries in the Store &gt; Settings &gt; Configuration section.\n\nPlacement\n\nThe settings for these extensions should be displayed under its respective parent section under the Store &gt; Settings &gt; Configuration section.\n\nFor example, if the extension is for Shipping, then you can place it under Store &gt; Settings &gt; Configuration &gt; Sales &gt; Shipping Settings.\n\n\n\n\n\nConnector with additional features\nThese extensions are responsible for integrating with different systems and need additional settings and configurations for synchronizing with these systems.\n\nPlacement\n\nIf all the settings for an extension can be consolidated into one section, then the extension can be added to one of the primary navigation’s submenu as links under the appropriate parent item. Avoid placing extension settings in multiple sections, such as the Configuration section and another related section.\n\nFor example, if your extension is related to the “Reports” functionality then its settings should appear as a link under the Report Section in the Primary navigation.\n\n\n\nStyle\n\n\n  The styles of the links in the admin should follow the same styles of the default Magento Navigation Links.\n  Do not introduce custom icons in the navigation submenus.\n\n\n\n\nFeature Extensions\n\nThese are extensions which provide additional functionality to Magento that do not already exist as a feature. These extensions usually demand an additional primary navigation item.\n\nPlacement\n\nThere will be a new, dedicated section designed for such exclusive extensions. When feature-level extensions are installed, those extensions will live under this section. The exact final name of this new section has not been decided (we welcome your feedback), but in the image below it is named Extensions.\n\n\n\n\n  The name and icon for this section is still TBD.\n  This new section is a future proposal, and we welcome feedback about if and how advertisements should be displayed here.\n\n\nSince this section is not yet available, you should place your extension in one of the previously mentioned areas where it would be the most appropriate.\n\n\n\nIntegrated Extensions\n\nThese are add-ons to existing Magento feature and might appear as a nested feature.\n\nPlacement\n\nAs these are integrated features no direct/indirect accessible links are available from the admin.\n\n\n\nCodebase Extensions\n\nThese extensions are created as a code and do not need to have a representation in the admin panel.\n\nPlacement\n\nAs these extensions do not have additional settings no direct/indirect accessible links are available from the admin.\n",
      "url": "/guides/v2.0/ext-best-practices/admin/placement-and-design.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-plugins-html": {
      "title": "Plugins (Interceptors)",
      "content": "Overview\nA plugin, or interceptor, is a class that modifies the behavior of public class functions by intercepting a function call and running code before, after, or around that function call. This allows you to substitute or extend the behavior of original, public methods for any class or interface.\n\nExtensions that wish to intercept and change the behavior of a public method can create a Plugin class which are referred to as plugins.\n\nThis interception approach reduces conflicts among extensions that change the behavior of the same class or method. Your Plugin class implementation changes the behavior of a class function, but it does not change the class itself. Because they can be called sequentially according to a configured sort order, these interceptors do not conflict with one another.\n\nLimitations\n\nPlugins cannot be used with any of the following:\n\n\n  Final methods\n  Final classes\n  Non-public methods\n  Static methods\n  __construct\n  Virtual types\n  Objects that are instantiated before Magento\\Framework\\Interception is bootstrapped\n\n\nDeclaring a plugin\n\nA plugin for a class object is declared in the di.xml file in your module.\n\n \n&lt;config&gt;\n    &lt;type name=\"{ObservedType}\"&gt;\n      &lt;plugin name=\"{pluginName}\" type=\"{PluginClassName}\" sortOrder=\"1\" /&gt;\n    &lt;/type&gt;\n&lt;/config&gt;\n\nYou must specify these elements:\n\n\n  type name: A class or interface which the plugin observes.\n  plugin name: An arbitrary plugin name that identifies a plugin. Also used to merge the configurations for the plugin.\n  plugin type: The name of a plugin’s class or its virtual type. Use the following naming convention when you specify this element: \\Vendor\\Module\\Plugin\\&lt;ModelName&gt;Plugin.\n\n\nThe following elements are optional:\n\n\n  plugin sortOrder: The order in which plugins that call the same method are run.\n  plugin disabled: To disable a plugin, set this element to true. The default value is false.\n    \n      Use this property to disable core or third-party plugins in your di.xml file.\n    \n  \n\n\nDefining a plugin\nA plugin is used to extend or modify a public method’s behavior by applying code before, after, or around that observed method.\n\nThe first argument for the before, after, and around methods is an object that provides access to all public methods of the observed method’s class.\n\nBefore methods\nBefore methods run prior to an observed method. These methods must have the same name as the observed method with ‘before’ as the prefix.\n\nYou can use before methods to change the arguments of an observed method by returning a modified argument. If there are multiple arguments, the method should return an array of those arguments. Returning null will indicate that the arguments for the observed method should not be modified.\n\nBelow is an example of a before method modifying the $name argument before passing it on to the observed setName method.\n\nnamespace My\\Module\\Plugin;\n\nclass ProductPlugin\n{\n    public function beforeSetName(\\Magento\\Catalog\\Model\\Product $subject, $name)\n    {\n        return ['(' . $name . ')'];\n    }\n}\n\nAfter methods\nAfter methods run following the completion of the observed method. These methods must have the same name as the observed method with ‘after’ as the prefix.\n\nThese methods can be used to modify the results of an observed method and are required to have a return value.\n\nBelow is an example of an after method modifying the return value $result of an observed methods call.\n\nnamespace My\\Module\\Plugin;\n\nclass ProductPlugin\n{\n    public function afterGetName(\\Magento\\Catalog\\Model\\Product $subject, $result)\n    {\n        return '|' . $result . '|';\n    }\n}\n\nAround methods\nAround methods are defined such that their code is run both before and after the observed method. This allows you to completely override a method. Around methods must have the same name as the observed method with ‘around’ as the prefix.\n\nBefore the list of the original method’s arguments, around methods receive a callable that will allow a call to the next method in the chain. When the callable is called, the next plugin or the observed function is called.\n\n\n  If the around method does not call the callable, it will prevent the execution of all the plugins next in the chain and the original method call.\n\n\nBelow is an example of an around method adding behavior before and after an observed method:\n\nnamespace My\\Module\\Plugin;\n\nclass ProductPlugin\n{\n    public function aroundSave(\\Magento\\Catalog\\Model\\Product $subject, callable $proceed)\n    {\n        $this-&gt;doSmthBeforeProductIsSaved();\n        $returnValue = $proceed();\n        if ($returnValue) {\n            $this-&gt;postProductToFacebook();\n        }\n        return $returnValue;\n    }\n}\n\nWhen you wrap a method which accepts arguments, your plugin must also accept those arguments and you must forward them when you invoke the proceed callable. You must be careful to match the original signature of the method with regards to default parameters and type hints.\n\nFor example, the following code defines a parameter of type SomeType which is nullable:\n\nnamespace My\\Module\\Model;\n\nclass MyUtility\n{\n    public function save(SomeType $obj = null)\n    {\n        //do something\n    }\n}\n\nIf you wrapped this method with a plugin like below:\n\nnamespace My\\Module\\Plugin;\n\nclass MyUtilityPlugin\n{\n    public function aroundSave(\\My\\Module\\Model\\MyUtility $subject, callable $proceed, SomeType $obj)\n    {\n      //do something\n    }\n}\n\nNote the missing = null. Now, if the original method was called with null PHP would throw a fatal error as your plugin does not accept null.\n\nIt is also worth noting that you are responsible for forwarding the arguments from the plugin to the proceed callable. If you are not using/modifying the arguments, you could use variadics and argument unpacking to achieve this simply:\n\nnamespace My\\Module\\Plugin;\n\nclass MyUtilityPlugin\n{\n    public function aroundSave(\\My\\Module\\Model\\MyUtility $subject, callable $proceed, ...$args)\n    {\n      //do something\n      $proceed(...$args);\n    }\n}\n\nPrioritizing plugins\n\nThe sortOrder property for plugins determine when their before, after, or around methods get called when several plugins are observing the same method.\n\nThe prioritization rules for ordering plugins:\n\n\n  \n    Prior to execution of the observed method, plugins will be executed from lowest to greatest sortOrder.\n\n    \n      During each plugin execution, the current plugin’s before method is executed first.\n      After the before plugin is executed, the current plugin’s around method will wrap and execute the next plugin or observed method.\n    \n  \n  \n    Following the execution of the observed method, plugins will be executed from greatest to lowest sortOrder.\n\n    \n      During each plugin execution, the current plugin will first finish executing its around method.\n      When the around method is complete, the plugin executes its after method before moving on to the next plugin.\n    \n  \n\n\nExample\n\nGiven the following plugins observing the same method with the following properties:\n\n\n  \n    \n       \n      PluginA\n      PluginB\n      PluginC\n    \n  \n  \n    \n      sortOrder\n      10\n      20\n      30\n    \n    \n      before\n      beforeDispatch()\n      beforeDispatch()\n      beforeDispatch()\n    \n    \n      around\n       \n      aroundDispatch()\n      aroundDispatch()\n    \n    \n      after\n      afterDispatch()\n      afterDispatch()\n      afterDispatch()\n    \n  \n\n\nThe execution flow will be as follows:\n\n\n  PluginA::beforeDispatch()\n  PluginB::beforeDispatch()\n  \n    PluginB::aroundDispatch() (Only the first half until callable is called)\n\n    \n      PluginC::beforeDispatch()\n      \n        PluginC::aroundDispatch() (Only the first half until callable is called)\n\n        \n          Action::dispatch()\n        \n      \n      PluginC::aroundDispatch() (Only the second half after callable is called)\n      PluginC::afterDispatch()\n    \n  \n  PluginB::aroundDispatch() (Only the second half after callable is called)\n  PluginB::afterDispatch()\n  PluginA::afterDispatch()\n\n\nConfiguration inheritance\n\nAll plugins added for interfaces and inherited classes will be added to classes that implement or inherit those classes and interfaces.\n\nPlugins defined in the global scope will be applied when the system is in a specific area (i.e. frontend, backend, etc). These global plugin configuration can also be extended or overridden via an area’s di.xml.\n\nFor example, the developer can disable a global plugin in the backend area by disabling it in the specific di.xml file for the backend area.\n\nRelated topics\n\n\n  Dependency injection\n  Events and observers\n\n\nRelated information\n\n\n  The Plugin Integration Test Kata by Magento contributor Vinai Kopp\n  The Around Interceptor Kata by Magento contributor Vinai Kopp\n\n",
      "url": "/guides/v2.0/extension-dev-guide/plugins.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-post-install-config-html": {
      "title": "Configure the Magento application",
      "content": "Now that you’ve finished installing the Magento application, you need to configure it. This topic provides some recommended configuration settings for Magento; the list is not complete so watch this space.\n\nSet up cron\ncron—the UNIX task scheduler—is critical to Magento’s day-to-day operations. It schedules things like reindexing, newsletters, e-mails, sitemaps, and so on.\n\nImmediately after finishing your Magento installation, set up a crontab for the Magento file system owner.\n\n\n\n  Prerequisites\n  Magento uses cron for two sets of tasks, and for each, cron can run with a different configuration:\n\n  \n    \n      PHP command-line configuration: The general cron job that reindexes indexers, generates e-mails, generates the sitemap, and so on.\n\n      You can find the command-line configuration using the command php --ini.\n    \n    \n      Web server PHP plug-in configuration: Two other cron jobs are used by the Component Manager and System Upgrade utilities.\n\n      You can find the web server plug-in configuration using phpinfo.php.\n    \n  \n\n  \n    \n      To avoid issues during installation and upgrade, we strongly recommend you apply the same PHP settings to both the PHP command-line configuration and to the PHP web server plug-in’s configuration. \nFor more information, see Required PHP settings.\n      \n        In a multi-node system, crontab can run on only one node.\n\n        This applies to you only if you set up more than one webnode for reasons related to performance or scalability.\n      \n    \n  \n\n  Find the PHP binary and php.ini path\n  To display the path to your PHP binary, enter\n\n  which php\n  \n\n  A sample result follows:\n\n  /usr/bin/php\n  \n\n  Create the cron job\n\n  To create a cron job for the Magento file system owner, enter the following command as a user with root privileges:\n\n  crontab -u &lt;Magento file system owner user name&gt; -e\n  \n\n  For example,\n\n  crontab -u magento_user -e\n  \n\n  A text editor displays. (You might need to choose a text editor first.)\n\n  * * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; &lt;magento install dir&gt;/var/log/magento.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/update/cron.php &gt;&gt; &lt;magento install dir&gt;/var/log/update.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento setup:cron:run &gt;&gt; &lt;magento install dir&gt;/var/log/setup.cron.log\n\n  where\n\n  \n    &lt;path to php binary&gt; is the absolute file system path to your PHP binary\n    &lt;magento install dir&gt; is the directory in which you installed the Magento software; for example, /var/www\n    | grep -v \"Ran jobs by schedule\" filters this message from the log, making any errors easier to spot\n  \n\n  The first command (magento cron:run) reindexes indexers, sends automated e-mails, generates the sitemap, and so on. Usually it’s associated with the PHP command line .ini file. The other two commands are used by the Component Manager and System Upgrade.\n\n  \n  If you're a contributing developer (that is, you cloned the Magento 2 GitHub repository), only the first line applies to you. See the examples that follow for details.\n\n\n  Example 1: Everyone except contributing developers\n\n  For example, if the PHP binary is located in /usr/bin, you installed Magento in /var/www/magento2, enter\n\n  Example:\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n* * * * * /usr/bin/php /var/www/magento2/update/cron.php &gt;&gt; /var/www/magento2/var/log/update.cron.log\n* * * * * /usr/bin/php /var/www/magento2/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log\n  \n\n  Example 2: Contributing developers only (that is, you cloned the Magento 2 GitHub repository):\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n  \n\n  The preceding works for contributing developers because if you cloned the GitHub repository you don’t have an update directory and errors result if you run magento setup:cron:run. These cron jobs work in the Web Setup Wizard, which contributing developers cannot use for installing or updating the Magento application or components.\n\n  Save your changes to the crontab and exit the editor.\n\n  For more information about cron, including how to remove a crontab and run cron from the command line, see Configure and run cron.\n\n  Security settings\n  After installation, we recommend the following:\n\n  \n    Make sure your file ownership and permissions are set properly\n    We strongly recommend changing the default Admin URL from admin to something else\n    Make sure the X-Frame-Option HTTP header is set properly.\n    Take precautions against cross-site scripting (XSS) by securing your templates\n\n  \n\n  Enable Apache server rewrites\n  If you use the Apache web server, you must enable server rewrites for pages to display properly. Otherwise, you’ll see pages without styles and other issues.\n\n  Section on Apache server rewrites\n\n  Caching in a multi-webnode environment\n  If you have multiple webnodes, you cannot use Magento’s default file caching because there is no synchronization between webnodes. In other words, activity on one webnode is written to that webnode’s file system only. Subsequent activity, if performed on another webnode, can result in unnecessary files being written or can result in errors.\n\n  Instead, use Redis for both the default cache and the page cache.\n\n  Server settings\n  This section briefly discusses settings we recommend you consider for the server on which Magento runs. Some of these settings are not directly related to Magento; these are provided as suggestions only.\n\n  Log rotation\n\n  The UNIX logrotate utility enables you to administer systems that generate large numbers of log files.  It allows automatic rotation, compression, removal, and mailing of log files.  Each log file can be handled daily, weekly, monthly, or when the log file exceeds a specified size.\n\n  For more information, see one of the following:\n\n  \n    HowTo: The Ultimate Logrotate Command Tutorial with 10 Examples\n    stackexchange\n    logrotate man page\n  \n\n  Set up iptables rules to enable various Magento services to communicate.\n\n  Whether you have one server or many, you must open ports in the firewall to enable Magento services to communicate. For example, if you use the Solr search engine with Magento Commerce, you must enable it to communicate with the web server. If you have multiple web nodes, you must enable them to communicate with each other.\n\n  More information:\n\n  \n    Ubuntu: Ubuntu documentation page.\n    CentOS: CentOS how-to and CentOS reference page.\n  \n\n  Security Enhanced Linux (SELinux) rules\n\n  We don’t recommend whether or not you use SELinux at all; however, if you use it, you must configure Magento services to communicate with each other similar to configuring iptables.\n\n  More information:\n\n  \n    Ubuntu: Debian handbook\n    CentOS: CentOS wiki\n  \n\n  Set up an e-mail server\n\n  Magento requires an e-mail server. We don’t recommend a particular server but you can try any of the following:\n\n  \n    Postfix for CentOS (digitalocean tutorial, CentOS documentation)\n    Postfix for Ubuntu (digitalocean tutorial, Ubuntu documentation)\n  \n\n  Settings for Magento Commerce only\n\n  You can configure the following only if you use Magento Commerce:\n\n  \n    Apache Solr search\n    Split databases for checkout, order management, and other Magento database tables\n    Message queues\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/post-install-config.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-post-install-umask-html": {
      "title": "Optionally set a umask",
      "content": "Optionally set magento_umask\n\n\n\n  The web server group must have write permissions to certain directories in the Magento file system; however, you might want tighter security, especially in production. We provide the flexibility for you to further restrict those permissions using a umask.\n\n  Our solution is to enable you to optionally create a file named magento_umask in your Magento root directory that restricts permissions for the web server group and everyone else.\n\n  \n  We recommend changing the umask on a one-user or shared hosting system only. If you have a private Magento server, the group must have write access to the Magento file system; the umask removes write access from the group.\n\n\n  The default umask (with no magento_umask specified) is 002, which means:\n\n  \n    \n      775 for directories, which means full control by the user, full control by the group, and enables everyone to traverse the directory. These permissions are typically required by shared hosting providers.\n    \n    \n      664 for files, which means writable by the user, writable by the group, and read-only for everyone else\n    \n  \n\n  A common suggestion is to use a value of 022 in the magento_umask file, which means:\n\n  \n    755 for directories: full control for the user, and everyone else can traverse directories.\n    644 for files: read-write permissions for the user, and read-only for everyone else.\n  \n\n  To set magento_umask:\n\n  \n    Log in to your Magento server, or switch to, the Magento file system owner.\n    \n      Set the value of magento_umask:\n\n      \n        Use a text editor to create a new file &lt;your Magento install dir&gt;/magento_umask\n        \n          Set magento_umask to the desired value.\n\n          For example, 022\n        \n      \n    \n    Save your changes to magento_umask and exit the text editor.\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/post-install-umask.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-prepare-install-html": {
      "title": "Update installation dependencies",
      "content": "Introduction to Magento installation dependencies\nWe now use Composer to resolve dependencies before you install the Magento software and extensions.\n\nComposer is a separate application that manages PHP dependencies. Before you can install the Magento software, you must perform the following tasks in the order shown:\n\n\n  Install the Composer software.\n  Create the Magento file system owner so Composer writes files to the web server docroot as the correct user.\n  \n    Run the composer install command from your Magento root directory (for example, /var/www/magento2/).\n\n    The Magento root directory is a subdirectory of your web server’s docroot. Need help locating the docroot? Click here.\n\n    \n  \t\tIf the following error displays, see troubleshooting:\n  \t\tfile_get_contents(app/etc/NonComposerComponentRegistration.php): failed to open stream: No such file or directory\n\n  \n\n\nFor you to be able to run the Magento application, make sure you perform all tasks as a user with privileges to write to the web server docroot. One way to do this is to log in as or switch to the &gt;switch to the Magento file system owner.\n\nRun composer install to update dependencies\nUpdate installation dependencies as follows:\n\n\n  Log in to your Magento server as the Magento file system owner or switch to that user.\n  \n    Change to the Magento installation directory and run composer install. Examples:\n\n    CentOS:\n\n    cd /var/www/html/magento2 &amp;&amp; composer install\n    \n\n    Ubuntu:\n\n    cd /var/www/magento2 &amp;&amp; composer install\n    \n\n    This command updates package dependencies and can take a few minutes to complete.\n\n    The following error might display:\n\n    [Composer\\Downloader\\TransportException]\n    The \"https://repo.magento.com/archives/magento/composer/magento-composer-1.0.2.0.zip\" file could not be downloaded (HTTP/1.1 404 Not Found)\n    \n\n    If so, create auth.json in the Magento file system owner’s &lt;home&gt;/.composer directory and run composer install again.\n  \n\n\n\n\n  Set pre-installation file system ownership and permissions\n  This topic discusses how to set read-write permissions for the web server group before you install the Magento software. This is necessary so the Setup Wizard or command line can write files to the Magento file system.\n\n  The procedure you use is different, depending on whether you use shared hosting and have one user or if you use a private server and have two users.\n\n  \n  If you're using a Magento version earlier than 2.0.6, see Appendix&mdash;Magento file system ownership and appendix (legacy) instead.\n\n\n  Set permissions for shared hosting (one user)\n  This section discusses how to set pre-installation permissions if you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n\n  To set ownership and permissions for a one-user system: To set permissions before you install the Magento software:\n\n\n  Log in to your Magento server.\n  \n    Use a file manager application provided by your shared hosting provider to verify write permissions are set on the following directories:\n\n    \n      vendor (Composer or compressed archive installation)\n      app/etc\n      pub/static\n      var\n      Any other static resources\n    \n  \n  \n    If you have command-line access, enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\;\nchmod u+x bin/magento\n    \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \\; &amp;&amp; chmod u+x bin/magento\n    \n  \n  \n    If you haven’t done so already, get the Magento software in one of the following ways:\n\n    \n      Compressed archive\n      Composer metapackage\n      Clone the repository (contributing developers only)\n    \n  \n  \n    After you have set file system ownership and permissions, continue with any of the following:\n\n    \n      Command-line installation\n      Setup Wizard installation\n    \n  \n\n\n\n  To further restrict permissions after installing the Magento software, you configure a Magento umask.\n\n\n\n\n  Set ownership and permissions for two users\n  This section discusses how to set ownership and permissions for your own server or a private hosting setup. In this type of setup, you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user.\n\n  To set ownership and permissions for a two-user system: Complete the following tasks in the order shown:\n\n\n  About the shared group\n  Step 1: Create the Magento file system owner and give the user a strong password\n  Step 2: Find the web server group\n  Step 3: Put the Magento file system owner in the web server’s group\n  Step 4: Get the Magento software\n  Step 5: Set ownership and permissions for the shared group\n\n\nAbout the shared group\nTo enable the web server to write files and directories in the Magento file system but to also maintain ownership by the Magento file system owner, both users must be in the same group. This is necessary so both users can share access to Magento files (including files created using the Magento Admin or other web-based utilities).\n\nThis section discusses how to create a new Magento file system owner and put that user in the web server’s group. You can use an existing user account if you wish; we recommend the user have a strong password for security reasons.\n\n\n\tSkip to step 2 if you plan on using an existing user account.\n\n\nStep 1: Create the Magento file system owner and give the user a strong password\nThis section discusses how to create the Magento file system owner. (Magento file system owner is another term for the command-line user.)\n\nTo create a user on CentOS or Ubuntu, enter the following command as a user with root privileges:\n\nadduser &lt;username&gt;\n\n\nTo give the user a password, enter the following command as a user with root privileges:\n\npasswd &lt;username&gt;\n\n\nFollow the prompts on your screen to create a password for the user.\n\n\n    If you don't have root privileges on your Magento server, you can use another local user account. Make sure the user has a strong password and continue with Put the Magento file system owner in the web server group.\n\n\nFor example, to create a user named magento_user and give the user a password, enter:\n\nsudo adduser magento_user\nsudo passwd magento_user\n\n\n\n    Because the point of creating this user is to provide added security, make sure you create a strong password.\n\n\nStep 2: Find the web server user’s group\nTo find the web server user’s group:\n\n\n  \n    CentOS: egrep -i '^user|^group' /etc/httpd/conf/httpd.conf\n\n    Typically, the user and group name are both apache\n  \n  \n    Ubuntu: ps aux | grep apache to find the apache user, then groups &lt;apache user&gt; to find the group\n\n    Typically, the user name and the group name are both www-data\n  \n\n\nStep 3: Put the Magento file system owner in the web server’s group\nTo put the Magento file system owner in the web server’s group (assuming the typical Apache group name for CentOS and Ubuntu), enter the following command as a user with root privileges:\n\n\n  CentOS: usermod -a -G apache &lt;username&gt;\n  Ubuntu: usermod -a -G www-data &lt;username&gt;\n\n\n\n  The -a -G options are important because they add apache or www-data as a secondary group to the user account, which preserves the user’s primary group. Adding a secondary group to a user account helps restrict file ownership and permissions to ensure members of a shared group only have access to certain files.\n\n\nFor example, to add apache as a secondary group to user magento_user on CentOS:\n\nsudo usermod -a -G apache magento_user\n\n\nTo confirm your Magento user is a member of the web server group, enter the following command:\n\ngroups magento_user\n\n\nThe following sample result shows the user’s primary (magento) and secondary (apache) groups.\n\nmagento_user : magento_user apache\n\n\n\n  Typically, the user name and primary group name are the same.\n\n\nTo complete the task, restart the web server:\n\n\n  Ubuntu: service apache2 restart\n  CentOS: service httpd restart\n\n\nStep 4: Get the Magento software\nIf you haven’t done so already, get the Magento software in one of the following ways:\n\n\n  Compressed archive\n  Composer metapackage\n  Clone the repository (contributing developers only)\n\n\nStep 5: Set ownership and permissions for the shared group\nTo set ownership and permissions before you install the Magento software:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\nsudo chown -R :&lt;web server group&gt; .\nchmod u+x bin/magento\n    \n  \n\n\n\n\n  To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n  \n\n  In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n  cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n  \n\n  Next step\n  After you have set file system ownership and permissions, continue with any of the following:\n\n  \n    Command-line installation\n    Setup Wizard installation\n  \n\n\n\n  Switch to the Magento file system owner\n  After you’ve performed the other tasks in this topic, enter one of the following commands to switch to that user:\n\n  \n    Ubuntu: su &lt;username&gt;\n    CentOS: su - &lt;username&gt;\n  \n\n  For example,\n\n  su magento_user\n  \n\n  Next step\n  Install the Magento software:\n\n  \n    Command line\n    Setup Wizard\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/prepare-install.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-prepare-prepare-html": {
      "title": "Prepare (development quick start)",
      "content": "Before you start building Magento modules, we suggest you use the following checklist:\n\n\n  Install Magento and any required dependencies\n  Set Magento for developer mode\n  Decide which type of component you’re creating and how to set it up in composer.json.\n  Understand the component file structure\n\n",
      "url": "/guides/v2.0/extension-dev-guide/prepare/prepare.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-prepare-prepare-file-str-html": {
      "title": "About component file structure",
      "content": "One of the first things you can do to get started with component development is to understand and set up the file system. Each type of component has a different file structure, although all components require certain files.\n\nIn addition, you can choose the component root directory to start development. The following sections have more information.\n\n\n\n  Root directory location\n  A component’s root directory is the top-level directory for that component under which its folders and files are located. Depending on how your Magento development environment was installed, your component’s root directory can be located in two places:\n\n  \n    \n      &lt;Magento install directory&gt;/app: This is the recommended location for component development. You can easily set up this type of environment by Cloning the Magento 2 GitHub repository.\n\n      \n        For modules, use app/code.\n        For storefront themes, use app/design/frontend.\n        For Admin themes, use app/design/adminhtml.\n        For language packages, use app/i18n.\n      \n    \n    \n      &lt;Magento install directory&gt;/vendor: This location is found in the alternative setups where the composer create-project command was used to get a Magento 2 metapackage (which downloads the CE or EE code), or a compressed Magento 2 archive was extracted in order to install Magento.\n\n      Any third party components (and the Magento application itself) are downloaded and stored under the vendor directory. If you are using Git to manage project, this directory is typically added to the .gitignore file. Therefore, we recommend you do your customization work in app/code, not vendor.\n    \n  \n\n  Required files\n  The following files are required for all components:\n\n  \n    registration.php: Among other things, this file specifies the directory in which the component is installed by vendors in production environments. By default, composer automatically installs components in the &lt;Magento root dir&gt;/vendor directory. For more information, see Component registration.\n    etc/module.xml: This file specifies basic information about the component such as the components dependencies and its version number. This version number is used to determine schema and data updates when bin/magento setup:upgrade is run.\n    composer.json: Specifies component dependencies and other metadata. For more information, see Composer integration.\n  \n\n  Related topic\n  Roadmap for developing and packaging components\n\n",
      "url": "/guides/v2.0/extension-dev-guide/prepare/prepare_file-str.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-prereq-overview-html": {
      "title": "Prerequisites",
      "content": "Before you begin\n\nBefore you install Magento, you must do all of the following:\n\n\n  Set up one or more hosts that meet the Magento system requirements.\n  If you are setting up more than one web node with load balancing, set up and test that part of your system before you install Magento.\n  Make sure you can back up your entire system at various points during the installation so you can roll back in the event of issues.\n\n\n\n\n  We assume you're installing the Magento 2 software in a development environment, which means you have root user access to the machine and that the machine does not need to be highly secure. If you're setting up a more secure machine, we strongly recommend you consult a network administrator for additional assistance.\n\n\nWe strongly recommend you update and upgrade your operating system software. These upgrades can provide security and software fixes that might prevent future problems.\n\n\n\n  Don't know what any of this means? Check out our installation overview page.\n\n\nEnter the following commands as a user with root privileges:\n\n\n  \n    Ubuntu\n\n    apt-get update\napt-get upgrade\n    \n  \n  \n    CentOS\n\n    yum -y update\nyum -y upgrade\n    \n  \n\n\nPrerequisite check\n\nTo check your system for prerequisites, enter the following commands:\n\nApache\n\nCentOS: httpd -v\n\nUbuntu: apache2 -v\n\nYou must run Apache version 2.2 or 2.4 as the following result indicates:\n\nServer version: Apache/2.2.15 (Unix)\nServer built:   Jul 23 2014 14:17:29\n\n\nTo install or upgrade Apache, see Apache.\n\nPHP\n\nphp -v\n\n\nYou must run PHP version 5.5 or later as the following result indicates:\n\nPHP 5.5.9-1ubuntu4.4 (cli) (built: Sep  4 2014 06:56:34)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nwith Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies\n\n\nTo install PHP, see:\n\n\n  PHP 5.5, 5.6, or 7.0—CentOS\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n\n\nMySQL\n\nmysql -u &lt;database root user or database owner name&gt; -p\n\n\nFor example:\n\nmysql -u magento -p\n\n\nYou must run MySQL version 5.6 or later as the following result indicates:\n\n\tWelcome to the MySQL monitor.  Commands end with ; or \\g.\n\tYour MySQL connection id is 871\n\tServer version: 5.6.21 MySQL Community Server (GPL)\n\n\tCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.\n\n\tOracle is a registered trademark of Oracle Corporation and/or its\n\taffiliates. Other names may be trademarks of their respective\n\towners.\n\n\tType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\n\nEnter exit at the mysql&gt; prompt to exit.\n\nTo install or upgrade MySQL, see MySQL.\n\nNext step\nChoose how to install the Magento software\n\nRelated topics\n\n\n  Magento system requirements\n  Apache\n  PHP 5.5, 5.6, or 7.0—Ubuntu\n  PHP 5.5, 5.6, or 7.0—CentOS\n  MySQL\n  Installing optional software\n  How to get the Magento software\n\n",
      "url": "/guides/v2.0/install-gde/prereq/prereq-overview.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-prereq-prereq-auth-token-html": {
      "title": "Enter your authentication keys in the Admin",
      "content": "\n\tTo upgrade your Magento Commerce version or to upgrade from Magento Open Source to Magento Commerce, you must be authorized to access the  Magento Commerce repository. Contact Magento Support if you have questions.\n\n\nTo enter your authentication keys:\n\n\n  Log in to the Magento Admin as an administrator.\n  Click System &gt; Tools &gt; Web Setup Wizard.\n  \n    Click System Configuration.\n\n    \n  \n  Enter your public and private authentication keys in the provided fields.\n  \n    Click Save Config.\n\n    \n  \n\n",
      "url": "/guides/v2.0/comp-mgr/prereq/prereq_auth-token.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-prereq-prereq-compman-checklist-html": {
      "title": "Update and upgrade checklist",
      "content": "Checklist\n\n\n  Before you continue, to avoid errors during your installation or update, make sure you verify all of the following:\n\n  \n    You set up a Magento file system owner and shared that owner’s group with the web server user group\n    Your cron jobs are set up and running\n    File system permissions are set properly\n  \n\n  \n    Do not continue without performing these checks. Failure to do so could result in errors.\n\n\n  Magento file system owner and group\n  The Magento file system owner group must have write access to Magento directories and files.\n\n  Cron jobs are running\n  Magento requires three cron jobs, all running as the Magento file system owner.\n\n  To verify your cron jobs are set up properly, enter the following command as a user with root privileges:\n\n  crontab -u &lt;magento file system owner&gt; -l\n  \n\n  For example, if your Magento file system owner is named magento_user, enter:\n\n  crontab -u magento_user -l\n  \n\n  Results similar to the following should display:\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n* * * * * /usr/bin/php /var/www/magento2/update/cron.php &gt;&gt; /var/www/magento2/var/log/update.cron.log\n* * * * * /usr/bin/php /var/www/magento2/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log\n  \n\n  Another symptom of cron not running is the following error in the Magento Admin:\n\n  \n\n  To see the error, you might need to click System Messages at the top of the window as follows:\n\n  \n\n  For details, see Set up cron.\n\n  File system permissions\n  For security reasons, Magento requires certain permissions on the file system. Permissions are different from ownership. Ownership determines who can perform actions on the file system; permissions determine what the user can do.\n\n  Directories in the Magento file system must be writable by the Magento file system owner’s group.\n\n  To verify your file system permissions are set properly, either log in to the Magento server or use your hosting provider’s file manager application.\n\n  For example, enter the following commands on a Linux system if the Magento application is installed in /var/www/html/magento2:\n\n  ls -al /var/www/html/magento2\n  \n\n  A sample result follows:\n\n  total 1028\ndrwxrwx---. 12 magento_user apache   4096 Jun  7 07:55 .\ndrwxr-xr-x.  3 root         root     4096 May 11 14:29 ..\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 app\ndrwxrwx---.  2 magento_user apache   4096 Jun  7 07:53 bin\n-rw-rw----.  1 magento_user apache 439792 Apr 27 21:23 CHANGELOG.md\n-rw-rw----.  1 magento_user apache   3422 Apr 27 21:23 composer.json\n-rw-rw----.  1 magento_user apache 425214 Apr 27 21:27 composer.lock\n-rw-rw----.  1 magento_user apache   3425 Apr 27 21:23 CONTRIBUTING.md\n-rw-rw----.  1 magento_user apache  10011 Apr 27 21:23 CONTRIBUTOR_LICENSE_AGREEMENT.html\n-rw-rw----.  1 magento_user apache    631 Apr 27 21:23 COPYING.txt\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 dev\n-rw-rw----.  1 magento_user apache   2926 Apr 27 21:23 Gruntfile.js\n-rw-rw----.  1 magento_user apache   7592 Apr 27 21:23 .htaccess\n-rw-rw----.  1 magento_user apache   6419 Apr 27 21:23 .htaccess.sample\n-rw-rw----.  1 magento_user apache   1358 Apr 27 21:23 index.php\ndrwxrwx---.  4 magento_user apache   4096 Jun  7 07:53 lib\n-rw-rw----.  1 magento_user apache  10376 Apr 27 21:23 LICENSE_AFL.txt\n-rw-rw----.  1 magento_user apache  30634 Apr 27 21:23 LICENSE_EE.txt\n-rw-rw----.  1 magento_user apache  10364 Apr 27 21:23 LICENSE.txt\n-rw-rw----.  1 magento_user apache   4108 Apr 27 21:23 nginx.conf.sample\n-rw-rw----.  1 magento_user apache   1427 Apr 27 21:23 package.json\n-rw-rw----.  1 magento_user apache   1659 Apr 27 21:23 .php_cs\n-rw-rw----.  1 magento_user apache    804 Apr 27 21:23 php.ini.sample\ndrwxrwx---.  2 magento_user apache   4096 Jun  7 07:53 phpserver\ndrwxrwx---.  6 magento_user apache   4096 Jun  7 07:53 pub\n-rw-rw----.  1 magento_user apache   2207 Apr 27 21:23 README_EE.md\ndrwxrwx---.  7 magento_user apache   4096 Jun  7 07:53 setup\n-rw-rw----.  1 magento_user apache   3731 Apr 27 21:23 .travis.yml\ndrwxrwx---.  7 magento_user apache   4096 Jun  7 07:53 update\ndrwxrws---. 11 magento_user apache   4096 Jun 13 16:05 var\ndrwxrws---. 29 magento_user apache   4096 Jun  7 07:53 vendor\n\n  In the preceding example, the Magento file system owner is magento_user. Directories in the Magento file system have drwxrwx--- permissions (775) and files have -rw-rw-rw- permissions (664).\n\n  To get more detailed information, you can optionally enter the following command:\n\n  ls -al /var/www/html/magento2/pub\n  \n\n  Because Magento deploys static file assets to subdirectories of pub, it’s a good idea to verify permissions and ownership there as well.\n\n  For more information, see File system permissions and ownership.\n\n",
      "url": "/guides/v2.0/comp-mgr/prereq/prereq_compman-checklist.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-prereq-prereq-compman-ulimit-html": {
      "title": "Set ulimit for the web server user",
      "content": "\n\n  Why to set ulimit\n  Rolling back to a previous backup can silently fail, resulting in incomplete data being written to the file system or database. (This includes all types of rollbacks, including using System Upgrade, Component Manager, or the magento setup:rollback command.)\n\n  In some cases, a very long query string causes the user’s allocated memory space to run out of memory because of too many recursive calls.\n\n  How to set ulimit\n  We recommend setting the ulimit for the Magento file system user to a value of 65536 or more.\n\n  You can do this either on the command line or you can make it a permanent setting for the user by editing their shell script.\n\n  Before you continue, if you haven’t done so already, switch to the Magento file system owner.\n\n  Command:\n\n  ulimit -s 65536\n  \n\n  You can change this to a larger value if needed.\n\n  \n   \tThe syntax for ulimit depends on the UNIX shell you use. The preceding setting should work with CentOS and Ubuntu with the Bash shell. However, for Mac OS, the correct setting is ulimit -S 65532. Consult a man page or operating system reference for more information.\n\n\n  To optionally set the value in the user’s Bash shell:\n\n  \n    If you haven’t done so already, switch to the Magento file system owner.\n    Open /home/&lt;username&gt;/.bashrc in a text editor.\n    \n      Add the following line:\n\n      ulimit -s 65536\n      \n    \n    Save your changes to .bashrc and exit the text editor.\n  \n\n  \n    We recommend you avoid setting a value for pcre.recursion_limit in php.ini because it can result in incomplete rollbacks with no failure notice.\n\n\n",
      "url": "/guides/v2.0/comp-mgr/prereq/prereq_compman-ulimit.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-prereq-prereq-compman-html": {
      "title": "Prerequisites",
      "content": "Before running the Component Manager or System Upgrade, complete the following tasks:\n\n\n  Set up cron\n  Enter your authentication keys in the Admin\n  Set ulimit for the web server user\n  Checklist\n\n\nAfter you’ve completed all prerequisites, continue with:\n\n\n  Start the Component Manager\n  Start System Upgrade\n\n",
      "url": "/guides/v2.0/comp-mgr/prereq/prereq_compman.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-prereq-prereq-cron-html": {
      "title": "Set up cron for update and upgrade",
      "content": "To enable us to update or upgrade your system, you must configure two cron jobs. Each cron job should run every minute.\n\nThe cron jobs schedule tasks for the Setup Wizard and for the updater application. These applications work together to install, update, and upgrade the Magento application and components.\n\nEnable the cron jobs as crontabs for the Magento file system owner because that user runs the updater application for the Web Setup Wizard.\n\n\n\n  Prerequisites\n  Magento uses cron for two sets of tasks, and for each, cron can run with a different configuration:\n\n  \n    \n      PHP command-line configuration: The general cron job that reindexes indexers, generates e-mails, generates the sitemap, and so on.\n\n      You can find the command-line configuration using the command php --ini.\n    \n    \n      Web server PHP plug-in configuration: Two other cron jobs are used by the Component Manager and System Upgrade utilities.\n\n      You can find the web server plug-in configuration using phpinfo.php.\n    \n  \n\n  \n    \n      To avoid issues during installation and upgrade, we strongly recommend you apply the same PHP settings to both the PHP command-line configuration and to the PHP web server plug-in’s configuration. \nFor more information, see Required PHP settings.\n      \n        In a multi-node system, crontab can run on only one node.\n\n        This applies to you only if you set up more than one webnode for reasons related to performance or scalability.\n      \n    \n  \n\n  Find the PHP binary and php.ini path\n  To display the path to your PHP binary, enter\n\n  which php\n  \n\n  A sample result follows:\n\n  /usr/bin/php\n  \n\n  Create the cron job\n\n  To create a cron job for the Magento file system owner, enter the following command as a user with root privileges:\n\n  crontab -u &lt;Magento file system owner user name&gt; -e\n  \n\n  For example,\n\n  crontab -u magento_user -e\n  \n\n  A text editor displays. (You might need to choose a text editor first.)\n\n  * * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; &lt;magento install dir&gt;/var/log/magento.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/update/cron.php &gt;&gt; &lt;magento install dir&gt;/var/log/update.cron.log\n* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento setup:cron:run &gt;&gt; &lt;magento install dir&gt;/var/log/setup.cron.log\n\n  where\n\n  \n    &lt;path to php binary&gt; is the absolute file system path to your PHP binary\n    &lt;magento install dir&gt; is the directory in which you installed the Magento software; for example, /var/www\n    | grep -v \"Ran jobs by schedule\" filters this message from the log, making any errors easier to spot\n  \n\n  The first command (magento cron:run) reindexes indexers, sends automated e-mails, generates the sitemap, and so on. Usually it’s associated with the PHP command line .ini file. The other two commands are used by the Component Manager and System Upgrade.\n\n  \n  If you're a contributing developer (that is, you cloned the Magento 2 GitHub repository), only the first line applies to you. See the examples that follow for details.\n\n\n  Example 1: Everyone except contributing developers\n\n  For example, if the PHP binary is located in /usr/bin, you installed Magento in /var/www/magento2, enter\n\n  Example:\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n* * * * * /usr/bin/php /var/www/magento2/update/cron.php &gt;&gt; /var/www/magento2/var/log/update.cron.log\n* * * * * /usr/bin/php /var/www/magento2/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log\n  \n\n  Example 2: Contributing developers only (that is, you cloned the Magento 2 GitHub repository):\n\n  * * * * * /usr/bin/php /var/www/magento2/bin/magento cron:run | grep -v \"Ran jobs by schedule\" &gt;&gt; /var/www/magento2/var/log/magento.cron.log\n  \n\n  The preceding works for contributing developers because if you cloned the GitHub repository you don’t have an update directory and errors result if you run magento setup:cron:run. These cron jobs work in the Web Setup Wizard, which contributing developers cannot use for installing or updating the Magento application or components.\n\n  Save your changes to the crontab and exit the editor.\n\n\n",
      "url": "/guides/v2.0/comp-mgr/prereq/prereq_cron.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-prereq-updater-html": {
      "title": "Set up the updater (obsolete)",
      "content": "This topic is obsolete. Magento no longer has a separate updater application.\n\nIf you are a contributing developer who installed the Magento application by cloning the GitHub repository, see instead Update the Magento application.\n",
      "url": "/guides/v2.0/install-gde/prereq/prereq_updater.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-present-layer-html": {
      "title": "Presentation Layer",
      "content": "What is the Magento Presentation layer?\n\nWhen you interact with the Magento web interface, you are interacting with presentation layer code.\n\nThe presentation layer contains both view elements (layouts, blocks, templates) and controllers, which process commands to and from the user interface.\nPresentation code controls web user interaction with the product and its appearance.\n\nYou can extensively customize the user interface by using HTML, CSS, and PHTML files to modify elements of the presentation layer.\nPresentation layer represents customization of HTML,CSS,Javascript,Magento UI,PHTML file and Block file.\n\nPresentation layer is Top layer among four layer(Presentational, Service, Domain, and Persistence layer) described by Magento architecture.\n\nWho uses the Presentation layer?\n\nThree types of Magento users interact with presentation layer code.\nMagento uses areas to efficiently make web service calls, loading only the dependent code that is required for the particular type of user.\nTypes of users and their associated areas include:\n\n\n  \n    Web users interact with the store front, where they can see the View model of data displayed by Magento and interact with product UI elements to request data for view and manipulation.\nThese users work within the (frontend) area.\n  \n  \n    System administrators customizing a storefront can indirectly manipulate the presentation layer by, for example, adding themes or widgets to the front end.\n  \n  \n    Web API calls can be made through HTTP just like browser requests, and can be made via AJAX calls from the user interface.\n  \n\n\nPresentation layer components\n\nOne helpful way of understanding the Magento presentation layer components is by examining Magento themes.\nMagento themes organize both the visual aspect of your storefront and certain aspects of product behavior.\n\nEach theme resides in a unique directory and contains custom page layouts, templates, skins, and language files that work together to create a distinct user experience.\n\nFor an extensive introduction to theme elements and an overview of how to extend and override the default Magento themes, see the Frontend Developer Guide.\n\nView model\n\nMagento generates the HTML for a page to display to a user from a tree of view elements.\n\nView elements fall into two main categories: blocks and containers.\n\n\n  \n    Blocks can generate dynamic content and can contain named child view elements that are similar to arguments being passed in.\n(The as attribute holds the child view element names for the parent block to reference them)\n  \n  \n    Containers collect an ordered group of children view elements.\n  \n\n\nThe browser forms a product web page by asking the view element tree to render itself into HTML.\nContainers and blocks emit HTML that encloses their children appropriately.\nBlocks can generate their content using static HTML, Knockout JS scripts, and PHTML.\n\nHow Presentation code calls other layers\n\nPresentation code typically calls service contracts, particularly for a store front.\nHowever, presentation code is occasionally dependent on a specific implementation that requires the presentation code to directly call the business logic layer.\nFor example, the Admin UI screens are often tightly linked to a specific implementation and are not generic across implementations.\n\nThe View layer calls code from the Model to get information about the state of the application (for example, the price of a product).\nTypically, the way it accesses the Model is through service contracts.\n\nPresentation layer flow\n\nWeb users interact with components of the presentation layer to select actions that initiate calls to the underlying product layers.\nPresentation layer components make calls to the Service layer, which in turn sends requests to the Domain (or business logic) layer.\n\nRelated topics\n\nArchitectural diagrams\n\nArchitectural layers overview\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/present_layer.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-page-caching-private-content-html": {
      "title": "Private content",
      "content": "\nSince private content is specific to individual users, it’s reasonable to handle it on the client (i.e., web browser).\n\nUse our customer-data JS library to store private data in local storage, invalidate private data using customizable rules, and synchronize data with the backend.\n\nThis example shows a customer’s name on a cacheable page.\n\nCreate a section source\nThe section source class is responsible for retrieving data for the section. As a best practice, we recommend you put your code under the Vendor/ModuleName/CustomerData namespace. Your classes must implement the Magento\\Customer\\CustomerData\\SectionSourceInterface interface.\n\nThe public method getSectionData must return an array with data for private block.\n\nExample\n\nAdd the following to your component’s dependency injection configuration (di.xml):\n\n&lt;type name=\"Magento\\Customer\\CustomerData\\SectionPoolInterface\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"sectionSourceMap\" xsi:type=\"array\"&gt;\n            &lt;item name=\"compare-products\" xsi:type=\"string\"&gt;Magento\\Catalog\\CustomerData\\CompareProducts&lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n\n\nCreate a block and template\nTo render private content, create a block and a template to display user-agnostic data; this data is replaced with user-specific data by the UI component.\n\n\n  Do not use the $_isScopePrivate property in your blocks. This property is obsolete and won’t work properly.\n\n\nReplace private data in blocks with placeholders (using Knockout syntax). The init scope on the root element is data-bind=\"scope: 'compareProducts'\", where you define the scope name (compareProducts in this example) in your layout.\n\nInitialize the component as follows:\n\n&lt;script type=\"text/x-magento-init\"&gt;\n    {\"&lt;css-selector&gt;\": {\"Magento_Ui/js/core/app\": &lt;?php echo $block-&gt;getJsLayout();?&gt;}}\n&lt;/script&gt;\n\n\nExample\n\nConfigure a UI component\nThe UI component renders block data on the Magento storefront. To initialize the UI component, you must call the initialization method _super().\n\nExample\n\nAll properties are available in the template.\n\nExample of defining a UI component in a layout\n\nInvalidate private content\nSpecify actions that trigger cache invalidation for private content blocks in a sections.xml configuration file in the Vendor/ModuleName/etc/frontend directory. Magento invalidates the cache on a POST or PUT request.\n\nThe following example adds comments to app/code/Magento/Catalog/etc/frontend/sections.xml to show you what the code is doing.\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!--\n/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n--&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Customer:etc/sections.xsd\"&gt;\n    &lt;!-- invalidates the \"compare-products\" section when a user\n    adds a product to the comparison, resulting in a \"catalog/product_compare/add\" POST request --&gt;\n    &lt;action name=\"catalog/product_compare/add\"&gt;\n        &lt;section name=\"compare-products\"/&gt;\n    &lt;/action&gt;\n    &lt;!-- invalidates the section when a customer removes a product from the comparison --&gt;\n    &lt;action name=\"catalog/product_compare/remove\"&gt;\n        &lt;section name=\"compare-products\"/&gt;\n    &lt;/action&gt;\n    &lt;!-- invalidates the section when a customer clears all products from the comparison --&gt;\n    &lt;action name=\"catalog/product_compare/clear\"&gt;\n        &lt;section name=\"compare-products\"/&gt;\n    &lt;/action&gt;\n&lt;/config&gt;\n\n\n\n  Use only HTTP POST or PUT methods to change state (e.g., adding to a shopping cart, adding to a wishlist, etc.) and don’t expect to see caching on these methods. Using GET or HEAD methods might trigger caching and prevent updates to private content. For more information about caching, see RFC-2616 section 13 {:target=”_blank”}\n\n\nOther examples:\n\n\n  \n    Checkout\n  \n  \n    Customer\n  \n\n\nVersion private content\nPrivate content, which is stored in the browser local storage, uses the private_content_version cookie to store the version.\n\nVersioning works as follows:\n\n\n  The user performs some action, such as adding to a cart, that results in an POST or PUT request to the Magento application.\n  The server generates the private_content_version cookie for this user and returns the response to the browser.\n  JavaScript interprets the presence of the private_content_version cookie to mean that private content is present on the page, so it sends an AJAX request to the Magento server to get the current private content.\n  \n    The server’s reply is cached in the browser’s local storage.\n\n    Subsequent requests with the same data version are retrieved from local storage.\n  \n  Any future HTTP POST or PUT request changes the value of private_content_version and results in the updated content being cached by the browser.\n\n\nCacheable page checklist\n\n  \n    Pages use GET requests\n  \n  \n    Pages render only cacheable blocks\n  \n  \n    Pages render without sensitive private data; session and customer DTO objects are empty\n  \n  \n    Functionality specific to both current session (customer) and page should be written using JavaScript (e.g., related product listing should exclude items that are already in the shopping cart)\n  \n  \n    Model and block level should identify themselves for invalidation support\n  \n  \n    Declare a custom context variable if you plan to show different public content with the same URL\n  \n\n\nNon-cacheable page checklist\n\n  \n    Use POST requests to modify Magento state (e.g., adding to shopping cart, wishlist, etc.)\n  \n  \n    Blocks that can’t be cached should be marked as non-cacheable in the layout. However, be aware that adding a non-cacheable block to a page prevents the full page cache from caching that page.\n  \n  \n    Controllers that don’t use layouts should set no-cache HTTP headers\n  \n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/page-caching/private-content.html"
    }
    ,
  
    "guides-v2-0-cloud-architecture-pro-architecture-legacy-html": {
      "title": "Pro architecture (legacy)",
      "content": "Each Pro plan project supports a total of eight environments that you can use to develop, test, and launch your store. To modify files on these remote environments, you must push changes from your local workspace using Git branches.\n\n\n  Integration—Provides up to six environments, including the master branch, deployed to Platform-as-a-Service (PaaS) containers. You deploy code from the Integration master branch to the Staging and Production master branches.\n  Staging—Provides a single environment and master branch deployed to dedicated Infrastructure-as-a-Service (IaaS) containers.\n  Production—Provides a single environment and master branch deployed to dedicated Infrastructure-as-a-Service (IaaS) containers.\n\n\n\n  To manage Staging and Production environment settings through the Project Web Interface for Pro projects created before October 23, 2017, you must request an update. If you do not request the update, you must use CLI commands or tickets to modify settings, variables, and routes.\n\n\n\n\nThe following table summarizes the differences between environments:\n\n\n  \n    \n      \n      Integration\n      Staging\n      Production\n    \n    \n      Supports settings management in the UI?\n      Yes\n      Not by default (requires an update)\n      Not by default (requires an update)\n    \n    \n      Supports multiple environments/branches?\n      Yes\n      No (master only)\n      No (master only)\n    \n    \n      Uses YAML files for configuration?\n      Yes\n      Requires support ticket for deployment settings\n      Requires support ticket for deployment settings\n    \n    \n      Runs on dedicated IaaS hardware?\n      No\n      Yes\n      Yes\n    \n    \n      Includes Fastly, Blackfire, and New Relic?\n      No\n      Yes\n      Yes\n    \n  \n\n\nIntegration environment\nDevelopers use the Integration environment to develop, deploy, and test:\n\n\n  Magento application code\n  Custom code\n  Extensions\n  Services\n\n\nThe Integration environment runs in a Linux container (LXC) on a grid of servers known as Platform-as-a-Service (PaaS). It provides up to six environments, each as an active Git branch with the same name as the environment. Each environment includes a web server, database, and configured services to fully test your site.\n\n\n  The Integration environment does not support all services. For example, Fastly is not accessible in Integration.\n\n\nBranches\nYou can have an unlimited number of inactive Git branches to store code, but to access, view, and test inactive branches you must activate them. Use the magento-cloud environment:activate command to activate the environment.\n\nWhen you update your project to manage the Staging and Production environments through the Project Web Interface, all active and inactive branches continue as children of the master branch.\n\nDeveloping in the Integration environment requires the following Git process:\n\n\n  Clone the master branch from the project environment to your local workspace\n  Create a new branch and develop on your local workspace\n  Push code changes, which automatically build and deploy to the Integration environment for testing\n\n\n\n  We highly recommend testing every merchant and customer interaction in the Staging environment prior to deploying to the Production environment. See Prepare for local environment setup and Deploy your store.\n\n\nStaging environment\nThe Staging environment provides a near-production environment to test your site. This environment includes all services used in the Production environment, including Fastly, New Relic, Blackfire, and search, and shares the same dedicated IaaS hardware as the Production environment.\n\nBranches\nThe Staging environment contains a default master branch. You cannot branch from the Staging environment master branch. You must push code changes from the Integration environment master branch to Staging environment master branch.\n\nWhen you update your project to manage the Production and Staging environments through the Project Web Interface, we create a branch from the Integration environment master branch called staging that contains all user access settings and environment variables for your Staging environment.\n\n\n  We highly recommend testing every merchant and customer interaction in the Staging environment prior to deploying to the Production environment. See Deploy your store and Test  deployment.\n\n\nProduction environment\nThe Production environment runs your public-facing Magento single and multi-site storefronts. This environment runs on dedicated IaaS hardware featuring triple-redundant, high-availability nodes for continuous access and failover protection for your customers.\n\nBranches\nThe Production environment contains a default master branch. You cannot branch from the Production environment master branch. You must push code changes from the Staging environment master branch to Production environment master branch.\n\nWhen you update your project to manage the Production and Staging environments through the Project Web Interface, we create a branch from the Integration environment master branch called production that contains all user access settings and environment variables for your Production environment.\n\n\n  We highly recommend testing every merchant and customer interaction in the Staging environment prior to deploying to the Production environment. See Deploy your store and Go Live and launch.\n\n\nAdvantage of redundant hardware\nRather than running a traditional, active-passive master or a master-slave setup, Magento Commerce (Cloud) runs a triple-redundant, multi-master architecture where all three instances accept reads and writes. This architecture offers zero downtime when scaling and provides guaranteed transactional integrity.\n\nBecause of our unique, triple-redundant hardware, we can provide you with a set of three gateway servers. Most external services enable you to whitelist multiple IP addresses, so having more than one fixed IP address is not a problem.\n\nThese three gateways map to the three servers in your Production environment cluster and retain static IP addresses. It is fully redundant and highly available at every level:\n\n\n  DNS\n  Content Delivery Network (CDN)\n  Elastic load balancer (ELB)\n  Three-server cluster comprising all Magento services, including the database and web server\n\n\nBackup and disaster recovery\nEach production system cluster can withstand the loss of an entire server and all services running on it. A backup of your production system occurs automatically every six hours.\n\nThe coordinating agent that monitors your production system:\n\n\n  Detects failures at the service level (for example, MySQL)\n  Fully automates and coordinates recovery where an automated recovery is possible\n\n\nProduction technology stack\nThe Production environment has three virtual machines (VMs) behind an Elastic Load Balancer managed by an HAProxy per VM. Each VM includes the following technologies:\n\n\n  Fastly for HTTP caching and CDN\n  NGINX web server using PHP-FPM, one instance with multiple workers\n  GlusterFS file server for managing all static file deployments and synchronization with four directory mounts:\n    \n      var\n      pub/media\n      pub/static\n      app/etc\n    \n  \n  Redis server, one per VM with only one active and the other two as replicas\n  Elasticsearch for searching, Magento Commerce (Cloud) 2.1 and later\n  Solr search is supported for Magento Commerce (Cloud) 2.0\n  Galera database cluster with one MariaDB MySQL database per node with an auto-increment setting of three for unique IDs across every database\n\n\nThe following figure shows the technology used in the Production environment:\n\n\n\nMagento Commerce seamlessly scales from the smallest 6 CPU cluster with 11.25GB of RAM to the largest 96 CPU cluster with 180GB of RAM. Our triple-redundant architecture means we can offer upscaling without downtime. When upscaling, we rotate each of the three instances to upgrade without downtime of your site.\n\nIn addition, extra web servers can be added to an existing cluster should the constriction be at the PHP level rather than the database level. This provides horizontal scaling to complement the vertical scaling provided by extra CPUs on the database level.\n\nServices\nMagento Commerce (Cloud) currently supports the following services:\n\n\n  PHP\n  MySQL (MariaDB)\n  Solr (Magento 2.0.x)\n  Elasticsearch (Magento 2.1.x and later)\n  Redis\n  RabbitMQ\n\n\nEach service runs in a secure container managed in the project. Some projects include built-in services, such as the following:\n\n\n  HTTP router (handling incoming requests, but also caching and redirects)\n  PHP application server\n  Git\n  Secure Shell (SSH)\n\n\nYou can have multiple applications running in the same project. Building a microservice-oriented architecture with Magento Commerce is as easy as managing a monolithic application.\n\nSoftware versions\nMagento Commerce (Cloud) uses:\n\n\n  Operating system: Debian GNU/Linux 8 (jessie)\n  Web server: NGINX 1.8\n\n\nThis software is not upgradable but versions for the following software is configurable:\n\n\n  PHP\n  MySQL\n  Solr\n  Redis\n  RabbitMQ\n  Elasticsearch\n\n\nFor Staging and Production environments, use Fastly for CDN and caching. We recommend installing the Fastly module 1.2.33 or later. See Fastly in Cloud.\n\nEdit the following YAML files to configure specific software versions to use in your implementation.\n\n\n  .magento.app.yaml—application build and deployment\n  routes.yaml—url processing\n  services.yaml—supported services\n\n\nPrepare for development\nTo branch and develop your Magento store:\n\n\n  Set up your local environment\n  Clone the master branch from the Project to your local workspace\n  Branch and develop in a new Git branch on your local workspace\n  Push code to Git to build and deploy to an environment for testing\n\n\nRelated topics\n\n  Pro Develop and Deploy Workflow\n  Deployment process\n  Magento Commerce requirements\n\n",
      "url": "/guides/v2.0/cloud/architecture/pro-architecture-legacy.html"
    }
    ,
  
    "guides-v2-0-cloud-architecture-pro-architecture-html": {
      "title": "Pro architecture",
      "content": "Your Magento Commerce (Cloud) Pro architecture supports a maximum of eight environments that you can use to develop, test, and launch your store. Each environment contains a database and a web server:\n\n\n  Integration—Provides a single environment branch, and you can create up to four additional, environment branches. This allows for a maximum of five active branches deployed to Platform-as-a-Service (PaaS) containers.\n  Staging—Provides a single environment branch deployed to dedicated Infrastructure-as-a-Service (IaaS) containers.\n  Production—Provides a single environment branch deployed to dedicated Infrastructure-as-a-Service (IaaS) containers.\n  Global Master—Provides a master branch deployed to Platform-as-a-Service (PaaS) containers.\n\n\n\n  For Pro projects created before October 23, 2017, the architecture is slightly different. See Pro architecture (legacy).\n\n\nThe following table summarizes the differences between environments:\n\n\n  \n    \n      \n      Integration\n      Staging\n      Production\n    \n    \n      Supports settings management in the UI\n      Yes\n      Limited\n      Limited\n    \n    \n      Supports multiple branches\n      Yes\n      No (Staging only)\n      No (Production only)\n    \n    \n      Uses YAML files for configuration\n      Yes\n      No\n      No\n    \n    \n      Runs on dedicated IaaS hardware\n      No\n      Yes\n      Yes\n    \n    \n      Includes Fastly CDN\n      No\n      Yes\n      Yes\n    \n   \n     Includes Blackfire Profiler\n     Yes\n     Yes\n     Yes\n   \n   \n     Includes New Relic APM\n     Yes (Only one branch)\n     Yes\n     Yes\n   \n  \n\n\nYour project is a single Git repository with three, main environment branches for Integration, Staging, and Production. The following diagram shows the hierarchical relationship of the environments:\n\n\n\nIntegration environment\nDevelopers use the Integration environment to develop, deploy, and test:\n\n\n  Magento application code\n  Custom code\n  Extensions\n  Services\n\n\nThe Integration environment runs in a Linux container (LXC) on a grid of servers known as Platform-as-a-Service (PaaS). Each environment includes a web server and database to test your site.\n\n\n  The Integration environment does not support all services. For example, the Fastly CDN is not accessible in an Integration environment.\n\n\nGlobal Master\nThe Global Master branch is a part of the Integration environment. You should always push a copy of the Production code to the Global Master in case there is an emergent need to debug the Production environment without interrupting services.\n\nDo not create a branch from Global Master. Use the Integration environment branch to create new, active branches.\n\nStaging environment\nThe Staging environment provides a near-production environment to test your site. This environment includes all services used in the Production environment—including Fastly CDN, New Relic APM, Blackfire Profiler, and search—and shares the same dedicated IaaS hardware as the Production environment.\n\nYou cannot create a branch from the Staging environment branch. You must push code changes from the Integration environment branch to the Staging environment branch.\n\n\n  We highly recommend testing every merchant and customer interaction in the Staging environment prior to deploying to the Production environment. See Deploy your store and Test deployment.\n\n\nProduction environment\nThe Production environment runs your public-facing Magento single and multi-site storefronts. This environment runs on dedicated IaaS hardware featuring triple-redundant, high-availability nodes for continuous access and failover protection for your customers.\n\nYou cannot create a branch from the Production environment branch. You must push code changes from the Staging environment branch to the Production environment branch.\n\nRedundant hardware\nRather than running a traditional, active-passive master or a master-slave setup, Magento Commerce (Cloud) runs a triple-redundant architecture where all three instances accept reads and writes. This architecture offers zero downtime when scaling and provides guaranteed transactional integrity.\n\nBecause of our unique, triple-redundant hardware, we can provide you with three gateway servers. Most external services enable you to whitelist multiple IP addresses, so having more than one fixed IP address is not a problem.\n\nThe three gateways map to the three servers in your Production environment cluster and retain static IP addresses. It is fully redundant and highly available at every level:\n\n\n  DNS\n  Content Delivery Network (CDN)\n  Elastic load balancer (ELB)\n  Three-server cluster comprising all Magento services, including the database and web server\n\n\nBackup and disaster recovery\nEach production system cluster can withstand the loss of an entire server and all services running on it. A backup of your production system occurs automatically every six hours. The coordinating agent that monitors your production system detects failures at the service level (such as MySQL) and fully automates and coordinates recovery where possible.\n\nProduction technology stack\nThe Production environment has three virtual machines (VMs) behind an Elastic Load Balancer managed by an HAProxy per VM. Each VM includes the following technologies:\n\n\n  Fastly CDN—HTTP caching and CDN\n  NGINX—web server using PHP-FPM, one instance with multiple workers\n  GlusterFS—file server for managing all static file deployments and synchronization with four directory mounts:\n    \n      var\n      pub/media\n      pub/static\n      app/etc\n    \n  \n  Redis—one server per VM with only one active and the other two as replicas\n  Elasticsearch—search for Magento Commerce (Cloud) 2.1 and later\n  Solr—search for Magento Commerce (Cloud) 2.0 only\n  Galera—database cluster with one MariaDB MySQL database per node with an auto-increment setting of three for unique IDs across every database\n\n\nThe following figure shows the technologies used in the Production environment:\n\n\n\nMagento Commerce scales seamlessly from the smallest 6-CPU cluster with 11.25GB of RAM to the largest 96-CPU cluster with 180GB of RAM. Our triple-redundant architecture means we can offer upscaling without downtime. When upscaling, we rotate each of the three instances to upgrade without downtime of your site.\n\nSoftware versions\nMagento Commerce (Cloud) uses the Debian GNU/Linux 8 (jessie) operating system and the NGINX 1.8 web server. You cannot upgrade this software, but you can configure versions for the following:\n\n\n  PHP\n  MySQL\n  Redis\n  RabbitMQ\n  Elasticsearch\n\n\nFor the Staging and Production environments, we recommend installing the Fastly CDN module 1.2.33 or later. See Fastly in Cloud.\n\nEdit the following YAML files to configure specific software versions to use in your implementation.\n\n\n  .magento.app.yaml—application build and deployment\n  routes.yaml—url processing\n  services.yaml—supported services\n  .magento.env.yaml—unified configs for Magento Commerce (Cloud) 2.2\n\n\nRelated topics\n\n  Pro Develop and Deploy Workflow\n  Deployment process\n  Magento Commerce requirements\n\n",
      "url": "/guides/v2.0/cloud/architecture/pro-architecture.html"
    }
    ,
  
    "guides-v2-0-cloud-architecture-pro-develop-deploy-workflow-html": {
      "title": "Pro develop and deploy workflow",
      "content": "The Magento Commerce (Cloud) Pro plan includes a single, Git repository with a Global Master and three, main environments: the Integration environment for development and testing, the Staging environment for testing with all services, and the Production environment to go live. See Pro architecture for an overview.\n\nThe following graphic demonstrates the Pro develop and deploy workflow, which uses a simple, git-branching approach. You develop code using an Active branch based on the Integration environment branch, pushing and pulling code changes to and from your remote, Active branch. You deploy verified code by merging the remote branch to the base branch, which activates an automated build and deploy process for that environment.\n\n\n\n\n  For Pro projects created before October 23, 2017, the architecture is slightly different. See Pro architecture (legacy).\n\n\nDevelopment workflow\nThe Integration environment provides a single, base integration branch containing your Magento Commerce (Cloud) code. You can create up to four additional branches for developing your custom code, extensions, and third party integrations. This allows for a maximum of five active branches deployed to Platform-as-a-Service (PaaS) containers.\n\nThe Magento Commerce (Cloud) environments support a flexible, continuous integration process. Begin by cloning the integration branch to your local project folder. Create a new branch, or multiple branches, to develop new features, configure changes, add extensions, and deploy updates:\n\n\n  Fetch changes from integration\n  Branch from integration\n  Develop code on local workstation\n  Push code changes to remote and validate\n  Merge to integration and test\n\n\nWith a developed code branch and the corresponding configuration files, your code changes are ready to merge to the integration branch for more comprehensive testing. The Integration environment is also best for:\n\n\n  Integrating third party services—Not all services are available in the PaaS environment.\n  Generating configuration management files—Some configuration settings are Read Only in a deployed environment.\n  Configuring your store—You should fully configure all store settings using the Integration environment. You can find the Store Admin URL on the Integration environment panel in the Project Web Interface.\n\n\nDeployment workflow\nEvery time you push code from your local workstation to the remote environment or merge code to a base environment branch, the build and deploy scripts generate new Magento code and provision configured services to the remote environment.\n\nBuild script actions:\n\n\n  Site in the target environment continues to run during a build\n  Check and run Magento Commerce (Cloud) patches and hot fixes\n  Compile code with a build and deploy log\n  Check for Configuration Management, static content deploy occurs during this phase\n  Create or use a slug of unchanged code to speed up the process\n  Provision all backend services and applications\n\n\nDeploy script actions:\n\n\n  Place site in the target environment in a Maintenance mode\n  Deploy static content if not completed during Build\n  Install or update Magento Commerce (Cloud)\n  Configure routing for traffic\n\n\nAfter the build and deploy process, your store comes back online with your latest code changes and configurations. See Deployment process.\n\nMerge to Integration\nCombine all verified code changes by merging your Active development branch into the base integration branch. You can test all your changes on the integration branch before promoting changes to the Staging environment.\n\nMerge to Staging\nStaging is a pre-production environment that provides all services and settings as close to the Production environment as possible. You should always push your code changes in iterations to your Staging environment for full testing that includes all services. The first time you use the Staging environment, you must configure services, such as Fastly CDN, Blackfire Profiler, and New Relic APM. Also, we recommend configuring payment gateways, shipping, notifications, and other vital services with sandbox or testing credentials.\n\nIt is best to thoroughly test every service, verify your performance testing tools, and perform UAT testing as an administrator and as a customer, until you feel that your store is ready for the Production environment. See Deploy your store.\n\nMerge to Production\nAfter thorough testing in the Staging environment, merge to the Production environment and thoroughly test using live credentials. The moment you go live, customers must be able to complete purchases and administrators must be able to manage the live store. We provide a detailed, clear walk-through for deploying your store and going live:\n\n\n  See Deploy your store\n  See Go live and launch\n\n\nMerge to Global Master\nYou should always push a copy of the Production code to the Global Master in case there is an emergent need to debug the Production environment without interrupting services.\n\nDo not create a branch from Global Master. Use the integration branch to create new, active branches for development and fixes.\n\nRelated topics\n\n\n  Pro architecture\n  Local environment setup\n  Deployment process\n\n",
      "url": "/guides/v2.0/cloud/architecture/pro-develop-deploy-workflow.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-pro-env-management-html": {
      "title": "Add Staging and Production to Pro projects UI",
      "content": "For existing Pro plans, you previously had to access Staging and Production environments using SSH access or entering tickets. We have added additional features to the Project Web Interface to directly manage these environments without SSH for specific options.\n\nTo add these environments to the Project Web Interface, review this entire document to complete a few preparation steps and enter a ticket.\n\n\n  Please be aware, your ticket will be added to a queue for updating existing Pro projects. The process may take some time to complete. We will update your tickets with details, timing, and updates.\n\n\nAll new projects already include these features.\n\n\n  New projects provisioned October 23, 2017 and later will already have Staging and Production in their Project Web Interface. Any existing projects created before this date will need to enter a ticket to be converted. This information will help you understand the changes and enter a ticket.\n\n\nNew features\nThe new Project Web Interface provides the following features for Pro plan Staging and Production environments:\n\n\n  Add and manage user access to the environments\n  Sync code between Staging and Production to Integration environments\n  Merge code from Integration master to Staging and Production environments\n  Add and manage environment variables\n  Configure environment settings\n  Access the environments by SSH and URL. These links and commands are provided through the Access Links.\n  View build logs and deployment history\n\n\nRestricted features\nAs an important note, while you can manage Staging and Production environments, you cannot:\n\n\n  Branch from these environments. Staging and Production only have a single branch for syncing and receiving code from Integration.\n  Create snapshots through the interface. You can use SSH access with CLI commands as needed.\n  View deploy logs\n\n\nYou will need to enter support tickets to update and modify the following in Staging and Production:\n\n\n  Configurations for .magento.app.yaml and services.yaml\n  Cron jobs\n  Redirects from routes.yaml\n\n\nYou will continue to use SSH for:\n\n\n  Deploy code to Staging and Production\n\n\nBranch changes\nWhen converted, your branches will be updated. The current branhces include a repository for Integration, Staging, and Production. Each repository has a master branch with deployment targets configured for Staging and Production.\n\nAfter the conversion, the three repositories are merged into a single repository. You will have the following branches and environments:\n\n\n\n\nBranch\nEnvironment\nDescription\n\n\n\n(no branch)\nGlobal Master\nThis \"branch\" captures global project changes including adding user accounts and variables. Important: Do not create branches from or merge to Global Master.\n\n\n\nproduction\nProduction\nThis is a child branch from master with a deployment target. You cannot branch from this branch. You merge code from master to this branch to go live with updated configurations and code.\nWhen you convert, the Integration master is branched into a production branch with the users access and environment variables.\n\n\nstaging\nStaging\nThis is a child branch from master with a deployment target. You cannot branch from this branch. You merge code from master to this branch to test in a pre-production environment.\nWhen you convert, the Integration master is branched into a staging branch with the users access and environment variables.\n\n\nmaster\nIntegration\nThe master branch of the single repository. In the Project Web Interface, this is called Integration. You branch from master for your development on your local, generating an environment when you push code.\nWhen you convert, all active and inactive branches continue as children to the master branch.\n\n\n\n\nIn the Project Web Interface, you will see the following environments and branches:\n\n\n\nBe aware, the following actions will trigger a redeploy of the environment. This redeploy is much shorter, not pushing code or data changes.\n\n\n  Add a user to a specific environment\n  Add an environment variable to a specific environment\n\n\n\n\n  If you want to add the same variables to your Integration, Staging, and Production environments, we recommend adding all of the variables one at a time to Integration. After you finish adding variables, trigger a deployment to Staging and production. All variables will be inherited from Integration.\n\n  Prepare for adding Staging and Production\n  When we add Staging and Production access to the Project Web Interface, we will leverage the user accounts, branch user permissions, and environment variables from your Integration master environment.\n\n  To prepare, ensure you have all settings and environment variables set correctly.\n\n  \n    Verify Git code matches across environments\n    Verify user account access\n    Prepare variables\n  \n\n  Verify Git code matches across environments\n  We strongly recommend working in your local development environment then deploying to Integration, Staging, and finally Production. All Git code should match 100% across each of these environments. If you have additional code (for example new extensions) on Production without following this workflow, any deployments from Integration or Staging will overwrite your Production code.\n\n  Before entering a ticket, make sure your Git code matches and is synced.\n\n  \n    The process will create a new Git branch of code for Staging and Production environments. When we create this code, it will push and overwrite on Production. Do not skip this step.\n  \n\n  Verify user account access\n  We recommend verifying your user account access and permissions set in the Master Integration environment. When adding Staging and Production to the Project Web Interface, all user accounts and settings are used initially. You can modify the settings and values for these environments after they are added.\n\n  \n    Log in to your Magento Commerce (Cloud) account.\n    Click the Projects tab and the name of your project.\n    Click Master to open the environment information and settings.\n    Click  Configure environment.\n    Click the Users tab to review the user accounts and permission configurations.\n    You can add users if needed. Click Add User, enter an email address, and select a permission. These include Admin (change settings, execute action, merge code), Contributor (push code), or Reader (view only).\n    To modify the environment permissions for a user, select Edit for the account and change the permissions. These include Admin (change settings, execute action, merge code), Contributor (push code), or Reader (view only). Select a permission and save.\n  \n\n  Prepare variables\n  When we convert your project to the new Project Web Interface, we add variables from Integration master to Staging and Production. You can review, modify, and add variables through the current Project Web Interface prior to conversion.\n\n  \n    Log in to your Magento Commerce (Cloud) account.\n    Click the Projects tab and the name of your project.\n    Click the Integration master branch to open the environment information and settings.\n    Click Configure environment.\n    On the Variables tab, review the environment variables.\n To create a new variable, click Add Variable.\n To update an existing variable, click Edit next to the variable.\n  \n\n  For environment specific variables, including sensitive data and values, you can add those variables after we update your Project Web Interface. If you have environment variables in an env.php file, the file continues working after converting. You can add and manage these variables via SSH and CLI commands directly into the Staging and Production environments.\n\n  Enter a ticket for updating the Project Web Interface\n  Enter a Support ticket with the suggested title “Connect Stg / Prod to Project’s UI”. In the ticket, request to have your project enabled with Staging and Production in the UI.\n\n  We will review the infrastructure and settings, create user and environment variables for Staging and Production environments, and update the ticket with results.\n\n  When done, you can access review your project through the Project Web Interface.\n\n  Optional, move environment variables\n  Optionally, after conversion you can also migrate specific environment variables manually into the Project Web Interface for Staging and Production. This is not required, but supported.\n\n  First, SSH into the Staging or Production environment to use CLI commands to list your variables:\n\n  \n    Log in to your Magento Commerce (Cloud) account.\n    Click the Projects tab and the name of your project.\n    Click the Staging or Production environment and click Access Site for the SSH link.\n    Use a terminal application to SSH into Staging or Production.\n    Enter this CLI command to list all environment variables: magento-cloud variable:list\n  \n\n  Second, add the variables from the CLI list through the Project Web Interface:\n\n  \n    Log in to your Magento Commerce (Cloud) account.\n    Click the Projects tab and the name of your project.\n    Click the Staging or Production environment to add variables.\n    On the Variables tab, review the environment variables.\n To create a new variable, click Add Variable.\n To update an existing variable, click Edit next to the variable.\n    To add a variable from the CLI list, click Add Variable, enter the variable name and value, and select the Override checkbox. This uses the variables from the Project Web Interface over the local CLI or database values.\n  \n\n  You can use CLI commands to remove the variables if you want while still accessing the environment using SSH.\n\n  When accessing the Project Web Interface, you should see a hierarchy of branches starting from Production to Staging to Integration Master and so on. Any branches you create display as children from Integration Master. For more information, see Pro architecture.\n\n  \n\n  Related topics\n  \n    Manage your project\n  \n\n",
      "url": "/guides/v2.0/cloud/trouble/pro-env-management.html"
    }
    ,
  
    "guides-v2-0-config-guide-prod-prod-html": {
      "title": "Deploy Magento to production",
      "content": "We’re constantly learning from our community about how to deploy Magento into production. Our current topics on the subject are basic but we’d love to hear from you to make them better.\n\nIf you have advice or experience to share, open an issue or pull request  in our GitHub repository. Also see our contribution guidelines.\n\nCurrent topics include:\n\n\n  Deployment steps\n  Magento ownership and permissions in development and production\n  Magento performance optimization for production deployments\n\n",
      "url": "/guides/v2.0/config-guide/prod/prod.html"
    }
    ,
  
    "guides-v2-0-config-guide-prod-prod-deploy-html": {
      "title": "Deploy to production",
      "content": "There are different viable strategies available for deploying changes to Magento.\nHow you deploy changes to Magento depends on the setup of your production server.\n\nThe following is a list of recommended strategies for production deployment:\n\n\n  Single machine deployment\n  Magento Commerce (Cloud) deployment\n  Deployment strategies from the community\n\n\n",
      "url": "/guides/v2.0/config-guide/prod/prod_deploy.html"
    }
    ,
  
    "guides-v2-0-config-guide-prod-prod-file-sys-perms-html": {
      "title": "Magento ownership and permissions in development and production",
      "content": "Overview of development and production file system ownership and permissions\nThis section discusses how to set up the owner or owners of the Magento file system for a development and production system. Before you continue, review the concepts discussed in Overview of file system ownership and permissions.\n\nThis topic focuses on Magento development and production systems. If you’re installing Magento, see Set pre-installation ownership and permissions.\n\nThe sections that follow discuss requirements for one or two Magento file system owners. That means:\n\n\n  \n    One user: Typically necessary on shared hosting providers, which allow you to access only one user on the server This user can log in, transfer files using FTP, and this user also runs the web server.\n  \n  \n    Two users: We recommend two users if you run your own Magento server: one to transfer files and run command-line utilities, and a separate user for the web server software. When possible, this is preferable because it’s more secure.\n\n    Instead, you have separate users:\n\n    \n      \n        The web server user, which runs the Magento Admin (including Setup Wizard) and storefront.\n      \n      \n        A command-line user, which is a local user account you can use to log in to the server. This user runs Magento cron jobs and command-line utilities.\n      \n    \n  \n\n\n\nProduction file system ownership for shared hosting (one user) To use the one-owner setup, you must log in to your Magento server as the same user that runs the web server. This is typical for shared hosting.\n\nBecause having one file system owner is less secure, we recommend you deploy Magento in production on a private server instead of on shared hosting, if possible.\n\nSet up one owner for default or developer mode\nIn default or developer mode, the following directories must be writable by the user:\n\n\n  vendor\n  app/etc\n  pub/static\n  var\n  Any other static resources\n  var/generation\n  var/di\n  var/view_preprocessed\n\n\nYou can set these permissions using either the command line or a file manager application provided by your shared hosting provider.\n\nSet up one owner for production mode\nWhen you’re ready to deploy your site to production, you should remove write access from files in the following directories for improved security:\n\n\n  vendor\n  app/code\n  app/etc\n  pub/static\n  Any other static resources\n  var/generation\n  var/di\n  var/view_preprocessed\n\n\nTo update components, install new components, or to upgrade the Magento software, all of the preceding directories must be read-write.\n\nMake code files and directories read-only\nTo remove writable permissions to files and directories from the web server user’s group:\n\n\n  Log in to your Magento server.\n  Change to your Magento installation directory.\n  \n    Enter the following command to change to production mode:\n\n    php bin/magento deploy:mode:set production\n    \n  \n  \n    Enter the following command:\n\n    find app/code pub/static app/etc var/generation var/di var/view_preprocessed vendor \\( -type f -or -type d \\) -exec chmod u-w {} \\; &amp;&amp; chmod o-rwx app/etc/env.php &amp;&amp; chmod u+x bin/magento\n    \n  \n\n\nMake code files and directories writable:\nTo make files and directories writable so you can update components and upgrade the Magento software:\n\n\n  Log in to your Magento server.\n  Change to your Magento installation directory.\n  \n    Enter the following commands:\n\n    chmod -R u+w .\n    \n  \n\n\nOptionally set magento_umask\n\n\n\n  The web server group must have write permissions to certain directories in the Magento file system; however, you might want tighter security, especially in production. We provide the flexibility for you to further restrict those permissions using a umask.\n\n  Our solution is to enable you to optionally create a file named magento_umask in your Magento root directory that restricts permissions for the web server group and everyone else.\n\n  \n  We recommend changing the umask on a one-user or shared hosting system only. If you have a private Magento server, the group must have write access to the Magento file system; the umask removes write access from the group.\n\n\n  The default umask (with no magento_umask specified) is 002, which means:\n\n  \n    \n      775 for directories, which means full control by the user, full control by the group, and enables everyone to traverse the directory. These permissions are typically required by shared hosting providers.\n    \n    \n      664 for files, which means writable by the user, writable by the group, and read-only for everyone else\n    \n  \n\n  A common suggestion is to use a value of 022 in the magento_umask file, which means:\n\n  \n    755 for directories: full control for the user, and everyone else can traverse directories.\n    644 for files: read-write permissions for the user, and read-only for everyone else.\n  \n\n  To set magento_umask:\n\n  \n    Log in to your Magento server, or switch to, the Magento file system owner.\n    \n      Set the value of magento_umask:\n\n      \n        Use a text editor to create a new file &lt;your Magento install dir&gt;/magento_umask\n        \n          Set magento_umask to the desired value.\n\n          For example, 022\n        \n      \n    \n    Save your changes to magento_umask and exit the text editor.\n  \n\n\n\n\nProduction file system ownership for private hosting (two users) If you use your own server (including a hosting provider’s private server setup), there are two users:\n\n\n  \n    The web server user, which runs the Magento Admin (including the Setup Wizard) and storefront.\n\n    Linux systems typically do not provide a shell for this user; you cannot log in to the Magento server as, or switch to, the web server user.\n  \n  \n    The command-line user, which you log in to your Magento server as or switch to.\n\n    Magento uses this user to run Magento CLI commands and cron.\n\n    \n      The command-line user is also referred to as the Magento file system owner.\n    \n  \n\n\nBecause these users require access to the same files, we recommend you create a shared group to which they both belong. The following procedures assume you have already done this.\n\nSee one of the following sections:\n\n\n  Two Magento file system owners in developer or default mode\n  Two Magento file system owners in production mode\n\n\nSet up two owners for default or developer mode\nFiles in the following directories must be writable by both users in developer and default mode:\n\n\n  var\n  pub/static\n  pub/media\n  app/etc\n\n\nSet the setgid bit on directories so permissions always inherit from the parent directory.\n\n\n  setgid applies to directories only, not to files.\n\n\nIn addition, the directories should be writable by the web server group. Because content might already exist in these directories, add the permissions recursively.\n\nSet permissions and setgid\nTo set setgid and permissions for developer mode:\n\n\n  Log in to your Magento server as, or switch to, the Magento file system owner.\n  \n    Enter the following commands in the order shown:\n\n    cd &lt;your Magento install dir&gt;\nfind var pub/static pub/media app/etc -type f -exec chmod g+w {} \\;\nfind var pub/static pub/media app/etc -type d -exec chmod g+ws {} \\;\n    \n  \n\n\nTwo Magento file system owners in production mode\nWhen you’re ready to deploy your site to production, you should remove write access from files in the following directories for improved security:\n\n\n  vendor\n  app/code\n  app/etc\n  lib\n  pub/static\n  Any other static resources\n  var/generation\n  var/di\n  var/view_preprocessed\n\n\nMake code files and directories read-only\nTo remove writable permissions to files and directories from the web server user’s group:\n\n\n  Log in to your Magento server.\n  Change to your Magento installation directory.\n  \n    As the Magento file system owner, enter the following command to change to production mode:\n\n    php bin/magento deploy:mode:set production\n    \n  \n  \n    Enter the following command as a user with root privileges:\n\n    find app/code lib pub/static app/etc var/generation var/di var/view_preprocessed vendor \\( -type d -or -type f \\) -exec chmod g-w {} \\; &amp;&amp; chmod o-rwx app/etc/env.php\n    \n  \n\n\nMake code files and directories writable:\nTo make files and directories writable so you can update components and upgrade the Magento software:\n\n\n  Log in to your Magento server.\n  Change to your Magento installation directory.\n  \n    Enter the following command:\n\n    find app/code lib var pub/static pub/media vendor app/etc \\( -type d -or -type f \\) -exec chmod g+w {} \\; &amp;&amp; chmod o+rwx app/etc/env.php\n    \n  \n\n\n\n",
      "url": "/guides/v2.0/config-guide/prod/prod_file-sys-perms.html"
    }
    ,
  
    "guides-v2-0-config-guide-prod-prod-perf-optimize-html": {
      "title": "Magento Optimization Guide",
      "content": "This topic provides instructions for optimizing the performance of your production deployment.\nThis process should be followed by technical users responsible for stores running in production to optimize performance.\n\nAssumptions\n\n\n  You installed Magento using Composer or a compressed archive\n  You will be using this environment to run your live production instance of Magento 2\n\n\nServer - Software Recommendations\n\nThe following is a list of recommended software for production instances in order of impact:\n\n\n  Varnish cache\n  PHP 7\n  (Enterprise only) Use the Solr &amp; Solr Search Adapter\n  Nginx and PHP-FPM\n\n\nFor multi-server deployments or for merchants planning on scaling their business we recommend the following:\n\n\n  Redis for sessions (from 2.0.6+)\n  A separate Redis instance as your default cache\n  Do not use this instance for page cache\n\n\nServer - Composer Optimization\n\nAfter running setup:di:compile to generate classes, use composer to update the autoloader.\n\nRun the following composer command to generate an optimized composer class map that supports faster auto-loading.\n\ncomposer dump-autoload -o\n\n\nServer - PHP Configuration\n\nWe recommend enabling and tuning PHP opcache for maximum performance.\nEdit your opcache.ini file to include the following:\n\nopcache.enable_cli=1\nopcache.memory_consumption=512\nopcache.max_accelerated_files=100000\nopcache.validate_timestamps=0\nopcache.consistency_checks=0\n\n\nWhen you fine tune the memory allocation for opcache, take into account the size of Magento’s code base and all your extensions.\nMagento’s performance team uses the values in the preceding example for testing because it provides enough space in opcache for the average number of installed extensions.\n\nIf you are on a low memory machine and you do not have many extensions or customizations installed, use the following settings to get a similar result:\n\nopcache.memory_consumption=64\nopcache.max_accelerated_files=60000\n\n\nServer - Redis Configuration &amp; Tuning\n\nSessions\n\nConsider how sessions are flushed from the cache and your merchants abandoned cart strategy.\n\nCaches\n\nEstimate a memory size to fit the total number of effective skus, product pages and content pages you expect will be used.\n\nMagento - Performance Optimizations\n\nEnable these performance optimizations to improve the store front responsiveness of your Magento instance.\n\nGo to the Admin in default of developer mode and change the following settings for store front asset optimization:\n\nStores -&gt; Configuration -&gt; Advanced -&gt; Developer\n\n\n  \n    \n      Settings Group\n      Setting\n      Value\n    \n  \n  \n    \n      Grid Settings\n      Asynchronous indexing\n      Enable\n    \n    \n      CSS Settings\n      Minify CSS Files\n      Yes\n    \n    \n      Javascript Settings\n      Minify JavaScript Files\n      Yes\n    \n    \n      Javascript Settings\n      Enable JavaScript Bundling\n      Yes\n    \n    \n      Template Settings\n      Minify HTML\n      Yes\n    \n  \n\n\nStores -&gt; Configuration -&gt; Sales -&gt; Sales Emails\n\n\n  \n    \n      Settings Group\n      Setting\n      Value\n    \n  \n  \n    \n      General Settings\n      Asynchronous Sending\n      Enable\n    \n  \n\n\nStores -&gt; Index Management\n\nSet all indexers to “Update on Schedule” mode.\n\nProduction Mode\n\nSwitching to production mode improves store front responsiveness and prevents long initial page load times that can occur in default mode.\n\nRun the following commands to switch to production mode:\n\nbin/magento deploy:mode:set production\n\n\n",
      "url": "/guides/v2.0/config-guide/prod/prod_perf-optimize.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-product-video-html": {
      "title": "Configure product video",
      "content": "What’s in this topic\n\nIn Magento 2 on product pages you can add video from external resources (currently, from YouTube and Vimeo). Video is added in Admin when creating or editing a product. \nCertain product video options can be set in the config.xml configuration file. These settings are not theme-specific.\n\nConfigure product video options\n\nYou can set the following product video options:\n\n\n  \n    \n      Option\n      Description\n      Type\n      Default\n    \n    \n      \n        play_if_base\n      \n      Play automatically on page load.\n      \n        Boolean\n      \n      \n        0 \n(video is not played on page load)\n      \n    \n    \n      \n        show_related\n      \n      Display related videos.\n      \nBoolean\n           \n      \n\n0 \n(related videos are not displayed)\n\n    \n    \n      \n        video_auto_restart\n      \n      Auto re-play video.\n      \nBoolean\n           \n      \n\n0 \n(video is not automatically replayed)\n\n    \n  \n\n\nThe options are set in the config.xml of your custom module.\n\nExample:\n\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Store:etc/config.xsd\"&gt;\n    &lt;default&gt;\n        &lt;catalog&gt;\n            &lt;product_video&gt;\n                &lt;play_if_base&gt;1&lt;/play_if_base&gt;\n                &lt;show_related&gt;1&lt;/show_related&gt;\n                &lt;video_auto_restart&gt;1&lt;/video_auto_restart&gt;\n            &lt;/product_video&gt;\n        &lt;/catalog&gt;\n    &lt;/default&gt;\n&lt;/config&gt;\n\nFor the sake of compatibility, upgradability and easy maintenance, do not edit the default Magento code. Instead add your customizations in a separate module.\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/product-video.html"
    }
    ,
  
    "guides-v2-0-pattern-library-feedbacktouser-progressindicator-progressindicator-html": {
      "title": "Admin Design Pattern Library",
      "content": "Progress indicator\nWithin the Magento application, users sometimes need to wait for a process to be completed by the system. In such case, it is best to communicate that to the user that the system is working the process that the user requested. There are two types of progress indicator: 1.) a progress bar and 2.) a spinner.\n\nThe use of progress indicator should follow this guideline.\n\nWhen to Use\n\n  Use when needing to provide feedback to the user that a process is running, especially when user initiate the process.\n  When a percentage of completion can be shown and the process , use a progress bar.\n  When a percentage of completion cannot be shown or the process is relatively short, use a spinner.\n\n\nWhen Not to Use\n\n  When process’ progress communicates well enough on its own.\n  When process completes so quickly that it is distracting to show progress. If the task takes less than 500ms.\n  When the process waits for the user to complete the task.\n  When the user doesn’t need to know something is happening\n  When the process operates in the background and doesn’t block user activity, progress indicator can be used but is not necessary.\n  When you can use content from the operation to visualize progress.\n\n\nBehavior\n\nProgress indicator is read-only, not interactive.\n\nSpinner\n\nSpinner is a gif image.\n\n\n\n\n  Process is triggered\n  Show spinner - To avoid flickering, if a process generally takes 2 seconds to complete, but can be completed under 500ms. Delay 500ms before showing the spinner.\n  Once process is completed, the spinner disappear along with other indicative elements depending on the context.\n\n\nProgress Bar\n\nIn general, it is not recommended to use the progress bar if the process can be completed under 3 seconds. To avoid flickering, the minimum time displayed of progress bar should be 3 seconds.\n\nStates Diagram\n\n\n\n\n  \n    Process Trigger\nThis process trigger is what the user tell system to start process. It can be anything depending on the context such as a button or a drop action.\n  \n  \n    Starting State\n  \n\n\n\n\n\n  Progressing\n\n\n\n\n\n  \n    Success\nOnce success, the page should refresh to show success status. The success status and behavior will depend on context of the scenario. (ie. open new page, stay on the same page, success message, etc.)\n  \n  \n    Failed\nThe progress bar will disappeared and is replaced with this error message.\n  \n\n\n\n\nVariations\n\n\n\nStyle\n\nSpinner\n\nThe spinner can be any of these 4 sizes.\n\n\n\nProgress Bar\n\n*Refer to Messaging Pattern for final styling on error message.\n\n\n\nAssets\nPSD files and gif images can be found here:\nDownload Progress Indicator PSD and GIF source\n\nFor any other resources, please contact the Magento UX Design Team\n",
      "url": "/guides/v2.0/pattern-library/feedbackToUser/progressIndicator/progressIndicator.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-magento-app-html": {
      "title": ".magento.app.yaml",
      "content": "About .magento.app.yaml\nMagento Commerce supports multiple applications per project but typically, a project is composed of a single application, in which case you can simply put a .magento.app.yaml at the root of your repository.\n\nThis file controls the application and the way it is built and deployed on Magento Commerce (Cloud). To see a sample of the file, see .magento.app.yaml. Make sure to review the .magento.app.yaml for your installed version. This file can differ across Magento Commerce (Cloud) versions.\n\n\n  Changes you make using YAML files affect your Integration environment only. For technical reasons, neither Staging nor Production environments use YAML files. To make these changes in a Staging or Production environment, you must create a Support ticket.\n\n\nThe following sections discuss properties in .magento.app.yaml.\n\nDefaults\n.magento.app.yaml has many default values; see the sample .magento.app.yaml.\n\nname property\nname identifies the application in the project. Magento Commerce supports multiple applications in a project, so each application must have a unique name in a project.\n\nname can consist only of lower case alphanumeric characters; that is, a–z and 0–9. name is used in the routes.yaml to define the HTTP upstream (by default, php:php).\n\nFor example, if the value of name is app, you must use app:php in the upstream field. You can also use this name in multi-application relationships.\n\n\n  If you change the name you should think about updating your other configuration files (routes.yaml or the different .magento.app.yaml, you will have in a multi-application project. Changing the name has no effect on your different services (such as databases)\n\n\ntype and build\nThe type  and build properties are used to build and run the project. The only supported type currently is PHP.\n\nSupported versions for 2.0.X to 2.1.X:\n\ntype: php:5.5\ntype: php:5.6\ntype: php:7.0\n\n\nThe build determines what happens by default when building the project. The only value currently supported is composer.\n\nExample:\n\ntype: php:7.0\nbuild:\n    flavor: composer\n\n\naccess\naccess defines the user roles who can log in using SSH to the environments to which they have access.\n\nPossible values are:\n\nssh: admin\nssh: contributor\nssh: viewer\n\n\nrelationships\nrelationships defines how services are mapped in your application.\n\nThe left-hand side is the name of the relationship as it will be exposed to the application in the MAGENTO_CLOUD_RELATIONSHIPS environment variable. The right-hand side is in the form &lt;service name&gt;:&lt;endpoint name&gt;, where &lt;service name&gt; comes from .magento/services.yaml and  &lt;endpoint name&gt; should be the same as the value of type  declared in that same file.\n\nExample of valid options are:\n\ndatabase: \"mysql:mysql\"\ndatabase2: \"mysql2:mysql\"\ncache: \"arediscache:redis\"\nsearch: \"searchengine:solr\"\n\n\nSee also services.yaml documentation for a full list of currently supported service types and endpoints.\n\nweb\nweb defines how your application is exposed to the web (in HTTP). Here we tell the web application how to serve content, from the front-controller script to a non-static request to an index.php file on the root. We support any directory structure so the static file can be in a sub directory, and the index.php file can be further down.\n\nweb supports the following:\n\n\n  document_root: The path relative to the root of the application that is exposed on the web. Typical values include /public and /web.\n  passthru: The URL used in the event a static file or PHP file could not be found. This would typically be your applications front controller, often /index.php or /app.php.\n  index_files: To use a static file (for example, index.html) to serve your application. This key expects a collection. For this to work, the static file(s) should be included in your whitelist. For example, to use a file named index.html as an index file, your whitelist should include an element that matches the filename, like - \\.html$.\n  blacklist: A list of files that should never be executed. Has no effect on static files.\n  whitelist: A list of static files (as regular expressions) that can be served. Dynamic files (for example, PHP files) are treated as static files and have their source code served, but they are not executed.\n  expires: The number of seconds whitelisted (that is, static) content should be cached by the browser. This enables the cache-control and expires headers for static content. The expires directive and resulting headers are left out entirely if this isn’t set.\n\n\nContrary to standard .htaccess approaches, which accept a blacklist and allow everything to be accessed except a specific list, we accept a whitelist, which means that anything not matched will trigger a 404 error and will be passed through to your passthru URL.\n\nOur default configuration allows the following:\n\n\n  From the root (/) path, only web, media, and robots.txt files can be accessed\n  From the /pub/static and /pub/media paths, any file can be accessed\n\n\nThe following displays the default set of web accessible locations associated with an entry in mounts:\n\n# The configuration of app when it is exposed to the web.\nweb:\nlocations:\n    \"/\":\n        # The public directory of the app, relative to its root.\n        root: \"pub\"\n        # The front-controller script to send non-static requests to.\n        passthru: \"/index.php\"\n        index:\n            - index.php\n        expires: -1\n        scripts: true\n        allow: false\n        rules:\n            \\.(css|js|map|hbs|gif|jpe?g|png|tiff|wbmp|ico|jng|bmp|svgz|midi?|mp?ga|mp2|mp3|m4a|ra|weba|3gpp?|mp4|mpe?g|mpe|ogv|mov|webm|flv|mng|asx|asf|wmv|avi|ogx|swf|jar|ttf|eot|woff|otf|html?)$:\n                allow: true\n            /robots\\.txt$:\n                allow: true\n    \"/media\":\n        root: \"pub/media\"\n        allow: true\n        scripts: false\n        passthru: \"/index.php\"\n    \"/static\":\n        root: \"pub/static\"\n        allow: true\n        scripts: false\n        passthru: \"/front-static.php\"\n        rules:\n            ^/static/version\\d+/(?&lt;resource&gt;.*)$:\n                  passthru: \"/static/$resource\"\n\n\ndisk\ndisk defines the size of the persistent disk size of the\napplication in MB.\n\n\n  The minimal recommended disk size is 256MB. If you see the error UserError: Error building the project: Disk size may not be smaller than 128MB, increase the size to 256MB.\n\n\nmounts\nmounts is an object whose keys are paths relative to the root of the application. The mount is a writable area on the disk for files. It’s in the form volume_id[/subpath].\n\nThe following is a default list of mounts configured in magento.app.yaml:\n\n# The mounts that will be performed when the package is deployed.\nmounts:\n    \"var\": \"shared:files/var\"\n    \"app/etc\": \"shared:files/etc\"\n    \"pub/media\": \"shared:files/media\"\n    \"pub/static\": \"shared:files/static\"\n\n\nThe format for adding your mount to this list is as follows:\n\n\"/public/sites/default/files\": \"shared:files/files\"\n\n\n\n  shared means that the volume is shared between your applications inside an environment.\n  disk key defines the size available for that shared volume\n\n\n\n  Important: The subpath portion of the mount is the unique identifier of the files area. If changed, files at the old location will be permanently lost. Do not change this value once your site has data unless you really want to lose all existing data.\n\n\nIf you also want the mount web accessible, you must add it to the web block of locations.\n\ndependencies\ndependencies enables you to specify dependencies that your application might need during the build process.\n\nMagento Commerce supports dependencies on the following\nlanguages:\n\n\n  PHP\n  Ruby\n  NodeJS\n\n\nThose dependencies are independent of the eventual dependencies of your application, and are available in the PATH, during the build process and in the runtime environment of your application.\n\nYou can specify those dependencies as follows:\n\nruby:\n   sass: \"~3.4\"\nnodejs:\n   grunt-cli: \"~0.3\"\n\n\nhooks\nUse the hooks section to specify which shell commands to run during the build and deploy phases. For example, you may want to run a CLI command provided by a custom extension during the build phase.\n\n\n  build—Execute commands before packaging your application. Services, such as the database or Redis, are not available at this time since the application has not been deployed yet. You must add custom commands before the default php ./vendor/bin/m2-ece-build command to make sure custom-generated content makes it to the deployment phase.\n  deploy—Execute commands after packaging and deploying your application. You can access other services at this point. Since the default php ./vendor/bin/m2-ece-deploy command copies the app/etc directory to correct location, you must add custom commands after the deploy command to prevent custom commands from failing.\n\n\nAdd CLI commands under the build or deploy sections:\n\nhooks:\n    # We run build hooks before your application has been packaged.\n    build: |\n        php ./bin/magento &lt;custom-command&gt;\n        php ./vendor/bin/m2-ece-build\n    # We run deploy hook after your application has been deployed and started.\n    deploy: |\n        php ./vendor/bin/m2-ece-deploy\n        php ./bin/magento &lt;custom-command&gt;\n\n\nThe home directory, where your application is mounted, is /app, and that is the directory from which hooks will be run unless you cd somewhere else.\n\nThe hooks fail if the final command in them fails. To cause them to fail on the first failed command, add set -e to the beginning of the hook.\n\n[Example] Compile SASS files using grunt\nFor example, to compile SASS files using grunt:\n\ndependencies:\n  ruby:\n    sass: \"3.4.7\"\n  nodejs:\n    grunt-cli: \"~0.1.13\"\n\nhooks:\n  build: |\n    cd public/profiles/project_name/themes/custom/theme_name\n    npm install\n    grunt\n    cd\n    php ./bin/magento magento-cloud:build\n\n\nYou must compile SASS files using grunt before static content deployment, which happens during the build. Place the grunt command before the build command.\n\ncrons\ncrons describes processes that are triggered on a schedule. We recommend you run cron as the Magento file system owner. Do not run cron as root. We also recommend against running cron as the web server user.\n\nMore information about crons:\n\ncrons supports the following:\n\n\n  spec: The cron specification. The minimum interval is once per 5 minutes.\n  cmd: The command to execute.\n\n\nA sample Magento cron job follows:\n\ncrons:\n  cronrun:\n      spec: \"*/5 * * * *\"\n      cmd: \"php bin/magento cron:run\"\n\n\nConfigure PHP options\nYou can choose which version of PHP you want to run in your .magento.app.yaml file.:\n\nname: myphpapp\ntype: php:5.6\n\n\nFor Magento Commerce (Cloud) 2.0.X - 2.1.X we support 5.5, 5.6, and 7.0.\n\nSee one of the following sections for more information:\n\n\n  PHP extensions\n  Customize php.ini settings\n\n\nPHP extensions\nYou can define additional PHP extensions you want to enable or disable. Example:\n\n# .magento.app.yaml\nruntime:\n    extensions:\n        - xdebug\n        - redis\n        - ssh2\n    disabled_extensions:\n        - sqlite3\n\n\nTo view the current list of PHP extensions, SSH into your environment and enter the following command:\n\nphp -m\n\n\nMagento requires the following PHP extensions that are enabled by default:\n\n\n  curl\n  gd\n  intl\n  \n    PHP 7 only:\n\n    \n      json\n      iconv\n    \n  \n  mcrypt\n  PDO/MySQL\n  bc-math\n  mbstring\n  mhash\n  openssl\n  SimpleXML\n  soap\n  xml\n  zip\n\n\nYou must install the following extensions:\n\n\n  ImageMagick 6.3.7 (or later), ImageMagick can optionally be used with the gd extension\n  xsl\n  redis\n\n\nIn addition, we strongly recommend you enable opcache.\n\nOther PHP extensions you can optionally install:\n\n\n  apcu\n  blackfire\n  enchant\n  gearman\n  geoip\n  imap\n  ioncube\n  pecl-http\n  pinba\n  propro\n  pspell\n  raphf\n  readline\n  recode\n  snmp\n  sqlite3\n  ssh2\n  tidy\n  xcache\n  xdebug\n  xhprof\n  xmlrpc\n\n\n\n  Important: PHP compiled with debug is not supported and the Probe may conflict with XDebug or XHProf. Disable those extensions when enabling the Probe. The Probe conflicts with some PHP extensions like Pinba or IonCube.\n\n\nCustomize php.ini settings\nYou can also create and push a php.ini file that is appended to the configuration maintained by Magento Commerce.\n\nIn your repository, the php.ini file should be added to the root of the application (the repository root).\n\n\nConfiguring PHP settings improperly can cause issues. We recommend only advanced administrators set these options.\n\n\nFor example, if you need to increase the PHP memory limit:\n\nmemory_limit = 756M\n\n\nFor a list of recommended PHP configuration settings, see Required PHP settings.\n\nAfter pushing your file, you can check that the custom PHP configuration has been added to your environment by creating an SSH tunnel to your environment and entering:\n\ncat /etc/php5/fpm/php.ini\n\n\nRelated topics\n\n  Get started with a project\n  routes.yaml\n  services.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_magento-app.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-routes-html": {
      "title": "routes.yaml",
      "content": "routes.yaml overview\nA route describes how an incoming URL is processed by Magento Commerce.\n\nroutes.yaml defines routes for development, integration, staging, and production systems. This one configuration file handles routes for all systems.\n\nThis file is located at .magento/routes.yaml in your project.\n\n\n  When you push your local environment to the remote server, our deploy script uses the values defined by configuration files in the .magento directory, then the script deletes the directory and its contents. Your local development environment isn't affected.\n\n\nSample routes.yaml\n\n\n  Changes you make using YAML files affect your Integration environment only. For technical reasons, neither Staging nor Production environments use YAML files. To make these changes in a Staging or Production environment, you must create a Support ticket.\n\n\nDefaults\nIf you do not have a routes.yaml file, the following default is used:\n\n\"http://{default}/\":\n    type: upstream\n \t   upstream: \"mymagento:php\"\n\n\nRoute templates\nroutes.yaml is a list of templated routes and their configurations. A route  template can look like this: http://www.{default}/ or https://{default}/blog, where {default} is the fully qualified domain name configured for the project.\n\nIf the domain is example.com, these routes resolve: http://www.example.com/ and https://example.com/blog for the live environment (that is, the Master).\n\nMagento Commerce also generates URLs for every active environment that enable you to test that system. In a test system, {default} is replaced with [branch]-[project-id].[region].magentosite.cloud.\n\nFor example, if the project ID is mswy7hzcuhcjw on a branch called refactorcss hosted in the na cluster, the domains are: http://www-refactorcss-mswy7hzcuhcjw.us.magentosite.cloud/ and https://refactorcss-mswy7hzcuhcjw.us.magentosite.cloud/blog\n\n\n  The na region is shown as an example; it's not currently available. Magento plans support for na first, then au and eu at a later date.\n\n\n\n\nRoute options\nEach route can be configured separately with the following properties:\n\n\n  type can be:\n    \n      upstream serves an application\n        \n          It also has an upstream property that specifies the name of\nthe application (as defined in .magento.app.yaml) followed by :php (see\n the following examples.\n        \n      \n      redirect redirects to another route\n        \n          It is followed by to property, which is an HTTP redirection to\nanother route that will be identified by its template (see the following examples.\n        \n      \n    \n  \n  cache controls caching for the route.\n  ssi controls whether Server Side Includes are enabled.\n  redirects controls redirect rules associated with the route.\n\n\nSimple routes\nFollowing is a sample routes.yaml file:\n\n\"http://{default}/\":\n  type: upstream\n  upstream: \"frontend:php\"\n\"http://www.{default}/\":\n  type: redirect\n  to: \"http://{default}/\"\n\n\nThe preceding sample routes both the naked domain and the www subdomain to an application named frontend. This route does not redirect HTTPS.\n\nThe following route does not redirect from the www to the naked domain; instead, it serves from both:\n\n\"http://{default}/\":\n    type: upstream\n    upstream: \"php:php\"\n\n\"http://www.{default}/\":\n    type: upstream\n    upstream: \"php:php\"\n\n\nThe difference between the two preceding examples is that for the first one the server responds directly to a request of the form http://example.com/hello, but it will issue a 301 redirect for http://www.example.com/mypath (to http://example.com/mypath).\n\nWildcard routes\nMagento Commerce supports wildcard routes, so you can map multiple subdomains to the same application. This works both for redirect and upstream routes. You can simply prefix the route with a star (*), for example *.example.com, and www.example.com, blog.example.com, and us.example.com all get routed to the same application.\n\nFor your live environment, this functions as a catch-all domain.\n\nRouting a non-mapped domain\nYou can also route to a system that is not mapped to a domain (basically anything other than\na live master).\n\nSuppose your project on the EU cluster has an ID vmwklxcpbi6zq and a branch named add-theme. Magento Commerce automatically routes the URL http://add-theme-vmwklxcpbi6zq.na.magento.com/ to this environment. If, for example, you also defined a http://www.{default}/ route, you could visit http://www---add-theme-vmwklxcpbi6zq.na.magento.com/ to see the same environment.\n\n\n  The triple dash (---) is used as a separator for the subdomain. This is what replaces the dot (.).\n\n\nYou can put anything before the triple dashes and the route resolves. In this example, the route is defined as http://*.{default}/ route, so both http://foo---add-theme-vmwklxcpbi6zq.na.magentosite.cloud/ and http://bar---add-theme-vmwklxcpbi6zq.na.magentosite.cloud/ would work just fine.\n\nIf you examine the routes of your application (for example by running echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 --decode | json_pp in an SSH session on your environment), you will see a route such as https://*---add-theme-vmwklxcpbi6zq.na.magentosite.cloud/\n\nMore information about caching.\n\nRedirects\nAs discussed in more detail in redirects, you can set up complex redirection rules including partial redirects like the following:\n\nhttp://www.{default}/:\n  to: https://{default}/\n  \ttype: redirect\nhttp://{default}/:\n  to: https://{default}/\n  type: redirect\nhttps://{default}/:\n  cache:\n    cookies:\n    - '*'\n    default_ttl: 0\n    enabled: true\n\theaders:\n    - Accept\n    - Accept-Language\n  ssi:\n    enabled: false\n  type: upstream\n  upstream: php:php\n\n\nList routes\nYou can get a list of the configured routes for an environment by using the following command:\n\nmagento-cloud environment:routes\n\n\nRelated topics\n\n  Get started with a project\n  .magento.app.yaml\n  Caching\n  Redirects\n  Server side includes\n  services.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_routes.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-elastic-html": {
      "title": "Set up Elasticsearch service",
      "content": "Elasticsearch is an open source product that enables you to take data from any source, any format, and search and visualize it in real time.\n\n\n  Elasticsearch performs quick and advanced searches on products in the product catalog\n  Elasticsearch analyzers support multiple languages\n  Supports stop words and synonyms\n  Indexing does not impact customers until reindex is completed\n\n\nWe support Elasticsearch versions 1.4, 1.7, and 2.4. The default version is 1.7. We support Elasticsearch for all environments starting with Magento Commerce (Cloud) 2.1 and later. Refer to Elasticsearch information to learn more. For Magento Commerce (Cloud) 2.0.X, you can use Solr.\n\n\n  If you’re upgrading to Magento Commerce 2.1.3, you must change your configuration as discussed in the 2.1.3 Release Notes.\n\n\n\n  If you prefer using an existing search service, like Elasticsearch, instead of relying on Magento Commerce (Cloud) to create it for you, use the SEARCH_CONFIGURATION environment variable to connect it to your site.\n\n\nAdd Elasticsearch in services.yaml and .magento.app.yaml\nTo enable Elasticsearch, add the following code with your installed version and allocated disk space in MB to .magento/services.yaml.\n\nelasticsearch:\n   type: elasticsearch:1.7\n   disk: 1024\n\nTo configure the relationships for the environment variable, set a relationship in your .magento.app.yaml in the Git branch. For example:\n\nrelationships:\n    elasticsearch: \"elasticsearch:elasticsearch\"\n\nMerge and deploy the code to set the configurations for Elasticsearch. For information on how these changes affect your environments, see services.yaml.\n\nAdd Elasticsearch plugins\nOptionally, you can add the plugins through the .magento/services.yaml file. For example, to enable ICU analysis plugin and Python script support plugins, add the configuration plugins section with the listed plugin codes:\n\nelasticsearch:\n   type: elasticsearch:1.7\n   disk: 1024\n   configuration:\n    plugins:\n      - analysis-icu\n      - lang-python\n\nFor example, if you are using Smile ElasticSuite, you should add the following plugins:\n\nelasticsearch:\n   type: elasticsearch:2.4\n   disk: 1024\n   configuration:\n    plugins:\n      - analysis-icu\n      - analysis-phonetic\n\nThe following are supported Elasticsearch plugins for version 2.4:\n\n\n  analysis-icu: ICU Analysis Plugin, Support ICU Unicode text analysis\n  analysis-kuromoji: Japanese (kuromoji) Analysis Plugin, Japanese language support\n  analysis-phonetic: Phonetic Analysis Plugin, Phonetic analysis\n  analysis-smartcn: Smart Chinese Analysis Plugins\n  analysis-stempel: Stempel Polish Analysis Plugin\n  cloud-aws: AWS Cloud Plugin, allows storing indices on AWS S3\n  cloud-azure: Azure Cloud Plugin\n  cloud-gce: GCE Cloud Plugin\n  delete-by-query: Support for deleting documents matching a given query\n  discovery-multicast: Ability to form a cluster using TCP/IP multicast messages\n  lang-javascript: Javascript language plugin, allows the use of Javascript in Elasticsearch scripts\n  lang-python: Python language plugin, allows the use of Python in Elasticsearch scripts\n  mapper-attachments: Mapper attachments plugin for indexing common file types\n  mapper-murmur3: Murmur3 mapper plugin for computing hashes at index-time\n  mapper-size: Size mapper plugin, enables the _size meta field\n\n\nIf using Smile ElasticSuite, the required plugins are analysis-icu and analysis-phonetic. Make sure to add these to the plugins section of services.yaml. See Add Elasticsearch plugins.\n\nFor full documentation on these plugins, see Elasticsearch plugin documentation.\n\nVerify environment-related relationships\nWe use the Magento Commerce (Cloud) environment variable $MAGENTO_CLOUD_RELATIONSHIPS, a JSON object, to retrieve environment-related relationships.\n\n\n  You will use this information to complete Elasticsearch configuration in the Admin Panel.\n\n\nTo verify this information used for configurations and settings:\n\n\n  SSH into the Integration environment with Elasticsearch installed and configured.\n  \n    Enter the following command to pretty-print connection information for Elasticsearch. You will use this information when configuring Elasticsearch through the Magento Admin.\n\n     php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n  \n\n\nThe response includes all relationships for services and configuration data for that environment. In the response, you will locate data similar to the following for Elasticsearch:\n\n\"elasticsearch\" : [\n      {\n         \"host\" : \"elasticsearch.internal\",\n         \"ip\" : \"250.0.97.96\",\n         \"scheme\" : \"http\",\n         \"port\" : \"9200\"\n      }\n   ],\n\nConfigure Elasticsearch for your site\nThe last step is to configure Elasticsearch for your catalog search options through the Magento Admin. You will need the information from the variable MAGENTO_CLOUD_RELATIONSHIPS. See Configure Magento to use Elasticsearch to complete your Admin configurations.\n\n\n  Staging and Production environments share a single Elasticsearch instance, so you must specify a unique Elasticsearch prefix for each of these environments.\n\n\n\n\nRelated topics\n\n  services.yaml\n  .magento.app.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services-elastic.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-mysql-html": {
      "title": "Set up MySQL service",
      "content": "The mysql service provides data storage. It’s based on MariaDB, supporting the XtraDB storage\nengine (equivalent to MySQL with InnoDB).\n\nWe support MariaDB version 10.0, which includes reimplemented features from MySQL 5.6 and 5.7.\n\nTo access the MariaDB database directly, open an SSH tunnel and use the\nfollowing command:\n\nmysql -h database.internal -u user\n\n\nSet up multiple database users\nYou can optionally set up multiple databases as well as multiple users with different permissions. By default, there is one endpoint named mysql that has administrator access to all defined databases.\n\nTo set up multiple databases and users, you must specify multiple endpoints. An endpoint is a user who has privileges you specify.\n\n\n  You can’t use multiple databases with Magento Commerce at this time. You can, however, create multiple endpoints to restrict access to the main database.\n\n\nTo specify user access, use the endpoints nested array. Each endpoint can have access to one or more schemas (databases), and can have different levels of permission on each.\n\nThe valid permission levels are:\n\n\n  ro: Only SELECT queries are allowed.\n  rw: SELECT queries as well as INSERT/UPDATE/DELETE queries are allowed.\n  admin: All queries are allowed, including DDL queries (CREATE TABLE, DROP TABLE, and so on).\n\n\nIf no endpoints are defined, a single endpoint named mysql has admin access to the main database.\n\nExample:\n\nmysqldb:\n    type: mysql:10.0\n    disk: 2048\n    configuration:\n        schemas:\n            - main\n        endpoints:\n            admin:\n                default_schema: main\n                privileges:\n                    main: admin\n            reporter:\n                privileges:\n                    main: ro\n            importer:\n                privileges:\n                    main: rw\n\nIn the preceding example, the endpoint (that is, user) reporter has ro privileges to the main database and endpoint importer has rw access to the main database. This means that:\n\n\n  The admin user has full control of the database.\n  The repoter user has SELECT privileges only.\n  The importer user has SELECT, INSERT, UPDATE, and DELETE privileges.\n\n\nAdd MySQL in services.yaml and .magento.app.yaml\nTo enable MySQL, add the following code with your installed version and allocated disk space in MB to .magento/services.yaml.\n\nmysql:\n    type: mysql:10.0\n    disk: 2048\n\nTo configure the relationships for the environment variable, set a relationship in your .magento.app.yaml in the Git branch. For example:\n\nrelationships:\n    database: \"mydatabase:mysql\"\n\nMerge and deploy the code to set the configurations for Redis. For information on how these changes affect your environments, see services.yaml.\n\n\n  \n    If you configure one MySQL user, you cannot use the DEFINER access control mechanism for stored procedures and views.\n    MySQL errors such as PDO Exception 'MySQL server has gone away are usually the result of exhausting your existing disk space. Be sure you have sufficient space allocated to the service in .magento/services.yaml.\n  \n\n\nVerify environment-related relationships\nWe use the Magento Commerce (Cloud) environment variable $MAGENTO_CLOUD_RELATIONSHIPS, a JSON object, to retrieve environment-related relationships.\n\nTo verify this information used for configurations and settings:\n\n\n  SSH into the Integration environment with MySQL installed and configured.\n  \n    Enter the following command to pretty-print connection information for MySQL:\n\n     php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n  \n\n\nThe response includes all relationships for services and configuration data for that environment. In the response, you will locate data similar to the following for MySQL:\n\n{\n  \"database\": [\n    {\n      \"host\": \"database.internal\",\n      \"ip\": \"192.0.2.150\",\n      \"password\": \"\",\n      \"path\": \"main\",\n      \"port\": 3306,\n      \"query\": {\n          \"is_master\": true\n      },\n      \"scheme\": \"mysql\",\n      \"username\": \"user\"\n    }\n  ]\n}\n\nRelated topics\n\n  services.yaml\n  .magento.app.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services-mysql.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-rabbit-html": {
      "title": "Set up RabbitMQ service",
      "content": "The Message Queue Framework (MQF) is a system within Magento Commerce that allows a module to publish messages to queues. It also defines the consumers that will receive the messages asynchronously.\n\nThe MQF uses RabbitMQ as the messaging broker, which provides a scalable platform for sending and receiving messages. It also includes a mechanism for storing undelivered messages. RabbitMQ is based on the Advanced Message Queuing Protocol (AMQP) 0.9.1 specification.\n\nWe support RabbitMQ version 3.5.\n\n\n  If you prefer using an existing AMQP-based service, like RabbitMQ, instead of relying on Magento Commerce (Cloud) to create it for you, use the QUEUE_CONFIGURATION environment variable to connect it to your site.\n\n\nAdd RabbitMQ in services.yaml and .magento.app.yaml\nTo enable RabbitMQ, add the following code with your installed version and allocated disk space in MB to the .magento/services.yaml file.\n\nrabbitmq:\n    type: rabbitmq\n    disk: 1024\n\nTo configure the relationships for the environment variable, set a relationship in your .magento.app.yaml in the Git branch. For example:\n\nrelationships:\n    rabbitmq: \"rabbitmq:rabbitmq\"\n\nMerge and deploy the code to set the configurations for RabbitMQ. For information on how these changes affect your environments, see services.yaml.\n\nVerify environment-related relationships\nWe use the Magento Commerce (Cloud) environment variable $MAGENTO_CLOUD_RELATIONSHIPS, a JSON object, to retrieve environment-related relationships.\n\nTo verify this information used for configurations and settings:\n\n\n  SSH into the Integration environment with RabbitMQ installed and configured.\n  \n    Enter the following command to pretty-print connection information for RabbitMQ:\n\n     php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n  \n\n\nThe response includes all relationships for services and configuration data for that environment. In the response, you will locate data similar to the following for RabbitMQ:\n\n{\n   \"rabbitmq\" : [\n      {\n         \"password\" : \"guest\",\n         \"ip\" : \"246.0.129.2\",\n         \"scheme\" : \"amqp\",\n         \"port\" : 5672,\n         \"host\" : \"rabbitmq.internal\",\n         \"username\" : \"guest\"\n      }\n   ]\n}\n\n\n\nConnect to RabbitMQ for debugging\nFor debugging purposes, it’s sometimes useful to directly connect to a service instance in one of the following ways:\n\n\n  Connect from your local development environment\n  Connect from the application\n  Connect from your PHP application\n\n\nConnect from your local development environment\nYou can do this using SSH tunneling:\n\n\n  SSH into the Integration environment with RabbitMQ installed and configured.\n  \n    Login to the Magento Cloud CLI and project:\n\n     magento-cloud login\n    \n  \n  Use magento-cloud tunnel:open to open a tunnel to the app. For information on this command, add --help.\n  \n    Use the following command to pretty-print your relationships. This lets you see which username and password to use, and you can verify the remote service’s port.\n\n     php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n  \n  \n    Use the ssh -L command to enable local port forwarding to RabbitMQ as follows:\n\n     ssh -L &lt;port number&gt;:mq.internal:&lt;port number&gt; &lt;project ID&gt;-&lt;branch ID&gt;@ssh.na.magentosite.cloud\n    \n  \n  While the session is open, you can start a RabbitMQ client of your choice from your local workstation, configured to connect to the localhost:&lt;portnumber using the user name and password you found in the relationship variable. For this example, you would use localhost:5672.\n\n\nConnect from the application\nTo connect to RabbitMQ running in an application, you should install a client like amqp-utils as a project dependency in your .magento.app.yaml file.\n\nFor example,\n\ndependencies:\n  ruby:\n    amqp-utils: \"0.5.1\"\n\nThen, when you SSH into your PHP container, you enter any amqp- command available to manage your queues.\n\nConnect from your PHP application\nTo connect to RabbitMQ using your PHP application, add a PHP library (like PHP AMQPlib) to your source tree.\n\nRelated topics\n\n  services.yaml\n  .magento.app.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services-rabbit.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-redis-html": {
      "title": "Set up Redis service",
      "content": "Redis is an optional, backend cache solution that replaces the Zend Framework Zend_Cache_Backend_File, which is used in Magento 2 by default.\n\nWe support Redis versions 2.8 and 3.0. Redis 3.0 supports up to 64 different databases per instance of the service, while 2.8 allows for only a single database. See Configure Redis.\n\nAdd Redis in configuration files\nTo enable Redis, add your installed version and allocated disk space in MB to .magento/services.yaml file:\n\nmyredis:\n    type: redis:3.0\n\n\nTo provide your own Redis configuration, add a core_config key in your .magento/services.yaml file:\n\ncache:\n    type: redis:3.0\n\n\nTo configure relationships for an environment variable in your .magento.app.yaml file:\n\nruntime:\n    extensions:\n        - redis\n\nrelationships:\n    redis: \"myredis:redis\"\n\n\nMerge and deploy the code to set the configurations for Redis. For information on how these changes affect your environments, see services.yaml.\n\nVerify environment-related relationships\nWe use the Magento Commerce (Cloud) environment variable $MAGENTO_CLOUD_RELATIONSHIPS, a JSON object, to retrieve environment-related relationships.\n\nTo verify this information used for configurations and settings:\n\n\n  Use SSH to connect to the Integration environment with Redis installed and configured.\n  \n    Create pretty-print connection information for Redis.\n\n    php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n\n    The response includes all relationships for services and configuration data for that environment, similar to the following for Redis:\n\n    {\n    \"redis\": [\n        {\n            \"host\": \"192.0.2.55\",\n            \"scheme\": \"redis\",\n            \"port\": 6379\n        }\n    ]\n}\n    \n  \n\n\n\n\nUsing the Redis CLI\nAssuming your Redis relationship is named redis, you can access it using the redis-cli tool.\n\n\n  Use SSH to connect to the Integration environment with RabbitMQ installed and configured.\n  \n    Open an SSH tunnel to a host.\n\n    redis-cli -h redis.internal\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services-redis.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-solr-html": {
      "title": "Set up Solr service",
      "content": "Solr is highly reliable, scalable and fault tolerant, providing distributed\nindexing, replication and load-balanced querying, automated failover and\nrecovery, centralized configuration, and more.\n\nLimited Support: We only support Solr in Magento Commerce (Cloud) 2.0.X. You should move to Elasticsearch for Magento Commerce (Cloud) 2.1 and later, 2.2 and later.\n\nSolr uses the Lucene Java search library for full-text indexing and search. Your applications interact with Solr using:\n\n\n  HTTP POST in JSON, XML, CSV, or binary formats to index documents\n  HTTP GET to retrieve search results back as &gt;JSON, XML, or a variety of other formats including Python, Ruby, PHP, CSV, binary, and so on\n\n\nWe support Solr version 4.10 for Magento Commerce (Cloud).\n\nFor more information about Solr, see the following:\n\n\n  More information about Solr\n  Solr tutorial\n  Solr FAQ\n\n\nAdd Solr in services.yaml and .magento.app.yaml\nTo enable Solr, add the following code with your installed version and allocated disk space in MB to .magento/services.yaml.\n\nmysearch:\n    type: solr:4.10\n    disk: 1024\n\nIf you want to provide your own Solr configuration, you can add a core_config key in your .magento/services.yaml:\n\nmysearch:\n    type: solr:4.10\n    disk: 1024\n    configuration:\n        core_config: !archive \"&lt;directory&gt;\"\n\nThe directory parameter points to the Magento vendor/magento/module-solr/conf directory, relative to the .magento directory, in the Git repository. This directory contains the Magento schema.\n\nTo configure the relationships for the environment variable, set a relationship in your .magento.app.yaml in the Git branch. For example:\n\nrelationships:\n    solr: \"mysearch:solr\"\n\nMerge and deploy the code to set the configurations for Solr. For information on how these changes affect your environments, see services.yaml.\n\nVerify environment-related relationships\nWe use the Magento Commerce (Cloud) environment variable $MAGENTO_CLOUD_RELATIONSHIPS, a JSON object, to retrieve environment-related relationships.\n\nTo verify this information used for configurations and settings:\n\n\n  SSH into the Integration environment with Solr installed and configured.\n  \n    Enter the following command to pretty-print connection information for Solr:\n\n     php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"])));'\n    \n  \n\n\nThe response includes all relationships for services and configuration data for that environment. In the response, you will locate data similar to the following for Solr:\n\n{\n    \"solr\": [\n        {\n            \"path\": \"solr\",\n            \"host\": \"192.0.2.55\",\n            \"scheme\": \"solr\",\n            \"port\": 8080\n        }\n    ]\n}\n\n\n\nRelated topics\n\n  services.yaml\n  .magento.app.yaml\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services-solr.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-conf-files-services-html": {
      "title": "services.yaml",
      "content": "We provide a services.yaml file to configure all of your services supported and used by Magento Commerce (Cloud). These services include MySQL, PHP, Redis, Solr (for 2.0.X), and so on. You don’t need to subscribe to external service providers.\n\nThis file is located at .magento/services.yaml in your project.\n\n\n  When you push your Git branch, our deploy script uses the values defined by configuration files in the .magento directory. After deployment, the script deletes the directory and its contents. Your local development environment isn't affected.\n\n\nTo see an example, see this sample services.yaml file.\n\n\n  Changes you make using YAML files affect your Integration environment only. For technical reasons, neither Staging nor Production environments use YAML files. To make these changes in a Staging or Production environment, you must create a Support ticket.\n\n\nThe following sections discuss properties in services.yaml.\n\nHow this file works\nThe .magento.app.yaml and services.yaml files set the services, applications, and configurations to build and include in an environment. If you add services with specific versions, the initial push and deployment of your branches with these updated files directs the PaaS environment to provision the environment with those services. When you make changes to the services, the environment updates.\n\nThis affects the following environments:\n\n\n  All Starter environments including Production master\n  Pro Integration environments\n\n\nTo install and update services in Pro Staging and Production environments (IaaS), you must enter a Support ticket. Indicate the service changes needed and your updated .magento.app.yaml and services.yaml files in the ticket.\n\nDefault services\nYour Git branch includes the following default services.yaml file:\n\nmysql:\n   type: mysql:10.0\n   disk: 2048\n\nredis:\n   type: redis:3.0\n\nsolr:\n   type: solr:4.10\n   disk: 1024\n\n\nModify this file to use specific and additional services in your deployment. See the type section to see the services we support and deploy for you if you add them to the file.\n\nService values\nTo add a service, you add the following data to services.yaml:\n\nname:\n     type: name:version\n     disk: value\n\nFor example:\n\nmysql:\n     type: mysql:10.0\n     disk: 2048\n\nname\nname identifies the service in the project. The name can consist only of lower case alphanumeric characters: a–z and 0–9. For example, Redis is entered as redis.\n\nYou can have multiple instances of each service type. For example, you could have multiple Redis instances. For example, we use multiple Redis instances, one for session and one for cache.\n\nredis:\n     type: redis:3.0\n\nredis2:\n     type: redis:3.0\n\nBe aware, if you rename a service in services.yaml, the following is permanently removed:\n\n\n  The existing service before creating a new service with the new name you specify.\n  All existing data for the service is removed. We strongly recommend you snapshot your environment before you change the name of an existing service.\n\n\ntype\nThe type of your service in the format type:version\n\nWe support and deploy the following services for you:\n\n\n  mysql version 10.0\n  redis versions 2.8 and 3.0\n  solr version 4.1\n  rabbitmq version 3.5\n\n\ndisk\n\ndisk specifies the size of the persistent disk storage in MB allocated to the service.\n\nFor example, the current default storage amount per project is 5GB, or 5120MB. You can distribute this amount between your application and each of its services. See .magento.app.yaml.\n\nUsing the services\nFor services to be available to an application in your project, you must specify relationships between applications and services in .magento.app.yaml.\n\nRelated topics\n\n  Get started with a project\n  .magento.app.yaml\n  Set up MySQL service\n  Set up Redis service\n  Set up Solr service\n  Set up RabbitMQ service\n  routes.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-conf-files_services.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-integrate-blackfire-html": {
      "title": "Blackfire Profiler",
      "content": "Blackfire Profiler helps you locate and investigate performance issues in your environment at the code-level. it creates a performance profile by tracking every PHP call and method and SQL queries performed by your code. Blackfire digs deeper providing granular performance analytics. You can activate and use Blackfire Profiler in all of your environments, especially helpful in Staging and Production.\n\nThis information helps you get Blackfire installed on your local, integrated into Integration, and running your first profile.\n\nFor full details on integrations, also review Blackfire’s complete Magento Commerce (Cloud) guide. They also include a number of incredible resources to get you started.\n\nBlackfire includes the following environments through their site:\n\n\n  Magento Cloud (&lt;your instance reference&gt;) - Integration and Development\n  Magento Cloud (&lt;your instance reference&gt;) - Staging\n  Magento Cloud (&lt;your instance reference&gt;) - Production\n\n\n\n  For Pro plans, you need to enter a Support ticket with your Blackfire credentials to get Staging and Production configured with Blackfire. We’ll help you get Blackfire configured in those environments.\n\n\nGet your Blackfire credentials\nThe Project Owner is the account owner. This account’s e-mail address is used as part of the credentials for access to Blackfire for your project. Only the Project Owner credentials can be used to integrate Blackfire with Magento Commerce (Cloud) and to log into the Blackfire site. An invitiation email is sent to the Project Owner’s e-mail address to complete activation.\n\nFor information on setting up the account on Blackfire, see Accessing your Blackfire account as a Magento Cloud user. You can also access your Blackfire license key through project details.\n\nAdd collaborator accounts\nAfter you have accessed your Blackfire account, you can add additional collaborator accounts.\n\nWe recommend adding at least one account through Blackfire to manage all access, integrations, and usage of the tool. We also recommend promoting one of the added members to Admin, to manage all Blackfire access and integrations.\n\n\n  Using the Project Owner Blackfire credentials, log in to Blackfire.\n  Select an environment.\n  Select the Settings tab.\n  Enter an e-mail address and click Add Member.\n  \n    For one account, click the menu by Revoke and select Promote as an admin.\n\n    \n  \n\n\nEnable Blackfire on your local\nYou need to install and configure Blackfire on your local workspace with your working Magento Commerce (Cloud) installation. You don’t need to run these installations directly on the hosted environments, only on your local.\n\nWe recommend using their installation guide to walk you through the process:\n\n\n  Log in to Blackfire.\n  Select the Integration environment in the Current Environment list.\n  Select the Settings tab.\n  Scroll to the bottom and locate the Server ID and Server Token for the environment. You will need these values for the instructions.\n  Open this guide, select the Operating System, and follow the instructions.\n\n\nIntegrate Blackfire in Integration\nWe recommend enabling Blackfire in all of your environments including Integration. To integrate, you begin in the Blackfire site. For full details, see their guide.. You can integrate with Pro’s Integration environment and Starter’s development branches.\n\n\n  For Starter plans, pushing your code and .magento.app.yaml file to Staging and Master branches updates those environments directly. You can directly add Blackfire to those environments the way you do with development.\n\n\nThese instructions assume you have fully set up your local workspace.\n\n\n  Log in to Blackfire.\n  Select the Integration and Development environment in the Current Environment list.\n  \n    Select the Builds tab. In the Builds side panel, click the info icon next to Magento Cloud. This opens a list of commands you will need to execute in order to enable the Blackfire integration.\n\n    \n\n    A page like the following opens with additional steps to complete the integration. The marked out content is your Project ID.\n\n    \n  \n\n\nThe following sections include instructions for completing this list of integration tasks. You can keep this page open to follow and copy information direcrtly.\n\n\n  Add Blackfire to .magento.app.yaml\n  Add project variables\n  Add Blackfire integration to the project\n  Add a default route\n  Save changes in Blackfire\n\n\nAdd Blackfire to .magento.app.yaml\nBy default, the Blackfire module should be included in the .magento.app.yaml file as part of your Git branch.\n\nThe following instructions provide additional instructions if the module is not added to .magento.app.yaml. To enable and integrate Blackfire into your code, you will modify the .magento.app.yaml file, push the file into your remote Git branch, merge, and deploy across all environments.\n\n\n  For Starter, merging your Git branch across all environments adds the module.\n  For Pro, you need to enter a Support ticket to have .magento.app.yaml updated to Staging and Production.\n\n\nWe recommend working in a branch and creating a snapshot prior to installing. If you have a branch already created, you can skip down to the steps for modifying the .magento.app.yaml file. If you need instructions creating a branch, complete the following:\n\n\n  SSH into your local Magento workspace.\n  \n    Log in to your Magento Commerce (Cloud) project.\n\n    magento-cloud login\n    \n  \n  \n    List projects:\n\n    magento-cloud project:list\n    \n  \n  \n    List environments in the project:\n\n    magento-cloud environment:list -p &lt;project ID&gt;\n    \n  \n  \n    See what branch you’re currently in, if any.\n\n    git branch\n    \n  \n  \n    If necessary, check out an existing branch:\n\n    magento-cloud environment:checkout &lt;environment ID&gt;\n    \n\n    You can also create a new branch using the magento-cloud environment:branch command.\n  \n  \n    Back up the environment using a snapshot:\n\n    magento-cloud snapshot:create -e &lt;environment ID&gt;\n    \n  \n\n\nNext, modify the .magento.app.yaml file:\n\n\n  Use a text editor to locate and edit &lt;project root dir&gt;/.magento.app.yaml in your branch.\n  \n    Enter - name: blackfire in the extensions block under runtime.\n\n    runtime:\n  extensions:\n    - mcrypt\n    - redis\n    - xsl\n    - json\n    - blackfire\n    \n  \n  Save your changes to .magento.app.yaml and exit the text editor.\n  \n    Add, commit, and push your changes to the environment:\n\n    git add -A\ngit commit -m \"&lt;message&gt;\"\ngit push origin\n    \n\n    If errors display during deployment, open .magento.app.yaml and check the syntax. Check indentation and spelling and try again.\n  \n\n\nAdd project variables\nAdd project variables for Blackfire for the server ID and token. You can add these using the Magento Cloud CLI or the Project Web Interface. The following instructions walk through adding them using CLI commands.\n\n\n  SSH into your local Magento workspace.\n  \n    Log in to your Magento Commerce (Cloud) project.\n\n    magento-cloud login\n    \n  \n  Copy the commands from step 3 on the Blackfire Magento Cloud integration page.\n  \n    Paste and enter the commands in the Magento Cloud CLI. Since you are already in your project, remove the --project='&lt;Project ID&gt;' content from the command. The commands include the Project ID and Blackfire server ID and token. The commands may look like the following:\n\n     magento-cloud project:variable:set env:BLACKFIRE_SERVER_ID &lt;Blackfire Server ID&gt;\n magento-cloud project:variable:set env:BLACKFIRE_SERVER_TOKEN &lt;Blackfire Server Token&gt;\n    \n  \n\n\nAdd Blackfire integration to the project\nUsing the Magento Cloud CLI, you will enter an integration command to connect Blackfire with the project. This command requires using an account with super user access. Make sure your Cloud Project account has the super user option in the Project through the Project Web Interface.\n\n\n  SSH into your local Magento workspace.\n  \n    Log in to your Magento Commerce (Cloud) project.\n\n    magento-cloud login\n    \n  \n  \n    Copy and enter the integration commands from the Blackfire Magento Cloud integration page.\n\n     magento-cloud integration:add \\\n --project='&lt;Project ID&gt;' \\\n --type=webhook \\\n --url='&lt;Blackfire provided URL&gt;'\n    \n  \n  A series of requests display for the command. To accept default values, hit enter for the questions. If you receive a permission error, make sure you have super user access for the Magento Commerce (Cloud) project. Either request your permission be upgraded or have someone else who is an admin run this command.\n\n\nAdd a default route\nIf you do not have a default route specified in routes.yaml, or want to define which route to use instead of the default route, you will add it to Blackfire and routes.yaml.\n\nAdd route information on the Blackfire Magento Cloud integration page:\n\n\n  Locate step 5 and enter the default route. It should look like https://example.com/ or http://*.{default}/. If you leave this field blank, we will try the following keys in this order: https://{default}/, https://www.{default}/, http://{default}/, http://www.{default}/.\n  If you use a wildcard * in step 5 for the default rote, you need to enter a resolved value for the * value in step 6. Otherwise, leave step 6 empty. For example, if you specified the route key https://*.{default} in step 5, you would need you to specify a route placeholder in step 6.\n\n\nIf adding a route to Blackfire, make sure to add the default route to routes.yaml:\n\n\n  SSH into your local Magento workspace.\n  \n    Log in to your Magento Commerce (Cloud) project.\n\n    magento-cloud login\n    \n  \n  \n    List projects:\n\n    magento-cloud project:list\n    \n  \n  \n    List environments in the project:\n\n    magento-cloud environment:list -p &lt;project ID&gt;\n    \n  \n  \n    See what branch you’re currently in, if any.\n\n    git branch\n    \n  \n  \n    If necessary, check out an existing branch:\n\n    magento-cloud environment:checkout &lt;environment ID&gt;\n    \n\n    You can also create a new branch using the magento-cloud environment:branch command.\n  \n  \n    Back up the environment using a snapshot:\n\n    magento-cloud snapshot:create -e &lt;environment ID&gt;\n    \n  \n  Use a text editor to locate and edit &lt;project root dir&gt;/magento/routes.yaml in your branch.\n  \n    Add the route the file. For details, see routes.yaml. Here’s an example:\n\n    \"http://{default}/\":\ntype: upstream\nupstream: \"blackfire:php\"\n    \n  \n  Save your changes to routes.yaml and exit the text editor. It should look like https://example.com/ or http://*.{default}/.\nIf you leave this field blank, we will try the following keys in this order: https://{default}/, https://www.{default}/, http://{default}/, http://www.{default}/.\n  \n    Add, commit, and push your changes to the environment:\n\n    git add -A\ngit commit -m \"&lt;message&gt;\"\ngit push origin\n    \n\n    If errors display during deployment, open routes.yaml and check the syntax. Check indentation and spelling and try again.\n  \n\n\nSave changes in Blackfire\nWith all integrations entered on the Blackfire Magento Cloud integration page, click Save. All integration settings save to your Blackfire account with saved integrations and conncetions with changes entered to your Magento Commerce (Cloud) project. Continue to the next section to begin profiling your store to verify the integration.\n\nProfile your store\nTo verify Blackfire works, you have a couple options: a browser extension or using the CLI. For extensive CLI profiling options and better understanding the profiles, see Blackfire’s resources.\n\nTo profile using the browser:\n\n\n  Install the Blackfire browser extension in Chrome or Firefox. A new Blackfire icon displays in your browser next to the address location. If you don’t see it, you may need to display the bar.\n  Visit the store or site URL for your specific environment. For example, access the URL for your Integration environment. If you need this URL, you can find it through the Project Web Site. Select the environment branch and copy the link from the Access section.\n  \n    Click the Blackfire icon to profile. For Compare with, select No Reference.\n\n    \n  \n  Click Profile to start.\n\n\nTo profile using the CLI:\n\n\n  SSH into the development or Integration environment. If you need the SSH command, ou can find it through the Project Web Site. Select the environment branch and copy the SSH command from the Access section. Enter the SSH command in a terminal.\n  \n    Enter the following command:\n\n    php --ri blackfire\n    \n\n    A sample result follows:\n\n    blackfire\n\nBlackfire =&gt; enabled\nBlackfire =&gt; 1.10.3\nTiming measurement =&gt; cgt\nNum of CPU =&gt; 8\nProfiling heap memory =&gt; 0 Kb\nMain instance trigger mode =&gt; HTTP header triggered\nMain instance =&gt; enabled\n\nMain instance info\nOutput stream =&gt; file\nSignature validated =&gt; no\nEnvId validated =&gt; no\nFully decoded =&gt; no\n\nDirective =&gt; Local Value =&gt; Master Value\nblackfire.agent_socket =&gt; tcp://blackfire.platform.sh:8307 =&gt; tcp://blackfire.platform.sh:8307\nblackfire.agent_timeout =&gt; 10 =&gt; 10\nblackfire.env_id =&gt; no value =&gt; no value\nblackfire.env_token =&gt; no value =&gt; no value\nblackfire.log_level =&gt; 1 =&gt; 1\nblackfire.log_file =&gt; no value =&gt; no value\n    \n  \n\n\nBlackfire resources\nBlackfire provides great information to better profile and investigate the results on their documentation site. Check out some resources:\n\n\n  Profiling HTTP requests\n  Profiling CLI commands\n  Writing Tests\n  Writing scenarios\n  Reference Guide to really understand what you profile\n\n\nRelated topics\n\n  Get started with a project\n  .magento.app.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-integrate-blackfire.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-integrate-github-html": {
      "title": "GitHub integration",
      "content": "About the GitHub integration\nThe GitHub integration enables you to manage your Magento Commerce (Cloud) environments directly from your GitHub repository. The integration manages content already in GitHub and synchronizes it with Magento Commerce. Therefore, before you begin, make sure your project and environments are in a GitHub repository.\n\nWe strongly recommend you use a private GitHub repository.\n\nThis integration enables you to:\n\n\n  Create a new environment when you create a branch or opening a pull request on GitHub.\n  Rebuild the environment when you push new code to GitHub.\n  Delete the environment when you merge a pull request.\n\n\nTo set up the integration, you must obtain a GitHub token and a webhook. The following sections walk you through the process.\n\nGenerate a GitHub token\nTo perform this task, you must be a member of a group that can write to the GitHub repository. (In other words, you must be able to push to the repository.)\n\nTo generate a token:\n\n\n  Log in to GitHub.\n  In your personal settings, on the Personal access tokens tab page, click Generate new token.\n  In the Token description field, enter a meaningful name.\n  \n    Select check boxes corresponding to how you intend to use the token:\n\n    \n      To integrate with public repositories, select public_repo\n      To integrate with your personal, private repositories, select repo\n      To integrate with your organization’s private repositories, select repo and read:org\n    \n\n    The following figure shows an example of creating a token that can be used to integrate with a private repository to which you have write access:\n\n    \n  \n  Click Generate token.\n  \n    Copy the token to the clipboard.\n\n    \n  \n\n\nEnable the GitHub integration\nThis section discusses how to enable the GitHub integration.\n\nGet started\nTo get started:\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Enable the integration\n  To enable the GitHub integration for your environment:\n\n  \n    \n      Enable the integration:\n\n      magento-cloud integration:add --type=github --project=&lt;project ID&gt; --token=&lt;your GitHub token&gt; {--repository=USER/REPOSITORY | --repository=ORGANIZATION/REPOSITORY} [--build-pull-requests={true|false} --fetch-branches={true|false}\n      \n\n      where\n\n      &lt;project ID&gt; is your Magento Commerce (Cloud) project ID\n\n      &lt;your GitHub token&gt; is the token you got in the preceding section\n\n      --repository=USER/REPOSITORY is how you specify your personal, private GitHub repository\n\n      --repository=ORGANIZATION/REPOSITORY is how you specify an organization repository\n\n      --build-pull-requests is an optional parameter that instructs Magento Cloud to deploy after you merge a pull request (true by default)\n\n      --fetch-branches is an optional parameter that causes Magento Cloud to track branches and deploy after you update a branch (true by default)\n\n      Example 1: Enable the GitHub integration for a personal, private repository:\n\n      magento-cloud integration:add --type=github --project=ov58dlacU2e --token=&lt;token&gt; --repository=myUserName/myrepo\n      \n\n      Example 2: Enable the GitHub integration for an organization repository:\n\n      magento-cloud integration:add --type=github --project=ov58dlacU2e --token=&lt;token&gt; --repository=Magento/teamrepo\n      \n    \n    \n      Enter the required information when prompted.\n\n      Sample output:\n\n      Created integration wp2f2thlmxwcg (type: github)\nRepository: myUserName/myrepo\nBuild PRs: yes\nFetch branches: yes\nPayload URL: https://us.magento.cloud/api/projects/ov58dlacU2e/integrations/wO8a0eoamxwcg/hook\n      \n    \n    \n      Copy the Payload URL displayed by the command and continue with the next section.\n    \n  \n\n  Add the webhook\n  To add the webhook to your GitHub repository:\n\n  \n    \n      In your GitHub repository, click Settings as the following figure shows.\n\n      \n    \n    In the left navigation bar, click Webhooks &amp; services.\n    \n      In the right pane, click Add webhook as the following figure shows.\n\n      \n    \n    \n      Enter the following information:\n\n      \n        Payload URL: Enter the URL displayed by the command in the preceding section.\n        Content type: Click application/json\n        Secret: Enter a verification secret.\n        Which events would you like to trigger this webhook?: Click Send me everything\n        Select the Active check box.\n      \n\n      The following figure shows an example:\n\n      \n    \n    Click Add webhook\n  \n\n  Verify it works\n  To verify the integration works:\n\n  \n    Make a change in the GitHub repository with which you integrated.\n    In the Magento Cloud CLI, pull the change to an environment.\n  \n\n  Related topics\n  \n    Get started with a project\n    .magento.app.yaml\n  \n\n",
      "url": "/guides/v2.0/cloud/project/project-integrate-github.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-multi-sites-html": {
      "title": "Set up multiple websites or stores",
      "content": "This topic discusses how to set up Magento Commerce to have multiple websites or stores. For example, you might have an English store, a French store, and a German store. For more information on websites, stores, and store views, see Understanding websites, stores, and store views.\n\nTo set up multiple stores, you must:\n\n\n  Configure your local installation and test it locally.\n  Configure Magento Commerce (Cloud) routes and variables.\n  Push the changes to an Integration environment and test it.\n\n\nConfigure your local installation\nTo configure your local installation to use multiple stores, see Multiple websites or stores.\n\nConfigure your Integration environment\nAfter successfully creating and testing multiple stores locally, you must:\n\n\n  Configure routes, which specify how incoming URLs are handled by Magento Commerce.\n  Set up websites, stores, and store views in your Magento Commerce server’s Admin.\n  Modify magento-vars.php to specify the values of the MAGE_RUN_TYPE and MAGE_RUN_CODE variables.\n  Deploy to your Integration branch and test.\n\n\nConfigure routes\nMagento Enterprise Edition routes define how incoming URLs are processed. The way you configure routes depends on how you want your site to operate. We suggest configuring routes for integration as follows. You can edit the values later if your needs change.\n\n\nTo set up routes in a staging or production environment, you must create a Support ticket.&lt;/p&gt;\n\n\nTo configure routes in an integration environment:\n\n\n  Log in to your local environment as, or switch to, the Magento file system owner.\n  Change to your Magento Commerce base directory.\n  Open .magento/routes.yaml in a text editor.\n  \n    Replace its contents with the following:\n\n    \"http://{default}/\":\n\ttype: upstream\n\tupstream: \"mymagento:php\"\n\n\"https://{default}/\":\n\ttype: upstream\n\tupstream: \"mymagento:php\"\n\n\"http://*.{default}/\":\n\ttype: upstream\n\tupstream: \"mymagento:php\"\n\n\"https://*.{default}/\":\n\ttype: upstream\n\tupstream: \"mymagento:php\"\n    \n  \n  Save your changes to routes.yaml and exit the text editor.\n\n\nSet up websites, stores, and store views\nSet up in your Magento Commerce Admin websites, stores, and store views identical to the ones you set up on your local system.\n\nGet your access information\nTo get the access information you need to log in to the Magento Admin:\n\n\n  If you haven’t done so already, log in to your local environment as, or switch to, the Magento file system owner.\n  Change to your Magento Commerce base directory.\n  \n    Log in to your account:\n\n    magento-cloud login\n    \n  \n  \n    List the environments:\n\n    magento-cloud environment:list\n    \n  \n  \n    Check out your environment:\n\n    magento-cloud environment:checkout &lt;environment ID&gt;\n    \n  \n  \n    View the environment’s access URLs:\n\n    magento-cloud environment:url\n    \n  \n  \n    View Admin login information:\n\n    magento-cloud variable:list\n    \n\n    Admin access information displays similar to the following:\n\n    +----------------+---------------+-----------+------+\n| ID             | Value         | Inherited | JSON |\n+----------------+---------------+-----------+------+\n| ADMIN_PASSWORD | admin_A456    | Yes       | No   |\n| ADMIN_URL      | magento_A8v10 | Yes       | No   |\n| ADMIN_USERNAME | meister_x2U8  | Yes       | No   |\n+----------------+---------------+-----------+------+\n    \n  \n\n\nConfigure websites, stores, and store views\nMake sure you name your websites, stores, and store views in your Cloud Admin the same as you did when you set up your local installation.\n\nSee Set up multiple websites, stores, and store views in the Admin.\n\nModify magento-vars.php\nInstead of configuring an nginx virtual host, pass the MAGE_RUN_CODE and MAGE_RUN_TYPE variables using magento-vars.php which is located in your Magento root directory.\n\n\n  Open magento-vars.php in a text editor.\n  Uncomment everything after the first two lines.\n  \n    Move the entire block starting with if (isHttpHost(\"example.com\") after function isHttpHost($host).\n\n    Following is what the file should look like so far:\n\n    &lt;?php\n    // enable, adjust and copy this code for each store you run\n    // Store #0, default one\n    function isHttpHost($host)\n    {\n       if (!isset($_SERVER['HTTP_HOST'])) {\n           return false;\n    }\n           return strpos(str_replace('---', '.', $_SERVER['HTTP_HOST']), $host) === 0;\n    }\n    if (isHttpHost(\"example.com\")) {\n        $_SERVER[\"MAGE_RUN_CODE\"] = \"default\";\n        $_SERVER[\"MAGE_RUN_TYPE\"] = \"store\";\n    }\n  \n  \n    Change the following line:\n\n    From:\n\n    return strpos(str_replace('---', '.', $_SERVER['HTTP_HOST']), $host) === 0;\n    \n\n    To:\n\n    return $_SERVER['HTTP_HOST'] ===  $host;\n    \n  \n  \n    Replace the following values in the if (isHttpHost(\"example.com\")) block:\n\n    \n      \"example.com\" with the base URL of your website, replacing the first period with three dashes.\n      \"default\" with the unique code for your website or store view.\n      \"store\" with either website (to load the website in the storefront) or store (to load a storeview in the storefront).\n    \n\n    An example follows:\n\n    &lt;?php\n// enable, adjust and copy this code for each store you run\n// Store #0, default one\nfunction isHttpHost($host)\n{\n\tif (!isset($_SERVER['HTTP_HOST'])) {\n\t\treturn false;\n\t}\n\t return $_SERVER['HTTP_HOST'] ===  $host;\n}\nif (isHttpHost(\"french---branch-sbg7pPa-f3dueAiM03tpy.us.magentosite.cloud\")) {\n\t$_SERVER[\"MAGE_RUN_CODE\"] = \"french\";\n\t$_SERVER[\"MAGE_RUN_TYPE\"] = \"website\";\n}\n    \n  \n  Save your changes to magento-vars.php and exit the text editor.\n\n\nDeploy and test on the Integration server\nThe final step is to push your changes to your Magento Entperise Cloud Edition server and test your site there.\nTo deploy and test:\n\n\n  \n    Enter the following commands in the order shown:\n\n    git add -A &amp;&amp; git commit -m \"Implement multiple sites\"\ngit push origin &lt;branch name&gt;\n    \n  \n  Wait for deployment to complete.\n  \n    When deployment is done, in a web browser, go to your site’s base URL.\n\n    The URL must be in the format: http://&lt;magento run_code&gt;---&lt;rest of URL&gt;\n\n    For example, http://french---master-benrmky-dyrozemqbw72k.us.magentosite.cloud/\n  \n  Make sure you test your site thoroughly.\n\n\nWhen complete, merge the code to the master Git branch for further deployment.\n\nDeploy to Staging and Production\nFollow the deployment process for deploying to Staging and Production. For Starter and Pro environments, you use the Project Web Interface to push code across environments. For Pro accounts created before October 23, 2017 and not updated, you can use SSH and CLI commands.\n\nWe recommend fully testing in Staging prior to pushing to Production. If you need to make changes, you should complete those in Integration and beging the process to deploy across environments again.\n",
      "url": "/guides/v2.0/cloud/project/project-multi-sites.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-patch-html": {
      "title": "Patch Magento Commerce (Cloud)",
      "content": "You can apply patches as they are available to update Magento Commerce (Cloud). We recommend using a new active branch and Integration environment for applying and testing the patch prior to fully deploying across all environments. We strongly recommend you test patches locally so you can identify and resolve any issues.\n\nWhen you perform a Magento Commerce (Cloud) upgrade, you automatically upgrade with patches and hotfixes through the composer update command. To upgrade and test Magento Commerce (Cloud) (including patches and hotfixes), see Upgrade Magento Commerce (Cloud).\n\nTo check for patches, you can check the vendor/magento/magento-cloud-configuration/patches folder.\n\n\n  We recommend installing full Magento Commerce (Cloud) upgrades for important security updates. Full upgrades include all associated patches and hotfixes.\n\n\nThere are two types of patches:\n\n\n  \n    General patches\n\n    These patches are provided for all Magento Commerce customers in a GitHub repository that’s referenced in your composer.json. We apply these patches automatically during the build phase.\n\n    To install general patches, use composer update, test your system, and push the patches to the remote server.\n  \n  \n    Custom patches\n\n    Custom patches can be provided by Magento to address a specific issue you raised in a Support ticket. Third-party extension developers can also provide a custom patch.\n\n    Copy custom patches to the m2-hotfixes directory and test them on your locally. After successfully testing them, push the patches to the remote server.\n  \n\n\n\n  Always apply and test a patch your local system in an active branch. You can push and test in an Integration environment prior to deploying across all environments. All environments are read-only. You must update locally and push the Git branch to deploy across all environments.\n\n\nOur patches are Composer driven. For more information on Composer, see Composer in Cloud. When you perform a Magento Commerce (Cloud) upgrade, you automatically upgrade with patches and hotfixes through the composer update command.\n\nVerify or set the ADMIN_EMAIL variable\nThe environment variable ADMIN_EMAIL is required for upgrading and patching. This email is used for sending password reset requests and verified during when updating Magento Commerce (Cloud). To set, see Add admin variables for Admin access.\n\nBack up the database\nBack up your Integration environment database and code:\n\n\n  \n    Enter the following command to make a local backup of the remote database:\n\n    magento-cloud db:dump\n    \n  \n  \n    Enter the following command to back up code and media:\n\n    php bin/magento setup:backup --code [--media]\n    \n\n    You can optionally omit [--media] if you have a large number of static files that are already in source control.\n  \n\n\nBack up your Staging or Production environment database before deploying to those environments:\n\n\n  SSH to the server.\n  \n    Find the database login information:\n\n    php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]))-&gt;database);'\n    \n  \n  \n    Create a database dump:\n\n    mysqldump -h &lt;database host&gt; --user=&lt;database user name&gt; --password=&lt;password&gt; --single-transaction &lt;database name&gt; | gzip - &gt; /tmp/database.sql.gz\n    \n  \n\n\nVerify other changes\nVerify other changes you’re going to submit to source control before you start the upgrade:\n\n\n  If you haven’t done so already, change to your project root directory.\n  \n    Enter the following command:\n\n    git status\n    \n  \n  If there are changes you do not want to submit to source control, branch or stash them now.\n\n\nApply the patch\nTo apply the patch, you run the composer update command. The command uses composer.json to pull and install the patch to your local. When complete, you will add the files to the Git branch and push to build and deploy.\n\nIf multiple patches are installed, they are applied in order by name. The name of the patches include the version number.\n\n\n  \n    Change to your Magento base directory and enter the following command:\n\n    composer update\n    \n\n    This command automatically upgrades for patches associated to the installed Magento Commerce version.\n  \n  \n    Add, commit, and push your changes to initiate a deployment:\n\n    git add -A\ngit commit -m \"Upgrade patch\"\ngit push origin &lt;branch name&gt;\n    \n\n    git add -A is required to add all changed files to source control because of the way Composer marshals base packages.\n\n    The files Composer marshals belong to the new version of Magento, to overwrite the outdated version of those same files. Currently, marshaling is disabled in Magento Commerce, so you must add the marshaled files to source control.\n  \n  \n    Wait for deployment to complete.\n  \n\n\nTest general patches\nGeneral patches are provided for all Magento Commerce customers in a repository referenced in your composer.json. We apply patches automatically during the build phase when a patch is available. The procedure discussed in this section enables to you test a patch locally anytime you choose.\n\nGet started\nWe recommend testing patches in an active branch, prior to deploying to Staging and Production environments.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Test a general patch on your local system\n\n  To test a general patch on your local system, you create a branch from the Pro Integration master branch or Starter plan staging branch. The commands used in the instructions are for Pro plan using the master branch.\n\n  \n    \n      On your local system, enter the following commands as the Magento file system owner:\n\n      cd &lt;project root dir&gt;\nmagento-cloud environment:checkout master\ngit pull origin master\ncomposer update\n      \n    \n    \n      Apply the patch locally:\n\n      git apply vendor/magento/magento-cloud-configuration/patches/&lt;patch file name&gt;\n      \n    \n    \n      Clean the Magento cache:\n\n      php &lt;Magento project root dir&gt;/bin/magento cache:clean\n      \n\n      You can also clean the cache using the Magento Admin.\n    \n    Thoroughly test your local system to make sure the patch doesn’t have unexpected side-affects.\n    \n      After testing the patch, push it to the remote server and deploy it:\n\n      git add -A &amp;&amp; git commit -m \"Apply patch\"\ngit push origin &lt;branch name&gt;\n      \n    \n  \n\n  Push a general patch to Staging or Production environments\n  After you’ve successfully tested a patch locally and on your integration environment, you can push the patch to Staging or Production environment:\n\n  \n    \n      Open an SSH connection to your Staging or Production environment. For Starter, see the Project Web Interface for the SSH links. Your Production environment is the Master. For Pro, the SSH access is one of the following:\n\n      \n        Staging: ssh -A &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n        Production: ssh -A &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n      \n    \n    \n      Enter the following commands:\n\n      &lt;Magento project root dir&gt;/composer update\n      \n    \n    \n      Apply the patch locally:\n\n      git apply vendor/magento/magento-cloud-configuration/patches/&lt;patch file name&gt;\n      \n    \n    \n      Clean the Magento cache:\n\n      php &lt;Magento project root dir&gt;/bin/magento cache:clean\n      \n\n      You can also clean the cache using the Magento Admin.\n    \n    Thoroughly test your local system to make sure the patch doesn’t have unexpected side-affects.\n    \n      After testing the patch, push it to the remote server and deploy it:\n\n      git add -A &amp;&amp; git commit -m \"Apply patch\"\ngit push origin master\n      \n    \n  \n\n  Test custom patches\n  Custom patches are provided to specific customers in a Support ticket. Before you continue, make sure the patch file we provided you is available.\n\n  Get started\n  We recommend you test a patch locally in an active branch. After completing testing, you can push the branch to Staging and Production.\n\n  \n\n    \n      Log in to your local development system, or switch to, the Magento file system owner.\n      Change to a directory to which the Magento file system owner has write access.\n      \n        Enter the following command in a terminal to log in to your project:\n\n        magento-cloud login\n        \n      \n      \n        List your projects. With the project ID, you can complete additional commands.\n\n        magento-cloud project:list\n        \n      \n      \n        If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n        magento-cloud project:get &lt;project ID&gt;\n        \n      \n      Change to a project directory. For example, cd /var/www/html/magento2\n      \n        List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n        magento-cloud environment:list\n        \n\n        \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n      \n      \n        Fetch origin branches to get the latest code:\n\n        git fetch origin\n        \n      \n      \n        Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n        magento-cloud environment:checkout &lt;environment ID&gt;\n        \n\n        To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n      \n      \n        Pull any updated code to your local for the environment ID (which is the Git branch):\n\n        git pull origin &lt;environment ID&gt;\n        \n      \n      \n        Create a snapshot of the environment as a backup:\n\n        magento-cloud snapshot:create -e &lt;environment ID&gt;\n        \n      \n    \n\n    Test a custom patch on your local system\n\n    To test a custom patch on your local system:\n\n    \n      \n        On your local system, enter the following command as the Magento file system owner if you haven’t done so already:\n\n        mkdir &lt;Magento project root dir&gt;/m2-hotfixes\n        \n      \n      Copy the patch file to that directory.\n      \n        Apply the patch locally:\n\n        cd &lt;Magento project root dir&gt;\nmagento-cloud environment:checkout master\ngit pull origin master\ngit apply &lt;Magento project root dir&gt;/m2-hotfixes/&lt;patch file name&gt;\n        \n      \n      \n        Clean the Magento cache:\n\n        php &lt;Magento project root dir&gt;/bin/magento cache:clean\n        \n\n        You can also clean the cache using the Magento Admin.\n      \n      \n        After testing the patch, push it to the remote server and deploy it:\n\n        git add -A &amp;&amp; git commit -m \"Apply patch\"\ngit push origin &lt;branch name&gt;\n        \n      \n    \n\n    Push a custom patch to Staging or Production environments\n\n    After you’ve successfully tested a custom patch locally and on your Integration environment, you can push the patch to Staging or Production for Starter and Pro.\n\n    \n      \n        Open an SSH connection to your Staging or Production environment. For Starter, see the Project Web Interface for the SSH links. Your Production environment is the Master. For Pro, the SSH access is one of the following:\n\n        \n          Staging: ssh -A &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n          Production: ssh -A &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n        \n      \n      \n        On your staging or production system, enter the following command if you haven’t done so already:\n\n        mkdir &lt;Magento project root dir&gt;/m2-hotfixes\n        \n      \n      \n        Copy the patch file to that directory.\n\n        We suggest using the following command:\n\n        rsync -azvP &lt;source&gt; &lt;destination&gt;\n        \n\n        Options:\n\n        a archive\n\n        z compress\n\n        v verbose\n\n        P partial progress\n\n        For additional options, see the rsync man page.\n      \n      \n        Apply the patch:\n\n        git apply &lt;Magento project root dir&gt;/m2-hotfixes/&lt;patch file name&gt;\n        \n      \n      \n        Clean the Magento cache:\n\n        php &lt;Magento project root dir&gt;/bin/magento cache:clean\n        \n\n        You can also clean the cache using the Magento Admin.\n      \n      \n        After testing the patch, push it to the remote server and deploy it:\n\n        git add -A &amp;&amp; git commit -m \"Apply patch\"\ngit push origin &lt;branch name&gt;\n        \n      \n    \n\n    Related topic\n    \n      Composer\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/project/project-patch.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-routes-more-cache-html": {
      "title": "Caching",
      "content": "Magento Commerce enables you to use caching in your environment. If you disable caching, Magento Commerce directly serves the files.\n\nSet up caching\nEnable caching in your Magento application’s .magento/routes.yaml as follows:\n\nhttp://{default}/:\n    type: upstream\n    upstream: php:php\n    cache:\n        enabled: true\n        headers: [ \"Accept\", \"Accept-Language\", \"X-Language-Locale\" ]\n        cookies: [\"*\"]\n        default_ttl: 60\n\nRoute-based caching\nIf you need fine-grained caching, you can set up caching rules for several routes separately as the following example shows:\n\nhttp://{default}/:\n  type: upstream\n  upstream: php:php\n  cache:\n    enabled: true\n\nhttp://{default}/path/:\n  type: upstream\n  upstream: php:php\n  cache:\n    enabled: false\n\nhttp://{default}/path/more/:\n  type: upstream\n  upstream: php:php\n  cache:\n    enabled: true\n\nThe preceding example caches the following routes:\n\n\n  http://{default}/\n  http://{default}/path/more/\n  http://{default}/path/more/etc/\n\n\nAnd the following routes are not cached:\n\n\n  http://{default}/path/\n  http://{default}/path/etc/\n\n\n\n  Regular expressions in routes are not supported.\n\n\nCache duration\nThe cache duration is determined by the Cache-Control response header value. If no Cache-Control header is in the response, we use the default_ttl key.\n\nCache key\nTo decide how to cache a response, Magento Commerce builds a cache key depending on several factors and store the response associated with this key. When a request comes with the same cache key, the response is reused. Its purpose is similar to the HTTP Vary header.\n\nThe parameters headers and\ncookies keys enable you to change this cache key.\n\nThe default value for these keys follows:\n\ncache:\n  enabled: true\n  headers: [\"Accept-Language\", \"Accept\"]\n  cookies: [\"*\"]\n\nCache attributes\nWe support the following attributes:\n\n\n  enabled\n  headers\n  cookies\n  default_ttl\n\n\nenabled\nWhen set to true, enable the cache for this route. When set to false, disable the cache for this route.\n\nheaders\nDefines on which values the cache key must depend.\n\nFor example, if the headers key is the following:\n\ncache:\n  enabled: true\n  headers: [\"Accept\"]\n\nThen Magento Commerce will cache a different response for each value of the Accept HTTP header.\n\ncookies\nThe cookies key define on which values the cache key must depend.\n\nFor example:\n\ncache:\n  enabled: true\n  cookies: [\"value\"]\n\nThe cache key depends on the value of the value cookie in the request.\n\nA special case exists if the cookies key has the [\"*\"] value. This value means that any request with a cookie will bypass the cache. This is the default value.\n\n\n  You cannot  use wildcards in the cookie name. You must either use a precise cookie name, or match all cookies with asterisk (*). SESS* or ~SESS are currently  not valid values.\n\n\n\ndefault_ttl\nIf the response does not have a Cache-Control header, the default_ttl key is used to define the cache duration, in seconds. The default value is 0, which means nothing is cached.\n",
      "url": "/guides/v2.0/cloud/project/project-routes-more-cache.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-routes-more-redir-html": {
      "title": "Redirects",
      "content": "Overview of redirection\nManaging redirection rules is a common requirement for web applications,\nespecially in cases where you do not want to lose incoming links that have\nchanged or been removed over time. This topic discusses how you can manage redirection rules on your\nMagento Commerce (Cloud) projects.\n\nIf the redirection methods discussed in this topic don’t work for you, you can use caching headers to do the same thing.\n\nWhole-route redirects\nUsing whole-route redirects, you can define very basic routes in routes.yaml. For example, you can redirect from a naked domain to a www subdomain as follows:\n\nhttp://{default}/:\n    type: redirect\n    to: http://www.{default}/\n\n\nPartial redirects\nIn the .magento/routes.yaml file you can also add partial redirect rules\nto existing routes:\n\nhttp://{default}/:\n  # [...]\n  redirects:\n    expires: 1d\n    paths:\n      \"/from\": { \"to\": \"http://example.com/\" }\n      \"/regexp/(.*)/matching\": { \"to\": \"http://example.com/$1\", regexp: true }\n\n\nThis format is more rich and works with any type of route, including routes served directly by the application.\n\nTwo keys are available under redirects:\n\n\n  expires: optional, the duration the redirect is cached. Examples of valid values include 3600s, 1d, 2w, 3m.\n  paths: the paths to which to apply redirections.\n\n\nEach rule under paths is defined by:\n\n\n  A key that describes the expression to match against the\nrequest path\n  \n    A value object describing both the destination to redirect to with\ndetail on how to handle the redirection.\n\n    The value object is defined with the following\nkeys:\n  \n  to\n  regexp\n  prefix\n  append_suffix\n  code\n\n\nto\nRequired, a partial (\"/destination\" or \"//destination\") or full URL (\"http://example.com/\").\n\nregexp\nOptional, defaults to false. Specifies whether the path key should be interpreted as\n   a PCRE regular expression.\n\nClick to show/hide content In the following example, a request to http://example.com/regexp/a/b/c/match redirects to http://example.com/a/b/c:\n\nhttp://{default}/:\n    type: upstream\n    redirects:\n       paths:\n          \"/regexp/(.*)/match\":\n          to: \"http://example.com/$1\"\n          regexp: true\n\n\nprefix\nSpecifies whether or not to redirect both the path and all its children or just the path itself. Defaults to true, but is not supported if regexp is true.\n\nClick to show/hide content For example,\n\nhttp://{default}/:\n    type: upstream\n       redirects:\n       paths:\n          \"/from\":\n          to: \"http://{default}/to\"\n          partial: true\n\nIn the preceding example, if partial is set to true, /from redirects to /to and /from/another/path will redirect to /to/another/path\n\nIf partial is set to false, /from triggers a redirect, but /from/another/path does not.\n\n\nappend_suffix\nDetermines if the suffix is carried over with the redirect. Defaults to true, but not supported if regexp is true or if prefix is false.\n\nClick to show/hide content For example,\n\nhttp://{default}/:\n    type: upstream\n    redirects:\n       paths:\n          \"/from\":\n          to: \"http://{default}/to\"\n          append_suffix: false\n\nThe preceding example results in /from/path/suffix redirecting to just /to.\n\nIf append_suffix is set to its default value of true, /from/path/suffix redirects to /to/path/suffix.\n\n\ncode\nSpecifies the HTTP status code. Valid status codes are 301 (Moved Permanently), 302, 307, and 308. Defaults to 302.\n\nexpires\nOptional, the duration the redirect will be cached. Defaults to the expires value defined directly under the redirects key, but at this level we can fine-tune the expiration of individual partial redirects:\n\nhttp://{default}/:\n    type: upstream\n    redirects:\n       expires: 1d\n       paths:\n          \"/from\": { \"to\": \"http://example.com/\" }\n          \"/here\": { \"to\": \"http://example.com/there\", \"expires\": \"2w\" }\n\nIn the preceding example, redirects from /from expire in one day, but redirects from /here expire in two weeks.\n",
      "url": "/guides/v2.0/cloud/project/project-routes-more-redir.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-routes-more-ssi-html": {
      "title": "Server side includes",
      "content": "Server side includes (SSI) are directives in HTML pages that get evaluated on the server while the pages are being rendered. Use of server side includes enables you to add dynamically generated content to an existing HTML page without having to serve the entire page.\n\nMore information about nginx SSI.\n\nYou can activate or deactivate SSI on a per-route basis in your\n.magento/routes.yaml; for example:\n\n\"http://{default}/\":\n    type: upstream\n    upstream: \"myapp:php\"\n    cache:\n      enabled: false\n    ssi:\n        enabled: true\n\"http://{default}/time.php\":\n    type: upstream\n    upstream: \"myapp:php\"\n    cache:\n      enabled: true\n\n\nSSI enables you to include in your HTML response directives that cause the\nserver fill in parts of the HTML, respecting the your caching configuration.\n\nThe following example shows how to insert a dynamic date control at the top of a page and another date control at the bottom that updates every 600 seconds:\n\nAdd the following to any page, such as /index.php:\n\necho date(DATE_RFC2822);\n&lt;!--#include virtual=\"time.php\" --&gt;\n\nAdd the following to time.php:\n\nheader(\"Cache-Control: max-age=600\");\necho date(DATE_RFC2822);\n\nBrowse to the page on which you added the control. Refresh the page several times and notice that the time at the top of the page changes but the time on the bottom changes only every 600 seconds.\n",
      "url": "/guides/v2.0/cloud/project/project-routes-more-ssi.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-start-html": {
      "title": "Project structure",
      "content": "When you create your project, you receive a cloned repository of Magento Commerce (Cloud) code.\n\nLocal project directory structure\nNot including the Magento application itself, your local project has the following structure:\n\n├── .git\n├── .gitignore\n├── .magento\n│   ├── routes.yaml\n│   └── services.yaml\n├── .magento.app.yaml\n├── auth.json\n├── composer.json\n├── composer.lock\n├── magento-vars.php\n├── php.ini\n└── README.md\n\n\n  When you push your local environment to the remote server, our deploy script uses the values defined by configuration files in the .magento directory, then the script deletes the directory and its contents. Your local development environment isn't affected.\n\n\n.gitignore file {gitignore}\nDepending on your Magento Commerce (Cloud) version, you may need different information added to or commented out in your .gitignore file. Git uses this file to determine which files and directories to ignore, before you make a commit to your branches. A .gitignore file should be committed into your root Magento in the repository, in order to share the ignore rules with any other users that clone the repository.\n\nWe include a base .gitignore file with the project repository. For a review of the Magento Commerce (Cloud) file, see .gitignore file. You can review the recommended files for your file in the .gitignore reference.\n\nMagento application root directory\nThe Magento application root directory is located in different locations depending on the environment.\n\nFor Starter:\n\n\n  Integration environment—the Magento application is located in the /app directory.\n  Production environment—the Magento application is located in the /&lt;project code&gt; directory.\n\n\nFor Pro:\n\n\n  Integration environment—the Magento application is located in the /app directory.\n  Staging environment—the Magento application is located in the /&lt;project code&gt;_stg directory.\n  Production environment—the Magento application is located in the ` /` directory.\n\n\nWritable directories\nIn Integration, Staging, and Production, only the following directories are writable due to security reasons:\n\n\n  var\n  pub/static\n  pub/media\n  app/etc\n  /tmp\n\n\n\n  In Production, each node in the three-node cluster has a /tmp directory that is not shared with the other nodes.\n\n\nLogs\nLogs for all environments are located under the /var/log directory. You can access that directory by opening an SSH tunnel to the environment using the magento-cloud environment:ssh -e &lt;environment id&gt; command.\n\nFor Pro, the deployment log for Staging and Production is located in /var/log/platform/&lt;project ID&gt;.\n\nMagento logs are located in the &lt;magento root dir&gt;/var/log directory.\n\nBuild logs\nAfter pushing to your environment, you can see the results of the both hooks. Logs from the build hook are redirected to the output stream of git push, so you can observe them in the terminal or capture them (along with error messages) with git push &gt; build.log 2&gt;&amp;1.\n\nDeploy logs\nYou can review these logs via SSH into the environment. Change to the directories listed below to review the logs.\n\nLogs from the deploy hook are located on the server in the following locations:\n\n\n  Integration: /var/log/deploy.log\n  Staging: /var/log/platform/&lt;prodject ID&gt;/post_deploy.log\n  Production: /var/log/platform/{1|2|3}.&lt;prodject ID&gt;/post_deploy.log\n\n\nThe value of &lt;project ID&gt; depends on the project ID and whether the environment is Staging or Production. For example, with a project ID of yw1unoukjcawe, the Staging environment user is yw1unoukjcawe_stg and the Production environment user is yw1unoukjcawe.\n\nFor example, on the Staging environment for project yw1unoukjcawe, the deploy log is located at /var/log/platform/yw1unoukjcawe_stg/post_deploy.log.\n\nFor Production, you have a three node structure. Logs are available with specific information for that node. For example, on the Production environment for project yw1unoukjcawe, the deploy log is located at node 1 /var/log/platform/1.yw1unoukjcawe/post_deploy.log, node 2 /var/log/platform/2.yw1unoukjcawe/post_deploy.log, and node 3 /var/log/platform/3.yw1unoukjcawe/post_deploy.log.\n\nLogs for all deployments that have occurred on this environment are appended to this file. Check the timestamps on log entries to verify and locate the logs you want for a specific deployment.\n\nThe actual log output is highly verbose to allow troubleshooting. The following is a condensed example:\n\n[2016-10-11 22:15:38] Starting pre-deploy.\n...\n[2016-10-11 22:15:39] Pre-deploy complete.\n[2016-10-11 22:15:42] Start deploy.\n[2016-10-11 22:15:42] Preparing environment specific data.\n[2016-10-11 22:15:42] Initializing routes.\n\n... more ...\n\n[2016-10-11 22:15:46] Deployment complete.\n\nThe deploy log contains start and stop messages for each of the two hooks:\nStarting pre-deploy, Pre-deploy complete., Start deploy., and Deployment complete..\n\nApplication logs\nTo review other application logs in Staging or Production, you can access and review those logs in /var/log/platform/ProjectID.\n\nFor Pro plan Staging, the project ID has _stg at the end. For example, if you receive 500 errors in Staging and want to review the nginx logs, you can SSH to the Staging environment and locate the logs in /var/log/platform/ProjectID_stg.\n\nFor Pro plan Production, you have three nodes to check for logs.\n\nRelated topics\n\n  Get started with an environment\n  .magento.app.yaml\n  routes.yaml\n  services.yaml\n\n",
      "url": "/guides/v2.0/cloud/project/project-start.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-upgrade-parent-html": {
      "title": "Upgrades and Patches",
      "content": "The following information helps you upgrade and patch Magento Commerce (Cloud). All of our upgrades and patches are Composer driven. We recommend using composer update for running updates.\n\nAs part of your normal pushes of code, Magento Commerce (Cloud) checks for any pending patches and updates. These instructions walk through the specific steps needed, including preparing, updating, and verifying the upgrade.\n\nWhat you need:\n\n\n  An active branch on your local to test in your Integration environment. We recommend using a dedicated branch for the upgrades and patches, without additional in-progress extension or code work.\n  Access to the environment and variables if needed\n\n\nFor detailed instructions:\n\n\n  Upgrade Magento Commerce (Cloud)\n  Patch Magento Commerce (Cloud)\n  Specifics for upgrading from Magento Commerce (Cloud) 2.0.4\n\n",
      "url": "/guides/v2.0/cloud/project/project-upgrade-parent.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-upgrade-html": {
      "title": "Upgrade Magento Commerce (Cloud)",
      "content": "This information details how to upgrade Magento Commerce (Cloud) from any version after 2.0.4. If you’re currently using version 2.0.4, see Upgrade from version 2.0.4.\n\nWhen you upgrade Magento Commerce (Cloud), you also upgrade with patches and available hotfixes as part of the magento-cloud-metapackage. Make sure you have auth.json in your project root folder if there isn’t one already.\n\nOur upgrades are Composer driven. For more information on Composer, see Composer in Cloud.\n\n\n  Always apply and test a patch your local system in an active branch. You can push and test in an Integration environment prior to deploying across all environments.\n\n\nWe recommend that you first back up the database of the system you are upgrading. Use the following steps to back up your Integration, Staging, and Production environments.\n\nVerify or set the ADMIN_EMAIL variable\nThe environment variable ADMIN_EMAIL is required for upgrading and patching. This email is used for sending password reset requests and verified during when updating Magento Commerce (Cloud). To set, see Add admin variables for Admin access.\n\nBack up the database\nBack up your integration system database and code:\n\n\n  \n    Enter the following command to make a local backup of the remote database:\n\n    magento-cloud db:dump\n    \n  \n  \n    Enter the following command to back up code and media:\n\n    php bin/magento setup:backup --code [--media]\n    \n\n    You can optionally omit [--media] if you have a large number of static files that are already in source control.\n  \n\n\nBack up your staging or production system database:\n\n\n  SSH to the server.\n  \n    Find the database login information:\n\n    php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]))-&gt;database);'\n    \n  \n  \n    Create a database dump:\n\n    mysqldump -h &lt;database host&gt; --user=&lt;database user name&gt; --password=&lt;password&gt; --single-transaction &lt;database name&gt; | gzip - &gt; /tmp/database.sql.gz\n    \n  \n\n\nVerify other changes\nVerify other changes you’re going to submit to source control before you start the upgrade:\n\n\n  If you haven’t done so already, change to your project root directory.\n  \n    Enter the following command:\n\n    git status\n    \n  \n  If there are changes you do not want to submit to source control, branch or stash them now.\n\n\nComplete the upgrade\n\n\n  \n    Change to your Magento base directory and enter the following command:\n\n    composer require magento/magento-cloud-metapackage &lt;requiredversion&gt; --no-update\ncomposer update\n    \n\n    For example, to upgrade to version 2.1.4:\n\n    composer require magento/magento-cloud-metapackage 2.1.4 --no-update\ncomposer update\n    \n  \n  \n    Add, commit, and push your changes to initiate a deployment:\n\n    git add -A\ngit commit -m \"Upgrade\"\ngit push origin &lt;branch name&gt;\n    \n\n    git add -A is required to add all changed files to source control because of the way Composer marshals base packages. Both composer install and composer update marshal files from the base package (that is, magento/magento2-base and magento/magento2-ee-base) into the package root.\n\n    The files Composer marshals belong to the new version of Magento, to overwrite the outdated version of those same files. Currently, marshaling is disabled in Magento Commerce, so you must add the marshaled files to source control.\n  \n  \n    Wait for deployment to complete.\n  \n  \n    Verify your upgrade.\n  \n\n\nVerify your upgrade\nThis section discusses how to verify your upgrade and to troubleshoot any issues you might find.\n\nTo verify the upgrade in your integration, staging, or production system:\n\n\n  SSH to the server.\n  \n    Enter the following command from your Magento root directory to verify the installed version:\n\n    php bin/magento --version\n    \n  \n\n\nVerify and upgrade your extensions\nYou may need to upgrade any third-party extensions and modules that supports v2.2. We recommend working in a new Integration branch with your extensions disabled. Review your third-party extension and module pages in Marketplace or other company sites to verify support for Magento Commerce and Magento Commerce (Cloud) v2.2.\n\nWe recommend backing up your database prior to installing a number of extensions on your local and Integration environments.\n\n\n  Create a new branch on your local.\n  Disable your extensions as needed.\n  As available, download extension upgrades.\n  Install the upgrade on your local in the Git branch as documented by the third-party documentation.\n  Enable and test the extension locally.\n  Push the code to test in your Integration environment.\n  Push to Staging to test in a pre-production environment.\n\n\nInclude the extensions in your going live steps to Production only after fully upgrading Production to v2.2. We strongly recommend fully upgrading your Production environment before including upgraded extensions.\n\nTroubleshoot your upgrade\nIn some cases, an error similar to the following displays when you try to access your storefront or the Magento Admin in a browser:\n\nThere has been an error processing your request\nException printing is disabled by default for security reasons.\n  Error log record number: &lt;error number&gt;\n\n\nView error details on the server\nTo view the error in your integration system, SSH to the server and enter the following command:\n\nvi /app/var/report/&lt;error number&gt;\n\n\nResolve the error\nOne possible error occurs when the deployment hook failed, and therefore the database has not yet been fully upgraded. If so, an error similar to the following is displayed:\n\na:4:{i:0;s:433:\"Please upgrade your database: Run \"bin/magento setup:upgrade\" from the Magento root directory.\nThe following modules are outdated:\nMagento_Sales schema: current version - 2.0.2, required version - 2.0.3\n\n\nTo resolve the error:\n\n\n  SSH to the server.\n  Examine the logs to determine the source of the issue.\n  \n    After you fix the source of the issue, push the change to the server, which causes the upgrade to restart.\n\n    For example, on a local branch, enter the following commands:\n\n    git add -A &amp;&amp; git commit -m \"fixed deployment failure\" &amp;&amp; git push origin &lt;branch name&gt;\n    \n  \n\n\nRelated topic\n\n  Composer\n  Install, manage, and upgrade modules\n  Install optional sample data\n  Merge and delete an environment\n\n",
      "url": "/guides/v2.0/cloud/project/project-upgrade.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-webint-basic-html": {
      "title": "Configure your project",
      "content": "The Magento Commerce (Cloud) Project Web Interface enables you to do the following for all Starter and Pro environments:\n\n\n  Access projects\n  Create and manage projects\n  Access active environments and branches using SSH, CLI, and URLs\n  Configure environment settings, environment variables, and routes\n  Create and manage users\n  Manage Git branches\n\n\nAs you make changes to these settings, the branch redeploys to the environment. You can make these setting changes for all Starter and Pro environments.\n\n\n\n  \n    Updating your Pro project: These sections include instructions for Pro projects with Staging and Production available in the Project Web Interface. To add Staging and Production to your interface, see Add Staging and Production to Pro projects UI.\n\n    We can update Pro projects created before October 23, 2017. All new Pro projects include these features. Your ticket will be queued for update, which may take time to complete. We will keep you updated through the process.\n\n    If you do not request this update, you must use CLI commands or tickets to modify settings, variables, routes, and more for Pro plan Staging and Production environments.\n  \n\n  Access your project and environments\n  The Project Web Interface provides several ways to access your project and environments:\n\n  \n    Storefront URL for each active environment\n    Secure Shell (SSH) link for SSH access via terminal application\n    Clone the project using the Magento Cloud CLI or Git\n  \n\n  To access projects and environments through the Project Web Interface:\n\n  \n    Log in to your project.\n    \n      Click Access Project for a list of URLs and SSH.\n\n      \n    \n  \n\n  For more information about using SSH, see SSH to an environment. To clone the project using either the Magento Commerce (Cloud) CLI or Git, use the links in the field under the branch name.\n\n  The following figure shows an example.\n\n  \n\n  Click either CLI or Git to display the appropriate clone command. Use the  (Copy to clipboard) button to copy the command to the clipboard.\n\n  Configure environment settings\n  You can set environment settings for the following table of settings. These settings affect your Starter environments and Pro Integration environments. To modify settings for Pro plan Staging and Production environments, you need to enter a Support ticket.\n  \n\t\n\t\t\n\t\t\tOption\n\t\t\tDescription\n\t\t\n\t\n\t\tEnvironment status\n\t\tAn environment can be either active or inactive. You'll do most of your work in an active environment. After merging an environment with its parent, you can optionally delete the environment, making it inactive. To delete an environment, click Delete. You can active an inactive environment later.\n\t\n\t\n\t\tOutgoing emails\n\t\tSetting to On means that code in your environment can send and receive e-mails (for example, using PHP email() function. \n\t\n\tHTTP access control\n\tSetting to On enables you to configure security for the project's Web Interface using a login and also IP address access control.\n\t\n\n\n\n  Configure emails for testing\n  One of these environment variables enables or disables outgoing emails for the environment. If you wanted to test email notifications for the environment, you need to set this option On.\n\n  \n    Access your project and select a specific environment.\n    Select the Settings tab.\n    \n      For the Outgoing emails option, select the toggle to On.\n\n      \n    \n  \n\n  Configure your email notifications, services, and more as needed through the Magento Admin and test emails. If you need to enable this setting for Pro plan on Staging and Production, you will need to enter a Support ticket.\n\n  Set environment and project variables\n  You can set project wide and environment specific variables through the Project Web Interface. Variables can be either text or JSON format. For more information on variables, see Overview of environment variables.\n\n  For an example of variables, we walk you through creating Magento Admin variables through Onboarding and project creation tasks. You may want to add environment variables for sensitive data like payment method information. Project variables are set across all branches and environments.\n\n  To view or edit environment variables, you must have at minimum the project reader role with environment admin privileges.\n\n  For new Pro projects created after October 23, 2017, you can add variables for all environments through the Project Web Interface.\n\n  \n\n    If you want to add the same variables to your Integration, Staging, and Production environments, we recommend adding all of the variables one at a time to Integration. After you finish adding variables, trigger a deployment to Staging and production. All variables will be inherited from Integration.\n\n    Environment variable\n    To set environment specific variables in the Project Web Interface:\n\n    \n      Access your project and select a specific environment.\n      Select the Variables tab.\n      Click Add Variable.\n      In the Name field, enter a variable name. For example, to set the Magento Admin default account password, enter ADMIN_PASSWORD.\n      \n        In the Value field, enter the value for the variable. For example, enter a valid email address accessible for reset email notifications.\n\n        \n      \n      As needed, select options for JSON value, Visible during build, and Visible during runtime. If you do not have Super User access, you may only see the JSON value option.\n      Click Add Variable. After you add the variable, the environment will deploy. Wait until deployment completes before more edits.\n    \n\n    \n      If you’re attempting to override Magento configuration settings, you must prepend the variable name with env:. For example:\n\n    \n\n    Project variable\n    To set project variables in the Project Web Interface:\n\n    \n      Access your project and select a specific environment.\n      Select the Variables tab.\n      Click Add Variable.\n      In the Name field, enter a variable name. For example, to set the Magento Admin email for the default account, enter ADMIN_EMAIL.\n      \n        In the Value field, enter the value for the variable. For example, enter a valid email address accessible for reset email notifications.\n\n        \n      \n      As needed, select options for JSON value, Visible during build, and Visible during runtime. If you do not have Super User access, you may only see the JSON value option.\n      Click Add Variable. After you add the variable, the environment will deploy. Wait until deployment completes before more edits.\n    \n\n    Configure routes\n    Routes allow you to set redirects or upstream settings for applications for your specific environment. For full details on routes, see routes.yaml. These routes (or URLs) are used to access your Magento storefront.\n\n    \n      Access your project and select a specific environment.\n      Select the Routes tab.\n      Select Add Route.\n      Enter a URL. You can use {default} in the URL, which is a placeholder for the default domain.\n      Select a Type: Upstream for applications or Redirect.\n      \n        To configure an Upstream route:\n\n        \n          Enter the Upstream route.\n          Use the toggle to enable or disable the Cache for the route.\n          Enter the cookies to list: No cookies, All cookies, or Specify a specific cookie. You can enter multiple specific cookies.\n          For Headers to Whitelist, select Default Headers or Specify a header. You can enter multiple headers.\n          Use the toggle to enable or disable the Server-Side Includes (SSI).\n        \n      \n      To configure a Redirect, enter a URL to Redirect to. You can use {default} in the URL, which is a placeholder for the default domain.\n      Click Add Route to save. The setting is saved and deployed to the environment.\n    \n\n    \n\n    View environment history\n    An environment’s history includes:\n\n    \n      Initial creation\n      Snapshots\n      Syncs and merges\n      Code pushes\n    \n\n    To view an environment’s history, log into your project and select an environment. The page displays a general history of actions completed on the page. For a detailed list of completed actions during build and deployment, we recommend reviewing logs directly on the servers. For more information on logs, see Use logs for troubleshooting.\n\n    The following figure shows a sample history.\n\n    \n\n    The history shows, from oldest to newest:\n\n    \n      Environment branched from FeatureX\n      Environment synced with the parent\n      Environment snapshot created\n    \n\n    We recommend creating a snapshot before you make any code changes.\n\n    \n      Environment variable added\n      Environment snapshot created\n    \n\n    Related topics\n    \n      Project structure\n      Create and manage users\n      Manage branches\n      Snapshots and backup management\n    \n  \n\n",
      "url": "/guides/v2.0/cloud/project/project-webint-basic.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-webint-branch-html": {
      "title": "Manage branches with the Project Web Interface",
      "content": "Every Magento Commerce (Cloud) environment has an associated active Git branch. You can manage your environments using either the Project Web Interface, the Magento Cloud CLI, or Git commands. For more information on Git branchs, see Git documentation.\n\nFor more information about managing environments using the CLI, see Manage branches with the CLI.\n\nThis topic discusses how to use the Project Web Interface to:\n\n\n  Add or delete an environment. You cannot add or delete the master branch for Pro plan Staging and Production. You can branch from Start plan Master.\n  Sync (git pull) from the environment’s parent\n  Merge (git push) to the environment’s parent\n\n\n\n  You cannot create branches from Pro plan Staging and Production master. These environments include master branches that you deploy updated Git code to from Integration master.\n\n\n\n\n  \n    Updating your Pro project: These sections include instructions for Pro projects with Staging and Production available in the Project Web Interface. To add Staging and Production to your interface, see Add Staging and Production to Pro projects UI.\n\n    We can update Pro projects created before October 23, 2017. All new Pro projects include these features. Your ticket will be queued for update, which may take time to complete. We will keep you updated through the process.\n\n    If you do not request this update, you must use CLI commands or tickets to modify settings, variables, routes, and more for Pro plan Staging and Production environments.\n  \n\n  Add or delete an environment\n  Complete development of code and added extensions in a branch and, when complete, merge (git push) the branch with its parent or master.\n\n  \n    For Starter, we recommend you create a staging branch from Master, then branch from staging for development.\n    For Pro, you want to branch from Development (Integration master).\n  \n\n  For branching strategies, review Starter and Pro architecture overviews.\n\n  Your account supports a limited number of active Git branches and an unlimited number of inactive branches. Manage active and inactive branches by deleting a branch. When deleted, it is deactivated and still listed in the project branches list. You can either activate the branch later or you can delete it entirely using the CLI.\n\n  If you need additional environments for development, enter a Support ticket for more information.\n\n  Add a branch\n  To add a branch:\n\n  \n    Log in to your project.\n    \n      In the left navigation bar, click the name of the parent environment.\n\n      Your new branch is cloned from this environment. Choose a parent environment that is similar to the environment you’re about to create.\n    \n    Click .\n    \n      In the provided field, enter a branch name. In many cases, the environment name is the same as its ID.\n\n      \n   \t\tThe environment name is different from the environment ID only if you use spaces or capital letters in the environment name. An environment ID consists of all lowercase letters, numbers, and allowed symbols. Capital letters in an environment name are converted to lowercase in the ID; spaces in an environment name are converted to dashes.\n   \t\tAn environment name cannot include characters reserved for your Linux shell or for regular expressions. Forbidden characters include curly braces ({ }), parentheses, asterisk (*), angle brackets (&lt; &gt;), ampersand (&amp;), percent (%), and other characters.\n \t\n    \n    Click Branch.\n    \n      Wait while the environment deploys.\n\n      During deployment, its status is In process, as the following figure shows.\n\n      \n\n      After a successful deployment, the status changes to Success:\n\n      \n    \n    \n      Continue with one of the following:\n\n      \n        Get started with an environment\n        How tos and tutorials\n      \n    \n  \n\n  Delete to make a branch inactive\n  To delete an environment and make it inactive:\n\n  \n    Log in to your project.\n    In the left pane, click the name of the branch to delete.\n    \n      Click Configure environment as the following figure shows.\n\n      \n    \n    Click the Settings tab.\n    \n      Click Delete next to the environment’s status, as the following figure shows.\n\n      \n\n      A deleted (that is, inactive) environment displays with its name stricken out as the following figure shows.\n\n      \n    \n  \n\n  Sync from the environment’s parent\n  Syncing an environment (or branch) is the same as git pull origin &lt;parent&gt;. You sync to get updated code from a parent environment. You can use this feature through the interface for all Starter and Pro environments.\n\n  For Pro plan, you can also sync from Staging and Production to your Integration master branch. This sync only pulls and pushes code, not data. To sync data, you will need to dump the database data and push it to another environment’s database. For more information, see Migrate and deploy static files and data.\n\n  To sync an environment with its parent:\n\n  \n    Log in to your project.\n    In the left pane, click the name of the branch you want to sync.\n    \n      Click  (sync).\n\n      The following prompt displays:\n\n      \n    \n    Select the check box next to each item to sync and click Sync.\n  \n\n  Merge with the environment’s parent\n  Merging an environment is the same as git push origin. You merge to push updated code from an environment to its parent environment (that is, a Git branch). You can merge this code up through the parent-child relationships to master. You can also deploy to Staging and Production using the merge command.\n\n  To merge an environment with its parent:\n\n  \n    Log in to your project.\n    In the left pane, click the name of the branch you want to merge.\n    Click  (merge).\n    Click Merge to confirm the action.\n  \n\n  View logs\n  Through the Project Web Interface, you can review various logs for environments including build, deploy, and deployment history.\n\n  For Starter environments, you can review build and deploy logs and the deployment history. These environments include Master (Production) and all branches created from it.\n\n  For Pro environments, you can review the following logs per environment:\n\n  \n    Integration: Build and deploy and deployment history\n    Staging: Build logs and deployment history. You need to SSH into the server to view deploy logs.\n    Production: Build logs and deployment history. You need to SSH into the server to view deploy logs.\n  \n\n  If you do not see your Pro plan Staging and Production environments in the Project Web Interface, you need to enter a ticket for updating your project interface.\n\n  \n    Log in to your project.\n    In the left pane, click an environment to review logs for.\n    The right pane provides a deployment history of one entry per action attempted including syncs, merges, branches, snapshots, and more.\n    To view the build log, select the Success or Failure link per deployment record on the account.\n  \n\n  Pull code from a private Git repository\n  Your Magento Commerce (Cloud) project can include code located in a private Git repository. For example, a you may have code for a custom module or theme in a private repo. To do so, you must add your project’s public SSH key to your private Git repository and update your project’s composer.json.\n\n  To add a deployment key to your private GitHub repository, you must be the administrator of that repository. GitHub allows you to use a deploy key for one repository only.\n\n  If your project needs to access multiple repositories, you can choose to\nattach an SSH key to an automated user account. Because this account won’t\nbe used by a human, it’s referred to as a machine user. You can then add the\nmachine account as collaborator or add the machine user to a team with\naccess to the repositories it needs to manipulate.\n\n  \nWe highly recommend adding and merging this code to your project Git repositories. If you do not configure the connection, you will have build issues.\n\n\n  Find your deploy key\n  To find your project SSH public key (also referred to as a deploy key):\n\n  \n    Log in to your project using the Web Interface.\n    Click Configure Project.\n    \n      Click Deploy Key.\n\n      The following figure shows an example.\n\n      \n    \n    Copy the deploy key to the clipboard.\n    See Enter your GitHub deploy key.\n  \n\n  Enter your GitHub deploy key\n  On GitHub, deploy keys are read-only by default. Your Magento project won’t push code to the private repository.\n\n  To enter your project’s public key as a GitHub deploy key:\n\n  \n    Log in to your GitHub repository as its administrator.\n    \n      Click Settings as the following figure shows.\n\n      \n\n      \n  \t\tIf you don't see this option, you're not the repository administrator and you cannot complete this task. Ask your GitHub project administrator to do this.\n\n    \n    \n      On the Settings page, in the left navigation bar, click Deploy Keys as the following figure shows.\n\n      \n    \n    Click Add deploy key.\n    Follow the prompts on your screen to complete the task.\n  \n\n  In composer.json, use the &lt;user&gt;@&lt;host&gt;:&lt;.git&lt;/code&gt; format, or ssh://&lt;user&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;.git if using a non-standard port.\n\n  Enter your Bitbucket deployment key\n  To enter your project’s public key as a Bitbucket deploy key:\n\n  \n    Log in to your Bitbucket repository as its administrator.\n    \n      In the left navigation bar, click Settings as the following figure shows.\n\n      \n    \n    \n      Click General &gt; Deployment Keys as the following figure shows.\n\n      \n    \n    Click Add Key.\n    Follow the prompts on your screen to complete the task.\n  \n\n  Secure your environments and branches\n  You can access your project and environments from any location through a web browser using the Project Web Interface. You may have security set for your Production environment, stores, and sites. This section helps you secure your Integration and Staging environments for strictly your developers, DBAs, and more.\n\n  To secure your Starter environments and Pro Integration environments:\n\n  \n    Log into your Project Web Interface.\n    Select an environment / branch.\n    Click Configure Environment.\n    On the Settings tab, click ON for HTTP access control to enable secure access. You can choose between credentials or IP addresses to filter for access.\n    To filter by credentials, click Add Login, enter a username and password, and click again Add Login to add.\n    \n      To filter by IP address, enter the IP addresses in a list with deny or allow. For example:\n\n       123.456.789.111/29 allow\n 123.456.789.112/29 allow\n 234.123.567.111/29 allow\n 0.0.0.0/0 deny\n      \n    \n    Click Save.\n  \n\n  The branch redeploys to update the environment security and settings.\n\n  To secure Pro plan Staging environment, enter a Support ticket. Provide the user credentials and/or IP addresses to allow or deny. If you have security settings entered for an existing Integration environment, in the ticket ask to have the secure settings copied to Staging.\n\n  We recommend testing your environments after completing security settings.\n\n  Related topics\n  \n    Basic project information\n    Project backup and restore (snapshot)\n    Get started with a project\n  \n\n",
      "url": "/guides/v2.0/cloud/project/project-webint-branch.html"
    }
    ,
  
    "guides-v2-0-cloud-project-project-webint-snap-html": {
      "title": "Snapshots and backup management",
      "content": "You can back up and restore specific environments at any time using a snapshot. Snapshot options are available for all Start environments and Pro plan Integration environments. You cannot snapshot Pro plan Staging and Production environments.\n\nCreating a snapshot backs up the environment and because an environment is deployed as a read-only file system, restoring a snapshot is very fast.\n\nA snapshot is a complete backup of an environment. It includes all\npersistent data from all running services (for example, your MySQL database, Redis, and so on) and any files stored on the mounted volumes.\n\n\n  If you want to rollback to previous code or remove added extensions in an environment, restoring a snapshot is not the recommended method. See Rollbacks to remove code.\n\n\nYou can restore a snapshot up to 14 days after the snapshot was created.\n\nWe provide two methods for creating and managing snapshots:\n\n\n  Through the Magento Web Interface\n  Through Magento CLI commands\n\n\nCreate a snapshot\nTo create an environment snapshot using the Magento Web Interface:\n\n\n  Log in to your project.\n  In the left pane, click the name of the environment to back up.\n  In the top pane, click  (snapshots).\n  You are required to confirm the action.\n\n\nTo create an environment snapshot using the Magento CLI:\n\n\n  Make sure you’re in the directory of the project and environment you want to snapshot.\n  \n    Use the following command to create the snapshot:\n\n     magento-cloud snapshot:create\n    \n\n    The following modifiers further specify how to create the snapshot:\n\n     -p, --project=PROJECT          The project ID\n -e, --environment=ENVIRONMENT  The environment ID\n    \n\n    For a full list of options, enter magento-cloud snapshot:create --help.\n  \n  Use the magento-cloud snapshots command so see the most recent snapshots. For a full list, enter magento-cloud snapshot:list.\n\n\nRestore a snapshot\nTo restore an environment’s snapshot using the Magento Web Interface:\n\n\n  Log in to your project.\n  In the left pane, click the name of the environment to restore.\n  \n    In the environment’s history, click the restore link next to the snapshot to restore.\n\n    The following figure shows an example.\n\n    \n  \n  You are required to confirm the action.\n\n\nTo restore an environment snapshot using the Magento CLI:\n\n\n  Make sure you’re in the directory of the project and environment you want to snapshot.\n  \n    List all available snapshots to copy the ID using this command:\n\n     magento-cloud snapshot:list\n    \n  \n  \n    Use the following command to restore the snapshot using the ID you copied:\n\n         magento-cloud snapshot:restore &lt;id&gt;\n    \n\n    For example: magento-cloud snapshot:restore 92c9a4b2aa75422efb3d\n\n    The following modifiers further specify how to restore the snapshot:\n\n     -p, --project=PROJECT          The project ID\n -e, --environment=ENVIRONMENT  The environment ID\n    \n\n    For a full list of options, enter magento-cloud snapshot:restore --help.\n  \n\n\nDump your database\nTo create a copy of your database, you dump the data from the database to a file on your local.\n\n\n  \n    SSH into the environment you want to create a database dump from:\n\n    \n      Staging: ssh -A &lt;project ID&gt;_stg@&lt;project ID&gt;.ent.magento.cloud\n      Production: ssh -A &lt;project ID&gt;@&lt;project ID&gt;.ent.magento.cloud\n      \n        To SSH into the master branch of your Integration environment:\n\n          magento-cloud environment:ssh\n        \n      \n    \n  \n  \n    Find the database login information:\n\n    php -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]))-&gt;database);'\n    \n  \n  \n    Create a database dump:\n  \n\n\nFor Starter environments and Pro Integration environments:\n\n\tmysqldump -h &lt;database host&gt; --user=&lt;database user name&gt; --password=&lt;password&gt; --single-transaction --triggers main | gzip - &gt; /tmp/database.sql.gz\n\n\nFor Pro Staging and Production environments, the name of the database is in the MAGENTO_CLOUD_RELATIONSHIPS variable (typically the same as the application name and user name):\n\nmysqldump -h &lt;database host&gt; --user=&lt;database user name&gt; --password=&lt;password&gt; --single-transaction --triggers &lt;database name&gt; | gzip - &gt; /tmp/database.sql.gz\n\n\nIf you want to push this data into an environment, see Migrate data and static files.\n\nRollbacks to remove code\nWe recommend creating a snapshot of the environment and a backup of the database prior to deployments.\n\nIf you need to restore a snapshot specifically to remove new code and added extensions, the process can be complicated depending on the amount of changes and when you rollback. Some rollbacks may require database changes.\n\nSpecifically for code, you should investigate reverting code changes from your branch before redeploying. If not, every deploy will push the master branch (code and extensions) again to the target environment. For details, see the Deployment Process.\n\nRelated topics\n\n  Basic project information\n  Manage environments (branches)\n  Get started with a project\n\n",
      "url": "/guides/v2.0/cloud/project/project-webint-snap.html"
    }
    ,
  
    "guides-v2-0-cloud-project-projects-html": {
      "title": "Manage your project",
      "content": "The Magento Commerce (Cloud) project includes all code in Git branches, associated environments, and applications. Applications have environments and services that run on them including a database, web server, and caching server.\n\nWe provide a Project Web Interface and CLI commands to fully manage all aspects of your project. You have full access to all environments for Starter and Pro environments. You may need to continue to use SSH and CLI commands for some aspects of Pro plan Staging and Production environments.\n\n\n\n  \n    Updating your Pro project: These sections include instructions for Pro projects with Staging and Production available in the Project Web Interface. To add Staging and Production to your interface, see Add Staging and Production to Pro projects UI.\n\n    We can update Pro projects created before October 23, 2017. All new Pro projects include these features. Your ticket will be queued for update, which may take time to complete. We will keep you updated through the process.\n\n    If you do not request this update, you must use CLI commands or tickets to modify settings, variables, routes, and more for Pro plan Staging and Production environments.\n  \n\n  To manage your project, environment, and branches, see:\n\n  \n    Configure your project\n    Project structure\n    Create and manage users\n    Manage branches with the Project Web Interface or CLI commands\n    Snapshots and backup management\n  \n\n  Project and environment variables\n  The following sections detail more about project and environment variables:\n\n  \n    Overview of environment variables\n    Magento Commerce (Cloud) environment variables\n    Magento application environment variables\n    Example setting variables\n  \n\n  Upgrade and patch\n  To upgrade and patch Magento, see:\n\n  \n    Upgrade and test Magento Commerce\n    Patch and test Magento Commerce\n  \n\n  Access the Project Web Interface\n  With your Magento Commerce (Cloud) account created, you can log into the Project Web Interface at https://accounts.magento.cloud.\n\n  \n\n  Blackfire and New Relic credentials\n  Your project includes Blackfire and New Relic services. The project details display information for your project plan and important licenses and tokens for these integrations. Only the Account Owner has initial access to the credentials and services. You should provide these credentials to technical and developer resources as needed.\n\n  \n    Blackfire.io Profiler provides tools for reviewing and optimizing Magento and your store in your environments. The profiler checks every method and call, determining what occurs with performance metrics per step.\n    New Relic APM provides application metrics and performance information for Staging and Production environments.  This service is not the module or extension and does not provide infrastructure (hardware) monitoring. Do not install the New Relic module with this service in Magento Commerce (Cloud).\n  \n\n  To review your integration tokens, IDs, and more:\n\n  \n    As the Magento Commerce (Cloud) Account Owner, log in to your Magento Commerce project.\n    \n      In the upper right corner, click &lt;your name&gt; &gt; Account Settings.\n\n      \n    \n    \n      On your account page, click View Details for your project to open general settings and plan details.\n\n      \n    \n    \n      On your project details page, scroll to and expand Blackfire and New Relic to review your credentials.\n\n      \n    \n  \n\n  Access the project and environments\n  When you first login, a list of projects you have access to displays. As a Project Owner, you may only see your company’s project. A Magento Solution Partner may see multiple projects for all of the clients they support.\n\n  Click on a project to access branches and more. On the page, you will see a hierarchy of environments named by the Git branch.\n\n  For Starter, you will see a hierarchy of branches starting from Master (Production). Any branches you create display as children from Master. We recommend creating a Staging branch, then branching from that for your Integration development. For more information, see Starter architecture.\n\n  \n\n  For Pro, you will see a hierarchy of branches starting from Production to Staging to Integration. The  icon indicates these branches deploy to a dedicated server, used by Staging and Production. Any branches you create display as children from Integration. For more information, see Pro architecture.\n\n  \n\n  The following table details the branches for Pro:\n\n  \n\n\nBranch\nEnvironment\nDescription\n\n\n\n(no branch)\nGlobal Master\nThis \"branch\" captures global project changes including adding user accounts and variables. Important: Do not create branches from or merge to Global Master.\n\n\n\nproduction\nProduction\nThis is a child branch from master with a deployment target. You cannot branch from this branch. You merge code from master to this branch to go live with updated configurations and code.\n\n\nstaging\nStaging\nThis is a child branch from master with a deployment target. You cannot branch from this branch. You merge code from master to this branch to test in a pre-production environment.\n\n\nmaster\nIntegration master\nThe master branch of the single repository. In the Project Web Interface, this is called Integration. You branch from master for your development on your local, generating an environment when you push code. When this code is complete, you merge to staging and production.\n\n\n\n\n  If you are an existing Pro merchant, and have not ticketed to add Staging and Production to your UI, you will see only Integration master and any created branches.\n\n  \n\n  To access an environment store and admin, select a branch and click Access Site. A list of store URLs and SSH command display. Select the URL to view the store in that environment.\n\n  \n\n  The Pro plan Production environment includes three nodes that you can access using the following links:\n\n  \n    Load balancer URL: http[s]://&lt;your domain&gt;.c.&lt;project ID&gt;.ent.magento.cloud\n    \n      Direct access to one of the three redundant servers: http[s]://&lt;your domain&gt;.{1|2|3}.&lt;project ID&gt;.ent.magento.cloud\n\n      The production URL is used by the content delivery network (CDN).\n    \n  \n\n  If you have inactive Git branches of code, you can toggle displaying the branches in the hierarchy.\n\n  \n\n  Configure environments\n  You can manage variables and settings for Production, Staging, and Integration environments through this interface, or with CLI commands. Click Configure environment to create and manage environments, each of which corresponds to a Git branch.\n\n  \n\n  This displays the following page, which enables you to configure settings, variables, routes, and users.\n\n  \n\n  Configure the project\n  Click  (edit) to display users, and deploy keys associated with the project. You can modify access and permissions across the entire project and per environment (or branch).\n\n  \n\n  Related topics\n  \n    Configure Magento Commerce\n    Manage your environments\n    .magento.app.yaml\n    routes.yaml\n    services.yaml\n  \n\n",
      "url": "/guides/v2.0/cloud/project/projects.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-proxies-html": {
      "title": "Proxies",
      "content": "Magento’s constructor injection pattern enables you to flexibly manage your class dependencies. However, constructor injection also means that a chain reaction of object instantiation is often the result when you create an object. (The original object has dependencies that have dependencies, and those objects have dependencies, and so on.)\n\nIf a class’s constructor is particularly resource-intensive, this can lead to unnecessary performance impact when another class depends on it, if the expensive object does not end up being needed during a particular request. (You can display a dependency graph of such objects by enabling profiling.)\n\nAs an example, consider the following two classes:\n\nclass SlowLoading\n{\n    public function __construct()\n    {\n        // ... Do something resource intensive\n    }\n\n    public function getValue()\n    {\n        return 'SlowLoading value';\n    }\n}\n\nclass FastLoading\n{\n    protected $slowLoading;\n\n    public function __construct(\n        SlowLoading $slowLoading\n    ){\n        $this-&gt;slowLoading = slowLoading;\n    }\n\n    public function getFastValue()\n    {\n        return 'FastLoading value';\n    }\n\n    public function getSlowValue()\n    {\n        return $this-&gt;slowLoading-&gt;getValue();\n    }\n}\n\nAssume that class SlowLoading has a non-trivial performance impact when instantiated (perhaps due to a complex database query or a call to a third-party web API). Because of the dependency injection in the constructor of FastLoading, this impact is incurred if FastLoading is instantiated.  Note, however, that the SlowLoading instance is used only in the method getSlowValue, meaning that the resource cost is unnecessary if this method is never called on the FastLoading object.\n\nProxies are generated code\nMagento has a solution for this situation: proxies. Proxies extend other classes to become lazy-loaded versions of them. That is, a real instance of the class a proxy extends created only after one of the class’s methods is actually called. A proxy implements the same interface as the original class and so can be used as a dependency anywhere the original class can.  Unlike its parent, a proxy has only once dependency: the object manager.\n\nProxies are generated code and therefore do not need to be manually written.  (See Code generation for more information.) Simply reference a class in the form \\Original\\Class\\Name\\Proxy, and the class is generated if it does not exist.\n\nUsing the preceding example, a proxy can be passed into the constructor arguments instead of the original class, using DI configuration as follows:\n\n&lt;type name=\"FastLoading\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"slowLoading\" xsi:type=\"object\"&gt;SlowLoading\\Proxy&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/type&gt;\n\nWith the proxy used in place of SlowLoading, the SlowLoading class will not be instantiated—and therefore, the resource intensive constructor operations not performed—until the SlowLoading object is used (that is, if the getSlowValue method is called).\n\nBecause DI configuration is used to inject a proxy, proxies can be dropped in to replace their corresponding classes - or proxy replacements removed - without touching application code.\n\nAs a practical example of a proxy, you can see the StoreManager class and then see the generated StoreManager proxy class.\n",
      "url": "/guides/v2.0/extension-dev-guide/proxies.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-cache-page-caching-public-content-html": {
      "title": "Public content",
      "content": "\nBy default, all pages in Magento are cacheable, but you can disable caching if necessary (e.g., payment method return page, debug page, or AJAX data source).\n\nDisable caching\nTo disable caching, add a cacheable=\"false\" attribute to any block in your layout.\n\n&lt;block class=\"Magento\\Paypal\\Block\\Payflow\\Link\\Iframe\" template=\"payflowlink/redirect.phtml\" cacheable=\"false\"/&gt;\n\n\n\n  Magento disables page caching if at least one non-cacheable block is present in the layout.\n\n\nYou can also disable caching with HTTP headers. Use the controller to return an object that contains methods for manipulating the cache:\n\nclass DynamicController extends \\Magento\\Framework\\App\\Action\\Action\n{\n    protected $pageFactory;\n\n    public function __construct(\n        \\Magento\\Framework\\App\\Action\\Context $context,\n        \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory\n    ) {\n        parent::__construct($context);\n        $this-&gt;pageFactory = $resultPageFactory;\n    }\n\n    /**\n     * This action render random number for each request\n     */\n    public function execute()\n    {\n        $page = $this-&gt;pageFactory-&gt;create();\n        //We are using HTTP headers to control various page caches (varnish, fastly, built-in php cache)\n        $page-&gt;setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0', true);\n\n        return $page;\n    }\n}\n\n\nDefine caching policy\nYou can use the Admin to define caching policies or you can define them programmatically in a controller:\n\nclass DynamicController extends \\Magento\\Framework\\App\\Action\\Action\n{\n    protected $pageFactory;\n\n    public function __construct(\n        \\Magento\\Framework\\App\\Action\\Context $context,\n        \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory\n    ) {\n        parent::__construct($context);\n        $this-&gt;pageFactory = $resultPageFactory;\n    }\n\n    /**\n     * This action render random number for each request\n     */\n    public function execute()\n    {\n        $page = $this-&gt;pageFactory-&gt;create();\n        //We are using HTTP headers to control various page caches (varnish, fastly, built-in php cache)\n        $page-&gt;setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0', true);\n\n        return $page;\n    }\n}\n\n\n\n  \n    \n      You should take caching into account even if you need to refresh data every second. Lots of visitors can get content from the cache within a one-second time period.\n    \n    \n      Only GET and HEAD methods are cacheable.\n    \n  \n\n\nConfigure page variations\nMost caching servers and proxies use a URL as a key for cache records; however, Magento URLs are not unique enough to allow caching by URL only. Cookie and session data in the URL can also lead to undesirable side effects,  including:\n\n\n  Collisions in cache storage\n  Unwanted information leaks (e.g., French language website partially visible on an English language website, prices for customer group visiable in public, etc.)\n\n\nTo make each cached URL totally unique, we use HTTP context variables. Context variables enable the Magento application to serve different content on the same URL based on:\n\n\n  Customer group\n  Selected language\n  Selected store\n  Selected currency\n  Whether a customer is logged in or not\n\n\nContext variables should not be specific to individual users because variables are used in cache keys for public content. In other words, a context variable per user results in a separate copy of content cached on the server for each user.\n\nMagento generates a hash based on all context variables (\\Magento\\Framework\\App\\Http\\Context::getVaryString). The hash and current URL are used as keys for cache storage.\n\n\n  Use the X-Magento-Vary cookie to transfer context on the HTTP layer. HTTP proxies can be configured to calculate a unique identifier for cache based on the cookie and URL. For example, our sample Varnish 4 configuration uses the following:\n\n  sub vcl_hash {\nif (req.http.cookie ~ \"X-Magento-Vary=\") {\nhash_data(regsub(req.http.cookie, \"^.?X-Magento-Vary=([^;]+);.*$\", \"\\1\"));\n}\n... more ...\n}\n  \n\n\nFor example, let’s declare a context variable that shows a drinks catalog and advertisement to adult customers only. The following code snippet will create a copy of every page in Magento for users under the age of 18.\n\n/**\n * Plugin on \\Magento\\Framework\\App\\Http\\Context\n */\nclass CustomerAgeContextPlugin\n{\n    public function __construct(\n        \\Magento\\Customer\\Model\\Session $customerSession\n    ) {\n        $this-&gt;customerSession = $customerSession;\n    }\n    /**\n     * \\Magento\\Framework\\App\\Http\\Context::getVaryString is used by Magento to retrieve unique identifier for selected context,\n     * so this is a best place to declare custom context variables\n     */\n    function beforeGetVaryString(\\Magento\\Framework\\App\\Http\\Context $subject)\n    {\n        $age = $this-&gt;customerSession-&gt;getCustomerData()-&gt;getCustomAttribute('age');\n        $defaultAgeContext = 0;\n        $ageContext = $age &gt;= 18 ? 1 : $defaultAgeContext;\n        $subject-&gt;setValue('CONTEXT_AGE', $ageContext, $defaultAgeContext);\n    }\n}\n\n\nThe subject-&gt;setValue argument specifies the value for newcomer context and is used to guarantee parity during cache key generation for newcomers and users who already received the X-Magento-Vary cookie.\n\nFor another example of a context class, see Magento/Framework/App/Http/Context.\n\nInvalidate public content\nYou can clear cached content immediately after a entity changes. Magento uses  IdentityInterface to link entities in the application with cached content and to know what cache to clear when an entity changes.\n\nThis section shows you how to tell Magento what cache to clear when you change an entity.\n\nFirst, your entity module must implement Magento/Framework/DataObject/IdentityInterface as follows:\n\nuse Magento\\Framework\\DataObject\\IdentityInterface;\nclass Product implements IdentityInterface\n{\n     /**\n      * Product cache tag\n      */\n     const CACHE_TAG = 'catalog_product';\n    /**\n     * Get identities\n     *\n     * @return array\n     */\n    public function getIdentities()\n    {\n         return [self::CACHE_TAG . '_' . $this-&gt;getId()];\n    }\n}\n\n\nSecond, the block object must also implement Magento/Framework/DataObject/IdentityInterface as follows:\n\nclass View extends AbstractProduct implements \\Magento\\Framework\\DataObject\\IdentityInterface\n{\n    /**\n     * Return identifiers for produced content\n     *\n     * @return array\n     */\n    public function getIdentities()\n    {\n        return $this-&gt;getProduct()-&gt;getIdentities();\n    }\n}\n\n\nMagento uses cache tags for link creation. The performance of cache storage has a direct dependency on the number of tags per cache record, so try to minimize the number of tags and use them only for entities that are used in production mode. In other words, don’t use invalidation for actions related to store setup.\n\n\n  Use only HTTP POST or PUT methods to change state (e.g., adding to a shopping cart, adding to a wishlist, etc.) and don’t expect to see caching on these methods. Using GET or HEAD methods might trigger caching and prevent updates to private content. For more information about caching, see RFC-2616 section 13 {:target=”_blank”}\n\n\nCacheable page checklist\n\n  \n    Pages use GET requests\n  \n  \n    Pages render only cacheable blocks\n  \n  \n    Pages render without sensitive private data; session and customer DTO objects are empty\n  \n  \n    Functionality specific to both current session (customer) and page should be written using JavaScript (e.g., related product listing should exclude items that are already in the shopping cart)\n  \n  \n    Model and block level should identify themselves for invalidation support\n  \n  \n    Declare a custom context variable if you plan to show different public content with the same URL\n  \n\n\nNon-cacheable page checklist\n\n  \n    Use POST requests to modify Magento state (e.g., adding to shopping cart, wishlist, etc.)\n  \n  \n    Blocks that can’t be cached should be marked as non-cacheable in the layout. However, be aware that adding a non-cacheable block to a page prevents the full page cache from caching that page.\n  \n  \n    Controllers that don’t use layouts should set no-cache HTTP headers\n  \n\n\n",
      "url": "/guides/v2.0/extension-dev-guide/cache/page-caching/public-content.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-punctuation-punctuation-html": {
      "title": "Admin Punctuation",
      "content": "The following sections surface exceptions to the Associated Press (AP) Stylebook and summarize key stylebook elements to keep handy when writing content.\n\nSentences\n\nAll grammatically correct sentences end in punctuation, usually a period. When introducing a series or a list, end sentences with a colon.\n\nPunctuation to Avoid\n\n\n  \n    (;) Semicolons. Often, these awkwardly break sentences, and many users will find difficulty in understanding. Usually, a writer can simplify the sentence rather than use semicolons. Do not use in place of a conjunction.\n  \n  \n    Never use these punctuation types, unless they are included as part of a brand name:\n\n    \n      \n        (&amp;) Ampersands – international users don’t understand what ampersands mean\n      \n      \n        (!) Exclamation points\n      \n    \n  \n\n\nRules For …\n\nCommas\n\n\n  Conjunctions. Use a comma before a conjunction to separate independent clauses (note: clauses have a subject and predicate) joined by conjunctions, including and, but, for, or, nor, so, and yet. See example:\n    \n      No – “Users go to the Cart and review their items. (No comma's needed, since no subject follows “and”.)\"\n      Yes – “Users go to the Cart, and they review their items.”\n    \n  \n  Use Oxford comma. Different from AP. We always use the Oxford or \"serial\" comma, which is the final comma in a list of items. Correct example: “Retain customers with custom registries, gift cards, and store credit.”\n  Parenthesis. For details, jump to the Parenthesis section.\n  Numbers, dates, addresses. For details, see Number Formats.\n  Introductory phrases. Use commas to set off introductory phrases. ... Commas can be omitted after short phrases as long as the meaning, transitioning between phrase and sentence, is clear. Correct example: \"(After -or- Following -or- To follow) this section, read the Associated Press (AP) Stylebook’s commas entry.\"\n  Non-essential phrases. A non-essential phrase is a phrase that can be removed from a sentence without adversely affecting its meaning. \"Which\" is used for non-essential phrases, and \"that\" is used for essential phrases. See correct examples:\n  \n    Non-essential – \"Promotions, which are set up with cart and catalog rules, are created in the Admin panel.\"\n    Essential – \"Promotions that are set up with catalog rules do not display in Cart.\"\n  \n  \n\n\nColon\n\nUse to end a sentence before:\n\n\n  A complex series of items. Don't use a colon with a simple series. Also, consider using a list for a complex series of items. For details, see Lists section in Content Formats. See examples:\n    \n      No – “A shopping cart may include: pants, hats, and scarves.\"\n      Yes – “A shopping cart may include pants, hats, and scarves.”\n    \n  \n  A bulleted list\n  A long quotation\n  An introductory, independent clause ... *Correct example:* \"Here's an idea: Add a clause to a sentence.\"\n\n\nUse between a title and a description or subtitle … Correct example: “Magento Live: Take Your Business to the Next Level”\n\nCapitalization after a colon. When a complete sentence follows a colon, capitalize the first word of the following sentence. When a series or partial sentence follows a colon, do not capitalize.\n\nCorrect examples:\n\n\n  Complete sentence – \"The company makes the following promise: This solution will improve your bottom line.”\n  Series – “There are three considerations: expense, time, and feasibility.”\n\n\nEllipsis\n\n(…) Use with one space before and one space after. … Example: “The user will … complete a sentence.”\n\nUse in:\n\n\n  \n    Headers or sentences to introduce a bulleted list, when the preceding text and items complete a sentence.\n  \n  \n    Data labels to introduce a data field that completes a sentence.\n  \n  \n    Field labels to introduce a variable entry field that can be customized.\n  \n\n\nEm Dashes\n\n(—) Use an em dash with a space on either side, as a longer breather between ideas. Do not use for ranges of numbers.\n\nCorrect example: The em dash — as noted in the stylebook — should have spaces before and after its placement.\n\nHyphens\n\n(-) Use for:\n\n\n  \n    Compound modifiers, but not common prefixes. … Correct examples: high-value item, hard-to-find item\n  \n  \n    Multiple modifiers. … Correct example: “high- and low-value items”\n  \n  \n    Exceptions include:\n\n    \n      \n        Adverbs … Incorrect example: “highly-valued item”\n      \n      \n        When not paired with a noun … Incorrect example: “The item is high-value.”\n      \n    \n  \n  \n    Do not use as a dash. See em dashes in previous entry.\n  \n\n\nFootnotes\n\n(reference1) Should use a number – not an asterisk or other symbols – here1 and here2, and the legal content that it references should be placed in the footer.\n\nMoney\n\nFor details, see the Money section in Number Formats.\n\nPercentages\n\n(%) Spell out “percent” unless space is constrained, as in a form or a data table. … Correct example: 23 percent\n\nParenthesis\n\nAvoid using. Instead, use commas to set off parenthetical expressions or content.\n\nExample:\n\n\n  No – Magento publishes User Guides (used primarily by Merchants).\n  Yes – Magento publishes User Guides, used primarily by Merchants.\n\n\nFor acronyms that aren’t referenced on first use, append them at the end of the term. … Correct example: World Wide Web Consortium (W3C)\n\nQuestion Marks\n\n(?) Generally avoid questions in content – use declarations.\n\nQuotation Marks\n\n(“) Always use double quotation marks when someone is speaking. Avoid “that” before quotes.\n\nExample:\n\n\n  No – Mark Lavelle said that “the winners of the 2015 Imagine Excellence Awards embody the relentless commitment of our clients.”\n  Yes – “The winners of the 2016 Imagine Excellence Awards embody the relentless commitment of our clients and partners,” said Mark Lavelle.\n\n\nSlashes\n\n( / ) Use only when space is constrained – in a form or a data table. Otherwise, spell out “and” or “or”, instead.\n",
      "url": "/guides/v2.0/design-styleguide/punctuation/punctuation.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-quarterly-contributors-html": {
      "title": "Quarterly Contributors",
      "content": "Thanks to the following community members, partners, and Magento fans who helped provide content to the DevDocs site this quarter.\n\nWe appreciate all the typo fixes, code corrections, comments in issues, and clarifications that our contributors provide.\n\n\n–&gt;\n\n\n\nThe following table lists the community members who created pull requests and issues for this quarter.\n\n\n  \n    \n      PR contributors\n      Issue contributors\n    \n  \n  \n    \n      likemusic\n      Prutha29\n    \n    \n      chickenland\n      embed0\n    \n    \n      chris-pook\n      camdixon\n    \n    \n      ihor-sviziev\n      vovsky\n    \n    \n      rhoerr\n      lazyguru\n    \n    \n      hostep\n      roman204\n    \n    \n      avoelkl\n      osrecio\n    \n    \n      rogyar\n      fdrechsler\n    \n    \n      osrecio\n      adamrandazzo\n    \n    \n      erikhansen\n      McFizh\n    \n    \n      DavidLambuer\n      erichagz\n    \n    \n      JosephMaxwell\n      rossmc\n    \n    \n      nshiff\n      36serg6\n    \n    \n      rafaelstz\n      kunal1234gh\n    \n    \n      asrar7787\n      iunia27\n    \n    \n       \n      zaibi099\n    \n    \n       \n      tiwarimukesh\n    \n    \n       \n      SunshineTech\n    \n    \n       \n      documarezc\n    \n    \n       \n      mpingu\n    \n    \n       \n      hostep\n    \n    \n       \n      aryaashwani\n    \n    \n       \n      danistor\n    \n    \n       \n      timri\n    \n    \n       \n      ZariMatan\n    \n    \n       \n      koenner01\n    \n    \n       \n      likemusic\n    \n    \n       \n      bgronek\n    \n    \n       \n      korostii\n    \n    \n       \n      hjsprite\n    \n    \n       \n      vmistrybas\n    \n    \n       \n      KarlComSe\n    \n    \n       \n      csned\n    \n    \n       \n      terolahtinen\n    \n    \n       \n      mehdiagharlou\n    \n    \n       \n      allamsettiramesh\n    \n    \n       \n      valugi\n    \n    \n       \n      DavidLambuer\n    \n    \n       \n      kevingimbel\n    \n    \n       \n      drdreamm\n    \n    \n       \n      milansimek\n    \n    \n       \n      yogeshsyscraft\n    \n    \n       \n      WaPoNe\n    \n    \n       \n      Igloczek\n    \n    \n       \n      lalittmohan\n    \n    \n       \n      arthurlataks\n    \n    \n       \n      bmxmale\n    \n    \n       \n      maderlock\n    \n  \n\n\nFollow the easy instructions on how to contribute to DevDocs to join these contributors!\n\nAlways feel free to email us with any questions.\n\n",
      "url": "/guides/v2.0/contributor-guide/quarterly-contributors.html"
    }
    ,
  
    "guides-v2-0-config-guide-mq-rabbitmq-overview-html": {
      "title": "Message Queues Overview",
      "content": "The Message Queue Framework (MQF) is a system within Magento Commerce that allows a module to publish messages to queues. It also defines the consumers that will receive the messages asynchronously. The MQF uses RabbitMQ as the messaging broker, which provides a scalable platform for sending and receiving messages. It also includes a mechanism for storing undelivered messages. RabbitMQ is based on the Advanced Message Queuing Protocol (AMQP) 0.9.1 specification.\n\nThe following diagram illustrates the Message Queue Framework.\n\n\n\n\n  \n    A publisher is a component that sends messages to an exchange. It knows which exchange to publish to and the format of the messages it sends.\n  \n  \n    An exchange receives messages from publishers and sends them to queues. Although RabbitMQ supports multiple types of exchanges, Magento uses topic exchanges only. A topic includes a routing key, which contains text strings separated by dots. The format for a topic name is string1.string2…, for example, customer.created or customer.sent.email.\n\n    The broker allows you to use wildcards when setting rules for forwarding messages.  You can use an asterisk (*) to replace one string or a pound sign (#) to replace 0 or more strings. For example, customer.* would filter on customer.create and customer.delete, but not customer.sent.email. However customer.# would filter on customer.create,  customer.delete, andcustomer.sent.email.\n  \n  \n    A queue is a buffer that stores messages.\n  \n  \n    A consumer receives messages. It knows which queue to consume. It can map processors of the message to a specific queue.\n  \n\n\nA basic message queue system can also be set up without using RabbitMQ. In this system, a MySQL adapter stores messages in the database. Three database tables (queue, queue_message, and queue_message_status) manage the message queue workload. Cron jobs ensure the consumers are able to receive messages. This solution is not very scalable. RabbitMQ should be used whenever possible.\n\nSee Configure message queues for information about setting up the message queue system.\n\nRelated Topics\n\n\n  Manage message queues\n  Install RabbitMQ\n\n",
      "url": "/guides/v2.0/config-guide/mq/rabbitmq-overview.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-rc-perms-html": {
      "title": "File permissions readiness check issues",
      "content": "\n\n  File permissions readiness check issues\n  Directories in the Magento file system must be writable by the web server user and the Magento file system owner, if applicable. An error similar to the following displays in the Web Setup Wizard if your permissions are not set properly:\n\n  \n\n  The way you resolve the issue depends on whether you have a one-user or two-user setup:\n\n  \n    One user means you log in to the Magento server as the same user that also runs the web server. This type of setup is common in shared hosting environments.\n    Two users means you typically cannot log in as, or switch to, the web server user. You typically log in as one user and run the web server as a different user. This is typical in private hosting or if you have your own server.\n  \n\n  One-user resolution\n  If you have command-line access, enter the following command assuming Magento is installed in /var/www/html/magento2:\n\n  cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+w {} \\; &amp;&amp; chmod u+x bin/magento\n  \n\n  If you do not have command-line access, use an FTP client or a file manager application provided by your hosting provider to set permissions.\n\n  Two-user resolution\n  \n\n    To optionally enter all commands on one line, enter the following assuming Magento is installed in /var/www/html/magento2 and the web server group name is apache:\n\n    cd /var/www/html/magento2 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; chown -R :apache . &amp;&amp; chmod u+x bin/magento\n    \n\n    In the event file system permissions are set improperly and can’t be changed by the Magento file system owner, you can enter the command as a user with root privileges:\n\n    cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \\; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \\; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento\n    \n\n  \n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/rc_perms.html"
    }
    ,
  
    "guides-v2-0-config-guide-redis-redis-pg-cache-html": {
      "title": "Use Redis for the Magento page and default cache",
      "content": "Prerequisite\nBefore you continue, install Redis.\n\nConfigure Magento to use Redis for default and page caching\nFollowing is a sample configuration that causes Magento to use Redis for both the default cache (default array) and the full page cache (page_cache array). Magento’s caching is implemented by Magento\\Framework\\App\\CacheInterface.\n\nAdd a configuration similar to the following to &lt;your Magento install dir&gt;app/etc/env.php:\n\n'cache' =&gt;\narray(\n   'frontend' =&gt;\n   array(\n      'default' =&gt;\n      array(\n         'backend' =&gt; 'Cm_Cache_Backend_Redis',\n         'backend_options' =&gt;\n         array(\n            'server' =&gt; '127.0.0.1',\n            'database' =&gt; '0',\n            'port' =&gt; '6379'\n            ),\n    ),\n    'page_cache' =&gt;\n    array(\n      'backend' =&gt; 'Cm_Cache_Backend_Redis',\n      'backend_options' =&gt;\n       array(\n         'server' =&gt; '127.0.0.1',\n         'port' =&gt; '6379',\n         'database' =&gt; '1',\n         'compress_data' =&gt; '0'\n       )\n    )\n  )\n),\n\n\nwhere\n\n\n\n\t\n\t\tParameter\n\t\tMeaning\n\t\n\n\tdefault, page_cache\n\tSpecify the segment name to use a particular segment or a default shortcut for all other caches.\n\t\tThe default cache segment enables you to configure all cache segments except for page_cache (the full page cache).\n\n\n\tserver\n\tAbsolute URL to your Redis server, or 127.0.0.1 if Redis is installed on the Magento server, or a an absolute path to a UNIX socket.\n\n\n\tport\n\tRedis server listen port\n\n\n\tdatabase\n\tRequired if you use Redis for both the default and full page cache. You must specify the database number of one of the caches; the other cache uses 0 by default.\n\tImportant: If you use Redis for more than one type of caching (for example, default cache and page cache), the database numbers must be different.\n\n\n\tpassword\n\tSpecifies a password if your Redis server requires authentication.\n\n\n\tcompress_data\n\tRequired only for the full page cache. Set to 1 to compress the full page cache. Redis chooses a compression algorithm in the following order, based on availability: snappy, l4z, or lzf. If none of them available, Redis uses gzip.\n\n\n\n\nBasic verification\n\n\n\n  To verify that Redis and Magento are working together, use the following commands:\n\n  Redis monitor command\n  In a command prompt on the server on which Redis is running, enter:\n\n  redis-cli monitor\n  \n\n  Refresh your storefront page and you’ll see output similar to the following.\n\n  Session storage\n  If you use Redis for session storage, you’ll see output similar to the following:\n\n  1476824834.187250 [0 127.0.0.1:52353] \"select\" \"0\"\n1476824834.187587 [0 127.0.0.1:52353] \"hmget\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"data\" \"writes\"\n1476824834.187939 [0 127.0.0.1:52353] \"expire\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"1200\"\n1476824834.257226 [0 127.0.0.1:52353] \"select\" \"0\"\n1476824834.257239 [0 127.0.0.1:52353] \"hmset\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"data\" \"_session_validator_data|a:4:{s:11:\\\"remote_addr\\\";s:12:\\\"10.235.34.14\\\";s:8:\\\"http_via\\\";s:0:\\\"\\\";s:20:\\\"http_x_forwarded_for\\\";s:0:\\\"\\\";s:15:\\\"http_user_agent\\\";s:115:\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\\\";}_session_hosts|a:1:{s:12:\\\"10.235.32.10\\\";b:1;}admin|a:0:{}default|a:2:{s:9:\\\"_form_key\\\";s:16:\\\"e331ugBN7vRjGMgk\\\";s:12:\\\"visitor_data\\\";a:3:{s:13:\\\"last_visit_at\\\";s:19:\\\"2016-10-18 21:06:37\\\";s:10:\\\"session_id\\\";s:26:\\\"sgmeh2k3t7obl2tsot3h2ss0p1\\\";s:10:\\\"visitor_id\\\";s:1:\\\"9\\\";}}adminhtml|a:0:{}customer_base|a:1:{s:20:\\\"customer_segment_ids\\\";a:1:{i:1;a:0:{}}}checkout|a:0:{}\" \"lock\" \"0\"\n\n... more ...\n  \n\n  Page caching\n  If you use Redis for page caching, you’ll see output similar to the following:\n\n  1476826133.810090 [0 127.0.0.1:52366] \"select\" \"1\"\n1476826133.816293 [0 127.0.0.1:52367] \"select\" \"0\"\n1476826133.817461 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_GLOBAL__DICONFIG\" \"d\"\n1476826133.829666 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_DICONFIG049005964B465901F774DB9751971818\" \"d\"\n1476826133.837854 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_INTERCEPTION\" \"d\"\n1476826133.868374 [0 127.0.0.1:52368] \"select\" \"1\"\n1476826133.869011 [0 127.0.0.1:52369] \"select\" \"0\"\n1476826133.869601 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DEFAULT_CONFIG_CACHE_DEFAULT__10__235__32__1080MAGENTO2\" \"d\"\n1476826133.872317 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_INITIAL_CONFIG\" \"d\"\n1476826133.879267 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_GLOBAL_PRIMARY_PLUGIN_LIST\" \"d\"\n1476826133.883312 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_GLOBAL__EVENT_CONFIG_CACHE\" \"d\"\n1476826133.898431 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DB_PDO_MYSQL_DDL_STAGING_UPDATE_1\" \"d\"\n1476826133.898794 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_RESOLVED_STORES_D1BEFA03C79CA0B84ECC488DEA96BC68\" \"d\"\n1476826133.905738 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DEFAULT_CONFIG_CACHE_STORE_DEFAULT_10__235__32__1080MAGENTO2\" \"d\"\n\n... more ...\n\n1476826210.634998 [0 127.0.0.1:52439] \"hmset\" \"zc:k:ea6_MVIEW_CONFIG\" \"d\" \"a:18:{s:19:\\\"design_config_dummy\\\";a:4:{s:7:\\\"view_id\\\";s:19:\\\"design_config_dummy\\\";s:12:\\\"action_class\\\";s:39:\\\"Magento\\\\Theme\\\\Model\\\\Indexer\\\\Mview\\\\Dummy\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:0:{}}s:14:\\\"customer_dummy\\\";a:4:{s:7:\\\"view_id\\\";s:14:\\\"customer_dummy\\\";s:12:\\\"action_class\\\";s:42:\\\"Magento\\\\Customer\\\\Model\\\\Indexer\\\\Mview\\\\Dummy\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:0:{}}s:13:\\\"cms_page_grid\\\";a:4:{s:7:\\\"view_id\\\";s:13:\\\"cms_page_grid\\\";s:12:\\\"action_class\\\";s:43:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Flat\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:1:{s:8:\\\"cms_page\\\";a:3:{s:4:\\\"name\\\";s:8:\\\"cms_page\\\";s:6:\\\"column\\\";s:7:\\\"page_id\\\";s:18:\\\"subscription_model\\\";N;}}}s:21:\\\"catalog_category_flat\\\";a:4:{s:7:\\\"view_id\\\";s:21:\\\"catalog_category_flat\\\";s:12:\\\"action_class\\\";s:43:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Flat\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:6:{s:23:\\\"catalog_category_entity\\\";a:3:{s:4:\\\"name\\\";s:23:\\\"catalog_category_entity\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";N;}s:31:\\\"catalog_category_entity_decimal\\\";a:3:{s:4:\\\"name\\\";s:31:\\\"catalog_category_entity_decimal\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:27:\\\"catalog_category_entity_int\\\";a:3:{s:4:\\\"name\\\";s:27:\\\"catalog_category_entity_int\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:28:\\\"catalog_category_entity_text\\\";a:3:{s:4:\\\"name\\\";s:28:\\\"catalog_category_entity_text\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:31:\\\"catalog_category_entity_varchar\\\";a:3:{s:4:\\\"name\\\";s:31:\\\"catalog_category_entity_varchar\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:32:\\\"catalog_category_entity_datetime\\\";a:3:{s:4:\\\"name\\\";s:32:\\\"catalog_category_entity_datetime\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}}}s:24:\\\"catalog_category_product\\\";a:4:{s:7:\\\"view_id\\\";s:24:\\\"catalog_category_product\\\";s:12:\\\"action_class\\\";s:46:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Product\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:2:{s:23:\\\"catalog_category_entity\\\";a:3:{s:4:\\\"name\\\";s:23:\\\"catalog_category_entity\\\";s:6:\\\"column\\\"\n\n... more ...\n  \n\n  Redis ping command\n  Enter the following command:\n\n  redis-cli ping\n  \n\n  PONG should be the response.\n\n  If both commands succeeded, Redis is set up properly.\n\n  More information\n  redis-cli command reference\n\n  Related topics\n\n  \n    Use Redis for session storage\n    Create or extend configuration types\n    Magento’s deployment configuration\n  \n\n",
      "url": "/guides/v2.0/config-guide/redis/redis-pg-cache.html"
    }
    ,
  
    "guides-v2-0-config-guide-redis-redis-session-html": {
      "title": "Use Redis for session storage",
      "content": "Prerequisite\nBefore you continue, install Redis.\n\n\n\n  You can use Redis for session storage in Magento versions 2.0.6 and later only.\n\n\nConfigure Magento to use Redis for session storage\nFollowing is a sample configuration to add to &lt;your Magento install dir&gt;app/etc/env.php:\n\n'session' =&gt;\narray (\n  'save' =&gt; 'redis',\n  'redis' =&gt;\n  array (\n    'host' =&gt; '127.0.0.1',\n    'port' =&gt; '6379',\n    'password' =&gt; '',\n    'timeout' =&gt; '2.5',\n    'persistent_identifier' =&gt; '',\n    'database' =&gt; '2',\n    'compression_threshold' =&gt; '2048',\n    'compression_library' =&gt; 'gzip',\n    'log_level' =&gt; '1',\n    'max_concurrency' =&gt; '6',\n    'break_after_frontend' =&gt; '5',\n    'break_after_adminhtml' =&gt; '30',\n    'first_lifetime' =&gt; '600',\n    'bot_first_lifetime' =&gt; '60',\n    'bot_lifetime' =&gt; '7200',\n    'disable_locking' =&gt; '0',\n    'min_lifetime' =&gt; '60',\n    'max_lifetime' =&gt; '2592000'\n  )\n),\n\n\nwhere\n\n\n\n\t\n\t\tParameter\n\t\tMeaning\n\t\tDefault value\n\t\n\n\thost\n\tFully qualified host name, IP address, or absolute path if using UNIX sockets.\n\t127.0.0.1\n\n\n\tport\n\tRedis server listen port.\n\t6379\n\n\n\tpassword\n\tSpecifies a password if your Redis server requires authentication.\n\tempty\n\n\n\ttimeout\n\tConnection timeout, in seconds.\n\t2.5\n\n\n\tpersistent_identifier\n\tUnique string to enable persistent connections (for example, sess-db0).\n\t\tKnown issues with phpredis and php-fpm.\n\tempty\n\n\n\tdatabase\n\tUnique Redis database number, which is recommended to protect against data loss.\n\t\tImportant: If you use Redis for more than one type of caching (for example, page cache and session cache), the database numbers must be different.\n\t0\n\n\n\tcompression_threshold\n\tSet to 0 to disable compression (recommended when suhosin.session.encrypt = On).\n\tKnown issue with strings of more than 64KB.\n\t\t2048\n\n\n\tcompression_library\n\tOptions: gzip, lzf, lz4 or snappy.\n\tgzip\n\n\n\tlog_level\n\tSet to any of the following, listed in order from least verbose to most verbose:\n\t\t0 (emergency: only the most severe errors)\n\t\t\t1 (alert: immediate action required)\n\t\t\t2 (critical: application component unavailable)\n\t\t\t3 (error: runtime errors, not critical but must be monitored)\n\t\t\t4 (warning: additional information, recommended)\n\t\t\t5 (notice: normal but significant condition)\n\t\t\t6 (info: informational messages)\n\t\t\t7 (debug: the most information for development or testing only)\n\t1\n\n\n\tmax_concurrency\n\tMaximum number of processes that can wait for a lock on one session. For large production clusters, set this  to at least 10% of the number of PHP processes.\n\t6\n\n\n\tbreak_after_frontend\n\tNumber of seconds to wait before trying to break the lock for frontend (that is, storefront) session.\n\t5\n\n\n\tbreak_after_adminhtml\n\tNumber of seconds to wait before trying to break the lock for an adminhtml (that is, Magento Admin) session.\n\t30\n\n\n\tfirst_lifetime\n\tLifetime, in seconds, of session for non-bots on the first write, or use 0 to disable.\n\t600\n\n\n\tbot_first_lifetime\n\tLifetime, in seconds, of session for bots on the first write, or use 0 to disable.\n\t60\n\n\n\tbot_lifetime\n\tLifetime, in seconds, of session for bots on subsequent writes, or use 0 to disable.\n\t7200\n\n\n\tdisable_locking\n\tDisable session locking entirely.\n\tfalse\n\n\n\tmin_lifetime\n\tMinimum session lifetime, in seconds.\n\t60\n\n\n\tmax_lifetime\n\tMaximum session lifetime, in seconds.\n\t2592000 (720 hours)\n\n\n\n\nBasic verification\n\n\n\n  To verify that Redis and Magento are working together, use the following commands:\n\n  Redis monitor command\n  In a command prompt on the server on which Redis is running, enter:\n\n  redis-cli monitor\n  \n\n  Refresh your storefront page and you’ll see output similar to the following.\n\n  Session storage\n  If you use Redis for session storage, you’ll see output similar to the following:\n\n  1476824834.187250 [0 127.0.0.1:52353] \"select\" \"0\"\n1476824834.187587 [0 127.0.0.1:52353] \"hmget\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"data\" \"writes\"\n1476824834.187939 [0 127.0.0.1:52353] \"expire\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"1200\"\n1476824834.257226 [0 127.0.0.1:52353] \"select\" \"0\"\n1476824834.257239 [0 127.0.0.1:52353] \"hmset\" \"sess_sgmeh2k3t7obl2tsot3h2ss0p1\" \"data\" \"_session_validator_data|a:4:{s:11:\\\"remote_addr\\\";s:12:\\\"10.235.34.14\\\";s:8:\\\"http_via\\\";s:0:\\\"\\\";s:20:\\\"http_x_forwarded_for\\\";s:0:\\\"\\\";s:15:\\\"http_user_agent\\\";s:115:\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\\\";}_session_hosts|a:1:{s:12:\\\"10.235.32.10\\\";b:1;}admin|a:0:{}default|a:2:{s:9:\\\"_form_key\\\";s:16:\\\"e331ugBN7vRjGMgk\\\";s:12:\\\"visitor_data\\\";a:3:{s:13:\\\"last_visit_at\\\";s:19:\\\"2016-10-18 21:06:37\\\";s:10:\\\"session_id\\\";s:26:\\\"sgmeh2k3t7obl2tsot3h2ss0p1\\\";s:10:\\\"visitor_id\\\";s:1:\\\"9\\\";}}adminhtml|a:0:{}customer_base|a:1:{s:20:\\\"customer_segment_ids\\\";a:1:{i:1;a:0:{}}}checkout|a:0:{}\" \"lock\" \"0\"\n\n... more ...\n  \n\n  Page caching\n  If you use Redis for page caching, you’ll see output similar to the following:\n\n  1476826133.810090 [0 127.0.0.1:52366] \"select\" \"1\"\n1476826133.816293 [0 127.0.0.1:52367] \"select\" \"0\"\n1476826133.817461 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_GLOBAL__DICONFIG\" \"d\"\n1476826133.829666 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_DICONFIG049005964B465901F774DB9751971818\" \"d\"\n1476826133.837854 [0 127.0.0.1:52367] \"hget\" \"zc:k:ea6_INTERCEPTION\" \"d\"\n1476826133.868374 [0 127.0.0.1:52368] \"select\" \"1\"\n1476826133.869011 [0 127.0.0.1:52369] \"select\" \"0\"\n1476826133.869601 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DEFAULT_CONFIG_CACHE_DEFAULT__10__235__32__1080MAGENTO2\" \"d\"\n1476826133.872317 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_INITIAL_CONFIG\" \"d\"\n1476826133.879267 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_GLOBAL_PRIMARY_PLUGIN_LIST\" \"d\"\n1476826133.883312 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_GLOBAL__EVENT_CONFIG_CACHE\" \"d\"\n1476826133.898431 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DB_PDO_MYSQL_DDL_STAGING_UPDATE_1\" \"d\"\n1476826133.898794 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_RESOLVED_STORES_D1BEFA03C79CA0B84ECC488DEA96BC68\" \"d\"\n1476826133.905738 [0 127.0.0.1:52369] \"hget\" \"zc:k:ea6_DEFAULT_CONFIG_CACHE_STORE_DEFAULT_10__235__32__1080MAGENTO2\" \"d\"\n\n... more ...\n\n1476826210.634998 [0 127.0.0.1:52439] \"hmset\" \"zc:k:ea6_MVIEW_CONFIG\" \"d\" \"a:18:{s:19:\\\"design_config_dummy\\\";a:4:{s:7:\\\"view_id\\\";s:19:\\\"design_config_dummy\\\";s:12:\\\"action_class\\\";s:39:\\\"Magento\\\\Theme\\\\Model\\\\Indexer\\\\Mview\\\\Dummy\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:0:{}}s:14:\\\"customer_dummy\\\";a:4:{s:7:\\\"view_id\\\";s:14:\\\"customer_dummy\\\";s:12:\\\"action_class\\\";s:42:\\\"Magento\\\\Customer\\\\Model\\\\Indexer\\\\Mview\\\\Dummy\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:0:{}}s:13:\\\"cms_page_grid\\\";a:4:{s:7:\\\"view_id\\\";s:13:\\\"cms_page_grid\\\";s:12:\\\"action_class\\\";s:43:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Flat\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:1:{s:8:\\\"cms_page\\\";a:3:{s:4:\\\"name\\\";s:8:\\\"cms_page\\\";s:6:\\\"column\\\";s:7:\\\"page_id\\\";s:18:\\\"subscription_model\\\";N;}}}s:21:\\\"catalog_category_flat\\\";a:4:{s:7:\\\"view_id\\\";s:21:\\\"catalog_category_flat\\\";s:12:\\\"action_class\\\";s:43:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Flat\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:6:{s:23:\\\"catalog_category_entity\\\";a:3:{s:4:\\\"name\\\";s:23:\\\"catalog_category_entity\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";N;}s:31:\\\"catalog_category_entity_decimal\\\";a:3:{s:4:\\\"name\\\";s:31:\\\"catalog_category_entity_decimal\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:27:\\\"catalog_category_entity_int\\\";a:3:{s:4:\\\"name\\\";s:27:\\\"catalog_category_entity_int\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:28:\\\"catalog_category_entity_text\\\";a:3:{s:4:\\\"name\\\";s:28:\\\"catalog_category_entity_text\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:31:\\\"catalog_category_entity_varchar\\\";a:3:{s:4:\\\"name\\\";s:31:\\\"catalog_category_entity_varchar\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}s:32:\\\"catalog_category_entity_datetime\\\";a:3:{s:4:\\\"name\\\";s:32:\\\"catalog_category_entity_datetime\\\";s:6:\\\"column\\\";s:9:\\\"entity_id\\\";s:18:\\\"subscription_model\\\";s:71:\\\"Magento\\\\CatalogStaging\\\\Model\\\\Mview\\\\View\\\\Category\\\\Attribute\\\\Subscription\\\";}}}s:24:\\\"catalog_category_product\\\";a:4:{s:7:\\\"view_id\\\";s:24:\\\"catalog_category_product\\\";s:12:\\\"action_class\\\";s:46:\\\"Magento\\\\Catalog\\\\Model\\\\Indexer\\\\Category\\\\Product\\\";s:5:\\\"group\\\";s:7:\\\"indexer\\\";s:13:\\\"subscriptions\\\";a:2:{s:23:\\\"catalog_category_entity\\\";a:3:{s:4:\\\"name\\\";s:23:\\\"catalog_category_entity\\\";s:6:\\\"column\\\"\n\n... more ...\n  \n\n  Redis ping command\n  Enter the following command:\n\n  redis-cli ping\n  \n\n  PONG should be the response.\n\n  If both commands succeeded, Redis is set up properly.\n\n  More information\n  redis-cli command reference\n\n  Related topics\n\n  \n    Create or extend configuration types\n    Magento’s deployment configuration\n  \n\n",
      "url": "/guides/v2.0/config-guide/redis/redis-session.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-redis-troubleshooting-html": {
      "title": "Redis troubleshooting",
      "content": "Redis is an optional backend cache solution for Magento Commerce (Cloud). This information helps you troubleshoot errors and issues you encounter with Redis. These issues and resolutions affect Starter and Pro plans.\n\nRedis error on deploy\nYou may receive the following error when deploying your Git branch:\n\nRedis::pipeline(): Already in pipeline mode in /var/www/html/magento2ce/vendor/colinmollenhour/credis/Client.php on line 1037\n\n\nYour Cloud systems and services have been updated to the latest Redis and PHP-Redis 3.1.3. Due to the upgrade, we have provided a patch to upgrade your PHP-Redis code to 3.1.3. You just need to patch and test this general patch according to your Magento Commerce (Cloud) version.\n\n\n  Use an Integration branch to add the code through your local.\n  Patch using the CLI command composer update in a terminal.\n  Push your code to deploy and test in an Intergration environment.\n  After testing completes, deploy your code to Staging and Production environments. For more information on deployments, see Deploy your store.\n\n\n\n  We strongly recommend patching to update your PHP-Redis version. Your build and deploy will continue to encounter issues until updated to PHP-Redis 3.1.3.\n\n\nSee the following instructions based on your Magento Commerce (Cloud) version:\n\n\n  2.0.x: Apply the patch and test the deployment in your Integration environment.\n  2.1.0 – 2.1.3: Apply the patch and test the deployment in your Integration environment.\n  \n    2.1.4 and later merchants: Upgrade MCC to the latest version in your branch and deploy to your Integration environment. The MCC upgrade includes this patch. To upgrade a default unchanged MCC, you only need to run composer update in a terminal.\n\n    If you hardcoded or modified your MCC, run composer update in a terminal. After the composer update complees, verify following magento/magento-cloud-configuration version displays in composer.lock:\n\n    \n      2.1.4: magento/magento-cloud-configuration 101.4.5 or later\n      2.1.5: magento/magento-cloud-configuration 101.5.4 or later\n      2.1.6: magento/magento-cloud-configuration 101.6.6 or later\n      2.1.7: magento/magento-cloud-configuration 101.7.6 or later\n      2.1.8: magento/magento-cloud-configuration 101.8.1 or later\n    \n  \n  2.2: This PHP-Redis upgrade is already included. v2.2 is coming soon for Magento Commerce (Cloud).\n\n\nFor details on MCC and the update command, see Composer.\n\nRedis and static-content deployment\nThis information helps if you receive a number of Redis connection errors in your production logs during static content deployment.\n\nError: RedisException: read error on connection\n\n\nTo resolve, we recommend enabling and using Configuration Management options to move your static content deployment from the Deploy to Build phase.\n\n\n  Remove all static content first from pub/static/frontend/* and also from var/view_preprocessed.\n  Enable and use the recommended scd-dump command for Configuration Management (Pipeline Deployment). Remember, you will need to add and push the file generated to Git: config.local.php for 2.1.X or config.php for 2.2.X.\n\n\nIf you continue to encounter these issues after using this method of deployment, you can attempt the following work-around. However, this method will dramatically increase the static content deployment time as it reduces deployment to a single thread.\n\n\n  Remove all static content first from pub/static/frontend/* and also from var/view_preprocessed.\n  SSH to the server after deployment completes.\n  Run the following command to reduce deployment threads: php bin/magento setup:static-content:deploy -j 1\n\n\nYou can also set an environment variable for single thread deployment by default: STATIC_CONTENT_THREADS = 1.\n\nRelated topics\n\n  Set up the Redis service\n  Patch and test Magento Commerce (Cloud)\n  Composer\n\n",
      "url": "/guides/v2.0/cloud/trouble/redis-troubleshooting.html"
    }
    ,
  
    "guides-v2-0-release-notes-release-notes-html": {
      "title": "Magento 2.0 Release Notes",
      "content": "Magento Open Source (formerly CE), Commerce (formerly EE), and Commerce Cloud (formally ECE) Release Notes\n\n\n\n  Magento Open Source 2.0 Release Notes \n  Version 2.0.18\n  Version 2.0.17\n  Version 2.0.16\n  Version 2.0.15\n  Version 2.0.14\n  Version 2.0.13\n  Version 2.0.12\n  Version 2.0.11\n  Version 2.0.10\n  Version 2.0.9\n  Version 2.0.8\n  Version 2.0.7\n  Version 2.0.6\n  Version 2.0.5\n  Version 2.0.4\n  Version 2.0.3\n  Version 2.0.2\n  Version 2.0.1\n  Version 2.0.0\n\n\n\n  Magento Commerce 2.0 Release Notes \n  Version 2.0.18\n  Version 2.0.17\n  Version 2.0.16\n  Version 2.0.15\n  Version 2.0.14\n  Version 2.0.13\n  Version 2.0.12\n  Version 2.0.11\n  Version 2.0.10\n  Version 2.0.9\n  Version 2.0.8\n  Version 2.0.7\n  Version 2.0.6\n  Version 2.0.5\n  Version 2.0.4\n  Version 2.0.3\n  Version 2.0.2\n  Version 2.0.1\n  Version 2.0.0\n\n\n\n  Magento Commerce (Cloud) 2.0 Release Notes \n  Magento Commerce (Cloud) version 2.1.5 and 2.0.13 Release Notes\n  magento-cloud-configuration release 101.4.x Release Notes\n  Magento Commerce (Cloud) version 2.1.4 and 2.0.12\n  Magento Commerce (Cloud) version 2.1.3 and 2.0.11\n  Magento Commerce (Cloud) version 2.1.2 and 2.0.10\n\n\n\n  Magento Open Source (formerly CE) and Commerce (formerly EE) Release Notes\n\n  \n\n    Magento Open Source 2.1 Release Candidate Notes \n  Open Source 2.1 Release Candidate 3 (RC3)\n  Open Source 2.1 RC2)\n  Open Source 2.1 RC1\n\n\n\n    Magento Commerce 2.1 Release Candidate Notes \n  Commerce 2.1 RC3\n  Commerce 2.1 RC2\n  Commerce 2.1 RC1\n\n\n  \n\n",
      "url": "/guides/v2.0/release-notes/release-notes.html"
    }
    ,
  
    "guides-v2-0-mtf-features-reporting-html": {
      "title": "Reporting with the Functional Testing Framework",
      "content": "The Functional Testing Framework (FTF) provides a reporting tool, which logs failures or any other information for you during test run.\n\nThe following image demonstrates example of a general flow.\n\n\n\nThe event manager is a core component which:\n\n\n  dispatches events\n  gets a list of observers\n  notifies observers depending on read configuration and preset\n\n\nEvent manager\n\nThe event manager is defined in the \\Magento\\Mtf\\System\\Event\\EventManager class that:\n\n\n  is an entry point to the event management system\n  fetches configuration and observers\n  handles events and passes them to observers\n  notifies selected observers according to an event tags array and configuration\n\n\nphpunit.xml configuration\n\nIn &lt;magento_2_root_dir&gt;/dev/tests/functional/phpunit.xml, you can set a preset to use and a directory to store reports.\n\nSet a preset\n\nSet a preset, which is a list of dispatched events and an observers to handle them:\n\n&lt;php&gt;\n    &lt;env name=\"events_preset\" value=\"&lt;preset_name&gt;\" /&gt;\n&lt;/php&gt;\n\nReplace &lt;preset_name&gt; with a name of preset that you want to use.\n\nSet a reporting directory\n\nSet the value of &lt;env name=\"log_directory\"&gt; to the directory in which to store your reports.\n\n&lt;php&gt;\n    &lt;env name=\"log_directory\" value=\"&lt;your_directory_path&gt;\" /&gt;\n&lt;/php&gt;\n\nThe default path is &lt;magento_2_root_dir&gt;/dev/tests/functional/var/log.\n\nevents.xml configuration\n\nAn event preset specifies observers and dispatched events handled by them. &lt;magento_2_root_dir&gt;/dev/tests/functional/etc/events.xml contains a list of event presets.\n\nFormat of a preset:\n\n&lt;preset name=\"...\"&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\...\"&gt;\n        &lt;tag name=\"...\" /&gt;\n        &lt;tag name=\"...\" /&gt;\n    &lt;/observer&gt;\n    &lt;observer class=\"other\\observer\\class\\path\\...\"&gt;\n        &lt;tag name=\"...\" /&gt;\n    &lt;/observer&gt;\n&lt;/preset&gt;\n\nExample:\n\n&lt;preset name=\"custom\"&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\SourceCode\"&gt;\n        &lt;tag name=\"exception\" /&gt;\n        &lt;tag name=\"failure\" /&gt;\n    &lt;/observer&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\Screenshot\"&gt;\n        &lt;tag name=\"exception\" /&gt;\n        &lt;tag name=\"failure\" /&gt;\n    &lt;/observer&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\CurlResponse\"&gt;\n        &lt;tag name=\"curl_failed\" /&gt;\n    &lt;/observer&gt;\n&lt;/preset&gt;\n\nExplanation of the example:\n\nEach time the \"exception\" and \"failure\" events are dispatched, HTML code and screen capture of the current web page are logged (see Observers section for details). If the \"curl_failed\" event is dispatched, a corresponding cURL response is saved in an HTML file in the magento/&lt;module&gt;/&lt;test_case&gt;/&lt;variation&gt;/curl-response directory inside the report directory.\n\nInitially, event presets are defined in the FTF in &lt;magento_2_root_dir&gt;/dev/tests/functional/vendor/magento/mtf/etc/events.xml (open the events.xml on GitHub repository). It is not recommended to edit this file. You can extend the initial list or add new presets in &lt;magento_2_root_dir&gt;/dev/tests/functional/etc/events.xml. All changes are merged automatically.\n\nObservers\n\nAn observer is a PHP class which defines actions under Magento instance, browser, test run, and so on.\n\nThe list of ready-to-use observers is the following:\n\n\n  \n    \n      Observer full class name\n      Description\n    \n  \n  \n    \n      \\Magento\\Mtf\\System\\Observer\\ClientError\n      Collects information about JavaScript errors on a web page under test. Uses an instance of the BrowserInterface to collect exceptions from a web page. Saves collected errors to &lt;reporting_directory&gt;/magento/client-error.log.\n    \n    \n      \\Magento\\Mtf\\System\\Observer\\CurlResponse\n      Saves response into HTML file in &lt;reporting_directory&gt;/magento/&lt;module&gt;/&lt;test_case&gt;/&lt;variation&gt;/curl-response directory.\n    \n    \n      \\Magento\\Mtf\\System\\Observer\\Log\n      Saves event message to the &lt;reporting_directory&gt;/magento/logger.log.\n    \n    \n      \\Magento\\Mtf\\System\\Observer\\PageUrl\n      Sets a page URL parameter to the instance of the EventState class.\n    \n    \n      \\Magento\\Mtf\\System\\Observer\\Screenshot\n      Captures a screenshot of a web page. Saves a PNG image to the &lt;reporting_directory&gt;/magento/&lt;module&gt;/&lt;test_case&gt;/&lt;variation&gt;/screenshots directory.\n    \n    \n      \\Magento\\Mtf\\System\\Observer\\SourceCode\n      Collects HTML code of a web page. Saves HTML code to the &lt;reporting_directory&gt;/magento/&lt;module&gt;/&lt;test_case&gt;/&lt;variation&gt;/page-source.\n    \n  \n\n\nTags\n\nA tag contains name of an event. When you want to process any event by a particular observer, you need to:\n\n\n  Dispatch the event.\n  Add a tag with name of the event to required observer in corresponding event preset.\n\n\nIn terms of XML, it is represented as an element &lt;tag /&gt; in events.xml. &lt;tag /&gt; is a child element of an &lt;observer&gt; element. See the following example:\n\n&lt;observer class=\"Magento\\Mtf\\System\\Observer\\ClientError\"&gt;\n    &lt;tag name=\"page_changed\" /&gt;\n    &lt;tag name=\"exception\" /&gt;\n&lt;/observer&gt;\n&lt;observer class=\"Magento\\Mtf\\System\\Observer\\Log\"&gt;\n    &lt;tag name=\"exception\" /&gt;\n    &lt;tag name=\"failure\" /&gt;\n&lt;/observer&gt;\n&lt;observer class=\"Magento\\Mtf\\System\\Observer\\SourceCode\"&gt;\n    &lt;tag name=\"exception\" /&gt;\n    &lt;tag name=\"failure\" /&gt;\n&lt;/observer&gt;\n&lt;observer class=\"Magento\\Mtf\\System\\Observer\\Screenshot\"&gt;\n    &lt;tag name=\"exception\" /&gt;\n    &lt;tag name=\"failure\" /&gt;\n&lt;/observer&gt;\n&lt;observer class=\"Magento\\Mtf\\System\\Observer\\CurlResponse\"&gt;\n    &lt;tag name=\"curl_failed\" /&gt;\n&lt;/observer&gt;\n\nAs you can see, a tag contains one required attribute name, where a name of event must be assigned.\n\nEvent dispatching\n\nA method that is used to dispatch events is defined in \\Magento\\Mtf\\System\\Event\\EventManagerInterface. The FTF uses its default implementation \\Magento\\Mtf\\System\\Event\\EventManager::dispatchEvent().\n\n$this-&gt;eventManager-&gt;dispatchEvent(['your_event_tag'], [$your_input_parameters]);\n\n\nIt has two arguments:\n\n\n  Array of event tags. Event tags specify the name of event that is dispatched. It is used as a tag in event preset.\n  Input parameters. The parameters used by observers as input parameters. For example, a cURL response.\n\n\nExample of use:\n\n&lt;?php\n\nif (!strpos($response, 'data-ui-id=\"messages-message-success\"')) {\n    $this-&gt;_eventManager-&gt;dispatchEvent(['curl_failed'], [$response]);\n    throw new \\Exception('Product creation by curl handler was not successful!');\n}\n\nExamples\n\nThe following examples explain how to use the reporting tool on practice.\n\n\n  Create a preset\n  Edit a preset\n  Create and apply a custom observer\n\n\nCreate a preset\n\nThe following example shows how to add a custom preset.\n\nTask: Create a preset that logs only a web page HTML code and its screenshot when a test run is failed.\n\nReports:\n\n\n  HTML code\n  screenshots\n\n\nWhat is needed:\n\n\n  observers:\n    \n      \\Magento\\Mtf\\System\\Observer\\SourceCode\n      \\Magento\\Mtf\\System\\Observer\\Screenshot\n    \n  \n  events:\n    \n      failure\n    \n  \n\n\nSolution:\n\nStep 1. Dispatch the failure event in the test case. This event already exists and is added to the code where the FTF processes the test failure.\n\nStep 2. Open &lt;magento_2_root_dir&gt;/dev/tests/functional/etc/events.xml.\n\nStep 3. Add a preset with required observers and tags.\n\n&lt;preset name=\"custom\"&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\SourceCode\"&gt;\n        &lt;tag name=\"failure\" /&gt;\n    &lt;/observer&gt;\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\Screenshot\"&gt;\n        &lt;tag name=\"failure\" /&gt;\n    &lt;/observer&gt;\n&lt;/preset&gt;\n\nEdit a preset\n\nThe following example shows how to edit the base preset.\n\nTask: Take a screenshot before click, after click, and when a value is set.\n\nReports:\n\n\n  screenshots\n\n\nWhat is needed:\n\n\n  preset:\n    \n      base\n    \n  \n  observers:\n    \n      \\Magento\\Mtf\\System\\Observer\\Screenshot\n    \n  \n  events:\n    \n      click_before\n      click_after\n      set_value\n    \n  \n\n\n\n    The base preset is stored in the FTF &lt;magento2&gt;/dev/tests/functional/vendor/magento/mtf/etc/events.xml. To add or change any setting, edit &lt;magento2&gt;/dev/tests/functional/etc/events.xml, which is merged with the one in the FTF.\n\n\n\nSolution:\n\nStep 1. Dispatch the events click_before, click_after and set_value in your code where applicable.\n\nStep 2. In the base preset, add required observer and event tags.\n\n&lt;preset name=\"base\"&gt;\n    ...\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\Screenshot\"&gt;\n        &lt;tag name=\"click_before\" /&gt;\n        &lt;tag name=\"click_after\" /&gt;\n        &lt;tag name=\"set_value\" /&gt;\n    &lt;/observer&gt;\n    ...\n&lt;/preset&gt;\n\nCreate and apply a custom observer\n\nYou can create your own observer using existing examples.\n\nGeneral implementation rules:\n\n\n  An observer must implement ObserverInterface.\n  Put the class in &lt;magento_2_root_dir&gt;/dev/tests/functional/lib/Magento/Mtf/System/Observer.\n\n\nThe following example shows how to use a custom observer in the example with the \\Magento\\Mtf\\System\\Observer\\WebapiResponse observer.\n\nTask: Create observer that logs WebAPI responses containing exceptions. Use the observer when a fixture is saved.\n\nReports:\n\n\n  Log in JSON\n\n\nWhat is needed:\n\n\n  preset:\n    \n      base\n    \n  \n  observer:\n    \n      \\Magento\\Mtf\\System\\Observer\\WebapiResponse\n    \n  \n  event:\n    \n      webapi_failed\n    \n  \n\n\nSolution:\n\nStep 1. Create an observer class \\Magento\\Mtf\\System\\Observer\\WebapiResponse that stores incoming events in JSON files.\n\n&lt;?php\n/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\Mtf\\System\\Observer;\n\nuse Magento\\Mtf\\System\\Event\\Event;\n\n/**\n * Observer for obtaining response of web api handler.\n */\nclass WebapiResponse extends AbstractObserver\n{\n    /**\n     * File name of response source.\n     */\n    const FILE_NAME = 'webapi_response.log';\n\n    /**\n     * Collect response source artifact to storage.\n     *\n     * @param Event $event\n     * @return void\n     */\n    public function process(Event $event)\n    {\n        $directory = $this-&gt;createDestinationDirectory('webapi-response');\n        $this-&gt;logger-&gt;log(\n            json_encode($event-&gt;getSubjects()[0]),\n            $directory . '/' . $event-&gt;getFileIdentifier() . '.json'\n        );\n    }\n}\n\nStep 2. Dispatch an event webapi_failed in the \\Magento\\Tax\\Test\\Handler\\TaxRule\\WebApi::persist() handler for failed responses.\n\n\npublic function persist(FixtureInterface $fixture = null)\n{\n    // Implementation of the method\n    // ...    \n    if (empty($response['id'])) {\n        $this-&gt;eventManager-&gt;dispatchEvent(['webapi_failed'], [$response]);\n        throw new \\Exception('Tax rule creation by Web API handler was not successful!');     \n     }\n     \n    return ['id' =&gt; $response['id']];\n}\n\n\nStep 3. Add the observer and the tag to the base preset in events.xml.\n\nIn &lt;magento_2_root_dir&gt;/dev/tests/functional/etc/events.xml, add to a preset &lt;preset name=\"base\"&gt; an observer &lt;observer class=\"Magento\\Mtf\\System\\Observer\\WebapiResponse\"&gt; with a tag &lt;tag name=\"webapi_failed\" /&gt;:\n\n&lt;preset name=\"base\"&gt;\n...\n    &lt;observer class=\"Magento\\Mtf\\System\\Observer\\WebapiResponse\"&gt;\n        &lt;tag name=\"webapi_failed\" /&gt;\n    &lt;/observer&gt;\n...\n&lt;preset /&gt;\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/mtf/features/reporting.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-request-builder-html": {
      "title": "Request Builder",
      "content": "Request Builder is a component of the Magento payment gateway responsible for building a request from several parts. It allows implementing complex, yet atomic and testable, building strategies. Each builder can have simple logic or contain builder composites.\n\nBasic interface\nThe basic interface for a request builder is \\Magento\\Payment\\Gateway\\Request\\BuilderInterface.\n\nBuilder composite\n\n\\Magento\\Payment\\Gateway\\Request\\BuilderComposite is a container for a list of \\Magento\\Payment\\Gateway\\Request\\BuilderInterface implementations. It gets a list of classes, or types, or virtual type names, and performs a lazy instantiation on an actual BuilderComposite::build([]) call. So that you can have as many objects, as required, but only those, which are needed for a request are instantiated.\n\nBuilderComposite implements the composite design pattern.\n\nThe concatenation strategy is defined in the BuilderComposite::merge() method. So if you need to alter the strategy, you need to add your custom implementation of BuilderComposite.\n\nAdding a builder composite\n\nBuilder composites are added using dependency injection in di.xml. A builder composite might comprise simple builders as well as other builder composites.\n\nExample of adding composite builders for the Braintree payment provider (app/code/Magento/Braintree/etc/di.xml):\n\n...\n&lt;!--  is a builder composite comprising a number of builders --&gt;\n&lt;virtualType name=\"BraintreeAuthorizeRequest\" type=\"Magento\\Payment\\Gateway\\Request\\BuilderComposite\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"builders\" xsi:type=\"array\"&gt;\n            &lt;item name=\"customer\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\CustomerDataBuilder&lt;/item&gt;\n            &lt;item name=\"payment\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\PaymentDataBuilder&lt;/item&gt;\n            &lt;item name=\"channel\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\ChannelDataBuilder&lt;/item&gt;\n            &lt;item name=\"address\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\AddressDataBuilder&lt;/item&gt;\n            &lt;item name=\"3dsecure\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\ThreeDSecureDataBuilder&lt;/item&gt;\n            &lt;item name=\"device_data\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\KountPaymentDataBuilder&lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n...\n&lt;!-- The same BraintreeAuthorizeRequest builder composite is a part of the BraintreeSaleRequest builder composite --&gt;\n&lt;virtualType name=\"BraintreeSaleRequest\" type=\"Magento\\Payment\\Gateway\\Request\\BuilderComposite\"&gt;\n    &lt;arguments&gt;\n        &lt;argument name=\"builders\" xsi:type=\"array\"&gt;\n            &lt;item name=\"authorize\" xsi:type=\"string\"&gt;BraintreeAuthorizeRequest&lt;/item&gt;\n            &lt;item name=\"settlement\" xsi:type=\"string\"&gt;Magento\\Braintree\\Gateway\\Request\\SettlementDataBuilder&lt;/item&gt;\n        &lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n\n(The code sample is from Magento Open Source v2.1. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1)\n\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/request-builder.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-build-required-configuration-files-html": {
      "title": "Define your configuration files",
      "content": "Each Magento 2 module has its own set of configuration files, gathered into the module’s etc directory.\n\n\n\t\n  \tUnlike Magento 1, there is no monolithic configuration file in Magento 2. \n  \n\n\n\n\n  Root directory location\n  A component’s root directory is the top-level directory for that component under which its folders and files are located. Depending on how your Magento development environment was installed, your component’s root directory can be located in two places:\n\n  \n    \n      &lt;Magento install directory&gt;/app: This is the recommended location for component development. You can easily set up this type of environment by Cloning the Magento 2 GitHub repository.\n\n      \n        For modules, use app/code.\n        For storefront themes, use app/design/frontend.\n        For Admin themes, use app/design/adminhtml.\n        For language packages, use app/i18n.\n      \n    \n    \n      &lt;Magento install directory&gt;/vendor: This location is found in the alternative setups where the composer create-project command was used to get a Magento 2 metapackage (which downloads the CE or EE code), or a compressed Magento 2 archive was extracted in order to install Magento.\n\n      Any third party components (and the Magento application itself) are downloaded and stored under the vendor directory. If you are using Git to manage project, this directory is typically added to the .gitignore file. Therefore, we recommend you do your customization work in app/code, not vendor.\n    \n  \n\n  Required files\n  The following files are required for all components:\n\n  \n    registration.php: Among other things, this file specifies the directory in which the component is installed by vendors in production environments. By default, composer automatically installs components in the &lt;Magento root dir&gt;/vendor directory. For more information, see Component registration.\n    etc/module.xml: This file specifies basic information about the component such as the components dependencies and its version number. This version number is used to determine schema and data updates when bin/magento setup:upgrade is run.\n    composer.json: Specifies component dependencies and other metadata. For more information, see Composer integration.\n  \n\n  Use /etc for your configuration files\n\n  Magento 2 looks for configuration information for each module in that module’s etc directory. Depending on the needs of your module, you might have the following configuration files at the top level of your module’s etc directory:\n\n  \n    acl.xml\n    config.xml\n    di.xml\n    module.xml\n    webapi.xml\n  \n\n  \n\t\n  \t\tAdditions you make to those configuration files are applied globally to your module.\n  \n \n\n  In addition to those files, a Magento 2 module also has nested configuration directories in the etc directory for any required administration html, frontend, API REST, or API SOAP specific configuration. Additions you make to files in these directories override the settings in the global configuration files for the respective functionality only. That is, if you add a config.xml file to etc/frontend, the settings you make in that file overrides the settings in etc/config.xml for storefront functionality only.\n\n  \n    &lt;your module root dir&gt;/etc/adminhtml/\n    &lt;your module root dir&gt;/etc/frontend/\n    &lt;your module root dir&gt;/etc/webapi_rest/\n    &lt;your module root dir&gt;/etc/webapi_soap/\n  \n\n  Configuration files\n  \n    Configuration files that are in the top level of that module’s etc directory are global to that component.\n    Configuration files placed in subdirectories (adminhtml, frontend, webapi_rest, webapi_soap) apply only to those respective functional areas.\n  \n\n  Tailor your configuration files for what your module does\n\n  The exact set of configuration files required for your module depends on what your new module does. The required configuration files depend on how you plan to use the module: will the module be manifested on the storefront UI, or in the Magento Admin panel, or as a backend extension that makes a service call? Or all of the above. For example, if your module performs a function in the Admin, you should add any necessary configuration files for those functions to etc/adminhtml/, like:\n\n  \n    &lt;your module root dir&gt;/etc/adminhtml/di.xml\n    &lt;your module root dir&gt;/etc/adminhtml/routes.xml\n  \n\n  Similarly, if your module changes the UI, you should add the needed configuration files to ~/etc/frontend/. For example:\n\n  \n    &lt;your module root dir&gt;/etc/frontend/di.xml\n    &lt;your module root dir&gt;/etc/frontend/page_types.xml\n  \n\n  If the module is a service that may call an API, or does some other work that is not manifested in the UI you should add any needed configuration files in the REST and/or SOAP webapi configuration directories, like this:\n\n  \n    &lt;your module root dir&gt;/etc/webapi_rest/di.xml\n    &lt;your module root dir&gt;/etc/webapi_soap/di.xml\n  \n\n  Keep in mind that you might be able to handle your module’s configuration solely with configuration files at the top level of your module’s etc directory, but the nested directory is a useful way to keep the configuration neatly compartmentalized.\n\n  Next\n\n  Create your component file structure\n\n",
      "url": "/guides/v2.0/extension-dev-guide/build/required-configuration-files.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-javascript-requirejs-concept-html": {
      "title": "About AMD modules and RequireJS",
      "content": "Overview\n\nThis topic discusses JavaScript modules and describes the role which RequireJS plays in Magento.\n\nMagento uses AMD (asynchronous module definition) approach for JavaScript modules loading. Namely, Magento uses RequireJS and its standard syntax.\n\nRequireJS configuration location\n\nAs Magento has a modular architecture we have an ability to define requirejs-config.js for each module, separately for each area: frontend or admin. (Or base if it is same for both, frontend and admin).\n\nFollowing is the conventional location of requirejs-config.js (RequireJS configuration file):\n\n\n  For modules: &lt;Module_dir&gt;/view/&lt;area&gt;/requirejs-config.js\n  For themes: &lt;theme_dir&gt;/requirejs-config.js\n\n\nRequireJS configuration file\n\nrequirejs-config.js is a valid JavaScript file. It should define the config variable, which is a configuration variable.\n\nExample of usages\n\nLets look at an example, the Catalog module. In the &lt;Magento_Catalog_module_dir&gt;/view/base/requirejs-config.js file we see the configuration variable:\n\nvar config = {\n    map: {\n        '*': {\n            categoryForm:       'Magento_Catalog/catalog/category/form',\n            newCategoryDialog:  'Magento_Catalog/js/new-category-dialog',\n            categoryTree:       'Magento_Catalog/js/category-tree',\n            productGallery:     'Magento_Catalog/js/product-gallery',\n            baseImage:          'Magento_Catalog/catalog/base-image-uploader',\n            productAttributes:  'Magento_Catalog/catalog/product-attributes'\n        }\n    },\n    deps: [\n        'Magento_Catalog/catalog/product'\n    ]\n};\n\nThe config variable contains properties with the map and deps keys. These properties are equivalent to the native RequireJS properties. For example, in this case  the map property contains an object with the keys that are aliases to files and values that are real paths to files.\n\nFor a particular area, all modules and themes requirejs-config.js files are merged into a single file. This file is written to the pub/static/requirejs directory. This occurs during the first launch of Magento in develop or default mode or during static files generation using the bin/magento setup:static-content:deploy console command.\n\nThe merged configuration will be loaded on the page right after require.js and will be used by require() and define() functions.\n\nExample of how aliases can be used. Open a browser console on any Magento page and type:\n\n\trequire(['productGallery']); // load the module on the page\n\tvar gallery1 = require('productGallery');\n    var gallery2 = require('Magento_Catalog/js/product-gallery');\n\tconsole.log(gallery1); // it does not return a simple type\n    console.log(gallery1 === gallery2); // they are the same\n\nTip: One more way that you can use require object is to retrieve a current configuration during runtime. Just type in a browser console:\n\nrequire.s.contexts._.config;\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/javascript/requirejs_concept.html"
    }
    ,
  
    "guides-v2-0-howdoi-troubleshoot-reset-theme-html": {
      "title": "Reset the theme to default",
      "content": "Reset the store theme to default using DB\n\nIf you need to reset the store theme, but cannot access the Admin panel, you can reset it in the database by doing the following:\n\n\n  Use a database tool such as phpMyAdmin or access the DB manually from the command line to execute the following SQL query:\n    UPDATE core_config_data SET value=NULL WHERE path='design/theme/theme_id'\n    \n  \n  Clear the pub/static/frontend, var/view_preprocessing, var/cache, var/page_cache directories.\n\n\nThis way there will be no theme set on the store view level, and when you reload the store front pages, the default Luma theme will be applied.\n\nRelated topics:\n\n\n  Clear directories during development\n\n\n",
      "url": "/guides/v2.0/howdoi/troubleshoot/reset_theme.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-response-handler-html": {
      "title": "Response Handler",
      "content": "Response Handler is the component of Magento payment provider gateway, that processes payment provider response. Typically, the response requires one of the following actions:\n\n\n  Modify the order status\n  Save information that was provided in a transaction response\n  Send an email\n\n\nThe response handler only modifies the order state, based on the payment gateway response. It does not perform any other required actions.\n\nInterface\n\nBasic interface for a response handler is Magento\\Payment\\Gateway\\Response\\HandlerInterface\n\nUseful implementations\n\n\\Magento\\Payment\\Gateway\\Response\\HandlerChain might be used as a basic container of response handlers, handling different parts.\n\nExample\n\nExample of a simple response handler (app/code/Magento/Braintree/Gateway/Response/PayPalDetailsHandler.php):\n\nclass PayPalDetailsHandler implements HandlerInterface\n{\n    const PAYMENT_ID = 'paymentId';\n\n    const PAYER_EMAIL = 'payerEmail';\n\n    /**\n     * @var SubjectReader\n     */\n    private $subjectReader;\n\n    /**\n     * Constructor\n     *\n     * @param SubjectReader $subjectReader\n     */\n    public function __construct(SubjectReader $subjectReader)\n    {\n        $this-&gt;subjectReader = $subjectReader;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function handle(array $handlingSubject, array $response)\n    {\n        $paymentDO = $this-&gt;subjectReader-&gt;readPayment($handlingSubject);\n\n        /** @var \\Braintree\\Transaction $transaction */\n        $transaction = $this-&gt;subjectReader-&gt;readTransaction($response);\n\n        /** @var OrderPaymentInterface $payment */\n        $payment = $paymentDO-&gt;getPayment();\n\n        $payPal = $this-&gt;subjectReader-&gt;readPayPal($transaction);\n        $payment-&gt;setAdditionalInformation(self::PAYMENT_ID, $payPal[self::PAYMENT_ID]);\n        $payment-&gt;setAdditionalInformation(self::PAYER_EMAIL, $payPal[self::PAYER_EMAIL]);\n    }\n}\n\n\n(the code sample is from Magento Open Source v2.1. Although the payment provider gateway was added in v2.0, the particular default implementation using the gateway were added in v2.1)\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/response-handler.html"
    }
    ,
  
    "guides-v2-0-payments-integrations-payment-gateway-response-validator-html": {
      "title": "Response Validator",
      "content": "Response Validator is a component of the Magento payment provider gateway that performs gateway response verification. This may include low level data formatting, security verification, and even execution of some business logic required by the store configuration.\n\nResponse Validator returns a Result object, containing validation result as Boolean value and errors description as a list of Phrase.\n\nInterfaces\nResponse Validator must implement Magento\\Payment\\Gateway\\Validator\\ValidatorInterface\n\nResult class must implement Magento\\Payment\\Gateway\\Validator\\ResultInterface\n\nA payment provider integration can have multiple response validators, that should be added to the provider’s validators’ pool using dependency injection.\n\nUseful implementations\n\n\n  \\Magento\\Payment\\Gateway\\Validator\\AbstractValidator: an abstract class with ability to create a Result object. Can be inherited from by particular response validator implementations.\n  \\Magento\\Payment\\Gateway\\Validator\\ValidatorComposite: a chain of Validator objects, which are executed one by one and the result gets aggregated into one Result object.\n  \\Magento\\Payment\\Gateway\\Validator\\Result: base class for Result object. You still have an ability to create a Result of your own, but the default one covers the most amount of cases.\n\n\nExample\n\nIn the following example a response validator is implemented and added to the pool of the Braintree payment provider request validators.\n\nclass AcceptValidator extends AbstractValidator\n{\n    /**\n     * Performs domain-related validation for business object\n     *\n     * @param array $validationSubject\n     * @return ResultInterface\n     */\n    public function validate(array $validationSubject)\n    {\n        $response = SubjectReader::readResponse($validationSubject);\n        $paymentDO = SubjectReader::readPayment($validationSubject);\n\n        $isValid = true;\n        $fails = [];\n\n        $statements = [\n            [\n                $paymentDO-&gt;getOrder()-&gt;getCurrencyCode() === $response['authCurrency'],\n                __('Currency doesn\\'t match.')\n            ],\n            [\n                sprintf(\n                    '%.2F',\n                    $paymentDO-&gt;getOrder()-&gt;getGrandTotalAmount()) === $response['authCost'],\n                    __('Amount doesn\\'t match.'\n                )\n            ],\n            [\n                in_array($response['authMode'], ['A', 'E']),\n                __('Not supported response.')\n            ]\n        ];\n\n        foreach ($statements as $statementResult) {\n            if (!$statementResult[0]) {\n                $isValid = false;\n                $fails[] = $statementResult[1];\n            }\n        }\n\n        return $this-&gt;createResult($isValid, $fails);\n    }\n}\n\n\nNow, the newly added validator should be specified for a specific command. Below is an example of specifying a validator for an authorization command:\n\n...\n&lt;virtualType name=\"BraintreeAuthorizeCommand\" type=\"Magento\\Payment\\Gateway\\Command\\GatewayCommand\"&gt;\n    &lt;arguments&gt;\n        ...\n        &lt;argument name=\"validator\" xsi:type=\"object\"&gt;Magento\\Braintree\\Gateway\\Validator\\AcceptValidator&lt;/argument&gt;\n    &lt;/arguments&gt;\n&lt;/virtualType&gt;\n...\n\n(This code sample was created for demonstration only, the real Braintree configuration is different).\n",
      "url": "/guides/v2.0/payments-integrations/payment-gateway/response-validator.html"
    }
    ,
  
    "guides-v2-0-rest-rest-endpoints-html": {
      "title": "List of service names per module",
      "content": "REST Schema Endpoint Format\nTo specify one or more services:\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/schema&amp;services=&lt;serviceName1,serviceName2,..&gt;\n\nTo specify all services:\n\nhttp://&lt;magento_host&gt;/rest/&lt;store_code&gt;/schema\n\n\n  The value of `store_code` can be one of the following:\n  \n  default\n  The assigned store code\n  all. This value only applies to the CMS and Product modules. If this value is specified, the API call affects all the merchant's stores. GEToperations cannot be performed when you specify all.\n  \n\n\nMagento Commerce REST API Services per module\n\nThe REST APIs for Magento Commerce are available on Commerce installations only. Commerce installations automatically have access to all Magento Open Source REST APIs.\n\nCustomer balance\ncustomerBalanceBalanceManagementV1\n\n\nGift cards\ngiftCardAccountGiftCardAccountManagementV1\ngiftCardAccountGuestGiftCardAccountManagementV1\ngiftRegistryGuestCartShippingMethodManagementV1\ngiftRegistryShippingMethodManagementV1\n\n\nGift wrapping\ngiftWrappingWrappingRepositoryV1\n\n\nReward\nrewardRewardManagementV1\n\n\nRMA\nrmaCommentManagementV1\nrmaRmaAttributesManagementV1\nrmaRmaManagementV1\nrmaRmaRepositoryV1\nrmaTrackManagementV1\n\n\nWorldpay\nworldpayGuestPaymentInformationManagementProxyV1\n\n\nMagento Open Source REST APIs Services per Module\n\nThe Magento Open Source REST APIs are available on all installations.\n\nBackend\nbackendModuleServiceV1\n\n\nBundle product\nbundleProductLinkManagementV1\nbundleProductOptionManagementV1\nbundleProductOptionRepositoryV1\nbundleProductOptionTypeListV1\n\n\nCatalog\ncatalogAttributeSetManagementV1\ncatalogAttributeSetRepositoryV1\ncatalogCategoryAttributeOptionManagementV1\ncatalogCategoryAttributeRepositoryV1\ncatalogCategoryLinkManagementV1\ncatalogCategoryLinkRepositoryV1\ncatalogCategoryManagementV1\ncatalogCategoryRepositoryV1\ncatalogProductAttributeGroupRepositoryV1\ncatalogProductAttributeManagementV1\ncatalogProductAttributeMediaGalleryManagementV1\ncatalogProductAttributeOptionManagementV1\ncatalogProductAttributeRepositoryV1\ncatalogProductAttributeTypesListV1\ncatalogProductCustomOptionRepositoryV1\ncatalogProductCustomOptionTypeListV1\ncatalogProductLinkManagementV1\ncatalogProductLinkRepositoryV1\ncatalogProductLinkTypeListV1\ncatalogProductMediaAttributeManagementV1\ncatalogProductRepositoryV1\ncatalogProductTierPriceManagementV1\ncatalogProductTypeListV1\ncatalogProductWebsiteLinkRepositoryV1\n\n\nCatalog inventory\ncatalogInventoryStockRegistryV1\n\n\nCheckout\ncheckoutGuestPaymentInformationManagementV1\ncheckoutGuestShippingInformationManagementV1\ncheckoutGuestTotalsInformationManagementV1\ncheckoutPaymentInformationManagementV1\ncheckoutShippingInformationManagementV1\ncheckoutTotalsInformationManagementV1\n\n\nCheckout agreements\ncheckoutAgreementsCheckoutAgreementsRepositoryV1\n\n\nCMS\ncmsBlockRepositoryV1\ncmsPageRepositoryV1\n\n\nConfigurable product\nconfigurableProductConfigurableProductManagementV1\nconfigurableProductLinkManagementV1\nconfigurableProductOptionRepositoryV1\n\n\nCustomer\ncustomerAccountManagementV1\ncustomerAddressMetadataV1\ncustomerAddressRepositoryV1\ncustomerCustomerMetadataV1\ncustomerCustomerRepositoryV1\ncustomerGroupManagementV1\ncustomerGroupRepositoryV1\n\n\nDirectory\ndirectoryCountryInformationAcquirerV1\ndirectoryCurrencyInformationAcquirerV1\n\n\nDownloadable\ndownloadableLinkRepositoryV1\ndownloadableSampleRepositoryV1\n\n\nEAV\neavAttributeSetManagementV1\neavAttributeSetRepositoryV1\n\n\nGift message\ngiftMessageCartRepositoryV1\ngiftMessageGuestCartRepositoryV1\ngiftMessageGuestItemRepositoryV1\ngiftMessageItemRepositoryV1\n\n\nIntegration\nintegrationAdminTokenServiceV1\nintegrationCustomerTokenServiceV1\n\n\nQuote\nquoteBillingAddressManagementV1\nquoteCartItemRepositoryV1\nquoteCartManagementV1\nquoteCartRepositoryV1\nquoteCartTotalManagementV1\nquoteCartTotalRepositoryV1\nquoteCouponManagementV1\nquoteGuestBillingAddressManagementV1\nquoteGuestCartItemRepositoryV1\nquoteGuestCartManagementV1\nquoteGuestCartRepositoryV1\nquoteGuestCartTotalManagementV1\nquoteGuestCartTotalRepositoryV1\nquoteGuestCouponManagementV1\nquoteGuestPaymentMethodManagementV1\nquoteGuestShipmentEstimationV1\nquoteGuestShippingMethodManagementV1\nquotePaymentMethodManagementV1\nquoteShipmentEstimationV1\nquoteShippingMethodManagementV1\n\n\nSales\nsalesCreditmemoCommentRepositoryV1\nsalesCreditmemoManagementV1\nsalesCreditmemoRepositoryV1\nsalesInvoiceCommentRepositoryV1\nsalesInvoiceManagementV1\nsalesInvoiceOrderV1\nsalesInvoiceRepositoryV1\nsalesOrderAddressRepositoryV1\nsalesOrderItemRepositoryV1\nsalesOrderManagementV1\nsalesOrderRepositoryV1\nsalesShipmentCommentRepositoryV1\nsalesShipmentManagementV1\nsalesShipmentRepositoryV1\nsalesShipmentTrackRepositoryV1\nsalesShipOrderV1\nsalesTransactionRepositoryV1\n\n\nSales rule\nsalesRuleCouponManagementV1\nsalesRuleCouponRepositoryV1\nsalesRuleRuleRepositoryV1\n\n\nSearch\nsearchV1\n\n\nStore\nstoreGroupRepositoryV1\nstoreStoreConfigManagerV1\nstoreStoreRepositoryV1\nstoreWebsiteRepositoryV1\n\n\nTax\ntaxTaxClassRepositoryV1\ntaxTaxRateRepositoryV1\ntaxTaxRuleRepositoryV1\n\n",
      "url": "/guides/v2.0/rest/rest_endpoints.html"
    }
    ,
  
    "guides-v2-0-get-started-rest-front-html": {
      "title": "Use REST APIs",
      "content": "The Magento REST API defines a set of functions that a developer can use to perform requests and receive responses. These interactions are performed using the HTTP protocol.\n\nThe caller issues an HTTP request, which contains the following elements:\n\n\n  An HTTP header that provides authentication and other instructions\n  A verb, which can be one of GET, POST, PUT, or DELETE.\n  An endpoint, which is a Uniform Resource Indicator (URI) that identifies the server, the web service, and the resource being acted on.\n  The call payload, which is set of input parameters and attributes that you supply with the request.\n\n\nMagento returns a response payload as well as an HTTP status code.\n\nThis guide introduces web API, REST, and cURL command concepts. It shows you how to authenticate and construct and run REST web API calls. You run REST web API calls through cURL commands or a REST client.\n\nRead the following sections to get up and running with the Magento web APIs:\n\n   \n      \n          Authentication\n      \n   \n   \n      \n         Construct a request\n      \n   \n   \n      \n         Use cURL to run the request\n      \n   \n   \n      \n         Review the response\n      \n   \n\n\n\n\n",
      "url": "/guides/v2.0/get-started/rest_front.html"
    }
    ,
  
    "guides-v2-0-rest-retrieve-filtered-responses-html": {
      "title": "Retrieve filtered responses for REST APIs",
      "content": "Some REST calls return dozens or even hundreds of parameters, and parsing through all this data can be unwieldy. In addition, mobile app developers might find the bandwidth needed to process a request to be excessive. To resolve these problems, Magento provides a query parameter-based syntax for REST API requests that return partial responses.\n\n\n  This feature is not available for SOAP, because SOAP does not allow partial responses. \n\n\nYou can append ?fields=&lt;field_or_object1&gt;,&lt;field_or_object2&gt;,... to any GET, POST, or PUT operation to filter unimportant information from the response. &lt;field_or_object&gt; can be any of the following:\n\n\n  Simple top-level field\n  Top-level object that includes all fields\n  Top-level object with selected fields\n  Nested objects\n\n\nSeparate each field or object with a comma.\n\nOn POST and PUT requests, Magento ignores the fields parameter as input, but the response includes only the requested fields and objects.\n\nExamples\n\nAll examples use Magento Open Source sample data.\n\nSimple fields\n\nThe following example returns only the sku, price, and name for the specified product:\n\nGET http://&lt;host&gt;/rest/default/V1/products/24-MB01?fields=sku,price,name\n\nSample output {\n  \"sku\": \"24-MB01\"\n  \"name\": \"Joust Duffle Bag\"\n  \"price\": 24.99\n}\n\n\nSimple fields and top-level objects with all fields\n\nThe following example returns only the customer first name, last name, and the entire billing_address object from a specified order. Do not include brackets [] after an object name when you want to return all of the object’s contents.\n\nGET http:/&lt;host&gt;/rest/default/V1/orders/2?fields=billing_address,customer_firstname,customer_lastname\n\nSample output {\n\"customer_firstname\": \"Veronica\"\n\"customer_lastname\": \"Costello\"\n\"billing_address\": {\n  \"address_type\": \"billing\"\n  \"city\": \"Calder\"\n  \"country_id\": \"US\"\n  \"customer_address_id\": 1\n  \"email\": \"roni_cost@example.com\"\n  \"entity_id\": 4\n  \"firstname\": \"Veronica\"\n  \"lastname\": \"Costello\"\n  \"parent_id\": 2\n  \"postcode\": \"49628-7978\"\n  \"region\": \"Michigan\"\n  \"region_code\": \"MI\"\n  \"region_id\": 33\n  \"street\": \"6146 Honey Bluff Parkway\"\n  \"telephone\": \"(555) 229-3326\"\n  }\n}\n\n\nTop-level object with selected fields\n\nThe following example returns only the name, qty, and sku fields defined in an items object from a specified shipment:\n\nGET http://&lt;host&gt;/rest/default/V1/shipment/2?fields=items[name,qty,sku]\n\nSample output \"items\": [\n   {\n     \"name\": \"Minerva LumaTech&amp;trade; V-Tee-XS-Blue\",\n     \"qty\": 1,\n     \"sku\": \"WS08-XS-Blue\",\n   }\n ]\n \n\n\nNested objects\n\nThis example returns only the following:\n\n\n  The product’s sku and name\n  The entire category_links object, which is defined in extension_attributes\n  The item_id and qty fields of the stock_item object, which is also defined in extension_attributes\n\n\nGET http://&lt;host&gt;/rest/default/V1/products/MT12?fields=name,sku,extension_attributes[category_links,stock_item[item_id,qty]]\n\nSample output {\n  \"sku\": \"MT12\"\n  \"name\": \"Cassius Sparring Tank\"\n  \"extension_attributes\": {\n    \"category_links\": {\n      \"position\": 1\n      \"category_id\": \"18\"\n    }\n    \"stock_item\": {\n      \"item_id\": 732\n      \"qty\": 0\n      }\n  }\n}\n\n\nPOST operation\n\nThe following POST operation and payload creates a catalog category named New Category. Magento returns only the id, parent_id, and name attributes\n\nPOST http://&lt;host&gt;/rest/V1/categories?fields=id,parent_id,name\n\n{\n  \"category\": {\n    \"name\": \"New Category\",\n    \"is_active\": true\n  }\n}\n\nSample output {\n\"id\": 43\n\"parent_id\": 2\n\"name\": \"New Category\"\n}\n\n\nUsing with searchCriteria\n\nThe searchCriteria query parameter allows you to search across multiple objects in a collection. You can use the fields query parameter in conjunction with searchCriteria to limit the output. The question mark (?) that precedes fields in all the other examples in this document is replaced with an ampersand (&amp;).\n\nThe following query returns only the sku and name parameters for product items whose category_gear attribute includes the value 86.\n\nGET http://&lt;host&gt;/rest/V1/products/?searchCriteria[filter_groups][0][filters][0][field]=category_gear&amp;searchCriteria[filter_groups][0][filters][0][value]=86&amp;searchCriteria[filter_groups][0][filters][0][condition_type]=finset&amp;fields=items[sku,name]\n\nSample output {\n\"items\":\n  {\n    \"sku\": \"24-MG04\"\n    \"name\": \"Aim Analog Watch\"\n  }\n  {\n    \"sku\": \"24-MG01\"\n    \"name\": \"Endurance Watch\"\n  }\n  {\n    \"sku\": \"24-MG03\"\n    \"name\": \"Summit Watch\"\n  }\n  {\n    \"sku\": \"24-MG05\"\n    \"name\": \"Cruise Dual Analog Watch\"\n  }\n  {\n    \"sku\": \"24-MG02\"\n    \"name\": \"Dash Digital Watch\"\n  }\n  {\n    \"sku\": \"24-WG09\"\n    \"name\": \"Luma Analog Watch\"\n  }\n  {\n    \"sku\": \"24-WG01\"\n    \"name\": \"Bolo Sport Watch\"\n  }\n  {\n    \"sku\": \"24-WG03\"\n      \"name\": \"Clamber Watch\"\n  }\n  {\n    \"sku\": \"24-WG02\"\n    \"name\": \"Didi Sport Watch\"\n  }\n}\n\n\nRelated topics\n\n  Search using REST APIs\n\n",
      "url": "/guides/v2.0/rest/retrieve-filtered-responses.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-robots-sitemap-html": {
      "title": "Add sitemap and robots.txt",
      "content": "When creating and adding your sitemap and robots.txt to your store, you may run into issues due to the read-only environment. You may receive errors such as the following:\n\nThe path \".:///app/app/\" is not writable.\nPath \"/app/pub/static/sitemap.xml\" is protected and cannot be used.\n\n\nTo best add these files, please review the steps below.\n\nFor Magento Commerce (Cloud) 2.2, you do not need to move the files or have a redirection added. If you used these workarounds before 2.2, you can return the files to the original locations and ticket to have the redirection removed.\n\nGenerate sitemap and robots\nAccess an environment fully configured for your site:\n\n\n  For Starter, access an active branch for example staging\n  For Pro, access your master environment in Integration\n\n\nGenerate your sitemap.xml and robots.txt:\n\n\n  Log into the Magento Admin.\n  Navigate to Marketing &gt; Site Map.\n  Click Add Sitemap to generate a new site map. The file saves as sitemap.xml.\n  Navigate to Stores &gt; Configuration &gt; Design.\n  Select options and update robots.txt.\n  Save your configuration.\n\n\nFor additional information, see Using a Sitemap and Search Engine Robots.\n\nImport files to environment\nIf you accessed the environment directoy, you need to transfer the files from the environment to your local. For example, you can use rsync or  scp through a terminal. If you completed the commands on your local, move the files to the correct location. The following example uses rsync.\n\nMove and add the files to your Git branch:\n\n\n  SSH into the environment you created the files.\n  \n    Use rsync to move the files to your local. The format of the command is rsync -azvP &lt;source&gt; &lt;destination&gt;.\n\n    rsync -azvP  @:pub/media/\n  \n  SSH into the environment you want to move the files into.\n  \n    Move the files into the /pub/media/ directory using the rsync command:\n\n    rsync -azvP pub/media/ @:pub/media/\n  \n  Enter a ticket with Support to have URL rewrite rules added for sitemap.xml and robots.txt.\n\n\nWhen the redirects are completed, keep these files updated in that file location for your Git branches during deployment.\n",
      "url": "/guides/v2.0/cloud/trouble/robots-sitemap.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-routing-html": {
      "title": "Routing",
      "content": "In the Magento system, a URL has the following format:\n\n&lt;area front name&gt;/&lt;VendorName&gt;/&lt;ModuleName&gt;/&lt;controller name&gt;/&lt;action name&gt;\n\n&lt;area front name&gt; indicates it is at the “front” of the URL. (The area name is used internally to refer to the area in configuration files. Magento provides areas such as frontend for the storefront and adminhtml for the administration area.)\n\nTo assign a URL to a corresponding controller and action, use the router class.\n\nRouter has an algorithm to find a matching controller, determined by request.\n\nThen, according to a route rule, controller is assigned to URL. Use the routes.xml file to review or change the route rules.\n\nRouters\n\nThe routers information for the modules is described in the routerList parameter of Magento\\Framework\\App\\RouterList type in your di.xml.\n\nEach area has its own set of the routers. The Magento\\Framework\\App\\RouterList model is injected into FrontController.\n\nYou might need to customize the routers to change either the standard logic of processing the requests or the native Magento routers\n(such as, CMS router, default router, and so on).\nHowever, you must not customize the routers that are used in Magento core modules.\n\nRoutes\n\nConfigurations of the routes are stored in routes.xml in the scopes area.\n\nOnly the standard frontend and backend routers use routes. Typically, the configuration for a route is in the following format:\n\n&lt;config&gt;\n    &lt;router id=\"%routerId%\"&gt;\n        &lt;route id=\"%routeId%\" frontName=\"%frontName%\"&gt;\n            &lt;module name=\"%moduleName%\" before=\"%moduleName%\"/&gt;\n        &lt;/route&gt;\n    &lt;/router&gt;\n&lt;/config&gt;\n\n\n  %routeId% must be at least three characters in length and can consist of the following characters: A-Z, a-z, 0-9, _.\n  %frontName% must be at least three characters in length and can consist of the following characters: A-Z, a-z, 0-9, _, -.\n\n\nTo retrieve the configuration for route for an area by the specified router, use the Magento\\App\\Framework\\Route\\Config.\n\nTo replace the controller action in a route with custom one, add the custom controller class before the original controller.\n\nThe custom controller and action should share the same names with the original ones.\n\nThe system processes the custom controller before the original, while a route remains the same.\n\nIf you must reset a route and design, forward the request processing to another route:\n\n$this-&gt;_forward('other/controller/action')\n\nTo remove the controller action, forward to noroute, for instance, in app/code/Company/SomeExtension/Controller/Account/Create.php:\n\n\nnamespace Company\\SomeExtension\\Controller\\Account;\n\nclass Create extends \\Magento\\Framework\\App\\Action\\Action\n{\n    public function execute()\n    {\n        $this-&gt;_forward('noroute');\n    }\n}\n\n\nRouting processing\n\nRouting is processed in the following way:\n\n\n  Modules provide information on their routers through the routerList parameter of Magento\\Framework\\App\\RouterList type in di.xml.\n  FrontController obtains active routers and checks whether a request can be processed.\n  If a request cannot be processed by any router, the default router is used.\n  If a request can be processed by a router, the router finds a route with matching frontName and looks through corresponding modules. If a module has matching controller and action names, a router instantiates this controller.\n\n\nThe dispatch() method of the Magento\\Framework\\App\\Action\\Action class requests an instance and returns its response.\n\nFor this class, the Magento\\Framework\\App\\ActionInterface processes the requests through its actions. Also, the following classes participate in processing the requests:\n\n\n  The Magento\\Framework\\App\\State  class provides information on the state of the application, that is, current mode, installation date, and so on.\n  The Magento\\Framework\\App\\Arealist class serves to configure the application areas through the di.xml file\n  The Magento\\App\\Area\\FrontNameResolverInterface class resolves the dynamic area’s front names\n\n\nDefault router\n\nIf a request cannot be processed by any router, the Magento\\Framework\\App\\Router\\DefaultRouter default router lists handlers for processing such request.\n\nMagento\\App\\Router\\NoRouteHandlerList contains the list of handlers.\n\nRelated information\nSee The Route Config Kata by Magento contributor Vinai Kopp.\n",
      "url": "/guides/v2.0/extension-dev-guide/routing.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-row-pattern-row-pattern-html": {
      "title": "Admin Design Pattern Library",
      "content": "Row Pattern\nThe “row pattern” (also referred to as table light and mini grid) is used in the Magento Admin interface wherever the User is expected to want to input tabular data. This pattern allows the user to add as many rows of data as they desire. “Light tables” are used when the User needs to add/edit a relatively small amount of items (rows).\n\nThe pattern supports following actions:\n\n\n  Add new row\n  Remove row\n  Rearrange/drag the rows\n  Edit fields in a row\n  Pagination (for 20 &gt; more rows)\n\n\nThe pattern does not support:\n\n\n  Filtering, sorting, searching the table\n  Adding, removing, rearranging of columns\n\n\nAnatomy of a Row Pattern\n\nMay include any of the following elements:\n\n\n  Table Body\n  Table heading\n  Row\n  Text in the row\n  Form elements inside the row\n  Drag handle\n  “Add row” button\n  “Remove row” icon\n  Pagination (for more than 20 rows)\n\n\nAll these elements are optional, depending on the functions needed.\n\nBehavior and Interaction\n\n\n  \n    The Row Pattern, by default, will display one row to indicate to the User that data input is available (or required). A link beneath this initial input row will allow the User to add an additional row if desired.\n  \n  \n    Each row will have a delete control on the far right, often represented by a “trash can” icon. This will allow the User to remove any unwanted rows, along with any data that has been input into them (prior to saving the form).\n  \n  \n    The delete contol CAN allow the user to remove all rows, even the initial row displayed upon page load.\n  \n  \n    The “Add” link however should always be present to allow the user to add a row, even in the event of deleting all rows.\n  \n\n\n\n\nPagination\nFor better performance, the Row Pattern pagination should be enabled automatically whenever 20 (or more) rows are present. Once pagination is enabled an “Order” column should be appeneded to allow the user to rearrange the rows.\n\n\n\nOnce pagination is enabled an “Order” column should be appeneded to allow the user to rearrange the rows.\n\n\n\nExamples\nTypically the Row Pattern will span either 8 or 12 colums for the page grid, depending on the layout of the page or panel on which it appears. The Row Pattern should accomodate all typical form elements as are necessary, but discretion should be used to insure the elements within the row are easy to read and interact with and do not become to cramped within the space.\n\n\n\nAccessibility\n\nThe form drop down, scroll area, and selections should be accessible via keyboard.\n\nFollow this form control accessibility guideline: \n http://www.w3.org/TR/WCAG10-HTML-TECHS/#forms \n\nAssets\nPSD files can be found here:\nDownload Row Pattern ZIP file\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/row_pattern/row_pattern.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-breakpoints-html": {
      "title": "Add a custom breakpoint",
      "content": "What's in this topic\n\nBreakpoints are used in stylesheets to set up the screen width at which the design changes, for example from the mobile to the desktop version. Themes provided with Magento implement a list of default breakpoints. This topic describes how to add a custom breakpoint in your theme.\n\nOverview\nTo add a custom breakpoint in your theme, you need to do the following:\n\n\n  Define a variable for the new breakpoint.\n  Override the library _responsive.less file, and add the new rule for the new breakpoint.\n  Implement the screen changes for the new breakpoint.\n\n\nAdd a new breakpoint variable\n\nIn your custom theme directory, add a /web/css/source/variables.less in one of the following ways:\n\n\n  if your theme inherits from the other, then copy the parent’s variables.less.\n  if your theme is a standalone one, add a new empty file.\n\n\nIn variable.less, add the variable for your new breakpoint.\n\nFor example:\n\n@your__breakpoint: 1280px;\n\n\nFor variables’ naming rules see Less coding standards.\n\nOverride _responsive.less from the library\n\nAccording to the approach, implemented in the Magento UI library, the .media-width() mixin calls are defined in many places, but invoked in one place, in lib/web/css/source/lib/_responsive.less.\n\nTo implement a new breakpoint, you need to edit the .media-width() mixin by adding the appropriate rule there. So you need to override the library _responsive.less in your theme, and add the customizations there.\n\nTo do this, take the following steps:\n\n\n  Copy the _responsive.less file to your &lt;your_theme_dir&gt;/web/css/source/lib/ directory from one of the following locations:\n    \n      &lt;your_parent_theme_dir&gt;/web/css/source/lib/_responsive.less: overriding _responsive.less in the parent theme. If there’s no such file or no parent theme, use the other option.\n      &lt;your_theme_dir&gt;/web/css/source/lib/_responsive.less: the library file.\n    \n  \n  In your _responsive.less, add the .media-width mixin rule for your breakpoint in the corresponding section (desktop or mobile, depending on the type of breakpoint you add).\n\n\nExample:\n\n&amp; when (@media-target = 'desktop'), (@media-target = 'all') {\n…\n    @media all and (min-width: @your__breakpoint) {\n        .media-width('min', @your__breakpoint);\n    }\n}\n\n\nAdd .media-width() calls for the new breakpoint\n\nNow you can add a new .media-width() mixin call where necessary in your theme .less  files.\n\nExample:\n\n.media-width(@extremum, @break) when (@extremum = 'min') and (@break = @your__breakpoint) {\n    //  Customization for @your__breakpoint breakpoint\n}\n\n\nRelated reading\n\n\n  You can find information about the _responsive.less library file in the generated Magento UI library documentation. It is available in the following location in your Magento installation: &lt;your_Magento_installation&gt;/pub/static/frontend/Magento/blank/en_US/css/docs/responsive.html.\n  How to make your theme responsive and mobile.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd-breakpoints.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-css-html": {
      "title": "CSS in responsive design",
      "content": "What's in this topic\n\nStylesheets are the main tool in responsive web design (RWD) implementation. This topic describes the mechanisms and approaches to building RWD used in the default Magento themes. To re-use them in your custom theme, make your theme inherit from the Magento basic Blank theme.\n\nMedia queries in Magento default themes\n\nThe Blank and Luma theme styles are based on the Magento UI library. The library uses CSS3 media queries, an extension of the @media rule, to adapt the layout to the screen width.\n\nAccording to the approach implemented in the library, the .media-width() mixin can be used in any .less file in your theme, as many times as you need, but it is invoked only once, in lib/web/css/source/lib/_responsive.less. The resulting styles.css has only one call of each media query with all the rules there, instead of multiple calls for the same query.\n\nYou can find more information about the Magento UI library responsive mixin usage in &lt;your_Magento_instance&gt;/pub/static/frontend/Magento/blank/en_US/css/docs/responsive.html (view in a browser).\n\nBreakpoints\n\nBreakpoints are used in the CSS code to set up the screen width at which the design switches from the mobile to the desktop version.\n\nThe Blank and Luma themes implement the following breakpoints:\n\n  320px\n  480px\n  640px\n  768px (in the Blank and Luma themes, this breakpoint switches between mobile and desktop views) 1024px\n  1440px\n\n\nYou can change these breakpoints and add new ones in your custom theme. For instructions see the Add a new breakpoint topic.\n\nMobile first\n\nIn the Blank and Luma themes, the mobile first approach is used. It means that the styles for mobile devices (screen width less than 768px) are extended by the styles for the higher breakpoints. As the result, the extra styles are never loaded when a store is viewed on a mobile device.\n\nIn the Blank theme, the mobile and desktop styles are defined in separate files:\n\n\nstyles-l.less is used to generate desktop-specific styles (768px and higher).\nstyles-m.less is used to generate basic and mobile-specific styles.\n\n\nRelated topics\n\n\n  Create a theme\n  Magento UI library\n  JavaScript in a responsive design\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd_css.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-js-html": {
      "title": "JavaScript in Magento responsive design",
      "content": "What's in this topic\n\nThis topic describes the JavaScript used in Magento out-of-the-box Blank and Luma themes to relocate certain elements and change their behavior depending on the breakpoint.\n\nScripts general overview\n\nThe Blank and Luma themes use the following scripts to responsively relocate page elements by breakpoint:\n\n\nresponsive.js\nmenu.js\n\nmatchMedia.js, used by responsive.js and menu.js\n\n\nThe script files are located in the file system as follows:\n\n├── app/design/frontend/Magento/blank/web/js/\n    ├── responsive.js\n├── lib/web/\n    ├── matchMedia.js\n    ├── mage/\n\t    ├── menu.js\n\n\nSee one of the following sections for more information:\n\n\n  responsive.js\n  menu.js\n\n\nresponsive.js\n\nThe responsive.js script implements specific responsive functions for the Blank and Luma themes. To manipulate JavaScript for the desktop or mobile view, responsive.js calls the mediaCheck() anonymous function from matchMedia.js.\n\nThe mediaCheck call looks as follows:\n\n /*...*/\n    mediaCheck({\n        media: '(min-width: 768px)',\n        // Switch to Desktop Version\n        entry: function () {\n            /* The function that toggles page elements from desktop to mobile mode is called here */\n        },\n        // Switch to Mobile Version\n        exit: function () {\n            /* The function that toggles page elements from mobile to desktop mode is called here*/\n        }\n    }); /*...*/\n\nFor example, responsive.js changes the view of the checkout progress block on the checkout page:\n\n For the desktop view, the checkout progress block is permanently displayed on the left-hand side.\nFor the mobile view, it is moved by CSS to be displayed under the checkout steps. responsive.js makes it a toggled block: by default, the checkout progress information is hidden in the Your Checkout Progress section and it is visible after you click it.\n\n\nmenu.js\n\nIn a mobile view, on the 768px breakpoint, menu.js changes the navigation menu look and behavior the following way:\n\nCategory menu items are not displayed, but are accessible after clicking the menu icon.\nThe behavior of a category link depends on whether the category has sub-categories:\n\nIf sub-categories exist, the category link behaves as collapsible block. Clicking a category link does not redirect to the category page immediately. Instead it opens a list of sub-categories, including the All category products option. \nIf there are no sub-categories, the category link behaves as usual.\n\n\n\n\nThe following image illustrates the mobile-view navigation menu.\n\n\n\nRe-using Magento scripts in your theme\n\nYou can use the menu.js, responsive.js and matchMedia.js to add responsive behavior in your custom theme. \nIf your theme inherits from Blank or Luma, you do not even need to additionally include the script files in your theme.\n\nIf your theme does not inherit from Blank or Luma, to be able to use the scripts, you must configure RequireJS for your theme.\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd_js.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-mobile-html": {
      "title": "Create a responsive mobile theme based on a default theme",
      "content": "What's in this topic\nThe topic describes how to create a responsive mobile-specific theme using the default Magento approaches.\n\nCreating a mobile-specific theme\n\nTo use all the responsive approaches implemented in the Magento out-of-the-box Blank and Luma themes, your theme should declare one of them as a parent.\n\nTo create a mobile-specific theme:\n\n\n  Create a theme as described in Create a theme, having specified Blank or Luma as a parent theme.\n  Add a &lt;theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml layout file with the following content:\n\n\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n    &lt;head&gt;\n        &lt;remove src=\"css/styles-l.css\" /&gt;\n    &lt;/head&gt;\n&lt;/page&gt;\n\nThis will remove the desktop-specific files from your theme.\n\nRecommended reading\n\nCSS in Magento responsive design\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd_mobile.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-overview-html": {
      "title": "Overview of responsive web design in Magento",
      "content": "Responsive web design (RWD, also referred as responsive design) crafts web sites to provide an optimal viewing experience across a wide range of devices (from large, high-resolution desktop computer monitors to mobile phones).\n\nThe out of the box Magento Blank and Luma themes (Luma inherits from Blank) use the mobile first RWD approach. It is ensured mostly by means of CSS and JavaScript.\n\nThe following image illustrates how the same page built on the Blank theme looks on mobile, tablet and desktop devices.\n\n\n\nWe recommend using the Blank theme, as a starting point for your customizations. That is, your custom theme should inherit from Blank.\n\nThe articles in this chapter describe the particular approaches used in the Blank theme, and provide practical recommendations on how to use these approaches in your themes:\n\n\n \nCSS in Magento responsive design\n\n\nJavaScript in Magento responsive design\n\n\nCustomizing RWD: illustration\n\n\n\nCreate a responsive mobile theme based on Blank\n\n\n\n\nTerms used\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\nBreakpoint\n\n\n\nThe width of the user’s screen that causes your responsive layout to change.\n\n\n\n\n\nRecommended reading\n\n\n  Magento Themes\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd_overview.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-responsive-web-design-rwd-practice-html": {
      "title": "Customizing RWD illustration",
      "content": "What's in this topic\nThis topic features a step-by-step illustration of how to change the number of products displayed in a row on a product page, keeping up with the responsive design approach used by Magento out-of-the-box themes.\n\nThe described flow is applicable only for themes that inherit from the out-of-the-box Blank or Luma theme.\n\nChanging the number of products in a row\n\nOrangeCo wants to make their products more visible by decreasing the quantity of products in a row displayed on a catalog page, so that each product takes more space.\n\nIn the basic Blank theme, the number of products in a row for each breakpoint is the following (for the 2-column page layout):\n\n\n1024px and more (desktop): four products\n768px (tablet): three products\n640px and less (mobile): two products\n\n\nIn their custom Orange theme, OrangeCo wants to have the least number of products in a row for the desktop and tablet view, namely:\n\nDesktop: three products\nTablet: two products\nMobile: two products\n\n\nThe Orange theme inherits from the Blank theme.\n\nTo change the products quantity, OrangeCo take the following steps:\n\nCopy the &lt;Magento_Blank_theme_dir&gt;/Magento_Catalog/web/css/source/module/_listings.less file.\nPut it in the corresponding location in their Orange theme directory: app/design/frontend/OrangeCo/orange/Magento_Catalog/web/css/source/module/_listings.less \nMake the changes in the code. The following image illustrates which section of the file they change, the modified lines are highlighted:\n\n\n\nAfter OrangeCo applies their theme, the catalog page of their store looks like following:\n\n\n\n(compare to the same page for the Blank theme.)\n",
      "url": "/guides/v2.0/frontend-dev-guide/responsive-web-design/rwd_practice.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-after-clone-html": {
      "title": "Install by cloning repositories",
      "content": "\n\n  Install sample data by cloning repositories\n  This topic discusses how to get the Magento sample data if you cloned the Magento GitHub repository. This method is intended only for contributing developers (that is, developers who plan to contribute to the Magento 2 codebase).\n\n  If you’re not a contributing developer, choose one of the other options displayed in the table of contents on the left side of the page.\n\n  Contributing developers can use this method of installing sample data only if all of the following are true:\n\n  \n    You use Magento Open Source\n    You cloned the Magento 2 repository.\n  \n\n  \n    You can use sample data with either the develop branch (more current) or a released branch (such as 2.0 or 2.0.1 (more stable)). We recommend you use a released branch because it's more stable. If you're contributing code to the Magento 2 repository and you need the most recent code, use the develop branch.\n    Regardless of the branch you choose, you must clone the corresponding branch of the Magento 2 GitHub repository. For example, sample data for the develop branch can be used only with the Magento 2 develop branch.\n\n\n  See the following sections:\n\n  \n    Clone the sample data repository\n    Set file system ownership and permissions\n  \n\n  Clone the sample data repository\n  This section discusses how to install Magento sample data by cloning the sample data repository. You can clone the sample data repository in any of the following ways:\n\n  \n    Clone with the SSH protocol\n    Clone with the HTTPS protocol\n  \n\n  Clone with SSH\n  To clone the Magento sample data GitHub repository using the SSH protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    Next to the name of the branch, click SSH from the list.\n    \n      Click Copy to clipboard\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n\n      Need help locating the docroot?\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone git@github.com:magento/magento2-sample-data.git\n      \n    \n    \n      Wait for the repository to clone on your server.\n\n      \n    If the following error displays, make sure you shared your SSH key with GitHub: \n        Cloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n    \n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n    \n    \n      Wait for the command to complete.\n    \n    See Set file system permissions and ownership.\n  \n\n  Clone with HTTPS\n  To clone the Magento sample data GitHub repository using the HTTPS protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    On the right side of the page, under the clone URL field, click HTTPS.\n    \n      Click Copy to clipboard.\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone https://github.com/magento/magento2-sample-data.git\n      \n    \n    Wait for the repository to clone on your server.\n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n\n      For example,\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"/var/www/magento2\"\n      \n    \n    Wait for the command to complete.\n    See the next section.\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  Set file system ownership and permissions\n  Because the php build-sample-data.php script creates symlinks between the sample data repository and your Magento 2 repository, you must set file system permissions and ownership in the sample data repository. Failure to do so results in errors accessing the storefront.\n\n  To set file system permissions and ownership on the sample data repository:\n\n  \n    Change to your sample data clone directory.\n    \n      Set ownership:\n\n      chown -R :&lt;your web server group name&gt; .\n      \n\n      Typical examples:\n\n      CentOS: chown -R :apache .\n\n      Ubuntu: chown -R :www-data .\n    \n    \n      Set permissions:\n\n      find . -type d -exec chmod g+ws {} \\;\n      \n    \n    \n      Clear static files:\n\n      cd &lt;your Magento Open Source install dir&gt;/var\nrm -rf cache/* page_cache/* generation/*\n      \n    \n  \n\n  \n\n  \n\n    Complete the sample data installation\n    After you download the sample data packages, log in to your Magento server as, or switch to, the Magento file system owner and enter the following command:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-after-clone.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-after-composer-html": {
      "title": "Install using Composer",
      "content": "\n\n  This section discusses how to install sample data if you got the Magento software in any of the following ways:\n\n  \n    \n      Downloaded a compressed archive from Magento.\n\n      If you downloaded an archive from Github, this method won’t work because the composer.json file doesn’t contain the repo.magento.com URL.\n    \n    \n      Used composer create-project\n    \n  \n\n  You can use this method of getting sample data for both Magento Open Source or Magento Commerce, but you must use the same authentication keys you used to install Magento.\n\n  \n    If you encounter errors, such as Could not find package... or ...no matching package found..., make sure there aren’t any typos in your command. If you still encounter errors, you may not have access to the right Composer repositories, especially if your using Magento Commerce. Contact Magento support for help.\n  \n\n  You can use Composer to install sample data either before or after installing Magento; however, there might be additional tasks.\n\n  If you’re a contributing developer, refer to Install by cloning repositories.\n\n  \n    Do not install sample data if your Magento application is set for production mode. Switch to developer mode first. Installing sample data in production mode fails.\n\n\n  To install sample data using the command line, enter the following command as the Magento file system owner:\n\n  php &lt;your Magento install dir&gt;/bin/magento sampledata:deploy\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  You are required to authenticate to complete the action.\n\n  Authentication error\n  The following authentication error might display:\n\n  [Composer\\Downloader\\TransportException]\nThe 'https://repo.magento.com/packages.json' URL required authentication.\nYou must be using the interactive console to authenticate\n  \n\n  If the error displays, change to your Magento installation directory and run composer update, which will prompt you for your authentication keys.\n\n  \n\n    Complete the sample data installation\n    After you download the sample data packages, log in to your Magento server as, or switch to, the Magento file system owner and enter the following command:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-after-composer.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-after-magento-html": {
      "title": "Install sample data after Magento",
      "content": "The following topics discuss how to install optional sample data after you have already installed the Magento software. There is one additional step compared to pre-installation, which is to update the Magento database schema and data.\n\n\n  Install using Composer\n  Install by cloning repositories\n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-after-magento.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-before-clone-html": {
      "title": "Install by cloning repositories",
      "content": "\n\n  Install sample data by cloning repositories\n  This topic discusses how to get the Magento sample data if you cloned the Magento GitHub repository. This method is intended only for contributing developers (that is, developers who plan to contribute to the Magento 2 codebase).\n\n  If you’re not a contributing developer, choose one of the other options displayed in the table of contents on the left side of the page.\n\n  Contributing developers can use this method of installing sample data only if all of the following are true:\n\n  \n    You use Magento Open Source\n    You cloned the Magento 2 repository.\n  \n\n  \n    You can use sample data with either the develop branch (more current) or a released branch (such as 2.0 or 2.0.1 (more stable)). We recommend you use a released branch because it's more stable. If you're contributing code to the Magento 2 repository and you need the most recent code, use the develop branch.\n    Regardless of the branch you choose, you must clone the corresponding branch of the Magento 2 GitHub repository. For example, sample data for the develop branch can be used only with the Magento 2 develop branch.\n\n\n  See the following sections:\n\n  \n    Clone the sample data repository\n    Set file system ownership and permissions\n  \n\n  Clone the sample data repository\n  This section discusses how to install Magento sample data by cloning the sample data repository. You can clone the sample data repository in any of the following ways:\n\n  \n    Clone with the SSH protocol\n    Clone with the HTTPS protocol\n  \n\n  Clone with SSH\n  To clone the Magento sample data GitHub repository using the SSH protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    Next to the name of the branch, click SSH from the list.\n    \n      Click Copy to clipboard\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n\n      Need help locating the docroot?\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone git@github.com:magento/magento2-sample-data.git\n      \n    \n    \n      Wait for the repository to clone on your server.\n\n      \n    If the following error displays, make sure you shared your SSH key with GitHub: \n        Cloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n    \n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n    \n    \n      Wait for the command to complete.\n    \n    See Set file system permissions and ownership.\n  \n\n  Clone with HTTPS\n  To clone the Magento sample data GitHub repository using the HTTPS protocol:\n\n  \n    In a web browser, go to the Magento sample data repository.\n    On the right side of the page, under the clone URL field, click HTTPS.\n    \n      Click Copy to clipboard.\n\n      The following figure shows an example.\n\n      \n    \n    \n      Change to your web server’s docroot directory.\n\n      Typically, for Ubuntu, it’s /var/www and for CentOS it’s /var/www/html.\n    \n    \n      Enter git clone and paste the value you obtained from step 1.\n\n      An example follows:\n\n      git clone https://github.com/magento/magento2-sample-data.git\n      \n    \n    Wait for the repository to clone on your server.\n    Change to the &lt;your Magento sample data clone dir&gt;/dev/tools directory.\n    \n      Enter the following command to create symbolic links between the files you just cloned so sample data works properly:\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"&lt;path_to_your_magento_instance&gt;\"\n      \n\n      For example,\n\n      php -f &lt;sample-data_clone_dir&gt;/dev/tools/build-sample-data.php -- --ce-source=\"/var/www/magento2\"\n      \n    \n    Wait for the command to complete.\n    See the next section.\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  Set file system ownership and permissions\n  Because the php build-sample-data.php script creates symlinks between the sample data repository and your Magento 2 repository, you must set file system permissions and ownership in the sample data repository. Failure to do so results in errors accessing the storefront.\n\n  To set file system permissions and ownership on the sample data repository:\n\n  \n    Change to your sample data clone directory.\n    \n      Set ownership:\n\n      chown -R :&lt;your web server group name&gt; .\n      \n\n      Typical examples:\n\n      CentOS: chown -R :apache .\n\n      Ubuntu: chown -R :www-data .\n    \n    \n      Set permissions:\n\n      find . -type d -exec chmod g+ws {} \\;\n      \n    \n    \n      Clear static files:\n\n      cd &lt;your Magento Open Source install dir&gt;/var\nrm -rf cache/* page_cache/* generation/*\n      \n    \n  \n\n  \n\n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-before-clone.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-before-composer-html": {
      "title": "Install using Composer",
      "content": "\n\n  This section discusses how to install sample data if you got the Magento software in any of the following ways:\n\n  \n    \n      Downloaded a compressed archive from Magento.\n\n      If you downloaded an archive from Github, this method won’t work because the composer.json file doesn’t contain the repo.magento.com URL.\n    \n    \n      Used composer create-project\n    \n  \n\n  You can use this method of getting sample data for both Magento Open Source or Magento Commerce, but you must use the same authentication keys you used to install Magento.\n\n  \n    If you encounter errors, such as Could not find package... or ...no matching package found..., make sure there aren’t any typos in your command. If you still encounter errors, you may not have access to the right Composer repositories, especially if your using Magento Commerce. Contact Magento support for help.\n  \n\n  You can use Composer to install sample data either before or after installing Magento; however, there might be additional tasks.\n\n  If you’re a contributing developer, refer to Install by cloning repositories.\n\n  \n    Do not install sample data if your Magento application is set for production mode. Switch to developer mode first. Installing sample data in production mode fails.\n\n\n  To install sample data using the command line, enter the following command as the Magento file system owner:\n\n  php &lt;your Magento install dir&gt;/bin/magento sampledata:deploy\n  \n\n  \n    If you’re installing sample data after installing Magento, you must also run the following command to update the database and schema:\n\n    php &lt;your Magento install dir&gt;/bin/magento setup:upgrade\n    \n  \n\n  You are required to authenticate to complete the action.\n\n  Authentication error\n  The following authentication error might display:\n\n  [Composer\\Downloader\\TransportException]\nThe 'https://repo.magento.com/packages.json' URL required authentication.\nYou must be using the interactive console to authenticate\n  \n\n  If the error displays, change to your Magento installation directory and run composer update, which will prompt you for your authentication keys.\n\n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-before-composer.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-other-cmds-html": {
      "title": "Remove sample data modules or update sample data",
      "content": "\n\n  Remove sample data modules or update sample data\n\n  This topic discusses how to:\n\n  \n    \n      Remove sample data modules from the Magento installation composer.json\n\n      This option does not remove sample data from the database.\n    \n    \n      Prepare to update sample data (for example, before updating the Magento application).\n    \n  \n\n  First steps\n\n  \n\n    \n      \n        Log in to the Magento server as, or switch to, a user who has permissions to write to the Magento file system. One way to do this is to switch to the Magento file system owner.\n\n        If you use the bash shell, you can also use the following syntax to switch to the Magento file system owner and enter the command at the same time:\n\n        su &lt;Magento file system owner&gt; -s /bin/bash -c &lt;command&gt;\n        \n\n        If the Magento file system owner does not allow logins you can do the following:\n\n        sudo -u &lt;Magento file system owner&gt;  &lt;command&gt;\n        \n      \n      \n        To run Magento commands from any directory, add &lt;your Magento install dir&gt;/bin to your system PATH.\n\n        Because shells have differing syntax, consult a reference like unix.stackexchange.com.\n\n        bash shell example for CentOS:\n\n        export PATH=$PATH:/var/www/html/magento2/bin\n        \n      \n    \n\n    \n\n  You can also run the commands in the following ways:\ncd &lt;your Magento install dir&gt;/bin and run them as ./magento &lt;command name&gt;\nphp &lt;your Magento install dir&gt;/bin/magento &lt;command name&gt;\n&lt;your Magento install dir&gt; is a subdirectory of your web server's docroot. Need help locating the docroot? Click here.\n\n\n    Remove sample data modules\n    Enter the following command:\n\n    magento sampledata:remove \n    \n\n    \n\n    Prepare to update sample data\n    This command enables you to update sample data before you update the Magento application.\n\n    To prepare sample data for updating, enter the following command:\n\n    magento sampledata:reset\n    \n\n    After that, update the Magento application.\n\n  \n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data-other-cmds.html"
    }
    ,
  
    "guides-v2-0-cloud-howtos-sample-data-html": {
      "title": "Optional - Install sample data",
      "content": "If you need some example data when developing your store, you can install our sample data. This data simulates an active Magento store including customers, products, and other data. This sample data works best with a new “blank site” Magento Commerce (Cloud) template installation when creating your project in your Integration environment.\n\nWe recommend installing sample data in your local Integration branches and environments. If you use this data in Staging or Production, make sure to clear out the information and products before going live.\n\nGet started in a branch\nWe recommend working in a branch to add the sample data. The following information details how to set up a branch.\n\n\n\n  \n    Log in to your local development system, or switch to, the Magento file system owner.\n    Change to a directory to which the Magento file system owner has write access.\n    \n      Enter the following command in a terminal to log in to your project:\n\n      magento-cloud login\n      \n    \n    \n      List your projects. With the project ID, you can complete additional commands.\n\n      magento-cloud project:list\n      \n    \n    \n      If necessary, clone the project to your local. You should have cloned when setting up your local development workspace.\n\n      magento-cloud project:get &lt;project ID&gt;\n      \n    \n    Change to a project directory. For example, cd /var/www/html/magento2\n    \n      List environments in the project. Every environment includes an active Git branch of your code, database, environment variables, configurations, and services.\n\n      magento-cloud environment:list\n      \n\n      \n  \t\tmagento-cloud environment:list displays environment hierarchies whereas git branch displays does not. If you have any nested environments, use magento-cloud environment:list to see the full list.\n\n    \n    \n      Fetch origin branches to get the latest code:\n\n      git fetch origin\n      \n    \n    \n      Check out, or switch to, a specific branch and environment. Git commands only checkout the Git branch. The Magento Cloud command also switches to the active environment.\n\n      magento-cloud environment:checkout &lt;environment ID&gt;\n      \n\n      To create a new environment, use magento-cloud environment:branch &lt;environment name&gt; &lt;parent environment ID&gt;\n    \n    \n      Pull any updated code to your local for the environment ID (which is the Git branch):\n\n      git pull origin &lt;environment ID&gt;\n      \n    \n    \n      Create a snapshot of the environment as a backup:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  Install sample data\n  To install sample data:\n\n  \n    If you have not done so already, check out the environment in which to install sample data.\n    \n      In a terminal, enter the following commands:\n\n      &lt;Magento root dir&gt;/bin/magento sampledata:deploy\n      \n    \n    Wait for components to update.\n    \n      Commit and push the changes:\n\n      git add -A &amp;&amp; git commit -m \"Install sample data\"\ngit push origin &lt;branch name&gt;\n      \n    \n    Wait for the project to deploy.\n    Verify the installation was successful by going to your storefront main page in the Integration environment. You can locate the URL link to the storefront through the Project Web Interface.\n    \n      Take a snapshot of your environment:\n\n      magento-cloud snapshot:create -e &lt;environment ID&gt;\n      \n    \n  \n\n  You can start testing your development with live data!\n\n  Related topics\n  \n    Install, manage, and upgrade modules\n    Merge and delete an environment\n  \n\n",
      "url": "/guides/v2.0/cloud/howtos/sample-data.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-sample-data-html": {
      "title": "Install, remove, or update optional sample data modules",
      "content": "\n\n  Introduction to Magento sample data\n  Magento sample data provides a storefront based on the Luma theme outfitted with products, categories, customer registration, and so on. It functions just like a Magento storefront and you can manipulate prices, inventory, and promotional pricing rules using the Magento Admin.\n\n  You can install sample data either before or after installing the Magento software. When you’re done with the sample data, you can either remove it or you can install it fresh as discussed in Remove sample data modules or update sample data.\n\n  \n    There is currently no way to uninstall sample data. We recommend you use sample data only to learn about how Magento works. Avoid doing any development in a system in which you installed sample data.\n\n\n  You can install optional sample data in any of the following ways:\n\n  \n\t\n\t\t\n\t\t\tInstallation method\n\t\t\tDescription\n\t\t\tRequired skill level\n\t\t\n\t\t\n\t\n\t\tUsing Composer\n\t\tRun magento sampledata:deploy to modify Magento's root composer.json to enable sample data modules.\n\t\tRequires Composer knowledge and access to the Magento file system.\n\t\n\t\n\t\tCloning repositories\n\t\tClone the Magento 2 repository and the sample data repository, then link them together.\n\t\tFor contributing developers only. Everyone else should use one of the preceding methods.\n\t\n\t\n\n\n  \n\n\n",
      "url": "/guides/v2.0/install-gde/install/sample-data.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-security-performance-data-bp-html": {
      "title": "Security, Performance, and Data Handling",
      "content": "You should make sure that your {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} handles data with care in order to prevent sensitive information from being exposed. Incorrect handling of data requests or class usage can negatively impact your extension and create security vulnerabilities. Consider applying the following best practices to your extension to improve performance and security.\n\n### Avoid using low-level functionality\n  The Magento application is made up of a variety of components that work together to perform different business functions. We discourage the use of low-level functionality such as the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} `curl_*` functions and encourage the use of high-level components such as [`\\Magento\\Framework\\HTTP\\Adapter\\Curl`]({{site.mage2000url}}lib/internal/Magento/Framework/HTTP/Adapter/Curl.php). The use of low-level functionality can make Magento behave in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the application to attack.\n\n  For a list of discouraged low-level functions, we suggest you look at the [list of discouraged functions](https://github.com/magento/marketplace-eqp/blob/master/MEQP1/Sniffs/Security/DiscouragedFunctionSniff.php){:target=\"_blank\"} for [Magento Extension Quality Program Coding Standard](https://github.com/magento/marketplace-eqp){:target=\"_blank\"}.\n\n### Use wrappers instead of superglobal variables\n  Make sure that your Magento application does not directly use any PHP superglobals such as:\n  ```\n  $GLOBALS, $_SERVER, $_GET, $_POST, $_FILES, $_COOKIE, $_SESSION, $_REQUEST, $_ENV\n  ```\n  . Instead use the [`Magento\\Framework\\HTTP\\PhpEnvironment\\Request`]({{site.mage2000url}}lib/internal/Magento/Framework/HTTP/PhpEnvironment/Request.php){:target=\"_blank\"} wrapper class to safely access these values.\n\n### Use the correct MySQL data types\n  MySQL offers a range of numeric, string, and time data types. If you are storing a date, use a DATE or DATETIME field. Using an INTEGER or STRING can make SQL queries more complicated, if not impossible. It is often tempting to invent your own data formats; for example, storing serialized PHP objects in string. Database management may be easier, but MySQL will become a dumb data store and it may lead to problems later.\n\n### Get the correct data from the correct object\n  Be sure to retrieve data from the correct object. For example, get {% glossarytooltip fd4bed67-7130-4415-8a6f-ad8d8ef8f25e %}SKU{% endglossarytooltip %} data from the Product instead of the Order object.\n\n### Avoid raw SQL queries\n  Raw SQL queries can lead to potential security vulnerabilities and database portability issues. Use data adapter capabilities ([`Magento\\Framework\\DB\\Adapter\\Pdo\\Mysql`]({{site.mage2000url}}lib/internal/Magento/Framework/DB/Adapter/Pdo/Mysql.php){:target=\"_blank\"} by default) to build and execute queries and move all data access code to a resource model. Use prepared statements to make sure that queries are safe to execute.\n\n### Use well-defined indexes\n  Foreign keys should have indexes. If you're using a field in a WHERE clause of an SQL query you should have an index on it. Such indexes should cover multiple columns based on the queries needed. As a general rule of thumb, indexes should be applied to any column named in the WHERE clause of a SELECT query.\n\n  For example, assume we have a user table with a numeric ID (the primary key) and an email address. During log on, MySQL must locate the correct ID by searching for an email. With an index, MySQL can use a fast search algorithm to locate the email almost instantly. Without an index, MySQL must check every record in sequence until the address is found.\n\n  It's tempting to add indexes to every column, however, they are regenerated during every table INSERT or UPDATE. That can hit  performance; only add indexes when necessary.\n\n### Avoid using global events\n  Only on rare occasions would it be necessary to use a global {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %}. You should use {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}frontend{% endglossarytooltip %} or {% glossarytooltip 749044c4-a002-4006-a3b8-eace2df90303 %}adminhtml{% endglossarytooltip %} to narrow the scope instead.\n\n### Use Magento data collections\n  Execution of a SQL query is one of the most resource-taxing operations. Running SQL queries in a loop often results in a performance bottleneck. To load the EAV model, several heavy queries are required to execute. As the number of executed queries is multiplied with the number of categories, the result is extremely inefficient and slow code. Instead of loading models in a loop, Magento data collections can help to load a set of models in a very efficient manner.\n\n### Validate input and properly encode or escape output\n  Remember to always validate data from non-trusted data sources. Sanitizing data coming into your extension and produced by it will improve overall security.\n\n  For example, to prevent XSS vulnerability, avoid creating methods that output non-validated user-supplied data without proper {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} encoding.\n\n### Always encrypt sensitive data or configurations\n  Never store sensitive information in clear text within a resource that might be accessible to another control sphere. This type of information should be encrypted or otherwise protected.\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/security-performance-data-bp.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-security-html": {
      "title": "SELinux and iptables",
      "content": "SELinux\nSecurity Enhanced Linux (SELinux) enables CentOS and Ubuntu administrators greater access control over their servers. If you're using SELinux *and* Apache must initiate a connection to another host, you must run the commands discussed in this section.\n\n\n  Magento has no recommendation about using SELinux; you can use it for enhanced security if you wish. If you use SELinux, you must configure it properly or the Magento application will function unpredictably. If you choose to use SELinux, consult a resource like the CentOS wiki to set up rules to enable communication.\n\n\n### Suggestion for installing the Magento software with Apache\nIf you choose to enable SELinux, you might have issues running the installer unless you change the *security context* of some directories as follows:\n\n\tchcon -R --type httpd_sys_rw_content_t /app/etc\n\tchcon -R --type httpd_sys_rw_content_t /var\n\tchcon -R --type httpd_sys_rw_content_t /pub/media\n\tchcon -R --type httpd_sys_rw_content_t /pub/static\n\nThe preceding commands work only with the Apache web server. Because of the variety of configurations and security requirements, we don't guarantee these commands work in all situations. For more information, see:\n\n*\tman page\n*\tserverlab\n\n### Enable inter-server communication\nIf Apache and the database server are on the same host, you can skip this section and continue with Opening Ports In Your Firewall.\n\nTo enable Apache to initiate a connection to another host with SELinux enabled:\n\n1.\tTo determine if SELinux is enabled, use the following command:\n\n\t\tgetenforce\n\n\t`Enforcing` displays to confirm that SELinux is running.\n\n2.\tEnter one of the following commands:\n\n\tCentOS: `setsebool -P httpd_can_network_connect=1`\n\n\tUbuntu: `setsebool -P apache2_can_network_connect=1`\n\nOpening Ports In Your Firewall\nDepending on your security requirements, you might find it necessary to open port 80 and other ports in your firewall. Because of the sensitive nature of networking security, Magento strongly recommends you consult with your IT department before proceeding. Following are some suggested references:\n\n*\tUbuntu: Ubuntu documentation page.\n*\tCentOS: CentOS how-to and CentOS reference page.\n\n#### Related topics:\n\n*\tApache\n*\tPHP 5.5, 5.6, or 7.0&mdash;Ubuntu\n*\tPHP 5.5, 5.6, or 7.0&mdash;CentOS\n*\tMySQL\n*\tInstalling optional software\n*\t[How to get the Magento software]({{ page.baseurl }}install-gde/bk-install-guide.html)\n",
      "url": "/guides/v2.0/install-gde/prereq/security.html"
    }
    ,
  
    "guides-v2-0-architecture-security-intro-html": {
      "title": "Security overview",
      "content": "## Enhanced password management\n\nMagento has strengthened the hashing algorithms (SHA-256) used in password management.\n\n## Improved prevention of cross-site scripting (XSS) attacks by making escaped data the default\n\nThe Magento Framework has adopted conventions that regulate the escaping of data in output. These conventions include the ability to escape  output for {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} pages (HTML, JSON, and JavaScript) and email. Where possible, escaping is transparent to client code. See Security measures against XSS attacks in the {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}Frontend{% endglossarytooltip %} Developer Guide.\n\n## More flexible file system ownership and permissions\n\nStarting in version 2.0.6, Magento no longer explicitly sets file system permissions. Instead, we recommend that certain files and directories be writable in a development environment and read-only in a production environment.\n\nTo provide you with a simple way to restrict access to the file system in production, we provide the flexibility for you to further restrict those permissions using a [umask](http://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html){:target=\"_blank\"}.\n\nFor an overview, see [Overview of ownership and permissions]({{page.baseurl}}install-gde/prereq/file-sys-perms-over.html).\n\nFor details about ownership and permissions in development and production, see [Magento ownership and permissions in development and production]({{page.baseurl}}).\n\n## Improved prevention of clickjacking exploits\n\nMagento safeguards your store from clickjacking attacks by using an X-Frame-Options HTTP request header. For more information, see  X-Frame-Options header.\n\n## Use of non-default Magento Admin URL\n\nA simple {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} (like `admin` or `backend`) makes it easy to target attacks on specific locations using automated password guessing. To prevent against this type of attack, Magento by default creates a random Admin URI when you install the product. The CLI is provided so that you can  see the password if you forget it. You can also use the CLI to change this URI.  Although the use of a non-default admin URL will not secure the site, its use will help prevent large-scale automated attacks. See Display or change the Admin URI in Configuration Guide for more information.\n\n## Related topics\n\nConfiguration Guide\n",
      "url": "/guides/v2.0/architecture/security_intro.html"
    }
    ,
  
    "guides-v2-0-config-guide-secy-secy-cron-html": {
      "title": "Secure cron.php to run in a browser",
      "content": "This topic discusses securing `pub/cron.php` to prevent it from being used in a malicious exploit. If you don't secure cron, any user could potentially run cron to attack your Magento application.\n\nThe Magento cron job runs a number of scheduled tasks and is a vital part of your Magento configuration. Scheduled tasks include, but are not limited to:\n\n-   Reindexing\n-   Generating e-mails\n-   Generating newsletters\n-   Generating sitemaps\n\n\nRefer to [Configure and run cron]({{page.baseurl}}config-guide/cli/config-cli-subcommands-cron.html#config-cli-cron-group-run) for more information about cron groups.\n\n\nYou can run a Magento cron job in the following ways:\n\n-   Using the [`magento cron:run`]({{page.baseurl}}config-guide/cli/config-cli-subcommands-cron.html#config-cli-cron-group-run) command either from the command line or in a crontab\n-   Accessing `pub/cron.php?[group=]` in a web browser\n\n\nYou don't need to do anything if you use the [`magento cron:run`]({{page.baseurl}}config-guide/cli/config-cli-subcommands-cron.html#config-cli-cron-group-run) command to run cron because it uses a different process that is already secure.\n\n\n## Secure cron with Apache\nThis section discusses how to secure cron using [HTTP Basic authentication](http://tools.ietf.org/html/rfc2617\"){:target=\"&#95;blank\"} with Apache. These instructions are based on Apache 2.2 with CentOS 6. For more information, refer to one of the following resources:\n\n-   [Apache 2.2 authentication and authorization tutorial](http://httpd.apache.org/docs/2.2/howto/auth.html){:target=\"&#95;blank\"}\n-   [Apache 2.4 authentication and authorization tutorial](http://httpd.apache.org/docs/2.4/howto/auth.html){:target=\"&#95;blank\"}\n\n### Create a password file\nFor security reasons, you can locate the password file anywhere except your web server docroot. In this example, we're storing the password file in a new directory.\n\nEnter the following commands as a user with `root` privileges:\n\n\tmkdir -p /usr/local/apache/password\n\thtpasswd -c /usr/local/apache/password/passwords \n\nWhere `` can be the web server user or another user. In this example, we use the web server user, but the choice of user is up to you.\n\nFollow the prompts on your screen to create a password for the user.\n\nTo add another user to your password file, enter the following command as a user with `root` privileges:\n\n\thtpasswd /usr/local/apache/password/passwords \n\n### Add users to create an authorized cron group (optional)\nYou can also enable more than one user to run cron by adding these users to your password file as well as a group file.\n\nTo add another user to your password file:\n\n\thtpasswd /usr/local/apache/password/passwords \n\nTo create an authorized group, create a group file anywhere outside the web server docroot. The group file specifies the name of the group and the users in the group. In this example, the group name is `MagentoCronGroup`.\n\n\tvim /usr/local/apache/password/group\n\nContents of the file:\n\n\tMagentoCronGroup:  ... \n\n### Secure cron in `.htaccess`\nTo seecure cron in Magento's `.htaccess` file:\n\n1.\tLog in to your Magento server as, or switch to, the {% glossarytooltip 5e7de323-626b-4d1b-a7e5-c8d13a92c5d3 %}Magento file system owner{% endglossarytooltip %}.\n2.\tOpen `/pub/.htaccess` in a text editor.\n\n\t(Because `cron.php` is located in the `pub` directory, edit this `.htaccess` only.)\n\n3.\t*Cron access for one or more users.* Replace the existing `` directive with the following:\n\n\t\t\n    \t\tAuthType Basic\n    \t\tAuthName \"Cron Authentication\"\n    \t\tAuthUserFile /usr/local/apache/password/passwords\n    \t\tRequire valid-user\n\t\t\n3.\t*Cron access for a group.* Replace the existing `` directive with the following:\n\n\t\t\n    \t\tAuthType Basic\n    \t\tAuthName \"Cron Authentication\"\n    \t\tAuthUserFile /usr/local/apache/password/passwords\n    \t\tAuthGroupFile \n    \t\tRequire group \n\t\t\n4.\tSave your changes to `.htaccess` and exit the text editor.\n6.\tContinue with [Verify cron is secure](#verify-cron-is-secure).\n\n## Secure cron with nginx\nThis section discusses how to secure cron using the {% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %} web server. You must perform the following tasks:\n\n1.\tSet up an encrypted password file for nginx\n2.\tModify your nginx configuration to reference the password file when accessing `pub/cron.php`\n\n### Create a password file\nConsult one of the following resources to create a password file before continuing:\n\n-   [How To Set Up Password Authentication with Nginx on Ubuntu 14.04 (DigitalOcean)](https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-nginx-on-ubuntu-14-04){:target=\"&#95;blank\"}\n-   [Basic HTTP Authentication with nginx (howtoforge)](https://www.howtoforge.com/basic-http-authentication-with-nginx){:target=\"&#95;blank\"}\n\n### Secure cron in `nginx.conf.sample`\nMagento provides an optimized sample nginx configuration file out of the box. We recommend modifying it to secure cron.\n\n1.  Add the following to your Magento [`nginx.sample.conf`]({{site.mage2000url}}nginx.conf.sample){:target=\"&#95;blank\"} file:\n\n    ``` shell\n    #Securing cron\n    location ~ cron\\.php$ {\n       auth_basic \"Cron Authentication\";\n       auth_basic_user_file /etc/nginx/.htpasswd;\n\n       try_files $uri =404;\n       fastcgi_pass   fastcgi_backend;\n       fastcgi_buffers 1024 4k;\n\n       fastcgi_read_timeout 600s;\n       fastcgi_connect_timeout 600s;\n\n       fastcgi_index  index.php;\n       fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n       include        fastcgi_params;\n    }\n    ```\n\n2.  Restart nginx:\n\n    ``` shell\n    systemctl restart nginx\n    ```\n\n6.\tContinue with [Verify cron is secure](#verify-cron-is-secure).\n\n## Verify cron is secure\nThe easiest way to verify that `pub/cron.php` is secure is to verify that it's creating rows in the `cron_schedule` Magento database table after you set up password authentication. This example uses SQL commands to check the database, but you can use whatever tool you like.\n\n\nThe `default` cron you're running in this example runs according to the schedule defined in `crontab.xml`. Some cron job runs only once a day. The first time you run cron from the browser, the `cron_schedule` table is updated, but subsequent `pub/cron.php` requests run at the configured schedule.\n\n\nTo verify cron is secure:\n\n1.  Log in to your Magento database as either the Magento database user or as `root`.\n\n\tFor example,\n\n\t\tmysql -u magento -p\n\n2.\tUse the Magento database:\n\n\t\tuse ;\n\n\tFor example,\n\n\t\tuse magento;\n3.\tDelete all rows from the `cron_schedule` database table:\n\n\t\tTRUNCATE TABLE cron_schedule;\n4.\tRun cron from a browser:\n\n\t\thttp[s]:///cron.php?group=default\n\n\tFor example,\n\n\t\thttp://magento.example.com/cron.php?group=default\n\n5.  When prompted, enter an authorized user's name and password. The following figure shows an example.\n\n    ![Authorizing cron using HTTP Basic]({{site.baseurl}}common/images/cron_auth.png)\n\n6.  Verify that rows were added to the table:\n\n    ``` shell\n    SELECT * from cron_schedule;\n\n    mysql> SELECT * from cron_schedule;\n    +-------------+-----------------------------------------------+---------+----------+---------------------+---------------------+-------------+-------------+\n    | schedule_id | job_code                                      | status  | messages | created_at          | scheduled_at        | executed_at | finished_at |\n    +-------------+-----------------------------------------------+---------+----------+---------------------+---------------------+-------------+-------------+\n    |           1 | catalog_product_outdated_price_values_cleanup | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           2 | sales_grid_order_async_insert                 | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           3 | sales_grid_order_invoice_async_insert         | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           4 | sales_grid_order_shipment_async_insert        | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           5 | sales_grid_order_creditmemo_async_insert      | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           6 | sales_send_order_emails                       | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           7 | sales_send_order_invoice_emails               | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           8 | sales_send_order_shipment_emails              | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |           9 | sales_send_order_creditmemo_emails            | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |          10 | newsletter_send_all                           | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:25:00 | NULL        | NULL        |\n    |          11 | captcha_delete_old_attempts                   | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:30:00 | NULL        | NULL        |\n    |          12 | captcha_delete_expired_images                 | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:30:00 | NULL        | NULL        |\n    |          13 | outdated_authentication_failures_cleanup      | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    |          14 | magento_newrelicreporting_cron                | pending | NULL     | 2017-09-27 14:24:17 | 2017-09-27 14:24:00 | NULL        | NULL        |\n    +-------------+-----------------------------------------------+---------+----------+---------------------+---------------------+-------------+-------------+\n    14 rows in set (0.00 sec)\n    ```\n\n## Run cron from a web browser\nYou can run cron anytime using a web browser (e.g., during development).\n\n\nDo _not_ run cron in a browser without securing it first.\n\n\nIf you're using an Apache web server, you must remove the restriction from the `.htaccess` file before you can run cron in a browser:\n\n1.\tLog in to your Magento server as a user with permissions to write to the Magento file system.\n2.\tOpen any of the following in a text editor (depending on your entry point to Magento):\n\n\t\t/pub/.htaccess\n\t\t/.htaccess\n\n3.\tDelete or comment out the following:\n\n\t\t## Deny access to cron.php\n    \t\n        \torder allow,deny\n        \tdeny from all\n    \t\n\n    For example,\n\n    \t## Deny access  to cron.php\n    \t#\n        #\torder allow,deny\n        #\tdeny from all\n    \t#\n\n3.\tSave your changes and exit the text editor.\n\nYou can then run cron in a web browser as follows:\n\n\t//pub/cron.php[?group=]\n\nWhere:\n\n*\t`` is the host name or IP address of your Magento installation\n*\t`` is the web server docroot-relative directory to which you installed the Magento software\n\n\tThe exact URL you use to run the Magento application depends on how you configured your web server and virtual host.\n*\t`` is any valid cron group name (optional)\n\nFor example,\n\n\thttp://magento.example.com/magento2/pub/cron.php?group=index\n\n\nYou must run cron twice: first to discover tasks to run and again to run the tasks themselves. Refer to [Configure and run cron]({{page.baseurl}}config-guide/cli/config-cli-subcommands-cron.html#config-cli-cron-group-run) for more information about cron groups.\n\n",
      "url": "/guides/v2.0/config-guide/secy/secy-cron.html"
    }
    ,
  
    "guides-v2-0-config-guide-secy-secy-headers-html": {
      "title": "Prevent cache poisoning",
      "content": "This topic discusses how to prevent {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} poisoning if you use the Microsoft Internet Information Server (IIS) web server. *Cache poisoning* is a method of changing cache contents to include different pages from the same site. For example, it is possible to inject an HTTP 404 (Not Found) error page in place of some benign page (for example, the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} home page), which can lead to a potential denial-of-service (DoS). The malicious page URLs are cached by Varnish or Redis, hence the name *page cache poisoning*.\n\nThese types of attacks can be difficult to detect because they do not result in errors in web server logs.\n\nThis solution applies to the following Magento versions:\n\n*\t2.0.10 and later\n*\t2.1.2 and later\n\n\n  This topic is intended for experienced IIS administrators. \n\n\n### Description\nThe issue results if {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} rewrites are enabled on the IIS server, and any of the following HTTP headers are altered before the request reaches the Varnish or Redis caching service:\n\n*\t`X-Rewrite-Url`\n*\t`X-Original-Url`\n*\t`IIS-wasurlrewritten`\n*\t`Unencoded-URL`\n*\t`Orig-path-info`\n\nIf these headers are changed, the resulting URL and content are cached, resulting in potential vulnerabilities.\n\n### Solution\nWe provide the option to remove the values of all of the preceding headers based on the IIS server setting for `Enable_IIS_Rewrites`.\n\n*\tIf `Enable_IIS_Rewrites` is set to `0`,  the values of the headers are removed.\n*\tIf `Enable_IIS_Rewrites` is set to `1`, the values of the headers are left intact.\n\n\t\n    \tIf you set Enable_IIS_Rewrites to 1, you must not allow the values of the preceding headers to be altered before the request reaches the IIS web server.\n       \n\t\n\n\n",
      "url": "/guides/v2.0/config-guide/secy/secy-headers.html"
    }
    ,
  
    "guides-v2-0-config-guide-secy-secy-xframe-html": {
      "title": "X-Frame-Options header",
      "content": "## Overview\nTo help prevent clickjacking exploits, we added an option to use the X-Frame-Options HTTP request header in requests to your {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}.\n\nThe `X-Frame-Options` header enables you to specify whether or not a browser should be allowed to render a page in a ``, ``, or `` as follows:\n\n*\t`DENY`: Page cannot be displayed in a frame.\n*\t`SAMEORIGIN`: (The default Magento setting.) Page can be displayed only in a frame on the same origin as the page itself.\n*\t`ALLOW-FROM `: Page can be displayed only in a frame on the specified origin.\n\n\n    For security reasons, Magento strongly recommends against running the Magento storefront in a frame.\n\n\n## Implement `X-Frame-Options`\nSet a value for `X-Frame-Options` in `/app/etc/env.php`. Following is the default value:\n\n\t  'x-frame-options' => 'SAMEORIGIN',\n\nWe require you to edit `env.php` because it's more secure than setting a value in the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}.\n\n## Verify your setting for `X-Frame-Options`\nTo verify your setting, view HTTP headers on any storefront page. There are several ways to do this, including using a web browser inspector.\n\nThe following example uses curl, which you can run from any machine that can connect to your Magento server over the HTTP protocol.\n\nUse the following command:\n\n\tcurl -I -v --location-trusted ''\n\nLook for the `X-Frame-Options` value in the headers.\n\n## For more information\n*\tmozilla.org\n*\tsecurity.stackexchange.com\n*\tMSDN blog\n\n",
      "url": "/guides/v2.0/config-guide/secy/secy-xframe.html"
    }
    ,
  
    "guides-v2-0-config-guide-secy-secy-html": {
      "title": "Security settings",
      "content": "## Security settings\n*\tSecure cron.php\n*\tX-Frame-Options header\n",
      "url": "/guides/v2.0/config-guide/secy/secy.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-select-from-list-select-from-list-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Select from list\nIn the Magento Admin, user will often times need to select item(s) from a list of items. This pattern address the variations of list pattern.\n\n\nWhen to Use\n* When user need to select item(s) from a list of items, and each item can be identified simply by one label\n\nVariations\n\n1. Multi-select Dropdown (aka ultra-selector)\n\nThis variation is good for Multi Selection with many options (10+), when the option does not need to be shown immediately or when space needs to be preserved.\n\n\n\n2. Single Select Dropdown \n\nThis variation is good for Single Selection with many options (10+), when the option does not need to be shown immediately or when space needs to be preserved.mmediately or when space needs to be preserved.\n\n\n\n\n3. Multi-Select List Box\n\nThe advantage of a list box is that it exposes more options to the user. The list can be made scroll-able when space is a consideration and/or the list is long. A list box is mandatory when the list of options exceeds 6 items.\n\n\n\n4. Single Select List Box\n\nThe advantage of a list box is that it exposes more options to the user. The list can be made scroll-able when space is a consideration and/or the list is long. A list box is mandatory when the list of options exceeds 6 items.\n\n\n\nAccessibility\n\nThe form drop down, scroll area, and selections should be accessible via keyboard.\n\nFollow this form control accessibility guideline: \n http://www.w3.org/TR/WCAG10-HTML-TECHS/#forms \n\n\nAssets\nPSD files can be found here:\nDownload Variations of Select-From-List ZIP File\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/select_from_list/select_from_list.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-service-contracts-service-contracts-html": {
      "title": "Service contracts",
      "content": "Magento is a modular system that enables third-party developers to customize and overwrite core parts of its framework. This flexibility, however, comes at a price.\nBusiness logic tends to leak across the layers of the Magento system, which manifests as duplicated and inconsistent code.\nMerchants might be reluctant to upgrade Magento because customized extensions that they have purchased might not be compatible with new versions of Magento.\n   Also, Magento and third-party developers can find it difficult to track and report the dependencies that customized extensions have on other extensions.\n\nTo address these issues, the Magento system introduces service contracts.\nWhat is a service contract?\nA {% glossarytooltip cdf644c4-bc99-4550-a954-dd5ae165785a %}service contract{% endglossarytooltip %} is a set of {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} interfaces that are defined for a {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %}.\n   A service contract includes data interfaces, which preserve data integrity, and service interfaces, which hide business logic details from service requestors such as controllers, web services, and other modules.\n\nIf developers define data and service interfaces according to a set of design patterns, the result is a well-defined, durable {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} that other modules and third-party extensions can implement through Magento models and resource models.\n\n\nService contract benefits\nService contracts enhance the modularity of Magento. They enable Magento and third-party developers to report system dependencies through composer.json files and, consequently, guarantee compatibility among Magento versions. This compatibility ensures that merchants can easily upgrade Magento.\nThese contracts ensure a well-defined, durable API that other modules and third-party extensions can implement. Also, these contracts make it easy to configure services as web APIs.\n\nData entities are a side benefit of service contracts.\n   The database tables that normally support these entities can be complicated.\n   For example, some attributes might be stored in an EAV table, so a set of MySQL database tables might define a single data {% glossarytooltip a9027f5d-efab-4662-96aa-c2999b5ab259 %}entity{% endglossarytooltip %}.\n   Data entities in a service contract reveal a simpler data model than the data model in an underlying relational {% glossarytooltip 66b924b4-8097-4aea-93d9-05a81e6cc00c %}database schema{% endglossarytooltip %}.\n   Eventually, you will be able to use different storage technologies for different data collections. For example, you could use a NoSQL database to replace product tables.\n\n\n## Using the @api tag\n\nBackward compatibility can be indicated by the use of `@api`. For more information, see Backward compatibility.\n\nRelated topics\n\n   Service contract design patterns\n   Configure services as web APIs\n   \n\n",
      "url": "/guides/v2.0/extension-dev-guide/service-contracts/service-contracts.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-service-contracts-service-to-web-service-html": {
      "title": "Configure services as web APIs",
      "content": "Overview\nYou can configure a Magento or third-party service as a web {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %}.\nTo configure a web API, you define {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} elements and attributes in the webapi.xml XML configuration file for the {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} for the service.\n   The webapi.xml file for your module specifies an XML schema file for validation.\n   By default, this file is app/code/&lt;VENDOR>/Webapi/etc/webapi.xsd.\n\nYour module can use the default webapi.xsd file or you can create a customized XML schema file for validation.\nUsers can make REST or SOAP calls to access the {% glossarytooltip 377dc0a3-b8a7-4dfa-808e-2de37e4c0029 %}web API{% endglossarytooltip %}.\nTo configure a web API, read these topics:\n\n   \n      Configure a web API\n   \n   \n      webapi.xml configuration options\n   \n   \n      Sample webapi.xml file\n   \n   \n      webapi.xsd XML schema file\n   \n\nConfigure a web API\nTo configure a web API for a service, you define XML elements and attributes in the\n   app/code/Magento/&lt;MODULE&gt;/etc/webapi.xml file, where &lt;MODULE&gt; is the module name.\n   For example, the web API for the Customer service is defined in the app/code/Magento/Customer/etc/webapi.xml configuration file.\n\nService Interface Requirements\n\nAfter a service class is configured using the `webapi.xml` file, Magento dynamically makes the service method available using the web API. Because this is automatically generated, it is important that the service class be formatted a very specific way.\n\nThis makes sense when you consider that while a service class possibly expects objects of a specific class type (such a save method) and possibly returns a result that is a class or array of classes, neither SOAP nor REST are guaranteed to have that class defined on the client end or even to have a concept similar to a {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} class. Because of this, Magento uses reflection to automatically create these classes and sets data that you have submitted in JSON or HTTP array syntax onto an instance of the expected PHP class when calling the service method.  \n\nConversely, if an object is returned from one of these methods, Magento automatically converts that PHP object into a JSON or SOAP object before sending it over the web API.\n\nTo do this conversion, the Magento application must know information about both the parameters the service method is expecting and the return type of the result the service method delivers. PHP 5.x does not allow for type-hinting for scalar parameters or for return types so in order to convert the array or JSON object to or from the appropriate class type, PHP relies on the PHP doc block. Specifically, the lines containing `@param` and `@return` must follow certain rules for Magento to be able to correctly convert between types.\n\nFor SOAP and REST to work correctly, the following rules must be followed by the service interface's doc block:\n\n*   All methods exposed by the web API must follow these rules\n*   All methods on objects expected as parameters or returned must follow these rules\n*   Parameters must be defined in the doc block as\n\n        * @param type $paramName\n*   Return type must be defined in the doc block as\n\n        * @return type\n*   Valid scalar types include: `mixed` (or `anyType`), `bool` (or `boolean`), `str` (or `string`), `integer` (or `int`), `float`, and `double`.\n*   Valid object types include a fully qualified class name or a fully qualified interface name.\n*   Any parameters or return values of type array can be denoted by following any of the previous types by an empty set of square brackets `[]`\n\nFollowing are some examples of various types and what they would look like in the doc block:\n\n*   A parameter $types which can be an array of strings:\n\n        * @param string[] $types\n*   A parameter $id which can be an integer:\n\n        * @param int $id\n*   A parameter $customer which is an object of class `\\Magento\\Customer\\Api\\Data\\CustomerInterface`:\n\n        * @param \\Magento\\Customer\\Api\\Data\\CustomerInterface $customer\n\n    Note that even if the class `\\Magento\\Customer\\Api\\Data\\CustomerInterface` is in the same namespace (or a sub-namespace) of the current class or a use statement has exists at the top of the class, the fully qualified namespace must be used or the web API throws an exception.\n\n*   A return which is an array of objects of type `\\Magento\\Customer\\Api\\Data\\CustomerInterface`:\n\n        * @return \\Magento\\Customer\\Api\\Data\\CustomerInterface[]\n\n\n\n  If a service method argument is called item, there will be a problem during SOAP processing. All item nodes are removed during SOAP request processing. This is done to unwrap array items that are wrapped by the SOAP server into an item element. \n\n\nwebapi.xml configuration options\nTo define web API components, set these attributes on these XML elements in the\n   webapi.xml configuration file, as follows:\n\n\n   \n      XML&nbsp;element\n      Description\n      Attributes\n   \n   \n      \n         &lt;routes&gt;\n      \n      \n         Required. Root element that defines the namespace and location of the XML schema file.\n      \n      \n         \n            \n               xmlns:xsi. Required. Defines the namespace for the XML schema instance.\n            \n            \n               xsi:noNamespaceSchemaLocation. Required. Defines the path and file name of the XML schema file to use to validate the web API.\n            \n         \n      \n   \n   \n      \n         &lt;route&gt;\n      \n      \n         Required. Child element of &lt;routes&gt;. Defines the HTTP route for the web API method.\n      \n      \n         \n            \n               method. Required. String. HTTP method. Valid values are GET, POST, PUT, and DELETE.\n            \n            \n               url. Required. String.\n                  Magento resource. Optionally, one or more template parameters.\n               \n            \n            \n               secure. Optional. Boolean. Indicates that the route is accessible over only HTTPS. Any attempts to access this route over non-secure causes an exception.\n            \n         \n      \n   \n   \n      \n         &lt;service&gt;\n      \n      \n         Required. Child element of &lt;route&gt;. Defines the implemented interface and the web API method name.\n      \n      \n         \n            \n               class. Required. String. Location and name of implemented interface.\n            \n            \n               method. Required. String. Web API method name.\n            \n         \n      \n   \n   \n      \n         &lt;resources&gt;\n      \n      \n         Required. Child element of &lt;route&gt;. Container for one or more resource definitions.\n      \n      \n         None.\n      \n   \n   \n      \n         &lt;resource&gt;\n      \n      \n         Required. Child element of &lt;resources&gt;. Defines a resource to which the caller must have access.\n      \n      \n         \n            \n               ref.\n                  Required. Referenced resource. Valid values are self, anonymous, or a Magento resource, such as Magento_Customer::group.\n               \n               Note:The Magento web API framework enables guest users to access resources that are configured with anonymous permission.\n                  Any user that the framework cannot authenticate through existing authentication\n                     mechanisms is considered a guest user.\n\n            \n         \n      \n   \n   \n      \n         &lt;data&gt;\n      \n      \n         Optional. Child element of &lt;route&gt;. Container for one or more parameter definitions.\n      \n      \n         None.\n      \n   \n   \n      \n         &lt;parameter&gt;\n      \n      \n         Required if &lt;data&gt; is specified. Child element of &lt;data&gt;. Defines a parameter.\n      \n      \n         \n            \n               name. String. Parameter name.\n            \n            \n               force. Boolean.\n            \n         \n      \n   \n\nSample webapi.xml file\nThis excerpt is from the webapi.xml file that defines the Customer service web API:\n\nIn this webapi.xml example:\n\n   \n      Line\n      Defines\n   \n   \n      \n         3\n      \n      \n         The XML schema file that is used to validate the XML.\n         The XML schema file is xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi:etc/webapi.xsd.\n      \n   \n   \n      \n         5\n      \n      \n         The HTTP method and web resource through which to access the route.\n         The HTTP method is GET.\n         The resource is /V1/customerGroups/:id. Users must substitute a customer ID for the id template parameter.\n      \n   \n   \n      \n         6\n      \n      \n         The interface that the route implements and the name of the web API method.\n         The route implements the Magento\\Customer\\Api\\GroupRepositoryInterface interface.\n         The web API method name is get.\n      \n   \n   \n      \n         8\n      \n      \n         The resource to which the caller must have access.\n         The caller must have access to Magento_Customer::group resource.\n      \n   \n   \n      \n         18\n      \n      \n         A required parameter.\n         The id parameter is required on GET calls to /V1/customers/me/billingAddress.\n      \n   \n\nwebapi.xsd XML schema file\nThe webapi.xml file for your module must specify an XML schema file for validation. Your webapi.xml file can specify the default or a customized XML schema file.\nThe default webapi.xsd XML schema file can be found in the app/code/Magento/Webapi/etc directory.\n",
      "url": "/guides/v2.0/extension-dev-guide/service-contracts/service-to-web-service.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-service-layer-html": {
      "title": "Service layer",
      "content": "## What is a Service layer?\n\nThe service layer provides a bridge between the presentation layer and the model layer of {% glossarytooltip 41aee03b-a5d5-49c2-8839-894090ef4e86 %}domain{% endglossarytooltip %} logic and resource-specific data.\nThis is implemented using *service contracts*, which are defined using {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} interfaces.\n\nIn general, the service layer:\n\n* Resides below the presentation layer and above the domain layer.\n\n* Contains service contracts, which define how the implementation will behave.\n\n* Provides an easy way to access the REST/SOAP {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} framework code (which also resides above the service contracts).\nYou can bind service contracts to web service APIs in configuration files --- no coding required.\n\n* Provides a stable API for other modules to call into.\n\n## Who accesses the service layer?\n\nAll calls from web service interfaces, or users working with your {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} (that is, controller-initiated requests), are typically routed through the service layer.\nWe strongly encourage the use of service contracts to call business logic.\n\nExternal applications can make requests for business logic with simple SOAP and REST calls.\nWith some simple {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} or JSON, you can expose the service layer's PHP API and make it accessible to REST or SOAP web services.\nOnce implemented, a web service can make a single API call and return an information-rich data structure.\n\n{% glossarytooltip cdf644c4-bc99-4550-a954-dd5ae165785a %}Service contract{% endglossarytooltip %} clients include:\n\n* Controllers (initiated by actions of users of the storefront)\n\n* Web services (SOAP and REST API calls)\n\n* Other Magento modules through service contracts\n\n## Service contract anatomy\n\nThe service contract of a {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} is defined by the set of interfaces in the module's `/Api` directory.\n\nThis directory contains:\n\n* Service interfaces in the `/Api` {% glossarytooltip 621ef86b-7314-4fbc-a80d-ab7fa45a27cb %}namespace{% endglossarytooltip %} of the module (e.g [Catalog API][catalog-api]).\n\n* Data (or *entity*) interfaces in the `Api/Data` directory (e.g. [Catalog API/Data][catalog-api-data]).\n  Data entities* are data structures passed to and returned from service interfaces.\n  \n  Files in the data directory contain `get()` and `set()` methods for entries in the entity table and extension attributes.\n\nTypically, service contracts provide three distinct types of interfaces:\n\n* Repository interfaces\n\n* Management interfaces\n\n* {% glossarytooltip 3f0f2ef1-ad38-41c6-bd1e-390daaa71d76 %}Metadata{% endglossarytooltip %} interfaces\n\nHowever, there is no requirement that service contracts conform to all three patterns.\n\n## Advantages of service contracts\n\nService contracts allow you to add a new customer {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} that adds or changes business logic-level resource models without breaking the system.\n\nThis is done using the *&lt;preference&gt;* element in a custom module's {% glossarytooltip 2be50595-c5c7-4b9d-911c-3bf2cd3f7beb %}dependency injection{% endglossarytooltip %} configuration file (`di.xml`) file.\n\nThe `di.xml` file specifies which PHP class to use for the interface `Magento\\Customer\\Api\\CustomerRepositoryInterface`.\n\nAnother module can change this interface file by specifying a different class name.\nHowever, if the client code uses the interface definition only, no class change is necessary.\n\n## Related topics {#related}\n\nArchitectural diagrams\n\nArchitectural layers overview\n\n[catalog-api]: {{site.mage2000url}}app/code/Magento/Customer/Api\n[catalog-api-data]: {{site.mage2000url}}app/code/Magento/Customer/Api/Data\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/service_layer.html"
    }
    ,
  
    "guides-v2-0-config-guide-sessions-html": {
      "title": "How to locate your session files",
      "content": "{% include config/locate-session.md %}\n",
      "url": "/guides/v2.0/config-guide/sessions.html"
    }
    ,
  
    "guides-v2-0-cloud-env-set-variables-html": {
      "title": "Example setting variables",
      "content": "For security reasons, we strongly recommend you change the Magento Admin URI, administrator user name, and the administrator's password. This makes it harder for someone else to log in to the Magento Admin and change settings.\n\nEnvironment variables are inherited from the parent environment to child environments. You should make these changes in the `master` environment so all other environments start with the same values.\n\nYou can use the same tasks to change any variable discussed in the preceding section.\n\nTo get started, you need a branch to work in. For details, see\n\nTo change the Admin URI and administrator password:\n\n1.  Set the variable values.\n\n        magento-cloud variable:set   -e \n2.  To set the administrator's user name to `meister_x2U8` in the `master` environment, enter:\n\n        magento-cloud variable:set ADMIN_USERNAME meister_x2U8 -e master\n3.  Wait for the project to redeploy.\n4.  To set the administrator's password to `admin_A456`, enter:\n\n        magento-cloud variable:set ADMIN_PASSWORD admin_A456 -e master\n5.  Wait while the project redeploys.\n6.  To set the Admin URI to `magento_A8v10`, enter:\n\n        magento-cloud variable:set ADMIN_URL magento_A8v10 -e master\n7.  Wait while the project redeploys.\n8.  Log in to the Magento Admin using the values you just changed.\n\n    The simplest way to do that is to use the environment routes that display when you redeploy the `master` branch. An example follows:\n\n        Waiting for the activity ksvciptxnzfto (Bob Smith added variable ADMIN_URL):\n            Building application 'mymagento' (runtime type: php:7.0, tree: 07263ba)\n            Slug already built for this tree id, skipping.\n\n        Re-deploying environment k4wtvm7zogr5s-master.\n        Environment configuration:\n            mymagento (type: php:7.0, size: S, disk: 2048)\n            mysql (type: mysql:10.0, size: S, disk: 2048)\n            redis (type: redis:3.0, size: S)\n            solr (type: solr:4.10, size: S, disk: 1024)\n\n        Environment routes:\n            http://master-k4wtvm7zogr5s.us.magentosite.cloud/ is served by application `mymagento`\n            https://master-k4wtvm7zogr5s.us.magentosite.cloud/ is served by application `mymagento`\n\n    In this example, go to `http://master-k4wtvm7zogr5s.us.magentosite.cloud/magento_g8v10` and log in using the user name `admin` and password `admin_A456`\n\nOptional: You can also create an environment and list the environment variables.\n\n    magento-cloud environment:branch \n\nAfter the environment deploys, enter\n\n  \tmagento-cloud variable:get -e \n\nA sample result follows:\n\nID|Value|Inherited|JSON\n---------|-----------|----------|--------\nADMIN_PASSWORD|admin_A456|Yes|No\nADMIN_USERNAME|meister_x2U8|Yes|No\nADMIN_URL|magento_A8v10|Yes|No\n\n#### Related topic\n* [Overview of environment variables]({{page.baseurl}}cloud/env/environment-vars_over.html)\n*\t[Magento Commerce (Cloud) environment variables]({{page.baseurl}}cloud/env/environment-vars_cloud.html)\n*\t[Magento application environment variables]({{page.baseurl}}cloud/env/environment-vars_magento.html)\n*\t[Example setting variables]({{page.baseurl}}cloud/env/set-variables.html)\n",
      "url": "/guides/v2.0/cloud/env/set-variables.html"
    }
    ,
  
    "guides-v2-0-cloud-configure-setup-cron-jobs-html": {
      "title": "Set up cron jobs",
      "content": "Magento uses cron jobs for numerous features to schedule activities. You can add cron jobs to `.magento.app.yaml` and push it to your branches for deployment. For specific information for configuring and setting up cron in Magento, see [Magento Commerce cron information](#croninfo). The following information is specific to creating and deploying cron jobs in {{site.data.var.ece}}.\n\n## Magento Commerce cron information {#croninfo}\nThe following links provide more information on crons for {{site.data.var.ee}}. You can use this information for setting up and understanding cron jobs in Magento. When you want to add cron jobs for {{site.data.var.ece}}, you manage all crons through `.magento.app.yaml`. For more information, review this topic.\n\n* [Set up cron]({{page.baseurl}}install-gde/install/post-install-config.html)\n* [Configure and run cron]({{page.baseurl}}config-guide/cli/config-cli-subcommands-cron.html)\n* [Set up a custom cron job and cron group]({{page.baseurl}}config-guide/cron/custom-cron.html)\n\n## Build a cron job {#build}\nA cron job includes the specification for scheduling and timing and the command to run at that time. For example, the general format is:\n\n  `* * * * * `\n\nYou will add the cron job to `.magento.app.yaml` in the `crons` section. The general format is `spec` for scheduling and `cmd` for the script. For example:\n\n    crons:\n        productcatalog:\n            spec: '20 */3 * * *'\n            cmd: 'bin/magento indexer:reindex catalog_product_category'\n\nThe following example is the default cron included for {{site.data.var.ece}}.\n\n    # Default Magento 2 cron jobs\n    crons:\n        cronrun:\n            spec: \"*/5 * * * *\"\n            cmd: \"php bin/magento cron:run && php bin/magento cron:run\"\n\n\nWe use only this one cron for cloud due to the read-only nature of the environments. This is different from {{site.data.var.ee}} which has three default cron jobs.\n\n\nMagento uses a five value specification for a cron job. The numbers per each `* * * * *` is as follows:\n\n* Minute (0-59)  For all Start environments and Pro Integration environments, the minimum frequency supported for crons is five minutes. You may need to configure settings in your [Magento Admin](#admin).\n* Hour (0-23)\n* Day of month (1 - 31)\n* Month (1 - 12)\n* Day of week (0 - 6) (Sunday to Saturday; 7 is also Sunday on some systems)\n\nFor example:\n\n* `00 */3 * * *` runs every 3 hours at the first minute (12:00 am, 3:00 am, 6:00 am, and so on)\n* `20 */3 * * *` runs every 3 hours at minute 20 (12:20 am, 3:20 am, 6:20 am, and so on)\n* `00 00 * * *` runs once a day at midnight\n* `00 * * * 1` runs once a week on Monday at midnight\n\nWhen determining the scheduling of your cron jobs based on the time it takes to complete the task. For example, if you run a job every three hours and the task takes 40 minutes to complete, you may want to change the scheduled timing.\n\nFor the command script, the format includes:\n\n  ` /`\n\nThe following is an example cron job:\n\n    crons:\n        spec: \"00 */3 * * *\"\n        cmd: \"/usr/bin/php /app/abc123edf890/bin/magento indexer:reindex catalog_category_product\"\n\nWith the settings:\n\n* `` is `/usr/bin/php`\n* `/app/abc123edf890` is the install directory, which includes the Project ID for this example\n* `bin/magento indexer:reindex catalog_category_product` is the script actions\n\n## Configure cron settings in the Magento Admin {#admin}\nDue to the minimum allowed frequency of **five minutes for Starter environments and Pro Integration environments**, you need to change the cron settings defaulted at two minutes in the Magento Admin. If you don't change the settings, crons will never run.\n\nYou do not need to set this for Pro Staging and Production environments.\n\nTo configure:\n\n1. Log into the Magento Admin in your deployed environment: all Starter environments and Pro Integration environments.\n2. Navigate to **Stores** > **Configuration** > **Advanced** > **System**. Expand the **Cron (Scheduled Tasks)** section.\n3. Expand the **Cron configuration options for group: index** section.\n4. For the **Missed if Not Run Within** setting, deselect the checkbox for Use system value. Change the value from 2 to 10 minutes.\n5. Expand the **Cron configuration options for group: staging** section.\n4. Change the **Missed if Not Run Within** setting, deselect the checkbox for Use system value. Change the value from 2 to 10 minutes.\n5. Expand the **Cron configuration options for group: catalog_event** section.\n4. Change the **Missed if Not Run Within** setting, deselect the checkbox for Use system value. Change the value from 2 to 10 minutes.\n5. Save the changes.\n\n## Add cron jobs to .magento.app.yaml {#add-cron}\nYou should add all cron jobs to your [`.magento.app.yaml`]({{page.baseurl}}cloud/project/project-conf-files_magento-app.html) file in the the `crons` section. We include a default cron job for Magento in the default file:\n\n    # Default Magento 2 cron jobs\n    crons:\n        cronrun:\n            spec: \"*/5 * * * *\"\n            cmd: \"php bin/magento cron:run && php bin/magento cron:run\"\n\n1. Edit `.magento.app.yaml` in the root directory of the Magento code in the Git branch.\n2. Locate the `crons` section in the file and add your custom cron code.\n\n    For example, you could add a reindexer cron job to run every three hours, 20 minutes after the hour (such as 12:20 am, 3:20 am, and so on):\n\n        crons:\n            magento:\n                spec: '*/5 * * * *'\n                cmd: 'php bin/magento cron:run && php bin/magento cron:run'\n            productcatalog:\n                spec: '20 */3 * * *'\n                cmd: 'bin/magento indexer:reindex catalog_product_category'\n\n4. Save the file and push updates to the Git branch.\n\n## Add cron jobs to environments {#env}\nWhen you push the code, the cron jobs will be added to and run in the following environments:\n\n* Starter: All environments you push to including `Master`\n* Pro: Only Integration environments you push to including `Master`\n\nTo add the cron jobs to Pro plan Staging and Production, you must [enter a ticket to Support]({{page.baseurl}}cloud/trouble/trouble.html). Request to have the cron jobs in `.magento.app.yaml` added to those environments. We recommend pushing the updates through to the Integration `master` branch.\n\nWe manage cron jobs on Pro plan Staging and Production environments using Jenkins. These cron jobs do not run precisely against the system clock. If Jenkins encounters lag, the cron jobs may run occassionally late.\n\n## Update cron jobs {#update}\nIf you need to change or update your cron jobs, update the crons section in your `.magento.app.yaml` file. Push the file to your Git branch and deploy across environments.\n\nFor Pro plan Staging and Production environments, please [enter a ticket to Support]({{page.baseurl}}cloud/trouble/trouble.html) to review, remove, or modify these cron jobs. To update a cron job, we recommend pushing the updates through to the Integration `master` branch in the `.magento.app.yaml` file. Cron jobs for Pro plan Staging and Production environments are not available through a Cron tab.\n",
      "url": "/guides/v2.0/cloud/configure/setup-cron-jobs.html"
    }
    ,
  
    "guides-v2-0-pattern-library-templates-sign-in-form-sign-in-form-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Sign-in form\n\"Sign in\" is used to log into the system, or to recover a lost password.\n\nWhen to Use\nUse this pattern when user needs to sign into the system.\n\nInteraction and Behavior\n\n#### General:\n\nThe user may \"tab\" to navigate the form in the following order:\n\nFirst tab = active \"Username\" field.\nSecond tab = active \"Password\" field.\nThird tab = focus on \"Sign in\" button.\nFourth tab = focus on hyperlink (\"Forgot your password?\")\nFifth tab = return to top of the order.\n\n#### Initial state:\n\nIn its initial state the sign-in {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} consists of \n\n* a Welcome message \n* two text fields – **Username** and **Password**\n* a link to retrieve the user’s password \n* a button to submit the user’s credentials – **Sign in**\n\n\n\n#### Error state:\n\nIn the {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} that invalid credentials are submitted the sign-in module consists of \n\n* an alert message informing the user that either the Username or Password is invalid \n* two text fields – **Username** and **Password**, where the Username field will retain the initial entry as \ntyped by the user and be the active field and the password field will be blank \n* a link to retrieve the user’s password \n* a button to submit the user’s credentials – **Sign in**\n\n\n\n\n#### Password retrieval:\n\nIf the user opts to retrieve their password via the hyperlink (\"Forgot your password?\") the sign-in module will display \n\n* the title **Password Help** in the style of the Welcome message from the initial state \n* instructional text explaining the process for retrieving one’s password \n* a text field to enter the user’s email address used at the time of registration; a button to submit the user’s email address and initiate the process – **Retrieve Password**\n* a link to cancel the retrieval and return to the initial state of the sign-in module – \"Back to Sign in\"\n\n\n\n\n#### Confirmation of password retrieval:\n\nOnce a user submits their email address to retreive their password, the module will provide a confirmation on the action via text in the module. \n* the title **Password Help** in the style of the Welcome message from the initial state \n* text confirming that an email has been sent\n* a link to return to the initial state of the sign-in module – \"Back to Sign in\"\n\n\n\n#### Error of password retrieval:\n\nIn the event that the user enters an invalid email address, either by mistyping or by entering an unregistered email address, the module will display an alert message.\n* the title Password Help in the style of the Welcome message from the initial state \n* an alert message indicating the email address failed\n* a text field to enter the user’s email address used at the time of registration; a button to submit the user’s email address and initiate the process – Retrieve Password \n* a link to cancel the retrieval and return to the initial state of the sign-in module – \"Back to Sign in\"\n\n\n\n#### Successful sign-out:\n\nWhen the user signs out of the system they are presented with the sign-in module as follows\n\n* an alert message informing the user that sign-out was successful \n* two text fields – **Username** and **Password**\n* a link to retrieve the user’s password\n* a button to submit the user’s credentials – **Sign in**.\n\n\n\nStyle\n\nSuggested specifications.\n\nThe module container should be centered in the browser and should be some percentage of the width viewport (about one-half) but no less that 450px on desktop and tablet form factors.\n\n#### Initial state:\n\n\n\n#### Error state:\n\n\n\n#### Password Retrieval:\n\n\n\n#### Confirmation of password retrieval:\n\n\n\n#### Error of password retrieval:\n\n\n\n#### Successful sign-out:\n\n\n\n\nAssets\n\nFor any questions or additional information about the sign-in module please contact the Magento User Experience and Product Design team.\n\nDownload Sign-In form source\n\n",
      "url": "/guides/v2.0/pattern-library/templates/sign-in-form/sign-in-form.html"
    }
    ,
  
    "guides-v2-0-config-guide-prod-single-machine-deployment-html": {
      "title": "Single machine deployment",
      "content": "This topic provides instructions for deploying updates to Magento on a production server using the command line.\n\nThis process applies to technical users responsible for stores running on a single machine with some themes and locales installed.\n\nFor less technical users, i.e. business users, we recommend using the [System Upgrade][9] feature in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %}.\n\n## Assumptions\n\n* You installed Magento using [Composer][8] or a [compressed archive][7].\n* You are directly applying updates to the server.\n\n\nThis guide does not apply if you used `git clone` to install Magento.\nContributing developers should use [this guide][6] to update their Magento installation.\n\n\n## Deployment steps\n\n1. Log in to your production server as, or switch to, the [Magento file system owner][10].\n\n2. Change directory to the Magento base directory:\n\n        cd \n\n3. Enable maintenance mode using the command:\n\n        php bin/magento maintenance:enable\n\n4. Apply updates to Magento or its components using the following command pattern:\n\n        composer require   --no-update\n\n   **package**: The name of the package you want to update.\n\n   For example:\n\n   * `magento/product-community-edition`\n   * `magento/product-enterprise-edition`\n\n   **version**: The target version of the package you want to update.\n\n5. Update Magento's components with Composer:\n\n        composer update\n\n6. Update the {% glossarytooltip 66b924b4-8097-4aea-93d9-05a81e6cc00c %}database schema{% endglossarytooltip %} and data:\n\n        php bin/magento setup:upgrade\n\n7. Compile the code:\n\n        php bin/magento setup:di:compile\n\n8. Deploy static content:\n\n        php bin/magento setup:static-content:deploy\n\n9. Exit maintenance mode:\n\n        php bin/magento maintenance:disable\n\n## Alternative deployment strategies\n\nFor deployment strategies developed by the Magento community, see the blog posts listed under the [Install/deploy][11] section in our Community Resources page.\n\nIn Magento 2.2, a near-zero downtime deployment model will be available for a variety of complex environments, including {{site.data.var.ece}}.\n\n## Related topics\n\n* [Enable or disable maintenance mode][4]\n* [Command line upgrade][1]\n* [Update the Magento application][2]\n* [User Guide: Web Setup Wizard][3]\n* [Running the System Upgrade][9]\n\n[0]: {{page.baseurl}}\n[1]: {{page.baseurl}}comp-mgr/cli/cli-upgrade.html\n[2]: {{page.baseurl}}install-gde/install/cli/dev_update-magento.html\n[3]: http://docs.magento.com/m2/ce/user_guide/system/web-setup-wizard.html\n[4]: {{page.baseurl}}install-gde/install/cli/install-cli-subcommands-maint.html\n[5]: {{page.baseurl}}config-guide/bootstrap/magento-modes.html#production-mode\n[6]: {{page.baseurl}}install-gde/install/cli/dev_options.html\n[7]: {{page.baseurl}}install-gde/prereq/zip_install.html\n[8]: {{page.baseurl}}install-gde/prereq/integrator_install.html\n[9]: {{page.baseurl}}comp-mgr/upgrader/upgrade-start.html\n[10]: {{page.baseurl}}install-gde/prereq/file-sys-perms-over.html#magento-file-system-owner\n[11]: {{site.baseurl}}community/resources/#installdeploy\n",
      "url": "/guides/v2.0/config-guide/prod/single-machine-deployment.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-site-availability-html": {
      "title": "Site availability",
      "content": "If you have site availability issues, the first thing you should do is review your [deployment logs]({{page.baseurl}}cloud/trouble/environments-logs.html#log-deploy-log) to see if you can identify the problem.\n\nYou may be able to resolve your issue by searching your logs for one of the examples in this topic and trying the associated solution.\n\n## CredisException\nThis exception is caused by a known issue with how Magento handles simultaneous connections to Redis during static content deployment in the deploy phase.\n\n    [2018-01-30 18:56:52] Generating static content for locales: en_US\n    [2018-01-30 18:56:52] Command:php ./bin/magento setup:static-content:deploy --jobs=3  en_US\n\n      [CredisException]\n      read error on connection\n\nDuring static content deployment in the deploy phase, the default number of processing jobs is set to `3`. We recommend setting the number of processing jobs to `1` as a workaround.\n\nYou can also move static content deployment from the deploy phase to the build phase, which does not have access to Redis. Refer to [Configuration management](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-over.html) for more information.\n\n\nStatic content deployment in the build phase also reduces downtime. The deploy phase puts your application in maintenance mode, which takes your site offline until static content deployment is complete. If static content deployment fails in the deploy phase, your site gets stuck in maintenance mode. A failure during the build phase prevents deployment, which prevents downtime.\n\n\n### Symptoms\n-   Your site is not functioning at all. HTTP requests result in 50x errors.\n-   Your site is functioning normally, but fails to refresh static assets.\n\n### Solution\nModify the deploy phase using the `STATIC_CONTENT_THREADS` environment variable and redeploy your site.\n\n1.  In a terminal, log in to your project.\n\n        magento-cloud-login\n\n1.  Set the variable.\n\n        magento-cloud variable:set STATIC_CONTENT_THREADS '1' -e \n\nRefer to [Manage variables]({{page.baseurl}}cloud/env/environment-vars_over.html) and [Redis and static-content deployment]({{page.baseurl}}cloud/trouble/redis-troubleshooting.html#static-content) for more information.\n\n\nFor Pro projects **created before October 23, 2017**, you must open a [support ticket]({{page.baseurl}}cloud/trouble/trouble.html) to add this environment variable to your production and staging environments.\n\n",
      "url": "/guides/v2.0/cloud/trouble/site-availability.html"
    }
    ,
  
    "guides-v2-0-pattern-library-containers-slideouts-modals-overlays-slideouts-modals-overalys-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Slide-out Panels, Modal Windows, and Overlays\nWithin the Magento application it is often necessary to focus the user’s attention on some particular bit of content or isolated action, process or sub-process. A \"Slide-out Panel\", \"Modal Window\" or \"Overlay\" is an effective way to achieve this. These are triggered by a particular user action causing their current task to be interrupted. The user must then take some required action to be returned to their primary task and continue (in most cases). The active state of any of overlays should occupy the topmost level of the z-index.\n\nFor solutions not described in this article or for further information, please contact the Magento UX Design team.\n\n**Use of Slide-out Panels (aka \"Slideouts\")**\n\nSlide-out panels should be used for tertiary actions or sub-processes related to the user’s primary path. These panels allow for greater content and/or more complex interactions thus behaving much like an additional webpage while maintaining a contextual connection to the primary task.\n\n**Use of Modal Windows (aka \"Modals\")**\n\nModal windows are best used to focus attention either on some particular content (such as a video), or to confirm an action or decision (such as \"Do you wish to delete the selected files\"). Typically modals should be used when the information presented is more concise and the interactions are less complex (than that used in slideouts).\n\n**Use of Modal Overlay**\n\nOverlays, for the purposes of this document, generally refer to any content that appears over the primary page when triggered. Overlays also refer more specifically to those containers used to present actions, navigation, filtering options, tooltips and contextual help, messages, etc.  See examples below.\n\nSlide-out\n**Behavior and Animation**\n\nWhen the slideout is triggered (by an action taken on the \"parent page\"), the panel will appear to slide into position in the viewport from right-to-left. The panel should be attached to the top of the browser and match the length of the parent page. In its final position, the panel should not fully obscure the parent page, leaving a portion of the lower parent page in view. The lower parent page is disabled when the slideout is active. This is achieved by covering the parent page with a transparent shade. The page-over-page appearance will help focus the user’s attention on the active sub-task while providing context of this \"interruption\" to the primary task.\n\n\n\n\n\n(Example of panel animation)\n\n\n**Anatomy of Slideout**\n\nThe active panel should include the following elements:\n\n*\tContent container (Panel)\n\n*\tA Page title\n\n*\tClose control \"X\" (ESC-key via keyboard)\n\n*\tButton bar for actions, including a \"Cancel\" (ESC-key is Cancel via keyboard)\n\n*\tPage content\n\n*\t\"Shade\" to disable lower level page\n\n\n\n\n(Example of active panel positioned over \"parent\")\n\n\n\n**Cancel and Close controls**\n\nThe close control ( X ) and the \"Cancel\" link/button will cancel the sub-process, close the panel and return the user to their primary path. The ESC-key via keyboard will close/cancel the upper-most open panel.\n\n\n\n(Close and cancel controls)\n\n\n**Passive Close**\n\nThe user may also click or tap in the \"alley\" (shaded area) to the left of the active panel to cancel/close the panel. This passive control allows the user to drill down to the desired level without the need to close each panel via the cancel or close controls.\n\n\n\n\nWhen two panels are open (one over the other), only the topmost is active. Clicking or tapping the in the \"alley\" (on the edge of the lower panel) the top active panel closes, making the panel underneath active.\n\n\n\n\n(Passive close \"zone\" - one level down)\n\n\nClicking or tapping the \"alley\" that represents the parent page (lowest level) will slide each panel out of view, closing them, and return the user to the parent page. It is recommended that no more than two panels be used in any given \"task flow\".\n\n\n\n\n(Passive close \"zone\" - two levels down)\n\n\n\nSlideout Button Bar actions\n\nActions in the Slideout Button Bar follow the Button Bar pattern.\nThere are two general ways of using Slideout — \"Subflow\" and \"Extend Form\".\n\nSub Flow\n\n\n\nIf the form in slide-in panel creates new entities, or changes existing ones (Create Product Configurations, Add Attribute) primary action in the Slideout Button Bar should be a noun explaining the panel resulting action: \"Generate Configurations\", \"Create Attribute\", etc.\nClicking that button will:\n\n\tValidate the form in Slideout. If form has errors, it will show the error messages following the Error Messaging Pattern. If no errors found, it will:\n\tClose the Slideout and apply changes immediately (entity will be created in the database, for example).\n\n\nExtend Form\n\n\n\nIf the Slideout panel is a part of the form, extending it (like Advanced Inventory, or Advanced Pricing), primary action should be labeled as \"Done\". Clicking it will:\n\n\tValidate the form in Slideout. \tIf form has errors, it will show the error messages following the Error Messaging Pattern. If no errors found, it will:\n\tClose the Slideout and save the contents of its form. User still has to click \"Save\" button on the main form to apply changes.\n\n\nClicking \"Cancel\" or clicking \"&times;\" or clicking outside of the panel (passive close) in both cases should reset contents of the current level Slideout form to default state.\nIf user made changes to a form, he is presented with the modal window to confirm Cancellation:\n\n\n\nClicking \"Yes, Cancel\" closes the Modal and Slideout, then resets form to default state. Clicking \"Do not Cancel\" closes the Modal.\n\n\n\n\n**Slideouts and Page-grids**\n\nIn its final position the panel does not snap to the page-grid of the parent page, but rather should respect some distance from the left edge of the browser. This distance provides an \"alley\" that creates a page-over-page metaphor. This distance should be some % of the viewport, rather than a fixed pixel width, to accommodate for variations in browser widths.\n\n\n\n(Panel position in relation to browser edge)\n\n\nA 12-column page-grid is nested inside the content area of the slideout panel, with an additional 15px of padding added to the left edge.\n\n\n\n(Nested page-grid with additional padding)\n\n\nThis method of nesting a 12-column page-grid inside the slideout panel is repeated with each subsequent panel. This is done so that the panels can easily accommodate established page templates used in the Magento framework. With each additional panel, the position of the active panel should indent to create the page-over-page metaphor and allow a zone(s) for the passive close interaction mentioned above.\n\n\n\nModals\n\n**Behavior and Animation**\n\nWhen an action is taken that triggers a modal, the modal window should appear center-aligned in the user’s browser window. The modal should appear to fade in or grow from the center of the screen. The timing of this animation should be set to about 0.3s (see an  example of the animation here , refer to \"FADE IN & SCALE\" option). When the modal is triggered, the parent page should become disabled and shaded while the modal is active.\n\n\n\n(Example of a Confirmation Modal)\n\n\n**Anatomy of a Modal**\n\nThe active modal should include the following elements:\n\n*\tContent container (Modal Window)\n\n*\tA Title\n\n*\tClose control \"X\" (ESC-key via keyboard)\n\n*\tPage content\n\n*\tCall to action(s), including \"Cancel\" (ESC-key is Cancel via keyboard)\n\n*\t\"Shade\" to disable lower level page\n\n**Cancel and Close controls**\n\nEvery modal should include a close control ( X ) in the upper right corner as well as a \"Cancel\" link or button.  Additionally, if the user clicks or taps the shaded area outside of the modal container the modal will cancel and close. The ESC-key via keyboard will close/cancel the active modal window.\n\n\n\n\n(Modal \"Cancel\" and \"Close\" controls)\n\n\n**Modal Dimensions**\n\nThe modal should be center-aligned in the user’s browser window and be 75% of the viewport width. The content within the modal window should flex accordingly to the width of the browser window and the modal width.\n\n\n\nThe distance of the modal to the top of the browser should have a fixed distance and NOT be percentage-based. This will insure that the \"title\" and top \"close control\" will be visible if the modal window is taller than the viewport. Within the content area of the modal window itself there should be 30px padding.\n\n\n\n\n(Placement and Padding of Modal)\n\n\n\n(Sample of progress bar in modal)\n\n**Implementation**\nModal windows are implemented by the following Magento {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} widgets:\n- modal\n- alert (extends modal)\n- confirm (extends modal)\n- propmt (extends modal)\n\n\nOverlays\n\n**Drop downs**\n\nDrop down overlays behave just as drop down form elements do. A button or control toggles the drop down opened and closed. Selecting an option from the expanded list selects that option and closes the overlay.\n\n\n(Examples of drop down overlays)\n\n**Flyouts**\n\nFlyouts are overlays that typically emerge from a link, menu heading, or other control. They are somewhat different than drop downs in that they create a sort of \"tab\" around the control that triggered them.\n\n\n(Data-table Filtering Flyout)\n\n\n(Data-table In-line Editing Flyout)\n\n\n(Sub-menu Navigation Flyout)\n\n**Contextual Help**\n\nContextual Help is similar to a \"tooltip\" element, except that it is revealed by clicking or tapping a control and dismissed by tapping again, or by opening another Contextual Help element on the page.\n\n\n(Example of Contextual Help)\n\n**Alerts and Messages**\n\nWithin the Magento application it is often necessary and helpful to provide feedback to the user as to the success or failure of an action or process. This feedback may come in the form of client-side validation or server-side validation.\n\n(Field Level Validation message)\nWhen field level validation is triggered resulting message should appear and persist until the user has taken an action to correct the error (for example, clicks into the form field to re-type an incorrect password).\n\n(Data-table with Confirmation Message)\n\n\nAssets\n\nDownload Slide-out Panels PSD source\n\nDownload Modal PSD source\n\nTechnical Implementation\nTechnically slideouts and modals are implemented using the [modal widget]({{page.baseurl}}javascript-dev-guide/widgets/widget_modal.html) or the [modal UI component](https://devdocs.magento.com/guides/v2.2/ui_comp_guide/components/ui-modal.html). \n",
      "url": "/guides/v2.0/pattern-library/containers/slideouts-modals-overlays/slideouts-modals-overalys.html"
    }
    ,
  
    "guides-v2-0-get-started-soap-soap-web-api-calls-html": {
      "title": "Use SOAP Services",
      "content": "WSDL File\n\nA WSDL file is generated only for services that you request. This means that different clients may use different services and therefore use different WSDLs.\n\nThe Magento web {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} uses WSDL 1.2, which complies with WS-I 2.0 Basic Profile.\n\nEach Magento service interface that is part of a {% glossarytooltip cdf644c4-bc99-4550-a954-dd5ae165785a %}service contract{% endglossarytooltip %} is represented as a separate service in the WSDL.\n\nTo consume several services, you must specify them in the WSDL endpoint {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %}.\n\n\n\n   \n      \n      \n      \n   \n   \n      \n         Service\n         WSDL endpoint URL\n         Available services\n      \n   \n   \n      \n         customer\n         http://magentohost/soap?wsdl&services=customerV1\n         \\Magento\\Customer\\Service\\V1\\CustomerService\n      \n       \n         customer, catalogProduct\n         http://magentohost/soap/custom_store?wsdl&services=customerCustomerAccountServiceV1,catalogProductV2\n         \\Magento\\Customer\\Service\\V1\\CustomerAccountServiceInterface, \\Magento\\Catalog\\Service\\V2\\ProductInterface\n      \n   \n\n\nThe WSDL URL follows the following pattern:\n\n`http:///soap/?wsdl&services=,`\n\nYou must specify each service version in the endpoint URL.\n\nThis way, you can have a strict contract between your application and the service provider.\nService class-to-service name conversion rules\n\nService names use the following conventions:\n\n* CamelCase is used for service naming.\n* The string `Service` is omitted.\n* The `Magento` prefix is omitted.\n* The `Interface` suffix is omitted.\n* If the service name is the same as the {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} name, the module name is omitted. For example, if there is a customer service interface in the customer module, the word `customer` will be used in the service name only once.\n\n\n\n\nOriginal Service Interface Name\nService Name\n\n\n\n\n\\Magento\\Customer\\Service\\V1\\CustomerInterface\ncustomerV1\n\n\n\\Magento\\Customer\\Service\\V1\\CustomerAccountServiceInterface \ncustomerCustomerAccountServiceV1\n\n\n\\Enterprise\\Customer\\Service\\V3\\Customer\\AddressInterface\nenterpriseCustomerAddressV3\n\n\n\n\n\nAuthentication\n\nProtected SOAP resources can be accessed using bearer tokens (OAuth access tokens) over HTTP. Access tokens are strings representing an access {% glossarytooltip 34ecb0ab-b8a3-42d9-a728-0b893e8c0417 %}authorization{% endglossarytooltip %} issued to the client. For more information, see OAuth-based authentication\n\nThe following {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} script illustrates how to get an access token:\n\n{% highlight php %}\narray(\n                'header' => 'Authorization: Bearer 36849300bca4fbff758d93a3379f1b8e'\n            )\n        );\n$wsdlUrl = 'http://magento.ll/soap/default?wsdl=1&services=testModule1AllSoapAndRestV1';\n$serviceArgs = array(\"id\"=>1);\n\n$context = stream_context_create($opts);\n$soapClient = new SoapClient($wsdlUrl, ['version' => SOAP_1_2, 'context' => $context]);\n\n$soapResponse = $soapClient->testModule1AllSoapAndRestV1Item($serviceArgs); ?>\n{% endhighlight %}\n\nRelated topics\n* OAuth-based authentication\n* Service contracts\n* SOAP Reference\n",
      "url": "/guides/v2.0/get-started/soap/soap-web-api-calls.html"
    }
    ,
  
    "guides-v2-0-config-guide-solr-solr-magento-html": {
      "title": "Configure Solr and Magento",
      "content": "\nSolr is deprecated in Magento 2.1 and will not be supported in 2.2.\nIn a future release, Solr compatibility will be removed.\n\nIf possible, use [Elastic Search](https://devdocs.magento.com/guides/v2.1/config-guide/elasticsearch/es-overview.html) as an alternative catalog search engine.\n\n\nThe following topics discuss how to configure Solr to work with {{site.data.var.ee}}:\n\n* Copy the Magento Solr configuration and start Solr\n* Configure Magento to work with Solr\n\nCopy the Magento Solr configuration and start Solr\nMagento comes packaged with a sample Solr configuration you can use and customize. To get started, you'll copy the Magento configuration to Solr, replacing any existing files. After that you can start Solr and begin configuring Magento to work with it.\n\n\n\tThe example Solr configuration is not intended to be used in a production site. It's for testing and development only. It's simple to use which makes it a great way for you to learn more about Solr.\n\n\n1.  As a user with root privileges, enter the following commands in the order shown to copy over the Solr configuration with the one packaged with {{site.data.var.ee}}:\n\n\t\tcd /example/solr\n\t\tcp -R collection1 magento2\n\t\tcd magento2\n\t\tcp -R /vendor/magento/module-solr/conf/* ./conf/\n\n\tFor example, if Solr is installed in /opt/solr/solr-4.10.4 and {{site.data.var.ee}} is installed in /var/www/magento/html/magento2ee, enter:\n\n\t\tcd /opt/solr/solr/solr-4.10.4/example/solr\n\t\tcp -R collection1 magento2\n\t\tcd magento2\n\t\tcp -R /var/www/html/magento2ee/vendor/magento/module-solr/conf/* ./conf/\n\n\t\n\t If you're prompted to overwrite files, try the command \\cp -R &lt;your {{site.data.var.ee}} install dir>/vendor/magento/module-solr/conf/* .\n\t\n\n2.  After copying files, open the `/example/solr/magento2/core.properties` file in a text editor and change:\n\n\t\tname=collection1\n\n\tto\n\n\t\tname=magento2\n\n\tMore information about core.properties\n3.\tSave your changes to `core.properties` and exit the text editor.\n\n3.  *Task for Tomcat 6 with CentOS only*\n\n\tIf you're using Tomcat 6 on CentOS, you must modify `/example/solr/conf/solrconfig.xml`\n\n\tLocate the following line:\n\n\t\t${solr.data.dir:./solr/data}\n\n\tChange it to:\n\n\t\t${solr.data.dir:}\n\n4.  Start Solr.\n\n\tAs a user with root privileges, enter the following command to start Solr:\n\n\t\tcd /example\n\t\tjava -jar start.jar\n\n\t\n\t\t\tThis method for starting Solr is for convenience and testing purposes only. In a production environment, you should start and stop Solr using a script as discussed in Script Solr startup and shutdown.\n\t\n\nConfigure Magento to work with Solr\nThis section discusses how to configure {{site.data.var.ee}} to use the Solr search engine.\n\nTo configure Magento to work with Solr:\n\n1.  Log in to the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} as an administrator.\n2.  Click STORES > Configuration > {% glossarytooltip 8d40d668-4996-4856-9f81-b1386cf4b14f %}CATALOG{% endglossarytooltip %} > Catalog > Catalog Search.\n3.  In the right pane, expand Catalog Search.\n4.  The following table shows the minimum amount of information to enter to test the connection to your Solr search engine. Leave all other values at their defaults.\n\n\n\n\n\tOption\n\tDescription\n\n\n\tSearch Engine\n\tClick Solr\n\n\n\tSolr Server Hostname\n\tEnter the fully qualified host name or IP address of the machine running Solr. (If Solr is running on the same host as Magento, you can optionally use localhost.)\n\n\n\tSolr Server Port\n\tEnter Solr's listen port. (The example Jetty servlet container uses 8983. The default for Tomcat is usually 8080.)\n\n\n\tSolr Server Username\n\tOptional. Enter a user name for Solr authentication, if desired.\n\n\n\tSolr Server Password\n\tOptional. Enter the user's password, if required.\n\n\n\tSolr Server Timeout\n\tEnter a connection timeout value, in seconds.\n\n\n\tSolr Server Path\n\tSpecifies the path and name of the Solr web application. The path used by the example Solr configuration is solr/magento2.\n\tIf you customized Solr, the value you enter in this field must exactly match the value of webapp_name=&lt;value> in &lt;your Solr install dir>/example/solr/magento2/conf/conf/scripts.conf.\n\n\n\n\n\nThe following figure shows an example.\n\n\nClick Test Connection.\n\nThe button changes as follows.\n\n\n\n\n\n\n\tButton state\n\tMeaning\n\n\n\t\n\tThe test connection succeeded. Click Save Config and continue with the next section.\n\n\n \n The test connection failed. Try the following:\n\tExamine the command window in which you started Solr for stack traces and exceptions. You must resolve those before you continue.\n\tIn particular, make sure you started Solr as a user with root privileges.\n\tVerify that allow_url_fopen = On is present in your server's php.ini.\n\tIf you are not sure where php.ini is located, you can create a phpinfo.php page to locate it.\n\tMake sure that UNIX firewall and SELinux are both disabled, or set up rules to enable Solr and Magento to communicate with each other.\n\tVerify the value of the Solr Server Hostname field. Make sure the server is available. You can try the server's IP address instead.\n\tUse the command netstat -an | grep listen-port command to verify that the port specified in the Solr Server Port field is not being used by another process.\n\tFor example, to see if Solr is running on its default port, use the following command:\n\tnetstat -an | grep 8983\n\tIf Solr is running on port 8983, it displays similar to the following:\n\ttcp        0      0 :::8983            :::*          LISTEN\n\tIf Solr is installed on a remote machine, use the ping command to verify that machine is reachable from your Magento server.\n\t\n\n\n\n\nOnly after the test connection succeeds, click Save Config and continue with the next section.\n\nReindexing catalog search and refreshing the full page cache\nAfter you change Magento's Solr configuration, you must reindex the catalog search index and refresh the full page using the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} or command line.\n\nTo refresh the {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} using the Admin:\n\n1.  In the Admin, click System > Cache Management.\n2.  Select the check box next to Page Cache.\n3.  From the Actions list in the upper right, click Refresh.\n\t\tThe following figure shows an example.\n\t\t\n\nTo clean the cache using the command line, use the `magento cache:clean` command.\n\nTo reindex using the command line:\n\n1.\tLog in to your Magento server as, or switch to, the Magento file system owner.\n2.\tEnter the following command to reindex all indexers:\n\n\t\tphp /bin magento indexer:reindex\n\n\tEnter the following command to reindex the catalog search index only:\n\n\t\tphp /bin magento indexer:reindex catalogsearch_fulltext\n\n3.\tWait while the indexers are reindexed.\n\n\n\tUnlike the cache, indexers are updated by a cron job. Make sure cron is enabled before you start using Solr.\n\n\nVerify Solr is working\nTo verify Solr works, go to the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} and search for any term (including one that won't return results) and look for the search in the Solr command window.\n\nThe following figure shows an example of a storefront search.\n\n\n\nThe following excerpt from the Solr command window shows the same search:\n\n\t497008 [qtp2032251042-13] INFO  org.apache.solr.core.SolrCore  – [magento2] webapp=/solr path=/select params={facet.field={!key%3Dcategory_bucket}category_ids&json.nl=flat&fl=id,score&start=0&fq=store_id:1&rows=10000&q=sku:((hello*+hello))+OR+fulltext_en:((hello*+hello))+OR+attr_color_en:((hello*+hello))+OR+attr_description_en:((hello*+hello))+OR+attr_manufacturer_en:((hello*+hello))+OR+attr_name_en:((hello*+hello))+OR+attr_short_description_en:((hello*+hello))+OR+attr_status_en:((hello*+hello))+OR+attr_tax_class_id_en:((hello*+hello))&f.category_ids.facet.mincount=1&omitHeader=true&stats=true&wt=json&facet=true&stats.field=price_0_1} hits=0 status=0 QTime=58\n\n\n#### Next step\nPrepare Solr for production\n",
      "url": "/guides/v2.0/config-guide/solr/solr-magento.html"
    }
    ,
  
    "guides-v2-0-config-guide-solr-solr-overview-html": {
      "title": "Install and configure Solr",
      "content": "\nSolr is deprecated in Magento 2.1 and will not be supported in 2.2.\nIn a future release, Solr compatibility will be removed.\n\nIf possible, use [Elastic Search](../../../v2.1/config-guide/elasticsearch/es-overview.html) as an alternative catalog search engine.\n\n\n{{site.data.var.ee}} version 2.x enables you to configure either of the following as a {% glossarytooltip 8d40d668-4996-4856-9f81-b1386cf4b14f %}catalog{% endglossarytooltip %} search engine:\n\n*\tFull text search using the MySQL database (the default)\n*\tThe [Apache Solr search engine](http://lucene.apache.org/solr/){:target=\"_blank\"}\nSolr enables you to provide your web store users with a powerful full-text search engine that includes:\n\n*\t[Faceted search](http://wiki.apache.org/solr/SolrFacetingOverview){:target=\"_blank\"}\n*\t[Dynamic clustering using SolrCloud](https://cwiki.apache.org/confluence/display/solr/SolrCloud){:target=\"_blank\"}\n*\tDatabase integration\n\nSee one of the following sections for more information:\n\n*\t[Intended audience and purpose of this topic](#overview-this-topic){:target=\"_blank\"}\n*\t[More information about the Solr solution](#overview-solr){:target=\"_blank\"}\n\n### Intended audience and purpose of this topic {#overview-this-topic}\nThis topic is intended for {{site.data.var.ee}} administrators and systems integrators who have some familiarity with search engines&mdash;ideally, who also have Solr configuration experience.\nNo programming is required to perform the tasks discussed in this topic.\n\nThis topic discusses a simple Solr configuration that uses the example Solr configuration provided with Solr, default Solr integration options provided with {{site.data.var.ee}}, and also explains how to configure {{site.data.var.ee}} to use Solr.\nAdvanced configuration tasks&mdash;such as setting up dictionaries&mdash;are beyond the scope of this topic.\n\n\nThe example Solr configuration is not intended to be used in a production site.\nIt's for testing and development only.\nBecause it's simple to use, it's a great way for you to learn more about Solr.\n\n\n\n\n### More information about the Solr solution {#overview-solr}\nSolr runs as a standalone full-text search server in a servlet container such as Jetty (which is used by the Solr example configuration) and Tomcat.\n\nSolr uses the Lucene Java search {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} for full-text indexing and search.\nYour applications interact with Solr using [HTTP POST](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5){:target=\"_blank\"} (in JSON, [XML](http://wiki.apache.org/solr/UpdateXmlMessages){:target=\"_blank\"}, CSV, or binary formats) to index documents and using [HTTP GET](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3){:target=\"_blank\"} to retrieve search results back as [JSON](http://wiki.apache.org/solr/SolJSON?highlight=%28json%29%7C%28solr%29){:target=\"_blank\"}, XML, or a variety of other formats (Python, Ruby, [PHP](http://wiki.apache.org/solr/SolPHP?highlight=%28php%29%7C%28solr%29){:target=\"_blank\"}, [CSV](http://wiki.apache.org/solr/CSVResponseWriter?highlight=%28solr%29%7C%28csv%29){:target=\"_blank\"}, binary, and so on).\nIf you're a programmer, try the [Solr tutorial](https://lucene.apache.org/solr/4_10_0/tutorial.html){:target=\"_blank\"}.\nWhether you're a programmer or not, read the [Solr FAQ](http://wiki.apache.org/solr/FAQ){:target=\"_blank\"}.\n\nNo programming is required to implement Solr as discussed in this topic.\n\nSolr's powerful external configuration allows it to be tailored to almost any type of application without Java coding, and it has an extensive {% glossarytooltip 9fceecbe-31be-4e49-aac7-11d155a85382 %}plug-in{% endglossarytooltip %} architecture when more advanced customization is required.\nSolr is highly scalable, providing distributed search and index replication.\n\n\n\n\nCustomize the Solr search engine at your own risk.\nMagento supports only the options displayed in the Admin.\nCustomizing the Solr engine itself, while potentially useful, can cause issues with Magento.\nIf you encounter problems with your customizations, do not contact Magento Support; instead, consult the resources available from the [Apache Solr Wiki](http://wiki.apache.org/solr/){:target=\"_blank\"}.\n\n\nIn this topic, you'll use the example configuration provided with Solr and Magento's provided Solr configuration to implement a simple, quick integration with Solr.\n\nSome reasons to use Solr with Magento include:\n\n*\tMagento ships with a sample Solr configuration that enables you to provide users with a powerful search engine without your needing to customize any code.\n*\tYou get better performance of search, catalog views, and [layered navigation](http://www.magentocommerce.com/knowledge-base/entry/how-does-layered-navigation-work){:target=\"_blank\"}.\n*\tWhen the system is under load, Solr avoids frequent updates of the MySQL catalogsearch_fulltext table and alleviates issues with database table locks.\n\n## Assumptions for using Solr in a development environment {#dev}\nThis topic discusses a simple way to set up Solr in a development environment.\nNo coding is required.\n\nThe following suggestions in this topic should *not* be used in a production environment because they're potentially unsafe:\n\n*\tStarting the example Solr web application using `java -jar start.jar` because it's not maintainable.\n  You should script starting and stopping Solr instead.\n*\tUsing the example Solr web application is not recommended because you should customize a new web application for your use.\n  You can also [compare application servers](https://dzone.com/articles/top-open-source-javaEE-application-servers){:target=\"_blank\"} to determine if the bundled Jetty application server is appropriate for your needs.\n*\tTurning off your UNIX firewall is not recommended in production.\n  (As an alternative, you can set up firewall rules to allow Magento and Solr to communicate.)\n*\tSetting SELinux to `permissive`\n\n\tSELinux settings are entirely up to you.\nMagento does not recommend particular settings; however, be aware that setting up SELinux is very complex.\n\n\n## Prerequisites {#prereq}\nThe tasks discussed in this topic require the following:\n\n*\t[Disable the UNIX firewall and SELinux](#prereq-secy){:target=\"_blank\"}\n*\t[Latest available Java version](#prereq-java){:target=\"_blank\"}\n*\t[Latest available version of Solr 4](#install-prereq-solr){:target=\"_blank\"}\n\n### Firewall and SELinux {#prereq-secy}\nBy default, UNIX systems generally enable a firewall with restrictive rules and also enable SELinux, which imposes other types of security on the operating system.\nIt's easier to run Solr in development by disabling the firewall and SELinux but that choice is up to you.\n\nIf you choose to enable your firewall and SELinux, you must set up rules to allow TCP traffic between Magento and Solr on Solr's listen port (8983 by default).\n\n#### Disable iptables and SELinux\nTo stop the `iptables` (firewall) service, enter the following command as a user with `root` privileges:\n\n\tservice iptables stop\n\nTo set SELinux for permissive mode:\n\n1.\tTo determine if SELinux is enabled, enter the following command:\n\n\t\tgetenforce\n\n\t`Enforcing` displays to confirm that SELinux is running.\n  (If `Permissive` displays, continue with the next section.)\n2.\tTo change to permissive mode, enter:\n\n\t\tsetenforce 0\n\n#### Set up rules for iptables and SELinux\nTo set up rules to allow communication with the firewall or SELinux enabled, consult the following resources:\n\n*\t[iptables how-to](https://help.ubuntu.com/community/IptablesHowTo){:target=\"_blank\"}\n*\t[How to edit iptables rules (fedora project)](https://fedoraproject.org/wiki/How_to_edit_iptables_rules){:target=\"_blank\"}\n*\t[25 Most Frequently Used Linux IPTables Rules Examples](http://www.thegeekstuff.com/2011/06/iptables-rules-examples/){:target=\"_blank\"}\n*\t[Introduction to SELinux (CentOS.org)](https://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-selinux.html){:target=\"_blank\"}\n*\t[SELinux How-To Wiki (CentOS.org)](https://wiki.centos.org/HowTos/SELinux){:target=\"_blank\"}\n\n### Install the Java Software Development Kit (JDK) {#prereq-java}\nTo determine if Java is already installed, enter the following command:\n\n\tjava -version\n\nIf the message java: command not found displays, you must install the Java SDK as discussed in the next section.\n\n\nThis topic discusses using Jetty, which comes with Solr.\nConsult another resource, such as the [Solr Wiki](http://wiki.apache.org/solr/SolrTomcat){:target=\"_blank\"}, to use Tomcat with Solr.\n\nTo see if you're currently running Jetty and to check the version, see [How to find out the version of Jetty](https://wiki.eclipse.org/Jetty/FAQ#How_do_I_know_which_version_of_Jetty_I_am_running.3F){:target=\"_blank\"}.\n\nSee one of the following sections:\n\n* [Install the latest JDK on CentOS](#install-prereq-java-centos){:target=\"_blank\"}\n* [Install the latest JDK on Ubuntu](#install-prereq-java-ubuntu){:target=\"_blank\"}\n\n#### Install the JDK on CentOS {#install-prereq-java-centos}\nSee [this article on digitalocean](https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora#install-oracle-java-8){:target=\"_blank\"}.\n\nBe sure to install the JDK and *not* the JRE.\n\n#### Install the Java 6 or later SDK on Ubuntu {#install-prereq-java-ubuntu}\nTo install the Java 6 SDK, enter the following command as a user with root privileges:\n\napt-get install openjdk-6-jdk\nTo install Java 7, enter the following command as a user with root privileges:\n\napt-get install openjdk-7-jdk\n\n\nJava version 7 might not be available for all operating systems.\nFor example, you can search the list of available packages for Ubuntu [here](http://packages.ubuntu.com/){:target=\"_blank\"}.\n\n\nTo install JDK 1.8 on Ubuntu, see [Oracle documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html){:target=\"_blank\"}.\n\n### Install Solr 4 and Jetty {#install-prereq-solr}\nThe Apache Solr package installs both Solr and Jetty.\nIf Jetty is already installed, see the [Solr with Jetty Wiki](https://cwiki.apache.org/confluence/display/solr/Running+Solr+on+Jetty){:target=\"_blank\"} for more information.\n\n\nTomcat is also a supported servlet container for Solr but discussing how to set up Tomcat with Solr is beyond the scope of this topic.\nFor more information, see the [Solr With Tomcat Wiki](http://wiki.apache.org/solr/SolrTomcat){:target=\"_blank\"}.\n\n\nTo install Solr and Jetty:\n\n1.  As a user with `root` privileges, use `wget` or a similar command to download the latest version of Solr 4 to an empty directory such as `/opt/solr`.\n\n\tAn example follows.\n\n\t\tmkdir -p   \n\t\tcd \n\t\twget http://archive.apache.org/dist/lucene/solr/4.10.4/solr-4.10.4.tgz\n\n\tMessages similar to the following display to confirm a successful download.\n\n\t\twget http://archive.apache.org/dist/lucene/solr/4.10.4/solr-4.10.4.tgz\n\t\t--2016-10-01 15:54:37--  http://archive.apache.org/dist/lucene/solr/4.10.4/solr-4.10.4.tgz\n\t\tResolving archive.apache.org... 163.172.17.199\n\t\tConnecting to archive.apache.org|163.172.17.199|:80... connected.\n\t\tHTTP request sent, awaiting response... 200 OK\n\t\tLength: 150059757 (143M) [application/x-gzip]\n\t\tSaving to: \"solr-4.10.4.tgz\"\n\n\t\t100%[==========================================================>] 150,059,757 8.99M/s   in 4.5s\n\t\t2016-10-01 15:55:23 (3.18 MB/s) - \"solr-4.10.4.tgz\" saved [150059757/150059757]\n\n2.  Unpack the Solr installation; an example follows.\n\n\t\ttar -xvf solr-4.10.4.tgz\n\n#### Next step\n[Configure Solr to work with Magento]({{page.baseurl}}config-guide/solr/solr-magento.html){:target=\"_blank\"}\n",
      "url": "/guides/v2.0/config-guide/solr/solr-overview.html"
    }
    ,
  
    "guides-v2-0-config-guide-solr-solr-script-html": {
      "title": "Prepare Solr for production",
      "content": "\nSolr is deprecated in Magento 2.1 and will not be supported in 2.2.\nIn a future release, Solr compatibility will be removed.\n\nIf possible, use [Elastic Search](https://devdocs.magento.com/guides/v2.1/config-guide/elasticsearch/es-overview.html) as an alternative catalog search engine.\n\n\nAfter you've tested the Solr solution, you should perform the following tasks to get it ready for production:\n\n*\tSee more Solr configuration options in the {{site.data.var.ee}} User Guide (available with the {{site.data.var.ee}} release)\n*\tSet up firewall rules to enable Solr and Magento to communicate\n*\tImplement a custom web application deployed to a scalable application server\n*\tConsider a dedicated Solr server, or at least deploying Solr to a different server than Magento\n*\tConsider scalability by clustering Solr\n*\t[Customize Solr](http://wiki.apache.org/solr){:target=\"_blank\"}\n\n\t\n\t\tCustomize the Solr search engine at your own risk. Magento supports only the options displayed in the Admin. Customizing the Solr engine itself, while potentially useful, can cause issues with Magento. If you encounter problems with your customizations, do not contact Magento Support; instead, consult the resources available from the Apache Solr Wiki.\n\t\n*\tIf you choose to enable SELinux, set up rules to allow Magento and Solr to communicate with each other\n\n\tSELinux settings are entirely up to you; Magento does not recommend either enabling it or disabling it. Because SELinux is very complex, make sure you have an experienced system administrator who can configure it.\n*\tScript Solr startup and shutdown as discussed in Script Solr startup and shutdown\n\nMultiple core configuration\n\nIf you have created multiple cores, make sure the value of the `maxBooleanClauses` parameter is the same on each. This parameter is defined in each core's `solrconfig.xml` file. Solr uses the value defined for the core that initialized most recently as the value for all cores. The default value for the Magento installation is 10240.\n\nIf one or more of the `maxBooleanClauses` parameters is set too low, the search results page could display no results.\n\nScript Solr startup and shutdown\nIn a production environment, you should start and stop Solr using a script.\n\n\n\tYou must perform all tasks discussed in this section as a user with root privileges.\n\n\nCreate a script named /etc/init.d/solr with options similar to the following:\n\n\t#!/bin/sh\n\n\t#Starts, stops, and restarts Apache Solr.\n\t#chkconfig: 35 92 08\n\t#description: Starts and stops Apache Solr\n\n\tSOLR_DIR=\"\"\n\tJAVA_OPTIONS=\"-Xmx1024m -DSTOP.PORT= -DSTOP.KEY= -jar  start.jar\"\n\tLOG_FILE=\"\"\n\tJAVA=\"\"\n\n\tcase $1 in\n\tstart)\n\techo -n \"Starting Solr\"\n\tcd $SOLR_DIR\n\t$JAVA $JAVA_OPTIONS 2> $LOG_FILE &\n\t;;\n\tstop)\n\techo -n \"Stopping Solr\"\n\tcd $SOLR_DIR\n\t$JAVA $JAVA_OPTIONS --stops\n\t;;\n\trestart)\n\t$0 stop\n\tsleep 1\n\t$0 start\n\t;;\n\t*)\n\techo \"Usage: $0 {start|stop|restart}\" >&2\n\texit 1\n\t;;\n\tesac\n\nAll parameters shown in the following table are required.\n\n\n\n\n\n\n  Value\n  Description\n\n\n  &lt;your Solr install dir>\n  The absolute file system path to your Solr installation. (For example, /etc/solr/apache-solr-3.6.2\n\n\n  &lt;jetty-stop-port>\n  &lt;jetty-stop-key>\n  Security parameters used to prevent malicious attempts to stop Jetty.\n\n  For -DSTOP.PORT=, specify any unused port.\n\n  For -DSTOP.KEY=, specify a string. If you omit a value for -DSTOP.KEY=, Jetty generates a random key you must enter to stop Jetty.\n\n  For more information, see Securing Jetty.\n\n\n\n  &lt;path-to-solr-log-file>\n  Absolute file system path to the Solr log file. (For example, /var/log/solr.log)\n\n\n  &lt;java_home>\n  Absolute file system path to your Java executable. (For example, /usr/bin/java)\n\n\n\n\nAn example follows:\n\n\t#!/bin/sh\n\n\t#Starts, stops, and restarts Apache Solr.\n\t#chkconfig: 35 92 08\n\t#description: Starts and stops Apache Solr\n\n\tSOLR_DIR=\"/opt/solr/apache-solr-4-10-4/example\"\n\tJAVA_OPTIONS=\"-Xmx1024m -DSTOP.PORT=8079 -DSTOP.KEY=mykey -jar  start.jar\"\n\tLOG_FILE=\"/var/log/solr.log\"\n\tJAVA=\"/usr/bin/java\"\n\n\tcase $1 in\n\tstart)\n\techo -n \"Starting Solr\"\n\tcd $SOLR_DIR\n\t$JAVA $JAVA_OPTIONS 2> $LOG_FILE &\n\t;;\n\tstop)\n\techo -n \"Stopping Solr\"\n\tcd $SOLR_DIR\n\t$JAVA $JAVA_OPTIONS --stop\n\t;;\n\trestart)\n\t$0 stop\n\tsleep 1\n\t$0 start\n\t;;\n\t*)\n\techo \"Usage: $0 {start|stop|restart}\" >&2\n\texit 1\n\t;;\n\tesac\n\nTo complete the script:\n\n*\tMake sure you saved the edited version of the script.\n*\tGive the script executable permissions as follows:\n\n\t\tchmod +x /etc/init.d/solr\n*\tYou can now start, stop, and restart Solr as follows:\n\n\tStart Solr: `/etc/init.d/solr start`\n\n\tStop Solr: `/etc/init.d/solr stop`\n*\tRestart Solr: `/etc/init.d/solr restart`\n\n\n\n\n",
      "url": "/guides/v2.0/config-guide/solr/solr-script.html"
    }
    ,
  
    "guides-v2-0-cloud-live-stage-prod-live-html": {
      "title": "Deploy your store",
      "content": "The process for deploying and going live begins with development, continues to Staging, and ends with going live in Production. To provide the best experience for developing, testing, and deploying your store with consistent configurations we provide an end-to-end environment solution. Every environment supports direct URL access to the store and Admin console and SSH access for CLI commands.\n\nYou can fully push, merge, and deploy through the [Project Web Interface]({{page.baseurl}}cloud/project/project-webint-branch.html) or CLI commands through a terminal application.\n\nThis section provides indepth instructions and information on the build and deploy process, migrating data and content, and testing.\n\n## Starter plan deployment {#starter}\nWe recommend creating a Staging branch from the `master` to best support your Starter plan development and deployment. With this in place, you have two of your four active environments ready: `master` for Production and `staging` for Staging.\n\nNow you are ready to develop and deploy:\n\n1. Create development branches from the `staging` branch. This allows you to merge up through Staging and Production.\n2. Develop on local: custom modules, Magento extensions, 3rd party integrations, and configurations.\n3. Push your local branch to the Git remote branch to test in a full environment.\n4. To fully test in a near-production level environment, push code to a Staging branch.\n5. Fully test in the Staging environment including payment gateways, shipping, price rules, various products, and full customer and admin interactions.\n6. Finally, deploy to the Production `master` to complete testing, go live steps, and start selling.\n\nFor detailed information of the process, see [Starter Develop and Deploy Workflow]({{page.baseurl}}cloud/basic-information/starter-develop-deploy-workflow.html).\n\n## Pro plan deployment {#pro}\nPro comes with a large Integration environment with eight active branches and environments including `master`, Staging, and Production. When you create your project, code is ready to branch, develop, and push for building and deploying your site. Although the Integration environment can have many branches, Staging and Production have only one branch: the deployed Git `master`.\n\n1. Create development branches from the Integration `master` branch.\n2. Develop on local: custom modules, Magento extensions, 3rd party integrations, and configurations.\n3. Push your local branch to the Git remote branch to test in a full environment.\n4. Merge final code to the Integration `master` branch.\n5. To fully test in a near-production level environment, push code to the Staging environment.\n6. Fully test in the Staging environment including payment gateways, shipping, price rules, various products, and full customer and admin interactions.\n7. Finally, deploy to the Production environment to complete testing, go live steps, and start selling.\n\nFor detailed information of the process, see [Pro Develop and Deploy Workflow]({{page.baseurl}}cloud/architecture/pro-develop-deploy-workflow.html).\n\n### Enter a ticket for deploying hooks {#hooks}\n{% include cloud/hooks.md %}\n\n### Git and SSH URLs {#git-ssh}\nFor Pro, locate your Git and SSH URLs from the OneDrive onboarding document you received when you signed up for Magento Commerce.\n\nAfter you know these URLs, you can access those environments without further intervention.\n\n* Use the URLs to access the store as a customer.\n* Use the URL /admin to access the Admin panel.\n* (Pro) Use SSH access and Git CLI commands to deploy updated code to Staging or Production. Magento Cloud CLI commands are not available in Staging and Production.\n\nFor more information, see [SSH and sFTP]({{ page.baseurl }}cloud/env/environments-ssh.html).\n\n## Read-only environments {#read-only}\nYou should always deploy code by pushing your local Git branch to your environments. You should only directly modify configurations for a few key extensions directly in your Staging and Production environments through the Magento Admin or using environment variables.\n\nAlways update your code in a branch on your local environment, push to Git, and complete the full deployment when you need to do the following:\n\n* Add extensions\n* Add 3rd party integrations\n* Fix issues and check errors\n\n## Next steps\nTo learn more, check the following:\n\n* [Deployment process]({{ page.baseurl }}cloud/reference/discover-deploy.html)\n* [Continuous integration]({{ page.baseurl }}cloud/deploy/continuous-deployment.html)\n* [Protective block]({{ page.baseurl }}cloud/live/live-prot.html)\n*\t[Build and deploy to your local]({{ page.baseurl }}cloud/live/live-sanity-check.html)\n*\t[Prepare to deploy]({{ page.baseurl }}cloud/live/stage-prod-migrate-prereq.html)\n*\t[Migrate and deploy]({{ page.baseurl }}cloud/live/stage-prod-migrate.html)\n*\t[Test deployment]({{ page.baseurl }}cloud/live/stage-prod-test.html)\n* [Go live and launch]({{ page.baseurl }}cloud/live/live.html)\n",
      "url": "/guides/v2.0/cloud/live/stage-prod-live.html"
    }
    ,
  
    "guides-v2-0-cloud-live-stage-prod-migrate-prereq-html": {
      "title": "Prepare to deploy to Staging and Production",
      "content": "#### Previous step:\n[Build and deploy on local]({{ page.baseurl }}cloud/live/live-sanity-check.html)\n\nWhen you are ready to deploy your store, you need to complete deployment and testing in Staging first, then deploy to Production. The Staging environment provides a near-production environment with full services (including Fastly, New Relic, and Blackfire), database, web server, and more.\n\nThis information is broken down into prerequisite steps for [Starter](#starter) and [Pro](#pro) projects.\n\n## Starter plan projects {#starter}\nFor Starter, make sure all of your code is merged into a single development branch to test prior to deployment to Production. Due to all of your branches and environments being on a PaaS infrastructure, you only need access information for Master Production and other environments as needed. This access information includes your store URLs and SSH link.\n\nYou can deploy to your environments, including all .yaml configuration files, migrate files and data, all through CLI commands using SSH.\n\nTo prepare your environments for full deployment, you need:\n\n1. Get your [access URLs and SSH](#starter-urls) information.\n2. Set up your [SSH agent](#ssh-agent) for easier file and data migration.\n\n### Get your Starter access URLs and SSH information {#starter-urls}\nYou can locate your URLs through the Project Web Interface. For each selected environment or branch, you will find an Access Site link. Your environments begin with Master, which is Production, and any additional branches you create, including Staging (recommended) and development branches for custom code.\n\n1. Log in to [your {{site.data.var.ece}} account](https://accounts.magento.cloud){:target=\"\\_blank\"}.\n2. Select an environment.\n3. Click **Access site** to display the URL and SSH information.\n\n\t![Access your project]({{ site.baseurl }}common/images/cloud_project-access-starter.png)\n\n## Pro plan projects {#pro}\nFor Pro plan projects, make sure to complete all development and merging of your code to the `master` branch in the Integration environment. Only the `master` branch is deployed to Staging then Production.\n\n{% include cloud/wings-management.md %}\n\nFor **first time setup** to migrate your database and deploy code to Staging or Production, you will:\n\n1.\tCreate a support ticket to [migrate deployment hooks](#pro-yaml). In this ticket, include your public SSH keys to add to Staging and Production.\n2.\tGet your [access URLs and SSH](#pro-urls) for Staging and Production.\n4.\tSet up your [SSH agent](#ssh-agent) for Staging and Production.\n\nIf your project was created before October 23, 2017, you also need to set up [remote Git repositories](#pro-remote) on Staging and Production. Deployment targets are already set up on Staging and Production for projects created after October 23, 2017.\n\nIf you haven't done so already, upload any [Fastly VCL snippets]({{ page.baseurl }}cloud/access-acct/fastly.html#upload-vcl-snippets) in your Integration environment `master` Magento Admin panel. Fastly is available in Staging and Production.\n\n### Migrate your `.magento.app.yaml` file {#pro-yaml}\n**Important:** If you have **not modified** the default deployment hooks or configurations, skip this step and continue with [Get your Pro access URLs](#pro-urls). Only migrate the file if you modified the deployment hooks or added configuration updates.\n\n{% include cloud/hooks.md %}\n\n### Get your Pro access URLs  {#pro-urls}\nFor Pro projects created **after October 23, 2017**, you can locate your URLs through the Project Web Interface. For each selected environment or branch, you will find an Access Site link.\n\n![Access your project]({{ site.baseurl }}common/images/cloud_project-access.png)\n\nFor Pro projects created **before October 23, 2017**, you would need to access the information we provided when creating your account. This information is typically provided in a OneDrive onboarding document that contains your Git, SSH, and project URLs for Staging and Production. You'll use this information for accessing the environments.\n\n*\tGit URL format:\n\n\t*\tStaging: `git@git.ent.magento.cloud:_stg.git`\n\t*\tProduction: `git@git.ent.magento.cloud:.git`\n\n*\tSSH URL format:\n\n\t*\tStaging: `_stg@.ent.magento.cloud`\n\t*\tProduction: `@.ent.magento.cloud`\n\n*\tWeb URL format:\n\n\t*\tStaging: `http[s]://staging..c..ent.magento.cloud`\n\t*\tProduction: `http[s]://.c..ent.magento.cloud`\n\n### Set up Pro remote Git repositories {#pro-remote}\nFor Pro projects created **after October 23, 2017**, you do not need to complete this step. Your Staging and Production environments are branches of `master` with configured deployment targets. You can simply merge code to these environments from Integration `master`. You can also use the Project Web Interface to merge your code without SSH or Git commands.\n\nFor Pro projects created **before October 23, 2017**, you will need to initially set up remote Git repositories for Staging and Production. For these classic Pro accounts, your Staging and Production environments have dedicated Git repositories. You only need to set these up once.\n\nWhen you know your Git URLs, you need to set them up as remote upstream repositories so you can push code to them. Basically, you configure these remote repositories using these instructions to SSH into the environements and push code and migrate data and files using Git commands.\n\nUsing a terminal connection, enter Git commands to add the remote repositories.\n\nThe Git command syntax is:\n\n\tgit remote add  \n\nThe following commands are examples for setting up remotes on Staging and Production:\n\n\tgit remote add staging git@git.ent.magento.cloud:dr5q6no7mhqip_stg.git\n\tgit remote add prod git@git.ent.magento.cloud:dr5q6no7mhqip.git\n\n## Set up your SSH agent and add the SSH key {#ssh-agent}\nYou only need to set up your SSH agent on these servers once. SSH agent helps contain is a background program that handles passwords for your SSH private keys.\n\n**How it works!** After you configure the agent and settings, you can migrate files easier using SSH or `scp` between servers. The SSH agent forwards authentication requests from Staging or Production environments to your local with a working Magento system, helping you connect using your local private SSH key. After you push your Git code, you can SSH into Staging and Production and update code, data, and files with this set up.\n\nYou can use any terminal client you prefer for SSH access, or see our [Recommendeds tools]({{ page.baseurl }}cloud/before/before-workspace.html#recommended-tools). For these examples, we use the OpenSSH client.\n\nTo set up an SSH agent:\n\n1.\tIn a terminal client, log in to your local system.\n2.\tEnter the following command to check if the SSH agent is running and list fingerprints of all identities currently represented by the agent:\n\n\t\tssh-add -l\n\n\tOne of the following messages displays:\n\n\t*\tDisplays a working and running SSH agent: `2048 ab:de:56:94:e3:1e:71:c3:4f:df:e1:62:8d:29:a5:c0 /home/magento_user/.ssh/id_rsa (RSA)`\n\n\t\tSkip to step 4.\n\t*\tThe SSH agent has not started: `Could not open a connection to your authentication agent.`\n\n\t\tContinue with step 3.\n\n3.\tTo start the SSH agent, enter the following command:\n\n\t\teval $(ssh-agent -s)\n\n\tThe agent starts and displays the process ID (PID).\n4.\tAdd your public SSH key to the agent to SSH into environments and complete Git commands. This is the same SSH key you provided in a ticket for access to Staging and Production.\n\n\t\tssh-add ~/.ssh/id_rsa\n\n\tA message similar to the following displays:\n\n\t\tIdentity added: /home/magento_user/.ssh/id_rsa (/home/magento_user/.ssh/id_rsa)\n\nFor more information on setting up SSH, see [Enable SSH keys]({{ page.baseurl }}cloud/before/before-workspace-ssh.html) as part of your local setup. For Starter and Pro projects, you can add your SSH public key to all Integration, Staging and Production environments.\n\nIf you have a Pro project created **before October 23, 2017**, you need to enter a ticket with your public key to have it added to Staging and Production.\n\n#### Next step\n[Migrate and deploy]({{ page.baseurl }}cloud/live/stage-prod-migrate.html)\n",
      "url": "/guides/v2.0/cloud/live/stage-prod-migrate-prereq.html"
    }
    ,
  
    "guides-v2-0-cloud-live-stage-prod-migrate-html": {
      "title": "Deploy code and migrate static files and data",
      "content": "#### Previous step:\n[Prepare to deploy to Staging and Production]({{ page.baseurl }}cloud/live/stage-prod-migrate-prereq.html)\n\nTo migrate your database and static files to Staging and Production:\n\n* [Deploy code](#code)\n*\t[Migrate static files](#cloud-live-migrate-static)\n*\t[Migrate the database](#cloud-live-migrate-db)\n\nIf you encounter errors or need to make changes, complete those updates on your local. Push the code changes to the Integration environment. Deploy the updated `master` branch again. See instructions in the [previous step]({{ page.baseurl }}cloud/live/stage-prod-migrate.html).\n\n## Deploy code to Staging and Production {#code}\nYou can also use the [Project Web Interface](#interface) or [SSH and CLI commands](#ssh) to deploy your code to Staging and Production.\n\n### Deploy code with the Project Web Interface {#interface}\nThe Project Web Interface provides full features to create, manage, and deploy code branches in your Integration, Staging, and Production environments for Starter and Pro plans.\n\nFor Pro projects created **after October 23, 2017** or [updated]({{ page.baseurl }}cloud/trouble/pro-env-management.html), deploy the Integration `master` branch you created to Staging and Production:\n\n1. [Log in](https://accounts.magento.cloud) to your project.\n2. Select the Integration branch.\n3. Select the **Merge** option to deploy to Staging. Complete all testing.\n4. Select the Staging branch.\n5. Select the **Merge** option to deploy to Production.\n\n{% include cloud/wings-management.md %}\n\nFor Starter, deploy your development branch you created to Staging and Production:\n\n1. [Log in](https://accounts.magento.cloud) to your project.\n2. Select the prepared code branch.\n3. Select the **Merge** option to deploy to Staging. Complete all testing.\n4. Select the Staging branch.\n5. Select the **Merge** option to deploy to Production.\n\n![Use the merge option to deploy]({{ site.baseurl }}common/images/cloud_project-merge.png)\n\n### Deploy code with SSH and CLI {#ssh}\nIf you prefer to use CLI for deploying, you will need to configure additional SSH settings and Git remotes to use commands. You can SSH into the Staging and Production environments to push the `master` branch.\n\nYou'll need the SSH and Git access information for your project.\n\n* For Starter projects, locate the SSH and Git information through the Project Web Interface.\n* For Pro projects created **after October 23, 2017** or [updated]({{ page.baseurl }}cloud/trouble/pro-env-management.html), locate the SSH and Git information through the Project Web Interface.\n* For Pro projects created **before October 23, 2017**, the formats are as follows:\n\n  *\tGit URL format:\n\n  \t*\tStaging: `git@git.ent.magento.cloud:_stg.git`\n  \t*\tProduction: `git@git.ent.magento.cloud:.git`\n\n  *\tSSH URL format:\n\n  \t*\tStaging: `_stg@.ent.magento.cloud`\n  \t*\tProduction: `@.ent.magento.cloud`\n\n#### Deploy to Pro: updated or created after October 23, 2017 {#classic}\nTo deploy to Pro projects **created after October 23, 2017** or [updated]({{ page.baseurl }}cloud/trouble/pro-env-management.html):\n\n1. Open an SSH connection to your Staging or Production environment using the SSH command.\n2. Checkout your Staging or Production branch:\n\n  * Staging: `git checkout staging`\n  * Production: `git checkout production`\n3. Pull the `master` branch from Integration. Remember, a pull performs a fetch and a merge in one step.\n\n        git pull origin master\n\n  You merge this code as `staging` and `production` are branches of `master`.\n4. To fully update all code, then perform a push:\n\n        git push origin\n\n\n#### Deploy to Pro: created before October 23, 2017 {#classic}\nFor these environments, you are pushing code from repository to repository: Integration `master` to Staging or Production `master`. Due to these being `master` branches in different repositories, you cannot merge as if branch to branch. You should have completed all [prerequisites]({{ page.baseurl }}cloud/live/stage-prod-migrate-prereq.html) prior to deployment.\n\n1. Open an SSH connection to your Staging or Production environment using the SSH command.\n2. Pull the `master` branch to the server.\n\n        git pull origin master\n\n3. Merge changes to Staging or Production:\n\n  * Staging: `git push staging master:master`\n  * Production: `git push production master:master`\n\n  You must force push for these branches as they are separate repositories with a master branch.\n\n## Migrate static files {#cloud-live-migrate-static}\nYou will migrate {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} from your `pub/media` directory to Staging or Production.\n\nWe recommend using the Linux remote synchronization and file transfer command [`rsync`](https://en.wikipedia.org/wiki/Rsync){:target=\"\\_blank\"}. rsync uses an algorithm that minimizes the amount of data by moving only the portions of files that have changed; in addition, it supports compression.\n\nWe suggest using the following syntax:\n\n\trsync -azvP  \n\nOptions:\n\n\ta archive\n\tz compress\n\tv verbose\n\tP partial progress\n\nFor additional options, see the [rsync man page](http://linux.die.net/man/1/rsync){:target=\"\\_blank\"}.\n\nTo migrate static files:\n\n1.\tOpen an SSH connection to your Staging or Production environment:\n\n\t\t\t*\tStaging: ssh -A _stg@.ent.magento.cloud\n\t\t\t*\tProduction: ssh -A @.ent.magento.cloud\n2.\trsync the `pub/media` directory from your local Magento server to staging or production:\n\n\t\trsync -azvP pub/media/ @:pub/media/\n\n  The IP is for the Magento Commerce VM or container you created when setting up the local.\n\n## Migrate the database {#cloud-live-migrate-db}\n\n**Prerequisite:** A database dump (see Step 3) should include database triggers. For dumping them, make sure you have the [TRIGGER privilege](https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_trigger){:target=\"\\_blank\"}.\n\n**Important:** The Integration environment database is strictly for development testing and may include data you may not want to migrate into Staging and Production.\n\nFor continuous integration deployments, we **do not recommend** migrating data from Integration to Staging and Production. You could pass testing data or overwrite important data. Any vital configurations will be passed using the [configuration file](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-over.html) and `setup:upgrade` command during build and deploy.\n\nWe **do recommend** migrating data from Production into Staging to fully test your site and store(s) in a near-production environment with all services and settings.\n\nTo migrate a database:\n\n1.\tSSH into the environment you want to create a database dump from:\n\n\t*\tStaging: `ssh -A _stg@.ent.magento.cloud`\n\t*\tProduction: `ssh -A @.ent.magento.cloud`\n\t* To SSH into the `master` branch of your Integration environment:\n\n\t\t\tmagento-cloud environment:ssh\n2.\tFind the database login information with the following command:\n\n    ```\n\t\tphp -r 'print_r(json_decode(base64_decode($_ENV[\"MAGENTO_CLOUD_RELATIONSHIPS\"]))->database);'\n    ```\n\n3.\tCreate a database dump. The following command creates a database dump as a gzip file.\n\n\tFor Starter environments and Pro Integration environments:\n\n\t\tmysqldump -h  --user= --password= --single-transaction --triggers main | gzip - > /tmp/database.sql.gz\n\n\tFor Pro Staging and Production environments, the name of the database is in the `MAGENTO_CLOUD_RELATIONSHIPS` variable (typically the same as the application name and user name):\n\n\t\tmysqldump -h  --user= --password= --single-transaction --triggers  | gzip - > /tmp/database.sql.gz\n\n4.\tTransfer the database dump to Staging or Production with an `rsync` command:\n\n\t*\tStaging: `rsync -azvP /tmp/database.sql.gz _stg@.ent.magento.cloud:/tmp`\n\t*\tProduction: `rsync -azvP /tmp/database.sql.gz @.ent.magento.cloud:/tmp`\n8.\tEnter `exit` to terminate the SSH connection.\n9.\tOpen an SSH connection to the environment you want to migrate the database into:\n\n\t*\tStaging: `ssh -A _stg@.ent.magento.cloud`\n\t*\tProduction: `ssh -A @.ent.magento.cloud`\n\t* To SSH into the `master` branch of your Integration environment:\n\n\t\t\tmagento-cloud environment:ssh\n10.\tImport the database dump with the following command:\n\n\t\tzcat database.sql.gz | mysql -u  -p \n\n\tThe following is an example using information from step 2:\n\n\t\tzcat database.sql.gz | mysql -u user main\n\n### Troubleshooting the database migration\nIf you encounter the following error, you can try to create a database dump with the DEFINER replaced:\n\n\tERROR 1277 (42000) at line : Access denied; you need (at least one of) the SUPER privilege(s) for this operation\n\nThis error occurs because the DEFINER for the triggers in the SQL dump is the production user. This user requires administrative permissions.\n\nTo solve the issue, you can generate a new database dump changing or removing the `DEFINER` clause. The following is one example of completing this change:\n\n\tmysqldump -h  --user= --password= --single-transaction main  | sed 's/DEFINER[ ]*=[ ]*[^*]*\\*/\\*/g' | gzip > /tmp/database_no-definer.sql.gz\n\nUse the database dump you just created to [migrate the database](#cloud-live-migrate-db).\n\n\n  After migrating the database, you can set up your stored procedures or views in Staging or Production the same way you did in your Integration environment.\n\n\n#### Next step\n[Test deployment]({{ page.baseurl }}cloud/live/stage-prod-test.html)\n",
      "url": "/guides/v2.0/cloud/live/stage-prod-migrate.html"
    }
    ,
  
    "guides-v2-0-cloud-live-stage-prod-test-html": {
      "title": "Test deployment",
      "content": "#### Previous step:\n[Migrate data and static files]({{page.baseurl}}cloud/live/stage-prod-migrate.html)\n\nWhen your code, files, and data is successfully migrated to Staging or Production, use the environment URLs to test your site(s) and store(s). For a list of your URLs, see [Starter]({{page.baseurl}}cloud/live/stage-prod-migrate-prereq.html#starter-urls) and [Pro]({{page.baseurl}}cloud/live/stage-prod-migrate-prereq.html#pro-urls) access information.\n\nThe following information provides information on verifying logs, testing Fastly configurations, user acceptence testing (UAT), and more.\n\n## Log files {#logs}\nIf you encounter errors on deployment or other issues when testing, check the log files. Log files are located under the `var/log` directory.\n\nThe deployment log is located in `/var/log/platform//post_deploy.log`. The value of `` depends on the project ID and whether the environment is Staging or Production. For example, with a project ID of `yw1unoukjcawe`, the Staging user is `yw1unoukjcawe_stg` and the Production user is `yw1unoukjcawe`.\n\nWhen accessing logs in Production, you may need to SSH into each of the three nodes to locate the logs.\n\nFor more information, see [View logs for troubleshooting]({{page.baseurl}}cloud/trouble/environments-logs.html)\n\n## Check the code base {#codebase}\nVerify your `master` code base correctly deployed to Staging and Production environments. The environments should have identical code bases.\n\n## Verify configuration settings {#configsettings}\nCheck the Magento configuration settings through the Admin panel including the Base URL, Base Admin URL, multi-site settings, and more. If you need to make any additional changes, complete edits in your local Git branch and push to the `master` branch in Integration, Staging, and Production.\n\n## Check Fastly caching {#fastly}\nVerify Fastly is caching properly on Staging and Production. [Configuring Fastly]({{page.baseurl}}cloud/access-acct/fastly.html) requires careful attention to details, using the correct Fastly Service ID and Fastly API key, and a proper VCL snippet uploaded.\n\nFirst, check for headers with a dig command to the URL. In a terminal application, enter `dig ` to verify Fastly services display in the headers. For additional `dig` tests, see Fastly's [Testing before changing DNS](https://docs.fastly.com/guides/basic-configuration/testing-setup-before-changing-domains){:target=\"_blank\"}.\n\nThe following examples use Pro URLs. You can use any URL with the `dig` command.\n\n* Staging: `dig http[s]://staging..c..ent.magento.cloud`\n* Production: `dig http[s]://.{1|2|3}..ent.magento.cloud`\n\nNext, use a `curl` command to verify X-Magento-Tags exist and additional header information. The format for the command is:\n\n\tcurl http[s]:// -H \"host: \" -k -vo /dev/null -HFastly-Debug:1\n\nFor Starter, enter the full site URL from your environment [Access info]({{page.baseurl}}cloud/live/stage-prod-migrate-prereq.html#starter-urls) in the command to view the headers.\n\nFor Pro Staging and Production, the command differs per server:\n\n* Staging: `curl http[s]://staging..c..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1`\n* Production:\n\n\t* The load balancer: `curl http[s]://.c..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1`\n\t* A direct Origin node: `curl http[s]://.{1|2|3}..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1`\n\nAfter you are live, you can also check your live site: `curl https:// -k -vo /dev/null -HFastly-Debug:1`. You can also add `--resolve` if your live URL is not set up with DNS.\n\nCheck the returned response headers and values:\n\n*\t`Fastly-Magento-VCL-Uploaded` should be present\n*\t`X-Magento-Tags` should be returned\n*\t`Fastly-Module-Enabled` should be either `Yes` or the Fastly extension version number\n*\t`X-Cache` should be either `HIT` or `HIT, HIT`\n*\t`x-cache-hits` should be 1,1\n*\t[`Cache-Control: max-age`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9){:target=\"_blank\"} should be greater than 0\n*\t[`Pragma`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32){:target=\"_blank\"} should be `cache`\n\nTo verify Fastly is enabled in Staging and Production, check the configuration in the Magento Admin for each environment:\n\n1. Log into the Admin console for Staging and Production using the URL with /admin (or the changed Admin URL).\n2. Navigate to **Stores** > **Configuration** > **Advanced** > **System**. Scroll and click **Full Page Cache**.\n3. Ensure Fastly CDN is selected.\n4. Click on **Fastly Configuration**. Ensure the Fastly Service ID and Fastly API token are entered (your Fastly credentials). Verify you have the correct credentials entered for the Staging and Production environment. Click **Test credentials** to help.\n\n\nMake sure you entered the correct Fastly Service ID and API token in your Staging and Production environments. If you enter Staging credentials in your Production environment, you may not be able to upload your VCL snippets, caching will not work correctly, and your caching will be pointed to the wrong server and stores. Your Fastly credentials are created and mapped per service environment.\n\n\nThe module must be enabled to cache your site. If you have additional extensions enabled that affect headers, one of them could cause issues with Fastly. If you have further issues, see [Set up Fastly]({{page.baseurl}}cloud/access-acct/fastly.html) and [Fastly troubleshooting]({{page.baseurl}}cloud/trouble/trouble_fastly.html).\n\n## Complete UAT testing {#uat-testing}\nComplete User Acceptance Testing (UAT) on Staging and Production. The following tests are a quick list of possible tasks and areas to test as a Merchant and Customer. Your list may be longer and include additional tests for custom modules, extensions, and 3rd party integrations. When testing, use desktops, laptops, and mobile devices.\n\nIf you encounter issues, save your reproduction steps, error messages, strange screen captures, and links. Use this information to investigate and fix issues in Integration environment code and configurations or environment settings.\n\n\n\nUser management\n\n\nCreate and edit customer accounts, verify emails\nCreate Admin roles for merchants \nCreate merchant accounts with specific roles\nTest merchant account access per role\n\n\n\n\nCatalogs & Products\n\n\nCreate a catalog with associated products\nCreate products for your storefront, including all product types: simple, configurable, bundled, etc\nAdd product images, swatches, videos, and other media options\nConfigure price, discounts, pricing rules \nConfigure advanced features including price ranges, featured products, availability dates\nModify inventory and verify correct values display and change per increase and completed purchase\n\n\n\n\nCarts & Checkout\n\n\nSearch for products and select filtering options\nAdd products to the cart from search results, category pages, product pages\nTest all product types\nView the cart and modify contents by removing or changing amounts \nGo through checkout to verify the order amounts against the cart and product info\nVerify tax correctly calculates for the cart\nComplete a purchase with different options: add a coupon, select shipping, enter shipping and billing information, and payment information\nVerify payment gateways and options during checkout\nCheck for on screen notifications, orders listed in the customer account, and email notifications\nTest guest and customer checkout\n\n\n\n\nOrder management\n\n\nCreate an order for a customer\nSearch for and view orders\nModify an order by adding and removing products, changing amounts, modifying shipping and billing information\nHandle a refund\nCancel an order\nApply coupon codes and discounts\n\n\n\n\nSite content\n\n\nCheck all themes and assets load correctly\nVerify CSS displays correctly, including responsive media sizes\nCheck Terms & Conditions, refund policy, and other policy information\nCheck contant information, links, and more about your company\nSearch for products and content, check filtering of results\nVerify the footer block and top navigation blocks\nTest the 404 and Maintenance pages\n\n\n\n\nExtensions\n\n\nVerify all extension settings, especially for any taxation, shipping, and payment modules (example: order sent to warehouse and financial mgmt system)\nTest all customized module and installed Magento extension interactions\nCheck data for any interactions that should complete (payments, orders, email notifications, etc)\nCheck configurations per environment for your extensions\nVerify dependencies between modules and extensions work\nCheck all actions as a merchant and a customer\n\n\n\n\n3rd party integrations\n\n\nVerify data correctly saves in Magento and exports, pushes, or is accessible by the 3rd party service (example: orders display in 3rd party order mgmt system)\nVerify any configurations and interactions per integration\nPerform round trip tests originating in Magento and your 3rd party service\nVerify authentication completes\nCheck for any logged issues to update code integrations or error messages in control panels\n\n\n\n\nBackend testing\n\n\nTest and clear cache \nPerform reindexes and verify results\nCheck Magento cron jobs, check for any cron_schedule errors\nVerify and check for any shell script issues\nCheck for any logged issues: Magento logs, PHP logs, MySQL logs, email logs\n\n\n\n\n\n## Complete load and stress tests {#loadtest}\nBefore launching, we highly recommend performing extensive traffic and performance testing on your Staging and Production environments.  You should consider performance testing for your frontend and backend processes.\n\nBefore you begin testing, please enter a ticket with support advising the environments you are testing, what tools you are using, and the time frame. Update the ticket with results and information to track performance. When you complete testing, add your updated results and note in the ticket testing is complete with a date and time stamp.\n\nWe recommend that you review the [Magento Performance Toolkit](https://github.com/magento/magento2/tree/2.0/setup/performance-toolkit){:target=\"_blank\"} options as part of your pre-launch readiness process.\n\nFor best results, we recommend the following tools:\n\n* [Siege](https://www.joedog.org/siege-home/){:target=\"_blank\"}: Traffic shaping and testing software to push your store to the limit. Hit your site with a configurable number of simiulated clients. Siege supports basic authentication, cookies, HTTP, HTTPS and FTP protocols.\n* [Jmeter](http://jmeter.apache.org/){:target=\"_blank\"}: Excellent load testing to help gauge performance for spiked traffic, like for flash sales. Create custom tests to run against your site.\n* New Relic (provided): Helps locate processes and areas of the site causing slow performance with tracked time spent per action like transmitting data, queries, Redis, and so on.\n* [Blackfire]({{page.baseurl}}cloud/project/project-integrate-blackfire.html) (provided): Helps track through the issues New Relic finds and helps you dig deeper into the issue for specifics. Blackfire profiles the environment and helps locate bottlenecks indepth: process, method call, query, load, and so on.\n* [WebPageTest](https://www.webpagetest.org/){:target=\"_blank\"} and [Pingdom](https://www.pingdom.com/){:target=\"_blank\"}: Real-time analysis of your site pages load time with different origin locations. Pingdom may cost a fee. WebPageTest is a free tool.\n\n## Set up Magento Security Scan Tool {#security-scan}\nWe provide a free Security Scan Tool for your sites. To add your sites and run the tool, see [Magento Security Scan Tool]({{page.baseurl}}cloud/live/live.html#security-scan).\n\n#### Related topic\n* [Go live and launch]({{page.baseurl}}cloud/live/live.html)\n* [Go live checklist]({{page.baseurl}}cloud/live/go-live-checklist.html)\n* [Launch steps]({{page.baseurl}}cloud/live/launch-steps.html)\n",
      "url": "/guides/v2.0/cloud/live/stage-prod-test.html"
    }
    ,
  
    "guides-v2-0-cloud-basic-information-starter-architecture-html": {
      "title": "Starter architecture",
      "content": "All of your code is contained in the {{site.data.var.ece}} Starter project. The _project_ is your Magento store code, extensions, and integrations in a Master Git branch. Each project supports up to 4 total environments including three active Integration *environments* and a Production environment using the `master` Git branch.\n\nAll environments are in PAAS (Platform as a Service) containers. These containers are deployed inside highly restricted containers on a grid of servers. These environments are read-only, accepting deployed code changes from Git branches pushed from your local workspace.\n\nYou can use any development and branching methodology you like. We strongly recommend creating a Staging environment and branch as one of the Integration environments.\n\n\nThe following architecture information uses an architecture including Production, Staging, and Integration environments.\n\n\n![High-level view of Starter project]({{ site.baseurl }}common/images/cloud_arch-starter.png)\n\n## Production with a master branch {#cloud-arch-prod}\nThe Production environment is your live store(s) and site(s). The environment includes your `master` Git branch, a web server, database, and configured services to fully test your site.\n\nThe Production environment runs your public-facing Magento single and multisite storefronts. This environment include triple-redundant High Availability nodes for continuous access and failover protection for your customers. This system is read-only, requiring deployment across the architecture from Integration to Staging and finally Production.\n\nWe walk you through [deploying to Production]({{page.baseurl}}cloud/live/stage-prod-live.html) and [Go Live]({{page.baseurl}}cloud/live/live.html) requirements and processes.\n\nWe highly recommend fully testing in your Staging environment and branch prior to pushing to Production.\n\n## Staging branch and environment {#cloud-arch-stage}\nWe recommend creating a branch called `staging` from `master`. Use this Staging environment and Git branch as your pre-production environment to test code, modules and extensions, payment gateways, shipping, product data, and much more. This environment will receive all services to match Production including Fastly, New Relic, Blackfire, and search.\n\nAdditional sections in this guide provide instructions and walk-throughs for final code deployments and testing production level interactions in a safe Staging environment. For best performance and feature testing, replicate your Production database into Staging.\n\nWe walk you through [deploying to Staging]({{page.baseurl}}cloud/live/stage-prod-live.html) and [testing your store(s)]({{page.baseurl}}cloud/live/stage-prod-test.html) requirements and processes.\n\nWe highly recommend fully testing every merchant and customer interaction in Staging prior to pushing to Production.\n\n## Integration environment {#cloud-arch-int}\nDevelopers use the Integration environment to develop, deploy, and test the Magento application, custom code, extensions, and services. If you created a Staging environment, you have up to two active environments on a grid for two active Git branches. Each Integration environment matches the name of the branch and includes a web server, database, and configured services to fully test your site.\n\nYou can have an unlimited number of inactive Git branches to store code. To access, view, and test inactive branches, you must activate them. This environment does not support all services. For example, Fastly is not accessible in Integration.\n\nThe process for developing in Integration requires the following process:\n\n* Branch and develop off of `staging`\n* Develop all work on your local workspace in these branches\n* Push code to Git to build and deploy on an Integration environment for testing\n* As work is completed, merge to `staging`\n\nAdditional sections in this guide provide instructions and walk-throughs for setting up your [local workspace]({{page.baseurl}}cloud/before/before-workspace.html), working with Git branches, and [deploying code]({{page.baseurl}}cloud/live/stage-prod-live.html).\n\n## Production and Staging technology stack {#technology}\nThe Production and Staging environments include the following technologies. You can modify and configure these technologies through the [.magento.app.yaml file]({{page.baseurl}}cloud/project/project-conf-files_magento-app.html).\n\n* Fastly for http caching and CDN\n* Nginx web server speaking to PHP-FPM, one instance with multiple workers\n* Redis server\n* Elasticsearch for searching for {{site.data.var.ece}} 2.1 and later\n* Solr search is supported for {{site.data.var.ece}} 2.0\n\n### Services {#cloud-arch-services}\n{{site.data.var.ece}} currently supports the following services: PHP, MySQL (MariaDB), Solr (Magento 2.0.x), Elasticsearch (Magento 2.1.x and later), Redis, and RabbitMQ.\n\nEach service runs in its own secure container. containers are managed together in the project. Some services are built-in, such as the following:\n\n*\tHTTP router (handling incoming requests, but also caching and redirects)\n*\tPHP application server\n*\tGit\n*\tSecure Shell (SSH)\n\nYou can even have multiple applications running in the same project. Building a microservice oriented architecture with Magento Commerce is as easy as managing a monolithic application.\n\n### Software versions {#cloud-arch-software}\n{{site.data.var.ece}} uses:\n\n*\tOperating system: Debian GNU/Linux 8 (jessie)\n*\tWeb server: {% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %} 1.8\n\nThis software is *not* upgradable but versions for the following software is configurable:\n\n* [PHP]({{page.baseurl}}cloud/project/project-conf-files_magento-app.html)\n* [MySQL]({{page.baseurl}}cloud/project/project-conf-files_services-mysql.html)\n* [Solr](https://devdocs.magento.com/guides/v2.0/cloud/project/project-conf-files_services-solr.html)\n* [Redis]({{page.baseurl}}cloud/project/project-conf-files_services-redis.html)\n* [RabbitMQ]({{page.baseurl}}cloud/project/project-conf-files_services-rabbit.html)\n* [Elasticsearch]({{page.baseurl}}cloud/project/project-conf-files_services-elastic.html)\n\nFor Staging and Production, you will use Fastly for CDN and caching. We recommend installing Fastly module 1.2.33 or later. For details, see [Fastly in Cloud]({{page.baseurl}}cloud/basic-information/cloud-fastly.html).\n\nFor detailed information on supported versions and extensions, see the following information. These files allow you to configure software versions you want to use in your implementation.\n\n*\t[`.magento.app.yaml`]({{page.baseurl}}cloud/project/project-conf-files_magento-app.html)\n*\t[`routes.yaml`]({{page.baseurl}}cloud/project/project-conf-files_routes.html)\n*\t[`services.yaml`]({{page.baseurl}}cloud/project/project-conf-files_services.html)\n\n### Backup and disaster recovery {#backup}\nYou can create a snapshot of your database and file system using the Project Web Interface or the CLI. The snapshot includes your deployed code, installed software and services, and data. See [Snapshots and backup management]({{page.baseurl}}cloud/project/project-webint-snap.html).\n\n## Prepare for development {#develop}\nTo branch and develop your Magento store:\n\n* Set up your local environment\n* Clone the `master` branch from the Project to your local\n* Create a `staging` branch from `master`\n* Create branches for development from `staging`\n* Push code to Git that builds and deploys to an environment for testing\n\nAdditional sections in this guide provide instructions and walk-throughs for setting up your [local workspace]({{page.baseurl}}cloud/before/before-workspace.html), working with Git branches, [deploying code]({{page.baseurl}}cloud/live/stage-prod-live.html), and [going live]({{page.baseurl}}cloud/live/live.html) .\n\n#### Related topics\n*\t[Starter Develop and Deploy Workflow]({{page.baseurl}}cloud/basic-information/starter-develop-deploy-workflow.html)\n*\t[Deployment process]({{page.baseurl}}cloud/reference/discover-deploy.html)\n*\t[Technologies and requirements]({{page.baseurl}}cloud/requirements/cloud-requirements.html)\n",
      "url": "/guides/v2.0/cloud/basic-information/starter-architecture.html"
    }
    ,
  
    "guides-v2-0-cloud-basic-information-starter-develop-deploy-workflow-html": {
      "title": "Starter develop and deploy workflow",
      "content": "Everything in {{site.data.var.ece}} is Git-driven. Your [project]({{ page.baseurl }}cloud/project/projects.html) is a Master Git branch cloned from a Magento 2 repository. Every active Git branch has an associated full environment. Depending on your {{site.data.var.ece}} plan subscription, your deployment workflow may differ.\n\nThe general workflow for all development and deployment includes:\n\n* Push code to the remote Git branch\n* Build and deploy processes run\n* The environments updated with code, services, and configurations\n\nThe Starter plan gives you four active environments, including a `master` environment for your Production server. You have the option to use the remaining three active branches any way you want.\n\nWe **recommend creating a Staging branch** for fully testing your code, extensions, integrations, and data as a near-production environment. This branch includes all services and features of your Production environment. The remaining branches you can create from `staging` and use for all development, easily merging work up through `staging` then `master`.\n\nEvery active environment gives you the Magento and branch code installed and deployed, configurable services, and a database. Only the Production and Staging environments have full services including Fastly and New Relic.\n\nThe following diagram details the branch and environment relationships:\n\n![High-level view of Starter project]({{ site.baseurl }}common/images/cloud_arch-starter.png)\n\nYou can manage all of your environments including Production and Staging directly through the [Project Web Interface]({{ page.baseurl }}cloud/project/project-webint-basic.html), through the store and Admin panel using provided URLs, and using SSH and the [Magento Cloud command-line]({{ page.baseurl }}cloud/reference/cli-ref-topic.html).\n\n\nThe following workflow and examples uses a Production, Staging, and Integration architecture.\n\n\n## Starter environments and branches {#env-branches}\nFor your environments, we recommend deploying and testing following a Development > Staging > Production workflow.\n\n* Production environment (live site) is your `master` Git branch with an associated full environment with all services\n* Staging environment is a Git branch we recommend you create called `staging`, to receive full services matching Production\n* Integration environments include two active branches we recommend created from `staging`\n\nFor your branches, you can follow any methodology. One example follows an agile methodology such as scrum to create [branches for every sprint]({{page.baseurl}}cloud/env/environments.html).\n\nFrom each sprint, you can have branches for every user story. All the stories become testable. You can continually merge to the sprint branch and validate that on a continuous basis. When the sprint ends, there is no testing bottleneck, and you can just merge to master and put the whole sprint into production.\n\nFor detailed information, see [Starter architecture]({{page.baseurl}}cloud/basic-information/starter-architecture.html).\n\n## Development workflow {#development}\nDevelopment and deployment on Starter plans begins with your initial project. You create your project with the \"blank site\", which is a {{site.data.var.ece}} template code repo with a fully prepared store. This creates a `master` branch of Git code in your Production environment.\n\nThe full process involves:\n\n* [Clone and branch](#clone-branch) from Master for Staging and development branches\n* [Develop code](#dev-code) and install extensions locally in a branch\n* [Configure](#configure-store) your store and extension settings\n* [Generate configuration](#config-management) management files\n* [Push code](#push-code) and configuration to build and deploy to an environment\n\n![Develop and deploy workflow]({{ site.baseurl }}common/images/cloud_workflow-starter.png)\n\nYou also have a few optional steps to help develop and test your code and store data:\n\n* [Install sample data](#sample-data) to your store\n* [Pull production store data](#prod-data) down to environments\n\nThis process assumes you would have your [local developer workspace]({{page.baseurl}}cloud/access-acct/first-time-setup.html) set up. Feel free to read over this process even if your local isn't ready.\n\n### Clone and branch {#clone-branch}\nWhen you created your project, a `master` branch was cloned using the {{site.data.var.ece}} Git repository. To start branching and working with code, you will need to clone the `master` to your local.\n\nThe format of the Git clone command is:\n\n    git fetch origin\n    git pull origin \n\nThe first time you start working in branches for your Starter project, you need to create a Staging branch. This sets up a Staging environment with a code branch matching the Production `master` branch and environment.\n\nNext, create branches from `staging` to develop code, add extensions, and configure 3rd party integrations. Anytime you need to develop custom code, add extensions, integrate with a 3rd party service, work in a develop branch created from `staging`. You will have four active Integration environments available. When you push your an active branch of Git code, one of these Integration environments automatically deploys your code to test.\n\nWe walk you through the process when you [set up your local]({{page.baseurl}}cloud/access-acct/first-time-setup.html).\n\nThe format of the Git branch command is:\n\n    git checkout \n\nThe format of the Magento Cloud CLI branch command is:\n\n    magento-cloud environment:branch  \n\n\n![Branch from Master]({{ site.baseurl }}common/images/cloud_workflow-branching.png)\n\n### Develop code {#dev-code}\nIt's the time you have been waiting for...writing code. Using this base branch of {{site.data.var.ece}} code, you can start installing extensions, developing custom code, adding themes, and much more.\n\nWe recommend using a branching strategy with your development work. Using one branch to do all of your work all at once might make testing difficult. For example, you could follow continuous integration and sprint methodologies to work:\n\n* Add a few extensions and configure them with your first branch\n* Push this code, test, and merge to Staging then Production\n* Fully configure your services in `services.yaml` and add a theme\n* Push this code, test, and merge to Staging then Production\n* Integrate with a 3rd party service\n* Push this code, test, and merge to Staging then Production\n\nAnd so on until you have your store fully built, configured, and ready to go live. But keep reading, we have even better options for your store and code configuration!\n\n\nDo not complete any configurations on your local yet.\n\n\n![Develop code and push to deploy]({{ site.baseurl }}common/images/cloud_workflow-push-code.png)\n\n### Configure store {#configure-store}\nWhen you are ready to configure your store, have all code pushed to your Integration environment and access the Magento Admin. You should fully configure all store settings in the Integration environment Admin, not on your local. If you need the URL, see the Project Web Interface. The Store Admin URL is located on the branch page.\n\nFor the best information on configurations, we recommend reviewing {{site.data.var.ee}} and your extension documentation. Here are some links and ideas to help you get kickstarted:\n\n* [Best practices for store configuration]({{page.baseurl}}cloud/configure/configure-best-practices.html) for specific best practices in the cloud\n* [Basic configuration](http://docs.magento.com/m2/ee/user_guide/configuration/configuration-basic.html){:target=\"\\_blank\"} for store admin access, name, languages, currencies, branding, sites, store views and more\n* [Theme](http://docs.magento.com/m2/ee/user_guide/design/design-theme.html){:target=\"\\_blank\"} for your look and feel of the site and stores including CSS and layouts\n* [System configuration](http://docs.magento.com/m2/ee/user_guide/system/system.html){:target=\"\\_blank\"} for roles, tools, notifications, and your encryption key for your database\n* Extension settings using their documentation\n\nBeyond just store settings, you can further configure multiple sites and stores, configured services, and more. For details, see [Configure Magento Commerce]({{ page.baseurl }}cloud/configure/configuration-overview.html).\n\nNow you need to get these settings into your code. We have a helpful command to do this, keep reading.\n\n### Generate configuration management files {#config-management}\nIf you are familiar with Magento, you may be concerned about how to get your configuration settings from your database in development to Staging and Production. Previously, you had to copy down on paper or a file all of your configuration settings to enter them manually in another environment. Or you may have dumped your database and push that data to another environment.\n\n{{site.data.var.ece}} provides a set of two [Configuration Management](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-over.html) commands that export configuration settings from your environment into a file. These commands are only available for **{{site.data.var.ece}} 2.1.4 and later** (not 2.2).\n\n* `php bin/magento magento-cloud:scd-dump`: Recommended. Exports only the configuration settings you have entered or modified from defaults into a configuration file.\n* `php bin/magento app:config:dump`: Exports every configuration setting, including modified and default, into a configuration file.\n\nThe generated file is located in `app/etc/`:\n\n* For 2.1.4 and later: `config.local.php`\n* For 2.2 and later: `config.php`\n\nYou will generate the file in the Integration environment where you configured Magento. We walk you through the process of generating the file, adding it to your Git branch, and deploying it.\n\n**Important notes** on Configuration Management:\n\n* Any configuration setting included in the file is locked from editing, or read-only, in the deployed environment. This is one reason we recommend using `scd-dump`.\n\n  For example, we will have you install a module for Fastly in your development environment. You will only configure this module in Staging and Production. Using `scd-dump` keeps those default fields editable.\n* This file can be long depending on the size of your deployment. The `scd-dump` command generates a far small file than `app:config:dump`.\n\n![Generate configuration management file]({{ site.baseurl }}common/images/cloud_workflow-config-mgmt.png)\n\nAn additional feature of this command is part of {{site.data.var.ece}} 2.2. Any values determined to be sensitive data, like sandbox credentials for a PayPal module, will be generated into another configuration file called `env.php` in `app/etc/`. This file remains in the exact environment it is created without traveling with your code. You will not add this file to your code repository. You can also create environment variables with CLI commands in all {{site.data.var.ece}} versions.\n\n![Environment variables generate]({{ site.baseurl }}common/images/cloud_workflow-env-variables.png)\n\nFor more information, see [Configuration Management](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-over.html).\n\n### Push code and test {#push-code}\nAt this point, you should have a developed code branch with a configuration file (`config.local.php` or `config.php`) ready to test.\n\nEverytime you push code from your local environment, a series of build and deploy scripts run. These scripts generate new Magento code and deploy it to the remote environment. For example, if you are pushing a development branch from your local to the remote Git branch, a matching environment updates services, code, and static content.\n\nYou can directly access this environment with a store URL, Magento Admin URL, and SSH to enter any needed CLI commands. These environments include a web server, database, and configured services. When ready, you can start deploying and testing in Staging.\n\nFor more information, see [Deployment workflow](#deploy).\n\n### Optional: Install sample data {#sample-data}\nIf you need some example data when developing your store, you can install our sample data. This data simulates an active Magento store, including customers, products, and other data. This sample data works best with a \"blank site\" {{site.data.var.ece}} template installation when creating your project.\n\nWe recommend installing sample data in your local installation and Integration environments. If you use this data in Staging or Production, make sure to clear out the information and products before going live.\n\nFor instructions, see [Install optional sample data]({{page.baseurl}}cloud/howtos/sample-data.html).\n\n![Install optional sample data]({{ site.baseurl }}common/images/cloud_workflow-sample-data.png)\n\n### Optional: Pull production data {#prod-data}\nWe recommend adding all of your products, catalogs, site content, and so on (not configurations) directly in Production. By adding this data in Production, you immediately update prices, coupons, inventory stock, strategize your sales and future offerings, and much more for your customers. This data does not include extension configurations. You will set those in your development branch on your local.\n\nAs you develop features, add extensions, and design themes, having real data to work with is helpful. At any time, you can create a database dump from Production and push that to your Staging environment, and possibly Integration environments as you like.\n\n{% include cloud/data-collection.md %}\n\n![Pull and sanitize production data]({{ site.baseurl }}common/images/cloud_workflow-data-code-process.png)\n\n\nPrior to pushing the data to another environment, you should consider sanitizing your data. You have a couple of options including [using support utilities]({{ page.baseurl }}config-guide/cli/config-cli-subcommands-spt-util.html) or developing a script to scrub out customer data.\n\n\n\nImportant: We don't recommend pushing a database from an Integration or Staging environment. This data will overwrite your Production live data including sales, orders, new and updated customers, and much more.\n\n\n## Deployment workflow {#deploy}\nAs we detailed in the architecture information, {{site.data.var.ece}} is Git driven. Deploying {{site.data.var.ece}} is part of your Git push processes for branches.\n\nWhen you push branched code from your local to the remote Git branch, a series of build and deploy scripts begin.\n\nBuild scripts:\n\n* Your site on the target environment continue running during a build\n* Check and run {{site.data.var.ece}} patches and hotfixes\n* Compile your code with a build and deploy log\n* Check for Configuration Management, if there static content deploy occurs during this phase\n* Create or use a slug of unchanged code to speed up the process\n* Provision all backend services and applications\n\nDeploy scripts:\n\n* Puts your site on the target environment in Maintenance mode\n* Deploys static content if not completed during Build\n* Installs or updates {{site.data.var.ece}}\n* Configure routing for traffic\n\nWhen fully completed, your store comes back online, live, with all of your updated code and configurations.\n\nTo learn more, see [Deployment process]({{page.baseurl}}cloud/reference/discover-deploy.html).\n\n### Push to Staging and test {#staging}\nYou should always push all of your code in iterations to your Staging environment for full testing. The first time you use this environment, you will need to configure a few services including [Fastly]({{page.baseurl}}cloud/basic-information/cloud-fastly.html), [Blackfire Profiler]({{page.baseurl}}cloud/project/project-integrate-blackfire.html), and [New Relic APM]({{page.baseurl}}cloud/project/new-relic.html). We also recommend configuring payment gateways, shipping, notifications, and other vital services with sandbox or testing credentials.\n\nStaging is a pre-production environment, providing all services and settings as close to Production as possible. Thoroughly test every service, verify your performance testing tools, perform UAT testing as an administrator and customers, until you feel your store is ready for Production.\n\nTo learn more, see [Deploy your store]({{page.baseurl}}cloud/live/stage-prod-live.html).\n\n### Push to Master / Production {#pro}\nWhen you push to the `master` branch, you are pushing to Production. Treat configuration and testing of Production much as your Staging environment. The important difference in this environment is using live credentials. The moment you go live and launch, customers must be able to complete purchases and administrators should be able to manage your live store.\n\nTo learn more, see [Deploy your store]({{page.baseurl}}cloud/live/stage-prod-live.html).\n\n### Go live {#go-live}\nWe provide a clear walk-through for going live and launching. It requires more steps than pressing a button. But when complete, your store can serve up products in your customized theme for sale immediately.\n\nTo learn more, check out [Go live and launch]({{page.baseurl}}cloud/live/live.html).\n\n## Continuous integration {#continuous-integration}\nFollowing your branching and development methodologies, you can easily develop new features, configure changes, and add extensions to continuously develop and deploy updates.\n\n{{site.data.var.ece}} environments support continous integration for constant updates. This workflow supports releases multiple times a day or on a set schedule according to your business needs.\n\n* Create development branches with future features and changes\n* Test the code in your development environments\n* Deploy and test in Staging\n* Deploy to Production\n\nFor more information, see [Continuous integration]({{page.baseurl}}cloud/deploy/continuous-deployment.html).\n\n#### Related topics\n*\t[First-time local environment setup]({{page.baseurl}}cloud/access-acct/first-time-setup.html)\n*\t[Starter architecture]({{page.baseurl}}cloud/basic-information/starter-architecture.html)\n*\t[Deployment process]({{page.baseurl}}cloud/reference/discover-deploy.html)\n",
      "url": "/guides/v2.0/cloud/basic-information/starter-develop-deploy-workflow.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-module-man-step3-parent-html": {
      "title": "Step 3",
      "content": "",
      "url": "/guides/v2.0/comp-mgr/module-man/step3-parent.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-storefront-storefront-best-practices-html": {
      "title": "Storefront UI best practices",
      "content": "The {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} theme is the front facing interface for a Magento application that can be customized through a [theme extension]({{page.baseurl}}frontend-dev-guide/themes/theme-general.html). We suggest adopting the following best practices to avoid common problems we have seen other developers make while making a {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %}.\n\n### Clear your cache periodically\n\nForgetting to clear or disable caching can cause a lot of development headache. Visual spot checks on rendered content are unreliable when the content being displayed is retrieved from the {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %}. We recommend clearing your cache before doing visual checks for your theme to make sure the content displayed is correct.\n\nYou can manage your cache in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} section under **System > Cache Management**.\n\n**Recommended Reading**\n\n* [Clear directories during development]({{page.baseurl}}howdoi/php/php_clear-dirs.html)\n\n### Consider different resolutions/devices\n\nWhen developing your theme extension, you should check how it looks using different resolutions or devices. We recommend you apply [responsive web design(RWD)](https://en.wikipedia.org/wiki/Responsive_web_design){:target=\"_blank\"} concepts to optimize the look and feel of your theme on different devices and resolutions. To help you with this task, both [Chrome](https://developer.chrome.com/devtools){:target=\"_blank\"} and [FireFox](https://developer.mozilla.org/en-US/docs/Tools){:target=\"_blank\"} web browsers have built in developer tools that allow you to view your theme under different resolutions.\n\n**Recommended Reading**\n\n* [How to make your theme responsive and mobile]({{page.baseurl}}frontend-dev-guide/responsive-web-design/rwd_overview.html)\n\n### Inherit and customise\n\nThere is a lot of work in building a theme extension for Magento from scratch. This is why we recommend you inherit and customize an existing theme. Magento comes with both Blank and Luma themes after initial install. You can leverage the work already done to make those two themes responsive by setting one of them as your theme's parent.\n\n**Recommended Reading**\n\n* [Theme inheritance]({{page.baseurl}}frontend-dev-guide/themes/theme-inherit.html)\n",
      "url": "/guides/v2.0/ext-best-practices/storefront/storefront-best-practices.html"
    }
    ,
  
    "guides-v2-0-architecture-storefront-customization-html": {
      "title": "Storefront customization strategies",
      "content": "## Overview\n\nWe can generalize about the range of {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} customizations that the Magento supports. This range spans the simplest customizations, which involve only small additions to the default Magento storefront settings, to a complete replacement of Magento-provided {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} and {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %}.\n\n## Storefront customization levels\n\nThese four levels of potential storefront customization are listed in order to increase complexity.\n\n### Extend Magento-Provided CSS\nMagento supplies a default {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} and a LESS-based CSS. You can substantially change a storefront using CSS only. This uncomplicated strategy might suit projects with a limited budget, or might interest developers who create different skins for a site. A small business enter this process of storefront customization by buying a third-party developed theme from Magento Marketplace to extend the default values.\n\n### Replace PHTML template files\nIn addition to extending the default CSS, you can generate different HTML {% glossarytooltip 8f407f13-4350-449b-9dc5-217dcf01bc42 %}markup{% endglossarytooltip %}. For example, you might need to add a missing CSS class name, or an add an extra `` tag to achieve some visual effect. You might also need to tweak some {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} to cope with different HTML markup. This change is more demanding than simply extending Magento CSS, but is still within the grasp of smaller projects and leaner teams.\n\n### Replace Magento-Provided CSS\nRather than edit the default CSS provided by Magento, you might decide to replace all the default storefront CSS code with your own. This strategy avoids tying a project to the Magento-provided CSS, but puts a greater burden on project development and integration. It also allows use of different CSS tools or technologies not provided with Magento. Partners who build their own set of CSS libraries could reuse these libraries on different customer projects. (These unique CSS libraries may help differentiate a partner from others in the market.)\n\nIn addition to replacing CSS files, you might need to replace small amounts of HTML and JavaScript.\n\n### Replace Magento-Provided CSS, HTML, and JavaScript\nDelivering a sharply different shopping experience than the default Magento installation provides is a more substantial task. However, the tradeoff might be a more complicated experience integrating additional extensions into your installation in the future.\n\n\n  Any customization of your storefront will work optimally, and provide the easiest path for later upgrades, if you follow the best practice of consistently compartmentalizing code by type. For example, keep all HTML in {% glossarytooltip ae0f1f68-c466-4189-88fd-6cd8b23c804f %}PHTML{% endglossarytooltip %} files; keep all JavaScript in JavaScript files.\n\n\n### Related topics\n\nFrontend Developer Guide\n\nJavaScript Developer Guide\n",
      "url": "/guides/v2.0/architecture/storefront_customization.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements-tech-html": {
      "title": "Magento 2.0.x technology stack requirements",
      "content": "### Operating systems (Linux x86-64)\n\nLinux distributions such as RedHat Enterprise Linux (RHEL), CentOS, Ubuntu, Debian, and so on\n\n### Memory requirement\nUpgrading the Magento applications and extensions you obtain from Magento Marketplaces and other sources can require up to 2GB of RAM. If you are using a system with less than 2GB of RAM, we recommend you create a [swap file]({{ page.baseurl }}comp-mgr/trouble/cman/out-of-memory.html); otherwise, your upgrade might fail.\n\n### Composer (latest stable version)\n{% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} is required for developers who wish to contribute to the Magento 2 codebase or anyone who wishes to develop Magento extensions\n\n### Web servers\n*\tApache 2.2 or 2.4\n\n\tIn addition, the apache `mod_rewrite` module must be enabled. `mod_rewrite` enables the server to perform URL rewriting. For more information, see our Apache documentation.\n*\t{% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %} 1.8 (or latest mainline version)\n\n### Database\n\nMySQL 5.6\n\nMariaDB and Percona are compatible with Magento because we support MySQL 5.6 APIs.\n\n### PHP\n\n{% include install/php_2.0.md %}\n\nPHP documentation: CentOS, Ubuntu\n\n#### Required PHP extensions:\n\n*\tbc-math ({{site.data.var.ee}} only)\n*\tcurl\n*\tgd, ImageMagick 6.3.7 (or later) or both\n*\tintl\n*\tmbstring\n*\tmcrypt\n*\thash\n*\topenssl\n*\tPDO/MySQL\n*\tSimpleXML\n*\tsoap\n*\txml\n*\txsl\n*\tzip\n*\t{% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} 7 only:\n\n\t*\t[json](http://php.net/manual/en/book.json.php){:target=\"_blank\"}\n\t*\t[iconv](http://php.net/manual/en/book.iconv.php){:target=\"_blank\"}\n\n#### PHP OPcache\nWe strongly recommend you verify the  PHP OPcache is enabled for performance reasons. The OPcache is enabled in many PHP distributions. To verify if it is installed, see our PHP documentation for CentOS or Ubuntu.\n\nIf you must install it separately, see the PHP OPcache documentation.\n\n#### PHP settings\nWe recommend particular PHP configuration settings, such as `memory_limit`, that can avoid common problems when using Magento.\n\nFor more information, see our [Required PHP settings]({{ page.baseurl }}install-gde/prereq/php-settings.html).\n\n### SSL\n*\tA valid {% glossarytooltip 363d6806-6a7d-4cb6-bc47-efc62bc26a1c %}security certificate{% endglossarytooltip %} is required for HTTPS.\n*\tSelf-signed SSL certificates are not supported.\n*\tTransport Layer Security (TLS) requirement\n\n\tPayPal and `repo.magento.com` both require TLS 1.1 or later\n\n\t*\t[More information about PayPal]({{page.baseurl}}install-gde/system-requirements_tls1-2.html)\n\n\t*\t[More information about `repo.magento.com`]({{ page.baseurl }}release-notes/tech_bull_tls-repo.html)\n\n### Mail server\nMail Transfer Agent (MTA) or an SMTP server\n\n### Magento can utilize the following technologies:\n*\tRedis version 3.0 for page caching and session storage (the latter supported by Magento version 2.0.6 and later only)\n*\tVarnish version 3.0.5 or latest stable 4.x version for page caching\n*\tmemcached latest stable version for session storage with either `memcache` or `memcached` PHP extensions (latest stable version)\n\n*\t{{site.data.var.ee}} only\n\n\t*   Apache Solr 4.x\n\n    \tSolr search can be used as a search provider. Available for {{site.data.var.ee}} only.\n\n\t*\tRabbitMQ 3.5\n\n\t\tRabbitMQ can be used to publish messages to queue and to define the consumers that receive the messages asynchronously. Available for Magento EE only.\n\n\t*\tThree master databases\n\n\t\tThese master databases provide scalability advantages for different functional areas of the Magento application: checkout, orders, and product data. Available for Magento EE only.\n\n### Optional but recommended:\n\n*\tphp_xdebug2.2.0 or later (development environments only; can have an adverse effect on performance)\n\n\n\tThere is a known issue with xdebug that can affect Magento installations or access to the storefront or Magento Admin after installation.\n\tFor details, see Known issue with xdebug.\n\n\n*\tPHPUnit (as a command-line tool) 4.1 or later\n\n### Documentation\n\nInstall Magento prerequisites\n",
      "url": "/guides/v2.0/install-gde/system-requirements-tech.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements-tls-parent-html": {
      "title": "Transport Layer Security (TLS) requirements",
      "content": "",
      "url": "/guides/v2.0/install-gde/system-requirements-tls-parent.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements2-html": {
      "title": "Magento 2.0.x system requirements",
      "content": "Our system requirements include required software to run the Magento application, supported web browsers, and also recent requirements to securely connect with our software repository and with PayPal.\n\nSee the following for more detail:\n\n*\t[Magento technology stack requirements]({{ page.baseurl }}install-gde/system-requirements-2.0-tech.html)\n*\t[Supported browsers]({{ page.baseurl }}install-gde/system-requirements_browsers.html)\n*\t[TLS requirement for repo.magento.com]({{ page.baseurl }}install-gde/system-requirements_repo-tls1-2.html)\n*\t[TLS 1.2 requirement for PayPal]({{ page.baseurl }}install-gde/system-requirements_tls1-2.html)\n",
      "url": "/guides/v2.0/install-gde/system-requirements2.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements-browsers-html": {
      "title": "Supported browsers",
      "content": "## Supported browsers\n{% include browsers/supported-browsers.md %}\n",
      "url": "/guides/v2.0/install-gde/system-requirements_browsers.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements-repo-tls1-2-html": {
      "title": "TLS requirement for repo.magento.com",
      "content": "{% include install/tls-repo.md %}\n\n### Solution\nSee the [Transport Layer Security (TLS) 1.1+ requirement for repo.magento.com](https://devdocs.magento.com/guides/v2.1/release-notes/tech_bull_tls-repo.html).\n",
      "url": "/guides/v2.0/install-gde/system-requirements_repo-tls1-2.html"
    }
    ,
  
    "guides-v2-0-install-gde-system-requirements-tls1-2-html": {
      "title": "TLS 1.2 requirement for PayPal",
      "content": "{% include install/paypal-tls1-2.md %}\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/install-gde/system-requirements_tls1-2.html"
    }
    ,
  
    "guides-v2-0-pattern-library-containers-tabs-tabs-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Tabs\nTabs should be used when the user needs to alternate between views within the same context.\n\nFor solutions not described in this article or for further information, please contact the Magento UX Design Team.\n\nWhen to Use\n*\tWhen a page has secondary content \n\n*\tWhen the number of sections is able to fit the width of the container without wrapping or being cut off at the edges.\n\n*\tWhen the content for each tab has a similar structure.\n\nWhen Not to Use\n*\tDo not use tabs if the user needs to simultaneously see content from multiple tabs.\n\n*\tDo not use tabs if the content of the tab would function more effectively as a separate container or on a separate page.\n\n*\tBe cognizant of the type of paradigm that best fits the content. Refer to the expandable containers pattern well and determine the ideal practice.\n\nInteractions and Behavior\n\nWhen the user click on a tab, the content area associated with that tab will be shown. There are 3 states that a tab can be:\n\n**Active State**\n\n*\tActive tab should be \"highlighted\" to indicate that it’s currently active.\n\n*\tShould not be clickable while active.\n\n**Inactive State**\n\n*\tShould be clickable.\n\n*\tShould have a hover state.\n\n**Disabled State**\n\n*\tWhen a tab is not clickable for any reason, it should be shown in its disabled state.\n\nStyle\n\n\n\nExample\n\n\n\nAccessibility\n\nUser should be able to navigate through each tab with their keyboard.\n\nFollow the rule \"Make all functionality available from a keyboard.\"\n\nhttp://www.w3.org/TR/WCAG20/#keyboard-operation\n\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Tabs PSD source\n\n\n\n",
      "url": "/guides/v2.0/pattern-library/containers/tabs/tabs.html"
    }
    ,
  
    "guides-v2-0-architecture-tech-stack-html": {
      "title": "Technology stack",
      "content": "## Overview\n\nThis page summarizes the technologies we use. For more detailed information, see the System Requirements:\n\n*\t[Version 2.0.x]({{ site.gdeurl }}install-gde/system-requirements2.html)\n*\t[Version 2.1.x]({{site.gdeurl21}}install-gde/system-requirements-tech.html)\n\nMagento's highly modular structure includes the following open-source technologies.\n\n### Web servers\n\n*\tApache\n*\t{% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %}\n\n### PHP\n\n*\t{% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} (dependency management package for PHP)\n\n### Database\n\n*\tMySQL\n*\tMySQL Percona\n\n### HTTP accelerator\n\n*\tVarnish\n\n### Cache Storage\n\n*\tRedis\n*\tMemcache\n\n### Search\n\n* Solr (Magento Enterprise Edition only)\n* Elasticsearch (Magento Enterprise Edition version 2.1.x only)\n\n### Additional technologies\n\n*\tHTML5\n*\tCSS3 (LESS {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} pre-processor)\n*\t{% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} (primary {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} library)\n*\tRequireJS (library that helps load JavaScript resources on demand)\n*\tKnockout.js (simplifies JavaScript UIs with the Model-View-View Model pattern)\n*\tThird-party libraries (Zend Framework 1, Zend Framework 2, Symfony)\n*\tCoding standards PSR-0 (autoloading standard), PSR-1 (basic coding standards), and PSR-2 (coding style guide), PSR-3, PSR-4\n\n### Optional stack components\n\n*\tVarnish (caching)\n*\tRedis (used for page caching)\n*\tSolr (search engine)\n*\tElasticsearch (search engine)\n\nMagento is *compatible with but not supported* for:\n\n*\tHHVM 3.9 {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} interpreter\n\n### Automated testing\n\nMagento also provides automated testing suites that include unit, integration, functional and performance test scripts, as well as JavaScript tests and tools for static code analysis. Components include PHPUnit for the unit test framework and Selenium for the functional test framework.\n\nThis framework is located in the `dev/tests` directory. The functional testing framework `mtf` can be found in a [separate repository](https://github.com/magento/mtf){:target=\"_blank\"}.\nFor more information, see the [Functional Testing Framework]({{page.baseurl}}mtf/mtf_introduction.html) guide.\n\n## Related topics\nArchitectural basics\n",
      "url": "/guides/v2.0/architecture/tech-stack.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-201-upgrade-html": {
      "title": "Technical Bulletin",
      "content": "This bulletin informs you of the following issues:\n\n*\t[Issue: Upgrade fails because of missing `.gitignore` files](#gitignore)\n*\t[Error during upgrade: \"We're sorry, we can't take that action right now\"](#sorry)\n\n### Issue: Upgrade failures {#gitignore}\nMagento Open Source (formerly Community Edition) and Commerce (formerly Enterprise Edition) upgrades failed in any of the following circumstances:\n\n*\tIf you got the Magento software compressed archive (`.tar.gz`, `.zip`, or `.bz2`).\n*\tIf your server runs {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} 7 and you installed the Magento software using *either* a compressed archive or the Composer metapackage.\n\nWe addressed the following issues:\n\n*\tMissing `.gitignore` files that resulted in exceptions\n*\tAn error related to the updater application and PHP 7:\n\n\t\tPHP Warning: require_once(/public_html/magento2/update/vendor/autoload.php): failed to open stream: No such file or directory in /public_html/magento2/update/app/bootstrap.php\n\nThe following table summarizes what you need to do.\n\n\n\t\n \n\tUpgrade path\n\tWhat to do\n\n\n\tMagento Open Source or Commerce 2.0.2 installed or you haven't installed Magento yet.\n\tNo action is required. Install version 2.0.2 if you haven't already.\n\t\tYou can ignore this bulletin.\n\n\n\tMagento Open Source or Commerce 2.0.0 to 2.0.1\n\tApply the fix\n\n\n\tMagento Open Source or Commerce 2.0.0 to 2.0.2\n\tApply the fix\n\n\n\tMagento Open Source or Commerce 2.0.1 to 2.0.2\n\tApply the fix\n\n\n\tAny of the preceding and your Magento server runs PHP 7\n\tApply the patch and the fix\n\t\tNote: You must apply the PHP 7 patch whether you installed the Magento software using a compressed archive or the Composer metapackage.\n\n\n\n\n#### Detail\nOur compressed archives for Open Source and Commerce were missing `.gitignore` files and, as a result, exceptions prevented the upgrade from completing successfully. We updated the `magento/magento-composer-installer` component so it reports missing files instead of throwing an {% glossarytooltip 53da11f1-d0b8-4a7e-b078-1e099462b409 %}exception{% endglossarytooltip %} with no details about what was wrong.\n\nAt the same time, we fixed a separate issue that prevented upgrading if you use PHP 7. (The fix for this issue is a patch that you must apply separately from the `.gitignore` issue fix.)\n\nUse the following resolutions:\n\n*\t[PHP 7 patch](#resolution4)\n*\t[Resolution 1 (if you're using version 2.0.0 or 2.0.1)](#resolution1)\n*\t[Resolution 2 (if your upgrade to 2.0.1 or 2.0.2 has failed)](#resolution2)\n*\t[Resolution 3 (does not require command line access)](#resolution3)\n\n### PHP 7 patch {#resolution4}\nIf your Magento server runs PHP 7, you must apply a patch first.\n\nTo apply the patch:\n\n1.\tDownload one of the following patch archives. Patches are available in the following formats: `.zip`, `.tar.bz2`, `.tar.gz`\n\n\t\n\t\t\n\t\t\n\t\n\t \n\t\tMagento edition\n\t\tPatch location\n\t\n\t \n\t{{site.data.var.ce}}\n\twww.magento.com/download\n\t\tFollow the instructions on your screen to download MDVA-84.*\n\t\n\t \n\t\tMagento EE merchant portal\n\t\tUse the following steps:\n\t\tGo to www.magento.com\n\t\tIn the top horizontal navigation bar, click My Account.\n\t\tLog in with your Magento user name and password.\n\t\tIn the left navigation bar, click Downloads.\n\t\tClick Magento Enterprise Edition 2.X > Magento Enterprise Edition 2.x Release > Support Patches\n\t\tFollow the instructions on your screen to download MDVA-84.*\n\n\t\n\tTransfer the patch to your development system.\n\t\n\t\n\t\tMagento Commerce partner portal\n\t\tUse the following steps:\n\t\tLog in to partners.magento.com\n\t\tClick Magento Commerce > Magento Commerce 2.X > Magento Commerce 2.x Release > Support Patches.\n\t\tIn the left navigation bar, click Downloads.\n\t\tFollow the instructions on your screen to download MDVA-84.*\n\tTransfer the patch to your development system.\n\t\t\n\t\n\t\n\n\t\n  \t\tUse the same patch whether or not you installed optional sample data.\n\t\n\n2.\tExtract the patch in your Magento installation directory.\n\n\tLog in as or change to the Magento file system owner. Use one of the following commands to extract the archive.\n\n\t\n\t\n\t \n\t\tFile format\n\t\tCommand to extract\n\t\n\t \n\t\t.tar.gz\n\t\ttar zxf &lt;filename>\n\t\t\n\t\t \n\t\t\t.zip\n\t\t\tunzip &lt;filename>\n\t\t\n\t\t \n\t\t\t.tar.bz2\n\t\t\ttar jxf &lt;filename>\n\t\n\t\n\t\n3.\tWe recommend you upgrade to version 2.0.2.\n\n#### Resolution 1 (using version 2.0.0 or 2.0.1) {#resolution1}\nTo resolve the missing `.gitignore` files issue using this method, all of the following must be true:\n\n*\tYou must have command-line access to your Magento server\n*\tYour server must be running Magento 2 Open Source and Commerce version 2.0.0\n\n\tTo confirm the version, you can either look in the lower right corner of the Magento Admin or you can use the `php /bin/magento --version` command.\n\nTo resolve the issue:\n\n1.\tLog in to your Magento server as the Magento file system owner.\n2.\tChange to your Magento installation directory.\n3.\tRun the following command:\n\n\t\tcomposer update magento/magento-composer-installer\n\n4.\tIf prompted, enter your authentication keys.\n4.\tMake sure `magento/magento-composer-installer` is version 0.1.6\n5.\tRun the following commands in the order shown:\n\n\t\tcomposer require magento/product-community-edition 2.0.2 --no-update\n\t\tcomposer update\n\n\t\n  \t\tYou can upgrade to either magento/product-community-edition 2.0.2 or magento/product-community-edition 2.0.1; we recommend 2.0.2.\n\t\n6.\tAfter the commands complete, enter the following command to update the {% glossarytooltip 66b924b4-8097-4aea-93d9-05a81e6cc00c %}database schema{% endglossarytooltip %} and data:\n\n\t\tphp bin/magento setup:upgrade\n6.\tVerify your server is running version 2.0.1 or 2.0.2 in any of the ways discussed earlier in this resolution.\n\n\n\n#### Resolution 2 (upgrade to 2.0.1 or 2.0.2 has failed) {#resolution2}\nTo resolve the missing `.gitignore` files issue using this method, all of the following must be true:\n\n*\tYou must have command-line access to your Magento server\n*\tYou must have attempted to upgrade to either 2.0.1 or 2.0.2 and failed\n\nYou must run `composer update` twice to update components and then delete two files: one that recorded the failed upgrade and another that tells Magento your store is in maintenance mode.\n\nTo resolve the issue:\n\n1.\tLog in to your Magento server as the Magento file system owner.\n2.\tChange to your Magento installation directory.\n4.\tIf prompted, enter your authentication keys.\n5.\tEnter the following command:\n\n\t\tcomposer update\n4.\tMake sure `magento/magento-composer-installer` is version 0.1.6\n\n\tThe following exception might display; it's expected:\n\n\t\t[ErrorException]\n\t\tSource /var/www/html/magento2/vendor/magento/magento2-base/dev/tests/integration/.gitignore does not exist\n6.\tAfter the command completes, enter the same command again:\n\n\t\tcomposer update\n7.\tWait while the command completes.\n6.\tAfter the command completes, enter the following command to update the database schema and data:\n\n\t\tphp bin/magento setup:upgrade\n8.\tDelete the following files from `/var` directory:\n\n\t*\t`.update_error.flag`\n\t*\t`.maintenance.flag`\n8.\tVerify your Magento version is 2.0.1 or 2.0.2 in any of the following ways:\n\n\t*\tUsing the `php /bin/magento --version` command\n\t*\tLog in to the Magento Admin. The version displays in the lower right corner of the page.\n7.\tWe recommend you upgrade to version 2.0.2.\n\n#### Resolution 3 (does not require command line access) {#resolution3}\nTo resolve the missing `.gitignore` files issue if you have no command-line access to your Magento server, install version 2.0.2 on a local machine and transfer the Magento codebase to your Magento server using FTP or a utility provided by your shared hosting service.\n\n### Error during upgrade: \"We're sorry, we can't take that action right now\" {#sorry}\nIf this message displays during your upgrade, it can mean any of the following:\n\n*\tYou didn't authenticate with the System Upgrade utility\n*\tThe updater application isn't initialized\n*\tYou cloned the Magento GitHub repository\n",
      "url": "/guides/v2.0/release-notes/tech_bull_201-upgrade.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-207-upgrade-html": {
      "title": "Technical Bulletin",
      "content": "This bulletin informs you of a known issue updating from Magento Commerce (formerly Enterprise Edition) and Open Source (formerly Community Edition)  environments that run the following:   \n\n* {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} 5.5.x\n\n\t**and**\n\n* Updater application version 10.0.1. This version is shipped by default with Magento 2.0.7. \n\nPatch `MDVA-449` supplies the fix for this potential upgrade issue. \n\n\n\nIssue: Upgrade failure from Magento installations running PHP 5.5.x and Updater application 10.0.1\n\nMagento Open Source  and Commerce upgrades fail if your server runs PHP 5.5.x and Setup application (also referred to as the Updater application) version 10.0.1 and you  try to upgrade to a later version of Magento.\n\n\nMagento 2.0.7 by default ships with Setup application version 10.0.1.  If you have not changed the default Setup application version that shipped with 2.0.7 and are running PHP 5.5.x, you must follow this bulletin. Failure to install patch `MDVA-449` will complicate attempts to upgrade from this version of Magento to any future versions, including 2.1. Installations using PHP 5.6.x and 7.0.x do not need this patch.\n\n\nHere is the issue you might encounter when running `update/cron.php`:\n \n\tPHP Parse error: syntax error, unexpected '.', expecting ')' in /home/user/public_html/update/app/code/Magento/Update/UpdateLoggerFactory.php on line 31 \n\nThe following table summarizes what you need to do.\n\n\n\t\n \n\tUpgrade path\n\tWhat to do\n\n\n\n\tPHP 5.5.x AND Magento 2.0.7\n Download and install patch MDVA-449 as detailed in this bulletin. Note: You must apply patch MDVA-449  whether you installed the Magento software using a compressed archive or the Composer metapackage.\n\n\n\n\tPHP 5.5.x AND Updater 10.0.1\n\tDownload and install patch MDVA-449 as detailed in this bulletin. Note: You must apply patch MDVA-449  whether you installed the Magento software using a compressed archive or the Composer metapackage.\n\n\n\n\tPHP 5.6.x with any Magento and Setup application version\n\tIgnore this bulletin\n\n\n\n\tPHP 7.0.x with any Magento and Setup application version\n\tIgnore this bulletin\n\n\n\n\n\nHow to determine which version of Updater application you are running \n1. Log in to your Magento server as, or switch to, the {% glossarytooltip 5e7de323-626b-4d1b-a7e5-c8d13a92c5d3 %}Magento file system owner{% endglossarytooltip %}.\n\n2. Open the following file in a text editor:\n\n\t/update/composer.json\n\n3. Look for the value of `\"version\"`. If the value of `\"version\"` is `\"10.0.1\"`, and you're using PHP 5.5.x, you must make the changes discussed in this bulletin. For example,\n\n\t\"version\": \"10.0.1\"\n\n4. Exit the text editor without making changes.\n\nDetails\nThe Setup application  that is packaged with Magento version 2.0.7 (version 10.0.1) has a line of code that is not compatible with PHP version 5.5.x. To ensure the success of future upgrades, download and install patch `MDVA-449`. \n\nDownload and install patch MDVA-449 \nIf your Magento server runs PHP 5.5.x and Setup application  10.0.1,  apply patch `MDVA-449`.\n\nTo apply this patch:\n\n1.\tDownload one of the following patch archives. Patches are available in the following formats: `.zip` and `.tar.gz`\n\n\t\n\t\t\n\t\n\t \n\t\tMagento edition\n\t\tPatch location\n\t\n\t \n\t{{site.data.var.ce}}\n\twww.magento.com/download\n\t\tFollow the instructions on your screen to download patch MDVA-449.\n\t\n\t \n\t\tMagento EE merchant portal\n\t\tUse the following steps:\n\t\tGo to www.magento.com\n\t\tIn the top horizontal navigation bar, click My Account.\n\t\tLog in with your Magento user name and password.\n\t\tIn the left navigation bar, click Downloads.\n\t\tClick Magento Commerce 2.X > Magento Commerce 2.x Release > Support Patches\n\t\tFollow the instructions on your screen to download patch MDVA-449.\n\n\t\n\tTransfer the patch to your development system.\n\t\n\t\n\t\tMagento Commerce partner portal\n\t\tUse the following steps:\n\t\tLog in to partners.magento.com\n\t\tClick Magento Commerce > Magento Commerce 2.X > Magento Commerce 2.x Release > Support Patches.\n\t\tIn the left navigation bar, click Downloads.\n\t\tFollow the instructions on your screen to download patch MDVA-449.\n\tTransfer the patch to your development system.\n\t\t\n\t\n\t\n\n\t\n  \t\tUse patch MDVA-449 whether or not you installed optional sample data.\n\t\n\n2.\tExtract the patch in your Magento installation directory.\n\n\tLog in as or change to the Magento file system owner. Use one of the following commands to extract the archive.\n\n\t\n\t\n\t \n\t\tFile format\n\t\tCommand to extract\n\t\n\t \n\t\t.tar.gz\n\t\ttar zxf &lt;filename>\n\t\t\n\t\t \n\t\t\t.zip\n\t\t\tunzip &lt;filename>\n\t\t\n\t\t\n\t\n\t\n\n\tAfter extraction, Magento creates the `magento2-updater-10.0.2` directory within the installation directory. \n\n3. Copy the contents of the `magento2-updater-10.0.2` directory to the  `update` directory by executing this command:\n\n\t`cp -R magento2-updater-10.0.2/*  update/`\n\n\t\n\t\tIf you're prompted to overwrite files repeatedly, cancel the operation and try the following command: yes | cp -rf magento2-updater-10.0.2/* update/. Also see this article on stackexchange.\n\t\n\n4. After copying all  patch-related files to their appropriate locations,  remove any unwanted files and directories by executing these commands:\n\n\t`rm -rf magento2-updater-10.0.2/`\n\n\t`rm -f MDVA-449.*`\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/release-notes/tech_bull_207-upgrade.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-20x-mastercard-html": {
      "title": "MasterCard BIN Range Upgrade Magento 2.0.x",
      "content": "*Technical bulletin published on May 19, 2017.*\n\nThese instructions apply to anyone running Magento Open Source (formerly Community Edition) or Magento Commerce (formerly Enterprise Edition) version 2.0.x. \n\n### Issue\n\nMasterCard recently added a new series of Bank Identification Numbers (BIN). As of June 30, 2017, MasterCard may fine merchants who do not support cards that use this new range of BIN numbers, and transactions on your store for customers that use cards with these new BINs may fail. \n\n\n### How does this issue affect users of Magento 2.0.x?\nYou must upgrade to Magento 2.0.14 before June 30 to support transactions made with cards that implement these new BIN numbers. \n\n\nMagento 2.0.14 is scheduled for the end of May. This patch will include support for this MasterCard BIN update plus other critical security fixes. \n\n\n### More information\n[MasterCard Bank Identification Numbers Range Update](https://devdocs.magento.com/guides/v2.1/release-notes/tech_bull_21x_MasterCard.html){:target=\"_blank\"} provides an overview of platform-wide MasterCard-related issues for Magento. \n\nMasterCard discusses the issue [here](https://www.mastercard.us/en-us/issuers/get-support/2-series-bin-expansion.html){:target=\"_blank\"}. \n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/release-notes/tech_bull_20x_MasterCard.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-21-upgrade-html": {
      "title": "Technical Bulletin",
      "content": "These instructions apply to anyone upgrading to Magento Open Source (formerly Community Edition) or Magento Commerce (formerly Enterprise Edition)  version 2.1 (including a Release Candidate). \n\nSee one of the following sections for more information:\n\n*\t[Upgrade to Magento Open Source or Commerce version 2.1 *without* sample data](#tb-upgr-nosamp)\n*\t[Upgrade to Magento Open Source or Commerce version 2.1 with sample data](#tb-upgr-samp)\n*\t[Enterprise Edition only: Web Setup Wizard upgrade to Magento Commerce version 2.1 with sample data](#tb-upgr-samp-wiz)\n\n### Upgrade to Magento Open Source or Commerce version 2.1 *without* sample data {#tb-upgr-nosamp}\nUpgrades to version 2.1 without sample data can fail because of an issue with the Magento `composer-installer` component. It doesn't correctly detect code changes and therefore doesn't update the {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} and compiled code directories properly. As a result, fatal errors display during the upgrade.\n\nTo address the issue, you must apply a patch.\n\n#### Get the patch\nUse the following instructions to get the patch named `MDVA-532.*`, then transfer it to your Magento server.\n\n{% collapsible To get the patch: %}\n\n{% include install/patch/get-patch.md %}\n\n{% endcollapsible %}\n\n#### Apply the patch\nAs the [Magento file system owner]({{page.baseurl}}install-gde/prereq/file-sys-perms-over.html), extract the patch in your Magento installation directory.\n\n{% collapsible To apply the patch: %}\n\n{% include install/patch/apply-patch.md %}\n\nFor example, to change to the `magento_user` and extract `MDVA-532.zip` into `/var/www/magento2`, enter:\n\n\tsu magento_user && cd /var/www/magento2 && unzip -o MDVA-532.zip\n\n{% endcollapsible %}\n\n#### Complete your upgrade\nAfter applying the patch, complete your upgrade as follows:\n\n*\t[Command-line upgrade]({{page.baseurl}}comp-mgr/cli/cli-upgrade.html)\n*\t[Start System Upgrade]({{page.baseurl}}comp-mgr/upgrader/upgrade-start.html)\n\n### Command-line upgrade to Magento Open Source or Commerce version 2.1 with sample data {#tb-upgr-samp}\n\n{%include install/sampledata/sample-data-rc1-cli.md %}\n\n\n### Commerce only: Web Setup Wizard upgrade to Magento Commerce version 2.1 with sample data {#tb-upgr-samp-wiz}\nUpgrades to Magento Commerce 2.1 with sample data can fail because of the following issues:\n\n*\tAn issue with the Magento `composer-installer` component. It doesn't correctly detect code changes and therefore doesn't update the cache and compiled code directories properly. As a result, fatal errors display during the upgrade.\n\n\tWe have a patch that resolves this issue.\n*\tMagento's `composer.lock` file specifies a non-existent component type; this issue prevents the upgrade with sample data from completing successfully.\n\n\tYou can edit `composer.lock` to fix this issue.\n\n#### Get the patch\nUse the following instructions to get the patch named `MDVA-532.*`, then transfer it to your Magento server.\n\n{% collapsible To get the patch: %}\n\n{% include install/patch/get-patch-ee.md %}\n\n{% endcollapsible %}\n\n#### Apply the patch\nAs the [Magento file system owner]({{page.baseurl}}install-gde/prereq/file-sys-perms-over.html), extract the patch in your Magento installation directory.\n\n{% collapsible To apply the patch: %}\n\n{% include install/patch/apply-patch.md %}\n\nFor example, to change to the `magento_user` and extract `MDVA-532.zip` into `/var/www/magento2`, enter:\n\n\tsu magento_user && cd /var/www/magento2 && unzip MDVA-532.zip\n\n{% endcollapsible %}\n\n#### Fix `composer.lock`\n\n{% collapsible To fix composer.lock: %}\n\n1.\tAs the Magento file system owner, open `/composer.lock` in a text editor.\n2.\tChange the following entry.\n\n\tfrom:\n\n\t\t\"type\": \"magento2-module-customer-balance\",\n\n\tto:\n\n\t\t\"type\": \"magento2-module\",\n3.\tSave your changes to `composer.lock` and exit the text editor.\n\n{% endcollapsible %}\n\n#### Manually clear directories\nManually clear the `var/cache`, `var/page_cache`, and `var/generation` directories.\n\nA sample command follows:\n\n\trm -rf var/cache/* var/page_cache/* var/generation/*\n\n#### Start the upgrade\nStart your upgrade as discussed in [Start System Upgrade]({{page.baseurl}}comp-mgr/upgrader/upgrade-start.html).\n",
      "url": "/guides/v2.0/release-notes/tech_bull_21-upgrade.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-parent-html": {
      "title": "Magento 2.0 technical bulletins",
      "content": "The following technical bulletins are available for the Magento 2.0 release:\n\n*\t[MasterCard BIN Upgrade for 2.0.x (May 19, 2017)]({{ page.baseurl }}release-notes/tech_bull_20x_MasterCard.html)\n\n*\t[Magento upgrade issues (Jan. 28, 2016)]({{ page.baseurl }}release-notes/tech_bull_201-upgrade.html)\n*\t[Required patch for PHP 5.5.x and Setup Application environments (June 6, 2016)]({{ page.baseurl }}release-notes/tech_bull_207-upgrade.html)\n*\t[Upgrade to Magento version 2.1 (June 22, 2016)]({{ page.baseurl }}release-notes/tech_bull_21-upgrade.html)\n",
      "url": "/guides/v2.0/release-notes/tech_bull_parent.html"
    }
    ,
  
    "guides-v2-0-release-notes-tech-bull-tls-repo-html": {
      "title": "Technical Bulletin",
      "content": "{% include install/tls-repo.md %}\r\n\r\n### Solution\r\nThe solution to this issue depends on how your operating system packages TLS. See one of the following sections for more information:\r\n\r\n*\t[Ubuntu](#solution-ubuntu)\r\n*\t[CentOS](#solution-centos)\r\n*\t[Mac OS](#solution-macos)\r\n\r\n#### Ubuntu {#solution-ubuntu}\r\nMake sure you're using [`libcurl`](https://curl.haxx.se/libcurl/c/CURLOPT_SSLVERSION.html){:target=\"_blank\"}. `libcurl` versions 7.34 or later; these versions use TLS 1.2 by default.\r\n\r\nTo determine your `libcurl` version, enter the following command:\r\n\r\n\tcurl --version\r\n\r\n#### CentOS {#solution-centos}\r\nThe source of the issue is that the [`libcurl`](https://curl.haxx.se/libcurl/c/CURLOPT_SSLVERSION.html){:target=\"_blank\"} {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} packaged with CentOS 6.6 and earlier use TLS 1.1 or earlier by default. \r\n\r\nTo determine the version of CentOS your server runs, enter the following command:\r\n\r\n\tcat /etc/*release*\r\n\r\nIf you're already running CentOS 6.8 or later, no action is necessary. According to the [CentOS 6.8 changelog](https://wiki.centos.org/Manuals/ReleaseNotes/CentOS6.8){:target=\"_blank\"}, \"various applications now support TLS 1.2, i.e. OpenLDAP, yum, stunnel, vsftpd, git, postfix and others. Also TLS 1.2 has been enabled by default in various packages\".\r\n\r\n(CentOS 7 has a newer version of `libcurl` that also defaults to TLS 1.2.)\r\n\r\n#### Mac OS {#solution-macos}\r\nRecent updates to the [OS X liip package](http://php-osx.liip.ch){:target=\"_blank\"} should resolve the issue.\r\n",
      "url": "/guides/v2.0/release-notes/tech_bull_tls-repo.html"
    }
    ,
  
    "guides-v2-0-coding-standards-technical-guidelines-html": {
      "title": "Technical guidelines",
      "content": "## About this document\n\n### Overview\n\nThis document lists the fundamental coding and application design principles that guide Magento 2 developer team members.\n\nMagento core developers use this document as a reference during code reviews; some rules have corresponding code checks in the Magento static tests.\n\nThese guidelines came from many years of hard work, experience, and discussions. We strongly believe that new technical initiatives should follow these recommendations, and the existing code should be improved to meet them.\n\n### Text conventions\n\nUse [RFC2119] to interpret keywords like:\n\n* MUST and MUST NOT\n\n* REQUIRED\n\n* SHALL and SHALL NOT\n\n* SHOULD and SHOULD NOT\n\n* RECOMMENDED\n\n* MAY\n\n* OPTIONAL\n\n## 1. Basic programming principles\n\n1.1. Function arguments SHOULD NOT be modified.\n\n## 2. Class design\n\n2.1. Object decomposition MUST follow the [SOLID principles].\n\n2.2. Object MUST be ready for use after instantiation. No additional public initialization methods are allowed.\n\n{% collapsible Examples: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\nclass Config\n{\n    private $data;\n\n    public function init() // or load()\n    {\n        $this->data = $this->fileReader->load('cache.xml');\n    }\n\n    public function getValue($key)\n    {\n        return $this->data[$key];\n    }\n}\n{% endhighlight %}\n        \n        \n{% highlight php %}\nclass Config\n{\n    private $data;\n\n    public function getValue($key)\n    {\n        if ($this->data === null) {\n            $this->data = $this->fileReader->load('cache.xml');\n        }\n\n        return $this->data[$key];\n    }\n}\n{% endhighlight %}\n        \n    \n\n{% endcollapsible %}\n---\n\n{:start=\"2.3\"}\n2.3. Class constructor can have only dependency assignment operations and/or argument validation operations. No other operations are allowed.\n\n2.3.1. Constructor SHOULD throw an exception when validation of an argument has failed.\n\n{% collapsible Example: %}\n``` php?start_inline=1\nclass Composite\n{\n    /**\n     * @var RendererInterface[]\n     */\n    private $renderers;\n\n    /**\n     * @param RendererInterface[] $renderers\n     * @throws InvalidArgumentException\n     */\n    public function __construct(array $renderers)\n    {\n        foreach ($renderers as $renderer) {\n            if (!$renderer instanceof RendererInterface) {\n                throw new InvalidArgumentException(\n                    sprintf('Instance of the phrase renderer is expected, got %s instead.', get_class($renderer))\n                );\n            }\n        }\n        $this->renderers = $renderers;\n    }\n}\n```\n{% endcollapsible %}\n---\n\n{:start=\"3.2\"}\n2.3.2. Events MUST NOT be triggered in constructors.\n\n{% collapsible Examples: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\n\nclass Config\n{\n    private $data;\n\n    public function __construct($fileReader, $eventManager)\n    {\n        $this->data = $fileReader->read('cache.xml');\n        $eventManager->dispatch('config_read_after');\n    }\n}\n{% endhighlight %}\n        \n        \n{% highlight php %}\nclass Config\n{\n    private $fileReader;\n\n    private $eventManager;\n\n    public function __construct($fileReader, $eventManager)\n    {\n        $this->eventManager = $eventManager;\n        $this->fileReader = $fileReader;\n    }\n\n    public function getData($key)\n    {\n        if ($this->data === null) {\n            $this->data = $this->fileReader->read('cache.xml');\n            $this->eventManager->dispatch('config_read_after');\n        }\n        return $this->data[$key];\n    }\n}\n{% endhighlight %}\n        \n    \n\n{% endcollapsible %}\n\n---\n\n{:start=\"2.4\"}\n2.4. All dependencies MUST be requested by the most generic type that is required by the client object.\n\n{% collapsible Examples: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\ninterface SessionAdapterInterface\n{}\n\nRedisSessionAdapter implements SessionAdapterInterface\n{}\n\nclass SessionManager\n{\n    public function __construct(RedisSessionAdapter $sessionAdapter)\n    {}\n}\n\n// Breaks polymorphism principle, restricts what types can be passed at the runtime.\n{% endhighlight %}\n        \n        \n{% highlight php %}\ninterface SessionAdapterInterface\n{}\n\nRedisSessionAdapter implements SessionAdapterInterface\n{}\n\nclass SessionManager\n{\n    public function __construct(SessionAdapterInterface $sessionAdapter)\n    {}\n}\n{% endhighlight %}\n        \n    \n\n{% endcollapsible %}\n\n---\n\n2.5. Proxies and interceptors MUST NEVER be explicitly requested in constructors.\n\n2.6. Inheritance SHOULD NOT be used. Composition SHOULD be used for code reuse.\n{% collapsible Examples: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\nclass AbstractController extends Action\n{\n    // ...\n    protected function validate(\n        $request\n    ) {}\n\n    protected function generateHash(\n        $request\n    ) {}\n}\n\nclass Edit extends AbstractController\n{\n    public function execute()\n    {\n        $errors = $this->validate(\n            $request\n        );\n\n        // ...\n\n        $hash = $this->generateHash(\n            $request\n        );\n        // ...\n    }\n}\n\n// Smaller classes, one responsibility, more flexible, easy to understand, more testable.\n\n{% endhighlight %}\n        \n        \n{% highlight php %}\nclass Edit extends Action\n{\n    public function __constructor(\n        ValidatorInterface $validator,\n        HashGeneratorInterface $hashGenerator\n    ) {}\n\n    public function execute()\n    {\n        $errors = $this->validator->validate($request);\n        // ...\n        $hash = $this->hashGenerator->generateHash($request);\n    }\n}\n\n{% endhighlight %}\n        \n    \n\n{% endcollapsible %}\n\n---\n\n2.7. All non-public properties and methods SHOULD be private.\n\n2.8. Abstract classes MUST NOT be marked as public `@api`.\n\n2.9. Service classes (ones that provide behavior but not data, like `EventManager`) SHOULD NOT have a mutable state.\n\n2.10. Only data objects or entities (Product, Category, etc.) MAY have any observable state.\n\n2.11. \"Setters\" SHOULD NOT be used. They are only allowed in Data Transfer Objects.\n\n2.12. \"Getters\" SHOULD NOT change the state of an object.\n\n2.13. Static methods SHOULD NOT be used.\n\n2.14. [Temporal coupling] MUST be avoided.\n{% collapsible Example #1: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\n$url = new Url();\n$url->setBaseUrl($baseUrl);\necho $url->get('custom/path'); // prints full URL\n\n// Developer forgot or didn’t know that you need to call setBaseUrl\n$url = new Url();\necho $url->get('custom/path'); // Throws exception, which makes issue smaller. If it doesn't throw and exception, it could lead to a hidden bug more likely.\n\n// Method with out parameters that doesn’t return anything could be sign of temporal coupling.\n\n{% endhighlight %}\n        \n        \n{% highlight php %}\n$url = new Url($baseUrl);\necho $url->get('custom/path');\n\n// Or\n$url = new Url();\necho $url->get($baseUrl, 'custom/path');\n\n// Only one way to use API, no temporal coupling.\n\n{% endhighlight %}\n        \n    \n\n{% endcollapsible %}\n\n---\n\n{% collapsible Example #2: %}\n\n    \n        Not recommended\n        Recommended\n    \n    \n        \n{% highlight php %}\nclass Edit extends Action\n{\n    public function execute()\n    {\n        // ...\n        $product = $productResource->load($product, $productSku, 'sku');\n        $this->registry->register('product', $product);\n    }\n}\n\nclass View extends Template\n{\n    public function getProductName()\n    {\n        $product = $this->registry->get('product');\n        return $product->getName();\n    }\n}\n\n{% endhighlight %}\n        \n        \n{% highlight php %}\nclass Edit extends Action\n{\n    public function execute()\n    {\n        // ...\n        $product = $productRepository->get($productSku);\n    }\n}\n\nclass View extends Template\n{\n    public function getProductName()\n    {\n        // ...\n        $product = $productRepository->get($productSku);\n        return $product->getName();\n    }\n}\n// More flexible, no dependencies between classes, no temporal coupling.\n\n{% endhighlight %}\n\n{% endcollapsible %}\n\n---\n\n2.15. Method chaining in class design MUST be avoided.\n\n2.16. [Law of Demeter] SHOULD be obeyed.\n\n2.17. Patterns\n\n2.17.1. Proxies SHOULD be used for lazy-loading optional dependencies.\n\n2.17.2. Composites SHOULD be used when there is a need to work with a tree as a single object.\n\n {% collapsible Example: %}\n You need to read configuration from different sources (like database or filesystem) and want to make the reading process configurable: allow extensions to add more configuration sources. In this case, you can create a `ConfigReaderInterface` with a composite implementation - `ConfigReaderComposite`, and configure particular readers as children of a composite reader.\n {% endcollapsible %}\n---\n2.17.3. Strategy SHOULD be used when there are multiple algorithms for performing an operation.\n\n## 3. Dependency injection\n\n3.1. There SHOULD be no circular dependencies between objects.\n\n3.2. The `app/etc/di.xml` file MUST contain only framework-level {% glossarytooltip 2be50595-c5c7-4b9d-911c-3bf2cd3f7beb %}Dependency Injection{% endglossarytooltip %} (DI) settings.\n\n3.3. All modular DI settings (except for Presentation layer configuration) SHOULD be stored in `/etc/di.xml`.\n\n3.4. All modular Presentation layer DI settings SHOULD be stored in `/etc//di.xml`.\n\n## 4. Interception\n\n4.1. Around-plugins SHOULD only be used when behavior of an original method is supposed to be substituted in certain scenarios.\n\n4.2. Plugins SHOULD NOT be used within own {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %}.\n\n4.3. Plugins SHOULD NOT be added to data objects.\n\n4.4. Plugins MUST be stateless.\n\n## 5. Exceptions\n\n5.1. All exceptions that are surfaced to the end user MUST produce error messages in the following format:\n\n- Symptom\n\n- Details\n\n- Solution or workaround\n\n{:start=\"5.2\"}\n5.2. Exceptions MUST NOT be handled in the same function where they are thrown.\n\n5.3. If a function A calls function B, and function B might throw an exception, this {% glossarytooltip 53da11f1-d0b8-4a7e-b078-1e099462b409 %}exception{% endglossarytooltip %} MUST be either processed by function A or declared by the @throws annotation in the documentation block of function A.\n\n5.4. Exceptions MUST NOT handle message output. It is the processing code that decides how to process an exception.\n\n5.5. Business logic (both application and domain) MUST NOT be managed with exceptions. Conditional statements SHOULD be used instead.\n\n5.6. The short name of an exception class MUST be clear, meaningful, and state the cause of exception.\n\n5.7. Thrown exceptions SHOULD be as specific as possible. The top generic `\\Exception` SHOULD NOT be thrown anywhere.\n\n5.8. All direct communications with third-party libraries MUST be wrapped with a try/catch statement.\n\n5.9. `\\Exception` SHOULD be caught only in the code that calls third-party libraries, in addition to catching specific exceptions thrown by the {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %}.\n\n5.10. `\\Exception` SHOULD NOT be thrown in Front Controller and Action Controllers.\n\n5.11. A separate exceptions hierarchy SHOULD be defined on each application layer. It is allowed to throw exceptions that are only defined on the same layer.\n\n5.12. If an exception is caught on the application layer that differs from the one where it has been thrown, and it SHOULD be re-thrown, you SHOULD create a new exception instance that is appropriate for the current layer. In this case, the original exception must be passed to a new instance with the \"previous\" argument.\n\n5.13. It is not allowed to absorb exceptions with no logging or/and any workaround operation executed.\n\n5.14. Any exception SHOULD be logged only in the `catch` block where it is processed, and SHOULD NOT be re-thrown.\n\n5.15. Exceptions SHOULD NOT be caught in a loop. The loop SHOULD be wrapped with a `try/catch` construct instead.\n\n5.16. If a method uses system resources (such as files, sockets, streams, etc.), the code MUST be wrapped with a `try` block and the corresponding `finally` block. In the `finally` sections, all resources SHOULD be properly released.\n\n5.17. `LocalizedException` SHOULD only be thrown in the Presentation layer (Controllers, Blocks).\n\n## 6. Application layers\n\n### 6.1. All layers\n\n6.1.1. Application SHOULD be structured in compliance with the [CQRS principle].\n\n6.1.2. Every application layer (Presentation, Service Contracts, Data Access) MUST process (handle or re-throw) exceptions of the underlying layer.\n\n### 6.2. Presentation layer\n\n6.2.1. According to CQRS, the Presentation layer hosts the Command and the Query Infrastructures:\n\n* **Command** for Actions\n\n* **Query** for {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}Layout{% endglossarytooltip %} and its elements (Blocks and UI Components)\n\n6.2.2. Request, Response, Session, Store Manager and Cookie objects MUST be used only in the Presentation layer.\n\n6.2.3. All actions MUST return the `ResultInterface` implementation.\n\n6.2.4. Actions MUST NOT reference blocks declared in layout.\n\n###  6.3. Data Access (Persistence) layer\n\n6.3.1. Entities MAY have fields scoped differently (in product, EAV --- per store, options --- per website).\n\n6.3.2. Every persistence operation MUST be performed with one scope set.\n\n6.3.3. Entities MUST NOT contain persistence-related logic.\n\n6.3.4. MySQL's `strict_mode` variable SHOULD be aligned with the default `strict_mode` of the latest MySQL release.\n\n### 6.4. Service Contracts (Application) layer\n\nWe are reviewing this section and will publish it soon.\n\n## 7. Configuration\n\n7.1. An Application Instance consists of:\n\n* Code\n\n* Environment Configuration\n\n* Data\n\n7.2. Code includes:\n\n* application codebase\n\n* {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} configuration\n\n* generated code and {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %}\n\n* database structure\n\n* system configuration values\n\n* configuration scopes (stores/store groups/websites)\n\n* {% glossarytooltip f3944faf-127e-4097-9918-a2e9c647d44f %}CMS{% endglossarytooltip %} entities\n\n7.3. Environment Configuration includes information about application services connection.\n\n7.4. Data includes the business {% glossarytooltip a9027f5d-efab-4662-96aa-c2999b5ab259 %}entity{% endglossarytooltip %} data.\n\n7.5. Code and Environment Configuration MUST not be stored in Data Storage.\n\n7.6. Installation process MUST NOT modify Code.\n\n7.7. All XML configuration formats MUST be declarative. Imperative nodes are not allowed.\n\n7.8. All Configuration objects MUST use `Magento\\Framework\\Config`.\n\n## 8. Modularity\n\n8.1. The Application Framework (`Magento\\Framework\\*`) MUST NOT depend on application modules.\n\n8.2. All dependencies MUST be declared in the component's `composer.json` file.\n\n8.3. If component A uses behavior of Component B, such Component B MUST be declared in the `require` section of Component A's `composer.json` file, except for cases where Component B is used in the code that customizes the behavior of Component B.\n\n8.4. If component A extends/customizes the behavior of component B through its customization points (layout handles, plugins, events, etc.), such Component B MUST be declared in the `suggest` section of Component A.\n\n8.5. Only the `@api` code of any module can be referenced by other modules.\n\n8.6. A module MUST NOT contain references to {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} resources.\n\n8.7. A component MUST NOT rely neither on dependencies of dependencies nor on dependencies of the project it is included in (e.g., Magento application). All component dependencies MUST be stated explicitly.\n\n## 9. Browser-Server interaction in web application\n\n9.1. All Client-Server calls must follow the [HTTP Protocol].\n\n9.2. All customer-agnostic data (Products, Categories, CMS Pages) MUST be rendered on a server and cached in a public {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} server (Varnish).\n\n9.3. All customer-specific data MUST be rendered on the browser side using a {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} (JS) application.\n\n9.4. {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} {% glossarytooltip 8f407f13-4350-449b-9dc5-217dcf01bc42 %}markup{% endglossarytooltip %} generated on server MUST NOT contain user-specific data.\n\n9.5. HTML markup generated on server MUST NOT contain session-specific data (e.g. a form element with a CSRF token).\n\n9.6. A JS application MAY receive customer-specific data using the CustomerData JS {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %}.\n\n9.7. All state-modifying requests from a browser SHOULD be performed with AJAX requests.\n\n9.8. If an error occurs during request handling, the server MUST return an appropriate [HTTP Status Code] and an explanation of an error in the response body.\n\n9.9. All headers MUST be respected.\n\n9.10. The Request, Session, and Cookie objects MUST NOT be injected in an object constructor. They MUST be passed only as method arguments.\n\n9.11. Operation scopes MUST always be explicitly requested by operations (`StoreManager` SHOULD NOT be used to retrieve the store ID).\n\n## 10. JavaScript (JS) application\n\n10.1. The Magento 2 {% glossarytooltip 9bcc648c-bd08-4feb-906d-1e24c4f2f422 %}UI Component{% endglossarytooltip %} framework MUST be used to build front-end applications.\n\n10.2. Only private content SHOULD be rendered in browser.\n\n10.3. All module dependencies of a RequireJS module MUST be declared in the module's definition header. No direct calls to `require` SHOULD be made unless the list of modules to be loaded is dynamic.\n\n10.4. The [W3C Content Security Policy] MUST be followed.\n\n10.5. ESLint [rules][rules] SHOULD BE followed.\n\n10.5.1. ES5 SHOULD be used as a JS standard.\n\n10.5.2. Language features (closures) MUST be used for scope management. There SHOULD be no `_` (underscore) naming convention for private properties.\n\n10.5.3. All asynchronous operations MUST be represented with JQuery AJAX calls.\n\n10.5.4. Global properties (window.*) MUST NOT be used. A module system SHOULD be used for shared objects.\n\n10.5.5. Modules MUST NOT have external side effects.\n\n10.5.6. Function declarations MUST be used for private functions instead of function expressions.\n\n10.5.7. Re-declaration of function names MUST NOT be used.\n\n## 11. Testing\n\n### 11.1. White-box testing (unit, integration, functional)\n\n11.1.1. Only public methods SHOULD be tested. Private and protected behavior SHOULD be tested through public methods.\n\n### 11.2. Unit testing\n\n11.2.1. All objects SHOULD be tested in isolation.\n\n11.2.2. `ObjectManager` MUST NOT be used in unit tests.\n\n11.2.3. `ObjectManagerHelper` MAY BE used to automatically mock all dependencies of the object under test.\n\n## 12. Web API\n\n12.1. Both REST and SOAP API's MUST be exposed.\n\n12.2. All {% glossarytooltip 377dc0a3-b8a7-4dfa-808e-2de37e4c0029 %}Web API{% endglossarytooltip %} GET endpoints MUST return lists of entities.\n\n## 13. Command line interface (CLI)\n\n13.1. Magento 2 [CLI Command Naming Guidelines] MUST be followed.\n\n13.2. A CLI command MUST be created for any functionality intended to be used by a system integrator/system administrator/developer (for example: change indexer mode, generate a configuration file, etc.).\n\n13.3. A CLI command MUST always run in a global area. If a command needs a specific area to perform its functions, such area SHOULD be set up before execution.\n\n13.4. Exception in a single CLI command SHOULD NOT break the CLI framework; running other commands SHOULD still be possible.\n\n## 14. Events\n\n14.1. All values (including objects) passed to an {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} MUST NOT be modified in the event observer. Instead, plugins SHOULD BE used for modifying the input or output of a function.\n\n{% collapsible Example: %}\n``` php?start_inline=1\nclass SampleEventObserverThatModifiesInputs\n{\n    /**\n     * @param \\Magento\\Framework\\Event\\Observer $observer\n     */\n    public function execute(\\Magento\\Framework\\Event\\Observer $observer)\n    {\n        /** @var \\Magento\\Framework\\App\\DataObject $transport */\n        $transport = $observer->getData('transport');\n\n        if ($transport->getData('some_value') === true) {\n            /**\n             * Expecting this value to go back to the original event dispatcher violates\n             * this rule. Other observers could change the data, or Magento could make\n             * architectural changes always sending immutable objects.\n             */\n            $transport->setData('output_return_value', true);\n        }\n    }\n}\n```\n{% endcollapsible %}\n---\n\n{:start=\"14.2\"}\n14.2. Events used SHOULD be observed as specifically as possible. A `global` subscription to an event SHOULD NOT be used when the area impacted is just `frontend`.\n\n\n\n[RFC2119]: https://tools.ietf.org/html/rfc2119\n[SOLID principles]: https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\n[Temporal coupling]: http://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/\n[Law of Demeter]: https://en.wikipedia.org/wiki/Law_of_Demeter\n[CQRS principle]: https://martinfowler.com/bliki/CQRS.html\n[HTTP Protocol]: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\n[HTTP Status Code]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n[W3C Content Security Policy]: https://w3c.github.io/webappsec-csp/\n[rules]: https://github.com/magento/magento2/blob/2.1/dev/tests/static/testsuite/Magento/Test/Js/_files/eslint/.eslintrc-magento\n[CLI Command Naming Guidelines]: {{page.baseurl}}extension-dev-guide/cli-cmds/cli-naming-guidelines.html\n",
      "url": "/guides/v2.0/coding-standards/technical-guidelines.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-email-html": {
      "title": "Customize email templates",
      "content": "## Customize email templates {#customize-email-templates}\n\nEmail templates are stored in the `/view//email` directory of their respective modules. For example, the template for the new order transactional email for the Sales module is located in &lt;Magento_Sales_module_dir&gt;/view/frontend/email/order_new.html. \n\nWe strongly recommend you not change the default Magento files. If you want to customize the default templates, you should create your custom templates and configure Magento to use them instead of the default templates. \n\nYou can add custom templates as physical files in your custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} or create them using the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}. Both approaches are described in the following sections.\n \n### Customize email templates using a theme {#customize-email-theme}\n\nOverride email templates by creating templates in a new directory in your custom theme, using this pattern: `/_/email`. For example, to override the New Order email template, create a template named `order_new.html` in the `/Magento_Sales/email` directory.\n\nTemplate fallback is supported for email templates, so parent themes of your current theme are searched for templates.\n \n### Customize email templates using the Magento Admin {#customize-email-admin}\n\nAny templates configured in the Magento {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} take precedence over default or theme-based templates.\n\n1. In the Magento Admin, navigate to **MARKETING** > Communications > **Email Templates**\n2. Click **Add New Template**.\n3. If you want to use a default template as a starting point, in the **Load default template** section, choose the template and click **Load Template**. The path to the configuration settings for each default template displays in the **Currently Used For** field in the Template Information section.\nMake note of this path because you will need it later when you configure this new template to be used instead of the default template.\n    \n\n4. In **Template Name**, enter a name to identify the template in the Magento Admin.\n5. In **Template Subject**, add plain text to use as the Subject of the emails sent using the template you create. This field can contain system variables.  \n6. Customize template content. For details, see the section on customizing content.\n7. In **Template Styles**, optionally add {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} styles for the template. These styles are added inside of a `` tag for them to work.\n\nThe `/view/frontend/email/header.html` file contains a `css` directive inside of a `\n\nThe `css` directive compiles the contents of the provided file and outputs it. \n\nFor example, let's say an email is being sent from a store configured with the Magento Luma theme. The `css` directive first looks for an `email.less` file in `/web/css`. However, because the file doesn't exist there, it falls back to `/web/css/email.less`. The contents of that file are compiled and its contents output in the `` tag.\n\nTemplate-specific non-inline styles\nAs mentioned in the preceding section, the `header.html` file outputs the `{% raw %}{{var template_styles|raw}}{% endraw %}` variable. \n\nThe value of that variable comes from any of the following: \n\n* Any styles you add to any `html` email template inside a comment block, like in the following example, are included in the `template_styles` variable:\n      \n      \n      \n* If you customize transactional emails using the Magento Admin, you can add CSS styles to the **Template Styles** field to include those styles in the `template_styles` variable.\n\nHow email styles are organized\n\nThe styles for emails are split into several different files.\n\n\n  \n    \n      File\n      Description\n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/email.less\n      \n      \n          Imports necessary files and then outputs styles to be included in &lt;style&gt; tag\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/email-fonts.less\n      \n      \n          Contains @font-face declarations for custom fonts. This file is imported by the _email-extend.less file using an @import rule.\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/email-inline.less\n      \n      \n          Imports necessary files and then outputs styles to be inlined\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/source/_email-base.less\n      \n      \n          Contains majority of styles for emails, including resets, layout, typography, and so on. Review the comments at the top of this file to understand how the styles in this file are split between the email.less and email-inline.less files.\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/source/_email-extend.less\n      \n      \n          This file is intended to be copied into your custom themes and edited directly. You can add new email styles or override existing ones. This should prevent having to copy the _email-base.less file into your custom theme. See the &lt;Magento_Luma_theme_dir&gt;/web/css/source/_email-extend.less file for example usage.\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/web/css/source/_email-variables.less\n      \n      \n          The _email-base.less file uses a number mixins from the Magento UI library. If you want to change any of the styles output by those mixins, you can set the value of any of the variables those mixins uses in this file. See the &lt;Magento_Luma_theme_dir&gt;/web/css/source/_email-variables.less file for example usage.\n      \n    \n    \n      \n          &lt;Magento_Blank_theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/web/css/source/_email.less\n      \n      \n          Styles that are specific to modules are stored in these files. This mechanism also allows third-party extensions to include styles that will get included in the inline/non-inline output.\n      \n    \n    \n      \n          lib/web/css/source/_email-variables.less\n      \n      \n          Same as &lt;Magento_Blank_theme_dir&gt;/web/css/source/_email-variables.less\n      \n    \n    \n      \n          lib/web/css/source/lib/variables/_email.less\n      \n      \n          Contains new email-specific variables that can be overridden in a theme-specific _email-variables.less file. \n      \n    \n  \n\n\nWhen implementing a custom theme, you should be able to fully customize email templates by copying the `/web/css/source/_email-extend.less` and `/web/css/source/_email-variables.less` files to your custom theme and editing those files.\n\nCustom fonts\nEmails inherit the custom fonts that are defined by the {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}frontend{% endglossarytooltip %} theme. The Magento Blank theme uses the **Open Sans** font. Because **Open Sans** is not a standard system font, `@font-face` rules are used to include web fonts.\n\nHere is an overview of how the font structure for emails works:\n\n* &lt;Magento_Blank_theme_dir&gt;/web/css/source/_email-extend.less contains the `@import` directive that requests the `email-fonts.css` file.\n\n  The reason the contents of `email-fonts.css` are loaded using `@import` rather than being output directly into a `` tag in the `` of an email is that if a user is reading their email offline, some email clients don't render the text because the web fonts can't be loaded.\n* The `/web/css/email-fonts.less` file imports `source/_variables.less` and `source/_typography.less` files:\n    * app/design/frontend/Magento/blank/web/css/source/_variables.less defines which font is used in the `@font-family-name__base` variable.\n    * app/design/frontend/Magento/blank/web/css/source/_typography.less generates the `@font-face` rules which import the custom fonts.\n\nIf you want to change the font used for emails, do the following:\n\n1. Refer to the documentation on [using fonts]({{page.baseurl}}frontend-dev-guide/css-topics/using-fonts.html) for details on how to add a new font.\n2. After you've added a new font and have updated the `source/_variables.less` and `source/_typography.less` files for your custom theme to refer to the new font, the emails should automatically use the specified font.\n\nEmail logo\n\nYou can add a logo to emails by adding it to your theme or by uploading it in the Magento Admin. \n\nBecause email clients don't support vector-based formats such as Scalable Vector Graphics (SVG), you must prepare a Portable Network Graphics (PNG) logo. Because emails are viewed on devices with a broad range of pixel densities, you should use a logo that is 3&times; the size that you actually want it to display. For example, let's say your email has a 200px &times; 100px area for the logo. The logo image should be 600px &times; 300px.\n\nIf you don't have access to a high-resolution version of your logo, you can upload a normal-resolution image. For example, if your logo image is 200px &times; 100px, specify `200` for the width and `100` for the height.\n\nCustomize the email logo using a theme \nTo customize your logo using a theme:\n\n1. Add a file named `logo_email.png` to a `Magento_Email/web` directory in your custom theme.\n  \n   For example, if the OrangeCo vendor wants to add a logo for their custom Orange, they must add a file in the `app/design/frontend/OrangeCo/orange/Magento_Email/web` directory.\n\n2. Copy the `/view/frontend/email/header.html` file into a `Magento_Email/email` directory in your theme. \n   \n   For example, the OrangeCo vendor would copy the file to this location: `app/design/frontend/OrangeCo/orange/Magento_Email/email/header.html`\n   \n   Edit the `width` and `height` attributes of the `` tag to reflect the area in which you want your logo to display (for example, 200 &times; 100).\n  \n   Example:\n   \n       {% raw %}\n       {{if logo_width}}\n           width=\"{{var logo_width}}\"\n       {{else}}\n           width=\"200\"\n       {{/if}}\n       \n       {{if logo_height}}\n           height=\"{{var logo_height}}\"\n       {{else}}\n           height=\"100\"\n       {{/if}}\n       {% endraw %}\n   \n   You should leave the if/else conditional statement in place in case you ever want to override these values using the Admin.\n\nCustomize the email logo using the Admin\n\n1. In the Magento Admin, navigate to **STORES** > Settings > **Configuration** > GENERAL > **Design** > **Emails**\n2. In the **Scope** drop-down list, select the scope for which you want to set a logo (a certain store view, the whole website, or default config). \n3. Upload your logo and specify the alternative text for it.\n\n\n4. Enter values for **Logo Width** and **Logo Height**. Based on the preceding example, you would enter `200` and `100`, respectively.\n5. Click the **Save Config** button.\n\nUse contact information in emails\n\nEmails can output your store name, store email address, store phone number, and store hours of operation if those values are configured in the Admin. \n\nTo set those values:\n\n1. To set the store name, phone number, and hours of operation:\n    1. In the Magento Admin, navigate to **STORES** > Settings > **Configuration** > GENERAL > **General** > **Emails**\n    2. Input values into the **Store Name**, **Store Phone Number**, and **Store Hours of Operation** fields.\n    3. Note: The **Store Phone Number** and **Store Hours of Operation** fields are optional.\n    4. Click the **Save Config** button.\n2. To set the store email:\n    1. In the Magento Admin, navigate to **STORES** > Settings > **Configuration** > GENERAL > **General** > **Store Email Addresses** > **General Contact**\n    2. Input values into the **Sender Name** and **Sender Email** fields.\n    3. Click the **Save Config** button.\n\nThe sales emails are configured to display all of the above values, if they're configured in the admin. If you want to add those values to other email templates, you can use the following variables:\n\n    {% raw %}{{var store.getFrontendName()}}{% endraw %}\n    {% raw %}{{var store_email}}{% endraw %}\n    {% raw %}{{var store_phone}}{% endraw %}\n    {% raw %}{{var store_hours}}{% endraw %}\n\nLocalization\n\nIn order to support the translation of content, all strings in emails are output using the `trans` directive. Example: \n\n    {% raw %}{{trans \"Thank you for your order from %store_name.\" store_name=$store.getFrontendName()}}{% endraw %}\n    {% raw %}{{trans \"Once your package ships we will send you a tracking number.\"}}{% endraw %}\n\nThe `trans` directive will translate strings into whatever locale is configured for the store from which the email is being sent. For example, if an email is being sent from a store view that is configured to use the `fr_FR` locale, the emails are translated to French.\n\nPlease note, that variable assignment must not contain spaces. \n\nCorrect:\n\n    {% raw %}\n    {{trans \"Thank you for your order from %store_name.\" store_name=$store.getFrontendName()}}\n    {% endraw %}\n\nIncorrect:\n    {% raw %}\n    {{trans \"Thank you for your order from %store_name.\" store_name = $store.getFrontendName()}}\n{% endraw %}\n\n\n\nException: argument value can contain spaces if it is enclosed in brackets.\n\n\n\n\nSupported email clients and devices\n\nWe tested responsive emails using a combination of real devices and Litmus. Due to the greatly varied level of support among email clients for modern web technologies, not all email clients rendered the emails perfectly. However, all of the following clients should render the emails in a manner that allows them to be easily read without obvious issues.\n\n* Supported Desktop Clients\n    * Apple Mail 7 (OS X 10.9)\n    * Apple Mail 8 (OS X 10.10)\n    * Outlook 2003 (Windows 7)\n    * Outlook 2007 (Windows 7)\n    * Outlook 2010 (Windows 7)\n    * Outlook 2013 (Windows 7)\n    * Outlook 2016 (OS X 10.10)\n* Supported Mobile Clients\n    * Native email app (Android 2.3)\n    * Native email app (Android 4.2)\n    * Gmail app (Android 4.2)\n    * Native email app (Blackberry 5 OS)\n    * iOS 7 (iPhone 5s)\n    * iOS 8 (iPad Retina)\n    * iOS 8 (iPad Mini)\n    * iOS 8 (iPhone 6)\n    * iOS 8 (iPhone 6 Plus)\n    * Windows Phone 8\n* Supported Web Clients (tested in combination of Firefox, Chrome, and Internet Explorer)\n    * AOL Mail\n    * Gmail\n    * Office 365\n    * Outlook.com\n    * Yahoo! Mail\n\nNewsletter templates\n\nThe focus of this article is on transactional emails but the same techniques can be used with newsletter templates as well, including:\n\n* Import the header and footer using `{% raw %}{{template config_path=\"design/email/header_template\"}}{% endraw %}` and `{% raw %}{{template config_path=\"design/email/footer_template\"}}{% endraw %}`\n* Apply inline styles using `{% raw %}{{inlinecss file=\"css/email-inline.css\"}}{% endraw %}`\n* Include non-inline styles using `{% raw %}{{css file=\"css/email.css\"}}{% endraw %}`\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-email.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-override-html": {
      "title": "Templates basic concepts",
      "content": "What's in this topic\nThis topic discusses the main concepts of how default templates work in the Magento application. \n\nHow templates are initiated\n\nTemplates are usually initiated in {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} files.\nEach layout block has an associated template. \nThe template is specified in the `template` attribute of the  layout instruction. \nFor example, from &lt;Magento_Catalog_module_dir&gt;/view/frontend/layout/catalog_category_view.xml:\n\n\n&lt;block class=&quot;Magento\\Catalog\\Block\\Category\\View&quot; name=&quot;category.image&quot; template=&quot;Magento_Catalog::category/image.phtml&quot;/&gt;\n\n\nThis means that the `category.image` block is rendered by the `image.phtml` template, which is located in the `category` subdirectory of the `Magento_Catalog` {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} templates directory.\n\nThe templates directory of `Magento_Catalog` is `/view/frontend/templates`.\n\nThe next section describes where templates can be located in general.\n\nConventional templates location Templates are stored in the following locations:\n\n* Module templates: &lt;module_dir&gt;/view/frontend/templates/&lt;path_to_templates&gt;\n* Theme templates: &lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/templates/&lt;path_to_templates&gt;\n\nHere &lt;path_to_templates&gt; might have several levels of directory nesting, or might be empty. Examples:\n\n* `/view/frontend/templates/product/widget/new/content/new_grid.phtml`\n* `/view/frontend/templates/cart.phtml`\n\nTemplates overriding\nFor template files with the same name, the following is true: \ntheme templates override module templates, and those of a child theme override parent {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} templates.\n\nThis mechanism is the basis of the template customization concept in Magento application: to change the output defined by a certain default template, you need to override one in your custom theme.\n\nOverriding templates is described with more details in the Theme Inheritance article.\n\n\nRoot template\n\nIn Magento there's a special template which serves as root template for all {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} pages in the application: `/view/base/templates/root.phtml`.\n\nUnlike other templates, `root.phtml` contains the `doctype` specification and contributes to `` and `` sections of all pages rendered by Magento application. But similar to other templates, `root.phtml` can be overridden in a theme. \n\n\n\nGetting argument values from layout\n\nArguments values set in a layout file can be accessed in templates using the get{ArgumentName}() and has{ArgumentName}() methods. There are more details in the Layout instructions article.\n\n## Related reading\n\n[Set a block's template]({{page.baseurl}}frontend-dev-guide/layouts/xml-manage.html#set_template)\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-override.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-overview-html": {
      "title": "Templates overview",
      "content": "Introduction to customizing a theme using templates\n\n\nIn Magento application templates are the part of the view layer. Templates define exactly how the content of layout blocks is presented on a page: order, {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} classes, elements grouping, and so on.\nIn most cases, templates do not contain any logic about whether they will or will not be rendered, this is typically handled by the {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} files. Once a template is called in a layout, it will be displayed.\n\nDefault Magento templates are {% glossarytooltip ae0f1f68-c466-4189-88fd-6cd8b23c804f %}PHTML{% endglossarytooltip %} files. Also {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} templates are used for [Knockout JS](http://knockoutjs.com/index.html) scripts.\n\n\n\n The Magento template rendering subsystem supports multiple template engines, including the default PHP-based engine for processing PHTML templates.\n\n\nThis chapter describes how to customize templates in your design theme, and provides both the practice reference and the theoretical background of how templates are applied in a Magento store.\n\n\nWe strongly recommend that you do not change the default templates, because if you do edit them, your changes can be overwritten by the new version of the default files during upgrades.\nThe best practice is creating a new design theme and adding your modified templates there.\n\nThis chapter contains the following topics:\n\n* Template customization walkthrough\n* Templates basic concepts\n* Illustration of customizing templates\n* Customizing email templates\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-overview.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-sample-html": {
      "title": "Illustration of customizing templates",
      "content": "What's in this topic\nThis topic contains a step-by-step illustration of solving a typical design customization task using templates.\n\nSample template customization: changing a layout of the mini shopping cart\nIn the Magento basic Blank theme, in the mini shopping cart, products are listed under the **Go to Checkout** button, like following:\n\n\n\nOrangeCo decided they want to change this and display the product list before the **Go to Checkout** button.\n\nThe template responsible for displaying the mini-shopping cart items and controls is [`/view/frontend/web/template/minicart/content.html`]({{site.mage2000url}}app/code/Magento/Checkout/view/frontend/web/template/minicart/content.html).\nHere is the part of the code OrangeCo worked with:\n\n\n\n\nThey created a new Orange {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} and copied the `content.phtml` to the theme directory:\n`app/design/frontend/OrangeCo/orange/Magento_Checkout/web/template/minicart/content.html`\nIn their copy of the templates, they changed the order of the blocks as follows:\n\n\n\nWhen the Orange theme was applied, the mini shopping cart with products looked like following:\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-sample.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-security-html": {
      "title": "Templates XSS security",
      "content": "Security measures against XSS attacks\n\nTo prevent XSS issues Magento recommends the following rules for escaping output in templates:\n\n* If a method indicates that the contents is escaped, do not escape: `getTitleHtml()`, `getHtmlTitle()` (the title is ready for the {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} output)\n\n* Type casting and {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}php{% endglossarytooltip %} function `count()` don't need escaping  (for example `echo (int)$var`, `echo (bool)$var`, `echo count($var)`)\n\n* Output in single quotes doesn't need escaping (for example `echo 'some text'`)\n\n* Output in double quotes without variables doesn't need escaping (for example `echo \"some text\"`)\n\n* For all other cases, escape the data using [specific escape functions](#escape-functions-for-templates).\n\nThe following code sample illustrates the XSS-safe output in templates:\n\n{% highlight php %}\ngetTitleHtml() ?>\ngetHtmlTitle() ?>\nescapeHtml($block->getTitle()) ?>\ngetId() ?>\n\n\n\nescapeXssInUrl($block->getUrl()) ?>\">getAnchorTextHtml() ?\n>\n{% endhighlight %}\n\n#### Escape functions for templates\n\nFor the following output cases, use the specified function to generate XSS-safe output.\n\n\n  The upcoming release of Magento 2.2 will deprecate these functions.\n\n  Please check back on this page after the 2.2 release for updated documentation on new escape functions.\n\n\n\n**Case:** JSON output\\\\\n**Function:** No function needed for JSON output.\n\n{% highlight html %}\n  \n  ' />\n{% endhighlight %}\n\n**Case:** String output that should not contain HTML\\\\\n**Function:** `escapeHtml` \n\n{% highlight html %}\n  escapeHtml($block->getLabel()) ?>\n{% endhighlight %}\n\n**Case:** {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} output\\\\\n**Function:** `escapeUrl`\n\n{% highlight html %}\n  escapeUrl($block->getCategoryUrl()) ?>\">Some Link\n{% endhighlight %}\n\n**Case:** HTML attributes\\\\\n**Function:** `escapeQuote`\n\n{% highlight html %}\n  escapeQuote($block->getSpanClass()) ?>\">Product Description\n{% endhighlight %}\n\nStatic Test\n\nTo check your template for XSS vulnerabilities, you can use the static test `XssPhtmlTemplateTest.php` in `dev\\tests\\static\\testsuite\\Magento\\Test\\Php\\`.  \n\nThis static test finds all echo calls in PHTML-templates and determines if the output is properly escaped.\n\nIt covers the following cases:\n\n* `/* @noEscape */` before output. Output doesn't require escaping. Test is green.\n\n* `/* @escapeNotVerified */` before output. Output escaping is not checked and should be verified. Test is green.\n\n* Methods which contain `\"html\"` in their names (for example `echo $object->{suffix}Html{postfix}()`). Data is ready for the HTML output. Test is green.\n\n* AbstractBlock methods `escapeHtml`, `escapeUrl`, `escapeQuote`, `escapeXssInUrl` are allowed. Test is green.\n\n* Type casting and php function `count()` are allowed (for example `echo (int)$var`, `(bool)$var`, `count($var)`). Test is green.\n\n* Output in single quotes (for example `echo 'some text'`). Test is green.\n\n* Output in double quotes without variables (for example `echo \"some text\"`). Test is green.\n\n* Other of previously mentioned. Output is not escaped. Test is red.\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-security.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-templates-template-walkthrough-html": {
      "title": "Templates customization walkthrough",
      "content": "## What's in this topic\nThis topic walks you through how to customize a template.\n\n## Prerequisites \n\n[Set]({{page.baseurl}}config-guide/cli/config-cli-subcommands-mode.html) your Magento application to the developer [mode]({{page.baseurl}}config-guide/bootstrap/magento-modes.html). The application mode influences the way {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} are cached by Magento. The recommendations about {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} development we provide in this chapter are developer/default-mode specific.\n\n## Template customization walkthrough\n\nTo customize a template:\n\n1. Locate the template which is associated with the page/block you want to change using template hints.\n\n2. Copy the template to your theme folder according to the template storing convention.\n\n3. Make the required changes.\n\nTo add a new template in a theme:\n\n1. Add a template in your theme directory according to the template storing convention. \n\n2. Assign your template to a block in the corresponding layout file. \n\n\nIf you add a new .html template, and then edit it, the changes will not apply until you do the following: delete all files in the pub/static/frontend and var/view_preprocessing directories, then reload the pages. You can delete the files manually or run the grunt clean:&lt;theme_name&gt; command in CLI. For details about using Grunt in Magento see Installing and configuring Grunt.\n\n\n## Walkthrough illustration: adding a message to the customer review form\nA small customization to illustrate the walkthrough: in their Orange theme, the OrangeCo company wants to add a short text to the product review form to encourage customers to write reviews. \n\nThe following image illustrates how the default review form looks like:\n\n\n\nTo add the text, OrangeCo needs to override the default review form template in the Orange theme. \n\nFirst, they copy the `form.phtml` template from `/view/frontend/templates` to the corresponding subdirectory in the Orange theme directory: `app/design/frontend/OrangeCo/orange/Magento_Review/templates`.\n\nIn the theme `form.phtml` file they add the {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} snippet with the message before the &lt;form&gt;:\n\n\n\nHere's how the form will look when the Orange theme is applied in a store:\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/templates/template-walkthrough.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-validate-test-module-html": {
      "title": "Test your component",
      "content": "## Unit and Integration Tests {#test-unit}\n\nRun the PHPUnit based Magento unit and integration tests.\nFor more information see the Magento Testing Overview\n\n## Functional testing {#test-functional}\nFor further testing with the Magento functional testing frameworks, see\n[Functional Testing Framework]({{page.baseurl}}mtf/mtf_introduction.html).\n\n## Test using Community Edition {#test-comm}\nTest your component by deploying Magento Community Edition and adding the component to the project's composer.json.\n\n{% highlight JSON %}\n\"require\": {\n    \"magento/magento-composer-installer\": \"*\",\n    \"magento/product-community-edition\": \"2.0.0\",\n    \"yourvendorname/module-one\": \"0.1.1\"\n},\n{% endhighlight %}\n\nRemember to [register]({{page.baseurl}}extension-dev-guide/build/component-registration.html) your component as well, adding the location of your component. Confirm that your component works as expected and Magento functionality is not compromised.\n\n## Test installing your component {#test-install}\nBefore you publish your component, you should test installing it using the Magento Component Manager (part of the Magento Admin).\n\nOne way to do this follows:\n\n1.\tPackage your component in a GitHub repository that's accessible by the machine on which you run the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}.\n2.\tOn that machine, create a static route from `https://repo.magento.com` to your GitHub repository.\n\n\tTo create a static route, add a line similar to the following to your `hosts` file:\n\n\t\t https://repo.magento.com\n\n3.\tInstall your component exactly like a merchant.\n4.\tVerify the component installed properly.\n\n\n\n\n\n\n\n## More information\nFor more information on testing in {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} and validating Magento components, see the following:\n\n* [Validating Magento Extensions](http://www.gorillagroup.com/trending/insight/validating-magento-extensions-phpunit/){:target=\"_blank\"}\n",
      "url": "/guides/v2.0/extension-dev-guide/validate/test-module.html"
    }
    ,
  
    "guides-v2-0-test-js-test-js-unit-html": {
      "title": "JavaScript testing with JsTestDriver",
      "content": "## Preface\n\nMagento {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} unit tests use the external [JsTestDriver test library]. The tests are implemented using the external [JsTestDriver API] and have their own [jsunit.requirejsUtil framework].\n\nAfter you run the PHP interpreter once to run unit tests, you can [run the JavaScript unit tests from the PhpStorm IDE][PhpStorm].\n\n## Overview {#unit-test-overview}\n\nTo run the automated JavaScript unit tests, you run the [`run_js_tests.php` script] inside the PHP interpreter from the command line. When you run the PHP script, it reads [configuration files] in the `/dev/tests/js` directory. It also generates a `jsTestDriver.conf` YAML configuration file in the `/dev/tests/js` directory. The JsTestDriver reads this generated file to run the tests. After the PHP interpreter runs for the first time, you can run the unit tests from the [PhpStorm IDE].\n\n### JsTestDriver test library {#test-library}\n\nMagento JavaScript unit tests use the external [JsTestDriver] library, which follows JUnit principles. The PHPUnit {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} also follows these principles.\n\n### JsTestDriver API {#jstestdriver-api}\n\nThe unit tests are implemented through the JsTestDriver {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %}. Web developers should be familiar with this API and test structure.\n\n### jsunit.requirejsUtil framework {#framework}\n\nThe unit tests also have their own framework. The `framework/requirejs-util.js` file declares the `jsunit.requirejsUtil` framework object, which supports testing of `RequireJS` (AMD) modules.\n\nThese modules actively call the global `define()` function just upon loading rather than passively declaring their classes or functions. `RequireJS` modules usually do not expose anything to the global state. Instead, the modules pass all declarations to the `define()` function.\n\nThis organization enables testing of `RequireJS` modules without any additional Magento test framework (MTF) support. `jsunit.requirejsUtil` intercepts all `define()` calls and can pass `RequireJS` modules to their corresponding tests.\n\nFor example, `/dev/tests/js/testsuite/mage/requirejs/plugin/id-normalizer-test.js`:\n\n{% highlight JavaScript %}\nvar IdNormalizerTest = TestCase('IdNormalizerTest');\n\nIdNormalizerTest.prototype.setUp = function() {\n    var defineArgs = jsunit.requirejsUtil.getDefineArgsInScript('lib/web/mage/requirejs/plugin/id-normalizer.js');\n\n    assertNotUndefined('There expected to be a define() call', defineArgs);\n    assertEquals('Wrong number of arguments in the define() call', 1, defineArgs.length);\n\n    this.normalizer = defineArgs[0]; // Now we have object to be tested\n};\n{% endhighlight %}\n\n## Configuration files {#config-files}\n\nThe `run_js_tests.php` script processes the [`jsTestDriver.php.dist`] and [`jsTestDriverOrder.php`] configuration files.\n\nBoth files reside in the `/dev/tests/js` directory.\n\n### `jsTestDriver.php.dist` file {#jstestdrivephp}\n\n`/dev/tests/js/jsTestDriver.php.dist` specifies the contents of the YAML configuration file used by JsTestDriver. It contains the following {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} code:\n\n{% highlight php startinline=true %}\nreturn array(\n    'server' => 'http://localhost:9876',\n    'proxy' => array(array('matcher' => '/lib/web/*', 'server' => '%s/test/%s/lib/web/')),\n    'load' => array(\n        '/lib/web/globalize',\n        '/lib/web/jquery/ui',\n        '/lib/web/mage/localization',\n        '/lib/web/mage/validation',\n        '/lib/web/mage/components'),\n    'test' => array('/dev/tests/js/testsuite'),\n    'serve' => array('/lib/web/mage/calendar')\n);\n{% endhighlight %}\n\nFor a description of these configuration parameters, see [Configuration file for test runner].\n\nParameters are the following:\n\n* **server**. The default location of the JsTestDriver server in the form: `http://:`\n* **proxy**. Sets the JsTestDriver to behave as a proxy. The proxy parameter is an array of arrays that enables you to specify multiple matcher and server proxies.\n* **load**. Defines the list of files to load in the browser before any tests run.\n* **test**. Defines the list of test sources to run.\n* **serve**. Defines the list of {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} to load by using the same {% glossarytooltip 41aee03b-a5d5-49c2-8839-894090ef4e86 %}domain{% endglossarytooltip %} as the JsTestDriver.\n\n### `jsTestDriverOrder.php` file {#jstestdriverorderphp}\n\n`/dev/tests/js/jsTestDriverOrder.php` specifies the order in which the JsTestDriver loads certain JavaScript files. It contains the following PHP code:\n\n{% highlight php startinline=true %}\nreturn array(\n    '/lib/web/globalize/globalize.js',\n    '/lib/web/jquery/jquery.js',\n    '/lib/web/jquery/ui/jquery-ui.js',\n    ...\n);\n{% endhighlight %}\n\nThe array applies load ordering to the files specified by the `load` parameter in the `jsTestDriver.php` or `jsTestDriver.php.dist` file.\n\n## `run_js_tests.php` script {#process-overview}\n\nTo run the automated unit tests, you run the [`run_js_tests.php` script] inside the PHP interpreter from the command line.\n\nTo complete the unit tests, the PHP script completes this processing:\n\n1. The script looks for the `JsTestDriver` parameter value in a `jsTestDriver` configuration file in the `/dev/tests/js` directory.\n\n   If found, the script uses the custom `jsTestDriver.php` configuration file.\n\n   Otherwise, the script uses the default `jsTestDriver.php.dist` configuration file.\n\n2. The script looks for the `Browser` parameter value in the `jsTestDriver` configuration file that it found.\n   If the parameter is not set in the configuration file, the script uses to the default browser location, as follows:\n   * **64-bit Windows**. The location is `C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe`.\n   * **Linux**. The script runs the `which firefox` command to determine the location of the Firefox executable in your PATH.\n3. If the script finds the browser executable and the `JsTestDriver.jar` file, it proceeds with the next step. Otherwise, the script fails.\n4. The script determines the order in which the JsTestDriver loads certain JavaScript files through the `jsTestDriverOrder.php` configuration file in the `/dev/tests/js` directory.\n\n\n## Step 1. Before you begin {#test-prereqs}\n\nOn the system where you plan to run the unit tests, install the following prerequisite software:\n\n* **PHP**\n* **The Firefox browser**\n\n  On 64-bit Windows machines, the default installation directory is `C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe`.\n\n  On Linux machines, locate the browser executable in your PATH.\n\n* **`JsTestDriver.jar`**\n\n## Step 2. Configure unit tests {#main-api}\n\nConfiguration files are located in the `/dev/tests/js` directory.\n\nIn a custom `jsTestDriver.php` configuration file or the default `jsTestDriver.php.dist` file, set these configuration parameters:\n\nBrowser\n: Defines the file path to the executable for the browser.\n\n  If you do not set this value, the script uses to the default browser location, as follows:\n  * **64-bit Windows**. The location is `C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe`.\n  * **Linux**. The script runs the `which firefox` command to determine the location of the Firefox executable in your PATH.\n\nJsTestDriver\n: Required. Defines the file path to the `JsTestDriver.jar` file.\n\n## Step 3. Run unit tests {#run-js-unit-tests}\n\nTo run the automated JavaScript tests, run the `run_js_tests.php` script inside the PHP interpreter from the command line:\n\n    php /dev/tests/js/run_js_tests.php\n\nFind the test results in individual `.xml` files in the `/dev/tests/js/test-output` directory.\n\nThe output of the PHP command resembles this output:\n\n**JsTestDriver output:**\n\n    $ php dev/tests/js/run_js_tests.php\n    java -jar C:\\Users\\mchiocca\\lib\\JsTestDriver.jar --config C:\\git\\magento2\\dev\\tests\\js/jsTestDriver.conf --port 9876 --browser \"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\" --tests all --testOutput C:\\git\\magento2\\dev\\tests\\js/test-output\n    setting runnermode QUIET\n    ....................................\n    Total 36 tests (Passed: 36; Fails: 0; Errors: 0) (138.00 ms)\n      Firefox 15.0 Windows: Run 36 tests (Passed: 36; Fails: 0; Errors 0) (138.00 ms)\n\nOn Linux, the X Server might generate one or more warning messages in the output:\n\n**X Server warning messages on Linux:**\n\n    FreeFontPath: FPE \"unix/:7100\" refcount is 2, should be 1; fixing.\n\nAn X Server bug causes these benign messages, which you can ignore.\n\nWhen you run the PHP script, it reads two configuration files. It also generates a `jsTestDriver.conf` YAML configuration file in the `/dev/tests/js` directory. The JsTestDriver reads this generated file to run the tests.\n\nThe contents of `jsTestDriver.conf` resembles this:\n\n**Generated jsTestDriver.conf file:**\n\n{% highlight yaml %}\nserver: http://localhost:9876\nproxy:\n  - {matcher: \"/lib/web/*\", server: \"http://localhost:9876/test/C:/git/magento2/lib/web/\"}\n  ...\nload:\n  - ../../../lib/web/globalize/globalize.js\n  ...\ntest:\n  - ../../../dev/tests/js/testsuite/mage/calendar/calendar-test.js\n  ...\nserve:\n  - ../../../lib/web/mage/calendar/calendar.js\n  ...\n{% endhighlight %}\n\n## Step 4. Use PhpStorm to run unit tests {#phpstorm}\n\nAfter the PHP interpreter runs for the first time, you can [run the JavaScript unit tests from the PhpStorm IDE][PhpStorm].\n\nComplete these steps to use PhpStorm to run unit tests:\n\n1. [Install the JsTestDriver plugin]\n2. [Start the JsTestDriver server]\n3. [Create a run configuration]\n4. [Capture a browser]\n\n### Install the JsTestDriver plugin {#install-plugin}\n\n1. In PhpStorm, open **Settings** and select **Plugins**.\n2. Click **Browse Repositories...**.\n3. Right click **JSTestDriver Plugin** and select **Download and Install**.\n4. Restart PhpStorm.\n\n### Start the JsTestDriver server {#start-jstestdriver-server}\n\n1. At the bottom of the IDE, click **JsTestDriver Server**.\n2. In the **JsTestDriver Server** panel, click the green right arrow to start the server.\n\n   The bar changes to yellow and reads `There are no captured browsers`.\n\n### Create a run configuration {#run-configuration}\n\n1. Enter a name for the run configuration.\n2. Select **Configuration File** and provide the location of the `jsTestDriver.conf` file generated by PHP.\n3. Select **Running in IDE**.\n4. Click **Test Connection**.\n   The `Connection to http://localhost:9876 is OK, no captured browsers` message appears.\n\n### Capture a browser {#capture-browser}\n\n1. In the **JsTestDriver Server** panel, click a browser icon.\n\n   The selected browser opens. In the browser, a green header shows the `Server: Waiting...` message.\n\n   The colored bar in the **JsTestDriver Server** panel turns green.\n\n   The `Ready to run tests` message appears.\n\n2. To run the unit tests, select **Run Configuration** and click the **Run** icon.\n\n   A panel at the bottom of the IDE shows the test results.\n\n3. Depending on whether you have changed one or more configuration files, complete the appropriate step to run the tests:\n   * **No changed configuration files**\n     Use PhpStorm to run the tests.\n     Before you can run the tests, click the red square icon in the **JsTestDriver Server** panel to stop the JsTestDriver server that runs in PhpStorm. You must also close the captured browser.\n   * **One or more changed configuration files**\n     Use the PHP interpreter at the command line to regenerate the `jsTestDriver.conf` file and run the tests.\n\n\n\n\n\n[Configuration file for test runner]: https://code.google.com/p/js-test-driver/wiki/ConfigurationFile\n[JsTestDriver]: https://code.google.com/archive/p/js-test-driver/wikis/GettingStarted.wiki\n\n\n[Capture a browser]: #capture-browser\n[configuration files]: #config-files\n[Create a run configuration]: #run-configuration\n[`jsTestDriver.php.dist`]: #jstestdrivephp\n[`jsTestDriverOrder.php`]: #jstestdriverorderphp\n[JsTestDriver API]: #jstestdriver-api\n[JsTestDriver test library]: #test-library\n[jsunit.requirejsUtil framework]: #framework\n[Install the JsTestDriver plugin]: #install-plugin\n[`run_js_tests.php` script]: #process-overview\n[PhpStorm]: #phpstorm\n[Start the JsTestDriver server]: #start-jstestdriver-server\n",
      "url": "/guides/v2.0/test/js/test_js-unit.html"
    }
    ,
  
    "guides-v2-0-mtf-features-test-suite-html": {
      "title": "Test suite in the Functional Testing Framework",
      "content": "## Overview {#overview}\r\n\r\nIn the Functional Testing Framework (FTF), you can run a group of tests, which is called **test suite**. A test suite is a collection of tests, grouped by a specified rule, that is used to test a custom scope of functionality.\r\n\r\nYou can group the [test cases][test case], [variations][variation] or [constraints][constraint] in any combination during the test run.\r\n\r\nThere are two rule types available:\r\n\r\n- **allow**, specifying what must be included during the test run\r\n- **deny**, specifying what must be excluded during the test run\r\n\r\nThe rules for a test case are defined in a separate `.xml` file. (Recommended naming: use lowercase letters and underscore as a separator). One file contains rules for one test suite. All files are stored in the `/dev/tests/functional/testsuites/Magento/Mtf/TestSuite/InjectableTests` directory by default. Only one test suite can be run at a time.\r\n\r\nThe example of the default test suite:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n\r\n\r\n    \r\n        \r\n            \r\n        \r\n        \r\n            \r\n        \r\n    \r\n    \r\n        \r\n            \r\n        \r\n        \r\n            \r\n        \r\n    \r\n\r\n\r\n{% endhighlight %}\r\n\r\nThis set of rules selects functional tests that accepts the following criteria:\r\n\r\n - WITH the tag `const test_type = 'acceptance_test'`  \r\n - EXCEPT test cases with the tag `const stable = 'no'`\r\n\r\n AND runs variations\r\n\r\n - WITH the tag `test_type:acceptance_test`\r\n - EXCEPT variations with the tag `stable:no`\".\r\n\r\nLearn more details in next topics.\r\n\r\n## Configure `phpunit.xml` {#configure}\r\n\r\nDefine the test suite to be run in the `dev/tests/functional/phpunit.xml`:\r\n\r\n{% highlight xml %}\r\n />\r\n />\r\n{% endhighlight %}\r\n\r\nThe default test suite is `/dev/tests/functional/testsuites/Magento/Mtf/TestSuite/InjectableTests/basic.xml`.\r\n\r\nIn `phpunit.xml`:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n{% endhighlight %}\r\n\r\n## Run your test suite  {#run}\r\n\r\nTo run a test suite enter the following commands from your terminal:\r\n\r\n{% highlight bash %}\r\ncd /dev/tests/functional\r\nvendor/bin/phpunit testsuites/Magento/Mtf/TestSuite/InjectableTests.php\r\n{% endhighlight %}\r\n\r\n## Rule {#rule}\r\n\r\nEach test suite can be defined by the rules that **allow** or **deny** running of a [test case][], a [variation][], or a [constraint][].\r\n\r\nThe only attribute of a rule node is the `scope`, which enables you to use the following options:\r\n\r\n - [`scope = \"testsuite\"`][]. Enables you to filter the test cases by a namespace, a module, a class.\r\n - [`scope = \"testcase\"`][]. Enables you to select the test cases with a specified tag.\r\n - [`scope = \"variation\"`][]. Enables you to use in a test run only variations with a specified tag.\r\n - [`scope = \"constraint\"`][]. Enables you to run only assertions with a specified tag.\r\n\r\n### `scope = \"testsuite\"` {#scope-testsuite}\r\n\r\nThis scope enables you to filter functional tests using the following criteria:\r\n\r\n| Option | Description | Occurrence | Example\r\n|---|---|---|---\r\n| `` | Apply a rule to the test case with the specified class name. | multiple |``\r\n| `` | Apply a rule to all test cases from the specified module. Some test cases may refer to other modules using merging functionality of variations, fixtures etc. You can restrict such reference to other modules adding the `strict=\"1\"` argument. The default value is `strict=\"0\"`. |multiple|``\r\n| `` | Apply a rule to all test cases with the specified namespace. | multiple | ``\r\n\r\nThe {% glossarytooltip 621ef86b-7314-4fbc-a80d-ab7fa45a27cb %}namespace{% endglossarytooltip %} filter example:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n\r\n    \r\n        \r\n            \r\n        \r\n    \r\n\r\n{% endhighlight %}\r\n\r\nThe {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} filter example:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n\r\n    \r\n        \r\n            \r\n            \r\n        \r\n    \r\n\r\n\r\n{% endhighlight %}\r\n\r\nThe class filter example:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n\r\n\r\n    \r\n        \r\n            \r\n            \r\n        \r\n    \r\n\r\n\r\n{% endhighlight %}\r\n\r\n\r\n### `scope = \"testcase\"` {#scope-testcase}\r\n\r\nIn this scope, you can group test cases using tags.\r\n\r\nYou can use `group` and `value` parameters in the test case scope. In a test case, they are provided as a constant name and its value respectively. See the following example:\r\n\r\n- Any tags that are used in the test case should be added to the beginning of a class definition:\r\n\r\n``` php?start_inline=1\r\n\r\n/* tags */\r\nconst TEST_TYPE = '3rd_party_test_deprecated';\r\n/* end tags */\r\n\r\n```\r\n\r\n- The tag in the rule:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n    \r\n        \r\n    \r\n\r\n\r\n{% endhighlight %}\r\n\r\nA test case can contain multiple tag groups, and a group can have multiple values. For example:\r\n\r\n``` php?start_inline=1\r\n\r\n/* tags */\r\nconst MVP = 'yes';\r\nconst DOMAIN = 'PS';\r\nconst TEST_TYPE = 'extended_acceptance_test, 3rd_party_test_deprecated';\r\n/* end tags */\r\n\r\n```\r\n\r\n### `scope = \"variation\"` {#scope-variation}\r\n\r\nYou can assign a `tag` node to a [data set][] variation. This enables you to use customized sets of variations during the test run. You can **allow** to use in the test run only that variations which are specified with tag, or **deny** to use them.  \r\n\r\nYou can use `group` and `value` parameters in the variation scope. In a variation, they are provided in the following format:\r\n\r\n{% highlight xml %}\r\n\r\n\r\n    group_1:value, group_2:value\r\n    \r\n\r\n{% endhighlight %}\r\n\r\nFor example, you have a data set with the following variation:\r\n\r\n{% highlight xml %}\r\n\r\n    test_type:extended_acceptance_test\r\n    simple-product-%isolation%\r\n    ... ... ...\r\n    \r\n    \r\n    ... ... ...\r\n\r\n{% endhighlight %}\r\n\r\nBy using the `` element, you can create a rule to use only the `CreateSimpleProductEntityTestVariation3` variation:\r\n\r\n{% highlight xml %}\r\n\r\n    \r\n        \r\n    \r\n\r\n{% endhighlight %}\r\n\r\nor use all variations except the `CreateSimpleProductEntityTestVariation3` variation:\r\n\r\n{% highlight xml %}\r\n\r\n    \r\n        \r\n    \r\n\r\n{% endhighlight %}\r\n\r\n### `scope = \"constraint\"` {#scope-constraint}\r\n\r\nYou can select constraints from the variation that will be run after a test flow using tags and rules with `scope=\"constraint\"`.\r\n\r\nA tag has two parameters: `group` and `value`. In a constraint, they are provided as a constant name and its value respectively. See the following example:\r\n\r\n- Any tags that are used in the constraint should be added to the beginning of a class definition:\r\n\r\n``` php?start_inline=1\r\n\r\nclass AssertProductView extends AbstractConstraint\r\n{\r\n    /* tags */\r\n    const SEVERITY = 'low';\r\n    /* end tags */\r\n\r\n    // ...\r\n}\r\n\r\n```\r\n\r\n- The rule that allows constraints with this tag only:\r\n\r\n{% highlight xml %}\r\n\r\n    \r\n        \r\n    \r\n\r\n{% endhighlight %}\r\n\r\n- The rule that allows all constraints except those having this tag:\r\n\r\n{% highlight xml %}\r\n\r\n    \r\n        \r\n    \r\n\r\n{% endhighlight %}\r\n\r\n\r\n\r\n[test case]: {{page.baseurl}}mtf/mtf_entities/mtf_testcase.html\r\n[variation]: {{page.baseurl}}mtf/mtf_entities/mtf_dataset.html\r\n[constraint]: {{page.baseurl}}mtf/mtf_entities/mtf_constraint.html\r\n[data set]: {{page.baseurl}}mtf/mtf_entities/mtf_dataset.html\r\n\r\n[`scope = \"testsuite\"`]: #scope-testsuite\r\n[`scope = \"testcase\"`]: #scope-testcase\r\n[`scope = \"variation\"`]: #scope-variation\r\n[`scope = \"constraint\"`]: #scope-constraint\r\n",
      "url": "/guides/v2.0/mtf/features/test_suite.html"
    }
    ,
  
    "guides-v2-0-test-testing-html": {
      "title": "Magento Testing Guide",
      "content": "When talking about testing in Magento 2, we have to distinguish between different test types.\n\n## Functional\n  Functional tests are mainly used for system tests at a very high level by remote controlling a browser. Magento is treated as a black box, and tests happen from a user perspective.  \n\n  For more information, see the [Functional Testing Framework Guide]({{page.baseurl}}mtf/mtf_introduction.html).\n\n## API Functional \n  The Web {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} testing framework enables you to test the Magento {% glossarytooltip 377dc0a3-b8a7-4dfa-808e-2de37e4c0029 %}Web API{% endglossarytooltip %} from the client application point of view.\n  \n  For more information, see the [Web API functional testing]({{page.baseurl}}get-started/web-api-functional-testing.html).\n  \n## Integration  \n  Integration tests run Magento {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} code in varying degrees of isolation. They tend to be a lot more low-level then functional tests. Because they do not utilize a browser to execute the tests, they can be a lot more granular in what they test. They also tend to run a lot quicker then functional tests.\n  \n  For more information, see [Running Integration Tests]({{page.baseurl}}test/integration/integration_test_execution.html).\n  \n## JavaScript  \n  Much of the functionality in Magento 2 is provided with the help of sophisticated {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %}. JavaScript tests ensure the {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}frontend{% endglossarytooltip %} portion of Magento functions as expected.  \n\n  For more information, please see the [Extension Developer Guide on JavaScript Tests]({{page.baseurl}}test/js/test_js-unit.html).\n  \n## Static  \n  Static code analysis checks that PHP code follows the Magento 2 coding standards and best practices. They usually are executed during continuous integration using the `bin/magento` tool. \n\n  Please see the [`magento dev:tests:run`]({{page.baseurl}}config-guide/cli/config-cli-subcommands-test.html) documentation for more information, using the test type `static`. \n\n## Unit  \n  Unit tests are used to check a single unit of PHP code in isolation. They are usually written during development using [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development){:target=\"_blank\"} (TDD).  \n\n  Because they do not require the full Magento application stack to be initialized, they run an order of magnitude faster than integration tests.  \n\n  For more information, see [Running Unit Tests]({{page.baseurl}}test/unit/unit_test_execution.html).\n\n  Please refer to the article [Writing testable code]({{page.baseurl}}test/unit/writing_testable_code.html) for more information on what to keep in mind when starting with TDD.\n  \n  Note: auto-generated factories are not generated in Unit tests for Magento versions 2.0 and 2.1.\n  In the same time, `generated` folder is included in the Unit tests autoload, so any factory generated by the application before can be used in the tests.\n  In order to get consistent behavior of the unit tests that mock auto-generated factories, ensure that the constructor call is disabled and `create()` method is explicitly specified as mocked.\n\nThe `bin/magento` tool provides a common entry point to execute any of the tests, which can be useful for continuous integration. Please see the [System Administrators Guide on Running Tests]({{page.baseurl}}config-guide/cli/config-cli-subcommands-test.html) for more information. \n\n## Where to find the tests in the file system\n\nEach of the test types listed above corresponds to a subdirectory in `/dev/tests`.\n\n    dev/tests  \n    ├── api-functional  \n    ├── functional  \n    ├── integration  \n    ├── js  \n    ├── static  \n    └── unit  \n\nEach one of these test types has different requirements that must be satisfied before they can be executed.  \n",
      "url": "/guides/v2.0/test/testing.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-apply-html": {
      "title": "Apply and configure a storefront theme",
      "content": "What's in this topic\n\nThe topic describes how to apply a {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} for your store. This is a required step if you want a theme to be used on a {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}.\nAlso, it gives information how to add a theme independent logo for your store.\n\n## Prerequisites\n\nMake sure that you [set]({{page.baseurl}}config-guide/cli/config-cli-subcommands-mode.html) your Magento application to the developer [mode]({{page.baseurl}}config-guide/bootstrap/magento-modes.html).\n\n\n## Apply a theme {#theme-apply-apply}\nAfter you add your theme to the file system, you can apply it to your store. You apply a theme in {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %}.\n\nTo apply a theme:\n\n2. In Admin, go to **Stores** > **Configuration** > **Design**.\n3. In the **Store View** drop-down field, select the {% glossarytooltip ca5a9ff1-8182-4fc4-a34b-9b3f831dbf3f %}store view{% endglossarytooltip %} where you want to apply the theme.\n4. On the **Design Theme** tab, select your newly created theme in the **Design Theme** drop-down.\n5. Click **Save Config**.\n6. If caching is enabled, clear the cache.\n6. To see your changes applied, reload the store front pages.\n\n\n## Add a design exception {#theme-apply-except}\nDesign exceptions enable you to specify an alternative theme for particular user-agents, instead of creating a separate store views for them.\nTo add a design exception:\n\n2. In Admin, go to **Stores** > **Configuration** > **Design**.\n3. In the **Scope** drop-down field, select your {% glossarytooltip a3c8f20f-b067-414e-9781-06378c193155 %}website{% endglossarytooltip %}.\n4. On the **Design Theme** tab next to **User-Agent Exceptions** click **Add**.\n5. In the **Search String** box specify the user-agent using either normal strings or regular expressions (PCRE). In the **Design Theme** drop-down list select the theme to be used for matching agent.\n6. Click **Save Config**.\n7. If caching is enabled, clear the cache.\n6. To see your changes applied, reload the store front pages.\n\n\n## Add a theme-independent logo {#theme-apply-logo}\nYou might want to set a permanent store logo, that displays on the store front no matter what theme is applied.\nTo add a permanent theme-independent logo:\n\n1. In the Admin panel, go to **Stores** > **Configuration** > **Design**.\n2. In the **Scope** drop-down, select the store view.\n3. In the **Design** section of the General configuration, expand the **Header** tab.\n4. In the **Logo Image** field browse to the logo file saved in your file system.\n6. Upload the file.\n7. Click **Save Config**.\n7. If caching is enabled, clear the cache.\n8. To see your changes applied, reload the store front pages.\n\nThe logo you add here is stored in the `/pub/media/logo/default/` directory.\n\n\n  To delete the permanent logo, go to the same location, select the check box next to the logo image, and click Delete.\n\n\n## Clear the cache {#theme-apply-clear}\nIf caching is enabled in Magento Admin, you must clear the {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} after you apply the theme, add a design exception, add a logo, and perform other tasks.\n\nA system message notifies you that invalidated cache types must be refreshed.\n\n1.\tClick **System** > **Cache Management**.\n2.\tClear the invalid cache types.\n\n## Troubleshooting (if the changes do not get applied)\n\nIf the changes you configure in the Admin are not applied after you clear the cache and reload the page, try the following:\n\n- Delete all files in the `pub/static/frontend` and `var/view_preprocessed` directories, then reload the pages. You can delete the files manually or run the `grunt clean:` command in CLI. For details about using Grunt in Magento see [Installing and configuring Grunt]({{page.baseurl}}frontend-dev-guide/css-topics/css_debug.html#grunt_prereq).\n\n- In your Magento database, in the `theme` table, check if the `type` value for your custom theme is \"0\". If it is \"1\" or \"2\", change it to \"0\". You can use a database tool such as [phpMyAdmin]({{page.baseurl}}install-gde/prereq/optional.html#install-optional-phpmyadmin) or do it manually from the command line.\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-apply.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-theme-best-practice-html": {
      "title": "Theme development best practices",
      "content": "This topic describes the recommended approaches and things to consider when working on a custom theme.\n\nThese approaches give higher chances to avoid conflicts and issues with your theme after your Magento instance get updated or upgraded, or a custom extension is installed.\n\n## Theme development best practice\n\n1. When [inheriting]({{page.baseurl}}frontend-dev-guide/themes/theme-inherit.html) from a default Magento theme, rather extend, than override the default styles: whenever possible, put your customizations in the `_extend.less` or `_theme.less` file, instead of overriding a `.less` file from a parent theme. \n2. Customize or create new `.xml` layout files instead of customizing and overriding `.phtml` templates. For example, if you need to create a new container, it is better to add an `.xml` file and create it there, than override a template. \nSome other customizations that can be performed using layout instructions are the following:\n \n   * change the position of a block or container using `` \n   * remove a block or container using the `remove` or `display` attribute of the `/` instruction\n   *  reorder blocks and container using the `before/after`attributes of the `/` instruction\n   *  change the HTML tag or CSS class for the existing container using `` element\n   \n   For details about working with layouts see the [Layout chapter of this Guide]({{page.baseurl}}frontend-dev-guide/layouts/layout-overview.html).\n\t\t\n4. Reuse the markup and design patterns from the default Magento files by referencing the existing `.phtml` templates ([templates hints can help]({{page.baseurl}}/frontend-dev-guide/themes/debug-theme.html#debug-theme-templ)) or copy-pasting HTML markup to your custom templates.\n\n5. Use `/etc/view.xml` to change image types sizes or add your own types. See [Configure images properties]({{page.baseurl}}frontend-dev-guide/themes/theme-images.html) for details. Use this file also to [customize product gallery widget]({{page.baseurl}}/javascript-dev-guide/widgets/widget_gallery.html)\n6. If you need to change the wording in user interface, [add custom CSV dictionary files]({{page.baseurl}}frontend-dev-guide/translations/theme_dictionary.html) instead of overriding `.phtml` templates. \n\nKeep in mind, that after Magento instances, updates or upgrades something can change in default templates, layouts, and styles. So it is recommended to check if the changes effected the files overridden in your theme and copy changes if any, to your templates, layouts, and styles.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/theme-best-practice.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-create-html": {
      "title": "Create a new storefront theme",
      "content": "What's in this topic\n\nThis topic discusses how to create the files that make up a theme, how to add a logo to a theme, and how to size images.\n\n\n\n\nA new theme you create is not applied for your store automatically. You need to apply it manually in the Admin panel. This procedure is described in the Apply and configure a theme in Admin topic.\n\n\n## Prerequisites\n\n1. For the sake of compatibility, upgradability, and easy maintenance, do not modify the out of the box Magento themes. To customize the design of your Magento store, create a new custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %}.\n2. [Set]({{page.baseurl}}config-guide/cli/config-cli-subcommands-mode.html) your Magento application to the developer [mode]({{page.baseurl}}config-guide/bootstrap/magento-modes.html). The application mode influences the way {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} are cached by Magento. The recommendations about theme development we provide in this chapter are developer/default-mode specific.\n\n## Create a storefront theme: walkthrough {#theme-gen-walkthrough}\nThe high-level steps required to add a new theme in the Magento system are the following:\n\n1. Create a directory for the theme under `app/design/frontend//`.\n2. Add a declaration file `theme.xml` and optionally create `etc` directory and create a file named `view.xml` to the theme directory.\n3. Add a `composer.json` file.\n4. Add `registration.php`.\n3. Create directories for CSS, JavaScript, images, and fonts.\n4. Configure your theme in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} panel.\n\nRecommended reading\n\n* Checklist of modules\n* Static view files processing\n\n\n\n## Create a theme directory {#layout_theme_how-to_dirs}\n\nTo create the directory for your theme:\n\n1.\tGo to `/app/design/frontend`.\n\n3.\tCreate a new directory named according to your vendor name: `/app/design/frontend/`.\n\n4.\tUnder the vendor directory, create a directory named according to your theme.\n\n\napp/design/frontend/\n├──&nbsp;&lt;Vendor&gt;/\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──...&lt;theme&gt;/\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;...\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;...\n\n\nThe folder name conventionally matches naming used in the theme's code: any alphanumeric set of characters, as the vendor sees fit, is acceptable. This convention is merely a recommendation, so nothing prevents naming this directory in another way.\n\n## Declare your theme {#fedg_create_theme_how-to_declare}\n\nAfter you create a directory for your theme, you must create `theme.xml` containing at least the theme name and the parent theme name (if the theme inherits from one). Optionally you can specify where the theme preview image is stored.\n\n1. Add or copy from an existing `theme.xml` to your theme directory `app/design/frontend//`\n\n2. Configure it using the following example:\n\n{% highlight xml %}\n\n     New theme \n     Magento/blank \n     \n         media/preview.jpg \n     \n \n{% endhighlight %}\n\nIf you change the theme title or parent theme information in `theme.xml` after a theme was already [registered](#register_theme), you need to open or reload any {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} page for your changes to be saved in the database.\n\n## Make your theme a Composer package (optional) {#fedg_create_theme_composer}\n\n\nMagento default themes are distributed as Composer packages.\n\nTo distribute your theme as a package, add a `composer.json` file to the theme directory and register the package on a packaging server. A default public packaging server is https://packagist.org/.\n\n`composer.json` provides theme dependency information.\n\nExample of a theme `composer.json`:\n\n{% highlight json %}\n{\n    \"name\": \"magento/theme-frontend-luma\",\n    \"description\": \"N/A\",\n    \"require\": {\n        \"php\": \"~5.5.0|~5.6.0|~7.0.0\",\n        \"magento/theme-frontend-blank\": \"100.0.*\",\n        \"magento/framework\": \"100.0.*\"\n    },\n    \"type\": \"magento2-theme\",\n    \"version\": \"100.0.1\",\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ],\n    \"autoload\": {\n        \"files\": [\n            \"registration.php\"\n        ]\n    }\n}\n{% endhighlight %}\n\nYou can find details about the Composer integration in the Magento system in Composer integration.\n\n## Add registration.php {#fedg_create_theme_reg}\n\nTo register your theme in the system, in your theme directory add a `registration.php` file with the following content:\n\n{% highlight php %}\n\n/',\n    __DIR__\n);\n\n{% endhighlight %}\n\nWhere `` is your vendor name, `` is the theme code.\n\nFor illustration, see the registration.php file of the Magento Luma theme.\n\n\n## Configure images {#fedg_create_theme_how-to-images}\n\nProduct image sizes and other properties used on the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} are configured in a `view.xml` configuration file. It is required for a theme, but is optional if exists in the parent theme.\n\nIf the product image sizes of your theme differ from those of the parent theme, or if your theme does not inherit from any theme, add `view.xml` using the following steps:\n\n1.\tLog in to your Magento server as a user with permissions to create directories and files in the Magento installation directory. (Typically, this is the the Magento file system owner.)\n\n1.\tCreate the `etc` directory in your theme folder\n\n2.\tCopy `view.xml` from the `etc` directory of an existing theme (for example, from the Blank theme) to your theme's `etc` directory.\n\n3.\tConfigure all storefront product image sizes in `view.xml`.\nFor example, you can make the {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %} grid view product images square by specifying a size of 250 x 250 pixels, here is how the corresponding configuration would look like:\n\n{% highlight XML%}\n...\n    \n        250\n        250\n    \n...\n{% endhighlight XML%}\n\nFor details about images configuration in `view.xml`, see the Configure images properties for a theme topic.\n\n## Create directories for static files {#fedg_theme_how-to_static}\n\nYour theme will likely contain several types of static files: styles, fonts, {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} and images.\nEach type should be stored in a separate sub-directory of `web` in your theme folder:\n\napp/design/&lt;area&gt;/&lt;Vendor&gt;/&lt;theme&gt;/\n├──&nbsp;web/\n│&nbsp;├──&nbsp;css/\n│&nbsp;│&nbsp;├──&nbsp;source/&nbsp;\n│&nbsp;├──&nbsp;fonts/\n│&nbsp;├──&nbsp;images/\n│&nbsp;├──&nbsp;js/\n\n\nIn the .../&lt;theme&gt;/web/images you store the general theme related static files. For example, a theme logo is stored in ...&lt;theme&gt;/web/images.\nIt is likely that your theme will also contain module-specific files, which are stored in the corresponding sub-directories, like .../&lt;theme&gt;/&lt;Namespace_Module&gt;/web/css and similar. Managing the module-specific theme files is discussed in the following sections of this Guide.\n\n\n\n\n\nDuring theme development, when you change any files stored here, you need to clear pub/static (preserving the `.htaccess` file in place) and var/view_preprocessed directories, and then reload the pages. Otherwise the old versions of files are displayed on the storefront.\n\n\n\n\n\n## Your theme directory structure now {#fedg_theme_how-to_structure}\n\nAt this point your theme file structure looks as follows:\n\n\napp/design/frontend/&lt;Vendor&gt;/\n├──&nbsp;&lt;theme&gt;/\n│&nbsp;&nbsp;&nbsp;├──&nbsp;etc/\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;view.xml\n│&nbsp;&nbsp;&nbsp;├──&nbsp;web/\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;images\n│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;│&nbsp;&nbsp;&nbsp;├──&nbsp;logo.svg\n│&nbsp;&nbsp;&nbsp;├──&nbsp;registration.php\n│&nbsp;&nbsp;&nbsp;├──&nbsp;theme.xml\n│&nbsp;&nbsp;&nbsp;├──&nbsp;composer.json\n\n\n\n\n## Theme logo {#theme_logo}\n\nIn the Magento application, the default format and name of a logo image is `logo.svg`. When you put a `logo.svg` image in the conventional location, which is `/web/images` directory, it is automatically recognized as theme logo. It is displayed in your store page header once the theme is applied.\n\nIn your custom theme, you can use a logo file with a different name and format, but you might need to declare it.\n\nThe necessity of declaration depends on whether your theme has a parent theme and its logo image. The following cases are possible:\n\n\nYour theme does not have a parent theme:\n\n if your logo image name and format is default, logo.svg, there is no need to declare it; \nif your logo image name or format is not default, you need to declare it in layout.\n\n\nYour theme has a parent theme:\n\nif your theme logo image has the same name and format as the parent's theme logo, there is no need to declare it;\nif your logo image has different name or format, declare it in {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %}.\n\n\n\n\n## Declaring theme logo {#logo_declare}\n\nTo declare a theme logo, add an extending `/Magento_Theme/layout/default.xml` layout.\n\nFor example, if your logo file is `my_logo.png` sized 300x300px, you need to declare it as follows:  \n\n{% highlight xml %}\n\n    \n        \n            \n                images/my_logo.png\n                300\n                300\n            \n        \n    \n\t\t\n{% endhighlight %}\n\nDeclaring the logo size is optional.\n\nTo learn more about theme layouts, refer to the Layout section of this guide.\n\n\n## What's next {#next}\n\n### Theme registration {#register_theme}\nOnce you open the Magento Admin (or reload any  Magento Admin page) having added the theme files to the files system, your theme gets registered and added to the database.\n\n### Applying a theme\nFor information on how to apply the theme for the storefront, see the [Apply and configure a theme in Admin]({{page.baseurl}}frontend-dev-guide/themes/theme-apply.html) topic.\n\n## See also\n\n * [Uninstall a theme]({{site.gdeurl}}install-gde/install/cli/install-cli-theme-uninstall.html)\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-create.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-general-html": {
      "title": "Themes",
      "content": "The Themes chapter provides all information, including theoretical concepts and practical references, a {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}frontend{% endglossarytooltip %} developer might need to efficiently create a new {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} for {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} or {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} in Magento application.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-general.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-images-html": {
      "title": "Configure images properties for a theme",
      "content": "## What's in this topic ##\n\nThe properties of product images used on the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} are stored in the `view.xml` configuration file. This topic provides all details about what properties are available and how to configure them.\n\nThe properties for the images displayed on the product pages are defined by the gallery widget options. The options of the widget can be configured in the {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} `view.xml` as well. For more details, view the [Gallery widget]({{page.baseurl}}javascript-dev-guide/widgets/widget_gallery.html) topic.\n\nConfigure image properties in view.xml\n\nThe conventional location of `view.xml` for a theme is:\n{% raw %}\n\t/etc/view.xml\n{% endraw %}\n\nFor example, here is the `view.xml` of the Magento Blank theme: app/design/frontend/Magento/blank/etc/view.xml.\n\n\nIn `view.xml`, image properties are configured in the scope of `` element:\n\n{% highlight xml %}\n\n...\n\n{% endhighlight xml %}\n\nImage properties are configured for each image type defined by the `id` and `type` attributes of the `` element:\n\n{% highlight xml %}\n\n\t\n\t...\n\t\n\n{% endhighlight xml %}\n\n\nThe following table describes the attributes in detail:\n\n  \n    \n      Attribute\n      Type\n      Description\n    \n    \n      \n        \n          id\n        \n      \n      \n        string\n      \n      \n        Image identifier. Unique in the scope of theme. \nCan have any value, but in out-of-the- box Magento themes id's are meaningful and describe the location of an image. For example, the id value for images of {% glossarytooltip 9eb0e3fa-cb69-4e21-9ad0-cabeb98afcda %}cross-sell{% endglossarytooltip %} products displayed in a shopping cart is cart_cross_sell_products. id's are used in .phtml templates for defining the type and properties of images displayed in each particular location on a particular page.\n      \n    \n    \n      \n        \n          type\n        \n      \n      \n        string\n      \n      \n        The type of the images defined by the specified id. Allowed values:\n\nimage - corresponds to the Base Image role in the Magento Admin\nsmall_image - corresponds to the Small Image role in the Magento Admin\nswatch_image - corresponds to the Swatch Image role in the Magento Admin\nswatch_thumb - corresponds to the Swatch Image role in the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}. \nthumbnail - corresponds to the Thumbnail Image role in the Magento Admin\n\n\n      \n    \n\n\n\nThe following picture illustrates how image roles for product images are specified in the Magento Admin:\n\n\nImage properties are defined by the corresponding elements, for example:\n\n{% highlight xml %}\n\n    \n        100  \n        100 \n    \n\n{% endhighlight xml %}\n\n\n\nThe following table contains the list of all properties which can be configured:\n\n  \n    \n      \n        Element\n      \n      \n        Type\n      \n      \n        Description\n      \n      \n        Required\n      \n    \n    \n      \n        width\n      \n      \n        integer\n      \n      \n        Image width in pixels.\n      \n      \n        Optional\n      \n    \n    \n      \n        height\n      \n      \n        integer\n      \n      \n        Image height in pixels.\n      \n      \n        Optional\n      \n    \n    \n      \n        constrain\n      \n      \n        boolean\n      \n      \n        If set to true, images that are smaller than\n        required by the configuration, are not enlarged. Default\n        value: true.\n      \n      \n        Optional\n      \n    \n    \n      \n        aspect_ratio\n      \n      \n        boolean\n      \n      \n        If set to true, proportions of images are not\n        changed even if required by the configuration. Default\n        value: true.\n      \n      \n        Optional\n      \n    \n    \n      \n        frame\n      \n      \n        boolean\n      \n      \n        If set to true, images are not cropped.\n        Default value: true. Applied only if\n        aspect_ratio is set to true.\n      \n      \n        Optional\n      \n    \n    \n      \n        transparency\n      \n      \n        boolean\n      \n      \n        If set to true, the transparent background of\n        images is saved. If is set to false, images\n        have the white background (by default). You can set the\n        color for the background using the background\n        parameter. Default value: true.\n      \n      \n        Optional\n      \n    \n    \n      \n        background\n      \n      \n        string\n      \n      \n        The color for the images background. Not applied to images\n        with transparency, if transparency is set to\n        true. Format: \"[, , ]\", e.g.: \"[255,\n        255, 255]\".\n      \n      \n        Optional\n      \n    \n  \n\n\n#### Resize catalog images\nGenerally, product images are cached while saving the product. However, the `magento catalog:images:resize` command enables you to resize all images for display on your storefront. Situations where this could be necessary might be:\n\n* After you import products, which might have images of various sizes\n* If images were resized or deleted manually from {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} \n\nEach image assigned to a product must be resized in accordance with image {% glossarytooltip 3f0f2ef1-ad38-41c6-bd1e-390daaa71d76 %}metadata{% endglossarytooltip %} defined in a module's `view.xml` configuration file. After resizing an image, its resized copy is stored in the cache (`/pub/media/catalog/product/cache` directory). Magento serves storefront images from cache.\n\nCommand usage:\n\n`php /bin/magento catalog:images:resize`\n\nThis command has no arguments or options. A progress indicator displays while the command runs.\n\nThe message `Product images resized successfully` displays to confirm the command succeeded.\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-images.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-inherit-html": {
      "title": "Theme inheritance",
      "content": "What's in this topic\n\n{% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}Theme{% endglossarytooltip %} inheritance enables you to easily extend themes and minimize the maintenance efforts. You can use an existing theme as a basis for customizations, or minor store design updates, like holidays decoration. Rather than copy extensive theme files and modify what you want to change, you can add overriding and extending files.\n\nThe level of theme inheritance is not limited.\n\nTheme inheritance is based on the fallback mechanism, which guarantees that if a view file is not found in the current theme, the system searches in the ancestor themes, {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} view files or {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %}.\n\nThe fallback order is slightly different for static assets (CSS, JavaScript, fonts and images) and other theme files, layouts and templates. The article describes the fallback for each type of theme files, and provides an overview of how to override ancestor themes and module designs.\n\nFor comprehensive information about developing theme components, see\nsubsequent chapters in this guide.\n\n\n## Set a parent theme\n\nA parent theme is specified in the child theme `theme.xml` declaration file.\n\nExample:\nthe Orange theme by OrangeCo inherits from the Magento Blank theme. The inheritance is declared in `app/design/frontend/OrangeCo/orange/theme.xml` as follows:\n\n{% highlight xml %}\n\n     Orange\n     Magento/blank\n     \n         media/preview.jpg\n     \n \n{% endhighlight xml %}\n\n\n  A parent and a child theme can belong to different vendors. For example, your custom theme can inherit from the Magento Blank theme.\n\n\n## Override view.xml file\n\nIf your theme does not contain a `view.xml` configuration file, it will be inherited from the parent theme. If you add the `/etc/view.xml` file in your theme, it overrides the parent's file.\n\n## Override static assets {#theme-inherit-static}\n\nStatic assets, or static view files, are styles, JavaScript, images, and fonts.\n\nTo customize static view files defined in the parent theme, module view, or library files, you can override them by adding a file with the same name in the relevant location according to the fallback schemes described further. This also refers to the `.less` files, which technically are not static assets.\n\nThe particular directories, where the system searches in the course of the fallback, depend on whether module context is known for file. Following are the descriptions of both options.\n\nIf module context is not defined for a file:\n\n1. Current theme {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} for a specific locale (the locale set for the storefront): `/web/i18n/`\n2. Current theme static files: `/web/`\n2. Ancestor's static files, recursively, until a theme with no parent is reached:\n- `/web/i18n/`\n- `/web/`\n3. Library static view files: `lib/web/`\n\nIf module context is defined for a file:\n\n1. Current theme and current locale module static files:`/web/i18n//_`\n2. Current theme module static files `/_/web/`. Example: `app/design/frontend/OrangeCorp/orange/Magento_Catalog/web/`\n3. Ancestor themes module static files, recursively, until a theme with no ancestor is reached:\n- `/web/i18n//_`\n- `/_/web/`\n3. Module static view files for the `frontend` area: `/view/frontend/web/`\n4. Module static view files for the `base` area: `/view/base/web/`\n\n\nExample\n\nA company named OrangeCo created a theme named Orange. The theme files are located in `app/design/frontend/OrangeCo/orange`.\nOrange inherits from the Magento Blank theme.\n\nLet's imagine OrangeCo needs to add some winter holidays decor. So it creates a new `orange_winter` theme, which inherits from Orange. The theme is located in `app/design/frontend/OrangeCo/orange_winter`.\n\n\nIn the Orange theme there is a footer background image located at `app/design/frontend/OrangeCo/orange/web/images/background.jpg`.\n\n\n\nOrangeCo wants it to be replaced with a holiday one, so it places a new background image with exactly the same name and {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} in `app/design/frontend/OrangeCo/orange_winter/web/images/background.jpg`\n\nOnce the Orange Winter theme is [applied]({{page.baseurl}}frontend-dev-guide/themes/theme-apply.html), the new holiday image overrides the one from Orange, so on {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} the holiday background is visible.\n\n\n\n\n## Override templates {#theme-inherit-templates}\n\nThe fallback scheme for templates is the following (module context is always known for them):\n\n1. Current theme templates: `/_/templates`\n2. Ancestors themes templates, recursively, until a theme with no ancestor is reached: `/_/templates`\n3. Module templates: `/view/frontend/templates`\n\n\nSo if you need to customize a certain template, you need to create an overriding one with the same name in the `../templates/` directory in the theme module files. Where `` is the path to the original template.\n\nFor example, if you must override the `/view/frontend/templates/category/widget/link/link_block.phtml` template, the `` is `category/widget/link/`\n\nExample\nBy default, according to the module template, in the mini {% glossarytooltip c7ecb18d-cefe-452d-83e2-3c4d5e355db9 %}shopping cart{% endglossarytooltip %} products are listed under the Go to {% glossarytooltip 278c3ce0-cd4c-4ffc-a098-695d94d73bde %}Checkout{% endglossarytooltip %} button:\n\n\nThe order is defined in the `/view/frontend/templates/cart/minicart.phtml` module template. The Blank theme does not override this template.\nOrangeCo decided they want the product list to be displayed before the Go to Checkout button.\nTo do this, they need to add an overriding template for the corresponding module in the Orange theme folder:\n`app/design/frontend/OrangeCo/orange/Magento_Checkout/templates/cart/minicart.phtml`\nNote, that the path to the template inside the `templates` directory in the theme corresponds to that in the module.\nHaving changed the order or elements in the templates, OrangeCo got the minicart look like following:\n\nYou can find out what exactly code changes are required to perform this and other tasks in the Illustration of customizing templates topic.\n\n## Extend layouts {#theme-inherit-layout}\n\nThe layouts processing mechanism does not involve fallback. The system collects {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} files in the following order:\n\n1. Current theme layouts: `/_/layout/`\n2. Ancestor themes layouts, starting from the  most distant ancestor, recursively until a theme with no parent is reached: `/_/layout/`\n3. Module layouts for the `frontend` area: `/view/frontend/layout/`\n4. Module layouts for the `base` area: `/view/base/layout/`\n\nUnlike templates or images, layout can be not only overridden, but also extended. And the recommended way to customize layout is to extend it by creating theme extending layout files.\n\n\nTo add an extending layout file:\n\n* Put your custom layout file in the `/_/layout/` directory.\n\nExample\n\nOrangeCo decided they should remove the \"Report bugs\" link from the footer, defined in `/view/frontend/layout/default.xml`\nTo do this, they added an extending layout in `app/design/frontend/OrangeCo/orange/Magento_Theme/layout/default.xml` :\n\n{%highlight xml%}\n\n    \n        \n    \n\n{%endhighlight xml%}\n\n\nFor more information about extending layout refer to the Extend a layout article.\n\n## Override layouts {#theme-inherit-layout-over}\n\nThough overriding layouts is not recommended, it is still possible, and might be a solution for certain customization tasks.\nTo override the instructions from an ancestor theme layout file:\n\n* Create a layout file with the same name in the `/_/layout/override/theme//` directory.\n\nTo override module {% glossarytooltip bcbc9bf8-3251-4b3c-a802-07417770af3b %}layout instructions{% endglossarytooltip %} (base layout):\n\n* Create a layout file with the same name in the `/_/layout/override/base` directory.\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-inherit.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-install-html": {
      "title": "Install a third-party storefront theme",
      "content": "## What's in this topic\n\nThis topic describes how to install a third-party {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} for a Magento 2 store.\n\nTo install a theme, you need to add its code to your Magento 2 instance code base, and then register it in the database. The way a theme is distributed determines how to do this:\n\n- if a theme is just a set of files, for example an archive, add the theme manually.\n- if a theme is a {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}composer{% endglossarytooltip %} package, install it using composer.\n- if a theme is distributed as an extension, use the **Web Setup Wizard** in {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}.\n\nThe following sections contain more information about each installation flow.\n\n## Prerequisites\n\n[Set]({{page.baseurl}}config-guide/cli/config-cli-subcommands-mode.html) your Magento application to the developer or default [mode]({{page.baseurl}}config-guide/bootstrap/magento-modes.html).\n\n## Install a theme manually\n\nTo install a theme manually:\n\n1. Make sure that the directory structure you are copying is `/`. And all the [theme files]({{page.baseurl}}frontend-dev-guide/themes/theme-structure.html) are in the `` directory.\n\n2. Copy this directory to the `/app/design/frontend` directory.\n\n## Install a theme as composer package\n\nTo install the theme as composer package, follow the instructions in the [Install, manage, and upgrade modules]({{page.baseurl}}cloud/howtos/install-components.html) topic.\n\n## Install a theme as an extension\n\nIf a theme is distributed on [Magento Marketplace](https://marketplace.magento.com/), install it with **Web Setup Wizard**. For details, see [Install the Extension](http://docs.magento.com/marketplace/user_guide/quick-tour/install-extension.html).\n\n## Register a theme\n\nAfter you create or install a theme, open the Magento {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} or reload any Magento Admin page. This way the theme gets registered and added to the database.\n\nTo make sure the theme is registered, in the Magento Admin navigate to **Content** > **Design** > **Themes**. If a theme is registered, it is displayed in the list of available themes.\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-install.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-overview-html": {
      "title": "Themes overview",
      "content": "## Themes overview\nA *theme* is a component of Magento application which provides a consistent look and feel (visual design) for entire application area (for example, {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} or Magento admin) using a combination of custom templates, layouts, styles or images.\n\nThemes are designed to override or customize view layer resources, provided initially by modules or libraries.\n\nThemes are implemented by different vendors (frontend developers) and intended to be distributed as additional packages for Magento system similar to other components.\n\nOut-of-the-box Magento application provides two design themes: Luma, as a demonstration theme, and Blank as a basis for custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} creation.\n\nThere are no restrictions on using the demonstration Luma theme for a live store, but if you want to customize the default design, you need to create a new theme. We strongly recommend not to change the default Luma and Blank theme files, because if you do edit the default files, your changes can be overwritten by the new version of the default files during upgrades.\n\nYour new theme can be a standalone new theme, or it can inherit from the default or any other existing one. The theme inheritance concept implemented in the Magento system allows you to change only certain theme files, and inherit other required files from a parent theme. \n\n## Themes flow\n\n![Themes flow]({{site.baseurl}}common/images/fdg/create_install_theme.png)\n\n\n\n   ",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-overview.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-structure-html": {
      "title": "Magento theme structure",
      "content": "What's in this topic\nA design theme is an important part of the Magento application. This topic describes the file structure of a Magento {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %}.\n\nMagento theme location\n{% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}Storefront{% endglossarytooltip %} themes are conventionally located under `app/design/frontend//`. Though technically they can reside in other directories. For example Magento built-in themes can be located under `vendor/magento/theme-frontend-` when a Magento instance is deployed from the {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} repository.\n\nEach theme must be stored in a separate directory:\n\napp/design/frontend/&lt;Vendor&gt;/\n├──&nbsp;&lt;theme1&gt;\n├──&nbsp;&lt;theme2&gt;/\n├──&nbsp;&lt;theme3&gt;\n├--...\n\n\nTheme components\nThe structure of a Magento theme directory typically would be like following:\n\n&lt;theme_dir&gt;/\n├──&nbsp;&lt;Vendor&gt;_&lt;Module&gt;/&nbsp;\n│\t├──&nbsp;web/\n│\t│\t├──&nbsp;css/\n│\t│\t│\t├──&nbsp;source/\n│\t├──&nbsp;layout/\n│\t│\t├──&nbsp;override/\n│\t├──&nbsp;templates/\n├──&nbsp;etc/\n├──&nbsp;i18n/&nbsp;\n├──&nbsp;media/\n├──&nbsp;web/\n│\t├──&nbsp;css/\n│\t│\t├──&nbsp;source/&nbsp;\n│\t├──&nbsp;fonts/\n│\t├──&nbsp;images/\n│\t├──&nbsp;js/\n├──&nbsp;composer.json&nbsp;\n├──&nbsp;registration.php&nbsp;\n├──&nbsp;theme.xml&nbsp;\n\nLet's have a closer look at each particular sub-directory.\n\n\n  The directories and files structure described below is the most extended one. It may not coincide with the structure of your store.\n\n\n  \n    \n      Directory\n      Required\n      Description\n    \n    \n      \n        \n          /&lt;Vendor&gt;_&lt;Module&gt;\n        \n      \n      \n        optional\n      \n      \n          Module-specific styles, layouts, and templates.\n      \n    \n    \n      \n        /&lt;Vendor&gt;_&lt;Module&gt;/web/css/source\n      \n      \n        optional\n      \n      \n          Module-specific styles (.css and/or .less files). General styles for the module are in the _module.less file, and styles for widgets are in _widgets.less.\n      \n    \n    \n      \n        /&lt;Vendor&gt;_&lt;Module&gt;/layout\n      \n      \n        optional\n      \n      \n        Layout files which extend the default module or parent theme layouts. \n      \n    \n    \n      \n        /&lt;Vendor&gt;_&lt;Module&gt;/layout/override/base\n      \n      \n        optional\n      \n      \n        Layouts that override the default module layouts.\n      \n    \n    \n      \n        /&lt;Vendor&gt;_&lt;Module&gt;/layout/override/&lt;parent_theme&gt;\n      \n      optional\n      \n        Layouts that override the parent theme layouts for the module.\n      \n    \n    \n      \n        /&lt;Vendor&gt;_&lt;Module&gt;/templates\n      \n      \n        optional\n      \n      \n        This directory contains theme templates which override the default module templates or parent theme templates for this module. Custom templates are also stored in this directory.\n      \n    \n    \n      \n        \n          /etc/view.xml\n        \n      \n      required for a theme, but optional if exists in the parent theme\n      \n        This file contains images configuration for all storefront product images and thumbnails.\n      \n    \n    \n      \n        /i18n\n      \n      optional\n      .csv files with translations.\n    \n    \n      \n        /media\n      \n      required\n      \n        This directory contains a theme preview (a screenshot of your theme).\n      \n    \n    \n      \n        /web\n      \n      \n        optional\n      \n      Static files that can be loaded directly from the frontend.\n    \n    \n      \n        /web/css/source\n      \n      \n        optional\n      \n      This directory contains theme\n        less\n         configuration files that invoke mixins for global elements from the Magento UI library, and\n        theme.less\n         file which overrides the default variables values. \n      \n    \n    \n      \n        /web/css/source/lib\n      \n      \n        optional\n      \n      \n        View files that override the UI library files stored in lib/web/css/source/lib\n      \n    \n    \n      \n        /web/fonts\n      \n      \n        optional\n      \n      \n        Theme fonts.\n      \n    \n    \n      \n        /web/images\n      \n      \n        optional\n      \n      \n        Images that are used in this theme.\n      \n    \n    \n      \n        /web/js\n      \n      \n        optional\n      \n      \n        Theme JavaScript files.\n      \n    \n    \n      \n        \n          /composer.json\n        \n      \n      optional\n      \n        Describes the theme dependencies and some meta-information. Will be here if your theme is a Composer package.\n      \n    \n    \n      \n        /registration.php\n      \n      required\n      \n        Required to register your theme in the system.\n      \n    \n    \n      \n        /theme.xml\n      \n      required\n      \n        The file is mandatory as it declares a theme as a system component. It contains the basic meta-information, like the theme name and the parent theme name, if the theme is inherited from an existing theme. The file is used by the Magento system to recognize the theme.\n      \n    \n  \n\n\nTheme files\n\nApart from the configuration file and theme {% glossarytooltip 3f0f2ef1-ad38-41c6-bd1e-390daaa71d76 %}metadata{% endglossarytooltip %} file, all theme files fall into the following two categories:\n\n* Static view files\n* Dynamic view files\n\nStatic view files\nA set of theme files that are returned by the server to a browser as is, without any processing, are called the *static files* of a theme.\n\n{% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}Static files{% endglossarytooltip %} can be located in a theme directory as follows:\n\n&lt;theme_dir&gt;/\n├──&nbsp;media/\n├──&nbsp;web\n│\t├──&nbsp;css/&nbsp;(except&nbsp;the&nbsp;&quot;source&quot;&nbsp;sub-directory)\n│\t├──&nbsp;fonts/\n│\t├──&nbsp;images/\n│\t├──&nbsp;js/\n\nThe key difference between static files and other theme files is that static files appear on a web page as references to the files, while other theme files take part in the page generation, but are not explicitly referenced on a web page as files.\n\nStatic view files that can be accessed by a direct link from the store front, are distinguished as public theme files.\n\n\n  To be actually accessible for browsers public static files are published to the /pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;language&gt;/css/ directory.\n\n\nDynamic view files\nView files that are processed or executed by the server in order to provide result to the client. These are: `.less` files, templates, and layouts.\n\nDynamic view files are located in a theme directory as follows:\n\n&lt;theme_dir&gt;/\n├──&nbsp;Magento_&lt;module&gt;/&nbsp;\n│\t├──&nbsp;web/\n│\t│\t├──&nbsp;css/\n│\t│\t│\t├──&nbsp;source/\n│\t├──&nbsp;layout/\n│\t│\t├──&nbsp;override/\n│\t├──&nbsp;templates/\n├──&nbsp;web/\n│\t├──&nbsp;css/\n│\t│\t├──&nbsp;source/\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-structure.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-theme-troubleshooting-html": {
      "title": "Theme troubleshooting",
      "content": "This information helps you troubleshoot issues with themes added to your {{site.data.var.ece}} sites and stores.\n\n## Lost images on deployment {#images}\nWhen using a theme in your stores that resizes images, the images may not display or disappear from catalog pages when deployed. This may occur due to loading the images from the cache. If this happens, you can use Magento command to regenerate the image cache and properly display the images.\n\nThis issue can occur in all environments during any deployment.\n\nTo resolve, you need the SSH information and store URL available through the [Project Web Interface]({{page.baseurl}}cloud/project/projects.html) or your noted access.\n\n1. Open a terminal application.\n2. [SSH]({{page.baseurl}}cloud/env/environments-ssh.html) into the environment experiencing the issue.\n3. Enter the following command to regenerate the image cache:\n\n        php bin/magento catalog:images:resize\n4. Test the catagory pages through the store URL.\n\n## Locate blocks in themes that make them uncacheable {#uncache}\nWhen debugging your themes, you may need to locate blocks in themes that make the pages uncacheable. Use the following command to locate these blocks.\n\n    find ./app -type f -name \"*.xml\" | xargs grep -l cacheable | xargs grep -l false\n",
      "url": "/guides/v2.0/cloud/trouble/theme-troubleshooting.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-theme-ui-lib-html": {
      "title": "Magento UI library",
      "content": "What's in this topic\n\nThe Magento UI {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} is a flexible LESS-based {% glossarytooltip b00459e5-a793-44dd-98d5-852ab33fc344 %}frontend{% endglossarytooltip %} library designed to assist Magento {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} developers. It employs a set of mixins for base elements to ease frontend theme development and customization. \n\nThis topic describes how the library is organized, and how to use it. \n\n## Components provided by the UI library {#library_elements}\nThe Magento UI library provides the ability to customize and reuse the following user interface elements and properties:\n\n*\tactions-toolbar\n*\tbreadcrumbs\n*\tbuttons\n*\tdrop-downs\n*\tforms\n*\ticons\n*\t{% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %}\n*\tloaders\n*\tmessages\n*\tpagination\n*\tpopups\n*\tratings\n*\tsections\n*\ttabs and accordions\n*\ttables\n*\ttooltips\n*\ttypography\n*\tlist of theme variables\n\nThe following illustration shows a {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} product page containing some of the preceding elements:\n\n\n\n\n\n## Mixin location {#fedg_using-ui-lib_mixins}\n\n You can find the Magento UI library under lib/web/css. Library source `.less` files are stored under the `source` directory, each file contains mixins for configuring a certain element, and in most cases the element coincides with the file name:\n\nlib/web\n    ├── css/\n    │    ├── docs/ (Library documentation)\n    │    ├── source/\n    │    │    ├── lib/ (Library source files)\n    |    |    |    ├── variables/ (Predefined variables for each mixin)\n    │    │    │    ├── _actions-toolbar.less\n    │    │    │    ├── _breadcrumbs.less\n    │    │    │    ├── _buttons.less\n    │    │    │    ├── _dropdowns.less\n    │    │    │    ├── _forms.less\n    |    |    |    ├── _grids.less\n    │    │    │    ├── _icons.less\n    │    │    │    ├── _layout.less\n    │    │    │    ├── _lib.less\n    │    │    │    ├── _loaders.less\n    │    │    │    ├── _messages.less\n    │    │    │    ├── _navigation.less\n    │    │    │    ├── _pages.less\n    │    │    │    ├── _popups.less\n    │    │    │    ├── _rating.less\n    │    │    │    ├── _resets.less\n    │    │    │    ├── _responsive.less\n    │    │    │    ├── _sections.less\n    │    │    │    ├── _tables.less\n    │    │    │    ├── _tooltips.less\n    │    │    │    ├── _typography.less\n    │    │    │    ├── _utilities.less\n    │    │    │    └── _variables.less\n    │    │    └── _extend.less\n    │    │    └── _theme.less\n    │    │    └── _variables.less\n    │    └── styles.less\n    ├── fonts/\n    │    └── Blank-Theme-Icons/ (Library custom icons font)\n    ├── images/\n    │    └── blank-theme-icons.png (Library icons sprite)\n    └── jquery/ (Library javascript files)\n\n\n## Predefined variables {#fedg_using-ui-lib_predef-vars}\n\nIf your theme inherits from any Magento out-of-the-box theme, for example Blank, you can easily customize any element of a store page without changing any {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} code or templates. Customization can be performed by simply changing in your theme the values of the predefined variables used in the UI library or parent theme mixins.\n\nThe complete list of these variables and their default values are stored in lib/web/css/source/lib/variables. This directory contains a set of files, corresponding to the set of UI library elements, and each of the files lists element-specific variables. For example, lib/web/css/source/lib/variables/_breadcrumbs.less contains variables used in the `breadcrumbs()` {% glossarytooltip 1a305bdb-9be8-44aa-adad-98758821d6a7 %}mixin{% endglossarytooltip %}.\n\nTo change the default library variables values, specify the new values for the required variables in the &lt;theme_dir&gt;/web/css/source/_theme.less file.\n\n\nPlease mind, that your &lt;theme_dir&gt;/web/css/source/_theme.less file overrides _theme.less of the parent theme (if your theme has a parent). So if you want to inherit the parent theme's variable values additionally to your changes, add the content of parent’s _theme.less to your file as well.\n\n\nThe following figure shows the product page shown earlier in this topic, after a custom theme was applied. The theme customized Blank by redefining variables only.\n\n\n\n## Your custom variables {#fedg_using-ui-lib_vars}\n\nWhen naming custom variables, please follow the [Magento naming convention for the LESS variables]({{page.baseurl}}coding-standards/code-standard-less.html#naming).\n\n## Using mixins {#fedg_using-ui-lib_customize}\n\nYou can use a mixin with default variables values, or you can redefine them when calling a mixin. The following paragraphs describe both ways to call a mixin.\n\nTo use a mixin with default values, call the mixin without specifying any parameters. For example:\n\n.breadcrumbs {\n    .breadcrumbs();\n}\n\nTo call a mixin with parameter values different from default, set these values when calling the mixin, like in the following example:\n\n.example-button {\n    .button(\n        @_button-padding: @button-padding,\n        @_button-color: #fff,\n        @_button-color-hover: #ccc\n    );\n}\n\nVariables starting with `@_` are private mixin variables used only in this mixin. Variables starting with `@` (without the underscore) are global, and are listed in lib/web/css/source/lib/variables/.\n\n## UI library documentation {#docs}\n\nYou can find detailed information about the Magento UI library in the documentation provided together with the code:\n\n* lib/web/css/docs/source/README.md: describes the Magento UI library structure, naming conventions, and code style.\n* lib/web/css/docs: contains a set of `.html` files with detailed information about the library mixins. Each file is named after the mixin it describes, and contains detailed mixin description and navigation controls to access documentation for other mixins. The documentation is available in a convenient {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} view in the following location in your Magento installation: pub/static/frontend/Magento/blank/en_US/css/docs/index.html\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/theme-ui-lib.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-themes-theme-uninstall-html": {
      "title": "Uninstall a storefront theme",
      "content": "## What's in this topic\n\nThis topic describes how to uninstall a {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} in Magento 2.\n\nThe way a theme should be uninstalled is defined by two factors:\n\n* the way the theme was added: manually added (installed or created), installed as {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}composer{% endglossarytooltip %} package or as an {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %}.\n* the way Magento was installed: [using the source files from Github]({{page.baseurl}}install-gde/install/cli/install-cli-sample-data-clone.html) or [using Composer]({{page.baseurl}}install-gde/install/cli/install-cli-sample-data-composer.html).\n\nThe following sections describe the flow for uninstalling themes in each case.\n\n## Prerequisites\n\n1. [Set your Magento application to the developer or default mode]({{page.baseurl}}config-guide/cli/config-cli-subcommands-mode.html).\n2. Make sure that the theme is not applied on the storefront. To do this, in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} panel navigate to **STORES** > **Configuration**>**Design** and make sure that your custom theme is not applied for any {% glossarytooltip ca5a9ff1-8182-4fc4-a34b-9b3f831dbf3f %}store view{% endglossarytooltip %}.\n2. Make sure that the theme is not defined as a parent for any registered theme. To do this, in the Admin panel, navigate to **Content** > **Design** > **Themes**. Make sure that your theme is not mentioned in the **Parent Theme** column. If it is mentioned, you need to uninstall the child theme first.\n\n\n## Uninstall a manually added theme\n\nIf you created or manually installed the theme, it does not matter how you installed Magento.\n\nTo uninstall a manually added theme:\n\n1. Navigate to the vendor directory where the theme was installed. This directory should be: `/app/design/frontend/`.\n2. Remove the theme directory.\n3. Remove the theme record from database. If you are using MySQL, run the following command to do this:\n\n```\nmysql -u  -p -e \"delete from .theme where theme_path ='/' AND area ='frontend' limit 1\"\n```\nWhere:\n\n- ``: your Magento database user name\n- ``: your Magento database name\n- `/`: relative path to the theme directory\n\n## Uninstall a theme package\n\nThe flow for uninstalling a theme that is {% glossarytooltip b57038ca-7906-4fce-a00f-d614b81d5301 %}Composer package{% endglossarytooltip %} is different, depending on the way your Magento instance was installed.  \n\n### Uninstall a theme package if Magento was installed using Composer\n\nIf both the theme and the Magento instance were installed using Composer, you can use a special CLI command. Follow the instructions from the [Uninstall themes Composer package]({{page.baseurl}}install-gde/install/cli/install-cli-theme-uninstall.html) topic.\n\n### Uninstall a theme package if Magento was installed by cloning the repository\n\nTo uninstall a theme Composer package if your Magento instance was installed by cloning the git repository, you can also uninstall it using the CLI command, but having removed it from the list of dependencies first.\n\nTake the following steps:\n\n1. Open the `/composer.json` file.\n2. Find a line with a reference to theme package and delete it. The reference would look like following:\n\n   ```\n   ...\n   \"require\": {\n    ...\n       \"/\": \"\"\n   },\n   ...\n   ```\n\n3. To update the project dependencies, run:  \n\n   ```\n    composer update\n   ```\n\n4. Use the `magento theme:uninstall` CLI command as described in the [Uninstall themes Composer package]({{page.baseurl}}install-gde/install/cli/install-cli-theme-uninstall.html) topic.\n\n\nYou can use the Composer command to remove the dependency, but in that case, you must delete the theme record from the database manually.\n\n\n## Uninstall a theme extension\n\nIf the theme was installed as an extension, you can uninstall it using one of the following flows:\n\n* the same way as theme Composer packages are uninstalled, see the [Uninstall a theme package](#uninstall-a-theme-package) section for details.\n* using the Component Manager.     \n\nTo uninstall a theme extension using the Component Manager:\n\n1. In the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} Panel, navigate to **System** > **Web Setup Wizard** > **Component Manager**.\n2. In the **Actions** column, click **Select** > **Uninstall** in the theme record. See the following image for illustration.\n\n![extension_manager_uninstall_theme]({{site.baseurl}}common/images/fdg/uninstall_extension.png){:width=\"630px\"}\n",
      "url": "/guides/v2.0/frontend-dev-guide/themes/theme-uninstall.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-translations-theme-dictionary-html": {
      "title": "Use translation dictionary to customize strings",
      "content": "What's in this topic\n\nThis topic describes how default strings can be changed in your custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} using translation dictionaries. It also gives a short overview of the order in which translations are searched and applied by the Magento application.\n\nHow Magento applies locales\n\nWhen the {% glossarytooltip 05099dbb-d491-4e33-a065-16035cb2d4d9 %}locale{% endglossarytooltip %} is changed for a store, Magento searches for translations in the corresponding dictionaries in the following locations:\n\n4. Module translations: `/i18n/`\n4. Theme translations: \n\t1. `/i18n/` (iterated through all ancestor themes)\n\t2. `/i18n/`\n4. Translation package: `app/i18n/`\n5. Magento database\n\nIf there are different translations for one string, the theme dictionary translations have priority over the {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} translations, and child theme translations have priority over parent theme translations.\n\nCreating a theme dictionary to override parent strings for default locale\n\nThe translations priority described earlier is applied for the default en_US locale as well. So you can use the `en_US.csv` dictionary to customize the strings used in the default locale.\n\nFor example, this approach is used in the Magento Luma theme. It has the \n&lt;Magento_Luma_theme_dir&gt;/i18n/en_US.csv file, where the left column contains the default values (keys), and the right columns contains the values to be used instead when the Luma theme is applied:\n\n\n    \"Add to Wish List\",\t\"Wish List\"\n    \"Add to Compare\",\t\"Compare\"\n    \"Your Checkout Progress\",\t\"Checkout Progress\"\n    \"Card Verification Number\",\t\"CVV\"\n    ...\n\nIt is important to remember that if you generate a dictionary for your theme using the i18n tool with the conventional names and locations for the dictionary, the existing dictionary gets overwritten. \n\nThat is why the recommended flow for adding custom strings is the following:\n\n1. Generate the dictionary for your theme.\n2. Change the necessary values in the right column, or add rows if the strings you want to replace are not in the dictionary. The i18n tool does not create a dictionary, if the theme files do not contain any strings for translation. In this case, add the file manually. \n\nSee the Create a translation dictionary for a theme topic for the practical illustration of the  procedure.\n\n\n\nCustom strings and dictionaries for not default locales\nEven if your theme uses `en_US.csv` to override certain default strings, the dictionaries for other locales for your theme should contain the default strings as keys, not the custom ones. \n\nContinuing the previous example with the Luma theme, if the `de_DE.csv` dictionary will be added for the Luma theme, it will look like following:\n\n    \"Add to Wish List\",\t\n    \"Add to Compare\",\t\n    \"Your Checkout Progress\",\t\n    \"Card Verification Number\",\t\n    ...\n\nThe default values (keys) are used in the left column.\n\n## Recommended reading ##\n- Translations overview\n-  Create a translation dictionary for a theme\n",
      "url": "/guides/v2.0/frontend-dev-guide/translations/theme_dictionary.html"
    }
    ,
  
    "guides-v2-0-architecture-archi-perspectives-third-party-libs-html": {
      "title": "Third-party libraries",
      "content": "Magento depends on a set of external libraries. You can use {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} to manage these dependencies. Composer downloads all of the external libraries that are included in its main configuration file and installs them under its default installation directory (`vendor/`). Third-party libraries include the Zend framework files and the Symfony libraries.\n\nThere are some required libraries that Composer does not load. These reside in `lib/` and include {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} libraries (none of which are loaded by Composer) and a few {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} libraries. (You can also use Composer to manage dependencies between various components within Magento.)\n\nIf you are extending your Magento {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} to interact with third-party applications, you might need to include additional external libraries. These external libraries can be as simple as a wrapper for an {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} of a third-party product you are integrating with your Magento storefront, or an entire framework.\n",
      "url": "/guides/v2.0/architecture/archi_perspectives/third-party-libs.html"
    }
    ,
  
    "guides-v2-0-release-notes-thirdparty-mccloud-html": {
      "title": "Magento Commerce (Cloud) third-party licenses",
      "content": "This page contains links to license agreements of the third party components used within {{site.data.var.ece}} (formerly Enterprise Cloud Edition).  Click the **License** links to view the end user license agreement for the corresponding software.\n\nName|Version|License Name|Available From|Link to License\n---|---|---|---|---\ngithub |||[Source](https://github.com)|[Terms of Service](https://help.github.com/articles/github-terms-of-service/)\nfastly |1.2.26||[Source](https://github.com/fastly/fastly-magento2)|[License](https://github.com/fastly/fastly-magento2/blob/master/LICENSE_FASTLY_CDN.txt)\nnew relic apm || MIT/Apache|[Source](https://docs.newrelic.com/apm)|[License](https://rpm.newrelic.com/licenses)\nblackfire profiler |||[Source](https://blackfire.io)|[Terms of Use](https://blackfire.io/terms-of-use)\nglusterfs || GPLV2/LGPLV3+|[Source](https://github.com/gluster/glusterfs)|[License](https://github.com/gluster/glusterfs#license)\nmariadb || GPL|[Source](https://mariadb.com/downloads/mariadb-tx)|[License](https://mariadb.com/kb/en/library/mariadb-license/)\nsolr |4.10| Apache|[Source](https://github.com/apache/lucene-solr)|[License](https://github.com/apache/lucene-solr/blob/master/solr/LICENSE.txt)\nrabbitmq |3.5| MPL|[Source](https://github.com/rabbitmq)|[License](https://www.rabbitmq.com/mpl.html)\nbraintree/braintree_php || MIT|[Source](https://github.com/braintree/braintree_php)|[License](https://github.com/braintree/braintree_php/blob/master/LICENSE)\ncolinmollenhour/credis || MIT|[Source](https://github.com/colinmollenhour/credis)|[License](https://github.com/colinmollenhour/credis/blob/master/LICENSE)\ncolinmollenhour/php-redis-session-abstract || BSD-3-Clause|[Source](https://github.com/colinmollenhour/php-redis-session-abstract)|[License](https://github.com/colinmollenhour/php-redis-session-abstract#license)\ncomposer/composer || MIT|[Source](https://github.com/composer/composer)|[License](https://github.com/composer/composer/blob/master/LICENSE)\ndoctrine/instantiator || MIT|[Source](https://github.com/doctrine/instantiator)|[License](https://github.com/doctrine/instantiator/blob/master/LICENSE)\nfabpot/php-cs-fixer || MIT|[Source](https://www.versioneye.com/php/fabpot:php-cs-fixer/dev-master)|[License](http://spdx.org/licenses/MIT.html)\njustinrainbow/json-schema || BSD-3-Clause|[Source](https://github.com/justinrainbow/json-schema)|[License](https://github.com/justinrainbow/json-schema/blob/master/LICENSE)\nleague/climate || MIT|[Source](https://github.com/thephpleague/climate)|[License](https://github.com/thephpleague/climate/blob/master/LICENSE.md)\nlusitanian/oauth || MIT|[Source](https://github.com/Lusitanian/PHPoAuthLib)|[License](https://github.com/Lusitanian/PHPoAuthLib/blob/master/LICENSE)\nmonolog/monolog || MIT|[Source](https://github.com/Seldaek/monolog)|[License](https://github.com/Seldaek/monolog/blob/master/LICENSE)\noyejorge/less.php || Apache-2.0|[Source](https://github.com/oyejorge/less.php)|[License](https://github.com/oyejorge/less.php/blob/master/LICENSE)\npdepend/pdepend || BSD-3-Clause|[Source](https://github.com/pdepend/pdepend)|[License](https://github.com/pdepend/pdepend/blob/master/LICENSE)\npelago/emogrifier || MIT|[Source](https://github.com/jjriv/emogrifier)|[License](https://github.com/jjriv/emogrifier/blob/master/LICENSE)\nphpmd/phpmd || BSD-3-Clause|[Source](https://github.com/phpmd/phpmd)|[License](https://github.com/phpmd/phpmd/blob/master/LICENSE)\nphpseclib/phpseclib || MIT|[Source](https://github.com/phpseclib/phpseclib)|[License](https://github.com/phpseclib/phpseclib/blob/master/LICENSE)\nphpunit/php-code-coverage || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-code-coverage)|[License](https://github.com/sebastianbergmann/php-code-coverage/blob/master/LICENSE)\nphpunit/php-file-iterator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-file-iterator)|[License](https://github.com/sebastianbergmann/php-file-iterator/blob/master/LICENSE)\nphpunit/php-text-template || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-text-template)|[License](https://github.com/sebastianbergmann/php-text-template/blob/master/LICENSE)\nphpunit/php-timer || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-timer)|[License](https://github.com/sebastianbergmann/php-timer/blob/master/LICENSE)\nphpunit/php-token-stream || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-token-stream)|[License](https://github.com/sebastianbergmann/php-token-stream/blob/master/LICENSE)\nphpunit/phpunit-mock-objects || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit-mock-objects)|[License](https://github.com/sebastianbergmann/phpunit-mock-objects/blob/master/LICENSE)\nphpunit/phpunit || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit)|[License](https://github.com/sebastianbergmann/phpunit/blob/master/LICENSE)\npsr/log || MIT|[Source](https://github.com/php-fig/log)|[License](https://github.com/php-fig/log/blob/master/LICENSE)\nsebastian/comparator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/comparator)|[License](https://github.com/sebastianbergmann/comparator/blob/master/LICENSE)\nsebastian/diff || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/diff)|[License](https://github.com/sebastianbergmann/diff/blob/master/LICENSE)\nsebastian/environment || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/environment)|[License](https://github.com/sebastianbergmann/environment/blob/master/LICENSE)\nsebastian/exporter || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/exporter)|[License](https://github.com/sebastianbergmann/exporter/blob/master/LICENSE)\nsebastian/recursion-context || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/recursion-context)|[License](https://github.com/sebastianbergmann/recursion-context/blob/master/LICENSE)\nsebastian/version || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/version)|[License](https://github.com/sebastianbergmann/version/blob/master/LICENSE)\nseld/jsonlint || MIT|[Source](https://github.com/Seldaek/jsonlint)|[License](https://github.com/Seldaek/jsonlint/blob/master/LICENSE)\nsjparkinson/static-review || MIT|[Source](https://github.com/sjparkinson/static-review)|[License](https://github.com/sjparkinson/static-review/blob/master/LICENSE)\nsquizlabs/php_codesniffer || BSD-3-Clause|[Source](https://github.com/squizlabs/PHP_CodeSniffer)|[License](https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt)\nsymfony/config || MIT|[Source](https://github.com/symfony/config)|[License](https://github.com/symfony/config/blob/master/LICENSE)\nsymfony/dependency-injection || MIT|[Source](https://github.com/symfony/dependency-injection)|[License](https://github.com/symfony/dependency-injection/blob/master/LICENSE)\nsymfony/event-dispatcher || MIT|[Source](https://github.com/symfony/event-dispatcher)|[License](https://github.com/symfony/event-dispatcher/blob/master/LICENSE)\nsymfony/filesystem || MIT|[Source](https://github.com/symfony/filesystem)|[License](https://github.com/symfony/filesystem/blob/master/LICENSE)\nsymfony/finder || MIT|[Source](https://github.com/symfony/finder)|[License](https://github.com/symfony/finder/blob/master/LICENSE)\nsymfony/process || MIT|[Source](https://github.com/symfony/process)|[License](https://github.com/symfony/process/blob/master/LICENSE)\nsymfony/stopwatch || MIT|[Source](https://github.com/symfony/stopwatch)|[License](https://github.com/symfony/stopwatch/blob/master/LICENSE)\nsymfony/yaml || MIT|[Source](https://github.com/symfony/yaml)|[License](https://github.com/symfony/yaml/blob/master/LICENSE)\ntedivm/jshrink || BSD-3-Clause|[Source](https://github.com/tedious/Jshrink)|[License](https://github.com/tedious/JShrink/blob/master/LICENSE)\ntubalmartin/cssmin || BSD-3-Clause|[Source](https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port)|\nZend Framework||BSD-3-Clause|[Source](http://framework.zend.com/)|[License](https://framework.zend.com/license)\nCm ||BSD-3-Clause|[Source](https://github.com/colinmollenhour/Cm_RedisSession)|[License 1](https://github.com/colinmollenhour/Cm_RedisSession/blob/master/Cm_RedisSession.xml) [License 2](http://opensource.org/licenses/BSD-3-Clause)\nelasticsearch/elasticsearch || Apache-2.0|[Source](https://github.com/elastic/elasticsearch-php)|[License](https://github.com/elastic/elasticsearch-php/blob/master/LICENSE)\nguzzlehttp/ringphp || MIT|[Source](https://github.com/guzzle/RingPHP)|[License](https://github.com/guzzle/RingPHP/blob/master/LICENSE)\nguzzlehttp/streams || MIT|[Source](https://github.com/guzzle/streams)|[License](https://github.com/guzzle/streams/blob/master/LICENSE)\nsolarium/solarium || NewBSD|[Source](https://github.com/solariumphp/solarium)|[License](https://github.com/solariumphp/solarium/blob/master/COPYING)\nphp-amqplib/php-amqplib\" |2.5.*| LGPL-2.1|[Source](https://github.com/php-amqplib/php-amqplib)|[License](https://github.com/php-amqplib/php-amqplib/blob/master/LICENSE)\nreact/promise || MIT|[Source](https://github.com/reactphp/promise)|[License](https://github.com/reactphp/promise/blob/master/LICENSE)\nextjs |1.0.1|Open GPL 3.0 (when was included)|[Source](https://www.sencha.com/)|[License](https://www.gnu.org/licenses/lgpl.html)\nfotorama|4.6.4 |MIT|[Source](https://github.com/artpolikarpov/fotorama)|[License](https://github.com/artpolikarpov/fotorama/blob/master/MIT-LICENSE)\njquery|1.11.0 |MIT|[Source](https://jquery.com/)|[License](https://jquery.org/license/)\nknockoutjs|3.3.0 |MIT|[Source](http://knockoutjs.com/downloads/index.html)|[Source](https://github.com/knockout/knockout/blob/master/LICENSE)\nless |2.3.1|Apache License Version 2.0|[Source](https://github.com/less/less.js)|[License](https://github.com/less/less.js/blob/master/LICENSE)\nmodernizr|2.6.1 |MIT|[Source](https://github.com/Modernizr/Modernizr)|[License](https://github.com/Modernizr/Modernizr/blob/master/LICENSE)\nprototype|1.7 |MIT|[Source](http://prototypejs.org)|[License](https://github.com/sstephenson/prototype/blob/master/LICENSE)\nrequirejs |2.1.11|new BSD or MIT licensed|[Source](https://github.com/requirejs/requirejs)|[License](https://github.com/requirejs/requirejs/blob/master/LICENSE)\nscriptaculous|1.8.2 |MIT|[Source](http://script.aculo.us)|[License](http://madrobby.github.io/scriptaculous/license/)\ntiny_mce |major: 3; minor: 4.7|GNU LGPL 2.1|[Source](https://www.tinymce.com)|[License](https://github.com/tinymce/tinymce/blob/master/LICENSE.TXT)\nangular|1.2.16 |MIT|[Source](https://github.com/angular/angular.js)|[License](https://github.com/angular/angular.js/blob/master/LICENSE)\nangular-clickout|1.0.2 |MIT|[Source](https://github.com/neoziro/angular-clickout)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-dialog|0.4.0 |MIT|[Source](https://github.com/likeastore/ngDialog)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-storage|0.3.0 |MIT|[Source](https://github.com/gsklee/ngStorage)|[License](https://github.com/gsklee/ngStorage/blob/master/LICENSE)\nangular-sanitize|1.2.14 |MIT|[Source](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)|[License](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)\nangular-ui-bootstrap|0.11.0 |MIT|[Source](http://angular-ui.github.io/bootstrap)|[License](https://github.com/angular-ui/bootstrap/blob/master/LICENSE)\nangular-ui-router|0.2.10 |MIT|[Source](http://angular-ui.github.com/)|[License](http://www.opensource.org/licenses/MIT)\nbootstrap|3.1.1 |MIT|[Source](http://getbootstrap.com)|[License](https://github.com/twbs/bootstrap/blob/master/LICENSE)\nFormData for XMLHttpRequest 2 |-| MIT|[Source](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)|[License](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)\nmatchMedia |-| MIT/BSD|[Source](https://github.com/paulirish/matchMedia.js/)|[License](https://github.com/paulirish/matchMedia.js/blob/master/LICENSE.txt)\nmoment.js |2.8.1| MIT|[Source](http://momentjs.com)|[License](http://momentjs.com/downloads/moment.js)\nMutationObserver |-| BSD|[Source](http://polymer.github.io)|[License](http://polymer.github.io/LICENSE.txt)\nUnderscore |1.8.2| MIT|[Source](http://underscorejs.org)|[License](https://github.com/jashkenas/underscore/blob/master/LICENSE)\nLinLibertineFont|-|GPL 2.0 and the Open Fonts License 1.0|[Source](http://www.linuxlibertine.org)|[License 1](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) [License 2](http://scripts.sil.org/cms/scripts/page.php)\nSwagger |2.0| Apache 2|[Source](https://github.com/swagger-api/swagger-ui)|[License](http://swagger.io/license/)\n",
      "url": "/guides/v2.0/release-notes/thirdparty-mccloud.html"
    }
    ,
  
    "guides-v2-0-release-notes-thirdparty-ce-html": {
      "title": "",
      "content": "This page contains links to license agreements of the third party components used within Magento Open Source.  Click the **License** links to view the end user license agreement for the corresponding software.\n\nName|Version|License Name|Available From|Link to License\n---|---|---|---|---\nbraintree/braintree_php || MIT|[Source](https://github.com/braintree/braintree_php)|[License](https://github.com/braintree/braintree_php/blob/master/LICENSE)\ncolinmollenhour/credis || MIT|[Source](https://github.com/colinmollenhour/credis)|[License](https://github.com/colinmollenhour/credis/blob/master/LICENSE)\ncolinmollenhour/php-redis-session-abstract || BSD-3-Clause|[Source](https://github.com/colinmollenhour/php-redis-session-abstract)|[License](https://github.com/colinmollenhour/php-redis-session-abstract#license)\ncomposer/composer || MIT|[Source](https://github.com/composer/composer)|[License](https://github.com/composer/composer/blob/master/LICENSE)\ndoctrine/instantiator || MIT|[Source](https://github.com/doctrine/instantiator)|[License](https://github.com/doctrine/instantiator/blob/master/LICENSE)\nfabpot/php-cs-fixer || MIT|[Source](https://www.versioneye.com/php/fabpot:php-cs-fixer/dev-master)|[License](http://spdx.org/licenses/MIT.html)\njustinrainbow/json-schema || BSD-3-Clause|[Source](https://github.com/justinrainbow/json-schema)|[License](https://github.com/justinrainbow/json-schema/blob/master/LICENSE)\nleague/climate || MIT|[Source](https://github.com/thephpleague/climate)|[License](https://github.com/thephpleague/climate/blob/master/LICENSE.md)\nlusitanian/oauth || MIT|[Source](https://github.com/Lusitanian/PHPoAuthLib)|[License](https://github.com/Lusitanian/PHPoAuthLib/blob/master/LICENSE)\nmonolog/monolog || MIT|[Source](https://github.com/Seldaek/monolog)|[License](https://github.com/Seldaek/monolog/blob/master/LICENSE)\noyejorge/less.php || Apache-2.0|[Source](https://github.com/oyejorge/less.php)|[License](https://github.com/oyejorge/less.php/blob/master/LICENSE)\npdepend/pdepend || BSD-3-Clause|[Source](https://github.com/pdepend/pdepend)|[License](https://github.com/pdepend/pdepend/blob/master/LICENSE)\npelago/emogrifier || MIT|[Source](https://github.com/jjriv/emogrifier)|[License](https://github.com/jjriv/emogrifier/blob/master/LICENSE)\nphpmd/phpmd || BSD-3-Clause|[Source](https://github.com/phpmd/phpmd)|[License](https://github.com/phpmd/phpmd/blob/master/LICENSE)\nphpseclib/phpseclib || MIT|[Source](https://github.com/phpseclib/phpseclib)|[License](https://github.com/phpseclib/phpseclib/blob/master/LICENSE)\nphpunit/php-code-coverage || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-code-coverage)|[License](https://github.com/sebastianbergmann/php-code-coverage/blob/master/LICENSE)\nphpunit/php-file-iterator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-file-iterator)|[License](https://github.com/sebastianbergmann/php-file-iterator/blob/master/LICENSE)\nphpunit/php-text-template || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-text-template)|[License](https://github.com/sebastianbergmann/php-text-template/blob/master/LICENSE)\nphpunit/php-timer || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-timer)|[License](https://github.com/sebastianbergmann/php-timer/blob/master/LICENSE)\nphpunit/php-token-stream || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-token-stream)|[License](https://github.com/sebastianbergmann/php-token-stream/blob/master/LICENSE)\nphpunit/phpunit-mock-objects || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit-mock-objects)|[License](https://github.com/sebastianbergmann/phpunit-mock-objects/blob/master/LICENSE)\nphpunit/phpunit || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit)|[License](https://github.com/sebastianbergmann/phpunit/blob/master/LICENSE)\npsr/log || MIT|[Source](https://github.com/php-fig/log)|[License](https://github.com/php-fig/log/blob/master/LICENSE)\nsebastian/comparator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/comparator)|[License](https://github.com/sebastianbergmann/comparator/blob/master/LICENSE)\nsebastian/diff || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/diff)|[License](https://github.com/sebastianbergmann/diff/blob/master/LICENSE)\nsebastian/environment || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/environment)|[License](https://github.com/sebastianbergmann/environment/blob/master/LICENSE)\nsebastian/exporter || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/exporter)|[License](https://github.com/sebastianbergmann/exporter/blob/master/LICENSE)\nsebastian/recursion-context || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/recursion-context)|[License](https://github.com/sebastianbergmann/recursion-context/blob/master/LICENSE)\nsebastian/version || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/version)|[License](https://github.com/sebastianbergmann/version/blob/master/LICENSE)\nseld/jsonlint || MIT|[Source](https://github.com/Seldaek/jsonlint)|[License](https://github.com/Seldaek/jsonlint/blob/master/LICENSE)\nsjparkinson/static-review || MIT|[Source](https://github.com/sjparkinson/static-review)|[License](https://github.com/sjparkinson/static-review/blob/master/LICENSE)\nsquizlabs/php_codesniffer || BSD-3-Clause|[Source](https://github.com/squizlabs/PHP_CodeSniffer)|[License](https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt)\nsymfony/config || MIT|[Source](https://github.com/symfony/config)|[License](https://github.com/symfony/config/blob/master/LICENSE)\nsymfony/dependency-injection || MIT|[Source](https://github.com/symfony/dependency-injection)|[License](https://github.com/symfony/dependency-injection/blob/master/LICENSE)\nsymfony/event-dispatcher || MIT|[Source](https://github.com/symfony/event-dispatcher)|[License](https://github.com/symfony/event-dispatcher/blob/master/LICENSE)\nsymfony/filesystem || MIT|[Source](https://github.com/symfony/filesystem)|[License](https://github.com/symfony/filesystem/blob/master/LICENSE)\nsymfony/finder || MIT|[Source](https://github.com/symfony/finder)|[License](https://github.com/symfony/finder/blob/master/LICENSE)\nsymfony/process || MIT|[Source](https://github.com/symfony/process)|[License](https://github.com/symfony/process/blob/master/LICENSE)\nsymfony/stopwatch || MIT|[Source](https://github.com/symfony/stopwatch)|[License](https://github.com/symfony/stopwatch/blob/master/LICENSE)\nsymfony/yaml || MIT|[Source](https://github.com/symfony/yaml)|[License](https://github.com/symfony/yaml/blob/master/LICENSE)\ntedivm/jshrink || BSD-3-Clause|[Source](https://github.com/tedious/Jshrink)|[License](https://github.com/tedious/JShrink/blob/master/LICENSE)\ntubalmartin/cssmin || BSD-3-Clause|[Source](https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port)|\nZend Framework||BSD-3-Clause|[Source](http://framework.zend.com/)|[License](https://framework.zend.com/license)\nCm ||BSD-3-Clause|[Source](https://github.com/colinmollenhour/Cm_RedisSession)|[License 1](https://github.com/colinmollenhour/Cm_RedisSession/blob/master/Cm_RedisSession.xml) [License 2](http://opensource.org/licenses/BSD-3-Clause)\nextjs |1.0.1|Open GPL 3.0 (when was included)|[Source](https://www.sencha.com/)|[License](https://www.gnu.org/licenses/lgpl.html)\nfotorama|4.6.4 |MIT|[Source](https://github.com/artpolikarpov/fotorama)|[License](https://github.com/artpolikarpov/fotorama/blob/master/MIT-LICENSE)\njquery|1.11.0 |MIT|[Source](https://jquery.com/)|[License](https://jquery.org/license/)\nknockoutjs|3.3.0 |MIT|[Source](http://knockoutjs.com/downloads/index.html)|[Source](https://github.com/knockout/knockout/blob/master/LICENSE)\nless |2.3.1|Apache License Version 2.0|[Source](https://github.com/less/less.js)|[License](https://github.com/less/less.js/blob/master/LICENSE)\nmodernizr|2.6.1 |MIT|[Source](https://github.com/Modernizr/Modernizr)|[License](https://github.com/Modernizr/Modernizr/blob/master/LICENSE)\nprototype|1.7 |MIT|[Source](http://prototypejs.org)|[License](https://github.com/sstephenson/prototype/blob/master/LICENSE)\nrequirejs |2.1.11|new BSD or MIT licensed|[Source](https://github.com/requirejs/requirejs)|[License](https://github.com/requirejs/requirejs/blob/master/LICENSE)\nscriptaculous|1.8.2 |MIT|[Source](http://script.aculo.us)|[License](http://madrobby.github.io/scriptaculous/license/)\ntiny_mce |major: 3; minor: 4.7|GNU LGPL 2.1|[Source](https://www.tinymce.com)|[License](https://github.com/tinymce/tinymce/blob/master/LICENSE.TXT)\nangular|1.2.16 |MIT|[Source](https://github.com/angular/angular.js)|[License](https://github.com/angular/angular.js/blob/master/LICENSE)\nangular-clickout|1.0.2 |MIT|[Source](https://github.com/neoziro/angular-clickout)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-dialog|0.4.0 |MIT|[Source](https://github.com/likeastore/ngDialog)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-storage|0.3.0 |MIT|[Source](https://github.com/gsklee/ngStorage)|[License](https://github.com/gsklee/ngStorage/blob/master/LICENSE)\nangular-sanitize|1.2.14 |MIT|[Source](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)|[License](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)\nangular-ui-bootstrap|0.11.0 |MIT|[Source](http://angular-ui.github.io/bootstrap)|[License](https://github.com/angular-ui/bootstrap/blob/master/LICENSE)\nangular-ui-router|0.2.10 |MIT|[Source](http://angular-ui.github.com/)|[License](http://www.opensource.org/licenses/MIT)\nbootstrap|3.1.1 |MIT|[Source](http://getbootstrap.com)|[License](https://github.com/twbs/bootstrap/blob/master/LICENSE)\nFormData for XMLHttpRequest 2 |-| MIT|[Source](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)|[License](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)\nmatchMedia |-| MIT/BSD|[Source](https://github.com/paulirish/matchMedia.js/)|[License](https://github.com/paulirish/matchMedia.js/blob/master/LICENSE.txt)\nmoment.js |2.8.1| MIT|[Source](http://momentjs.com)|[License](http://momentjs.com/downloads/moment.js)\nMutationObserver |-| BSD|[Source](http://polymer.github.io)|[License](http://polymer.github.io/LICENSE.txt)\nUnderscore |1.8.2| MIT|[Source](http://underscorejs.org)|[License](https://github.com/jashkenas/underscore/blob/master/LICENSE)\nLinLibertineFont|-|GPL 2.0 and the Open Fonts License 1.0|[Source](http://www.linuxlibertine.org)|[License 1](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) [License 2](http://scripts.sil.org/cms/scripts/page.php)\nSwagger |2.0| Apache 2|[Source](https://github.com/swagger-api/swagger-ui)|[License](http://swagger.io/license/)\n",
      "url": "/guides/v2.0/release-notes/thirdparty_ce.html"
    }
    ,
  
    "guides-v2-0-release-notes-thirdparty-ee-html": {
      "title": "",
      "content": "This page contains links to license agreements of the third party components used within Magento Commerce (formerly Enterprise Edition).  Click the **License** links to view the end user license agreement for the corresponding software.\n\nName|Version|License Name|Available From|Link to License\n---|---|---|---|---\nbraintree/braintree_php || MIT|[Source](https://github.com/braintree/braintree_php)|[License](https://github.com/braintree/braintree_php/blob/master/LICENSE)\ncolinmollenhour/credis || MIT|[Source](https://github.com/colinmollenhour/credis)|[License](https://github.com/colinmollenhour/credis/blob/master/LICENSE)\ncolinmollenhour/php-redis-session-abstract || BSD-3-Clause|[Source](https://github.com/colinmollenhour/php-redis-session-abstract)|[License](https://github.com/colinmollenhour/php-redis-session-abstract#license)\ncomposer/composer || MIT|[Source](https://github.com/composer/composer)|[License](https://github.com/composer/composer/blob/master/LICENSE)\ndoctrine/instantiator || MIT|[Source](https://github.com/doctrine/instantiator)|[License](https://github.com/doctrine/instantiator/blob/master/LICENSE)\nfabpot/php-cs-fixer || MIT|[Source](https://www.versioneye.com/php/fabpot:php-cs-fixer/dev-master)|[License](http://spdx.org/licenses/MIT.html)\njustinrainbow/json-schema || BSD-3-Clause|[Source](https://github.com/justinrainbow/json-schema)|[License](https://github.com/justinrainbow/json-schema/blob/master/LICENSE)\nleague/climate || MIT|[Source](https://github.com/thephpleague/climate)|[License](https://github.com/thephpleague/climate/blob/master/LICENSE.md)\nlusitanian/oauth || MIT|[Source](https://github.com/Lusitanian/PHPoAuthLib)|[License](https://github.com/Lusitanian/PHPoAuthLib/blob/master/LICENSE)\nmonolog/monolog || MIT|[Source](https://github.com/Seldaek/monolog)|[License](https://github.com/Seldaek/monolog/blob/master/LICENSE)\noyejorge/less.php || Apache-2.0|[Source](https://github.com/oyejorge/less.php)|[License](https://github.com/oyejorge/less.php/blob/master/LICENSE)\npdepend/pdepend || BSD-3-Clause|[Source](https://github.com/pdepend/pdepend)|[License](https://github.com/pdepend/pdepend/blob/master/LICENSE)\npelago/emogrifier || MIT|[Source](https://github.com/jjriv/emogrifier)|[License](https://github.com/jjriv/emogrifier/blob/master/LICENSE)\nphpmd/phpmd || BSD-3-Clause|[Source](https://github.com/phpmd/phpmd)|[License](https://github.com/phpmd/phpmd/blob/master/LICENSE)\nphpseclib/phpseclib || MIT|[Source](https://github.com/phpseclib/phpseclib)|[License](https://github.com/phpseclib/phpseclib/blob/master/LICENSE)\nphpunit/php-code-coverage || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-code-coverage)|[License](https://github.com/sebastianbergmann/php-code-coverage/blob/master/LICENSE)\nphpunit/php-file-iterator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-file-iterator)|[License](https://github.com/sebastianbergmann/php-file-iterator/blob/master/LICENSE)\nphpunit/php-text-template || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-text-template)|[License](https://github.com/sebastianbergmann/php-text-template/blob/master/LICENSE)\nphpunit/php-timer || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-timer)|[License](https://github.com/sebastianbergmann/php-timer/blob/master/LICENSE)\nphpunit/php-token-stream || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/php-token-stream)|[License](https://github.com/sebastianbergmann/php-token-stream/blob/master/LICENSE)\nphpunit/phpunit-mock-objects || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit-mock-objects)|[License](https://github.com/sebastianbergmann/phpunit-mock-objects/blob/master/LICENSE)\nphpunit/phpunit || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/phpunit)|[License](https://github.com/sebastianbergmann/phpunit/blob/master/LICENSE)\npsr/log || MIT|[Source](https://github.com/php-fig/log)|[License](https://github.com/php-fig/log/blob/master/LICENSE)\nsebastian/comparator || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/comparator)|[License](https://github.com/sebastianbergmann/comparator/blob/master/LICENSE)\nsebastian/diff || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/diff)|[License](https://github.com/sebastianbergmann/diff/blob/master/LICENSE)\nsebastian/environment || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/environment)|[License](https://github.com/sebastianbergmann/environment/blob/master/LICENSE)\nsebastian/exporter || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/exporter)|[License](https://github.com/sebastianbergmann/exporter/blob/master/LICENSE)\nsebastian/recursion-context || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/recursion-context)|[License](https://github.com/sebastianbergmann/recursion-context/blob/master/LICENSE)\nsebastian/version || BSD-3-Clause|[Source](https://github.com/sebastianbergmann/version)|[License](https://github.com/sebastianbergmann/version/blob/master/LICENSE)\nseld/jsonlint || MIT|[Source](https://github.com/Seldaek/jsonlint)|[License](https://github.com/Seldaek/jsonlint/blob/master/LICENSE)\nsjparkinson/static-review || MIT|[Source](https://github.com/sjparkinson/static-review)|[License](https://github.com/sjparkinson/static-review/blob/master/LICENSE)\nsquizlabs/php_codesniffer || BSD-3-Clause|[Source](https://github.com/squizlabs/PHP_CodeSniffer)|[License](https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt)\nsymfony/config || MIT|[Source](https://github.com/symfony/config)|[License](https://github.com/symfony/config/blob/master/LICENSE)\nsymfony/dependency-injection || MIT|[Source](https://github.com/symfony/dependency-injection)|[License](https://github.com/symfony/dependency-injection/blob/master/LICENSE)\nsymfony/event-dispatcher || MIT|[Source](https://github.com/symfony/event-dispatcher)|[License](https://github.com/symfony/event-dispatcher/blob/master/LICENSE)\nsymfony/filesystem || MIT|[Source](https://github.com/symfony/filesystem)|[License](https://github.com/symfony/filesystem/blob/master/LICENSE)\nsymfony/finder || MIT|[Source](https://github.com/symfony/finder)|[License](https://github.com/symfony/finder/blob/master/LICENSE)\nsymfony/process || MIT|[Source](https://github.com/symfony/process)|[License](https://github.com/symfony/process/blob/master/LICENSE)\nsymfony/stopwatch || MIT|[Source](https://github.com/symfony/stopwatch)|[License](https://github.com/symfony/stopwatch/blob/master/LICENSE)\nsymfony/yaml || MIT|[Source](https://github.com/symfony/yaml)|[License](https://github.com/symfony/yaml/blob/master/LICENSE)\ntedivm/jshrink || BSD-3-Clause|[Source](https://github.com/tedious/Jshrink)|[License](https://github.com/tedious/JShrink/blob/master/LICENSE)\ntubalmartin/cssmin || BSD-3-Clause|[Source](https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port)|\nZend Framework||BSD-3-Clause|[Source](http://framework.zend.com/)|[License](https://framework.zend.com/license)\nCm ||BSD-3-Clause|[Source](https://github.com/colinmollenhour/Cm_RedisSession)|[License 1](https://github.com/colinmollenhour/Cm_RedisSession/blob/master/Cm_RedisSession.xml) [License 2](http://opensource.org/licenses/BSD-3-Clause)\nelasticsearch/elasticsearch || Apache-2.0|[Source](https://github.com/elastic/elasticsearch-php)|[License](https://github.com/elastic/elasticsearch-php/blob/master/LICENSE)\nguzzlehttp/ringphp || MIT|[Source](https://github.com/guzzle/RingPHP)|[License](https://github.com/guzzle/RingPHP/blob/master/LICENSE)\nguzzlehttp/streams || MIT|[Source](https://github.com/guzzle/streams)|[License](https://github.com/guzzle/streams/blob/master/LICENSE)\nsolarium/solarium || NewBSD|[Source](https://github.com/solariumphp/solarium)|[License](https://github.com/solariumphp/solarium/blob/master/COPYING)\nphp-amqplib/php-amqplib\" |2.5.*| LGPL-2.1|[Source](https://github.com/php-amqplib/php-amqplib)|[License](https://github.com/php-amqplib/php-amqplib/blob/master/LICENSE)\nreact/promise || MIT|[Source](https://github.com/reactphp/promise)|[License](https://github.com/reactphp/promise/blob/master/LICENSE)\nextjs |1.0.1|Open GPL 3.0 (when was included)|[Source](https://www.sencha.com/)|[License](https://www.gnu.org/licenses/lgpl.html)\nfotorama|4.6.4 |MIT|[Source](https://github.com/artpolikarpov/fotorama)|[License](https://github.com/artpolikarpov/fotorama/blob/master/MIT-LICENSE)\njquery|1.11.0 |MIT|[Source](https://jquery.com/)|[License](https://jquery.org/license/)\nknockoutjs|3.3.0 |MIT|[Source](http://knockoutjs.com/downloads/index.html)|[Source](https://github.com/knockout/knockout/blob/master/LICENSE)\nless |2.3.1|Apache License Version 2.0|[Source](https://github.com/less/less.js)|[License](https://github.com/less/less.js/blob/master/LICENSE)\nmodernizr|2.6.1 |MIT|[Source](https://github.com/Modernizr/Modernizr)|[License](https://github.com/Modernizr/Modernizr/blob/master/LICENSE)\nprototype|1.7 |MIT|[Source](http://prototypejs.org)|[License](https://github.com/sstephenson/prototype/blob/master/LICENSE)\nrequirejs |2.1.11|new BSD or MIT licensed|[Source](https://github.com/requirejs/requirejs)|[License](https://github.com/requirejs/requirejs/blob/master/LICENSE)\nscriptaculous|1.8.2 |MIT|[Source](http://script.aculo.us)|[License](http://madrobby.github.io/scriptaculous/license/)\ntiny_mce |major: 3; minor: 4.7|GNU LGPL 2.1|[Source](https://www.tinymce.com)|[License](https://github.com/tinymce/tinymce/blob/master/LICENSE.TXT)\nangular|1.2.16 |MIT|[Source](https://github.com/angular/angular.js)|[License](https://github.com/angular/angular.js/blob/master/LICENSE)\nangular-clickout|1.0.2 |MIT|[Source](https://github.com/neoziro/angular-clickout)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-dialog|0.4.0 |MIT|[Source](https://github.com/likeastore/ngDialog)|[License](https://github.com/neoziro/angular-clickout#license)\nangular-ng-storage|0.3.0 |MIT|[Source](https://github.com/gsklee/ngStorage)|[License](https://github.com/gsklee/ngStorage/blob/master/LICENSE)\nangular-sanitize|1.2.14 |MIT|[Source](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)|[License](https://code.angularjs.org/1.2.14/angular-sanitize.min.js)\nangular-ui-bootstrap|0.11.0 |MIT|[Source](http://angular-ui.github.io/bootstrap)|[License](https://github.com/angular-ui/bootstrap/blob/master/LICENSE)\nangular-ui-router|0.2.10 |MIT|[Source](http://angular-ui.github.com/)|[License](http://www.opensource.org/licenses/MIT)\nbootstrap|3.1.1 |MIT|[Source](http://getbootstrap.com)|[License](https://github.com/twbs/bootstrap/blob/master/LICENSE)\nFormData for XMLHttpRequest 2 |-| MIT|[Source](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)|[License](https://gist.github.com/Rob--W/8b5adedd84c0d36aba64)\nmatchMedia |-| MIT/BSD|[Source](https://github.com/paulirish/matchMedia.js/)|[License](https://github.com/paulirish/matchMedia.js/blob/master/LICENSE.txt)\nmoment.js |2.8.1| MIT|[Source](http://momentjs.com)|[License](http://momentjs.com/downloads/moment.js)\nMutationObserver |-| BSD|[Source](http://polymer.github.io)|[License](http://polymer.github.io/LICENSE.txt)\nUnderscore |1.8.2| MIT|[Source](http://underscorejs.org)|[License](https://github.com/jashkenas/underscore/blob/master/LICENSE)\nLinLibertineFont|-|GPL 2.0 and the Open Fonts License 1.0|[Source](http://www.linuxlibertine.org)|[License 1](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html) [License 2](http://scripts.sil.org/cms/scripts/page.php)\nSwagger |2.0| Apache 2|[Source](https://github.com/swagger-api/swagger-ui)|[License](http://swagger.io/license/)\n",
      "url": "/guides/v2.0/release-notes/thirdparty_ee.html"
    }
    ,
  
    "guides-v2-0-release-notes-thirdparty-parent-html": {
      "title": "",
      "content": "The following pages contain links to license agreements of the third-party components used by Magento Open Source (formerly Community Edition) and Commerce (formerly Enterprise Edition).\n\n*\t[Magento Open Source third-party licenses]({{ page.baseurl }}release-notes/thirdparty_ce.html)\n*\t[Magento Commerce third-party licenses]({{ page.baseurl }}release-notes/thirdparty_ee.html)\n*\t[Magento Commerce (Cloud) third-party licenses]({{ page.baseurl }}release-notes/thirdparty-mccloud.html)\n",
      "url": "/guides/v2.0/release-notes/thirdparty_parent.html"
    }
    ,
  
    "guides-v2-0-pattern-library-displaying-data-tile-tile-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Tile pattern\nThis topic contains examples of the Tile pattern used in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} with functions for single selection, multi selection, drag and drop, and editing inline position. For solutions not described in this article, please refer to other related patterns or contact the Magento UX Design team.\n\nFunctional Behavior\n\n\tDrag and Drop\n\tRemove\n\tHero Product checkbox and link\n\tAdvance position left and right\n\tNumerical input box\n\tMulti selection\n\tHero Product Section\n\n\nUse of Tiles\nTiles will be needed anytime there is a grid view option available. Tiles are a visual representation of the data table and are easily scan-able.\n\n\n\n\n\n\n\n\n\n\nDrag and Drop\nThe gripper handle in the top left corner of the tile is used when the capability of dragging and dropping is needed. When an item is dragged out and moved to a desired location, the drop area is highlighted to show the acceptable region. Once dropped, the pick-up area disappears. If an item cannot be dropped into a specific location-the drop area will not be shown. Drag and drop functionality can only be used on a single page, the user cannot drag and drop across multiple pages. \n\nRemoving Tiles\nThe X in the top right corner of the tile will remove the tile from the {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %} but not delete it from the actual product {% glossarytooltip 8d40d668-4996-4856-9f81-b1386cf4b14f %}catalog{% endglossarytooltip %}. When a tile is selected to be removed, the user is prompted with a 1-2 second alert stating, \"This product is now being removed from the category.\"\n\n\n\nHero Product Checkbox and Link\nTo make a product a Hero Product, the user must select the checkbox and/or the Hero Product link to promote the tile to the top of the category. When the checkbox and/or Hero Product link is selected, a 1-2 second alert stating \"This product is now a hero product\" will appear and fade away. (The user has the option to opt out of these alerts.) Once a tile becomes a \"Hero\" a 1px yellow stroke highlights the tile at the top of the category.\n\n\n\n\n\n\nRemoving Hero Product Checkbox and Link\nTo remove a product from the hero space, the user must deselect the checkbox and/or click the Hero Product link. When the checkbox and/or Hero Product link is selected, a 1-2 second alert stating, \"This product is being removed\" will appear and fade away. (The user has the option to opt out of these alerts.) Once selected, the tile will move to the first position in the category.\n\n\n\n\n\n\nAdvancing Position\nThe user has the ability to advance a tile to the first position in the category and/or the last position in a category by selecting either the move first position icon, move up one icon, move down one icon or move last position icon. These icons help a user quickly move products around in a category and across multiple pages.\n\n\n\n\n\n\nNumerical Input\nClicking in the input field will allow the user to manually enter a numeric order and have the tile move to the position entered. If a tile is already in the chosen position, the tile will then move one space to the right and the new numeric value entered will take the position. Once the user enters a numeric value, using the keyboard and hitting return will move the tile to the entered position.\n\n\n\n\n\n\nMulti-selection and Selection Indicators\nThe user can select multiple tiles at one time by keyboard command (SHIFT and COMMAND) and selecting individual tiles. When tiles are dropped in the desired location, the tiles will be arranged according to how they were selected. (The first tile selected will be the first tile in the dropped position and all other tiles selected will arrange according to selection.)\n\nHero Product Section\nOnce a tile becomes a \"Hero\" a 1px yellow stroke highlights the tile at the top of the category. The user can have infinite hero products in a category. When there is more than one product highlighted in the hero space at the top of the category, the user can drag and drop tiles within the highlighted hero space. (Ex: A user can drag and drop the first hero tile to the last hero position as long as it is on the same page) The advance position icons and numeric input field are not active while a tile is in the hero position. To activate the advance position and numeric input field, the user must remove the tile from the hero space.\n\n\n\n\n\n\nStlying and Spacing\nFor specific details concerning styling including fonts, colors and effects and spacing and padding, please refer to the source PSD files and exports located on Box or contact the Magento Product Design and User Experience team.\n\n\n\n\n\n\nAssets\nDownload PhotoShop source file .\n",
      "url": "/guides/v2.0/pattern-library/displaying-data/tile/tile.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-translations-translate-practice-html": {
      "title": "Create a translation dictionary for a theme",
      "content": "What's in this topic\n\nThis topic is a step-by-step illustration of creating a default en_US {% glossarytooltip 05099dbb-d491-4e33-a065-16035cb2d4d9 %}locale{% endglossarytooltip %} dictionary for a custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %}. \n\nChanging default strings\nOrangeCo created a custom `orange` theme that inherits from the Magento Blank theme.\nAmong the other changes, they want to rephrase certain strings used in the Blank theme and modules for the default locale. \n\nNamely, they need the following changes:\n\n\nChange Add to Cart label to Purchase\n\n\nChange Add to Compare label to Compare\n\n\nChange Add to Wish List label to Wishlist\n\n\n\nThe following image shows a page where the strings meant to be changed are used:\n\n\n\n\n\nTo override the strings, OrangeCo plan to use the en_US dictionary file. \n\nSo OrangeCo take the following steps:\n\n\n\n\nRun the i18n (internationalization) tool to generate the en_US dictionary for the orange theme:\n\n{% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}php{% endglossarytooltip %} magento2/bin/magento i18n:collect-phrases --output=\"magento2/app/design/frontend/OrangeCo/orange/i18n/en_US.csv\" magento2/app/design/frontend/OrangeCo/orange\n\n\n\n\nOpen the newly generated magento2/app/design/frontend/OrangeCo/orange/i18n/en_US.csv file and add the following rows:\n\n\n\"Add to Cart\", \"Purchase\"\n\"Add to Compare\", \"Compare\"\n\"Add to Wish List\", \"Wishlist\"\n\n\n\n\n\nNow you can run deploy command to get changes of localization,\n\nphp bin/magento setup:static-content:deploy\n\n\nWhen the OrangeCo apply the orange theme, the custom strings are used instead default ones. \n\nFor example:\n\n\n \n\n\n Recommended reading \n\n\nTranslations overview\nTranslation dictionaries and language packages\nUsing translation dictionary to customize strings\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/translations/translate_practice.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-translations-translate-theory-html": {
      "title": "Translate theme strings",
      "content": "## What's in this topic ##\n\nYour custom {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} might contain new strings that are not present in the Magento out of the box themes. To ensure that your theme is displayed correctly with any language applied on a store view, you need to make sure that the unique strings of your theme are added to the translation dictionary when the i18n tool is run. \nThen when a new {% glossarytooltip 9c4c7b9b-43f0-4454-8e8c-fb62ad40c35f %}language package{% endglossarytooltip %} is created and used to translate a store view, all theme strings are translated as well.\n\nThis topic describes how to add theme strings in a way that they get collected by the i18n tool and are added to the dictionary.\n\nStrings added in .phtml templates\n\nTo ensure that your new string is added to the dictionary and translated, use the `__('')` method when outputting a string in a .phtml template.\n\nFor example:\n\n{% highlight html+php %}\n\t\n{% endhighlight html+php %}\n\nIf your string contains a variable, to add a placeholder for this variable in the dictionary, use syntax similar to the following:\n\n{% highlight html+php%}\n    \n{% endhighlight html+php%}\n\nIn this example, the 'Hello %s' string is added to the dictionary when the i18n tool is run.\n\nStrings added in email templates\n\nIf your theme contains custom email templates, their strings can be added to the dictionary as well. \nTo make sure the strings of an email template are added to the dictionary, use the  {% raw %} {{trans}}  {% endraw %} directive. \n\nCustom email templates added using the Admin panel, are not stored in the file system, and their stings are not added to the dictionary.\n\nStrings added in UI components' templates\n\nTo ensure that the text you add in `.html` templates of UI components is added to the dictionary, mark the text using the `i18n` custom binding. The following code samples illustrate how it should be used for different cases of adding a text:\n\n- when a string is added in the scope of an HTML element:\n \n{% highlight HTML%}\n    \n{% endhighlight HTML%}\n\n- when a string is added with no binding to an HTML element:\n\n{% highlight HTML%}\n    \n{% endhighlight HTML%}\t\n\n- when a string is added as an attribute of an HTML element:\n\n{% highlight HTML%}\n    \n{% endhighlight HTML%}\n\nStrings added in UI components configuration files\n\nTo ensure that the text you add in UI components configuration `.xml` files is added to the dictionary, use the `translate` attribute: set `translate=true` for the corresponding element. The following code sample is an illustration:\n\n{% highlight xml%}\n    Delete\n{% endhighlight xml%}\n\nIn this example, the *Delete* string is added to the dictionary when the i18n tool is run.\n\nStrings added in .js files\nTo ensure that the text you add in a .js file is collected by the i18n tool and added to the dictionary, take the following steps:\n\nLink the mage/translate library:\n\n{% highlight js%}\n\tdefine (['jquery', 'mage/translate'], function ($) {...});\n{% endhighlight js%}\n\nUse the $.mage.__('') function when adding a string:\n\n{% highlight js%}\n\t$.mage.__('');\n{% endhighlight js%}\n\nIf your string contains a variable, to add a placeholder for this variable to the string stored in the dictionary, use the syntax similar to the following:\n\n{% highlight js%}\n    $.mage.__('Hello %1').replace('%1', yourVariable);\n{% endhighlight js%}\n\nIn this example, the 'Hello %1' string is added to the dictionary when the i18n tool is run.\n\n\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/translations/translate_theory.html"
    }
    ,
  
    "guides-v2-0-pattern-library-displaying-data-tree-tree-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Tree pattern\nThis topic contains various types of Tree structures used in {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} with functions for navigating, multi-selecting, adding nodes, editing inline, and dragging items. \nFor solutions not described in this article, please refer to other related patterns or contact the Magento UX Design team.\n\nWhen to Use\nTree component will be needed anytime it is required to navigate though multiple layers of information and / or places where the information hierarchy needs to be shown to the user.\n\nComponents of Tree\nThe tree consists of two main \"Anchors\" and \"Links\"\n\n\n\n1. Anchors\nAnchors are items that always contain at least one child item and offer \"expand\" / \"collapse\" functionality by hiding or revealing its direct children.\n\n2. Link\nLink is a leaf level item which user can select to navigate to detail page or display details on same page.\n\nActive Link- Links that are active state and can be clicked to navigate to detail page.\n\nInactive Link- Links that are inactive state and cann't be clicked.\n\nBasic Functional Behavior\nAll trees must have these baseic functional behaviors.\n\n 1. 'N' Number of Levels \nThe propose tree can accommodate \"n\" levels of parent child relation. But only 2 levels of nesting is recommended.\n\n 2. Collapsing/Expanding individual tree items.\nThe arrow to the left of the item can be used to expand or collapses the children of an item you are interacting with.\n\n 3. Expand All \nClicking \"Expand All\" will open all the nodes in the tree structure. Expand All link is the default state. Once \"Expand All\" is clicked the link changes to \"Collapse All\" If user manually expand all the items, this control should also be changed to \"Collapse All.\"\n\n\n\n 4. Collapse All \nClickign \"Collapse All\" will condense all the nodes in the tree structure. Once \"Collapse All\" is clicked link changes to \"Expand All\".  If user manually collapsed all the items, this control should also be changed to \"Collapse All.\"\n\n\n\n\nUsage: Navigation\n\nThis is used to navigate to the detail page of the selected item in the admin or used as navigation to display more information on the same page.\n\nWhen tree is used to display more information on the same page the item clicked remains in selected state.\n\n\n\nUsage: Multi-Select\n\nThis is used when multiple selection of items are needed. \n\nType 1. Multi Select without Icon\n\n\nType 2. Multi Select with Icon\n\nThis tree has all functionality of multi-select tree along with having icons. Icons can be used along with the checkboxes to denote the difference in item types. (e.g. In Media management Icons can be used to differentiate between audio, video, image and folder types.) \n\nIcons should always be placed on the left of the icon label and Icons should NOT be used as default feature for trees pattern.\n\n\n\nBehavior and Details of Multi Select Tree: \n\n1. Select All/Clear All\nSelect All is the default state for tree with multi select functionality. When this functionality is triggered:\n•\tAll checkboxes are checked \n•\tComplete tree DOESN’T highlight. \n•\t\"Select All\" link changes to \"Clear All\"\n\nWhen Clear All functionality is triggered – All the checkboxes are deselected. The \"Clear All\" link is only shown when everything is selected.\n\nOtherwise, the link remain \"Select All.\"\n\n\n\nNote: The \"Expand All/Collapse All\" control can appear simultaneously with the \"Select All/Clear All\" control. They operate independently.\n\n\n\n\n2. Select Indicators\n\n•\tPartial Selection – this appears when a parent has items BOTH in checked and unchecked states. Partial selection only occurs at anchor level.\n•\tUnchecked State – Item not selected and can be clicked for selection\n•\tChecked State – item selected and can be unchecked for de-selection.\n•\tUnchecked and Inactive – this state appears when the item is unselected and not active.\n•\tChecked and Inactive – this state appears when the item is selected and not active.\n\n\n\n\n3. Checking a checkbox for a child item should automatically change its parent state to:\n\n•\tPartially selected – if parent also contains unchecked children\n•\tChecked – if all checkboxes for all children are in \"checked\" state\n•\tUnchecked – if all children are in \"unchecked\" state.\n\n\n4. Checking a checkbox for a Parent item should automatically change its child state to:\n\n•\tChecked – if the parent state is changed from \"unchecked\" to \"checked\" state \n•\tUnchecked – if the parent state is changed from \"checked\" to \"unchecked\" state \n•\tPartial Selection – if parent has a partial selection state, clicking on it will unselect all the child items.\n\n\nDrag and Arrange\n\nThis can be used when user can drag and arrange items in tree. \n\nFunctional Behavior: Drag Handle\n\nDrag handles are used when the capability of dragging and arranging in a tree is needed. When an item is dragged out and moved to a desired location, the drop area is highlighted to show acceptable region. Once dropped, the pick-up area disappears. \nIf an item cannot be dropped into a specific location – the drop area will not be shown.\n\nRule: Drag Handle Vs Checkbox\nCheckboxes and Drag handles are mutually exclusive features. i.e. Tree structure that has checkboxes will NOT have drag feature and viz.\n\nNotes: Moving the Items in the tree will also affect the parent – child relationship.   \n\n\n\n\nType 1. Drag and Arrange with Icon\n\n\n\n\nType 2. Drag and Arrange without Icon\n\n\n\n\nAction Menu\nAction icon is used for any action that will be perform to the items in the tree. This may include edit, delete, move up, move down, etc.\n\nThe action icon is not required for the tree. It only appear as needed.\n\nStep 1: User click on the action icon.\n\n\nStep 2: The list of available actions against this item is shown. \n\n\nMove Up Once clicked, the item should be moved up within the parent. If the item is the first child, it cannot be moved up and the option will be disabled.\n\nMove Down Once clicked, the item should be moved down within the parent. If the item is the last child, it cannot be moved down and the option will be disabled.\n\nEdit Once clicked, this opens up a slide-out panel.\n\nRemove Once clicked, the item should be removed.\n\nAdd to Tree\n\nTriggers\nThe 'Add' triggers should be placed above the tree container area. (Note: the outline of the container is not always needed.) \n\nThere are two types of items that can be added:\n1. A Group item  This is the parent item, which means there can be children. Example: a folder for the media {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} or a new {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %}. The group item can also be added to another parent group. This allows for n-level tree.\n\n2. An item  This is the child. Example: a media item or a sub-category. The child item will be added to whichever parent is selected or to the same parent as sibling.\n\nThe \"add child\" button should always have more importance than the \"add parent\" button.\n\n\n\nInteraction\n\nStep 1: User click on the add button\n\n\nStep 2: A slide-out panel should opens up to get the details of what to be added/\n\nStep 3: The item is added. The placement of the items will be determined as stated above.\n\n\n\nStyle\n\n\n\nAssets\n\nDownload PhotoShop source file.\n\n\n\n\n\n\n\n\n",
      "url": "/guides/v2.0/pattern-library/displaying-data/tree/tree.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-broken-branch-html": {
      "title": "Resolve a broken branch",
      "content": "## Resolve issues with broken Git branches\nThis topic discusses solutions to typical issues you might experience with broken branches. You should have experience with Git [branches and commits](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging){:target=\"_blank\"} to effectively fix your branch. Additional information is linked as needed to help understand Git and {{site.data.var.ece}} builds and deployments.\n\nTo review logs, see [Troubleshoot your deployment]({{ page.baseurl }}cloud/access-acct/trouble.html).\n\n## Issues with installing patches {#patches}\nWhen you push your code, the build and deploy phases begin. Patch and available hotfix installation is part of the process. If you receive errors indicating the patches could not be installed and the build failed, you can run the following command locally to identify any errors:\n\n    git apply \n\nMake note of the errors. These may help determine what fixes are required. We can also help further with those speified errors.\n\nYou should apply patches in your local on your Git branch then push to the remote for normal build and deploy scripts to run. For full instructions, see [Patch and test Magento Commerce]({{ page.baseurl }}cloud/project/project-patch.html).\n\n## Code compile issues {#compile}\nIf you receive build errors due to compilation of your code, you may have disabled modules that are not correctly enabling for the compile commands.\n\nTo enable all modules:\n\n1. Log into your local machine, SSH into your Magento local system.\n2. Enter the following CLI commands:\n\n        bin/magento module:enable --all\n        bin/magento setup:di:compile\n\nThese commands enable all extensions and run the compile part of the build. Verify if you continue to encounter errors or issues.\n\n## Broken build trying to force build using the Magento Cloud CLI {#cli-build}\nWhen we initially provision your project, you receive a cloned `master` branch. You should clone the `master` to your local workspace and create a branch from it to complete all of your development.\n\nWhen you want to build and deploy the code to the Integration environment, you should not force the build using the Magento Cloud CLI commands to initiate a build command. This can cause the build to break. The command may check for specific variables and settings not in your local but in the remote environment. The automated build process also runs a specific series of scripts and commands when you push your code to your remote Git branch and environment.\n\nFor example, when using the Magento Cloud CLI commands, you may have received the error during a build: `E: Error building project: The build hook failed with status code 255. Build aborted`.\n\nIf your build broke in this situation, we recommend force resetting the code from the remote and following normal [build and deploy]({{ page.baseurl }}cloud/live/live-sanity-check.html#push) processes. The branch could have inaccurate files, incomplete steps, that require fully resetting the code and building normally.\n\n1. If you have code commits for your branch, you should move those commits to a new branch. When [resetting your code](https://git-scm.com/docs/git-reset){:target=\"_blank\"} branch, you will lose any and all code commits.\n\n    We recommend using [`git stash`](https://git-scm.com/docs/git-stash){:target=\"_blank\"} to save your current branch. You can pull code from the stash into your reset branch.\n\n    Or you can create a branch of the commits to add the work back after resetting the branch.\n2. You will need to locate a specific commit number to reset back to. If you do not include a  SHA or ID, the reset will reference the latest commit.\n\n    To get a log of commits, you can use the [`git log`](https://git-scm.com/docs/git-log){:target=\"_blank\"} command for a verbose list of commits to copy an ID:\n\n        git log\n\n    Or use the [`git reflog`](https://git-scm.com/docs/git-reflog){:target=\"_blank\"} command for a list of commit IDs with commit message:\n\n        git reflog\n3. Force reset your code branch on your local. This will force return the code to the current remote branch.\n\n        git reset --hard \n\n    \n    You will lose committed code, if any. Make sure to backup, stash, or make a new branch to save your code.\n    \n4. Push code to start a normal build and deploy process. For the full process, see [Build and deploy on local]({{ page.baseurl }}cloud/live/live-sanity-check.html).\n\nYou should have a successful build. At this point, If you have code commits, commit those to the reset branch. Fully test to ensure the changes are correctly working.\n\n#### Related topics\n* [First-time local environment setup]({{ page.baseurl }}cloud/access-acct/first-time-setup.html)\n* [Build and deploy on local]({{ page.baseurl }}cloud/live/live-sanity-check.html)\n* [Deployment Process]({{ page.baseurl }}cloud/reference/discover-deploy.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble-broken-branch.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-crypt-key-variable-html": {
      "title": "Resolve issues with encryption key",
      "content": "This topic discusses solutions to typical issues you might experience with {{site.data.var.ee}} encryption key in your environments.\n\nFor a new Starter project, the Magento encryption key is on your `master` branch Production environment. When you branch to other environments, the key travels with the code and database.\n\nFor a new Pro project starting with a \"blank site\" {{site.data.var.ece}} template, the Magento encryption key is on the Integration `master` branch and environment until you [initially deploy]({{ page.baseurl }}cloud/access-acct/first-time-deploy.html) across all environments.\n\nIf you have imported data from an existing Magento installation into {{site.data.var.ece}}, you need to [copy the key]({{ page.baseurl }}cloud/access-acct/first-time-setup_import-prepare.html#encryption-key) and [deploy it]({{ page.baseurl }}cloud/access-acct/first-time-setup_import-import.html#encryption-key) to the environments.\n\n### Encryption key not in all environments {#cloud-trouble-nocrypt}\nAll Cloud environments require this encryption key in all three environments or the store will encounter authentication and authorization errors for actions like completing a payment on a cart, processing a return, and adding shipping to orders.\n\nTo verify and update the encryption key environment variable:\n\n1.  SSH to each of the Cloud environments: Integration, Staging, and Production.\n\n        magento-cloud environment:ssh\n2.  Open `app/etc/env.php` in a text editor.\n3.  Verify the existing value of `key` for `crypt`. The value should be your [{{site.data.var.ee}} key]({{ page.baseurl }}cloud/access-acct/first-time-setup_import-prepare.html#encryption-key).\n\n        {% highlight php startinline=true %}\n        return array (\n          'crypt' =>\n          array (\n            'key' => '',\n          ),\n        );\n        {% endhighlight %}\n4.  If the value is incorrect, add the key value, and save your changes to `env.php`.\n5.  Exit the text editor and repeat this process for each environment. Test store actions in each environment to verify if the issue persists, such as completing a cart purchase.\n\n#### Related topics\n*\t[List the current environment variables]({{page.baseurl}}cloud/env/environment-vars_over.html#cloud-env-list)\n*\t[Copy the encryption key]({{page.baseurl}}cloud/env/environment-vars_over.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble-crypt-key-variable.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-error-html-minification-html": {
      "title": "Resolve issues with HTML minification",
      "content": "## Resolve issues with HTML minification\nThis topic discusses solutions to typical issues you might experience by HTML minification.\n\n### Website load errors after scd-dump, build, and deploy\n\nAfter using the command `php bin/magento magento-cloud:scd-dump` to generate config.local.php, your website may encounter errors after build and deploy. When accessing the site, you may recieve the error \"failed to open stream: No such file or directory\" for a series of files.\n\nThe issue is due to an issue of enabling HTML minification and the setting in `config.local.php` when using `bin/magento magento-cloud:scd-dump`.\n\nAs a work-around, complete the following:\n\n1. Copy the file `app/etc/config.local.php` to your local.\n2. Edit and remove the minify section from `config.local.php`:\n\n\n    'template' =>\n          array (\n            'allow_symlink' => '0',\n            'minify_html' => '1',\n          ),\n2. Modify the setting for minify in the database with this command:\n\n\n      update core_config_data set value=0 where path ='dev/template/minify_html'\n3. Flush all caches.\n\n\n    php bin/magento cache:flush\n    redis-cli -h  -p  flushall\n4. Remove all `base_url` related items in `config.local.php`.\n5. Save changes and complete full deployment of `config.local.php`: push to Git branch, build and deploy, and deploy across environments as needed.\n",
      "url": "/guides/v2.0/cloud/trouble/trouble-error-HTML-minification.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-google-analytics-deploy-html": {
      "title": "Resolve issues with Google Analytics during deployment",
      "content": "## Resolve issues with Google Analytics during deployment\nThis topic discusses solutions to typical issues you might experience with Google Analytics during deployments from Integration to Staging to Production.\n\n### Google Analytics disables when deployed\nWhen deploying your code across environments, the build and deploy scripts verify the `master` branch is deployed to keep Google Analytics enabled. When deploying develop (or child) branches of master to developer environments (Integration), the deploy script disables Google Analytics. This is a working as intended feature to ensure developer data and interactions are not sent to or tracked by Google Analytics.\n\nFor technical details, the deploy script checks the `MAGENTO_CLOUD_ENVIRONMENT` variable for the string branch name of `master` (case sensitive comparison) defined for `GIT_MASTER_BRANCH`. This variables cannot be directly modified. If the deploy script verifies the deployed branch is Master, Google Analytics remains enabled. If a different branch is deployed (not Master), the deploy script will disable Google Analytics.\n\nTo always have Google Analytics enabled in Production, always deploy from the Master branch.\n\nAs a best practice, we recommend deploying from Master branch to your Production environment.\n",
      "url": "/guides/v2.0/cloud/trouble/trouble-google-analytics-deploy.html"
    }
    ,
  
    "guides-v2-0-cloud-access-acct-trouble-html": {
      "title": "Troubleshoot deployment",
      "content": "This topic discusses how to recover if you deployed the Magento application with the incorrect [Magento authentication keys]({{page.baseurl}}install-gde/prereq/connect-auth.html). For example, you might have used the keys for another account or you might have used Magento Community Edition (CE) keys instead of Magento Enterprise Edition (EE) keys.\n\nIf you used the incorrect keys, deployment fails. To recover, you must clone the project, add the correct keys to `auth.json`, and push the change to the master branch.\n\n\n  In this section, we assume that your project has a master branch only (master is the default branch when you first create a project). \n\n\nTo redeploy with the correct authentication keys:\n\n1.\tLog in to the machine that has your {{site.data.var.ece}} SSH keys.\n2.\tLog in to the project:\n\n\t\tmagento-cloud login\n3.\tCreate a branch to update code with the name `auth`:\n\n      magento-cloud environment:branch auth master\n4.\tChange to the project root directory.\n5.\tOpen `auth.json` in a text editor.\n\n    {\n       \"http-basic\": {\n          \"repo.magento.com\": {\n             \"username\": \"\",\n             \"password\": \"\"\n          }\n       }\n    }\n\n6.\tAdd the correct authentication keys.\n7.\tSave your changes and exit the text editor.\n8.\tCommit and merge your changes.\n\n\t\tgit add -A\n\t\tgit commit -m \"\"\n\t\tgit push origin master\n9.\tWait for the deployment to complete.\n\nMessages indicate whether deployment was successful. You can confirm a successful deployment by going to one of the **Environment routes** displayed on your screen.\n",
      "url": "/guides/v2.0/cloud/access-acct/trouble.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-html": {
      "title": "Troubleshooting",
      "content": "The troubleshooting topics help to resolve specific issues with your {{site.data.var.ece}} project. Before submitting a Support ticket, check the following:\n\n-  Verify your [credentials]({{page.baseurl}}cloud/trouble/trouble_ce-creds.html)\n-  Review the [log files]({{page.baseurl}}cloud/live/stage-prod-test.html)\n-  Search for relevant content in the {{site.data.var.ece}} documentation\n\nIf you still require technical support, you can create a Support ticket through the Project Web Interface:\n\n1. Log in to your Magento Cloud account.\n1. On the _Support Tickets_ tab, click **Create Ticket**. Or you can submit a ticket from your project view by clicking **Support** > **Submit ticket** from the top menu.\n1. Fill out the support ticket form and attach any helpful documentation, such as screenshots or notes.\n1. Click **Submit**.",
      "url": "/guides/v2.0/cloud/trouble/trouble.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-ce-creds-html": {
      "title": "Incorrect credentials",
      "content": "## Incorrect credentials\nThis topic discusses how to resolve issues with incorrect credentials in your `auth.json`. You might have entered Magento Community Edition (CE) credentials or shared keys for Magento Enterprise Edition (EE).\n\n### Symptom\nThe most common symptom of incorrect credentials is a deployment failure with an authentication error similar to the following:\n\n\tThe 'https://repo.magento.com/archives/magento/magento-cloud-configuration/magento-magento-cloud-configuration-1.0.3.0.zip' URL could not be accessed: HTTP/1.1 403 Forbidden\n\nTo see the error log:\n\n1.\t[Log in to your project]({{page.baseurl}}cloud/project/project-webint-basic.html#project-access).\n2.\tClick **Failure** to view the log as the following figure shows.\n\n\t![View the log for a failed deployment]({{ site.baseurl }}common/images/cloud_deploy-failure-creds.png){:width=\"600px\"}\n\n### Solution\nTo resolve this issue, you must clone the project locally and update `auth.json` with the correct {{site.data.var.ee}} [authorization keys]({{page.baseurl}}install-gde/prereq/connect-auth.html) and run `composer update` to update project dependencies. After that, you can deploy your project successfully and get started with your development.\n\nMake sure you're using your own keys, and *not* [shared account keys](http://docs.magento.com/m2/ce/user_guide/magento/magento-account-share.html){:target=\"_blank\"}.\n\n#### Get started\nTo get started:\n\n1.\tLog in to the machine on which your SSH keys are located.\n2.\tLog in to your project:\n\n\t\tmagento-cloud login\n3.\tList your projects:\n\n\t\tmagento-cloud project:list\n4.\tIf necessary, clone a project.\n\n\t\tmagento-cloud project:get \n4.\tChange to a project directory.\n\n\tFor example if your project is named Magento 2, `cd magento-2`\n\n#### Update `auth.json` and redeploy the environment\nTo resolve the issue with credentials:\n\n1.\tIf you haven't done so already, change to the project root directory.\n2.\tOpen `auth.json` in a text editor.\n3.\tChange the value of `username` to your {{site.data.var.ee}} public key.\n4.\tChange the value of `password` to your {{site.data.var.ee}} private key.\n5.\tSave your changes to `auth.json` and exit the text editor.\n6.\tUpdate project dependencies:\n\n\t\tcomposer update\n6.\tAdd, commit, and push your changes:\n\n\t\tgit add -A\n\t\tgit commit -m \"\"\n\t\tgit push origin master\n7.\tWait for the project to deploy.\n\n\tA snippet of messages for a successful deployment follows:\n\n{% collapsible Click to show/hide snippet %}\n\n{% highlight xml %}\n Building application 'mymagento' (runtime type: php:7.0, tree: e8450f9)\n      Generating runtime configuration.\n\n      Moving the application to the output directory\n      Prewarming composer cache.\n        Pre-downloaded 3 packages referenced in `composer.lock`\n\n      Found a `composer.json`, installing dependencies.\n\n      Executing post-build hook...\n        [2016-05-31 14:36:58] Start build.\n        [2016-05-31 14:36:58] Patching Magento.\n        [2016-05-31 14:36:58] Command:/usr/bin/php /app/vendor/magento/magento-cloud-configuration/src/Magento/MagentoCloud/../../../patch.php\n        [2016-05-31 14:36:59] Status:0\n        [2016-05-31 14:36:59] Output:array (\n\n... more ...\n\n[2016-05-31 14:36:59] Command:cd bin/; /usr/bin/php ./magento setup:di:compile\n        [2016-05-31 14:38:27] Status:0\n        [2016-05-31 14:38:27] Output:array (\n          0 => 'Compilation was started.',\n          1 => '%message% 0/7 [>---------------------------]   0% 1 sec 42.0 MiB%message% 0/7 [>---------------------------]   0% 1 sec 42.0 MiBProxies code generation... 0/7 [>---------------------------]   0% 1 sec 42.0 MiB',\n          2 => 'Proxies code generation... 1/7 [====>-----------------------]  14% 1 sec 48.0 MiB',\n          3 => 'Repositories code generation... 1/7 [====>-----------------------]  14% 1 sec 48.0 MiB',\n          4 => 'Repositories code generation... 2/7 [========>-------------------]  28% 12 secs 60.0 MiB',\n          5 => 'Service data attributes generation... 2/7 [========>-------------------]  28% 12 secs 60.0 MiB',\n          6 => 'Service data attributes generation... 3/7 [============>---------------]  42% 12 secs 60.0 MiB',\n          7 => 'Application code generator... 3/7 [============>---------------]  42% 12 secs 60.0 MiB',\n          8 => 'Application code generator... 4/7 [================>-----------]  57% 34 secs 174.0 MiB',\n          9 => 'Interceptors generation... 4/7 [================>-----------]  57% 34 secs 174.0 MiB',\n          10 => 'Interceptors generation... 5/7 [====================>-------]  71% 53 secs 180.0 MiB',\n          11 => 'Area configuration aggregation... 5/7 [====================>-------]  71% 53 secs 180.0 MiB',\n          12 => 'Area configuration aggregation... 6/7 [========================>---]  85% 2 mins 180.0 MiB',\n          13 => 'Interception cache generation... 6/7 [========================>---]  85% 2 mins 180.0 MiB',\n          14 => 'Interception cache generation... 7/7 [============================] 100% 2 mins 180.0 MiB',\n          15 => 'Generated code and dependency injection configuration successfully.',\n        )\n        [2016-05-31 14:38:27] Clearing temporary directory.\n        [2016-05-31 14:38:27] Command:rm -rf ../init/*\n        [2016-05-31 14:38:27] Status:0\n        [2016-05-31 14:38:27] Output:array (\n\n... more ...\n\n      Executing pre-flight checks...\n\n      Compressing application.\n      Beaming package to its final destination.\n\n    Creating environment aqf7hrijhl52o-master.\n      Environment configuration:\n        mymagento (type: php:7.0, size: S, disk: 2048)\n        mysql (type: mysql:10.0, size: S, disk: 2048)\n        redis (type: redis:3.0, size: S)\n        solr (type: solr:4.10, size: S, disk: 1024)\n\n      Environment routes:\n        http://master-aqf7hrijhl52o.us.magentosite.cloud/ is served by application `mymagento`\n        https://master-aqf7hrijhl52o.us.magentosite.cloud/ is served by application `mymagento`\n\n\nTo aqf7hrijhl52o@git.us.magento.cloud:aqf7hrijhl52o.git\n   34afd91..98c2166  master -> master\n{% endhighlight %}\n\n{% endcollapsible %}\n\n#### Verify the deployment\nTo verify the deployment was successful, enter one of the URLs displayed under `Environment routes:` in a web browser.\n\n\n\tFor security reasons, we strongly recommend you change your Magento Admin URI, administrator user name, and administrator password. For step-by-step details, see Set Magento environment variables.\n\n\n#### Related topics\n*\t[Manage your projects]({{page.baseurl}}cloud/project/projects.html)\n*\t[Manage your environments]({{page.baseurl}}cloud/env/environments.html)\n*\t[Tutorials]({{page.baseurl}}cloud/howtos/how-to.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble_ce-creds.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-comp-deploy-fail-html": {
      "title": "Component deployment failure",
      "content": "This topic discusses how to recover from a failed component deployment. Typical examples are components that have dependencies that are not met by your environment; for example, incompatible {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} versions.\n\nYou can recover from a failed deployment in any of the following ways:\n\n*   [Restore a snapshot]({{page.baseurl}}cloud/project/project-webint-snap.html) if you have one\n*   Remove the component from your environment's `composer.json` and redeploy the environment\n\n## Remove the component from `composer.json` and redeploy\nThis section discusses how to remove the component from the root `composer.json` in your environment and redeploy the environment:\n\n## Get started\n\n{% include cloud/cli-get-started.md %}\n\n## Find a component's Composer name\n\n{% include cloud/composer-name.md %}\n\n## Clear `var` directories\nTo clean up from the previous deployment, you must SSH to the environment and manually clear the contents of the Magento `var` directory.\n\n1.\tEnter the following command to SSH to the current environment:\n\n\t\tmagento-cloud environment:ssh\n\n2.\tClear the `var` directory:\n\n\t\trm -rf var/*\n\n## Remove the component\nTo remove the component:\n\n1.  Change to your environment's root directory if you haven't already done so.\n3.  Enter the following command:\n\n        composer remove :\n\n    If the following message displays, you don't need to do anything further:\n\n    \tPackage \":\" listed for update is not installed. Ignoring.\n\n4.  Wait while dependencies are updated.\n5.  Enter the following commands in the order shown to commit the changes and deploy the project:\n\n        git add -A\n        git commit -m \"\"\n        git push origin \n\n\n#### Related topics\n*\t[Manage your projects]({{page.baseurl}}cloud/project/projects.html)\n*\t[Manage your environments]({{page.baseurl}}cloud/env/environments.html)\n*\t[Tutorials]({{page.baseurl}}cloud/howtos/how-to.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble_comp-deploy-fail.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-fastly-html": {
      "title": "Fastly troubleshooting",
      "content": "For information setting up and configuring Fastly, see [Set up Fastly]({{ page.baseurl}}cloud/access-acct/fastly.html).\n\nTo verify the Fastly extension is working or to debug the Fastly extension, you can use the `curl` command to display certain response headers. The values of these response headers indicate whether or not Fastly is enabled and functioning properly. You can further investigate issues based on the values of headers and caching behavior.\n\n## Errors from Fastly {#errors}\nIf you receive the following errors with Fastly, check the following:\n\n* **503 error**: When you receive this error, check through logs and the Fastly 503 error page. See [503 timeouts](#timeouts) for details.\n* **Store menu doesn't display or work**: You may be using a link or temp link directly to the origin server instead of through the live site URL or you used `-H \"host:URL\"` in a [cURL command](#curl). If you bypass Fastly to the origin server, the main menu doesn't work and incorrect headers display that allow caching on a browser side.\n\n### 503 timeouts {#timeouts}\nIf you receive a 503 error, check the following logs and information to better troubleshoot the issue.\n\nFirst, check your [error log]({{ page.baseurl }}cloud/trouble/environments-logs.html) on your Production or Staging environment: `/var/log/platform//error.log`.  The log will include possible errors from the application or PHP engine. For example: `memory_limit` or `max_execution_time exceeded`\n\nIf the logs do not include errors related to Fastly, check the PHP access log: `/var/log/platform//php.access.log`. Check the log for an HTTP code 200 for the URL that threw a 503 error. If a 200 is returned for the URL, Magento returned the page without errors. The issue could have occurred after the interval that exceeds `first_byte_timeout` timeout configured by Fastly.\n\nWhen a 503 error occurs, Fastly returns the reason on the error and maintenance page. If you added code for a custom Error/Maintenance page, you can remove the custom code through the Magento Admin.\n\n1.\tLog into the Magento Admin for the Production or Staging Admin.\n2.\tClick **Stores** > **Settings** > **Configuration** > **Advanced** > **System**.\n3.\tIn the right pane, expand **Full Page Cache**.\n4.\tIn the **Fastly Configuration** section, expand **Error/Maintenance Page** as the following figure shows.\n\n\t![Custom Fastly error page]({{ site.baseurl }}common/images/cloud_fastly-503-page.png)\n5.\tClick **Set HTML**.\n3.\tRemove the custom code. You can save it in a text program to add back later.\n4.\tWhen you're done, click **Upload** to send your updates to Fastly.\n5.\tClick **Save Config** at the top of the page.\n6.\tReopen the URL that caused the 503 error. Fastly returns an error page with the reason. The following image is an example.\n\n\t![Fastly error]({{ site.baseurl }}common/images/cloud_fastly-503-example.png)\n\n### Apex and subdomains already in Fastly {#domains}\nIf your apex domain and subdomains are already managed by a Fastly account with an assigned Service ID, you cannot launch until you do the following:\n\n* Remove the apex domain and subdomains from an existing Fastly account, may include removing or changing the CNAME record\n* Complete configurations and CNAME for the Fastly account and Service ID we provide\n\nFastly only allows one apex domain and all subdomains assigned to a single Fastly service and account. For example, if you have the apex domain of mystore.com with subdomains of shoes.mystore.com and socks.mystore.com managed by an existing Fastly account, you need to remove them from that account before going live with Fastly and {{site.data.var.ece}}.\n\nFor details, review your Fastly accounts and [documentation](https://docs.fastly.com/) to remove the domains. This may include removing and updating CNAME records and more.\n\n## Locate Service ID {#service-id}\nYou can contact us for your Service ID for Staging and Production. For developers and advanced VCL users, you can also make a call using the Fastly variable `req.service_id`. This variable will return the Fastly `service_id`.\n\nFor example, you can add this to custom logging to capture the value. If you are using a custom logging format in your VCL, you can set the call to your format:\n\n    log {\"syslog \"}req.service_id{\" my_logging_endpoint_name :: \"}\n\nYou can then use the same vcl within different services.\n\n## Test your live site {#curl-live}\nFirst, check your live site to verify the response headers with `curl`. The command goes through the Fastly extension to receive responses. If you don't receive the correct headers, then you should test the [origin servers directly](#cloud-test-stage). This command returns the values of the `Fastly-Magento-VCL-Uploaded` and `X-Cache` headers.\n\nIf you don't have a live site set up with DNS, you can use either a static route or you can use the optional `--resolve` flag, which bypasses DNS name resolution.\n\nCheck for headers with a **dig command** to the URL. In a terminal application, enter `dig ` to verify Fastly services display in the headers. For additional `dig` tests, see Fastly's [Testing before changing DNS](https://docs.fastly.com/guides/basic-configuration/testing-setup-before-changing-domains){:target=\"\\_blank\"}.\n\n    dig http[s]://\n\nCheck response headers with **curl command**:\n\n1. In a terminal, enter the following command to test your live site URL:\n\n\t\tcurl http:// -vo /dev/null -HFastly-Debug:1 [--resolve]\n\n\tUse `--resolve` only if your live URL isn't set up with DNS and you don't have a static route set.\n\tFor example: `curl http://www.mymagento.biz -vo /dev/null -HFastly-Debug:1`\n2. Verify the [response headers](#response-headers) to ensure Fastly is working. The output for this command is similar to curl Staging and Production. For example, you should see the returned unique headers by this command:\n\n\t\t` to verify Fastly services display in the headers. For additional `dig` tests, see Fastly's [Testing before changing DNS](https://docs.fastly.com/guides/basic-configuration/testing-setup-before-changing-domains){:target=\"\\_blank\"}.\n\nFor example:\n\n* Staging: `dig http[s]://staging..c..ent.magento.cloud`\n* Production: `dig http[s]://.{1|2|3}..ent.magento.cloud`\n\n### curl command {#curl}\nNext, use a `curl` command to verify X-Magento-Tags exist and additional header information. The command format differs for Staging and Production.\n\nFor more information on these commands, you bypass Fastly when you inject `-H \"host:URL\"`, replace with origin to connecting location (CNAME information from your OneDrive Spreadsheet), `-k` ignores SSL, and `-v` provides verbose responses. If headers display correctly, check the live site and verify headers again.\n\n* If header issues occur when directly hitting the origin servers bypassing Fastly, you may have issues in your code, with extensions, or with the infrastructure.\n* If you encounter no errors directly hitting the origin servers, but headers are missing hitting the live domain through Fastly, you may have Fastly errors.\n\n**Staging:**\n\n\tcurl http[s]://staging..c..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1\n\n**Production:**\n\nThe load balancer:\n\n\tcurl http[s]://.c..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1\n\nA direct Origin node:\n\n\tcurl http[s]://.{1|2|3}..ent.magento.cloud -H \"host: \" -k -vo /dev/null -HFastly-Debug:1\n\nFor example, if you have a public URL `www.mymagento.biz`, enter a command similar to the following to test the production site:\n\n\tcurl -k https://www.mymagento.biz.c.sv7gVom4qrpek.ent.magento.cloud -H 'Host: www.mymagento.biz' -vo /dev/null -HFastly-Debug:1\n\nIf you do not have DNS set up for a public host name, enter a command similar to the following:\n\n\tcurl -k https://www.mymagento.biz.c.sv7gVom4qrpek.ent.magento.cloud -vo /dev/null -HFastly-Debug:1\n\n### Check response headers {#response-headers}\nFor detailed information on hits and misses, see Fastly's [Understanding cache HIT and MISS headers with shielded services](https://docs.fastly.com/guides/performance-tuning/understanding-cache-hit-and-miss-headers-with-shielded-services){:target=\"\\_blank\"}.\n\nCheck the returned response headers and values:\n\n*\tFastly-Magento-VCL-Uploaded should be present\n*\tX-Magento-Tags should be returned\n*\tFastly-Module-Enabled should be either Yes or the Fastly extension version number\n*\tX-Cache should be either `HIT` or `HIT, HIT`\n*\tx-cache-hits should be 1,1\n*\t[Cache-Control: max-age](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9){:target=\"\\_blank\"} should be greater than 0\n* [Pragma](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32){:target=\"\\_blank\"} should be `cache`\n\nThe following example shows the correct values for `Pragma`, `X-Magento-Tags`, and `Fastly-Module-Enabled`.\n\nThe output for cURL commands can be lengthy. The following is a summary only:\n\n\t* STATE: INIT => CONNECT handle 0x600057800; line 1402 (connection #-5000)\n\t* Rebuilt URL to: https://www.mymagento.biz.c.sv7gVom4qrpek.ent.magento.cloud/\n\t* Added connection 0. The cache now contains 1 members\n\t*   Trying 192.0.2.31...\n\t* STATE: CONNECT => WAITCONNECT handle 0x600057800; line 1455 (connection #0)\n\t  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\t  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to www.mymagento.biz.c.sv7gVom4qrpek.ent.magento.cloud (54.229.163.31) port 443 (#0)\n\t* STATE: WAITCONNECT => SENDPROTOCONNECT handle 0x600057800; line 1562 (connection #0)\n\t  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* ALPN, offering h2\n\n\t  ... portion omitted for brevity ...\n\n\t DONE handle 0x600057800; line 1955 (connection #0)\n\t* multi_done\n\t  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0\n\t* Connection #0 to host www.mymagento.biz.c.sv7gVom4qrpek.ent.magento.cloud left intact\n\n## Determine if VCL is not uploaded {#vcl-uploaded}\nTo determine if the default VCL snippets are not uploaded, check the following:\n\n* **Top level navigation does not work**: The top level navigation relies on Edge Side Includes (ESI) processing which is not enabled by default. When you upload the Magento VCL snippets during configuration, ESIs are enabled. See [Upload Fastly VCL snippets]({{ page.baseurl }}cloud/access-acct/fastly.html#upload-vcl-snippets).\n* **Pages are not caching**: By default Fastly doesn’t cache pages with Set-Cookies. Magento sets Cookies even on cacheable pages (TTL > 0). Magento Fastly VCL strips those cookies on cacheable pages. This may also happen if page block in a template is marked uncacheable. If this occurs, it's due to a 3rd party module or Magento extension blocking or removing the Magento headers. See [X-Cache missed section](#xcache-miss) for details.\n* **Geo-location/GeoIP does not work**: The uploaded Magento Fastly VCL snippets append the country code to the URL. See [Upload Fastly VCL snippets]({{ page.baseurl }}cloud/access-acct/fastly.html#upload-vcl-snippets).\n\n## Resolve errors found by cURL {#curl}\nThis section provides suggestions for resolving errors you might find using the `curl` command.\n\n### Fastly-Module-Enabled is not present {#no-module}\nIf you don't receive a \"yes\" for the `Fastly-Module-Enabled` in the response headers, you need to verify the Fasty module is installed and selected.\n\nTo verify Fastly is enabled in Staging and Production, check the configuration in the Magento Admin for each environment:\n\n1. Log into the Admin console for Staging and Production using the URL with /admin (or the changed Admin URL).\n2. Navigate to **Stores** > **Configuration** > **Advanced** > **System**. Scroll and click **Full Page Cache**.\n3. Ensure Fastly CDN is selected.\n4. Click on **Fastly Configuration**. Ensure the Fastly Service ID and Fastly API token are entered (your Fastly credentials). Verify you have the correct credentials entered for the Staging and Production environment. Click **Test credentials** to help.\n5. Edit your `composer.json` and ensure the Fasty module is included with version. This file has all modules listed with versions.\n\n\t* In the \"require\" section, you should have `\"fastly/magento2\": `\n\t* In the \"repositories\" section, you should have:\n\n\t\t\t\"fastly-magento2\": {\n\t\t\t\t\t\t\"type\": \"vcs\",\n\t\t\t\t\t\t\"url\": \"https://github.com/fastly/fastly-magento2.git\"\n\t\t\t\t}\n6. If you use [Configuration Management](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-over.html#cloud-config-specific-recomm), you should have a configuration file. Edit the `app/etc/config.app.php` (2.0, 2.1) or `app/etc/config.php` (2.2) file and make sure the setting `'Fastly_Cdn' => 1` is correct. The setting should not be `'Fastly_Cdn' => 0` (meaning disabled).\n\n\tIf you enabled Fastly, delete the configuration file and run the `bin/magento magento-cloud:scd-dump` command to update. For a walk-through of this file, see [Example of managing system-specific settings](https://devdocs.magento.com/guides/v2.1/cloud/live/sens-data-initial.html).\n\nIf the module is not installed, you need to install in an Integration environment branch and deployed to Staging and Production. See [Set up Fastly]({{ page.baseurl}}cloud/access-acct/fastly.html) for instructions.\n\n### Fastly-Magento-VCL-Uploaded is not present {#no-VCL}\nDuring installation and configuration, you should have uploaded the Fastly VCL. These are the base VCL snippets provided by the Fastly module, not custom VCL snippets you create. For instructions, see [Upload Fastly VCL snippets]({{ page.baseurl }}cloud/access-acct/fastly.html#upload-vcl-snippets).\n\n### X-Cache includes MISS {#xcache-miss}\nIf `X-Cache` is either `HIT, MISS` or `MISS, MISS`, enter the same `curl` command again to make sure the page wasn't recently evicted from the cache.\n\nIf you get the same result, use the [`curl` commands](#curl) and verify the [response headers](#response-headers):\n\n*\t`Pragma` is `cache`\n*\t`X-Magento-Tags` exists\n*\t`Cache-Control: max-age` is greater than 0\n\nIf the issue persists, another extension is likely resetting these headers. Repeat the following procedure in Staging to disable extensions to find which one is causing the issue. After you locate the extension(s) causes issues, you will need to disable the extension(s) in Production.\n\n1.\tLog in to the Magento Admin on your Staging or Production site.\n2.\tNavigate to **Stores** > **Settings** > **Configuration** > **Advanced** > **Advanced**.\n3.\tIn the Disable Modules Output section in the right pane, locate and disable all of your extensions*.\n5.\tClick **Save Config**.\n6.\tClick **System** > **Tools** > **Cache Management**.\n7.\tClick **Flush Magento Cache**.\n8.\tNow enable one extension at a time, saving the configuration and flushing the Magento cache.\n9.\tTry the [`curl` commands](#curl) and verify the [response headers](#response-headers).\n10.\tRepeat steps 8 and 9 to enable and test the `curl` commands. When the Fastly headers no longer display, you have found the extension causing issues with Fastly.\n\nWhen you isolate the extension that is resetting Fastly headers, contact the extension developer for additional assistance. We cannot provide fixes or updates for 3rd party extension developers to work with Fastly caching.\n\n## Purges do not process {#purge}\nIf you attempt to use a Fastly purge option, and it does not process, you may have incorrect Fastly credentials in your environment or may have encountered an issue. You may receive the error: \"The purge request was not processed successfully.\"\n\n### Check Fasty credentials {#creds}\nVerify if you have the correct Fastly Service ID and API token in your environment. If you have Staging credentials in Production, the purges may not process or process incorrectly.\n\n1. Log in to your local Magento Admin as an administrator.\n2. Click **Stores** > **Settings** > **Configuration** > **Advanced** > **System** and expand **Full Page Cache**.\n3. Expand **Fastly Configuration** and verify the Fastly Service ID and API token for your environment.\n4. If you modify the values, click **Test Credentials**.\n\n### Check VCL snippets {#snippets}\nIf the credentials are correct, you may have issues with your VCLs. To list and review your VCLs per service, enter the following API call in a terminal:\n\n\tcurl -X GET -s https://api.fastly.com/service//version//snippet/ -H \"Fastly-Key: \"\n\nReview the list of VCLs. If you have issues with the default VCLs from Fastly, you can upload again or verify the content per the [Fastly default VCLs](https://github.com/fastly/fastly-magento2/tree/master/etc/vcl_snippets){:target=\"\\_blank\"}. For editing your custom VCLs, see [Custom Fastly VCL snippets]({{ page.baseurl}}cloud/configure/cloud-vcl-custom-snippets.html).\n\n## Activating a deactivated version {#activate}\nUsing `curl` commands and APIs, you can activate, deactivate, and delete a version and service. If you have deactivated a service, you have deactivated the version without leaving any version active.\n\n1. List and find a version you want to activate. For a fully deactivated service, all of the versions will have a flag of `active: false`.\n\n    curl -X GET -s https://api.fastly.com/service//version -H \"Fastly-Key: \"\n\n2. Use the following command to validate all snippets for the version you want to activate:\n\n  \tcurl -H \"Fastly-Key: {FASTLY_API_TOKEN}\" -H 'Content-Type: application/json' -H \"Accept: application/json\" -X GET https://api.fastly.com/service/{FASTLY_SERVICE_ID}/version/{Editable Version #}/validate\n\n  Fastly should return: `\"status\": \"ok\"`.\n\n3. To activate a deactivated Version, enter the Service ID and Version in the following command:\n\n\t   curl -H \"Fastly-Key: {FASTLY_API_TOKEN}\" -H 'Content-Type: application/json' -H \"Accept: application/json\" -X PUT https://api.fastly.com/service/{FASTLY_SERVICE_ID}/version/{Editable Version #}/activate\n\nIf you want to activate an older version, you need to deactivate the currently active version:\n\n  curl -H \"Fastly-Key: {FASTLY_API_TOKEN}\" -H 'Content-Type: application/json' -H \"Accept: application/json\" -X PUT https://api.fastly.com/service/{FASTLY_SERVICE_ID}/version/{Editable Version #}/deactivate\n\nThen activate the version you want active:\n\n  curl -H \"Fastly-Key: {FASTLY_API_TOKEN}\" -H 'Content-Type: application/json' -H \"Accept: application/json\" -X PUT https://api.fastly.com/service/{FASTLY_SERVICE_ID}/version/{Editable Version #}/activate\n\n#### Related topics\n* [Fastly in Cloud]({{ page.baseurl}}cloud/basic-information/cloud-fastly.html)\n* [Set up Fastly]({{ page.baseurl}}cloud/access-acct/fastly.html)\n* [Custom Fastly VCL snippets]({{ page.baseurl}}cloud/configure/cloud-vcl-custom-snippets.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble_fastly.html"
    }
    ,
  
    "guides-v2-0-cloud-trouble-trouble-proj-startover-html": {
      "title": "Resolve issues with a new project",
      "content": "## Resolve issues with a new project\nThis topic discusses solutions to typical issues you might experience with a new project.\n\n### Project has no code yet {#cloud-trouble-nocode}\nIf you didn't push code to the project because, for example, you didn't complete the setup wizard, the following message displays next to the project name:\n\n![If the project has no code]({{ site.baseurl }}common/images/cloud_trouble_no-code.png)\n\nClick the **This project has no code yet** link next to the project name to start the wizard again and see [First-time setup]({{page.baseurl}}cloud/access-acct/first-time-setup.html#account).\n\n#### Related topics\n*\t[Manage your projects]({{page.baseurl}}cloud/project/projects.html)\n*\t[Manage your environments]({{page.baseurl}}cloud/env/environments.html)\n*\t[Tutorials]({{page.baseurl}}cloud/howtos/how-to.html)\n",
      "url": "/guides/v2.0/cloud/trouble/trouble_proj-startover.html"
    }
    ,
  
    "guides-v2-0-howdoi-troubleshoot-troubleshoot-html": {
      "title": "Troubleshooting Magento",
      "content": "## Troubleshooting Magento\n\n- [Reset the store theme to default using DB]({{page.baseurl}}howdoi/troubleshoot/reset_theme.html)\n",
      "url": "/guides/v2.0/howdoi/troubleshoot/troubleshoot.html"
    }
    ,
  
    "guides-v2-0-mtf-troubleshooting-html": {
      "title": "Troubleshoot the Functional Testing Framework issues",
      "content": "### Installation issues {#install-issues}\n\n#### Selenium Server issue\n\nError message:\n\n    PHPUnit_Extensions_Selenium2TestCase_WebDriverException: Unable to connect to host 127.0.0.1 on port 7055 after 45000 ms. Firefox console output: in selenium server console output\n\n* **Reason**: a Selenium server is [incompatible with your browser version](http://docs.seleniumhq.org/about/platforms.jsp#browsers)\n* **Solution**: [download the latest Selenium Standalone Server version](http://docs.seleniumhq.org/download/)\n",
      "url": "/guides/v2.0/mtf/troubleshooting.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-tshoot-varnish-503-html": {
      "title": "Troubleshooting 503 (Backend Fetch Failed) errors",
      "content": "If the length of {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} tags used by Magento exceed Varnish's default of 8192 bytes, you can see HTTP 503 (Backend Fetch Failed) errors in the browser. The errors might display similar to the following:\n\n\tError 503 Backend fetch failed\n\tBackend fetch failed\n\nTo resolve this issue, increase the default value of the `http_resp_hdr_len` parameter in your Varnish configuration file. The `http_resp_hdr_len` parameter specifies the max header length _within_ the total default response size of 32768 bytes.\n\n\n\tIf the http_resp_hdr_len value exceeds 32768 bytes, you must also increase the default response size using the http_resp_size parameter.\n\n\n1.\tAs a user with `root` privileges, open your Vanish configuration file in a text editor:\n\n\t*\tCentOS 6: `/etc/sysconfig/varnish`\n\t*\tCentOS 7: `/etc/varnish/varnish.params`\n\t*\tUbuntu: `/etc/default/varnish`\n\n2.\tSearch for the `http_resp_hdr_len` parameter.\n3.\tIf the parameter doesn't exist, add it after `thread_pool_max`.\n4.\tSet `http_resp_hdr_len` to a value equal to the product count of your largest {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %} multiplied by 21. (Each product tag is about 21 characters in length.)\n\n\tFor example, setting the value to 65536 bytes should work if your largest category has 3,000 products:\n\n\t\t-p http_resp_hdr_len=65536 \\\n\n5.  Set the `http_resp_size` to a value that accommodates the increased response header length.\n\n\tFor example, using the sum of the increased header length and default response size is a good starting point (e.g., 65536 + 32768 = 98304):\n\n\t\t-p http_resp_size=98304 \\\n\n\tA snippet follows:\n\n\t\t# DAEMON_OPTS is used by the init script.\n\t\tDAEMON_OPTS=\"-a ${VARNISH_LISTEN_ADDRESS}:${VARNISH_LISTEN_PORT} \\\n             -f ${VARNISH_VCL_CONF} \\\n             -T ${VARNISH_ADMIN_LISTEN_ADDRESS}:${VARNISH_ADMIN_LISTEN_PORT} \\\n             -p thread_pool_min=${VARNISH_MIN_THREADS} \\\n             -p thread_pool_max=${VARNISH_MAX_THREADS} \\\n             -p http_resp_hdr_len=65536 \\\n             -p http_resp_size=98304 \\\n             -S ${VARNISH_SECRET_FILE} \\\n             -s ${VARNISH_STORAGE}\"\n",
      "url": "/guides/v2.0/config-guide/varnish/tshoot-varnish-503.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-tshoot-html": {
      "title": "Troubleshooting suggestions",
      "content": "The following topics discuss Component Manager and System Upgrade errors and suggested solutions:\n\n### Both Component Manager and System Upgrade\n*\tTroubleshoot cron\n*\tTroubleshoot component dependencies\n*\tTroubleshoot the updater application\n*\tTroubleshoot backup\n\n### System Upgrade only\n*\t\"Sorry, we can't take that action right now\"\n*\tMissing .gitignore files\n*\tRoll back after upgrade failure\n*\tCE to EE upgrade failure\n\n",
      "url": "/guides/v2.0/comp-mgr/trouble/tshoot.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-html": {
      "title": "Troubleshooting suggestions",
      "content": "\n  Totally lost? Need a helping hand? Try our installation quick reference (tutorial) or installation roadmap (reference).\n\n\nThe following topics discuss the installation errors and suggested solutions:\n\n*\tYou cannot access the Magento software in a web browser\n*\t503 (Service Unavailable) errors accessing Magento software in a web browser\n*\tAfter installing, images and stylesheets do not load; only text displays, no graphics.\n*\tErrors installing sample data\n*\tError after logging in to the Magento Admin\n*\tInstallation dependencies not met\n*\tDuring installation, fatal PDO error displays\n*\tDuring installation, Reflection Exception error\n*\tInstallation fails; cannot create install.log\n*\tDuring installation, xdebug maximum function nesting level error\n*\tgit pull origin develop fails when updating the Magento software\n*\tCannot clone the Magento GitHub repository\n*\tThe PHP mcrypt extension is not installed properly\n*\tDuring installation, PHP date warning\n*\tCannot run composer install\n*\tError 'MySQL server has gone away' during installation\n\n\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-70pct-html": {
      "title": "Installation stops at about 70%",
      "content": "During installation using the Setup Wizard, the process stops at about 70% (with or without sample data). No errors display on the screen.\n\nCommon causes for this issue include:\n\n*\tThe {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} setting for `max_execution_time`\n*\tTimeout values for {% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %} and Varnish\n\n### Solution:\nSet all of the following as appropriate.\n\n#### All web servers and Varnish\n\n1.\tLocate your `php.ini` using a [`phpinfo.php`]({{ page.baseurl }}install-gde/prereq/optional.html#install-optional-phpinfo) file.\n2.\tAs a user with `root` privileges, open `php.ini` in a text editor.\n3.\tLocate the `max_execution_time` setting.\n4.\tChange its value to `18000`.\n5.\tSave your changes to `php.ini` and exit the text editor.\n6.\tRestart Apache:\n\n\t*\tCentOS: `service httpd restart`\n\t*\tUbuntu: `service apache2 restart`\n\n\tIf you use nginx or Varnish, continue with the following sections.\n\n#### nginx only\nIf you use nginx, use our included `nginx.conf.sample` or add a timeout settings in the nginx host configuration file to the `location ~ ^/setup/index.php` section as follows:\n\t\n\tlocation ~ ^/setup/index.php {\n\t\t.....................\n\t\tfastcgi_read_timeout 600s;\n       \tfastcgi_connect_timeout 600s;\n\t}\n\nRestart nginx: `service nginx restart`\n\n#### Varnish only\nIf you use Varnish, edit `default.vcl` and add a timeout limit value to the `backend` stanza as follows:\n\n\tbackend default {\n    .....................\n\t      .first_byte_timeout = 600s;\n\t}\n\nRestart Varnish.\n\n\t\tservice varnish restart\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_70pct.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-access-browser-html": {
      "title": "Cannot access Magento software in a web browser",
      "content": "### Symptom: The following message displays when you try to access the Magento storefront or Admin:\n\n\tWhoops, it looks like you have an invalid PHP version.\n\tMagento supports PHP 5.5 or newer.\n\t\n#### Solution\n\nEither upgrade {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} or restart Apache (Apache might not be using the same PHP version as is on the file system).\n\n### Symptom: A 404 (Not Found) error displays.\n\n#### Solution\nTry the following:\n\n*\tMake sure [Apache server rewrites]({{page.baseurl}}install-gde/prereq/apache.html) are enabled.\n\n\tIf Apache server rewrites are set incorrectly, static files aren't served from the correct location.\n\n*\tLikely an issue with the base URL you entered during the installation. You specify the base URL as the value of `--base-url=` when installing Magento from the command line or as the value of the **Your Store Address** field on the Web Configuration page of the web installer.\n\t\n\tThe base URL *must* start with the scheme (such as `http://`) and end with a trailing slash (/). Run the installer again with a valid value and try accessing Magento afterward.\n\n\tTo restart Apache:\n\n\t*\tUbuntu: `service apache2 restart`\n\t*\tCentOS: `service httpd restart`\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_access-browser.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-access-main-html": {
      "title": "Access issues",
      "content": "*\t[Cannot access Magento software in a web browser]({{ page.baseurl }}install-gde/trouble/tshoot_access-browser.html)\n*\t[503 (Service Unavailable) errors accessing Magento software in a web browser]({{ page.baseurl }}install-gde/trouble/php/tshoot_mod_access_compat.html)\n*\t[After installing, images and stylesheets do not load; only text displays, no graphics]({{ page.baseurl }}install-gde/trouble/tshoot_no-styles.html)\n*\t[Exceptions during installation]({{ page.baseurl }}install-gde/trouble/tshoot_access-browser.html)\n*\t[Cannot write to the var/generation directory]({{ page.baseurl }}install-gde/trouble/tshoot_var-gen-perms.html)\n*\t[Installation dependencies not met]({{ page.baseurl }}install-gde/trouble/tshoot_install_depend.html)\n*\t[Error after logging in to the Magento Admin]({{ page.baseurl }}install-gde/trouble/tshoot_admin.html)\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_access-main.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-admin-html": {
      "title": "Error after logging in to the Magento Admin",
      "content": "### Details\n\n\tThe requested URL /magento2index.php/admin/admin/dashboard/index/key/0c81957145a968b697c32a846598dc2e/ was not found on this server.\n\nNote the lack of a slash character between magento2 and index.php in the {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %}.\n\n### Solution\n\nThe base URL is not correct. The base URL must start with http:// or https:// *and* it must end with a slash (/). Run the installation again with a valid value.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_admin.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-tshoot-backup-html": {
      "title": "Troubleshoot backups",
      "content": "A backup can fail for any of the following reasons:\n\n*\tInsufficient disk space\n*\tAn operating system error\n*\tBackup fails\n\nInsufficient disk space\nIf the backup failed because of insufficient disk space, you should typically free up disk space by moving some files to another storage device or drive. However, there might be other ways to resolve the issue. See one of the following resources for tips:\n\n*\t8 Tips to Solve Linux & Unix Systems Hard Disk Problems Like Disk Full Or Can’t Write to the Disk\n*\tserverfault: df says disk is full, but it is not\n*\tunix.stackexchange.com: Tracking down where disk space has gone on Linux? \n\nOperating system error\nUnfortunately, we can't recommend anything specific because of the variety of errors you might encounter. We can suggest, however, you:\n\n*\tContact your system administrator\n*\tSearch public forums like stackexchange or stackoverflow\n*\tOpen a GitHub issue and we'll try to help\n\nBackup fails\nIf the backup fails or if all backup tests fail, it's possible the Magento file system owner doesn't have sufficient privileges and ownership of the Magento file system. For example, another user might own the files or the files might be read-only.\n\nPay particular attention to file system permissions and ownership of the `/var` directory and subdirectories. For more information, see [Set file system permissions and ownership]({{ page.baseurl }}install-gde/prereq/file-system-perms.html)\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/tshoot_backup.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-bundlesampledata-html": {
      "title": "Unknown module Magento_BundleSampleData",
      "content": "### Details\n\nDuring the installation, a  message similar to the following displays: \n\n\t[ERROR] exception 'LogicException' with message 'Unknown module in the requested list: 'Magento_BundleSampleData'' \n\n### Solution\nTry each of the following one at a time, then try your installation again.\n\n1.\tAs a user with `root` privileges, restart your web server and MySQL.\n\n\t*\tnginx: `service nginx restart`\n\t*\tApache (Ubuntu): `service apache2 restart`\n\t*\tApache (CentOS): `service httpd restart`\n\t*\tMySQL (Ubuntu): `service mysql restart`\n\t*\tMySQL (CentOS): `service mysqld restart`\n2.\tRun the [Web Setup Wizard]({{ page.baseurl }}install-gde/install/web/install-web.html).\n\n\tOn Step 4: Customize Your Store, expand **Advanced Modules Configurations** and clear the **Magento_BundleSampleData** check box as the following figure shows.\n\n\t![Clear the Magento_ModuleSampleData check box]({{ site.baseurl }}common/images/install_tshoot_bundlesample.png)\n3.\tClear all browser history and data from your web browser.\n4.\tIf you have Chrome, clear all browser data related to your site.\n\n\tGo to **Settings** > **Advanced options** > **Privacy** > **Content Settings** > **All cookies and site data**. In the Site column, click the address of your Magento server and click **Remove All**.",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_bundlesampledata.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-git-tshoot-clone-html": {
      "title": "Cannot clone the Magento GitHub repository",
      "content": "### Detail\n\nError is similar to the following:\n\nCloning into 'magento2'...\nPermission denied (publickey).\nfatal: The remote end hung up unexpectedly\n\n### Solution\n\nUpload your SSH key to GitHub as discussed in the GitHub help page.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/git/tshoot_clone.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-composer-fail-html": {
      "title": "Download fails because of changes in Composer",
      "content": "### Symptom\nDuring download, the following error displays:\n\n\t[ErrorException]\n  \tfile_get_contents(app/etc/NonComposerComponentRegistration.php): failed to open stream: No such file or directory\n\n### Description\nThis happens because of changes in certain versions of {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %}.\n\nThe workaround is to downgrade Composer to an earlier version and try your Magento download again.\n\nAny version of Composer dated between November 21 and November 26, 2015 has this issue. To confirm this issue is related to the Composer version, enter the following command:\n\n\tcomposer -v\n\nThe version displays similar to the following:\n\n\tComposer version 1.0-dev (2b14f0a047dd4f3545ec82381f65c36ea93a4c81) 2015-11-25 17:13:09\n\nNote the date is 2015-11-25, which indicates Composer has this issue.\n\nTo work around it:\n\n1.\tChange your version of Composer to enable you to download the Magento software by doing any of the following:\n\n\t*\tDowngrade Composer using the following command:\n\n\t\t\tcomposer self-update 1.0.0-alpha11\n\n\t*\tUpgrade Composer to a version later than November 26, 2015:\n\n\t\t\tcomposer self-update\n\n2.\tDelete your Magento 2 directory and subdirectories.\n3.\tTry the download again using either `composer create-project` or `git clone`.\n4.\tAfter successfully downloading the Magento software, update Composer:\n\n\t\tcomposer self-update\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_composer-fail.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-composer-install-html": {
      "title": "Cannot run 'composer install'",
      "content": "### Suggestion\n\nChange to the directory in which you installed {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} and enter the following command:\n\n`mv composer.phar /usr/local/bin/composer`\n\nIf you have issues with authenticating with the Magento 2 GitHub repository, see Get your authentication keys.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_composer-install.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-exceptions-html": {
      "title": "Exceptions during installation",
      "content": "### Symptom: Exceptions display during installation. Users have reported a variety of exceptions, including the following:\n\n\tModule 'Magento_Indexer':\n\tRunning recurring..\n\t[ERROR] exception 'Exception' with message 'Recoverable Error: Argument 1 passed to Magento\\Indexer\\Model\\Config\\Data::__construct() must be an instance of Magento\\Framework\\Indexer\\Config\\Reader, instance of Magento\\Indexer\\Model\\Config\\Reader given, called in /home/magento2_dev/\n\tpublic_html/var/generation/Magento/Indexer/Model/Config/Data/Interceptor.php on line 14 and defined in /home/magento2_dev/public_html/\n\tapp/code/Magento/Indexer/Model/Config/Data.php on line 22' in /home/magento2_dev/public_html/lib/internal/Magento/Framework/App/ErrorHandler.php:67\n\tStack trace:\n\t#0 /home/magento2_dev/public_html/app/code/Magento/Indexer/Model/Config/Data.php(22): Magento\\Framework\\App\\ErrorHandler->handler(4096, \n\t'Argument 1 pass...', '/home/magento2...', 22, Array)\n\t#1 /home/magento2_dev/public_html/var/generation/Magento/Indexer/Model/Config/Data/Interceptor.php(14): Magento\\Indexer\\Model\\Config\\Data->\n\t__construct(Object(Magento\\Indexer\\Model\\Config\\Reader), Object(Magento\\Framework\\App\\Cache\\Type\\Config), Object(Magento\\Indexer\\Model\\Resource\\Indexer\\State\\Collection), 'indexer_config')\n\t#2 /home/magento2_dev/public_html/lib/internal/Magento/Framework/ObjectManager/Factory/AbstractFactory.php(103): Magento\\Indexer\\Model\\Config\\Data\\Interceptor->__construct(Object(Magento\\Indexer\\Model\\Config\\Reader), Object(Magento\\Framework\\App\\Cache\\Type\\Config), \n\tObject(Magento\\Indexer\\Model\\Resource\\Indexer\\State\\Collection), 'indexer_config')\n\n\t... more ...\n\t\n#### Solution\nClear the `/var/generation` and other directories under `var` as follows:\n\n\trm -rf /var/generation/* /var/di/* /var/cache/* \n\nAfter clearing the directories, try the installation again.\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_exceptions.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-git-tshoot-git-main-html": {
      "title": "GitHub errors",
      "content": "## GitHub errors\n*\t[git pull origin develop fails when updating the Magento software]({{ page.baseurl }}install-gde/trouble/git/tshoot_git-pull-origin.html)\n*\t[Cannot clone the Magento GitHub repository]({{ page.baseurl }}install-gde/trouble/git/tshoot_clone.html)\n",
      "url": "/guides/v2.0/install-gde/trouble/git/tshoot_git-main.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-git-tshoot-git-pull-origin-html": {
      "title": "git pull origin develop fails when updating the Magento software",
      "content": "### Details\n\nOne of the steps to updating the Magento 2 software is to update your local repository by running:\n\n\tgit pull origin develop\n\nThe following error might display:\n\n\terror: Your local changes to the following files would be overwritten by merge:\n\t\n\nTo find which files are subject to being overwritten, either read the message or enter:\n\n\tgit status\n\nThe next section discusses suggested solutions.\n\n### Suggested solutions\n\nYour solution depends on whether or not you intentionally modified files in the Magento 2 file system. See one of the following sections for more information.\n\n#### You intentionally modified files\n\nManually resolve the conflicts in the usual way. If you're not sure what to do, consult GitHub help.\n\n#### You didn't intentionally modify any files\nTry any of the following:\n\n*\tIf you're certain you didn't modify any files and you don't mind removing or overwriting the changes in the Magento file system, enter:\n\n\t\tgit reset --hard HEAD && git pull origin develop\n\n\tAfter that, continue where you left off with your Magento 2 update.\n\n*\tIt's possible that a GitHub configuration setting can prevent these errors in the future. By default, GitHub stores content using the operating system-default line ending characters. If you're using Linux but another collaborator committed a change using Windows, GitHub converts the Windows line endings to Linux when you clone or pull. This gives the appearance of a change to files when in fact, no change was made.\n\n\tTo configure GitHub to ignore line endings, enter the following command in your Git client:\n\n\t\tgit config --system core.autocrlf false\n\n\tIf you use Windows, enter:\n\n\t\tgit config --system core.eol LF\n\n\t\n\t\t\n  \t\tMagento does not recommend or endorse any particular GitHub configuration settings. The preceding are suggestions only. For more information, consult the GitHub help.\n\t\n\n\tContinue where you left off with your Magento 2 update.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/git/tshoot_git-pull-origin.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-install-issues-html": {
      "title": "Known issues that affect installation",
      "content": "If you use the optional {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} `xdebug`, you can encounter exceptions:\n\n*   During installation \n*   Accessing either the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} or {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} after a successful installation \n\nSample exception:\n\n    Fatal error: Maximum function nesting level of '100' reached, aborting!\n\nTo resolve this issue, you can:\n\n*   Disable the `xdebug` extension.\n*   Set the value of `xdebug.max_nesting_level` to a value of 200 or more. For more information, see xdebug documentation.\n\nAfter you change the configuration of or disable `xdebug`, restart Apache:\n\n*   CentOS: `sudo service httpd restart`\n*   Ubuntu: `sudo service apache2 restart`\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_install-issues.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-install-log-html": {
      "title": "Installation fails; cannot create install.log",
      "content": "### Symptom\n\nThe Setup Wizard does not create `install.log` during the installation; as a result, the installation fails.\n\n### Details\n\nRunning Magento processes at the same time might result in problems creating the installation log. (For example, two different installations in separate tab pages.)\n\n### Solution\n\nReview your setting for `open_basedir` in `php.ini`. The Setup Wizard uses the sys_get_temp_dir ( void ) PHP call to get the value of the temporary directory. If open_basedir is set to refuse connections to a directory specified by `sys_get_temp_dir`, the installation fails.\n\nTo resolve the issue, change the value of `open_basedir` and restart the web server.\n\nIf you're not sure how to change this value, use the following steps:\n\n1.\tIf you haven't already done so, create phpinfo.php.\n2.\tEnter the following {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} in your browser's address or location field:\n\n\thttp://&lt;your web server IP or host name>/&lt;path to docroot>/phpinfo.php\n\n3.\tLook for the location of `php.ini`.\n\n\t`php.ini` is typically specified as **Loaded Configuration File** in the displayed results.\n\n4.\tAs a user with root privileges, open `php.ini` in a text editor.\n5.\tLocate the value of `open_basedir` and change it.\n6.\tSave your changes to `php.ini`.\n7.\tRestart the web server.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_install-log.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-install-main-html": {
      "title": "Errors during installation",
      "content": "*\t[Installation stops at about 70%]({{ page.baseurl }}install-gde/trouble/php/tshoot_70pct.html)\n*\t[Cannot install using nginx]({{ page.baseurl }}install-gde/trouble/php/tshoot_nginx-port.html)\n*\t[During installation, fatal PDO error displays]({{ page.baseurl }}install-gde/trouble/php/tshoot_pdo.html)\n*\t[During installation, Reflection Exception error]({{ page.baseurl }}install-gde/trouble/tshoot_wrong-mysql.html)\n*\t[During installation, exception SessionHandler::read()]({{ page.baseurl }}install-gde/trouble/php/tshoot_session.html)\n*\t[Errors installing optional sample data]({{ page.baseurl }}install-gde/trouble/tshoot_sample-data.html)\n*\t[Installation fails; cannot create install.log]({{ page.baseurl }}install-gde/trouble/tshoot_install-log.html)\n*\t[Download fails because of changes in Composer]({{ page.baseurl }}install-gde/trouble/tshoot_composer-fail.html)\n*\t[During installation, xdebug maximum function nesting level error]({{ page.baseurl }}install-gde/trouble/php/tshoot_xdebug.html)\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_install-main.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-install-depend-html": {
      "title": "Installation dependencies not met",
      "content": "### Details\nThis topic applies to you *only* if you [cloned the Magento 2 GitHub repository]({{ page.baseurl }}install-gde/prereq/dev_install.html).\n\nErrors similar to the following display when you run the Web Setup Wizard:\n\n Magento\\Framework\\Exception\n Command returned non-zero exit code:\n`/usr/bin/php5 -f '/var/www/magento2/dev/shell/run_data_fixtures.php' -- --bootstrap='MAGE_DIRS[base][path]=/var/www/magento2' 2>&1`\n\n[other errors]\n\n{% glossarytooltip 53da11f1-d0b8-4a7e-b078-1e099462b409 %}Exception{% endglossarytooltip %}\n {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} Fatal error:  Class 'Magento\\Framework\\Stdlib\\DateTime\\TimezoneInterface' not found in /var/www/magento2/app/bootstrap.php on line 56\n \nDependencies not installed. Please run 'composer install' under /setup directory.\n\nWhoops, it looks like setup tool dependencies are not installed.\n\n`/usr/bin/php -f '/var/www/html/magento2/dev/shell/run_data_fixtures.php' -- --bootstrap='MAGE_DIRS[base][path]=/var/www/html/magento2' 2>&1`\n Exception\n PHP Fatal error:  Class 'Magento\\Framework\\Stdlib\\DateTime\\TimezoneInterface' not found in /var/www/html/magento2/app/bootstrap.php on line 56\n \n\n\n  If the Web Setup Wizard stops, informs you that the installation is incomplete, but does not display an error in the console log, the likely cause is you did not run composer install from the &lt;your Magento install dir>/setup directory.\n  The entire message is Installation is incomplete. Check the console log for errors before trying again.\n\n \n### Description\n\nYou must run `composer install` from *both* the `` and `/setup` directories before installer.\n\n### Suggestion\n\nRun composer install from both of the preceding directories and try the installation again.\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_install_depend.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-mcrypt-html": {
      "title": "The PHP mcrypt extension is not installed properly",
      "content": "### Detail\n\nErrors can include the following:\n\nexception 'Exception' with message 'PHP Warning: {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} Startup: Unable to load dynamic {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} '/usr/lib/php5/20121212/mcrypt.so' - /usr/lib/php5/20121212/mcrypt.so: cannot open shared object file: No such file or directory\nInstalling data fixtures:\n/usr/bin/php -f '/Users/username/www/magento/dev/shell/run_data_fixtures.php' -- --bootstrap='MAGE_DIRS[base][path]=/Users/username/www/magento' 2>&1\n[ERROR] {% glossarytooltip 53da11f1-d0b8-4a7e-b078-1e099462b409 %}exception{% endglossarytooltip %} 'Exception' with message '\nFatal error: Uncaught exception 'Exception' with message 'Module 'Magento_Core' depends on 'mcrypt' PHP {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} that is not loaded.'\n\n======================================================================\n   The application has thrown an exception!\n======================================================================\n Magento\\Framework\\Exception\n Command returned non-zero exit code:\n`/usr/bin/php5 -f '/var/www/magento2/dev/shell/run_data_fixtures.php' -- --bootstrap='MAGE_DIRS[base][path]=/var/www/magento2' 2>&1`\n\n### Description\n\nParticularly on developer systems that include a Linux/Apache/MySQL/PHP (LAMP) \"stack\" that is separate from the operating system, it's possible that mcrypt is either not installed at all or it's installed in the LAMP stack's path but not the operating system's path.\n\nAs a result, the Magento installer cannot locate the extension and the installation fails.\n\n### Suggestion\n\nDetermine if the mcrypt extension is loaded in any of the following ways:\n\n*\tSet up a phpinfo.php file in the web server's root directory and examine the output in a web browser.\n*\tRun the following command:\n\n\tphp -r \"phpinfo();\" | grep mcrypt\n\n\tIf mycrypt is *not* installed, messages similar to the following display:\n\n\tPHP Warning:  PHP Startup: Unable to load dynamic library '/usr/lib/php5/20121212/mcrypt.so' - /usr/lib/php5/20121212/mcrypt.so: cannot open shared object file: No such file or directory in Unknown on line 0\n\nIn some cases, you might need to install the Magento software from the command line and specify the full path to the LAMP stack that has mcrypt installed.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_mcrypt.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-mod-access-compat-html": {
      "title": "503 (Service Unavailable) errors accessing Magento software in a web browser",
      "content": "503 (Service Unavailable) errors accessing Magento software in a web browser\n\n#### Symptoms\n\nWhen you try to access your {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} or {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} in a web browser, you get HTTP 503 (Service Unavailable) errors.\n\nTo confirm this issue is not related to maintenance mode, look in your Apache `error.log` for messages that include:\n\n\t\"Invalid command 'Order', perhaps misspelled or defined by a module not included in the server configuration\". \n\n#### Details\n\nApache 2.4 changes the way certain directives related to `.htaccess` work. The Magento software uses `.htaccess` to rewrite URLs. If `.htaccess` doesn't work properly, you cannot access the Magento software in a web browser.\n\nNot all Apache 2.4 distributions have this issue because in some cases, a compatibility {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} named `mod_access_compat` is enabled by default. If, however, your Apache 2.4 distribution has this module disabled, you must perform the tasks discussed in the next section. You can also consult the resources listed in the final section in this topic.\n\n#### Suggested solution\nAs a user with 'root' privileges, enter the following commands:\n\n\ta2enmod access_compat\n\tservice  restart\n\nOn CentOS, `` is `httpd`. On Ubuntu, `` is `apache2`.\n\n#### Additional resources\n\n*\tApache documentation about mod_access_compat\n*\tApache documentation about mod_authz_host\n*\tOrder, Allow, Deny from the Apache Definitive Guide\n*\taskubuntu.com\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_mod_access_compat.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-mysql-table-open-cache-html": {
      "title": "Error 'MySQL server has gone away' during installation",
      "content": "### Details\n\nDuring installation, the following message displays: \n\n\tMySQL server has gone away\n\n### Solution\n\nSet the value of table_open_cache to a value of at least 250 as follows:\n\n1.\tAs a user with `root` privileges, open the MySQL configuration file in a text editor.\n\n\tUbuntu 16: `/etc/mysql/mysql.conf.d/mysqld.cnf`\n\n\tUbuntu earlier than 16: `/etc/mysql/my.cnf`\n\n\tCentOS: `/etc/my.cnf`\n\n2.\tSearch for an existing `table_open_cache` setting. If there is none, add one.\n\n3.\tSet the value to at least 250:\n\n\t\ttable_open_cache=250\n\n4.\tSave your changes to `my.cnf` and exit the text editor.\n\n5.\tAs a user with `root` privileges, restart the MySQL service:\n\n\tUbuntu: `service mysql restart`\n\n\tCentOS: `service mysqld restart`\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_mysql_table-open-cache.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-nginx-port-html": {
      "title": "Cannot install using nginx",
      "content": "If you use the {% glossarytooltip b14ef3d8-51fd-48fe-94df-ed069afb2cdc %}nginx{% endglossarytooltip %} web server and you attempt to install the Magento software, the installation sometimes fails.\n\n### Detail\nYou can confirm the issue by the following error in the `var/report` directory:\n\n\tNOTE: You cannot install Magento using the Setup Wizard because the Magento setup directory cannot be accessed.\n\tYou can install Magento using either the command line or you must restore access to the following directory: /var/www/html/setup\n\tIf you are using the sample nginx configuration, please go to http://ce.mtf03.bcn.magento.com/setup/\";i:1;s:641:\"#0 /var/www/html/lib/internal/Magento/Framework/App/Http.php(213): Magento\\Framework\\App\\Http->redirectToSetup(Object(Magento\\Framework\\App\\Bootstrap), Object(Exception))\n\n### Workaround\nAppend `/setup` to the {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} by which you access the Setup Wizard or install the Magento software using the command line.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_nginx-port.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-no-styles-html": {
      "title": "After installing, images and stylesheets do not load; only text displays, no graphics",
      "content": "### Details\n\nThe path to images and stylesheets is not correct, either because of an incorrect base {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} or because server rewrites (CentOS, Ubuntu) are not set up properly. To confirm this is the case, use a web browser inspector to check the paths to static assets and verify those assets are located on the Magento file system.\n\nMagento static assets should be located under `/pub/static/` (there should be `frontend` and `adminhtml` directories).\n\n### Solution\n\n*\tVerify your Apache server rewrites setting and your Magento server's base URL and try again. If you set up the `AllowOverride` directive incorrectly, {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} aren't served from the correct location.\n\n*\tIf the Magento application is in production mode, try deploying static view files using the command `magento setup:static-content:deploy`.\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_no-styles.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-opcache-html": {
      "title": "Resolve an illegal offset error",
      "content": "In Magento 2.1 or later, when creating a new product in the Magento Admin, the following error might display:\n\n\tWarning: Illegal string offset 'is_in_stock' in [...]/vendor/\n\tmagento/module-catalog-inventory/Ui/DataProvider/Product/Form/\n\tModifier/AdvancedInventory.php on line 87\n\n### Detail\nMagento 2.1 and later use PHP code comments in the `getDocComment` validation call in the [`getExtensionAttributes`]({{ site.mage2100url }}lib/internal/Magento/Framework/Api/ExtensionAttributesFactory.php#L64-L73){:target=\"_blank\"} method in `Magento\\Framework\\Api\\ExtensionAttributesFactory.php`.\n\nIf you enabled the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} OPcache (which we recommend), this error displays because by default, the OPcache setting [`opcache.save_comments`](http://php.net/manual/en/opcache.configuration.php#ini.opcache.save_comments){:target=\"_blank\"} is disabled.\n\n### Workaround\nTo solve the issue, locate your OPcache configuration settings and enable `opcache.save_comments` as follows:\n\n#### Step 1: Locate your OPcache configuration\n{% collapsible To find OPcache configuration settings: %}\n\nPHP OPcache settings are typically located either in `php.ini` or `opcache.ini`. The location might depend on your operating system and PHP version. The OPcache configuration file might have an `[opcache]` section or settings like `opcache.enable`.\n\nUse the following guidelines to find it:\n\n*\tApache web server:\n\n\tFor Ubuntu with Apache, OPcache settings are typically located in `php.ini`. \n\n\tFor CentOS with Apache or nginx, OPcache settings are typically located in `/etc/php.d/opcache.ini`\n\n\tIf not, use the following command to locate it:\n\n\t\tsudo find / -name 'opcache.ini'\n\n*\tnginx web server with PHP-FPM: `/etc/php5/fpm/php.ini`\n\nIf you have more than one `opcache.ini`, modify all of them.\n\n{% endcollapsible %}\n\n#### Step 2: Enable `opcache.save_comments`\n1.\tOpen your OPcache configuration file in a text editor.\n2.\tLocate `opcache.save_comments` and uncomment it if necessary.\n3.\tMake sure its value is set to `1`.\n4.\tSave your changes and exit the text editor.\n5.\tRestart your web server:\n\n\t*\tApache, Ubuntu: `service apache2 restart`\n\t*\tApache, CentOS: `service httpd restart`\n\t*\tnginx, Ubuntu and CentOS: `service nginx restart`\n\n6.\tRegenerate DI configuration and all missing classes that can be auto-generated:\n\n\t*\t`php bin/magento setup:di:compile`\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_opcache.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-other-html": {
      "title": "Other issues",
      "content": "",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_other.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-pdo-html": {
      "title": "During installation, fatal PDO error displays",
      "content": "### Details\n\n\tPHP Fatal error:  Class 'PDO' not found in /var/www/html/magento2/setup/module/Magento/Setup/src/Module/Setup/ConnectionFactory.php on line 44\n\n### Solution:\n\nMake sure you installed all required PHP extensions (CentOS, Ubuntu). \n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_pdo.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-php-date-html": {
      "title": "During installation, PHP date warning",
      "content": "### Details\n\nDuring the installation, the following message displays: \n\n\tPHP Warning:  date(): It is not safe to rely on the system's timezone settings. [more]\n\n### Solution\n\nSet the [PHP timezone]({{ page.baseurl }}install-gde/prereq/php-settings.html) properly.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_php-date.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-php-main-html": {
      "title": "PHP errors",
      "content": "*\t[PHP settings errors]({{ page.baseurl }}install-gde/trouble/php/tshoot_php-set.html)\n*\t[The PHP mcrypt extension is not installed properly]({{ page.baseurl }}install-gde/trouble/php/tshoot_mcrypt.html)\n*\t[During installation, PHP date warning]({{ page.baseurl }}install-gde/trouble/php/tshoot_php-date.html)\n*\t[Resolve an illegal offset error]({{ page.baseurl }}install-gde/trouble/php/tshoot_opcache.html)\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_php-main.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-php-set-html": {
      "title": "PHP settings errors",
      "content": "always_populate_raw_post_data error\nIf you're upgrading the Magento 2 software, the following error can display during the readiness check:\n\n\n\nTo resolve the error:\n\n1.\tLocate your `php.ini` using a [`phpinfo.php`]({{page.baseurl}}install-gde/prereq/optional.html#install-optional-phpinfo) page.\n\n\t(Sometimes you have a different `php.ini` for the PHP command line and the web server. The `php.ini` you must change displays as **Loaded Configuration File**)\n\n2.\tAs a user with `root` privileges, open `php.ini` in a text editor.\n3.\tUncomment the following line:\n\n\t\talways_populate_raw_post_data = -1\n4.\tSave your changes to `php.ini` and exit the text editor.\n5.\tWait for all steps in the readiness check to finish.\n6.\tResolve any other issues displayed by the readiness check.\n7.\tAs a user with `root` privileges, restart your web server.\n\n\tExamples follow:\n\n\t*\tUbuntu: `service apache2 restart`\n\t*\tCentOS: `service httpd restart`\n\n8.\tOn the readiness check page, click **Try Again**.\n\n### PHP memory limit error {#trouble-php-memory}\nThe readiness checks makes sure you have at least 1GB of memory set aside for {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} processes. This setting should be sufficient for most installations, including installing optional sample data. However, we recommend at least 2GB for debugging.\n\nTo increase your PHP memory limit:\n\n1.\tLog in to your Magento server.\n2.\tLocate your `php.ini` file using the following command:\n\n\t\tphp --ini\n3.\tAs a user with `root` privileges, use a text editor to open the `php.ini` specified by `Loaded Configuration File`.\n4.\tLocate `memory_limit`.\n5.\tChange it to a value of `2GB` for normal use and debugging.\n6.\tSave your changes to `php.ini` and exit the text editor.\n7.\tRestart your web server.\n\n\tExamples follow:\n\n\t*\tCentOS: `service httpd restart`\n\t*\tUbuntu: `service apache2 restart`\n\t*\tnginx (both CentOS and Ubuntu): `service nginx restart`\n8.\tTry the installation again.\n\nxdebug maximum function nesting level error\n\nSee During installation, xdebug maximum function nesting level error.\n\nErrors display when you access a PHTML template\nError text is typically:\n\n    Parse error: syntax error, unexpected 'data' (T_STRING)\n\n#### Solution: Set asp_tags = off in php.ini\nMultiple templates have syntax for support abstract level on templates (use different templates engines like Twig) wrapped in `` tags, like this template for displaying a product image:\n\n{% highlight PHP inline=true %}\n\"\n    data-position=\"\"\n    alt=\"\" />\n{% endhighlight %}\n\nMore information about asp_tags.\n\nEdit `php.ini` and set `asp_tags = off`. For more information, see [Required PHP settings]({{ page.baseurl }}install-gde/prereq/php-settings.html).\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_php-set.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-phpini-html": {
      "title": "SQLSTATE[HY000] [2002] No such file or directory",
      "content": "### Details\n\nDuring or after installation, a  message similar to the following displays: \n\n\tException' with message 'PHP Fatal error: Uncaught exception 'PDOException' with message \n\t'SQLSTATE[HY000] [2002] No such file or directory \n\n### Solution\n\nThis is commonly caused by a different instance of {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} being used by the PHP command line compared to the web server. In particular, `mysql.sock` might be misconfigured if this is the case.\n\nTo determine whether or not you're using one instance of PHP:\n\n1.\tLog in to your Magento server.\n2.\tEnter the following command:\n\n\t\tphp -i | grep 'php.ini'\n\t\n\tThis determines the settings used by the PHP command-line interface (CLI). Note where `php.ini` is located.\n\n3.\tIf you haven't already done so, set up a phpinfo.php on your web server.\n4.\tCompare the value of **Loaded Configuration File** from `phpinfo.php` with the one from `php -i`. \n\n\t`phpinfo.php` shows the `php.ini` file used by your web server. If it's different from what's in PHP's `php.ini`, you must make *all* PHP settings consistent for both the PHP CLI and the web server.\n\n\tFor additional details, consult the documentation provided with your web server.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_phpini.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-readiness-tshoot-rc-cron-html": {
      "title": "cron readiness check issues",
      "content": "Following are symptoms of cron issues:\n\n*\tAn error message about the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} setting `$HTTP_RAW_POST_DATA` displays even though it's set properly\n*\tThe PHP readiness check doesn't display the PHP version as the following figure shows.\n\n\t\n*\tThe following error displays in the Magento Admin:\n\n\t![cron isn't running]({{ site.baseurl }}common/images/compman-cron-not-running.png){:width=\"550px\"}\n\n\tTo see the error, you might need to click **System Messages** at the top of the window as follows:\n\n\t![System Messages]({{ site.baseurl }}common/images/compman_sys-messages.png)\n\n{% include install/trouble/rc_cron.md %}\n",
      "url": "/guides/v2.0/install-gde/trouble/readiness/tshoot_rc_cron.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-readiness-tshoot-rc-depend-html": {
      "title": "Component dependency readiness check issues",
      "content": "{% include comp-man/dependency.md %}\n",
      "url": "/guides/v2.0/install-gde/trouble/readiness/tshoot_rc_depend.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-readiness-tshoot-rc-main-html": {
      "title": "Readiness check issues",
      "content": "*\t[cron readiness check issues]({{ page.baseurl }}comp-mgr/trouble/cman/cron.html)\n*\t[Component dependency readiness check issues]({{ page.baseurl }}install-gde/trouble/readiness/tshoot_rc_depend.html)\n*\t[PHP version readiness check issues]({{ page.baseurl }}install-gde/trouble/readiness/tshoot_rc_php.html)\n*\t[File permissions readiness check issues]( {{ page.baseurl }}install-gde/trouble/readiness/tshoot_rc_perms.html)\n\n",
      "url": "/guides/v2.0/install-gde/trouble/readiness/tshoot_rc_main.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-readiness-tshoot-rc-perms-html": {
      "title": "File permissions readiness check issues",
      "content": "{% include install/trouble/rc_perms.md %}\n",
      "url": "/guides/v2.0/install-gde/trouble/readiness/tshoot_rc_perms.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-readiness-tshoot-rc-php-html": {
      "title": "PHP version readiness check issues",
      "content": "{% include install/trouble/rc_php-version.md %}\n",
      "url": "/guides/v2.0/install-gde/trouble/readiness/tshoot_rc_php.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-sample-data-html": {
      "title": "Errors installing optional sample data",
      "content": "This topic discusses solutions to errors you might encounter installing optional sample data.\n\n#### Contents\n*\t[Symptom (file system permissions)](#trouble-samp-perms)\n*\t[Symptom (production mode)](#trouble-samp-prod)\n*\t[Symptom (security)](#trouble-samp-secy)\n*\t[Symptom (develop branch)](#trouble-samp-dev)\n*\t[Symptom (max_execution_time)](#trouble-samp-max)\n\n### Symptom (file system permissions) {#trouble-samp-perms}\nError in the console log during sample data installation using the Setup Wizard:\n\n\tModule 'Magento_CatalogRuleSampleData':\n\t[ERROR] exception 'Magento\\Framework\\Exception\\LocalizedException' with message 'Can't create directory /var/www/html/magento2/var/generation/Magento/CatalogRule/Model/.' in /var/www/html/magento2/lib/internal/Magento/Framework/Code/Generator.php:103\n\n\t(more)\n\n\tNext exception 'ReflectionException' with message 'Class Magento\\CatalogRule\\Model\\RuleFactory does not exist' in /var/www/html/magento2/lib/internal/Magento/Framework/Code/Reader/ClassReader.php:29\n\n\t(more)\n\nThese exceptions result from file system permissions settings.\n\n#### Solution\nSet file system ownership and permissions again as a user with `root` privileges.\n\n### Symptom (production mode) {#trouble-samp-prod}\nIf you're currently set for [production mode]({{ page.baseurl }}config-guide/bootstrap/magento-modes.html#production-mode), sample data installation fails if you use the [`magento sampledata:deploy`]({{ page.baseurl }}install-gde/install/cli/install-cli-sample-data-composer.html) command:\n\n\tPHP Fatal error: Uncaught TypeError: Argument 1 passed to Symfony\\Component\\Console\\Input\\ArrayInput::__construct() must be of the type array, object given, called in //vendor/magento/framework/ObjectManager/Factory/AbstractFactory.php on line 97 and defined in //vendor/symfony/console/Symfony/Component/Console/Input/ArrayInput.php:37\n\n#### Solution\nDon't install sample data in production mode. Switch to developer mode and clear some `var` directories and try again.\n\nEnter the following commands in the order shown as the [Magento file system owner]({{ page.baseurl }}install-gde/prereq/file-sys-perms-over.html):\n\n\tcd \n\tphp bin/magento deploy:mode:set developer\n\trm -rf var/generation/* var/di/*\n\tphp bin/magento sampledata:deploy\n\n### Symptom (security) {#trouble-samp-secy}\n\nDuring installation of optional sample data, a  message similar to the following displays:\n\n\tPHP Fatal error: Call to undefined method Magento\\Catalog\\Model\\Resource\\Product\\Interceptor::getWriteConnection() in /var/www/magento2/app/code/Magento/SampleData/Module/Catalog/Setup/Product/Gallery.php on line 144\n\n#### Solution\n\nDuring sample data installation, disable SELinux using a resource such as:\n\n*\tcrypt.gen.nz\n*\tCentOS documentation\n\n### Symptom (develop branch) {#trouble-samp-dev}\nOther errors display, such as:\n\n\t[Magento\\Setup\\SampleDataException] Error during sample data installation: Class Magento\\Sales\\Model\\Service\\OrderFactory does not exist\n\n#### Solution\n\nThere are known issues with using sample data with the Magento 2 develop branch. Use the master branch instead. You can switch to the master branch as follows:\n\n\tcd \n\tgit checkout master\n\tgit pull origin master\n\n### Symptom (max_execution_time) {#trouble-samp-max}\n\nThe installation stops before the sample data installation finishes. An example follows:\n\n\t(more)\n\n\tModule 'Magento_CustomerSampleData':\n\tInstalling data...\n\nSample data installation does not finish.\n\nThis error occurs when the maximum configured execution time of your {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} scripts is exceeded. Because sample data can take a long time to load, you can increase the value during your installation.\n\n#### Solution\n\nAs a user with `root` privileges, modify `php.ini` to increase the value of `max_execution_time` to 600 or more. (600 seconds is 10 minutes. You can increase the value to whatever you want.) You should change `max_execution_time` back to its previous value after the installation is successful.\n\nIf you're not sure where `php.ini` is located, enter the following command:\n\n\tphp --ini\n\nThe value of `Loaded Configuration File` is the `php.ini` you must modify.\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_sample-data.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-segfault-html": {
      "title": "Segmentation fault during rollback",
      "content": "### Symptom\nWhen you attempt to roll back using the command line, the following error displays:\n\n\tSegmentation fault\n\nAs a result, the rollback does not complete.\n\n### Details\nIn some cases, a very long query string causes the user's allocated memory space to run out of memory because of too many recursive calls. We're aware of this issue and are working on a solution.\n\n### Workaround\nUntil a solution is available, we recommend setting the `ulimit` for the Magento file system user to a value of 65536 or more.\n\nYou can do this either on the command line or you can make it a permanent setting for the user by editing their shell script.\n\nIf you haven't done so already, switch to the Magento file system owner.\n\nCommand:\n\n\tulimit -s 65536\n\nYou can change this to a larger value if needed.\n\n\n   \tThe syntax for ulimit depends on the UNIX shell you use. The preceding setting should work with CentOS and Ubuntu with the Bash shell. However, for Mac OS, the correct setting is ulimit -S 65532. Consult a man page or operating system reference for more information.\n\n\nTo optionally set the value in the user's Bash shell:\n\n1.\tIf you haven't done so already, switch to the Magento file system owner.\n2.\tOpen `/home//.bashrc` in a text editor.\n3.\tAdd the following line:\n\n\t\tulimit -s 65536\n\n4.\tSave your changes to `.bashrc` and exit the text editor.\n\t\n\n    We recommend you avoid setting a value for pcre.recursion_limit in php.ini because it can result in incomplete rollbacks with no failure notice.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_segfault.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-session-html": {
      "title": "During installation, exception SessionHandler::read()",
      "content": "**Symptom**: At the last step of installing Magento 2, the following {% glossarytooltip 53da11f1-d0b8-4a7e-b078-1e099462b409 %}exception{% endglossarytooltip %} displays:\n\n{% highlight PHP %} \nexception 'Exception' with message 'Warning: SessionHandler::read():\nopen(..) failed: No such file or directory (2) ../magento2/lib/internal/Magento/Framework/Session/SaveHandler.php on line 74' \nin ../magento2/lib/internal/Magento/Framework/App/ErrorHandler.php:67\n{% endhighlight %} \n\n\n\n\tThis error occurs only in code versions earlier than September 28, 2015. If you installed code dated September 29 or later, this error should not occur.\n\tFor more information about configuration options for Redis, see Configure Redis.\n\tFor more information about specifying Redis using the command-line installer, see the installation topic or the deployment configuration topic.\n\n\n### Solution:\n\nThis happens when your `session.save_handler` PHP parameter is set to some another session storage than `files` (for example, `redis`, `memcached`, and so on). This is a known issue we're working to resolve.\n\nSolutions:\n\n*\tUpgrade your Magento 2 code\n*\tUse the following workaround with existing code.\n\n### Locate `php.ini`\nLocate `php.ini` by entering the following command:\n\n\tphp -i | grep \"Loaded Configuration File\"\n\nTypical locations follow:\n\n*\tUbuntu: `/etc/php5/cli/php.ini`\n*\tCentOS: `/etc/php.ini`\n\n### Workaround\n1.\tAs a user with `root` privileges, open `php.ini` in a text editor.\n2.\tLocate `session.save_handler`\n3.\tSet it in any of the following ways:\n\n\t*\tTo comment it out:\n\n\t\t\t;session.save_path = \n\t\t\n\t*\tTo set it to a file system path:\n\t\t\n\t\t\tsession.save_handler = files\n\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_session.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-var-gen-perms-html": {
      "title": "Cannot write to the var/generation directory",
      "content": "### Symptom\nAfter you successfully install Magento, exceptions display when you try to access the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} or {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %}. (You might have to \nenable developer mode to see the exceptions.)\n\nSample exceptions follow:\n\n\tDirectory \"/var/www/html/magento2/pub/static/_requirejs/adminhtml/Magento/backend/en_US\" cannot be created Warning!mkdir(): Permission denied\n\n\tError filtering template: Unable to write file into directory /var/www/html/magento2/pub/media/catalog/product/cache/1/small_image/240x300/beff4985b56e3afdbeabfc89641a4582/m/b. Access forbidden.\n\n\texception 'Magento\\Framework\\Exception\\LocalizedException' with message 'Can't create directory /var/www/html/magento2/var/generation/Magento/Framework/App/ResourceConnection/.' in /var/www/html/magento2/vendor/magento/framework/Code/Generator.php:103 Stack trace: \n\t#0 /var/www/html/magento2/vendor/magento/framework/Code/Generator/Autoloader.php(35): Magento\\Framework\\Code\\Generator->generateClass('Magento\\\\Framewo...') \n\t#1 [internal function]: Magento\\Framework\\Code\\Generator\\Autoloader->load('Magento\\\\Framewo...') \n\t#2 [internal function]: spl_autoload_call('Magento\\\\Framewo...') \n\t#3 /var/www/html/magento2/vendor/magento/framework/Code/Reader/ClassReader.php(19): ReflectionClass->__construct('Magento\\\\Framewo...') \n\t#4 /var/www/html/magento2/vendor/magento/framework/ObjectManager/Definition/Runtime.php(44): Magento\\Framework\\Code\\Reader\\ClassReader->getConstructor('Magento\\\\Framewo...') \n\t#5 /var/www/html/magento2/vendor/magento/framework/ObjectManager/Factory/Dynamic/Developer.php(71): Magento\\Framework\\ObjectManager\\Definition\\Runtime->getParameters('Magento\\\\Framewo...') \n\t#6 /var/www/html/magento2/vendor/magento/framework/ObjectManager/ObjectManager.php(71): Magento\\Framework\\ObjectManager\\Factory\\Dynamic\\Developer->create('Magento\\\\Framewo...') \n\t#7 \n\t... more ...\n\n### Details\nMagento recommends different ownership and permissions settings based on if you use one user or two to run the Magento application.\n\nTypically, you have one user on shared hosting and two users on private hosting (or if you have your own server). There could be exceptions to this, however.\n \n### Suggestion\nReview our recommendations in [Overview of ownership and permissions]({{page.baseurl}}install-gde/prereq/file-sys-perms-over.html).\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_var-gen-perms.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-tshoot-wrong-mysql-html": {
      "title": "During installation, Reflection Exception error",
      "content": "### Details\n\nDuring the installation, a  message similar to the following displays: \n\n\t[ERROR] exception 'ReflectionException' with message 'Class Magento\\Framework\\StoreManagerInterface does not exist' \n\tin //lib/internal/Magento/Framework/Code/Reader/ClassReader.php\n\n### Solution\n\nClear all directories and files under Magento's `var` subdirectory and install the Magento software again.\n\nAs the Magento file system owner or as a user with `root` privileges, enter the following commands:\n\n\tcd /var\n\trm -rf cache/* di/* generation/* page_cache/*\n\n",
      "url": "/guides/v2.0/install-gde/trouble/tshoot_wrong-mysql.html"
    }
    ,
  
    "guides-v2-0-install-gde-trouble-php-tshoot-xdebug-html": {
      "title": "During installation, xdebug maximum function nesting level error",
      "content": "### Details\n\nDuring the installation, a  message similar to the following displays: \n\n\tPHP Fatal error: Maximum function nesting level of '100' reached, aborting! in /ClassLoader.php\n\n### Solution\n\nThere is a known issue with xdebug that can affect Magento installations or access to the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} or {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} after installation.\nFor details, see Known issue with xdebug.\n\n",
      "url": "/guides/v2.0/install-gde/trouble/php/tshoot_xdebug.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-templates-tutorial-template-first-html": {
      "title": "Sample template tutorial",
      "content": "A tutorial provides procedural information spread across multiple pages. It contains several design elements that differ from standard topics:\n\n* When a user clicks on a tutorial title from the left navigation area, the Devdocs {% glossarytooltip a3c8f20f-b067-414e-9781-06378c193155 %}website{% endglossarytooltip %} replaces the navigation with a table of contents that is specific to the tutorial.\n* **Next** and **Previous** buttons are displayed at the bottom of each topic.\n\n## Metadata parameters\n\nThe following table lists the {% glossarytooltip 3f0f2ef1-ad38-41c6-bd1e-390daaa71d76 %}metadata{% endglossarytooltip %} parameters that are used in a tutorial.\n\nParameter | Description\n--- | ---\n`layout:` | Must be `tutorial`.\n`group:` | The group, or book, to which the topic belongs.\n`subgroup:`| First page only. Places a link with the specified text to the {% glossarytooltip 31751771-8163-434b-88bc-c5f94d859fc3 %}sidebar{% endglossarytooltip %}\n`level3_subgroup:` | A group name that binds the tutorial topics together. This value must be specified on each topic in the tutorial.\n`title:` | The title of the tutorial.  On the first pageFor all other topics in the tutorial, this value should be in the form _Step X. Perform this task_. (For example, `Step 1. Configure the Store`)\n`subtitle` | Displays the tutorial name. The value must be specified on each topic in the tutorial.\n`menu_title:` | On the first page of the tutorial, specify `Initial tasks`. Otherwise, leave this line blank.\n`menu_order:` | The sequence number of the topic. If the topic is an intro topic in a multi-step tutorial, set this 0. Otherwise set it to the step number.\n`version:` | The version of Magento that this topic applies to.\n`github_link:` | The path to the MD file, starting at the book directory. Ex: `get-started/order-tutorial/order-intro.md`\n`ee_only:` | If set to `true`, graphics/cues indicating that the article applies to EE are displayed on devdocs.\n\n## Before you begin...\n{:.tutorial-before}\n\nThis tutorial will show a  how to  Summarize the goals of the tutorial and the benefit that the reader will receive upon completion. This summary should be very brief--about 3 lines.\n\n(Optional) The **X-step tutorial** generally takes **YY minutes**.\n\n## Complete these prerequisites\n\n* List any skills required (PHP, database, admin, etc.)\n* List any assumptions or requirements before starting.\n* List any steps, bulleted and in order, necessary before starting the tutorial.\n",
      "url": "/guides/v2.0/contributor-guide/templates/tutorial-template-first.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-templates-tutorial-template-last-html": {
      "title": "Step X. Finish the tutorial",
      "content": "The `title` and `subtitle` parmaters provide the top-level headings on this page. Add the content as you see fit.\n\n## Secondary heading\nUse a Head2 (##) as the highest-leveling heading in this topic.\n\n## Congratulations! You've finished.\n{:.no_toc}\n\n## Related topics\n\n* [Title of linked topic](http://example.com/index.html)\n* [Link and open new tab](http://example.com/index.html){:target=\"_blank\"}\n",
      "url": "/guides/v2.0/contributor-guide/templates/tutorial-template-last.html"
    }
    ,
  
    "guides-v2-0-contributor-guide-templates-tutorial-template-middle-html": {
      "title": "Step 1. Start the procedure",
      "content": "The `title` and `subtitle` parmaters provide the top-level headings on this page. Add the content as you see fit.\n\n## Secondary heading\nUse a Head2 (##) as the highest-leveling heading in this topic.\n",
      "url": "/guides/v2.0/contributor-guide/templates/tutorial-template-middle.html"
    }
    ,
  
    "guides-v2-0-design-styleguide-typography-typography-html": {
      "title": "Admin Typography",
      "content": "Typography is used to establish page hierarchy.\n\n## Heading Types\n\n\n# H1 - Page title\n\nPage titles use Open Sans font, regular weight, 28px font size, and 34px line height.\n\n## H2 - Section heading\n\nSection headings use Open Sans font, regular weight, 20px font size, and 25px line height.\n\n### H3 - Subsection heading\n\nSubsection headings use Open Sans font, semibold weight, 17px font size, and 22px line height.\n\n---\n\n## Body Text\n\n* Body text uses Open Sans font, regular weight, 14px font size, and 20px line height.\n\n* Spacing between paragraphs uses a 15px margin.\n\n## Legal and Link Text\n\n* Legal text, or small text, uses Open Sans, regular weight, 12px font size, and 15px line height. Spacing between paragraphs uses a 12px margin.\n\n* Link text uses the same attributes as body text, adding a #0066cc color and an underline hover state.\n",
      "url": "/guides/v2.0/design-styleguide/typography/typography.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-component-html": {
      "title": "Overview",
      "content": "Overview of UI components\nMagento UI components are designed for simple and flexible UI rendering. They allow you to configure the page manipulating the UI components.\n\nMagento UI components are implemented as a standard {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} and can be found under Magento\\UI {% glossarytooltip 621ef86b-7314-4fbc-a80d-ab7fa45a27cb %}namespace{% endglossarytooltip %}.\n\nComponents are responsible for rendering result page fragments and providing/supporting further interactions of {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} components and server.\n\n\nThis guide is actual for Magento 2.0 UI components. You might be also interested in the [UI Components Guide for Magento 2.1](https://devdocs.magento.com/guides/v2.1/ui_comp_guide/bk-ui_comps.html), as it has more conceptual topics.   \n\n\n\n### General structure\nIn Magento 2 there are basic and secondary UI components. \n\nBasic components are: \n\n* Listing component\n* Form component\n\nSecondary components are extensions of basic components.  \n\nAll components can be configured both for {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} and {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}.\n\n\n  You need to configure styles manually for components on storefront.\n\n\nUsing UI component in layout file\nUsing {% glossarytooltip 9bcc648c-bd08-4feb-906d-1e24c4f2f422 %}UI component{% endglossarytooltip %} is as simple as adding the following code to the appropriate {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} section:\n\n``\n\nAll UI components have base declaration in `Magento/Ui/view/base/ui_component/etc/definition.xml`. \n\nUI components configuration reader searches through all active modules and read files:\n\n`///view//ui_component/etc/definition.xml`\n\n\nAnd concrete instances of the components each in separate {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} configuration file:\n\n\n`///view//ui_component/.xml`\n\n### Configuration\n\n{% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}Extension{% endglossarytooltip %} developers cannot introduce new components but can customize existing ones locally. \n\nXSD file contains rules and limitations shared between all components (both definitions and instance configurations):\n\n`/Magento/Ui/etc/ui_definition.xsd`\n\nIt is possible to create custom component by setting `class`, `component` and `template` parameters of the Container component.\n\nYou can configure existing component and all filter types in the following ways:\n\n* Globally: using any module's `view/*/ui_component/etc/definition.xml` file. All settings declared in this file will be applied to all component's instances\n* Locally: using concrete component instance configuration, such as `/Magento/Cms/view/adminhtml/ui_component/cms_page_listing.xml`\n",
      "url": "/guides/v2.0/ui-components/ui-component.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-definition-html": {
      "title": "definition.xml",
      "content": "{% highlight XML %}\n\n\n\n    \n    \n    \n    \n    \n    \n        \n            Registering components in the system and basic setup\n            Registering components in the system and basic setup\n        \n        \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        \n    \n    \n    \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n            \n        \n    \n\n{% endhighlight %}   \n",
      "url": "/guides/v2.0/ui-components/ui-definition.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-export-html": {
      "title": "ExportButton Component",
      "content": "ExportButton Component is responsible for export grid data to specified data format (cvs, xml, and so on).\n\nTo enable ExportButton Component add exportButton element with specified selectProvider item to listing configuration file.\n\n{% highlight XML %}\n\n    \n        \n            {select_provider_path}\n        \n    \n\n{% endhighlight %}\n\nExample: `/view/adminhtml/ui_component/sales_order_grid.xml`\n\n{% highlight XML %}\n\n    \n        \n            \n                \n                    sales_order_grid.sales_order_grid.sales_order_columns.ids\n                \n            \n        \n    \n\n{% endhighlight %}\n\nBy default Magento allows {% glossarytooltip 6341499b-ead9-4836-9794-53d95eb48ea5 %}CSV{% endglossarytooltip %} and Excel {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} export data formats.\n\n#### How to add new export format\n\nTo add new export format:\n\n* Add configuration data to ExportButton definition `Magento/Ui/view/base/ui_component/etc/definition.xml`\n* Add controller for new format processing `\\Magento\\Ui\\Controller\\Adminhtml\\Export\\GridToFoo`\n* Add converter `\\Magento\\Ui\\Model\\Export\\ConvertToFoo`\n",
      "url": "/guides/v2.0/ui-components/ui-export.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-form-html": {
      "title": "Form Component",
      "content": "## Overview\nForm component allows performing CRUD operations on an {% glossarytooltip a9027f5d-efab-4662-96aa-c2999b5ab259 %}entity{% endglossarytooltip %}. \n\nThe following are the components element, the constructor: `/view/base/web/js/form/form.js`\n\nRelated UI components\n\nThe following components are used to extend the Form component:\n\n* DataSource\n* FieldSet\n* Field\n* {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}Layout{% endglossarytooltip %}\n* Container\n\n## Component options\n\n* js_config -> deps - sets the dependency on component initialization\n \n* js_config -> config -> provider - specifies the name of the component data\n \n* layout - configuration class meets the visualization component\n    (See examples in 'Configuring' section)\n\n## Create an instance of the Form component\n\n* Create configuration file for the instance (for example: customer_form.xml)\n\n    * Add a set of fields (the Fieldset component with the component of the Field) for entity or to implement the upload of Meta info in the DataProvider. \n* Create the DataProvider class for the entity that implements DataProviderInterface\n* Add a component in your Magento layout as a node: ``\n\nExample:\n\n{% highlight xml %}\n\n    \n        \n            ...\n            \n        \n    \n\n{% endhighlight %}\n \n## Configure the Form component\n\nComponent could be configured in two ways:\n\n* globally: using any module's `view/ui_component/etc/definition.xml` file. All settings declared in this file will be applied to all component's instances\n* locally: using concrete component instance configuration, such as `/view/base/ui_component/customer_form`\n\nCreate configuration file: `/view/base/ui_component/customer_form.xml`\n\n{% highlight xml%}\n\n    \n        \n            \n                customer_form.customer_form_data_source\n            \n            customer_form.customer_form_data_source\n        \n        Customer Information\n        \n            tabs\n            left\n        \n...\n{% endhighlight%}\n\nNodes are optional and contain parameters required for component:\n\n* js_config -> deps - sets the dependency on component initialization\n\n* js_config -> config -> provider - specifies the name of the component data\n\n* layout - configuration class meets the visualization component. Names for deps and provider are specified with a complete path from the root component with the separator \".\"\n\nAdd a description of the fields in the form using components and Field Fieldset:\n\n{%highlight xml%}\n...\n\n   \n       \n           Account Information\n       \n   \n   \n       \n               \n               false\n               text\n               input\n               customer\n           \n        \n    \n…\n{% endhighlight%}\n\nTo group components you can use the component container as in example below:\n\n{% highlight xml%}\n\n    \n        group\n        \n            Magento_Ui/js/form/components/group\n        \n        \n            Group\n            true\n            false\n            20\n        \n    \n    \n    ...\n    \n    \n    ...\n    \n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/ui-components/ui-form.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-listing-grid-search-html": {
      "title": "Grid search indexing",
      "content": "You should index data for the performance reasons. Indexing is a process of \"materializing\" {% glossarytooltip fd9ae55f-ccf5-480b-a7f3-bd2c80f0b2a4 %}complex data{% endglossarytooltip %} in needed scopes to avoid problems of reading it.\n\nIndex data can be always re-created from the original data using certain algorithm.\n\n#### Declarative markup\n\nYou can extend the current indexer declaration with an optional  element.\n\n{% highlight XML%}\n\n\n    \n        Catalog Search\n        Rebuild Catalog product fulltext search index\n        \n            \n            \n            \n                \n            \n            \n        \n        \n            \n            \n            \n            \n            \n        \n \n        \n        \n    \n\n{% endhighlight %}\n\nWhere:\n\n* fieldset - container for field nodes, which specifies handler for processing nested field nodes.\n* field - concrete field processor.\n* filter - any optional pre-processing of data before getting to index.\n",
      "url": "/guides/v2.0/ui-components/ui-listing-grid-search.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-listing-grid-html": {
      "title": "Listing/Grid Component",
      "content": "Listing is a basic component responsible for rendering grids, lists and tiles, providing filtering, pagination, sorting and other features.\n\n#### Integration\n\nExample configuration of Listing Component instance:\n\n`/Magento/Cms/view/adminhtml/ui_component/cms_page_listing.xml`\n\n\n{% highlight xml%}\n\n    \n        Magento\\Framework\\View\\Element\\UiComponent\\Context\n        cms_page_listing\n    \n    \n        \n            \n                cms_page_listing.cms_page_listing_data_source\n            \n            cms_page_listing.cms_page_listing_data_source\n        \n        cms_page_columns\n        \n            \n                add\n                Add New Page\n                primary\n                */*/new\n            \n        \n    \n\n{% endhighlight %}\n\n#### Data Source\n\nData Source is another {% glossarytooltip 9bcc648c-bd08-4feb-906d-1e24c4f2f422 %}UI Component{% endglossarytooltip %} that provides data in specific format which is shared among all UI Components. \n\nThe listing component requires the data source to be properly configured and associated with it:\n\n`/Magento/Cms/view/adminhtml/ui_component/cms_page_listing.xml`\n\n{% highlight xml %}\n\n    \n        \n            PageGridDataProvider\n            cms_page_listing_data_source\n            page_id\n            id\n            \n                \n                    Magento_Ui/js/grid/provider\n                    \n                    \n                        page_id\n                    \n                \n            \n        \n    \n    \n{% endhighlight %}    \n",
      "url": "/guides/v2.0/ui-components/ui-listing-grid.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-bookmark-html": {
      "title": "Bookmark Component",
      "content": "Bookmark Component is responsible for storing active and changed states of data grids. It includes state of filters, columns position, applied sorting, pagination, and so on.\n\nBookmark Component use DB as persistence storage for grid`s state.\n\n\n\n\n    Field name\n    Type\n    Description\n\n\n    (PK) bookmark_id\n    int(10)\n    Bookmark identifier\n\n\n    (UX1) user_id\n    int(10)\n    User Id\n\n\n    (UX1) namespace\n    varchar(255)\n    Bookmark namespace\n\n\n    (UX1) identifier\n    varchar(255)\n    Bookmark identifier\n\n\n    current\n    smallint(6)\n    Mark current bookmark per user, namespace and identifier\n\n\n    title\n    varchar(255)\n    Bookmark title\n\n\n    config\n    longtext\n    Bookmark config (JSON config for Js Bookmark component)\n\n\n    created_at\n    datetime\n    Bookmark created at time\n\n\n    updated_at\n    datetime\n    Bookmark updated at time\n\n\n\n\nPK - increment Id\n\nUX1 - unique key\n\n#### Bookmarks JS Component Structure\n\nBookmark component consists of\n\n* Collection of bookmarks located at `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\controls\\bookmarks\\bookmarks.js`\n\n    Template for collection at `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\controls\\bookmarks\\bookmarks.html`\n    \n* Child elements which represent a separate view located at `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\controls\\bookmarks\\view.js`\n\n    Template for child element at `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\controls\\bookmarks\\view.html`\n\nBookmarks use `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\controls\\bookmarks\\storage.js`\ncustom data storage which allows saving bookmark state externally (saved bookmarks are available on any device and in any browser).\n\nThe Bookmark component provides the following options:\n\n* template option\n* component option\n\n\ntemplates: {\n    view: {\n        component: 'Magento_Ui/js/grid/controls/bookmarks/view'\n        template: 'path/to/template'\n    },\n    newView: {\n        label: 'New View',\n        index: '${ Date.now() }'\n    }\n}\n\n\n* storageConfig option\n\n\nstorageConfig: {\n    saveUrl: 'path/to/save',\n    deleteUrl: 'path/to/delete',\n    namespace: 'namespace'\n}\n\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-bookmark.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-column-html": {
      "title": "Column Component",
      "content": "The Column component is a collection of columns and it provides an interface for such actions as showing and hiding columns. The interface contains the following information:\n\n* Total number of all available columns in a grid\n* Number of columns currently active/displayed\n\nAnother task of the Column component is to provide data about column state to the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}admin{% endglossarytooltip %}.\n\nThere is no need to duplicate information about the columns to be displayed in the Column component. You must define the append to element on every column child element and reference the parent using the appends.\nAnother way to give access to the child element is to give a link to it when defining the column container.\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-column.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-filter-html": {
      "title": "Filter Component",
      "content": "The filter component must be declared as a child to the listing component.\nAll column filters are declared as children to the filter component.\n\nThe filter component is responsible for rendering filters UI and applying filtering criteria to collection.\n\nCurrently the following filter types are supported:\n\n* input filter\n* date filter\n* select filter\n* range filter\n\nExample:\n`/view/adminhtml/ui_component/cms_page_listing.xml`\n\n{% highlight xml %}\n\n    \n        \n            \n                \n                    params.filters\n                \n            \n            \n                \n                    \n                        page_id\n                        ID\n                    \n                \n                ...\n                ...\n            \n            ...\n            ...\n            ...\n            ...\n            ...\n            ...\n            ...\n        \n    \n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-filter.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-header-html": {
      "title": "Sticky Header Component",
      "content": "Overview\n\nThe sticky header component is responsible for rendering additional grid header and grid toolbar.\n\nSticky header is displayed when the persistent header gets hidden during vertical scrolling. The persistent header reactivates when you scroll back up:\n\nThe following image is an illustration of a grid with a sticky header:\n\n\n\nEnable sticky header for a grid\n\nTo enable the sticky header functionality for a certain grid, declare it as a child element in the grid configuration file using the following notation:\n\n{% highlight xml %}\n    \n        \n            \n                Magento_Ui/js/grid/sticky/sticky\n                ...\n                ...\n            \n        \n    \n{% endhighlight %}\n\nWhere the following should be specified:\n\n- `toolbarProvider`: full name of the toolbar component on this page.\n- `listingProvider`: full name of the listing (grid) component on this page; the one for which the sticky header is enabled.\n\n**Example**\n\nEnabling a sticky header for the CMS pages grid, configured in `/view/adminhtml/ui_component/cms_page_listing.xml`:\n\n{% highlight xml %}\n\n        \n         ..\n        \n        \n            \n                \n                    Magento_Ui/js/grid/sticky/sticky\n                    cms_page_listing.cms_page_listing.listing_top\n                    cms_page_listing.cms_page_listing.cms_page_columns\n                \n            \n        \n    \n{% endhighlight %}\n\nSticky header configuration\n\nAny component of a sticky header can use a particular, not default template. This template is set in the `stickyTmpl` option. If the sticky template is not set, the default component's template is used for displaying in a sticky header.\n\n**Example**\nThe toolbar component should use the `ui/grid/sticky/toolbar` template for the sticky header.\n`/view/adminhtml/ui_component/cms_page_listing.xml`:\n{% highlight xml %}\n\n        \n            \n                \n                    ui/grid/toolbar\n                    ui/grid/sticky/toolbar\n                \n            \n            ..\n        \n    \n{% endhighlight %}\n\nComponent elements\nThe sticky header component consists of the following elements:\n\n- Constructor: `/view/base/web/js/grid/sticky/sticky.js`\n- Main template: `/view/base/web/templates/grid/sticky/sticky.html`\n- Elements' templates:\n\t- `/view/base/web/templates/grid/sticky/listing.html`\n\t- `/view/base/web/templates/grid/sticky/filters.html`\n\t- `/view/base/web/templates/grid/sticky/sticky.html`\n\t\n\nDependencies\nThe sticky header component depends on the following components:\n\n - Listing\n - Toolbar\n\n\nIt also works both with and without the following components, preserving their functionality:\n\n- Listing child components:\n\t- Dnd\n\t- Resize\n\t- Bulk Edit\n\t- Inline Edit\n- Toolbar child components:\n\t- Pagination\n\t- Filter\n\t- Column\n\t- Mass Action\n\t- Bookmark\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-header.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-inline-html": {
      "title": "Inline Edit Component",
      "content": "The Inline Edit component is used to provide the ability of inline editing. \n\n#### Related UI Components\n\nThe Bulk Edit component uses the Inline Edit component.\nThe Listing component can use the Inline Edit if it is configured and enabled.\n\n#### Implementation of Inline Edit\n\nCurrently Inline Edit is not presented in definition.xml. It is used as a plugin for the Listing component. It can be configured in definitions.xml if necessary.\n\nTo enable Inline Edit component for the grid, it is declared as a plugin for Listing component:\n\n{% highlight xml %}\n\n    \n        \n            \n                cms_page_listing.cms_page_listing.cms_page_columns.ids\n                true\n                entity_id\n            \n            ..\n        \n    \n..\n\n{% endhighlight %}\n\nThe configuration of the component can include:\n\n* editorConfig - is responsible for general editor configuration\n\n  * component\n    \n  * enabled - is Inline Edit enabled\n    \n  * selectProvider - column name, by which rows will be selected/deselected\n    \n  * columnsProvider - provides columns\n    \n  * dataProvider - provides data, which will be edited\n    \n  * indexField - column name, by which edited rows will be indexed\n    \n  * bulkConfig - in current implementation on cms_pages, includes Bulk Edit component as a plugin\n    \n  * clientConfig - is responsible for editor communication with {% glossarytooltip 74d6d228-34bd-4475-a6f8-0c0f4d6d0d61 %}backend{% endglossarytooltip %}. Contains nodes with url's where requests for storing and validating data are sent:\n\n    {% highlight XML%}\n    \n        \n        /path/to\n        false\n    \n    {% endhighlight%}\n\n    \n  * viewConfig - is responsible for editor UI\n    \n  * templates - the templates for child components, example will be provided below and marked as *.\n   \nWith configuration above, the Inline Edit will be enabled. But it also must start editing in response to some user action, for example when clicking somewhere on the row.\n\n{% highlight xml %}\n\n    \n        \n            \n                \n                    cms_page_listing.cms_page_listing.cms_page_columns_editor\n                        startEdit\n                        \n                            ${ $.$data.rowIndex }\n                            true\n                        \n                    \n                \n                ..\n            \n        \n    \n\n{% endhighlight%}\n\nNote that this is not the configuration of the Inline Edit itself, but the configuration of the Column component, to interact with the Inline Edit.\n\nWith the above configuration, the Inline Edit will be enabled, but all row cells will be read-only during the Inline edit. To make specific column editable, next configuration can be used:\n\n{% highlight xml %}\n\n    \n        \n            \n                text\n                \n                    true\n                \n            \n            ..\n        \n    ..\n    \n\n{% endhighlight %}\n\nOr as a short alternative:\n\n{% highlight xml %}\n\n    \n        \n            text\n            ..\n        \n        ..\n    \n\n{% endhighlight %}\n\nThe configuration for the specific column editor can include:\n\n* editorType - type of the editor. Possible values: same as primitives (text, select, date), can also provide new type (see example marked as **)\n\n* validation\n\n  * validation rules, required-entry here as just an example of possible rules\n\nAdditional examples:\n * - Example of the templates configuration (fieldTmpl for the edited cell, and rowTmpl for the whole edited row)\n{% highlight xml %}\n\n    \n        \n            \n                ..\n                \n                    \n                        ui/grid/editing/field\n                        ui/grid/editing/row\n                    \n                \n            \n            ..\n        \n    \n..\n\n{% endhighlight %}\n ** - Example of the editor type configuraion - let's add a colorpicker type, for example, as addition to the existed types (which extend form/element/abstract)\n{% highlight xml%}\n\n    Magento_Ui/js/form/element/colorpicker\n    ui/form/element/colorpicker\n\n{% endhighlight %}\n \n#### Inline Edit JS Component Structure\n\nComponent elements:\n\n* Editor Component: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\editing\\editor.js`\n* Client Component: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\editing\\editor-view.js`\n* View Component: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\editing\\client.js`\n* Record Component (used by Editor to create a record associated with a row data): `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\editing\\record.js`\n* row Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\editing\\row.html`\n* row buttons Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\editing\\row-buttons.html`\n* header buttons Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\editing\\header-buttons.html`\n\nDependencies on other components:\n\n* columns collection\n* dataProvider of the listing\n* multiselect component, which provides information on selected rows.\n\nCurrently the Inline Edit component is configured on the {% glossarytooltip f3944faf-127e-4097-9918-a2e9c647d44f %}cms{% endglossarytooltip %} pages as a plugin for the Listing, its configuration is included into Listing and Column components configuration (described in the above examples).\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-inline.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-massaction-html": {
      "title": "MassActions Component",
      "content": "### MassActions JS component structure\n\nMassActions component adds ability to be selectable (by attaching it's template to each item in Listing) to items in Listing and creates actions to perform with selected items (for example: 'Delete', 'Update attributes' and so on).\n\n\"Select all\" functionality is improved in Magento 2. Instead of creating a list of all selected items they are now flagged and list is created only for excluded elements.\n\n#### Component Elements (classes, files)\n\nThe following are the component elements:\n\n* Constructor `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\massactions.js`\n* Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\actions.html`\n\n#### Dependencies on Other Components\n\nDependency on the following components:\n\n* Collapsible: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\lib\\collapsible.js`\n* Modal window with confirmation: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\modal\\confirm.js`\n* Modal window with alert: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\modal\\alert.js`\n\n#### Component Options\n\nThe following options are available:\n\n* noItemsMsg - message that is displayed if user tries to apply action without any selected items\n* selectProvider - option that defines the component with selections data\n* actions - array that contains initially available actions\n\nMethods and Events\n\nThe following {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} methods are available:\n\n* getAction - returns action instance found by the provided identifier\n* addAction - adds new action to the actions\n* applyAction - applies specified as identifier action\n* getSelections - returns object with current selections\n\n#### Example of configuration modifications:\n\n* Redefining the link to the template\n\n{% highlight javascript %}\n\n    \n        ...\n        \n            product/grid/columns/massactions\n        \n    \n\n{% endhighlight %}\n\n* Specifying action with confirmation\n\n{% highlight xml %}\n\n    \n        ...\n    \n    \n        \n            \n                \n                    Edit items\n                    Are you sure you wan't to edit selected items?\n                \n                edit\n                Edit\n            \n        \n    \n\n{% endhighlight %}\n\n* Action with a custom callback\n\n\nCallback is provided by another component.\n\n{% highlight xml %}\n\n    \n        ...\n    \n    \n        \n            \n                edit\n                Edit\n                \n                    product_listing.inline_editing\n                    startEdit\n                \n            \n        \n    \n\n{% endhighlight %}\n\n* Instance replacement: one instance of a component\n\nRedefine link to constructor.\n\n\n&lt;massaction name=\"listing_massaction\"&gt;\n    &lt;argument name=\"data\" xsi:type=\"array\"&gt;\n        &lt;item name=\"js_config\" xsi:type=\"array\"&gt;\n            &lt;item name=\"component\" xsi:type=\"string\"&gt;Magento_Products/js/grid/massactions&lt;/item&gt;\n        &lt;/item&gt;\n    &lt;/argument&gt;\n&lt;/massaction&gt;\n\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-massaction.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-multi-html": {
      "title": "Multiselect Component",
      "content": "#### UI Multiselect Component\n\nThe Multiselect component is used to provide check box interface for a specific listing or a specific data set. The component is an {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} for Column component and allows selecting either a collection of items or all items from the given set.\n\nThe Multiselect component which stores the information about the number of selected items in its template shares this data with the following components:\n\n* Pagination\n* MassAction\n\nWhen making any actions which affect the item selection, like filtering, the number of selected items in the Multiselect component is flushed as currently collection contains only one item and knows nothing about the general set of data.\n\nMultiselect is a child of the Grid component and is rendered in its view. Like any component, it can hold the sort order value which influences the order of all its child elements.\n\nWhen you specify the `after` or `before` property in the Multiselect component, it references any existing component in the parent container and renders it in that specified position.\n\n#### Multiselect JS Component Structure\n\nThe Multiselect component is implemented in the class `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\columns\\multiselect.js.`\n\nTemplates used by this component are:\n\n* `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\cells\\multiselect.html` - The template defines every specific field in the grid. It provides the Multiselect component with the check box interface for selecting item(s) in the grid and performing actions over them.\n* `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\columns\\multiselect.html` - The template defines the grid header with drop-down lists and the Select All, Deselect All, and other options.\n\nThe component provides the following options:\n\n* header template option\n* body template option\n\nCode samples available in the default configuration:\n\n`headerTmpl: 'ui/grid/columns/multiselect'`\n\n`bodyTmpl: 'ui/grid/cells/multiselect'`\n\n* imports option\n\n    The option defines from where the component receives its data.\n\n* actions option\n\n    You can modify the default actions by, for example, renaming their frontend labels.\n\n* indexField option\n\n    This option allows specifying which field represents record identifier.\n\n#### Methods and Events\n\nNo events are generated. Any other component that can retrieve access to this component and its properties can get data and track its changes using subscription.\n\n#### How to configure Multiselect Component already used in code\n\nSample of code where component configurations are performed:\n\nCurrent implementation:\n\n{% highlight javascript %}\n\n            \n                \n                    Magento_Ui/js/grid/columns/multiselect\n                \n                \n                    page_id\n                    \n                \n            \n        \n{% endhighlight %}\n\nExample of configuration modifications:\n\n* Redefining the link to the template\n\n{% highlight javascript %}\n\n    \n        ...\n        \n            product/grid/columns/multiselect\n        \n    \n\n{% endhighlight %}\n\n* Redefining the name of the property which represents record identifier\n\n{% highlight javascript %}\n\n    \n        ...\n        \n            product_id\n        \n    \n\n{% endhighlight %}\n\n* Redefining a property data source\n\n{% highlight javascript %}\n\n    \n        ...\n        \n            \n                products_prodvider:data.products\n            \n        \n    \n\n{% endhighlight %}\n\n#### How to add a new component\n\nInstance Replacement: One Instance of a Component\n\n* Redefine the link to constructor:\n\n{% highlight javascript %}\n\n    \n        \n            Magento_Products/js/grid/columns/multiselect\n        \n    \n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-multi.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-pagination-html": {
      "title": "Pagination Component",
      "content": "The UI pagination component is a plugin for the listing component. Responsible for rendering pagination UI and applying pagination criteria to collection.\n\nYou can configure pagination in several ways:\n\n* Globally: using any module's `view/*/ui_component/etc/definition.xml` file. All settings declared in this file are applied to all component's instances.\n* Locally: using concrete component instance configuration, such as `/view/adminhtml/ui_component/cms_page_listing.xml`\n\nTo enable pagination for the listing component, the pagination component is declared as a child of the listing component in component instance configuration.\n\nExample:\n\n`/view/adminhtml/ui_component/cms_page_listing.xml`\n\n{% highlight xml %}\n\n    \n        \n            \n                \n                    \n                        cms_block_listing.cms_block_listing.listing_top.bookmarks\n                        current.paging\n                    \n                    cms_block_listing.cms_block_listing.cms_block_columns.ids\n                \n            \n        \n    \n\n{% endhighlight %}\n\nThe configuration of the component can include:\n\n* `storageConfig` - storageConfig is a base component property. Here it is configured to take stored page sizes list from bookmarks\n\n* `sizesConfig`: configuration of the component that defines available page sizes. By default it is `Magento_Ui/js/grid/paging/sizes`.\n    * `minSize`: minimum number of elements on a page, default: 1\n    * `maxSize`: maximum number of elements on a page, default: 999\n \n* `selectProvider`: component with selections data.\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-pagination.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-resize-html": {
      "title": "Resize Component",
      "content": "The Resize Component is responsible for resizing listing columns. The Resize component is not defined in definition.xml, but can be added if needed.\n\n#### Integration\n\nResize can be switched on for any listing column like this:\n\n{% highlight xml %}\n\n    \n        \n            true\n            60\n        \n    \n\n{% endhighlight %}\n\nresizeDefaultWidth - set width value in pixels.\n\nresizeEnabled - value can be set `true`, meaning the resize is switched on, or `false`, , meaning the resize is switched off for the column.\n\n#### Configuration\n\nThe Resize component is currently configured as a plugin for the Listing component in `/view/base/web/js/grid/listing.js`. It has the following options:\n\n* resizeConfig\n\n  * name\n  * columnsProvider - can be a name of the Listing component\n  * component\n  * provider - can use listing provider\n\n### Resize JS Component Structure\n\n#### Component elements\n\nThe following is the component's element: `/view/base/web/js/grid/resize.js`\n\n#### Dependencies on other components\n\nThe Resize components does not depend on other components\n\n#### Component Options\n\nThe following options are available:\n\n* rootSelector - the {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}css{% endglossarytooltip %} selector for listing's root node\n* showLines - max lines of text allowed in column\n* minColumnWidth - minimum width of the column\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-resize.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-treemass-html": {
      "title": "TreeMassAction Component",
      "content": "TreeMassAction Component is {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} to MassAction component that provides nested sub-menu. \n\nThe TreeMassAction JS component is used by the TwoStepMassAction component.\n\n#### PHP Implementation of TreeMassAction\n\nTo enable Massaction Component for your Listing instance it should be declared as a child.\n\nExample:\n`/view/adminhtml/ui_component/product_listing.xml`\n\n{% highlight XML %}\n\n    \n        \n            product_listing.product_listing.product_columns.ids\n            Magento_Ui/js/grid/tree-massactions\n            bottom\n            entity_id\n        \n    \n    \n        \n            \n                \n                    Delete items\n                    Delete selected items?\n                \n                delete\n                Delete\n                \n            \n        \n    \n    \n        \n            \n                status\n                Change status\n            \n        \n        \n            \n                enable\n                Enable\n                \n                    1\n                \n            \n            \n                disable\n                Disable\n                \n                    2\n                \n            \n        \n    \n    \n        \n            \n                attributes\n                Update attributes\n                \n            \n        \n    \n\n{% endhighlight%}\n\n#### Configuration\nComponent can be configured in two ways:\n\n* Globally: using any module's `view/*/ui_component/etc/definition.xml` file. All settings declared in this file are applied to all component's instances\n* Locally: using concrete component instance configuration, such as `/view/adminhtml/ui_component/product_listing.xml`\n\n#### TreeMassAction JS Component Structure\n\n#### Component Elements (classes, files, etc)\n\nThe following are the component elements:\n\n* Constructor `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\tree-massactions.js`\n* Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\tree-massactions.html`\n* Template: `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\submenu.html`\n\n#### Dependencies on Other Components\n\nDependency on the following component:\n\n* Collapsible: `app\\code\\Magento\\Ui\\view\\base\\web\\js\\grid\\massactions.js`\n\n#### Component Options\n\nThe following options are available:\n\n* noItemsMsg - message which will be shown if user tries to apply action without any selected items\n* selectProvider - option which defines the component with selections data\n* actions - array which contains initially available actions\n\n#### Methods and Events\n\nThe following {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}api{% endglossarytooltip %} methods are available:\n\n* getAction - returns action instance found by the provided identifier\n* applyAction - applies specified as identifier action\n* hideSubmenus - hide specified actions and nested submenu\n\n#### How to Configure Already Used in Code TreeMassAction Component\n\n`app\\code\\Magento\\Catalog\\view\\adminhtml\\ui_component\\product_listing.xml`\n\nExample of configuration modifications:\n\n* Redefining the link to the template\n\n{% highlight XML %}\n\n    \n        ...\n        \n            product/grid/columns/massactions\n        \n    \n\n{% endhighlight %}\n\n* Specifying action with confirmation\n\n{% highlight XML %}\n\n    \n        ...\n    \n    \n        \n            \n                \n                    Edit items\n                    Are you sure you wan't to edit selected items?\n                \n                edit\n                Edit\n            \n        \n    \n\n{% endhighlight %}\n\n* Action with a custom callback\n\nCallback is provided by another component.\n\n{% highlight XML %}\n\n    \n        ...\n    \n    \n        \n            \n                edit\n                Edit\n                \n                    product_listing.inline_editing\n                    startEdit\n                \n            \n        \n    \n\n{% endhighlight %}\n\n#### Instance Replacement: One Instance of a Component\n\nRedefine link to constructor:\n\n{% highlight XML %}\n\n    \n        \n            Magento_Products/js/grid/tree-massactions\n        \n    \n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-treemass.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-uiselect-html": {
      "title": "UI-select Component",
      "content": "UI-select component\n\nThe UI-select component is used to provide check box interface for a specific listing or a specific data set. The component allows selecting a collection of items.\n\nThe UI-select component has extended from the Abstract component.\n\nExample integration:\n\n`/view/adminhtml/ui_component/cms_page_listing.xml`\n\n{% highlight xml %}\n\n            \n                \n                    Magento\\Cms\\Model\\Page\\Source\\PageLayout\n                \n                \n                    \n                        Magento_Ui/js/form/element/ui-select\n                        ui/grid/filters/elements/ui-select\n                        uiSelect\n                        uiSelect\n                    \n                \n            \n\n{% endhighlight %}\n\n#### Configuration\n\nThe following configuration can be passed in arguments:\n\n* Link to any of the following templates\n* Link to the constructor\n* Label to ui-select\n* Default caption\n* Caption if selected more then one elements\n\n#### Navigation\n\nThe UI-select component supports keyboard navigation.\n\nNavigation keys:\n\n* Enter key: if focus on the caption - a list of options opens, if focus on the some option - selected or unselected current option\n* Space key: copy 'Enter key' functionality\n* Escape key: closes the list of options\n* PageUp key: sets focus to previous option\n* PageDown key: sets focus to next option\n\n#### UI-select JS component structure\n\n* Component elements\n    \n    The Ui-select component is implemented in the class `app\\code\\Magento\\Ui\\view\\base\\web\\js\\form\\element\\ui-select.js`\n    \n    Templates used by this component are:\n    \n    `app\\code\\Magento\\Ui\\view\\base\\web\\templates\\grid\\filters\\elements\\ui-select.html`\n    \n* Dependencies on Other Components\n\n    Abstract\n    \n* imports option\n    \n    The option defines from where the component receives its data.\n        \n    Code samples available in the default configuration:\n    \n    {% highlight javascript %}\n    imports: {\n        options: '${ $.optionsConfig.name }:options'\n    }\n    {% endhighlight %}\n\n* actions option\n\n    You can modify the default actions by renaming their storefront labels\n    \n    Code samples available in the default configuration:\n    \n    {% highlight javascript %}\n    actions: [{\n                    value: 'selectAll',\n                    label: $t('Select all')\n                }, {\n                    value: 'deselectAll',\n                    label: $t('Deselect all')\n                }, {\n                    value: 'selectPage',\n                    label: $t('Select all on this page')\n                }, {\n                    value: 'deselectPage',\n                    label: $t('Deselect all on this page')\n                }],\n    {% endhighlight %}\n    \nComponent options\n\n\n\n\n    Title\n    Description\n    Required For Correct Work\n    Type\n    Default Value\n\n\n    options..label\n    Options label\n    -\n    String\n    undefined\n\n\n    options..value\n    Options value\n    -\n    String\n    undefined\n\n\n    options..optgroup\n    Nested level of options\n    -\n    Object\n    undefined\n\n\n    mode\n    Mode overrides default values for some options. In 'simple' mode showCheckbox = chipsEnabled = closeBtn = false. In 'optgroup' mode showCheckbox = openLevelsAction = false, and lastSelectable = optgroupLabels = labelsDecoration = true.\n    -\n    Boolean\n    false\n\n\n    showCheckbox\n    Show checkbox just before option label, select options by checking\n    -\n    Boolean\n    true\n\n\n    chipsEnabled\n    Selected options are shown in ui select's header as deletable chips\n    -\n    Boolean\n    true\n\n\n    closeBtn\n    Show button that closes dropdown\n    -\n    Boolean\n    true\n\n\n    closeBtnLabel\n    Label of the close button\n    -\n    string\n    $t('Done')\n\n\n    levelsVisibility\n    If true, all levels are visible. If is a number, this number of levels are visible.\n    -\n    Boolean/number\n    true\n\n\n    openLevelsAction\n    \n    -\n    Boolean\n    true\n\n\n    showOpenLevelsActionIcon\n    \n    -\n    Boolean\n    true\n\n\n    showTree\n    \n    -\n    Boolean\n    false\n\n\n    separator\n    \n    -\n    String\n    optgroup\n\n\n\n\n#### Integration\n\nHere is an example of configuration of select component. It is used as column filter and has 3 levels of options, with not selectable label for every level, without checkboxes:\n\n\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-uiselect.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-uploader-html": {
      "title": "File Uploader Component",
      "content": "Overview\n\nUI File Uploader component is an {% glossarytooltip edb42858-1ff8-41f9-80a6-edf0d86d7e10 %}adapter{% endglossarytooltip %} for jQuery-File-Upload plugin used in Magento. Component is used to integrate file upload functionality with UI components.\n\nComponent elements\n\n* Constructor: `/view/base/web/js/form/element/file-uploader.js`\n* JQuery file upload plugin: `jquery/fileUploader/jquery.fileupload-fp`\n* Default template: `/view/base/web/templates/form/element/uploader/uploader.html`\n* Preview template: `/view/base/web/templates/form/element/uploader/preview.html`\n\nComponent options\n\n\n\n\n    Title\n    Description\n    Required For Correct Work\n    Type\n    Default Value\n\n\n    previewTmpl\n    Path to the files' preview template\n    No\n    String\n    Magento_Ui_module_dir/view/base/web/templates/form/element/uploader/preview.html\n\n\n    maxFileSize\n    Defines maximum size of a file (in bytes\n    No\n    Number\n    Infinite\n\n\n    isMultipleFiles\n    Flag which indicates whether multiple files can be uploaded or not\n    No\n    Boolean\n    false\n\n\n    allowedExtensions\n    List of allowed file extensions\n    No\n    String/Array\n    *\n\n\n    dropZone\n    CSS selector of a drop zone element relative to a file input element\n    No\n    String\n    [data-role=drop-zone]\n\n\n    uploaderConfig\n    Configuration which will be passed to jquery-file-upload plugin\n    Yes\n    Object\n    \n\n\n    uploaderConfig.url\n    Route to server controller which will handle file uploading process\n    Yes\n    String\n    null\n\n\n\n\nIntegration\n\nHere is an example of how File Uploader component integrates with Form component:\n\n{% highlight xml %}\n\n    ...\n    \n        ...\n        \n            \n                \n            \n        \n        \n            \n                \n                    Sound Check\n                    true\n                    fileUploader\n                    \n                        \n                    \n                \n            \n        \n    \n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/ui-components/ui-secondary-uploader.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-secondary-html": {
      "title": "Listing/Grid Secondary Components",
      "content": "The following components extend the functionality of the Listing component:\n\n  * Filter component\n  * Pagination component\n  * MassAction component\n  * TreeMassAction component\n  * Column component\n  * UI-select component\n  * Multiselect component\n  * Inline Edit component\n  * Bookmark component\n  * Resize component\n  * Sticky header component\n  * ExportButton component\n",
      "url": "/guides/v2.0/ui-components/ui-secondary.html"
    }
    ,
  
    "guides-v2-0-ui-components-ui-components-js-html": {
      "title": "Using UI components' client-side",
      "content": "## What's in this topic\nThis topic is aimed for developers, who need to reuse the [Magento UI Components]({{page.baseurl}}ui-library/ui-library-component.html). \n\nThe topic covers the following:\n\n- [UI components' configuration](#config)\n- [The most important UI component's properties](#main_properties)\n- [UI components’ properties used for linking](#comp_link)\n- [Description of the additional UI components](#comp_additional)\n- [JS UI components debugging](#comp_debug)\n\n## UI components' configuration {#config}\n\nA UI component's behavior, configuration and structure is defined by the following:\n\n - The available configuration options and methods for components of a certain type, defined in the component's .js file.\n\n - The actual configuration and structure of a particular component, specified in the component's configuration `.xml` file, in the scope of the `` node. The configuration file also extends properties, specifies the component's template and the path to the component's `.js` file.\n\nAll these properties, options, and methods are available in the component template's scope.\n\n\n## Most important UI components' properties {#main_properties}\nThe most important client-side properties of a {% glossarytooltip 9bcc648c-bd08-4feb-906d-1e24c4f2f422 %}UI component{% endglossarytooltip %} are the following:\n\n - `component`: the path to the component's `.js` file in terms of RequireJS.\n\nExample:\nThe `.js` file of the bookmark component is [Magento/Ui/view/base/web/js/grid/controls/bookmarks/bookmarks.js]({{site.mage2000url}}app/code/Magento/Ui/view/base/web/js/grid/controls/bookmarks/bookmarks.js) \n\nSo the `component` property is set in the `.xml` configuration file like following:\n\n{% highlight xml%}\n\n        Magento_Ui/js/grid/controls/bookmarks/bookmarks\n\n{% endhighlight xml%}\n\n - `template`: path to the component's `.html` template.\n\nExample:\n\nThe `.html` template of the bookmarks component is [Magento/Ui/view/base/web/templates/grid/controls/bookmarks/bookmarks.html]({{site.mage2000url}}app/code/Magento/Ui/view/base/web/templates/grid/controls/bookmarks/bookmarks.html). \n\n{% highlight xml%}\n\n        ui/grid/controls/bookmarks/bookmarks\n\n{% endhighlight xml%}\n\n - children: is a general name for the nested components of a certain component. Children can be specified in the `.xml` configuration of the parent component (all nodes except `` and `` are considered children) and in the Knockout JS templates: children are the keys of the `elems` property.\n\n - `name`: the name of the component specified in the `.xml` configuration file of the parent UI component. In the run-time in a browser this value is transformed to a complex string. This string represents hierarchy of components in the run-time.\nFor example, [`app/code/Magento/Cms/view/adminhtml/ui_component/cms_block_listing.xml:57`]({{site.mage2000url}}app/code/Magento/Cms/view/adminhtml/ui_component/cms_block_listing.xml#L57):\n\n{%highlight xml%} \n\n{%endhighlight xml%} \n\nIn the run-time `columns_controls` is transformed to the following string: `cms_block_listing.cms_block_listing.listing_top.columns_controls`. \n\nThis string is constructed from the following values:\n\n - `cms_block_listing.cms_block_listing`: the full name of the root component.\n - `listing_top`: the value of the `name` attribute of the parent `` component. \n - `columns_controls`: the value of the `name` attribute of the component itself.\n\n## UI Components' properties used for linking {#comp_link}\n\nThe following properties are used for linking observable properties and methods of UI components:\n\n\n- `exports`: used to notify some external entity about property changing. `exports`s value is an object, composed of the following:\n\n  - `key`: name of the internal property or method which is tracked for changes.\n  - `value`: name of the property or method which receives the notification. Can use string templates.\n\nExample of setting `exports` in a component's `.js` file:\n\n{% highlight js%}\n{\n  'exports': {\n   'visible': '${ $.provider }.visibility'\n  }\n}\n{% endhighlight js%}\n\nHere `visible` is the `key`, `${ $.provider }.visibility` is the `value`.\n\nExample of setting `exports` in a component's configuration `.xml` file:\n\n{% highlight xml%}\n\n       \n                    \n                        sample_config.sample_provider.visibility\n                    \n       \n\n{% endhighlight xml%}\n\nIn this example, `visible` is the `key`, `sample_config.sample_provider.visibility` is the `value`.\n\n- `imports`: used for tracking changes of an external entity property. `imports`'s value is an object, composed of the following:\n\n  - `key`: name of the internal property or method which receives the notifications. \n  - `value`: name of the property or method which is tracked for changes. Can use string templates.\n\nExample of using `imports` in a component's `.js` file:\n\n{% highlight js%}\n{\n  'imports': {\n   'visible': '${ $.provider }.visibility'\n  }\n}\n{% endhighlight js%}\n\nExample of using `imports` in a component's configuration `.xml` file:\n\n{% highlight xml%}\n\n       \n                    \n                        sample_config.sample_provider.visibility\n                    \n       \n\n{% endhighlight xml%}\n\n\n- `links`: used for mutual tracking property changes. `links`'s value is an object, composed of the following:\n\n  - `key`: name of the internal property or method which sends and receives the notifications. \n  - `value` - name of the property or method which sends and receives the notifications. Can use string templates.\n\nExample of using `links` in a component's `.js` file:\n\n{% highlight js%}\n{\n  'links': {\n   'visible': '${ $.provider }.visibility'\n  }\n}\n{% endhighlight js%}\n\nExample of using `links` in a component's configuration `.xml` file:\n\n{% highlight xml%}\n\n       \n                    \n                        sample_config.sample_provider.visibility\n                    \n       \n\n{% endhighlight xml%}\n\n- `listens`: used to track the changes of a component's property.\n  - `key` - name of the internal property which listens to the changes.\n  - `value` - name of the property or method which is tracked for changes. Can use string templates.\n\nExample of using `listens` in a component's `.js` file :\n\n{% highlight js%}\n{\n  'listens': {\n   'visible': '${ $.provider }.visibility'\n  }\n}\n{% endhighlight js%}\n\nExample of using `listens` in a component's configuration `.xml` file:\n\n{% highlight xml%}\n\n       \n                    \n                        sample_config.sample_provider.visibility\n                    \n       \n\n{% endhighlight xml%}\n\n\n## Frequently used additional components {#comp_additional}\nThis section is a brief description of the most frequently used additional UI components.\n\n### `uiClass`\nEnables OOP pattern implementation.\n\n### `uiElement`\nExtends `uiClass`. Adds the following:\n\n- the `defaults` property\n- events handling\n- handling properties linking (the `imports`, `exports`, `links` and `listens` properties)\n- ability to add itself to the UI registry\n\n### `uiCollection`\n\nExtends `uiElement`. Adds the following:\n\n- managing child elements (the `elems` property)\n- by default uses the app/code/Magento/Ui/view/base/web/templates/collection.html template\n\n### `uiRegistry`\nIn-memory storage. Plain storage of entities by keys. Implements the `get()`, `set()`, and `has()` methods.\n\nAll the components described in this section are aliases in terms of RequireJS. So they can be directly requested in the component's `.js` file or used in a component's configuration `.xml` file (except `uiRegistry`, which by its nature is not expected to be used in a configuration file). \n\nExample for the `uiClass` property request:\n\n{%highlight js%}\ndefine( ['uiClass'], function (abstractClass) {\n    return abstractClass.extend({ \n      ... // needed methods here\n   };\n});\n{%endhighlight js%}\n\nExample of using the `uiClass` property in a configuration file:\n{%highlight js%}\n  \n        \n            \n                uiClass\n            \n        \n    \n{%endhighlight js%}\n\n## JS UI components debugging {#comp_debug}\nThis section describes how to define what UI components are used on a particular page and what data they use.\n\nTo define the UI components used on a page, you can use browser built-in developer tools, or install additionally a plugin, for example Knockout JS context debugger for Google Chrome.\n\n### Debug using browser built-in tools\n1. Open the required page in a browser.\n2. Select to view the page source.\n3. Search for `data-bind=\"scope:`. The string after `scope` is the full name of the component.\n5. Open developers tools and in the console tab run `require('uiRegistry').get('')`. Where `` is the name you defined on the previous step. The name and the configuration of the UI component instance is displayed once the command is executed.\n\nFor illustration, let's find out what UI components are used on the {% glossarytooltip 8d40d668-4996-4856-9f81-b1386cf4b14f %}Catalog{% endglossarytooltip %} page in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} panel:\n\n\n \n\n\n\nAccording to the described procedure, open the page source and search for \"`data-bind=\"scope:`\"\n\n\n\n\n\n\nSo we find out that the main UI component used on this page is product listing, with `product_listing.product_listing` as a full name. To see its configuration, child components and data source, in the in the **Console** tab we run `require('uiRegistry').get('product_listing.product_listing')`:\n\n\n\n\n\n\nAnd we get the component's configuration:\n\n\n\n\n\n### Debug using a Google Chrome plug-in\n\n1. Install the Knockout JS context debugger for Google Chrome.\n2. Open the required page in Chrome.\n3. Point to the required element on the page, right-click and select **Inspect Element**. The developer tools panel opens.\n4. In the right column of the panel, click the **Knockout context** tab. The tab displays the name and the configuration of the UI component instance.\n\n\n\n",
      "url": "/guides/v2.0/ui-components/ui_components_js.html"
    }
    ,
  
    "guides-v2-0-test-unit-unit-test-execution-html": {
      "title": "Running Unit Tests",
      "content": "Executing the Magento 2 unit tests is straight forward.\nThey can be executed in several different ways.\n\n### Command Line Interface (CLI)  \n\nThis option is useful for running the tests during Continuous Integration or on remote servers, or if no IDE with PHPUnit support is available. It only requires a minimum amount of setup.  \n\nPlease refer to [Running Unit Tests in the CLI]({{page.baseurl}}test/unit/unit_test_execution_cli.html) for further information.\n\n### PHPStorm IDE  \nRunning the tests inside an IDE like PHPStorm IDE is convenient for developers, since it allows for easier navigation in the code and debugging.\n\nOther than convenience there is no benefit over running the tests on the console.\n\nPlease refer to [Running Unit Tests in PHPStorm]({{page.baseurl}}test/unit/unit_test_execution_phpstorm.html) for further information.\n",
      "url": "/guides/v2.0/test/unit/unit_test_execution.html"
    }
    ,
  
    "guides-v2-0-test-unit-unit-test-execution-cli-html": {
      "title": "Running Unit Tests in the CLI",
      "content": "### Running all unit tests\n\nTo run all tests, navigate to the Magento base directory and execute the following command:\n\n{%highlight bash%}\n$ ./vendor/bin/phpunit -c dev/tests/unit/phpunit.xml.dist\n{%endhighlight%}\n\n### Running only a subset of the unit tests\n\nTo run only tests within a specific directory branch, all you have to do is to specify the directory branch after the command.\n\nThe following example tells PHPUnit to look for any file ending with `Test.php` within the directory branch `app/code/Example/Module/Test/Unit` and try to execute it.\n\n{%highlight bash%}\n$ ./vendor/bin/phpunit -c dev/tests/unit/phpunit.xml.dist app/code/Example/Module/Test/Unit\n{%endhighlight%}\n\n#### Explanation\n\nThe `phpunit` executable is installed by `composer` and linked into the directory `vendor/bin`.  \n\nThe option `-c dev/tests/unit/phpunit.xml.dist` specifies the configuration file for PHPUnit.  \n\nIf custom configuration settings are required (more on that later), the file `dev/tests/unit/phpunit.xml.dist` can be copied to `dev/tests/unit/phpunit.xml` and adjusted as needed. In that case modify the `-c` flag accordingly.  \n\nPHPUnit has many additional command line options. Please refer to the [PHPUnit documentation](https://phpunit.de/manual/4.1/en/textui.html#textui.clioptions) for more information (currently Magento 2 uses PHPUnit version 4.1.0).\n\n### Solutions to common problems\n\n#### Permission Denied\nOne possible reason for this to happen might be if you are trying to execute PHPUnit inside a Virtual Box VM with shared folders that don't allow modifying permissions.\n\nWhatever the reason, if you encounter the `permission denied: vendor/bin/phpunit` error, you can prefix the command with the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} interpreter, so your system knows what binary to use to run the tests.  \n\n{%highlight bash%}\n$ php -f vendor/bin/phpunit -- -c dev/tests/unit/phpunit.xml.dist\n{%endhighlight%}\n\n#### Use the correct PHP interpreter\nOn many development systems, you might have more one PHP version installed. You must know the correct PHP interpreter to use for testing; that is, Buse the same version of PHP to run the unit tests you use to run Magento.\n\nSome examples follow:\n\n*\tUbuntu: `/usr/bin/php`\n*\tCentOS: `/usr/bin/php`\n*\tOS X:\n\n\t* System: `/usr/bin/php`\n\t* Homebrew: `/usr/local/Cellar/php56/5.6.19/bin/php`\n\t* MAMP: `/Applications/MAMP/bin/php/php5.6.19/bin/php`\n\nYou can either fix your `$PATH` (please refer to your system documentation on how to do that), or specify the full path to the PHP interpreter. For example:\n\n{%highlight bash%}\n$ /usr/local/Cellar/php56/5.6.19/bin/php -f vendor/bin/phpunit -- -c dev/tests/unit/phpunit.xml.dist\n{%endhighlight%}\n\n#### Memory Limit\nIf you encounter an error similar to `Fatal error: Allowed memory size of 67108864 bytes exhausted`, follow these steps to resolve it.\n\nCopy the PHPUnit configuration file `dev/tests/unit/phpunit.xml.dist` to `dev/tests/unit/phpunit.xml`\n\nFind the following section:\n\n{%highlight xml%}\n\n    \n    \n\n{%endhighlight%}\n\nAdd the following line in the `` block to disable the PHP memory limit during test execution.\n\n{%highlight xml%}\n\n{%endhighlight%}\n",
      "url": "/guides/v2.0/test/unit/unit_test_execution_cli.html"
    }
    ,
  
    "guides-v2-0-test-unit-unit-test-execution-phpstorm-html": {
      "title": "Running Unit Tests in PHPStorm",
      "content": "Running tests in PHPStorm requires following steps to setup the system.\n\n1. Configuring the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} interpreter\n2. Configuring PHPUnit\n3. Creating a run configuration\n\n### Configuring the PHP interpreter\n\nIn the PHPStorm preferences, select the PHP interpreter PHPStorm should use to run tests with.  \n\n{:width=\"600px\"}\n\nIf you can not select a PHP interpreter because the dropdown is empty, you can add a one by clicking on the button with the three dots beside the dropdown.  \n\nThen, click the **+** (add) button in the top right to select the desired PHP binary on your file system.\n\n{:width=\"600px\"}\n\nPlease refer to the PHPStorm documentation for further information on [how to configure a local PHP interpreter](https://www.jetbrains.com/help/phpstorm/2016.1/configuring-local-php-interpreters.html?origin=old_help).\n\nIt is also possible to [configure a remote PHP interpreter](https://www.jetbrains.com/help/phpstorm/2016.1/configuring-remote-php-interpreters.html?origin=old_help), which is a common setup when working with Vagrant or {% glossarytooltip 57f1b0dc-1341-466d-a685-e0dbf5a3b713 %}Docker{% endglossarytooltip %} based development environments.\n\nPlease be aware that the details on configuring the PHP interpreter might vary between PHPStorm versions.\n\n### Configuring PHPUnit\n\nAfter configuring the interpreter, the next step is to set up the PHPStorm preferences for how to execute PHPUnit.\n\n{:width=\"600px\"}\n\n1.\tClick the **Use custom autoloader** option.\n2.\tSelect the `vendor/autoload.php` file in your Magento 2 installation.\n3.\tOptionally select the `dev/tests/unit/phpunit.xml.dist` file as the **Default configuration file**. Doing this step makes creating temporary run configurations more convenient.\n\nPlease refer to the PHPStorm documentation for further information on [enabling PHPUnit in PHPStorm](https://www.jetbrains.com/help/phpstorm/2016.1/enabling-phpunit-support.html#useAutoload).\n\n### Creating a run configuration\n\nThe final step is to create a *run configuration* to execute the desired tests. \n\nThere are many ways to create run configurations in PHPStorm. Here we just show one of the option.\n\nAll start by creating a new run configuration. To do so, follow these steps:\n\n1.\tSelect the **Run > Edit Configurations** action from the top menu.\n2.\tClick the **+** symbol on the top right and select **PHPUnit**.\n\nDepending on what tests should be included in the run configuration, the next steps differ.  \n\n#### Running all tests\n\n1.\tGive the run configuration a descriptive name; for example **All Unit Tests**\n2.\tTest Scope: select the **Defined in the configuration file** radio button\n3.\tCheck the **Use alternative configuration file** check box\n4.\tSelect the file `dev/tests/unit/phpunit.xml.dist`\n5.\tClick **OK**.\n\n{:width=\"600px\"}\n\n#### Running the tests of one module\n\n1.\tGive the run configuration a descriptive name; for example, **Example_Module Unit Tests**\n2.\tTest Scope: select the **Directory** option\n3.\tSelect the directory containing the modules unit tests. PHPUnit will run every file ending with `Test.php` in the selected directory branch.\n3.\tClick **OK**.\n\n{:width=\"600px\"}\n\n#### Running the tests in a class\n\n1.\tGive the run configuration a descriptive name like the name of the test class; for example, **FrontControllerPluginTest**.\n2.\tTest Scope: select the **Class** option.\n3.\tClass: enter the fully qualified class name (including the PHP namespace).\n4.\tFile: select the file containing the test class.\n5.\tClick **OK**.\n\n{:width=\"600px\"}\n\nA more convenient way to create a run configuration for a test class is to open the class in PHPStorm, and then right-clicking into the class and selecting **Create 'TestClassName'** or **Run 'TestClassName'**.  \n\nNote that the test class has to inherit from `\\PHPUnit_Framework_TestCase` for PHPStorm to display that option.\n\n### Executing the run configuration\n\nFirst select the run configuration to execute in the run configuration drop-down menu above the main editor window, then click the **Play** icon beside it.  \n\nBy clicking the **Debug** icon (of a bug) next to the **Play** icon, it is possible to step-debug code during test execution, if the xdebug PHP {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} is installed.\n\n\n",
      "url": "/guides/v2.0/test/unit/unit_test_execution_phpstorm.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-update-fail-html": {
      "title": "Roll back after update failure",
      "content": "If your component update fails, messages similar to the following display in the Console Log:\n\n\t[2015-08-14 12:12:02 CDT] Job \"update {\"components\":[{\"name\":\"example/module\",\"version\":\"1.1.0\"}]}\" has been started\n\t[2015-08-14 12:12:02 CDT] Starting composer update...\n\t[2015-08-14 12:12:02 CDT] An error occurred while executing job \"update {\"components\":\n\t[{\"name\":\"example/module\",\"version\":\"1.1.0\"}]}\": Could not complete update {\"components\":\n\t[{\"name\":\"example/module\",\"version\":\"1.1.0\"}]} successfully: Cannot find component to update\n\nIn the preceding example, there is no component version to which to roll back. Contact the component vendor or try to resolve the issue yourself.\n\nMeantime, you can roll back to a previous backing by clicking **Rollback**. Magento recovers your data even if you did not back up previously.\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/update-fail.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-updater-update-updater-html": {
      "title": "Update the updater application",
      "content": "In some cases, you might need to update the updater application, which is responsible for updating components and the Magento application. You should do this only if instructed to do so.\n\nTo update the updater application:\n\n1.\tLog in to your Magento server as, or switch to, the [Magento file system owner]({{page.baseurl}}install-gde/prereq/apache-user.html).\n2.\tDelete, move, or rename the directory containing the updater application.\n\n\tFor example,\n\n\t\tmv /update /old_update\n3.\tChange to your Magento 2 installation directory and enter the following command:\n\n\t\tcomposer create-project magento/updater update --repository https://repo.magento.com\n4.\tIf prompted, enter your Magento [authentication keys]({{page.baseurl}}install-gde/prereq/connect-auth.html).\n5.\tWait while {% glossarytooltip d85e2d0a-221f-4d03-aa43-0cda9f50809e %}Composer{% endglossarytooltip %} installs the updater and its dependencies.\n",
      "url": "/guides/v2.0/comp-mgr/updater/update-updater.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-updater-updater-html": {
      "title": "Updater application",
      "content": "This topic is obsolete. Magento no longer has a separate updater application.\n\nIf you are a contributing developer who installed the Magento application by cloning the GitHub repository, see instead [Update the Magento application]({{page.baseurl}}install-gde/install/cli/dev_update-magento.html).\n",
      "url": "/guides/v2.0/comp-mgr/updater/updater.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-updater-html": {
      "title": "Troubleshoot the updater application",
      "content": "If the updater application is not available, the following message displays in the readiness check:\n\n\tUpdater application is not available. \n\tPlease, download and install Updater application.\n\nTo resolve this issue, see if there is a `/update` directory that contains files and subdirectories. If not, see Set up the updater.\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/updater.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-backup-html": {
      "title": "Step 3. Back up the file system and database",
      "content": "{% include comp-man/backup.md %}\n\n#### Next step\nAfter your backup is complete, continue with [Step 4. Upgrade]({{ page.baseurl }}comp-mgr/upgrader/upgrade.html).\n\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade-backup.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-checklist-html": {
      "title": "Run System Upgrade",
      "content": "Overview of System Upgrade\nThis section discusses how to start System Upgrade, which upgrades the version of Magento core components as well as any other installed components.\n\nYou can upgrade in any of the following ways:\n\n*\tUsing the System Upgrade utility, a wizard that walks you through the upgrade step by step; continue with this topic.\n\n\tUse this method if you don't have a to the Magento server's file system or if you're a non-technical user.\n*\tUsing the [command line]({{page.baseurl}}comp-mgr/cli/cli-upgrade.html).\n\n\tThis upgrade method is more advanced and it requires access to the Magento server's file system.\t\n\n\n\tSystem upgrade refers to updating the Magento 2.x core components and other installed components. To migrate from Magento 1.x to Magento 2, see the Migration Guide.\n\n\n\n    Authorization keys from a shared account cannot be used for upgrade. You must get your authorization keys from magento.com account owner.\n    \tIf you installed the Magento application by cloning the GitHub repository, you cannot use the System Upgrade utility to upgrade the software. Instead, you must update it manually.\n\n\n## System Upgrade checklist\n{% include comp-man/checklist.md %}\n\n#### Next step\n[Start System Upgrade]({{page.baseurl}}comp-mgr/upgrader/upgrade-start.html)\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade-checklist.html"
    }
    ,
  
    "guides-v2-0-cloud-upgrade-upgrade-from-2-0-4-html": {
      "title": "Upgrade from 2.0.4",
      "content": "This section discusses steps to upgrade *only* if your current {{site.data.var.ece}} version is 2.0.4. When upgrading only from this version, follow these instructions.\n\n## Create an authorization file\nTo enable you to install and update the Magento software, you must have an `auth.json` file in your project's root directory. `auth.json` contains your Magento Commerce [authorization credentials](https://devdocs.magento.com/guides/v2.1/install-gde/prereq/connect-auth.html).\n\nIn some cases, you might already have `auth.json` so check to see if it exists and has your authentication credentials before you create a new one.\n\nTo create a new `auth.json` in the event you don't have one:\n\n{% include cloud/auth-json.md %}\n\n## Update .magento.app.yaml and composer.json\nThis section discusses how to update:\n\n*   `.magento.app.yaml`, the main project configuration file.\n*   `composer.json`, which specifies project dependencies.\n\nChanges are discussed in the sections that follow.\n\n### `.magento.app.yaml`\nOpen `.magento.app.yaml` in a text editor and update the `build` section (which is nested in the `deploy` section) and `crons` sections as follows:\n\nDeploy section:\n\n```\ndeploy: |\n    php ./vendor/magento/magento-cloud-configuration/pre-deploy.php\n    php ./bin/magento magento-cloud:deploy\n```\n\nCrons section:\n\n```\ncrons:\n        cronrun:\n            spec: \"*/5 * * * *\"\n            cmd: \"php bin/magento cron:run && php bin/magento cron:run\"\n```\n\n### `composer.json`\nOpen `composer.json` and update the `\"files\"` directive in the `autoload` section as follows:\n\n```\n\"autoload\": {\n        \"psr-4\": {\n            \"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\",\n            \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\",\n            \"Magento\\\\\": \"app/code/Magento/\"\n        },\n        \"psr-0\": {\n            \"\": \"app/code/\"\n        },\n        \"files\": [\n            \"app/etc/NonComposerComponentRegistration.php\"\n        ]\n    }\n```\n\nMove `app/NonComposerComponentRegistration.php` to `app/etc/NonComposerComponentRegistration.php`. Make sure the relative paths that point to locations in the `app` and `lib` directories reflect the  new location of the file.\n\nUpdate the `require` section as follows to:\n\n*   Replace `\"magento/product-enterprise-edition\": \"\",` with `\"magento/magento-cloud-metapackage\": \"\",`\n*   Remove `\"magento/magento-cloud-configuration\": \"1.0.*\",`\n\nIn some cases, your `composer.json` might already be correct.\n\n```\n },\n    \"require\": {\n        \"magento/magento-cloud-metapackage\": \"2.1.0\",\n        \"composer/composer\": \"@alpha\",\n        \"colinmollenhour/credis\": \"1.6\",\n        \"colinmollenhour/php-redis-session-abstract\": \"1.1\",\n        \"fastly/magento2\": \"^1.0\"\n    },\n```\n\nRun `composer update`, and make sure the updated composer.lock and other changed files are\nchecked in to git.\n\n## Repository structure\nHere are the specific files for this example to work on Magento Commerce:\n\n```\n.magento/\n         /routes.yaml\n         /services.yaml\n.magento.app.yaml\nauth.json\ncomposer.json\nmagento-vars.php\nphp.ini\n```\n\n`.magento/routes.yaml` redirects `www` to the naked domain, and that the application that will be serving HTTP is named `php`.\n\n`.magento/services.yaml` sets up a MySQL instance, plus Redis and Solr.\n\n``composer.json`` fetches the Magento Enterprise Edition and some configuration scripts to prepare your application.\n\nVerify your upgrade as discussed in the next section.\n\n## Verify your upgrade {#upgrade-verify}\nThis section discusses how to verify your upgrade and to troubleshoot any issues you might find.\n\nTo verify the upgrade in your integration, staging, or production system:\n\n1.  [SSH to the server]({{ page.baseurl }}cloud/env/environments-ssh.html).\n2.  Enter the following command from your Magento root directory to verify the installed version:\n\n        php bin/magento --version\n\n## Troubleshoot your upgrade {#upgrade-verify-tshoot}\nIn some cases, an error similar to the following displays when you try to access your storefront or the Magento Admin in a browser:\n\n    There has been an error processing your request\n    Exception printing is disabled by default for security reasons.\n      Error log record number: \n\n### View error details on the server\nTo view the error in your integration system, [SSH to the server]({{ page.baseurl }}cloud/env/environments-ssh.html) and enter the following command:\n\n    vi /app/var/report/\n\n### Resolve the error\nOne possible error occurs when the deployment hook failed, and therefore the database has not yet been fully upgraded. If so, an error similar to the following is displayed:\n\n    a:4:{i:0;s:433:\"Please upgrade your database: Run \"bin/magento setup:upgrade\" from the Magento root directory.\n    The following modules are outdated:\n    Magento_Sales schema: current version - 2.0.2, required version - 2.0.3\n\nTo resolve the error:\n\n1.  [SSH to the server]({{ page.baseurl }}cloud/env/environments-ssh.html).\n2.  [Examine the logs]({{ page.baseurl }}cloud/trouble/environments-logs.html) to determine the source of the issue.\n3.  After you fix the source of the issue, push the change to the server, which causes the upgrade to restart.\n\n    For example, on a local branch, enter the following commands:\n\n        git add -A && git commit -m \"fixed deployment failure\" && git push origin \n\n#### Related topic\n* [Composer]({{page.baseurl}}cloud/reference/cloud-composer.html)\n* [Install, manage, and upgrade modules]({{page.baseurl}}cloud/howtos/install-components.html)\n* [Install optional sample data]({{page.baseurl}}cloud/howtos/sample-data.html)\n* [Merge and delete an environment]({{page.baseurl}}cloud/howtos/environment-tutorial-env-merge.html)\n",
      "url": "/guides/v2.0/cloud/upgrade/upgrade-from-2-0-4.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-main-pg-html": {
      "title": "Step 1. Select versions to upgrade",
      "content": "System upgrade options\nTo choose which components to upgrade:\n\n1.\tAfter you run System Upgrade, a page similar to the following displays:\n\t\n2.\tYou have the following options:\n\t\n\t\n\t\n\t\tItem\n\t\tMeaning\n\t\n\t\n\t\tTry Again, Next\n\t\tClick Try Again to search for upgrades again. You can do this if something recently changed.\n\t\t\tClick Next to continue to the readiness check after making selections on this page.\n\t\n\t\n\t\tMagento Core Components list\n\t\tDisplays available core component versions for upgrade.\n\t\t\t(current) indicates the version you currently have.\n\t\t\t(latest) indicates the most recent available version for upgrade.\n\t\n\t\n\t\tOther Components button\n\t\tEnables you to search for upgrades for third-party components.\n\t\t\tTo search for available component updates, click Yes.\n\t\t\tTo search only for Magento core component upgrades, click No.\n\t\n\t\n\t\tPagination\n\t\tEnables you to:\n\t\t\tSpecify the number of items to display on a page.\n\t\t\tFrom left to right, move back one page, go to a specific page, or move forward one page.\n\t\n\t\n\t\tList of components\n\t\tFor each component, you can:\n\t\t\tSet Upgrade to Yes to upgrade it.\n\t\t\t\tSet Upgrade to No to skip it (that is, not upgrade that component).\n\t\t\t\tFrom the Update Version list, click the upgrade version. (If you already have the most current version, the list has only one option.)\n\t\t\t\t\n\t\n\t\n\t\n\t\n\nUpgrade components\nTo upgrade components:\n\n1.\tFrom the **Magento Core Components** list, click the core component version to which to upgrade.\n\n\tFor example, to upgrade to the latest version, click the one with **(latest)** in the name as the following figure shows.\n\n\t\n\n2.\tFor each third-party component:\n\n\t*\tIf you *do* want to upgrade it, set **Upgrade** to **Yes** and click the version from the **Update Version** list.\n\n\t\tA sample follows.\n\n\t\t\n\n\t*\tIf you *do not* want to upgrade it, set **Upgrade** to **No**.\n\n\t\tA sample follows.\n\n\t\t\n\n3.\tClick **Next** and continue with Step 2. Readiness check\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade-main-pg.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-readiness-html": {
      "title": "Step 2. Readiness check",
      "content": "The readiness check makes sure your server and environment are set up correctly for upgrading components. In the {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} of errors, you can consult troubleshooting suggestions in this guide.\n\nStart the readiness check\nTo start, click either **Start Readiness Check** or **Next** on the System Upgrade page. A sample follows.\n\n\n\n{% include comp-man/readiness-check.md %}\n\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade-readiness.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-start-html": {
      "title": "Start System Upgrade",
      "content": "Prerequisites\nBefore continuing, complete all tasks discussed in Prerequisites.\n\n\n   \tIf you're upgrading to version 2.1, see Upgrade to Magento version 2.1 (June 22, 2016).   \n\n\n## Optional custom maintenance page\nDuring the time you're upgrading, your {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} is partially available. Users can see a list of files and so on but cannot shop or check out.\n\nTo avoid the appearance of a disabled site and to set up a custom maintenance page that displays during the upgrade, see [Maintenance mode options for upgrade]({{page.baseurl}}comp-mgr/trouble/cman/maint-mode.html).\n\nStart System Upgrade from the Magento Admin\nTo run System Upgrade:\n\n1.\tLog in to the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} as an administrator.\n2.\tClick **System** > Tools > **Web Setup Wizard**.\n\tThe following page displays.\n\t\n3.\tClick **System Configuration**.\n4.\tIf you haven't already done so, enter your [authentication keys]({{page.baseurl}}install-gde/prereq/connect-auth.html) in the provided fields.\n\n\tThe following figure shows an example if you *have* already entered your keys.\n\n\t![Authentication keys entered in the Setup Wizard]({{ site.baseurl }}common/images/compman_auth-keys.png)\n\n\t\n    \tFor upgrade or update, you must use the same authentication keys you used to install the Magento software. For example, you cannot use {{site.data.var.ce}} authentication keys to update or upgrade Magento EE or vice versa. You also cannot use:\n    \tAnother user's authentication keys\n    \tShared account authentication keys   \n\t\n5.\tClick **Save Config**.\n3.\tClick **System Upgrade**.\n\n\tMagento begins searching for core module updates immediately. To also search for component updates, click **Yes**. A sample follows:\n\n\t\n\n\tThe page displays similar to the following when we find components to upgrade.\n\t\n4. \tContinue with Step 1. Select versions to upgrade.\n\n#### Error\nThe following error can indicate one of several issues, including that you haven't entered your authentication keys in the Magento Admin:\n\n\n\nFor suggested solutions to other causes indicated by this message, see troubleshooting.\n\n#### Sample data\nThe System Upgrade utility installs sample data for you but doesn't display it, if you:\n\n*\tUsed the [`magento sampledata:deploy`]({{page.baseurl}}install-gde/install/cli/install-cli-sample-data-composer.html) command to download, but not installed sample data\n*\tYou chose to update components at the same time as the Magento system software\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade-start.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-upgrader-upgrade-html": {
      "title": "Step 4. Upgrade",
      "content": "The components you're upgrading display. The following figure shows an example.\n\n\n\n\nTo complete the upgrade, click **Upgrade**. If the upgrade is successful, a page similar to the following displays.\n\n\n\nMessages similar to the following display in the Console Log:\n\n{% collapsible Click to view the Console Log %}\n\n\n\n{% endcollapsible %}\n\n## Manually clear directories\nAfter the upgrade completes, manually clear `var` subdirectories:\n\n\trm -rf /var/cache/*\n\trm -rf /var/page_cache/*\n\trm -rf /var/generation/* \n\n## Restart Varnish\nAfter the upgrade completes, restart Varnish if you use it for page caching.\n\n\tservice varnish restart\n\nThen access your {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} and verify everything is working properly.\n\n## Errors after upgrade\nAfter you finish your upgrade, errors might display.\n\n*\tOn the main storefront page, the following error might display.\n\n\t\tWe're sorry, an error has occurred while generating this email.\n*\tOn a {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %} page, the following error might display:\n\n\t\tWe can't find products matching the selection.\n\t\nIf any of the preceding errors display, perform all of the following tasks.\n\n{% include install/sampledata/file-sys-perms-digest.md %}\n\n### Clear `var` directories\nClear the `var/cache`, \t`var/page_cache`, `var/generation`\n\nA sample command follows:\n\n\trm -rf var/cache/* var/page_cache/* var/generation/*\n\n### Access your storefront again\nAfter performing the preceding tasks, access your storefront again. If necessary, press Control+R to force the page to reload.\n",
      "url": "/guides/v2.0/comp-mgr/upgrader/upgrade.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-use-varnish-cache-how-html": {
      "title": "How Varnish caching works",
      "content": "Overview of Varnish caching\nThis topic discusses how Varnish caching works with Magento using:\n\n*\t`nginx.conf.sample` from the Magento 2 GitHub repository\n*\t`.htaccess` distributed configuration file for Apache provided with Magento\n*\t`default.vcl` configuration for Varnish generated using the Magento Admin\n\n\n\tThis topic covers only the default options in the preceding list. There are many other ways to configure caching in complex scenarios (for example, using a Content Delivery Network); those methods are beyond the scope of this guide.\n\n\nOn the first browser request, cacheable assets are delivered to the client browser from Varnish and cached on the browser.  \n\nIn addition, Varnish uses an {% glossarytooltip a9027f5d-efab-4662-96aa-c2999b5ab259 %}Entity{% endglossarytooltip %} Tag (ETag) for static assets. The ETag provides a way to determine when {% glossarytooltip 363662cb-73f1-4347-a15e-2d2adabeb0c2 %}static files{% endglossarytooltip %} change on the server. As a result, static assets are sent to the client when they change on the server&mdash;either on a new request from a browser or when the client refreshes the browser cache, typically by pressing F5 or Control+F5.\n\nMore detail is provided in the sections that follow.\n\nCaching by browser request\nThis section uses a browser inspector to show how assets are delivered to the browser in the first request and afterward loaded from the browser's local {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %}.\n\nFirst browser request\n`nginx.conf.sample` and `.htaccess` provide options for client caching. When the first request is made from a browser for a cacheable object, Varnish delivers it to the client.\n\nThe following figure shows an example using a browser inspector.\n\n\n\nThe preceding example shows a request for the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} main page (`m2_ce_my`). {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} and {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} assets are cached on the client browser.\n\n\n\tMost static assets have an HTTP 200 (OK) status code, indicating the asset was retrieved from the server.\n\n\nSecond browser request\nIf the same browser requests the same page again, these assets are delivered from the local browser cache, as the following figure shows.\n\n\n\nNote the difference in response time between the first and second request. Again, static assets have a 200 (OK) response code because they're delivered from local cache for the first time.\n\nHow Magento uses Etag\nThe following example shows response headers for a particular static asset. \n\n\n`calendar.css` has an ETag response header which means the CSS file on the client browser can be compared to the one on the server.\n\nIn addition, static assets are returned with a 304 (Not Modified) HTTP status code, as the following figure shows.\n\n\n\nThe 304 status code occurs because the user invalidated their local cache and the content on the server did not change. Because of the 304 status code, the static asset *content* is not transferred; only HTTP headers are downloaded to the browser. \n\nIf the content changes on the server, the client downloads the static asset with an HTTP 200 (OK) status code and a new ETag.\n\n",
      "url": "/guides/v2.0/config-guide/varnish/use-varnish-cache-how.html"
    }
    ,
  
    "guides-v2-0-config-guide-varnish-use-varnish-cache-html": {
      "title": "How Magento cache clearing works with Varnish",
      "content": "This topic discusses the basics of using Varnish as a web caching accelerator for Magento.\n\nVarnish purging\nAccording to Varnish documentation, \"A *purge* is what happens when you pick out an object from the {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %} and discard it along with its variants.\" A Varnish purge is very similar to a Magento cache clean command (or clicking **Flush Magento Cache** in the Magento Admin).\n\nIn fact, as discussed in this section, when you clean, flush, or refresh the Magento cache, Varnish purges as well.\n\nAfter you've installed and configured Varnish to work with Magento, the following actions can result in a Varnish purge:\n\n*    Maintaining a {% glossarytooltip a3c8f20f-b067-414e-9781-06378c193155 %}website{% endglossarytooltip %}.\n\n    For example, anything you do in the Admin in:\n\n    *    **STORES** > **Configuration** > GENERAL > **General**\n    *    **STORES** > **Configuration** > GENERAL > **Currency Setup**\n    *    **STORES** > **Configuration** > GENERAL > **Store Email Addresses**\n\n    When Magento detects such a change, a message displays informing you to refresh the cache. Refer to the _Magento User Guide_ for more information about Magento cache management. .\n\n*    Maintaining a store (for example, adding or editing categories, prices, products, and promotional pricing rules).\n\n    Varnish is purged automatically when you perform any of these tasks.\n\n*    Maintaining source code.\n\n    You should refresh the cache and also periodically delete everything in the `var/generation` and `var/di` directories. For information on refreshing the cache, see the next section.\n\nConfigure Magento to purge Varnish\nMagento purges Varnish hosts after you configure Varnish hosts using the `magento setup:config:set` command.\n\nYou can use the optional parameter `--http-cache-hosts` parameter to specify a comma-separated list of Varnish hosts and listen ports. Configure all Varnish hosts, whether you have one or many. (Do not separate hosts with a space character.)\n\nThe parameter format must be `:`, where you can omit `` if it's port 80.\n\nFor example,\n\n    magento setup:config:set --http-cache-hosts=192.0.2.100,192.0.2.155:6081\n\nYou can then purge Varnish hosts when you refresh the Magento cache (also referred to as *cleaning* the cache) in the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} or using the command line.\n\nTo refresh the cache using the Admin, click **SYSTEM** > Tools > **Cache Management**, then click **Flush Magento Cache** at the top of the page. (You can also refresh individual cache types.)\n\nTo refresh the cache using the command line, you typically use the `magento cache:clean [type]` command as the Magento file system owner.\n",
      "url": "/guides/v2.0/config-guide/varnish/use-varnish-cache.html"
    }
    ,
  
    "guides-v2-0-pattern-library-getting-user-input-use-default-config-use-default-config-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Use Default Config \nIn the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} some textfields can inherit default values (which have been set in config by the Merchant). A user has the ability to overwrite these default values at the page level. The \"Use Default Value\" or \"Use Configuration Value\" controls allow the user to revert an overwritten textfield value to the original default value.\n\nWhen to Use\n* To be used when a text field inherits its value by default.  It can be overridden by the user.   If the user has overridden the default value this control provides a convenient method to recover the original inherited value.\n\nWhen Not to Use\n* When the value of a textfield does not have a default value set.\n\nBehavior\n\n\nStyle\n\n\n\nVariations\nThere are two variations. The behavior and style remains the same. The label is changed to identify the origin of this value.\n\n\"Use Default Value\"\nValue is taken from default scope and user needs to switch to default scope to change the default value\n\n\n\n\n\"Use Configuration Value\"\nValue is set in Stores > Store configuration and user has to go there to change the default.\n\n\n\n\n\nAccessibility\n\nUser should be able to access this control via their keyboard and it should be legible if the user use voice navigation. Follow this accessibility guideline: http://www.w3.org/TR/WCAG10-HTML-TECHS/#link \n\n\nAssets\nPSD files can be found here:\nDownload Default Config PSD source\n",
      "url": "/guides/v2.0/pattern-library/getting-user-input/use_default_config/use_default_config.html"
    }
    ,
  
    "guides-v2-0-cloud-project-user-admin-html": {
      "title": "Create and manage users",
      "content": "{{site.data.var.ece}} enables you to administer users by assigning them one or more roles. A *role* provides access and improves security in your project. Different roles are authorized to do different things with your applications, environments, and users. You can add and manage user accounts for the entire project and permissions per available environment.\n\n{% include cloud/wings-management.md %}\n\n## Account owner role {#cloud-role-acct-owner}\nThe Account Owner is the only user with the Account Owner role. This user can perform any task in any project or environment, including delete it. The account is associated with the email address, name, and information for the person who registered the {{site.data.var.ece}} account through the trial or create new account process.\n\nThe account has super user access and additional capabilities for managing all aspects of your project and environments.\n\n## Project-level roles {#cloud-role-project}\nYou can assign users to the following roles per project:\n\n* Project administrator (also referred to as *super user*) can change settings and execute actions on any environment, including creating and restoring snapshots.\n*  Project reader can view all environments in a project but cannot execute any actions on them.\n\n## Environment-level roles {#cloud-role-env}\nA project reader can have one of the following roles per environment:\n\n* Environment administrator can change settings and execute actions on this environment, including merging with the parent environment.\n* Environment contributor can push code to this environment and branch the environment.\n* Environment reader can view this environment only.\n\n\n  We recommend you limit the environment administrator role to as few users as possible.\n\n\n## Role management best practices\nWhen a development team works on a project, the team leader can be the project administrator and decide which roles to give his team members. One team member can contribute to one environment, another member can administer a different environment, and the customer can be a reader of the `master` environment.\n\nFor your users to be able to see everything but only commit to a specific branch, change their permission level on that environment to \"Contributor\".\n\n\n\n    An environment contributor can push code to the environment, but that user role does not have SSH access to the environment. By default, only environment administrators have SSH access. You can change the behavior in .magento.app.yaml by specifying ssh: contributor.\n\n\n## Create and manage users\nYou can create and manage users using the Magento Cloud CLI or the Web Interface.\n\n### Manage users with the CLI {#cloud-user-mg-cli}\nYou can use the {{site.data.var.ece}} command line client to fully manage your users and integrate this with any other automated system.\n\nAvailable commands:\n\n* `magento-cloud user:add` adds a user to the project\n* `magento-cloud user:delete` deletes a user\n* `magento-cloud user:list [users]` lists project users\n* `magento-cloud user:role` views or change a user's role\n\nFor example, the following command adds the project administrator (`admin`) role to `alice@example.com` and gives her `contributor` privileges to the `development` environment:\n\nThe following prompts are displayed:\n\nmagento-cloud user:add\n\nEmail address: alice@example.com\nThe user's project role can be 'viewer' ('v') or 'admin' ('a').\nProject role [V/a]: a\nThe user's environment-level roles can be 'viewer', 'contributor', or 'admin'.\ndevelopment environment role [V/c/a]: c\nSummary:\n  Email address: alice@example.com\n  Project role: contributor\nAdding users can result in additional charges.\nAre you sure you want to add this user? [Y/n]\nUser alice@example.com created\n\nAfter this has been done, the user will receive an e-mail asking her to confirm\nher details and register an account name and a password.\n\nTo change Alice's role on the environment `development` to `admin`, use the following command:\n\n\tmagento-cloud user:role alice@example.com --level environment --environment development --role admin\n\nUse `magento-cloud list` to get the full list of commands.\n\n### Manage users with the Web Interface {#cloud-user-webinterface}\n\nTo create user accounts using the Web Interface:\n\n1.  Log in to [your {{site.data.var.ece}} account](https://accounts.magento.cloud){:target=\"_blank\"}.\n2.  Click the **Projects** tab as the following figure shows.\n\n\t![Click the projects tab to access your Cloud project]({{ site.baseurl }}common/images/cloud_account_project.png){:width=\"550px\"}\n3.\tClick the name of your project.\n4.\tClick the configure project button next to project name in the top navigation bar as the following figure shows.\n\n\t![Configure the project]({{ site.baseurl }}common/images/cloud_project_gear.png){:width=\"184px\"}\n5.\tIn the right pane, click **Add Users**.\n\n\t![Start creating users]({{ site.baseurl }}common/images/cloud_project-config.png){:width=\"500px\"}\n6.\tClick **Add User**.\n\n\t![Add users]({{ site.baseurl }}common/images/cloud_project-add-superuser.png){:width=\"500px\"}\n7.\tEnter the user's e-mail address.\n8.\tSelect the access for the account:\n\n\t*\tFor a project administrator account, select the **Super User** check box. This provides Admin rights for all settings and environments. If not selected, the account has only view options for all environments on a project.\n\t*\tSelect permissions per specific environment (or branch) in the Integration environment: No access, Admin (change settings, execute action, merge code), Contributor (push code), or Reader (view only). As you add active environments, you can modify permissions per user.\n8.\tClick **Add User**.\n\nThe users you add receive an e-mail inviting them to join the {{site.data.var.ece}} project. The user must follow the prompts to register an account and verify their e-mail address. They receive access based on the set project and environment permissions.\n\n## Rebuild the environment {#rebuild}\nAfter a new user is added to an environment, the environment must be rebuilt. Rebuilds are triggered when you push a new commit to an environment. To be able to rebuild without new code changes, use the command `git commit --allow-empty -m \"redeploy\" && git push ` to create an empty commit and \"force\" rebuilding the environment.\n\nWhen the environment rebuild is complete, allow a short time for the routes to update fully and for the new user to be able to use SSH access.\n",
      "url": "/guides/v2.0/cloud/project/user-admin.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-css-topics-using-fonts-html": {
      "title": "Using custom fonts",
      "content": "What's in this topic\nThe Magento application contains a set of built-in fonts, but you can easily include custom fonts. This topic describes how to include a locally stored custom font in your Magento {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %}.\n\n\nFont files location\n\nLocally stored fonts\nPlace the font files to your theme directory under: &lt;theme_dir&gt;/web/fonts.\n\nExternal fonts\nTo use external fonts, include them in the page configuration file, as described in Include static resources (JavaScript, CSS, fonts).\n\nInclude fonts\n\nTo ensure stability and secure your customizations from being deleted during upgrade, we recommend not changing default Magento files. That is why custom fonts should be included in the stylesheets of custom themes.\n\nInclude locally stored fonts\nTo include a custom font stored locally, use one of the following approaches:\n\n \nIf you build a theme using Magento UI library, declare the font by adding the .lib-font-face {% glossarytooltip 1a305bdb-9be8-44aa-adad-98758821d6a7 %}mixin{% endglossarytooltip %} in the &lt;theme_dir&gt;/web/css/source/_typography.less file:\n\n.lib-font-face(\n    @family-name:'&lt;any_font_name&gt;',\n    @font-path: '@{baseDir}fonts/&lt;path_to_font_file&gt;',\n    @font-weight: &lt;font_weight&gt;,\n    @font-style: &lt;font_style&gt;\n)\n\n\nWhere:\n\n\t{@baseDir} stands for the app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/web directory.\n&lt;path_to_font_file&gt; includes the font file name, but without the {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %}. For example, @font-path: '@{baseDir}fonts/Luma-Icons' for the font stored in web/fonts/Luma-Icons.woff\n\n\nThe mixin generates the {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} including font. For example, here is how the generated CSS looks for the Open Sans font used in the Blank theme:\n\n@font-face {\n    font-family: 'Open Sans';\n    src: url('../fonts/opensans/light/opensans-300.eot');\n    src: url('../fonts/opensans/light/opensans-300.eot?#iefix') format('embedded-opentype'), url('../fonts/opensans/light/opensans-300.woff2') format('woff2'), url('../fonts/opensans/light/opensans-300.woff') format('woff'), url('../fonts/opensans/light/opensans-300.ttf') format('truetype'), url('../fonts/opensans/light/opensans-300.svg#Open Sans') format('svg');\n    font-weight: 300;\n    font-style: normal\n}\n\n\nIf your theme does not use the Magento UI library, include the font in your theme .css files by the standard means of CSS, for example the @font-face rule.\n\n\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/css-topics/using-fonts.html"
    }
    ,
  
    "guides-v2-0-extension-dev-guide-validate-validate-html": {
      "title": "Validate",
      "content": "After your {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} is built, you should test it. Read through the Definition of Done to confirm that your module and coding practice is compliant with Magento.\n\n* [Definition of done]({{page.baseurl}}contributor-guide/contributing_dod.html) in the Contributor Guide.\n* [Testing]({{page.baseurl}}extension-dev-guide/validate/test-module.html)\n",
      "url": "/guides/v2.0/extension-dev-guide/validate/validate.html"
    }
    ,
  
    "guides-v2-0-install-gde-install-verify-html": {
      "title": "Verify the installation",
      "content": "Verify the storefront (with optional sample data)\nGo to the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} in a web browser. For example, if your Magento installation base {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} is `http://www.example.com`, enter it in your browser's address or location bar.\n\nThe following figure shows a sample storefront page. If it displays as follows, your installation was a success!\n\n\n\n\nVerify the storefront (no sample data)\n\nGo to the storefront in a web browser. For example, if your Magento installation base URL is `http://www.example.com`, enter it in your browser's address or location bar.\n\nThe following figure shows a sample storefront page. If it displays as follows, your installation was a success!\n\n\n\nIf the page displays a 404 (Not Found) or unconfigured (no styles, only text), see After installing, images and stylesheets do not load; only text displays, no graphics.\n\nVerify the Magento Admin\n\nGo to the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %} in a web browser. For example, if your Magento installation base URL is `http://www.example.com`, and the Admin URI is `admin_au1nT`, enter `http://www.example.com/admin_au1nT` in your browser's address or location bar.\n\n(The {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %} URI is specified by the value of the `backend-frontname` installation parameter.)\n\nWhen prompted, log in as a Magento Administrator.\n\nThe following figure shows a sample Magento Admin page. If it displays as follows, your installation was a success!\n\n\n\nIf the page displays unconfigured (no styles, only text), see After installing, images and stylesheets do not load; only text displays, no graphics.\n\nIf you get a 404 (Not Found) error similar to the following, see Cannot access Magento software in a web browser.\n\n`The requested URL /magento2index.php/admin/admin/dashboard/index/key/0c81957145a968b697c32a846598dc2e/ was not found on this server.`\n",
      "url": "/guides/v2.0/install-gde/install/verify.html"
    }
    ,
  
    "guides-v2-0-architecture-versioning-spec-format-html": {
      "title": "Supported versioning specificiations and format",
      "content": "Supported versioning specifications and formats\n\n\nSupported specifications\n\nMagento software versioning policy complies with these widely used specifications:\n\n* [Semantic Versioning 2.0.0](http://semver.org/)\n* [Versioning specification of Composer system](https://getcomposer.org/doc/04-schema.md#version)\n* [PHP version_compare()](http://php.net/version_compare)\n\nVersion formats\n\nStable release versions are in the format `MAJOR.MINOR.PATCH`, where:\n\n* MAJOR indicates incompatible {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} changes\n\n* MINOR indicates backward-compatible functionality has been added\n\n* PATCH indicates backward-compatible bug fixes\n\n\nThe pre-release version format is: `MAJOR.MINOR.PATCH-n`, where `alpha`, `beta` or `rc` are stability indications, as described in the `version_compare()` specification, and\n`n` is an increment number to distinguish releases of the non-stable versions.\n\nIf you are an {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} developer, familiarize yourself about the types of code changes that will initiate a MAJOR-, MINOR-, or PATCH- level change.\n",
      "url": "/guides/v2.0/architecture/versioning_spec_format.html"
    }
    ,
  
    "guides-v2-0-get-started-web-api-functional-testing-html": {
      "title": "Web API functional testing",
      "content": "## Web API functional testing\n{:.no_toc}\n\nThe Web {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} testing framework allows you to test Magento {% glossarytooltip 377dc0a3-b8a7-4dfa-808e-2de37e4c0029 %}Web API{% endglossarytooltip %} from the client application point of view. The tests can be used with either REST or SOAP. The REST or SOAP {% glossarytooltip edb42858-1ff8-41f9-80a6-edf0d86d7e10 %}adapter{% endglossarytooltip %} that runs the tests is specified in PHPUnit configuration. See [How to Run the Tests](#howto) for more information.\n\n\nImplementation Details\n\nThe Web API functional testing framework depends on the integration testing framework and reuses most of classes implemented there.\n\n\nCustom Annotations for Data Fixtures\n\nIn the Web API functional tests only, the custom annotation  `@magentoApiDataFixture` is available for declaring fixtures. The difference of this annotation from `@magentoDataFixture` is that the fixture will be committed and accessible during HTTP requests made within the test body. The usage rules of `@magentoApiDataFixture` are the same as `@magentoDataFixture` usage rules.\n\n\n\nIf data was added to the DB using @magentoApiDataFixture, it will not be automatically cleared after test execution. The data is cleared when @magentoDataFixture is used.\n\n\nDo not define fixtures in `dev/tests/api-functional`. Instead, they must be taken from `dev/tests/integration`. The integration framework defines most necessary fixtures, and they should be reused during Web API functional testing. If the existing set of fixtures is insufficient, add new fixtures under `dev/tests/integration`. The fixtures will then be available for both testing frameworks.\n\nTo keep your test environment clean, clear all entities created in fixture files or within tests itself from the DB after test execution. This can be done either directly in tearDown or by a corresponding rollback for the fixture file. This file should be named the same as a fixture, but with `_rollback` suffix.\n\nHow to Create a New Test\n\nAll Web API functional tests should inherit from the generic test case `Magento\\TestFramework\\TestCase\\WebapiAbstract`. It defines the `_webApiCall()` method, which should be used to perform Web API calls from tests. Clients of `_webApiCall()` are unaware of which adapter will be used to perform the remote call.\n\n{% highlight php inline=true %}\nnamespace Magento\\Webapi\\Routing;\n\nclass CoreRoutingTest extends \\Magento\\TestFramework\\TestCase\\WebapiAbstract\n{\n    public function testBasicRoutingExplicitPath()\n    {\n        $itemId = 1;\n        $serviceInfo = [\n            'rest' => [\n                'resourcePath' => '/V1/testmodule1/' . $itemId,\n                'httpMethod' => \\Magento\\Framework\\Webapi\\Rest\\Request::HTTP_METHOD_GET,\n            ],\n            'soap' => [\n                'service' => 'testModule1AllSoapAndRestV1',\n                'operation' => 'testModule1AllSoapAndRestV1Item',\n            ],\n        ];\n        $requestData = ['itemId' => $itemId];\n        $item = $this->_webApiCall($serviceInfo, $requestData);\n        $this->assertEquals('testProduct1', $item['name'], \"Item was retrieved unsuccessfully\");\n    }\n}\n{% endhighlight %}\n\nThe test above should be able to test SOAP and REST, depending on what adapter is currently used by the testing framework. The format of `$serviceInfo` is defined by the Web API client adapter interface:\n\n{% highlight php inline=true %}\nnamespace Magento\\TestFramework\\TestCase\\Webapi;\n\ninterface AdapterInterface\n{\n    /**\n     * Perform call to the specified service method.\n     *\n     * @param array $serviceInfo \n     * array(\n     *     'rest' => array(\n     *         'resourcePath' => $resourcePath, // e.g. /products/:id\n     *         'httpMethod' => $httpMethod,     // e.g. GET\n     *         'token' => '21hasbtlaqy8t3mj73kjh71cxxkqj4aq'    // optional : for token based Authentication. Will\n     *                                                             override default Oauth based authentication provided\n     *                                                             by test framework\n     *     ),\n     *     'soap' => array(\n     *         'service' => $soapService,    // soap service name with Version suffix e.g. catalogProductV1, customerV2\n     *         'operation' => $operation     // soap operation name e.g. catalogProductCreate\n     *     )\n     * );\n     * \n     * @param array $arguments\n     * @param string|null $storeCode if store code not provided, default store code will be used\n     * @param \\Magento\\Integration\\Model\\Integration|null $integration\n     * @return array|string|int|float|bool\n     */\n    public function call($serviceInfo, $arguments = [], $storeCode = null, $integration = null);\n}\n{% endhighlight %}\n\nHow to Run the Tests\nPrerequisites\n1. Install the {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} Soap {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %}.\n\n\tCopy `php_soap.dll` or `php_soap.so` to your PHP extensions directory. Edit your `php.ini` file and enable the PHP Soap extension. Usually this means deleting the leading semi-colon in front of the extension. Then restart Apache.\n\n\t`extension=php_soap.dll`\n\n2. Before running the functional tests you need to clear your {% glossarytooltip 0bc9c8bc-de1a-4a06-9c99-a89a29c30645 %}cache{% endglossarytooltip %}.\nNow you are ready to run the tests.\n\nRunning the Tests\n1. Copy `/dev/tests/api-functional/phpunit.xml.dist` to `/dev/tests/api-functional/phpunit.xml`.\n\n\ta. Specify your Magento instance URL as a value of `TESTS_BASE_URL` in `phpunit.xml`.\n\n\tb. Choose the required Web API adapter, `rest` or `soap`, to be used and specify it in `TESTS_WEB_API_ADAPTER`.\n\n2. Copy `/dev/tests/api-functional/config/install-config-mysql.php.dist` to `/dev/tests/api-functional/config/install-config-mysql.php`.\n\n3. Configure your DB connection and install settings in `/dev/tests/api-functional/config/install-config-mysql.php`.  Specify the Magento database. The base URL to access this Magento instance must be specified in `phpunit.xml`.\n\n4. Run `phpunit` using the `/dev/tests/api-functional/phpunit.xml ` configuration file.\n",
      "url": "/guides/v2.0/get-started/web-api-functional-testing.html"
    }
    ,
  
    "guides-v2-0-coding-standards-technical-vision-webapi-html": {
      "title": "Web API technical vision",
      "content": "Web API is crucial for Magento because of the need to integrate with order management, customer management, and other enterprise management software systems.\n\nThere are many headless Magento installations in which a merchant partially uses Magento functionality, while the other pieces of an eCommerce website are provided by other systems.\n\nSee [more details](https://en.wikipedia.org/wiki/Web_API) about importance of web APIs in modern web applications.\n\n\n### Components Dependencies\n\nThe following diagram shows Web API component dependencies.\n\n![Web API components dependencies]({{site.baseurl}}common/images/coding-standards/webapi-components-dependencies.png)\n\n### High-level Architecture\n\nThe following image provides an overview of how Web APIs are processed.\n\n![Web API request processing overview]({{site.baseurl}}common/images/coding-standards/webapi-request-processing-high-level-overview.png)\n\n### Extension Scenarios\n\n#### Declare a new REST and SOAP endpoint\n\nAny [service contract]({{page.baseurl}}extension-dev-guide/service-contracts/service-contracts.html) can be [exposed as REST and SOAP]({{page.baseurl}}extension-dev-guide/service-contracts/service-to-web-service.html) endpoints via configuration in a module's `webapi.xml` file.\n\n#### Declare a new GraphQL query\n\n1. Create custom resolvers.\n1. Declare a custom query and all necessary types in `graphql.xml`\n\nIf the target module is called `MyModule`, then create the resolvers and configuration files in a a new module called `MyModuleGraphQl`.\n\nSee the [GraphQL documentation](https://devdocs.magento.com/guides/v2.3/graphql/index.html) for more information.\n\n\n#### Add a custom authentication mechanism\n\n1. Provide a custom implementation of `\\Magento\\Authorization\\Model\\UserContextInterface`, that verifies a user's identity using a  custom authentication mechanism.\n1. Declare custom user context in the composite user context for the target area(s) (`webapi_rest`, `webapi_soap`, `webapi_graphql`) :\n\n```xml\n\n    \n        \n            \n                Vendor\\Module\\Model\\Authentication\\CustomUserContext\n                100\n            \n        \n    \n\n```\n\n#### Modify the schema of an existing SOAP and REST endpoint\n\nThe recommended approach for modifying an interface is to define a new endpoint. If you simply modify the schema, you might break existing integrations or extensions.\n\nTo extend an interface, use [extension attributes]({{page.baseurl}}extension-dev-guide/attributes.html).\n\n#### Modify the schema of an existing GraphQL query\n\n1. Add a `graphql.xml` file to the `GraphQl` module. Magento merges this file with configurations from other modules using the same merge rules as other types of configuration.\n\n2. Write any necessary plugins for existing resolvers related to the query, or create a custom resolver and enable it via override in `graphql.xml`\n\n### Model Consistency Constraints\n\nAny new design related to Web API must satisfy the following constraints to keep the model consistency.\n\n**General**\n\n1. REST and SOAP must be designed for Admin Panel integrations and be equal in terms of coverage. GraphQL should be designed for store front scenarios.\n1. Any identifier exposed in guest APIs (for example, cart ID) must be masked to prevent the possibility of unauthorized access to the data of other guest users.\n1. Authentication must be done via `\\Magento\\Authorization\\Model\\UserContextInterface`.\n1. Customer-specific identifiers (such as customer ID or cart ID) must be deducted from the record of the successfully authenticated customer. They must not be accepted via request parameters.\n1. All new web API endpoints must be covered with web API functional tests.\n    * For REST and SOAP, by default, the same test will be executed in the scope of different continuous integration jobs. The base class for REST and SOAP tests is `\\Magento\\TestFramework\\TestCase\\WebapiAbstract`\n    * The base class for GraphQL tests is: `\\Magento\\TestFramework\\TestCase\\GraphQlAbstract`\n1. Web API requests must be processed by custom front controllers with optimized routing to prevent the admin and store front areas from executing routers.\n1. Web API schema should be strictly typed. (All complex types should eventually be resolved to scalar types.)\n1. Authentication parameters must be be passed via headers.\n1. Throttling must be configured by the system integrator. It is not supported by Magento\n1. Internal server errors must be masked and never shown to the user in production mode. In developer mode, original exceptions must never be masked and should be displayed along with the related stacktrace.\n1. Pagination must be supported by all list operations.\n\n**GraphQL**\n\n1. Unlimited nesting should be supported during requests for related entities. (For example, get Order => Order Items => Products => Related Products)\n1. Field filtration must be performed with SQL queries. Do not filter on the application layer after you've fetched all possible fields.\n1. Third-party customizations must be done separately for Service Contracts and for GraphQL\n1. For modularity purposes, GraphQL configuration must be declared in a separate module. For example, to expose GraphQL for the module `MyModule`, you must create the `graphql.xml` file in the `MyModuleGraphQl` module.\n1. GraphQL is primarily designed for store-front one-page apps and mobile applications. It supports token and cookie authentication, as well as guest access to public queries\n1. All queries must return the 200 HTTP status code. If an error occurs, return the error in the response body. A 500 status code is allowed when an exception occurs when generating a schema, but not during requests.\n1. The Store code should be passed via headers.\n\n**REST**\n\n1. The resource URL should be versioned (for example: V1). The version must be specified in the following format: `V\\d.+`\n1. Resource names in a URL should be in plural form (for example: products, carts)\n1. ID parameters for operations on entities should be part of the resource URL (for example: /V1/products/**:sku** )\n1. POST should be used to create an entity.\n   PUT should be used to update an entity.\n   PATCH should be used to patch (update only selected fields) an entity(s) update.\n1. REST is designed for system integrations, mobile app integrations, as well as for one-page apps. It supports tokens, cookies and OAuth 1.0 with token exchange. It also supports guest access to public resources.\n1. Responses must return responses with standard [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\n1. The store code must be passed via URL. For example `GET /rest/frenchStoreView/V1/products`. Persistence operations that should be performed for all stores at once, should have 'all' store code in the URL.\n\n**SOAP**\n\n1. SOAP is designed for systems integration. It supports token authentication for customers and admins, as well as no authentication for anonymous service methods. Cookie authentication and OAuth 1.0 are not supported.\n1. The schema is available in the form of a WSDL for all exposed services.\n1. All requests must return the 200 HTTP status code. If an error occurs, return the error in the response. \n",
      "url": "/guides/v2.0/coding-standards/technical-vision/webapi.html"
    }
    ,
  
    "guides-v2-0-mtf-features-webdriver-html": {
      "title": "Web Driver Replacement in the Functional Testing Framework",
      "content": "## Overview\n\nThe Functional Testing Framework (FTF) enables you to change a web driver {% glossarytooltip 08968dbb-2eeb-45c7-ae95-ffca228a7575 %}library{% endglossarytooltip %} used for communication with Selenium Server, PhantomJS or any other web page automation tool.\n\nWeb drivers provided with the FTF are the following:\n\n- [PHPUnit_Selenium library] (default)\n- [Facebook web driver library]\n\nBoth implement the [`DriverInterface.php`] interface. The interface declares methods that are used in web page automation such as `click()`, `isVisible()`, `setValue()`, `dragAndDrop()` etc.\n\nTo use a custom web driver, you must implement the `DriverInterface.php` interface.\n\nUse provided in the FTF web drivers as examples.\n\n## Set up the Facebook web driver {#ftf-facebook-driver-install}\n\nTo set up the Facebook web driver, use the following steps:\n\n1. In `/dev/tests/functional/etc/di.xml`, add the `` element.\n2. In `/dev/tests/functional/composer.json`, move the `\"facebook/webdriver\": \"dev-master\"` entry from the `\"suggest\"` list to the `\"require\"` list.\n3. Run in your terminal:\n\n        cd /dev/tests/functional\n        composer update\n\n\n  You still need to run the Selenium Server in order to run the tests, because at this point the test run procedure is not yet changed.\n\n\n## Add and setup a custom web driver\n\nTo add a custom web driver, you must implement the [`DriverInterface.php`] interface.\n\n1. Create the `/dev/tests/functional/lib/Magento/Mtf/Client/Driver/` directory.\n2. In the directory, create the `Driver.php` class which implements [`DriverInterface.php`].\n\nTo setup the custom web driver, follow:\n\n1. In `/dev/tests/functional/etc/di.xml`, add the `\\Driver\" />` element.\n2. In `/dev/tests/functional/composer.json`, add corresponding entry to the `\"require\"` list (if related module is available on [Packagist]). And run in your terminal:\n\n        cd /dev/tests/functional\n        composer update\n\n\n  You still need to run the Selenium Server in order to run the tests, because at this point the test run procedure is not yet changed.\n\n\n\n\n[`DriverInterface.php`]: https://github.com/magento/mtf/blob/develop/Magento/Mtf/Client/DriverInterface.php\n[Facebook web driver library]: https://github.com/magento/mtf/blob/develop/Magento/Mtf/Client/Driver/Facebook/Driver.php\n[Packagist]: https://packagist.org/\n[PHPUnit_Selenium library]: https://github.com/magento/mtf/blob/develop/Magento/Mtf/Client/Driver/Selenium/Driver.php\n",
      "url": "/guides/v2.0/mtf/features/webdriver.html"
    }
    ,
  
    "guides-v2-0-comp-mgr-trouble-cman-were-sorry-html": {
      "title": "Sorry, we can't take that action right now",
      "content": "The following error might display at the start of your upgrade:\n\n\n\nSee one of the following sections for possible solutions:\n\n*\t[Problem: you're not authenticated](#not-auth)\n*\t[Problem: the updater application isn't initialized](#updater)\n*\t[Problem: you cloned the Magento GitHub repository](#git-clone)\n\n### Problem: you're not authenticated {#not-auth}\nYou might not have entered your authentication keys in the {% glossarytooltip 18b930cf-09cc-47c9-a5e5-905f86c43f81 %}Magento Admin{% endglossarytooltip %}.\n\n#### Solution\nEnter your authentication keys in the {% glossarytooltip 29ddb393-ca22-4df9-a8d4-0024d75739b1 %}Admin{% endglossarytooltip %}. Try your upgrade again.\n\nIf that doesn't work, try generating new authentication keys and enter those in the Admin. Then try your upgrade again.\n\n### Problem: the updater application isn't initialized {#updater}\nIn some cases (especially if you downloaded the Magento software from packagist), the updater application might not be initialized. (A common way for this to happen is to not specify our `https://repo.magento.com` repository in the `composer create-project` command.)\n\nThe updater application uses a cron job to run the upgrade; if it's not initialized, your update fails.\n\n#### Solution\nModify Magento's `composer.json` to reference the `https://repo.magento.com` repository and run `composer install` in the updater's root directory to resolve dependencies and initialize it as follows:\n\n1.\tLog in to your Magento server as the Magento file system owner.\n2.\tChange to your Magento installation directory.\n3.\tBack up your existing `composer.json`:\n\n\t\tcp composer.json composer.json.bak\n\n4.\tOpen `composer.json` in a text editor.\n5.\tTo the `repositories` section, add the following:\n\n\t\t\t{\n\t\t\t\t\"type\": \"composer\",\n\t\t\t\t\"url\": \"https://repo.magento.com/\"\n\t\t\t}\n\n    Example:\n\n\t\t\"repositories\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"composer\",\n\t\t\t\t\t\"url\": \"https://repo.magento.com/\"\n\t\t\t\t}\n\t\t\t]\n\n6.\tSave your changes to `composer.json` and exit the text editor.\n7.\tChange to the `update` subdirectory, where the updater is located.\n8.\tEnter the following command:\n\n\t\tcomposer install\n9.\tAfter the command completes, try the upgrade again.\n\n### You cloned the Magento GitHub repository {#git-clone}\nIf you installed the Magento software by cloning the Magento repository, you cannot use the System Upgrade utility to upgrade it.\n\nInstead, see one of the options discussed in Contributing developers&mdash;update, reinstall Magento.\n",
      "url": "/guides/v2.0/comp-mgr/trouble/cman/were-sorry.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-accordion-html": {
      "title": "Accordion widget",
      "content": "Overview\n\nMagento accordion widget is an {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} of the Magento Tabs widget.\n\nAccordions are generally used to break content into multiple sections that can be swapped to save space.\n\nThe accordion {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is lib/web/mage/accordion.js.\n\nInitialize the accordion widget\n\nInitialize accordion in JS components\n\nInitialize accordion with data-* attributes specified\nGenerally the accordion widget is instantiated like following:\n\n$(\"#element\").accordion();\n\n\nWhere:\n\n#element is the selector of the element for accordion is initialized.\n#element has children with the following attributes specified: \n\n\ndata-role=\"title\"\n\ndata-role=\"content\"\n\n\n\n\nOptionally, you can specify the following:\n\nIf you want the trigger to be different from the title, add the data-role=\"content\" attribute for the element\n\nTo have the content updated using Ajax, add the data-ajax=\"true\" attribute for the element containing the {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} for request.\n\n\n\nAccordions support arbitrary markup, but the following requirements should be kept:\n\n\nTitles and contents are specified in the same order in DOM: first title, then contents.\n\nThe header, trigger and content are specified, either by adding the data-* attributes for the corresponding children elements or by specifying these elements with selectors as options.\n\n\nMark-up examples:\n\n{%highlight html%}\n\n    \n        \n            Title 1\n        \n    \n    Content 1\n\n    \n        \n            Title 2\n        \n    \n    Content 2\n\n    \n        \n            Title 3\n        \n    \n    Content 3\n\n\n\n\n{%endhighlight%}\n\n\nInitialize accordion with option\nYou can specify the header, content, trigger as options when you initialize the widget.\nFor example:\n\n$(\"#element\").accordion({\n    header : \"#title-1\",\n    content : \"#content-1\",\n    trigger : \"#trigger-1\",\n    ajaxUrlElement: \"a\"\n });\n\n\nInitialize accordion in a template\n\nThe accordion widget can be initialized using the data-mage-init attribute or `` element, as described in JavaScript initialization.\n\n\nOptions\nAccordion options coincide with Magento Tabs options, plus the following custom ones:\n\nactive\nmultipleCollapsible\nopenOnFocus\n\n\nactive\n\nDefines which tab is active when the widget gets instantiated.\n\n**Type**: Array, String\n\n**Default value**: `0`\n\nExample of the accordion initialization with the active option specified:\n\n$(\"#element\").accordion({ active: \"0 1\"});\n$(\"#element\").accordion({ active: [0,1]});\n\n\n\nmultipleCollapsible\nDefines if multiple panels can be expanded at the same time.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nExample of the accordion initialization with the multipleCollapsible option specified:\n\n$(\"#element\").accordion({ multipleCollapsible: false});\n\nGet or set the multipleCollapsible option, after initialization:\n\n//getter\nvar multipleCollapsible = $(\"#element\").accordion(\"option\",\"multipleCollapsible\");\n\n//setter\n$(\"#element\").tabs(\"option\",\"multipleCollapsible\",false);\n\n\nopenOnFocus\n\nFor keyboard navigation defines if the accordion expands when the title gets in focus.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\n\nMethods\nAccordion widget options and keyboard interaction mostly coincide with the Magento tabs widget methods.\n\nThe custom accordion methods are the following:\n\n\nactivate()\ndeactivate()\n\n\nactivate(index)\nActivate a tab with the specified `index`.\n\n**Type**: Number, Array.\n\nIf no `index` is passed, all panels are activated.\n\nCode examples:\n\n$( \"#element\" ).accordion( \"activate\" );\n$( \"#element\" ).accordion( \"activate\", 1 );\n$( \"#element\" ).accordion( \"activate\", [0,1]);\n\n\ndeactivate(index)\nDeactivate a tab with the specified `index`.\n\n\n**Type**: Number, Array.\n\nIf no index is passed, all panels are deactivated.\n\nCode examples:\n\n\n$( \"#element\" ).accordion( \"deactivate\" );\n$( \"#element\" ).accordion( \"deactivate\", 1 );\n$( \"#element\" ).accordion( \"deactivate\", [0,1]);\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_accordion.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-alert-html": {
      "title": "Alert widget",
      "content": "Overview\n\nThe Magento alert widget implements a modal pop-up window with a confirmation button. It extends the Magento modal widget.\n\nThe alert {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is &lt;Magento_Ui_module_dir&gt;/view/base/web/js/modal/alert.js\n\nThe widget can be used for implementing alert windows for both Admin and {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}. The design patterns for the pop-up modal windows in the Admin are described in the Magento Admin Pattern Library, the Slide-out Panels, Modal Windows, and Overlays topic. \n\nInitialize the alert widget\n\nThe alert widget can be initialized with or without binding to a certain element.\n\n**Example1**: initialization on an element\n\n{% highlight js %}\n$('#init_element').alert({\n    title: 'Warning',\n    content: 'Warning content',\n    actions: {\n        always: function(){}\n    }\n});\n{% endhighlight %}\n\n**Example2**: standalone initialization\n\n{% highlight js %}\nrequire([\n    'Magento_Ui/js/modal/alert'\n], function(alert) { // Variable that represents the `alert` function\n \n    alert({\n        title: 'Some title',\n        content: 'Some content',\n        actions: {\n            always: function(){}\n        }\n    });\n \n});\n{% endhighlight %}\n\nFor details about how to initialize a widget in a`.phtml` template, refer to the Javascript initialization topic.\n\nOptions\nThe alert widget has the following options:\n\n\nactions\nautoOpen\nclickableOverlay\ncontent\nfocus\ntitle\n\n\nactions\n\nWidget callbacks.\n\n**Type**: Object.\n\n**Default value**: \n{% highlight js %}\nactions: {\n    always: function(){}\n}\n{% endhighlight %}\n\nautoOpen\nAutomatically open the alert window when the widget is initialized.\n\n**Type**: Boolean \n\n**Default value**: `false`\n\nclickableOverlay\nClose the alert window when a user clicks on the overlay.\n\n**Type**: Boolean \n\n**Default value**: `true`\n\ncontent\n\nThe text displayed in the alert window.\n\n\n**Type**: String.\n\nfocus\nThe selector of the element to be in focus when the alert window opens.\nIf `focus` is not specified or set to empty string, the focus is on the close button. If focusing is not requried, set `focus` to `none`.\n\n**Type**: String.\n\n**Default value**: `''`\n\ntitle\nThe title of the alert window.\n\n\n**Type**: String.\n\n**Default value**: `''`\n\nEvents\n\nThe alert widget implements a single event: the `always` callback.\n\nKeyboard navigation\nThe keyboard navigation for the alert windows is similar to the navigation of the modal widget.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_alert.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-calendar-html": {
      "title": "Calendar widget",
      "content": "Overview\n\nThe Calendar widget is a customized {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} Datepicker Widget that enables selecting a data using a pop-up or an in-line calendar. Calendar is also responsible for:\n\n*\tMerging the global configuration with the options that are passed from {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} when Calendar is initialized.\n*\tTaking into account server time zone offset.\n*\tConverting date and time formats to avoid inconsistency in Zend Date format and Datepicker format.\n*\tMaking the calendar initialization easier.\n*\tThe Calendar {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is lib/web/mage/calendar.js.\n\nInitialize the calendar widget\n\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\nConfigure the calendar widget\n\nThe calendar widget's *global configuration* is a set of default options that are applied when each calendar instance is initialized. It includes the following:\n\n*\tTranslations for days, months, and control buttons\n*\tDate and time format\n*\tAnimation settings\n*\tCalendar pop-up mode\n*\tServer time zone offset\n\nGlobal configuration for calendar is stored in a jQuery object as a hash of properties. Having global configuration set enables specifying all translations and default options at once, and use it for all instances of calendar, and it enables usage of inline translation for the calendar. During initialization, the calendar widget merges the hash of options from the global configuration, and the options which are transferred from PHP, and then passes the merged options to datepicker. \n\nExample of setting global widget configuration follows:\nrequire([\n  'jquery',\n  'mage/calendar'\n], function ( $ ) {\n  $.extend(true, $, {\n    calendarConfig: { ... }\n  });\n});\n\n\n\nOptions, methods, and events\n\nMost options, methods, and events for the calendar widget correspond to the jQuery Datepicker Widget options.\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_calendar.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-collapsible-html": {
      "title": "Collapsible widget",
      "content": "Overview\n\nThe Magento collapsible {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} converts a header/content pair into an accordion, where the content is collapsed or expanded on the header click.\n\nUnlike the accordion widget is that collapsible is initialized for one title/content pair, while accordion can be initialized for a set of title/contents pairs.\n\nTo \"bind\" several instances of collapsible widget, the collateral option is used.\n\nOnce it is expanded, the content can be updated using Ajax. The collapsed/expanded state can be saved into local storage or cookies, if the browser does not support local storage. \n\nThe collapsible widget source is lib/web/mage/collapsible.js.\n\n\nInitialize collapsible in JS\nGenerally the collapsible widget is instantiated like following:\n\n$(\"#element\").collapsible();\n\n\nWhere #element is the element's selector.\n\nIf you need to be able to save the expanded/collapsed state, the element must have the `id` attribute specified. \n\nThe element's `id` is also used in deep linking: if the `id` of the content or the `id` of the element that appends the content is specified as an anchor, the content for that element is automatically expanded.\n\n\nSimilar to the accordion widget, the header, title and content for collapsible can be defined by the child elements' attributes or passed as widget options. See Accordion widget initialization for details.\n\nInitialize collapsible with header only\nYou can initialize the collapsible widget without having a container that consists of a header and a content. In this case the initialization is made on the header:\n\n$(\"#header\").collapsible();\n\n\n\nInitialize collapsible in a template\nThe collapsible widget can be initialized using the data-mage-init attribute or `` tag, as described in JavaScript initialization.\n\nOptions\n\nThe collapsible widget has the following options:\n\n\nactive \najaxUrlElement\najaxContent\nanimate\ncollapsible\ncollateral\ncontent\nclosedState\ndisabled\ndisabledState\nheader\nicons\nloadingClass\nopenedState\nsaveState\ntrigger\n\n\n\nactive\nSpecifies if the content should be expanded when the widget gets initialized.\n\n**Type**: Boolean\n\n**Default value**: false\n\nInitialize the collapsible with the active option specified:\n\n$(\"#element\").collapsible({ active: true});\n\n\nGet or set the active option, after initialization:\n\n\n//getter\nvar active = $(\"#element).collapsible(\"option\",\"active\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"active\",false);\n\n\n\najaxUrlElement\nSelector applied on the header using `.find()`, for the element that contains the {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} for Ajax request. \n\n**Type**: String\n\n**Default value**: `[data-ajax=true]`\n\najaxContent\nSpecifies if the content is updated using Ajax request.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nanimate\nSpecifies if the collapse/expand actions are performed with animation.\n\n**Type**: \nMultiple types are supported:\n\nBoolean: the `false` value disables the animation  \nNumber: duration in milliseconds \nString: is parsed to an object as a json string \nObject: \n\n{\nduration: &lt;Number&gt;,\neasing: &lt;String&gt;,\n&lt;propToAnimate&gt;: &lt;howToAnimate&gt;\n}\n\nFor details about the object passed, see jQuery.animate().\n\n\n\n**Default value**: `false`\n\nInitialize the collapsible with the animate option specified:\n\n\n$(\"#element\").collapsible({ animate: 1000});\n$(\"#element\").collapsible({ animate: {duration:1000,easing:\"easeOutCubic\"});\n\n\nGet or set the animate option, after initialization:\n\n\n//getter\nvar animate = $(\"#element).collapsible(\"option\",\"animate\");\n\n//setter \n$(\"#element\").collapsible(\"option\",\"animate\",false);\n\n\ncollapsible\n\nIf this option is set to false, the content is not collapsed when the panel is active.\n\n**Type**: Boolean\n\n**Default value**: true\n\nInitialize the collapsible widget with the `collapsible` option specified:\n\n$(\"#element\").collapsible({ collapsible: true});\n\n\nGet or set the `collapsible` option after initialization:\n\n\n//getter\nvar collapsible = $(\"#element).collapsible(\"option\",\"collapsible\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"collapsible\",false);\n\n\ncollateral\n\nSpecifies the element, and the class which is assigned to this element, when the current element is opened; and is removed when the current element is closed.\n\nAn object that contains the following:\n\n- `element`: an element, can be a selector or {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jquery{% endglossarytooltip %} object. \n- `openedState`: the class name which is assigned to the element when the current element is in opened; removed when the current element is closed.\n\n**Type**: String\n\n**Default value**: {\n                element: null,\n                openedState: null\n            }\n\n\ncontent\nSelector for the content element, searched for using `.find()` on the main collapsible element. \n\n**Type**: \n\nString\njQuery Object\n\n\n**Default value**: `[data-role=content]`\n\n\nInitialize the collapsible with the content option specified:\n\n\n$(\"#element\").collapsible({ content: \".content\"});\n\nGet or set the content option, after initialization:\n\n\n//getter\nvar content = $(\"#element).collapsible(\"option\",\"content\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"content\",\".content\");\n\n\nclosedState\nSpecifies the class that is assigned to the main collapsible element, when the content gets collapsed.\n\n**Type**: String\n\n**Default value**: `null`\n\nInitialize the collapsible widget with the `closedState` option specified:\n\n$(\"#element\").collapsible({ closedState: \"collapsible-content\"});\n\n\nGet or set the `contentClass` option after initialization:\n\n\n//getter\nvar contentClass = $(\"#element).collapsible(\"option\",\"contentClass\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"contentClass\",\"collapsible-content\");\n\n\ndisabled\nSpecifies if the content should be disabled, when the widget gets initialized.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nInitialize the collapsible widget with the `disabled` option specified:\n\n$(\"#element\").collapsible({ disabled: true});\n\nGet or set the `disabled` option after initialization:\n\n\n//getter\nvar disabled = $(\"#element).collapsible(\"option\",\"disabled\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"disabled\",false);\n\n\ndisabledState\nSpecifies the class that is assigned to the main collapsible element when a panel gets disabled.\n\n**Type**: String\n\n**Default value**: `null`\n\nInitialize the collapsible with the `disabledState` option specified:\n\n$(\"#element\").collapsible({ disabledState: \"disabled\"});\n\n\nGet or set the disabledState option after initialization:\n\n\n//getter\nvar disabledState = $(\"#element).collapsible(\"option\",\"disabledState\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"disabledState\",\"disabled\");\n\n\n\nheader\nSelector for the header element, searched for using .find() on the main collapsible element. If the element with the specified selector is not found on the main collapsible element, the main element becomes a header.\n\n\n**Type**: \n\nString\njQuery Object\n\n\n**Default value**: `[data-role=title]`\n\nInitialize the collapsible with the content option specified:\n\n\n$(\"#element\").collapsible({ header: \".header\"});\n\n\nGet or set the header option, after initialization:\n\n\n//getter\nvar header = $(\"#element).collapsible(\"option\",\"header\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"header\",\".header\");\n\n\nicons\nThe classes for icons to be used in headers. If no classes are specified, icons are not be created. A new span is created and appended to the header, the classes for this span are automatically changed whenever the content gets expanded/collapsed.\n\n**Type**: String\n\n**Default value**: { activeHeader: null, header: null }\n\n\nInitialize the collapsible with the `icons` option specified:\n\n$(\"#element\").collapsible({ icons: {\"header\": \"plus\", \"activeHeader\": \"minus\"}});\n\n\nGet or set the icons option, after initialization:\n\n\n//getter\nvar icons = $(\"#element).collapsible(\"option\",\"icons\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"icons\",{\"header\": \"plus\", \"activeHeader\": \"minus\" });\n\n\nloadingClass\nSpecifies the class that is assigned to the main collapsible element when requesting data using Ajax.\n\n\n**Type**: String\n\n**Default value**: `null`\n\nInitialize the collapsible with the `loadingClass` option specified:\n\n$(\"#element\").collapsible({ loadingClass: \"loading\"});\n\nGet or set the `loadingClass` option after initialization:\n\n\n//getter\nvar loadingClass = $(\"#element).collapsible(\"option\",\"loadingClass\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"loadingClass\",\"loading\");\n\n\nInitialize the collapsible with the `loadingClass` option specified:\n\n$(\"#element\").collapsible({ loadingClass: \".ajax\"});\n\n\nGet or set the loadingClass option, after initialization:\n\n\n//getter\nvar content = $(\"#element).collapsible(\"option\",\"loadingClass\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"loadingClass\",\"ajax\");\n\n\n\nInitialize the collapsible with the `ajaxContent` option specified:\n\n$(\"#element\").collapsible({ ajaxContent: true});\n\n\nGet or set the ajaxContent option after initialization:\n\n\n//getter\nvar active = $(\"#element).collapsible(\"option\",\"ajaxContent\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"ajaxContent\",true);\n\n\nopenedState\nSpecifies the class that is assigned to the main collapsible element when the content gets expanded.\n\n**Type**: String\n\n**Default value**: `null`\n\nInitialize the collapsible with the `openedState` option specified:\n\n$(\"#element\").collapsible({ openedState: \"opened\"});\n\n\nGet or set the `openedState` option after initialization:\n\n\n//getter\nvar openedState = $(\"#element).collapsible(\"option\",\"openedState\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"openedState\",\"opened\");\n\n\nsaveState\nSpecifies if the state is saved in the local storage if the browser supports it. Otherwise is saved into a cookie.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\nInitialize the collapsible widget with the `saveState` option specified:\n\n$(\"#element\").collapsible({ saveState: true});\n\n\nGet or set the `saveState` option after initialization:\n\n\n//getter\nvar active = $(\"#element).collapsible(\"option\",\"saveState\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"saveState\",true);\n\n\ntrigger\nSelector for the trigger element, applied using `.find()` on the main collapsible element. If the trigger is not found, the header becomes a trigger.\n\n**Type**: \n\nString\njQuery Object\n\n\n**Default value**: `[data-role=trigger]`\n\nInitialize the collapsible with the trigger option specified:\n\n$(\"#element\").collapsible({ trigger: \".trigger\"});\n\n\nGet or set the trigger option after initialization:\n\n\n//getter\nvar trigger = $(\"#element).collapsible(\"option\",\"trigger\");\n\n//setter\n$(\"#element\").collapsible(\"option\",\"trigger\",\".trigger\");\n\n\n\n\nMethods\n\n\nactivate()\ndeactivate()\ndisable() \nenable()\nforceActivate()\nforceDeactivate()\n\n\n\nactivate()\nExpand the content when this method is called.\n\nThis method does not accept any arguments.\n\nInvoke the activate method:\n\n$(\"#element\" ).collapsible(\"activate\");\n\n\ndeactivate()\n\nCollapse the content when this method is called.\n\nThis method does not accept any arguments.\n\nInvoke the deactivate method:\n\n$( \"#element\" ).collapsible(\"deactivate\");\n\n\ndisable()\n\nDisable the panel.\nThis method does not accept any arguments.\n\nInvoke the disable method:\n\n$( \"#element\" ).collapsible(\"disable\");\n\n\nenable()\nEnable the panel.\n\nThis method does not accept any arguments.\n\nInvoke the enable method:\n\n$( \"#element\" ).collapsible(\"enable\");\n\n\nforceActivate()\nExpand the content without animation when this method is called.\n\nThis method does not accept any arguments.\n\nInvoke the `forceActivate` method:\n\n$(\"#element\").collapsible(\"forceActivate\");\n\n\nforceDeactivate()\nCollapse the content without animation when this method is called.\n\nThis method does not accept any arguments.\n\nInvoke the forceDeactivate method:\n\n$( \"#element\" ).collapsible(\"forceDeactivate\");\n\n\n\nEvents\n\nbeforeOpen callback\nCalled before the content is opened. \n\ndimensionsChanged\nCalled after content is opened or closed.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_collapsible.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-confirm-html": {
      "title": "Confirmation widget",
      "content": "Overview\n\nThe Magento confirmation widget implements a modal pop-up window with the cancel and confirmation button.It is an {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} of the Magento modal widget.\n\nThe confirmation {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is &lt;Magento_Ui_module_dir&gt;/view/base/web/js/modal/confirm.js\n\nThe widget can be used for implementing confirmation windows for both, Admin and {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}. The design patterns for the modal pop-up windows in the Admin are described in the Magento Admin Pattern Library, the Slide-out Panels, Modal Windows, and Overlays topic.\n\nInitialize the confirmation widget\n\nThe confirmation widget can be initialized with or without binding to a certain element.\n\n**Example1**: initialization on an element\n\n{% highlight js %}\n$('#confirm_init').confirm({\n    title: 'Confirmation title',\n    actions: {\n        confirm: function(){}, //callback on 'Ok' button click\n        cancel: function(){}, //callback on 'Cancel' button click\n        always: function(){}\n    }\n});\n{% endhighlight %}\n\n**Example2**: standalone initialization\n{% highlight js %}\n\nrequire([\n    'Magento_Ui/js/modal/confirm'\n], function(confirmation) { // Variable that represents the `confirm` widget\n\n    confirmation({\n        title: 'Some title',\n        content: 'Some content',\n        actions: {\n            confirm: function(){},\n            cancel: function(){},\n            always: function(){}\n        }\n    });\n\n});\n{% endhighlight %}\n\n\nFor details about how to initialize a widget in a`.phtml` template, refer to the Javascript initialization topic.\n\nOptions\n\n\nactions\nautoOpen\nclickableOverlay\ncontent\nfocus\ntitle\n\n\nactions\nWidget callbacks.\n\n**Type**: Object\n\n**Default value**:\n{% highlight js %}\nactions: {\n    confirm: function(){},\n    cancel: function(){},\n    always: function(){}\n}\n{% endhighlight %}\n\nautoOpen\nAutomatically open the confirmation window when the widget is initialized.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nclickableOverlay\nClose the confirmation window when a user clicks on the overlay.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\n\ncontent\n\nThe confirmation window content.\n\n**Type**: String.\n\nfocus\nThe selector of the element to be in focus when the confirmation window opens.\nIf `focus` is not specified or set to empty string, the focus is on close button. If focusing is not requried, set `focus` to `none`.\n\n**Type**: String.\n\n**Default value**: `''`\n\ntitle\nThe title of the confirmation window.\n\n\n**Type**: String.\n\n**Default value**: `''`\n\n\nEvents\n\nThe confirmation widget implements the following events:\n\n- `confirm` callback: called when the confirmation button is clicked.\n- `cancel` callback: called when the cancel button is clicked.\n- `always` callback.\n\nKeyboard navigation\nThe keyboard navigation for the alert windows is similar to the navigation of the modal widget\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_confirm.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-dialog-html": {
      "title": "DropdownDialog widget",
      "content": "Overview\nMagento dropdownDialog {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} is a customization of the standard jQuery UI Dialog. As extra functionality it implements the following:\n\ntriggering {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} for opening\ndelaying to automatically close the drop-down on mouse out\nclicking outside the area closes the drop-down\n\n\nThe dropdownDialog widget source is located in lib/web/mage/dropdown.js.\n\nInitialize the dropdownDialog widget\n\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\nOptions\n \nMagento customized Dialog widget has default jQuery UI Dialog widget options, plus several custom options:\n\nautoPosition\nautoSize\ncloseOnClickOutside\ncloseOnMouseLeave\ncreateTitleBar\ndefaultDialogClass\ndialogContentClass\nparentClass\ntriggerClass\ntriggerEvent\ntriggerTarget\n\n\nDescription of each option as follows below location.\n\nautoPosition\nSpecifies if the position option is used for calculating the drop-down offset. \n\nIf set to `false` (default value), then `position` rules are not used and the drop-down is positioned under the element for which the widget is initialized. Otherwise the drop-down offset is calculated using the `position` rules.  \n\n**Type**: Boolean\n\n**Default value**: `false`\n\n\nautoSize\n\nSpecifies if the size of the drop-down is defined by widget options (height, width, minHeight, minWidth).\n\n**Type**: Boolean\n\n**Default value**: `false`\n\n\ncloseOnMouseLeave\nSpecifies if the drop-down is closed when mouse pointer is moved out.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\ncloseOnClickOutside\nSpecifies if the drop-down is closed on mouse click outside the drop-down.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\ncreateTitleBar\nDefines if the title option is used for displaying the title bar.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\ndefaultDialogClass\nClass that is added to the drop-down, when it gets initialized.\n\n\n**Type**: String\n\n**Default value**: `mage-dropdown-dialog`\n\ndialogContentClass\nClass that is added/removed on drop-down content when it gets opened/closed.\n\n**Type**: String\n\n**Default value**: `null`\n\nparentClass\nClass that is added/removed for the dropdown parent, when the drop-down gets opened/closed.\n\n**Type**: String\n\n**Default value**: `null`\n\ntriggerClass\nClass that is added/removed on the trigger element when the drop-down gets opened/closed.\n\n**Type**: String\n\n**Default value**: `null`\n\ntriggerEvent\nName of the event that triggers the `open()` function for drop-down.\n\n**Type**: String\n\n**Default value**: `click`\n\n\ntriggerTarget\nElement that triggers the drop-down.\n\n**Type**: \n\n- String\n- {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} object\n\n**Default value**: `null`\n\n\ntimeout\nThe number of milliseconds until the dropdown is closed after mouse pointer moves out.\n\n**Type**: Number\n\n**Default value**: 500\n\n\nMethods\nMagento customized dropdownDialog widget has default jQuery UI Dialog widget methods, though some of them are customized. \n\n\nCustomized public methods:\n\nopen()\nclose()\n\n\nopen()\nBeside default functionality, this method calls the `_mouseLeave()` and `_mouseEnter()` functions, adds classes on trigger and drop-down parent, and binds the close on mouse click outside drop-down to the `` element.\n\nclose()\nBeside default functionality, this method removes the classes from trigger and drop-down parent.Also clears the timeout if the latter exists.\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_dialog.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-gallery-html": {
      "title": "Gallery widget",
      "content": "Overview\n\nThe gallery {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} implements a content area with images organized into preview and thumbnails blocks.\n\nThe following picture is an illustration of image displaying on the product page using the gallery widget:\n\n\n\nIn addition, the [magnifier widget]({{page.baseurl}}javascript-dev-guide/widgets/widget_gallery_mg.html) can be used to demonstrate images in 100% scaled size in separate dedicated layer, and the gallery fullscreen mode can be used to navigate the entire full sized photo.\n\nGallery is displayed consistently across all supported browsers and is responsive &mdash; it sizes correctly on mobile devices and desktops.\n\nThe gallery widget uses the Fotorama widget.\n\nThe important feature of the gallery widget implementation is the possibility to configure the widget options in the `view.xml` configuration file of a {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %}.\n\nThe gallery widget source code is lib/web/mage/gallery/gallery.js\n\nThe gallery magnifier source is  lib/web/magnifier/magnify.js.\n\n\n\nContents\n\n\n## Initialize the gallery widget {#gallery_init}\n\nThe gallery widget is initialized as described in [JavaScript initialization]({{page.baseurl}}javascript-dev-guide/javascript/js_init.html#init_phtml).\n\nExample of declarative initialization:\n\n `/view/frontend/templates/product/view/gallery.phtml`\n\n{%highlight js%}\n\n\n{%endhighlight%}\n\n\n## Options {#gallery_options}\n\nThe following option groups are available for the gallery widget:\n\n* [`data`](#data)\n* [`options`](#options)\n* [`fullscreen`](#fullscreen)\n* [`breakpoints`](#breakpoints)\n\nAll options for each group are described further.\n\n### `data` {#data}\n\nArray of images to display.\n\nWhere `image` is an object with keys:\n\n{%highlight js%}\n{\n    \"thumb\": \"\",\n    \"img\": \"\",\n    \"full\": \"\",\n    \"caption\": \"\",\n    \"isMain\": \"\"\n}\n{%endhighlight%}\n\nThe `thumb`, `img`, and `full` are full paths to proper image files.\n\n#### `data/caption` {#data_caption}\n\nSet the caption for a specific image in the `data` field.\nExample of the runtime initialization with the `caption` option specified:\n\n{%highlight js%}\ngalleryInstance({\n    data: [\n        {\n            img: 'preview_number_one.jpg',\n            thumb: 'preview_number_one.jpg',\n            caption: 'T-Shirt Women side'\n        }\n    ]\n});\n{%endhighlight%}\n\n### `options` {#options}\nSet of options available for the Preview region.\n\n#### `options/allowfullscreen` {#gallery_allowfullscreen}\nShow the button that toggles full screen view of the gallery.\n\n**Type**: Boolean\n\n#### `options/arrows` {#gallery_arrows}\n\nDisplay navigation arrows on the thumbnails sides.\n\n**Type**: Boolean\n\n#### `options/height` {#gallery_height}\n\nHeight of the preview block in pixels or percent.\n\n**Type**: Number, String\n\n**Default value**: null\n\n#### `options/keyboard` {#gallery_keyboard}\n\nSwitch on/off the keyboard navigation.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\n#### `options/loop` {#gallery_loop}\n\nDefine whether images are displayed in a loop.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\n\n#### `options/maxheight` {#gallery_maxheight}\n\nMaximum height of the preview block in pixels or percent.\n\n**Type**: Number, String\n\n**Default value**: `null`\n\n#### `options/maxwidth` {#gallery_maxwidth}\n\nMaximum width of the preview block in pixels or percent.\n\n**Type**: Number, String\n\n**Default value**: 100%\n\n#### `options/minheight` {#gallery_minheight}\n\nMinimal height of the preview block in pixels or percent.\n\n**Type**: Number, String\n\n**Default value**: `null`\n\n#### `options/minwidth` {#gallery_minwidth}\n\nMinimal width of the preview block in pixels or percent.\n\n**Type**: Number, String\n\n**Default value**: `null`\n\n#### `options/nav` {#gallery_nav}\n\nVariation of thumbnails in navigation.\n\n**Possible values**:\n\n- `dots`: iPhone-style dots\n- `thumbs`: thumbnails\n- `false`: nothing\n\n**Default**: `dots`\n\n#### `options/navdir` {#gallery_navdir}\n\nSliding direction of thumbnails.\n\n**Possible values**:\n\n- `vertical`\n- `horizontal`\n\n#### `options/navarrows` {#gallery_navarrows}\n\nDisplay navigation arrows for thumbnails.\n\n\n**Type**: Boolean\n\n#### `options/navtype` {#gallery_navtype}\n\nSliding type of thumbnails.\n\n**Possible values**:\n\n- `slides`: on the arrow button click the thumbs ribbon shifts over several thumbs\n- `thumb`: on the arrow button click the thumbs ribbon shifts over one thumb\n\n#### `options/ratio` {#gallery_ratio}\n\nWidth divided by height. Recommended if you set width in percents.\n\n**Type**: Number, String\n\n**Default value**: calculated from `width` and `height`.\n\n#### `options/showCaption` {#gallery_showcaption}\n\nEnable view of caption in preview. Can be for initialized for specific image. Can work globally.\n\n**Type**: Boolean\n\n#### `options/startindex` {#gallery_startindex}\n\nThe index number of the image that is displayed once the gallery is initialized.\n\n**Type**: Number\n\n**Default value**: `0`\n\n#### `options/swipe` {#gallery_swipe}\n\nMoving between preview images by swiping in left and right.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\n#### `options/thumbwidth` {#gallery_thumbwidth}\n\nWidth of thumbnails.\n\n**Type**: Number, String\n\n#### `options/thumbheight` {#gallery_thumbwidth}\n\nHeight of thumbnails.\n\n**Type**: Number, String\n\n\n#### `options/transition` {#gallery_transitioneffect}\n\nSets the transition effect for slides changing.\n\n**Possible values**:\n\n* `slide`\n* `crossfade`\n* `dissolve`\n\n#### `options/transitionduration` {#gallery_transitionduration}\nSets transition duration in milliseconds.\n\n**Type**: Number\n\n**Type**: Boolean\n\n#### `options/width` {#gallery_width}\n\nWidth of the preview in gallery in pixels or percents.\n\n**Type**: Number, String\n\n**Default value**: `null`\n\n### `fullscreen` {#fullscreen}\n\nSet of options available for the fullscreen view.\n\n#### `fullscreen/arrows` {#full_arrows}\n\nDisplay navigation arrows on the sides of previews in the fullscreen view.\n\n**Type**: Boolean\n\n#### `fullscreen/caption` {#full_caption}\nDisplay {% glossarytooltip 9122e7d4-7db9-48b2-ad27-1af26bad1215 %}alt text{% endglossarytooltip %} as image title in the fullscreen view.\n\n**Type**: Boolean\n\n#### `fullscreen/keyboard` {#fullscreen_keyboard}\n\nSwitch on/off the keyboard navigation in the fullscreen mode.\n\n**Type**: Boolean\n\n\n#### `fullscreen/loop` {#full_loop}\n\nDefine whether images are displayed in a loop.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\n#### `fullscreen/nav` {#full_nav}\n\nVariation of thumbnails in navigation in the fullscreen view.\n\n**Possible values**:\n\n- `dots`: iPhone-style dots\n- `thumbs`: thumbnails\n- `false`: nothing\n\n#### `fullscreen/navdir` {#full_navdir}\n\nSliding direction of thumbnails in the fullscreen view.\n\n**Possible values**:\n\n- `vertical`\n- `horizontal`\n\n#### `fullscreen/navigation_carousel` {#full_carousel}\n\nDisplay navigation thumbnails as carousel in the fullscreen view.\n\n**Type**: Boolean\n\n#### `fullscreen/showCaption` {#full_showcaption}\n\nEnable view of caption in the fullscreen mode. Can be for initialized for specific image. Can work globally.\n\n\n**Type**: Boolean\n\n#### `fullscreen/thumbwidth` {#full_thumbwidth}\n\nWidth of thumbnails in the fullscreen view.\n\n**Type**: Number, String\n\n#### `fullscreen/thumbheight` {#full_thumbheight}\n\nHeight of thumbnails in the fullscreen view.\n\n**Type**: Number, String\n\n#### `fullscreen/transition` {#fullscreen_transitioneffect}\n\nSets the transition effect for slides changing in the fullscreen view.\n\n**Possible values**:\n\n* `slide`\n* `crossfade`\n* `dissolve`\n\n#### `fullscreen/transitionduration` {#fullscreen_transitionduration}\nSets transition duration in milliseconds in the fullscreen view.\n\n**Type**: Number\n\n\n### `breakpoints` {#breakpoints}\nSet of options that could be dynamically set while page is resizing.\n\nSet as follows:\n\n{%highlight js%}\n\"breakpoints\": {\n    \"%breakpoint_name%\": {\n        \"conditions\": {\n            ...\n        }\n        \"options\": {...}\n    }\n}\n{%endhighlight%}\n\nWhere the options are as follows:\n\n - `conditions`: compiled in [media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) through and operand. For example: `\"max-width\": \"767px\"`\n - `options` - object of options that are applied\n\n## Configure gallery options in `view.xml`\n\nGallery and magnifier options can be set in the `view.xml` configuration file of a theme. The file is conventionally located in `/etc`.\n\nThe general gallery options are set as follows:\n\n{%highlight xml%}\n\n\n    %option1_value%\n    %option2_value%\n...\n\n\n{%endhighlight%}\n\nThe fullscreen and breakpoints options are set in a similar way:\n\n{%highlight xml%}\n\n\n    %option1_value%\n    %option2_value%\n...\n\n\n    %option1_value%\n    %option2_value%\n...\n\n\n{%endhighlight%}\n\nFor illustration of setting gallery option in `view.xml`, you can reference to the [view.xml of the Blank theme]({{site.mage2000url}}app/design/frontend/Magento/blank/etc/view.xml#L184).\n\n\n## Gallery API {#gallery_api}\n\nGallery methods are placed in data storage of the `gallery` object. To initialize the API, on the gallery object, call the `data` method with `gallery` as argument. The illustration follows:\n\n{% highlight php%}\nvar api = $(element).data('gallery');\n\n//or\n\nvar api = $('[data-gallery-role=\"gallery\"]').data('gallery');\n\n{% endhighlight %}\n\nThis method returns JS object that contains {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %} functions.\n\n\nTo ensure that the gallery is fully formed, wrap your code with {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} handler function and add it to the `gallery:loaded` event:\n\n{% highlight php %}\n\n    $(element).on('gallery:loaded', function () {\n        var api = $(element).data('gallery');\n        /* api methods calls */\n    });\n\n{% endhighlight php%}\n\nThen to call a method, use the following notation:\n\n{% highlight php %}\n    api.%method_name%();\n{% endhighlight php%}\n\nAll available methods are listed in the following paragraph.\n\n### Methods {#gallery_methods}\n\n* [first](#gallery_first)\n* [last](#gallery_last)\n* [next](#gallery_next)\n* [prev](#gallery_prev)\n* [seek](#gallery_seek)\n* [updateData](#gallery_updateData)\n* [updateOptions](#gallery_updateData)\n\n#### `first()` {#gallery_first}\n\nDisplays the first preview image.\n\n#### `last()` {#gallery_last}\n\nDisplays the last preview image.\n\n#### `next()` {#gallery_next}\n\nImage ID is passed as an argument. Displays the next preview image.\n\nIf the last image ID is passed, the behavior depends on whether [loop](#gallery_loop) is enabled:\n\n* if loop is enabled, the first image is displayed.\n* if loop is disabled, does not change the displayed image.\n\n#### `prev()` {#gallery_prev}\n\nDisplays the previous preview image.\n\nIf the first image ID is passed, the behavior depends on whether [loop](#gallery_loop) is enabled:\n\n* if loop is enbled, the last image is displayed.\n* if loop is disabled, does not change the displayed image.\n\n#### `seek()` {#gallery_seek}\n\nDisplays the image with the specified `index`.\n\nDoesn't update preview if the argument is not valid.\n\nBehavior:\n\n* `seek(0)` does not display any preview\n* `seek(1)` displays the first image.\n* `seek(-1)` displays the last image.\n* If the argument is a number bigger than the number of items, or less than \"-(number of items)\" the gallery shows the modulus of the following division: total images number divided by the argument number.  \n\n\n#### `updateData()` {#gallery_updateData}\n\nAdd new items to the gallery.\n\nExample:\n\n{% highlight php %}\napi.updateData([{\n    img: 'image1.jpg',\n    thumb: 'thumb1.jpg',\n    caption: 'caption'\n}]);\n{% endhighlight php %}\n\n#### `updateOptions()` {#gallery_updateOptions}\nUpdates options of active breakpoint or default gallery options, if there is no active breakpoint.\n\nExample:\n\n{% highlight php%}\n\napi.updateOptions([{\n    nav: 'dots'\n}]);\n\n{% endhighlight %}\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_gallery.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-gallery-mg-html": {
      "title": "Magnifier widget",
      "content": "Overview\n\nMagnifier is a {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} that allows displaying images in 100% scaled size in separate dedicated layer.\nIn Magento it is used by the [gallery]({{page.baseurl}}javascript-dev-guide/widgets/widget_gallery.html) widget for zooming the product images on product pages.\n\n## Initialize magnifier {#magnifier_init}\n\nThe magnifier widget is initialized as described in [JavaScript initialization]({{page.baseurl}}javascript-dev-guide/javascript/js_init.html#init_phtml).\n\nWhen initializing the gallery Widget on an {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} element, magnifier initialization is also available. Following is the example of gallery initialization with magnifier:\n\n{%highlight js%}\n\n{% endhighlight %}\n\n## Options {#magnifier_options}\n\n### `enabled` {#opt_enabled}\n\nEnable magnifier.\n\n**Type**: Boolean\n\n### `height` {#opt_height}\n\nHeight of the magnifier block in pixels. \n            \n### `hover` {#opt_hover}\n\nAction that activates zoom.\n\nPossible values: \n\n* `hover`\n* `click`\n\n### `fullscreenzoom` {#opt_fullscreenzoom}\n\nZoom step in percents for the fullscreen view.\n\nType: Integer\n\n### `left` {#opt_left}\n\nThe value for the {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} `left` property for the magnifier block positioning.\n\n**Type**: Integer\n\n### `top` {#opt_top}\n\nThe value for the CSS `top` property for the magnifier block positioning.\n\n**Type**: Integer\n            \n\n### `width` {#opt_width}\n\nWidth of the magnifier block in pixels.\n\n**Type**: Integer\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_gallery_mg.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-list-html": {
      "title": "List widget",
      "content": "Overview\n\nProvides a way to move items, typically a list, from one content section to another.\nThe content can be moved using buttons and links. \n\nThe list {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source file is lib/web/mage/list.js.\n\nInitialize the list widget\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\nOptions\nThe list widget has the following options:\n\naddButton\ndestinationSelector\nitemCount\nitemIndex\nmaxItems\nmaxItemsAlert\nremoveButton\ntemplate\ntemplateClass\ntemplateWrapper\n\n\nDetailed description of each option follows.\n\naddButton\nSelector for the element used for item adding. \n\n**Type**: String\n\n**Default value**: `[data-button=remove]`\n\ndestinationSelector\nContent destination selector.\n\n**Type**: String\n\n**Default value**: `[data-role=container]`\n\nitemCount\nNumber of total items.\n\n**Type**: Integer \n\n**Default value**: `0`\n\nitemIndex\nNumber of the current item.\n\n**Type**: Integer\n\n**Default value**: `0`\n\nmaxItems\nNumber of list items that can be added to the destination.\n\n**Type**: Integer\n\n**Default value**: `null`\n\nmaxItemsAlert\nAlert message displayed when maximum limit is reached.\n\n**Type**: String\n\n**Default value**: `[data-button=remove]`\n\nremoveButton\nSelector for the element used for item removing. \n\n**Type**: String\n\n**Default value**: `[data-button=remove]`\n\ntemplate\nTemplate for the added item.\n\n**Type**: String\n\n**Default value**: `[data-role=item]`\n\ntemplateClass\nClass attached to the template wrapper.\n\n**Type**: String\n\n**Default value**: `[data-role=container]`\n\ntemplateWrapper\nElement holding the template.\n\n**Type**: String\n\n**Default value**: `null`\n\n\nMethods\n\nThe list widget has the following methods:\n\naddItem\ncheckLimit()\nhandleAdd\nremoveItem()\n\n\naddItem()\nAdds item to the list in the specified order (defined by the index parameter).\n\nhandleAdd()\nAdds item to the list.\n\ncheckLimit()\nIf the `maxItems` option is set, hides or displays the **Add** button.\n\n\nremoveItem()\nRemoves an item from the list.\n\n\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_list.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-loader-html": {
      "title": "Loader widget",
      "content": "Overview\nThe Loader {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} blocks page content (all content or a part of it). Its intended use is blocking content when an Ajax request is being sent. But it can be initialized for non-Ajax tasks as well. \n\nThe Loader widget source is lib/web/mage/loader.js.\n\nInitialize the loader widget\nThe loader widget is initialized as described in JavaScript initialization.\n\nOptions\nThe loader widget has the following options:\n\nicon\ntemplate\ntexts\n\n\nicon\nThe {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} to the loader image. This image is displayed when the widget is active; that is, between the `ajaxSend` and `ajaxComplete` events. \n\n**Type**: String \n\n**Default value**: No image by default.\n\n\ntemplate\n{% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %} wrapper for the output, or a DOM element selector. \n\n**Default value**:\n\n'&lt;div class=&quot;loading-mask&quot; data-role=&quot;loader&quot;&gt;' +\n    '&lt;div class=&quot;loader&quot;&gt;' +\n         '&lt;img alt=&quot;&lt;%- data.texts.imgAlt %&gt;&quot; src=&quot;&lt;%- data.icon %&gt;&quot;&gt;' +\n        '&lt;p&gt;&lt;%- data.texts.loaderText %&gt;&lt;/p&gt;' +\n    '&lt;/div&gt;' +\n'&lt;/div&gt;'\n\n\ntexts\n\nAn object that contains translations for loader text:\n\ntexts.loaderText: \nThe text that is displayed under the loader image. \n\nDefault value: 'Please wait...'\n\ntexts.imgAlt: The text that is set as the alt attribute value of the loader image. \nDefault value: 'Loading...'\n\n\nEvents\nLoader is subscribed to the following events:\n\nprocessStart\nprocessStop\ntexts\n\n\nprocessStart\nDisplay the loader. Can be triggered on any page element.\n\nprocessStop\nHide the loader. Can be triggered on any page element.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_loader.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-menu-html": {
      "title": "Menu widget",
      "content": "Overview\n\nThe Magento menu widget is a customized jQuery UI Menu widget. Magento menu extends the default functionality with the following:\n\nexpanding all layers of the menu tree past the second layer\ndeclaring a responsive menu\nsetting hover delay\n\nThe Magento menu {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is lib/web/mage/menu.js.\n\nInitialize the menu widget\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\nOptions\nMenu widget options mostly coincide with the options of the {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} UI Menu widget, with addition of the following custom ones:\n\n\ndelay\nresponsive\nexpanded\n\n\n\n\ndelay\nSet the delay length of opening submenu.\n\n**Type**: Number\n\n**Default value**: `300`\n\nresponsive\nSetting the default responsive handler for the navigation widget.\n\n**Type**: Boolean.\n\n**Default value**: `false`\n\nexpanded\nDisplay top level navigational items in mobile menu or all items.\n\n**Type**: Boolean.\n\n**Default value**: `false`\n\n\nMethods and Events\nThe Magento menu widget has all default jQuery UI menu widget methods and events.\n\n\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_menu.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-modal-html": {
      "title": "Modal widget",
      "content": "Overview\n\nThe Magento modal {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} implements a secondary window that opens on top of the main window. It contains the overlay and modal content. The modal widget configuration enables the following:\n\n\nConfiguring as popup or slide\nControlling stack of modal widgets \nSetting buttons for action bar\n\n\n\nThe modal widget source is &lt;Magento_Ui_module_dir&gt;/view/base/web/js/modal/modal.js\n\n\nThe widget uses the following templates:\n\n- &lt;Magento_Ui_module_dir&gt;/view/base/web/templates/modal/modal-popup.html popup type template.\n- &lt;Magento_Ui_module_dir&gt;/view/base/web/templates/modal/modal-slide.html slide type template.\n\nThe design patterns for the modal pop-up windows in the Admin are described in the Magento Admin Pattern Library, the Slide-out Panels, Modal Windows, and Overlays topic. \n\nInitialize the modal widget\n\nTo initialize the widget in your script, use the following general notation:\n\n$('#modal_content').modal({\n    &lt;option1&gt;: &lt;value1&gt;,\n    &lt;option2&gt;: &lt;value2&gt;,\n    ...\n});\n\n\nFor details about how to initialize the widget in a`.phtml` template, refer to the Javascript initialization topic.\n\nOptions\nThe modal widget has the following options:\n\nautoOpen\nbuttons\nclickableOverlay\nfocus\ninnerScroll\nmodalClass\nmodalLeftMargin\nresponsive\ntitle\ntype\n\n\n\nautoOpen\nAutomatically open the modal window when the widget is initialized.\n\n**Type**: Boolean \n\n**Default value**: `false`\n\nbuttons\nArray of buttons for action pane.\n\n**Type**: Array \n\n**Structure**:\n\nbuttons: [{\n    text: '',\n    class: '',\n    click: function() {} //handler on button click\n}]\n\n\n**Default value**:\n\nbuttons: [{\n    text: 'Ok',\n    class: '',\n    click: function() {\n        this.closeModal();\n    }\n}]\n\n\nclickableOverlay\nClose the modal window when a user clicks on the overlay.\n\n**Type**: Boolean \n\n**Default value**: `true`\n\n\nfocus\nSelector to focusing when a modal window opens or 'none' if focusing is not necessary.\n\n\n**Type**: String \n\n**Default value**: `''`\n\n\ninnerScroll\nModal scroll position.\n\n**Type**: Boolean \n\n**Default value**: `false`\n\nmodalClass\nCustom classes for modal window.\n\n**Type**: String \n\n**Default value**: empty\n\nmodalLeftMargin\nSets a margin between slide modal windows.\n\n**Type**: Number \n\n**Default value**: 45\n\nresponsive\nTurn popup modal window to slide panel on small screens. Available if the `type` option is set to `modal`.\n\n**Type**: Boolean \n\n**Default value**: `false`\n\ntitle\nTranslated title for popup window.\n\n**Type**: String \n\n**Default value**: empty\n\n\ntype\n\nThe type of window: popup or slide.\n\n**Type**: String \n\n**Default value**: `popup`\n\nMethods\nThe modal widget has the following methods:\n\ncloseModal()\nopenModal()\n\n\nopenModal()\nOpen the modal window.\n\n\ncloseModal()\nClose the modal window.\n\nEvents\n\nThe modal widget is subscribed to the following events:\n\nclosed\nopened\n\n\nclosed\nCalled when the modal window is closed.\n\nopened\nCalled when the modal window is opened.\n\nalways\n....\n\nKeyboard navigation\n- the ESC key: close the current modal window\n- the TAB key: set focus to the next focusable element (looped inside the modal window)\n- the SHIFT+TAB keys combination: set focus to the previous focusable element (looped inside the modal window)\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_modal.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-navigation-html": {
      "title": "Navigation widget",
      "content": "Overview\nMagento navigation widget is a customized jQuery UI Menu widget. Magento navigation extends the default functionality with the following:\n\nExpanding all layers of the menu tree past the second layer.\nLimiting the maximum number of list items contained within the main navigation (overflow items are placed into a secondary navigation level).\nMethod for handling the responsive {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} of the menu.\n\n\nThe navigation {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is lib/web/mage/menu.js\n\nInitialize the navigation widget\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\nOptions\nThe navigation widget has the following options:\n\nbreakpoint\ncontainer\nmaxItems\nmoreText\nresponsiveAction\n\n\nbreakpoint\n\nWidth of user's window in px for which the menu switches between mobile view and desktop view.\n\n**Type**: Number\n\n**Default value**: `768`\n\ncontainer\n\nContainer to track the menu overflow on responsive navigation.\n\n**Type**: String\n\n**Default value**: `#menu`\n\nmaxItems\n\nThe number of top level navigational items in main menu.\n\n**Type**: Number\n\n**Default value**: `null`\n\nmoreText\n\nSet the text for the overflow menu (i.e. more)\n\n**Type**: String\n\n**Default value**: `more`\n\nresponsiveAction\n\nThe default responsive handler for the navigation widget.\n\n**Type**: String\n\n**Default value**: `'wrap'`\n\n**Accepted values**: `wrap`, `onResize`, `onLoad`\n\n\nMethods\n\nsetMaxItems()\nsetupMoreMenu()\n\n\n\nsetMaxItems()\nMoves the list items that are more than the total max item number set by the user option.\n\nsetupMoreMenu()\nBuilds the more overflowing menu by cloning the main menu items.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_navigation.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-prompt-html": {
      "title": "Prompt widget",
      "content": "Overview \n\n\nThe Magento prompt {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} implements a modal pop-up window with an input field, and a cancel and a confirmation button.\n\nIt extends the Magento modal widget.\n\nThe prompt widget source is &lt;Magento_Ui_module_dir&gt;/view/base/web/js/modal/prompt.js\n\nThe widget can be used for implementing prompt windows for both, Admin and {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %}. The design patterns for the modal pop-up windows in the Admin are described in the Magento Admin Pattern Library, the Slide-out Panels, Modal Windows, and Overlays topic.\n\nInitialize the prompt widget\n\nThe prompt widget can be initialized with or without binding to a certain element.\n\n**Example1**: initialization on an element\n\n{% highlight js %}\n$('#prompt_init').prompt({\n    title: 'Prompt title',\n    actions: {\n        confirm: function(){}, //callback on 'Ok' button click\n        cancel: function(){}, //callback on 'Cancel' button click\n        always: function(){}\n    }\n});\n{% endhighlight js %}\n\n**Example2**: standalone initialization\n\n{% highlight js %}\nrequire([\n    'Magento_Ui/js/modal/prompt'\n], function(prompt) { // Variable that represents the `prompt` function\n\n    prompt({\n        title: 'Some title',\n        content: 'Some content',\n        actions: {\n            confirm: function(){},\n            cancel: function(){},\n            always: function(){}\n        }\n    });\n\n});\n{% endhighlight %}\n\nFor details about how to initialize a widget in a `.phtml` template, refer to the Javascript initialization topic.\n\nOptions\n\n\nactions\nautoOpen\nclickableOverlay\ncontent\nfocus\ntitle\n\n\nactions\nWidget callbacks.\n\n**Type**: Object.\n\n**Default value**:\n{% highlight js %}\nactions: {\n    confirm: function(){},\n    cancel: function(){},\n    always: function(){}\n}\n{% endhighlight %}\n\nautoOpen\nAutomatically open the prompt window when the widget is initialized.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nclickableOverlay\nClose the prompt window when a user clicks on the overlay.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\ncontent\n\nThe prompt window content.\n\n**Type**: String.\n\nfocus\nThe selector of the element to be in focus when the prompt window opens.\nIf `focus` is not specified or set to empty string, the focus is on the close button. If focusing is not requried, set `focus` to `none`.\n\n**Type**: String.\n\n**Default value**: `''`\n\ntitle\nThe title of the prompt window.\n\n\n**Type**: String.\n\n**Default value**: `''`\n\nEvents\n\nThe prompt widget implements the following events:\n\n- `confirm` callback: called when the confirmation button is clicked. The first argument is the value of the input field.\n- `cancel` callback: called when the cancel button is clicked.\n- `always` callback.\n\n\nKeyboard navigation\nThe keyboard navigation for the alert windows is similar to the navigation of the modal widget.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_prompt.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-quicksearch-html": {
      "title": "QuickSearch widget",
      "content": "Overview\n\nThe quickSearch {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} is a custom autocomplete widget that populates a list of suggested search terms for a given field. \n\nThe suggest widget source is &lt;Magento_Search_module_dir&gt;/view/frontend/web/form-mini.js.\n\nInitialize the quickSearch widget\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\n\nOptions\n\nautocomplete\nformSelector\nminSearchLength\nresponseFieldElements\nsearchLabel\nselectClass\nsubmitBtn\ntemplate\n\n\n\nautocomplete\nAttaches the `autocomplete` attribute to the search field.\n\n**Type**: String\n\n**Default value**: `off`\n\n**Accepted values**: `off`, `on`\n\n\nformSelector\nThe form selector containing the search input field.\n\n**Type**: String \n\n**Default value**: No form by default.\n\n\nminSearchLength\nMinimum number of characters required before the auto suggest triggers.\n\n**Type**: Integer\n\n**Default value**: `2`\n\nresponseFieldElements\nSelector for the response elements.\n\n**Type**: String\n\n**Default Value**: `ul li`\n\nsearchLabel\nSelector of a search input label.\n\n**Type**: String\n\n**Default value**: `[data-role=minisearch-label]`\n\nselectClass\nClass assigned to the selected suggested term.\n\n**Type**: String\n\n**Default value**: `selected`\n\nsubmitBtn\nDisable the submit button. \n\n**Type**: String\n\n**Default value**: `button[type=\"submit\"]`\n\ntemplate\nTemplate responsible for rendering returned data (suggested terms).\n\n**Type**: String\n\n**Default value**: `` element.\n\n\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_quickSearch.html"
    }
    ,
  
    "guides-v2-0-javascript-dev-guide-widgets-widget-tabs-html": {
      "title": "Tabs widget",
      "content": "Overview\n\nThe Magento tabs widget implements single content area with multiple panels, each associated with a header in a list. It uses the Magento collapsible widget.\n\nThe tabs {% glossarytooltip f0dcf847-ce21-4b88-8b45-83e1cbf08100 %}widget{% endglossarytooltip %} source is lib/web/mage/tabs.js.\n\n\nInitialize the tabs widget\nFor information about how to initialize a widget in a JS component or `.phtml` template, see the Initialize JavaScript topic.\n\n\nGenerally the tabs widget is instantiated like following:\n\n$(\"#element\").tabs();\n\n\nWhere:\n\n#element is the selector of the element for tabs is initialized.\n\n\nPhtml template file examples using script:\n\n{%highlight html%}\n\n{%endhighlight%}\n\nOptions\n\nThe tabs widget has the following options:\n\n* active\n* ajaxUrlElement\n* ajaxContent\n* animate\n* closedState\n* collapsible\n* collapsibleElement\n* content\n* disabled\n* disabledState\n* header\n* icons\n* loadingClass\n* openedState\n* openOnFocus\n* saveState\n* trigger\n\nactive\n\nIndex of the tab, which is active at the moment of initialization. Starts from \"0\"\n\n**Type**: Number\n\n**Default value**: `0`\n\najaxUrlElement\nSelector for the tab element, which contains the {% glossarytooltip a05c59d3-77b9-47d0-92a1-2cbffe3f8622 %}URL{% endglossarytooltip %} for the Ajax request.\nThe option of the collapsible widget used by tabs.\n\n**Type**: String\n\n**Default value**: `[data-ajax=true]`\n\najaxContent\nDefines if the content is loaded by Ajax request.\nThe option of the collapsible widget used by tabs.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\nanimate\nSpecifies if the collapse/expand actions are performed with animation. The option of the collapsible widget used by tabs.\n\n**Type**:\nMultiple types are supported:\n\nBoolean: the false value disables the animation \nNumber: duration in milliseconds\nString: is parsed to an object as a json string\nObject:\n\n{\nduration: &lt;Number&gt;,\neasing: &lt;String&gt;,\n&lt;propToAnimate&gt;: &lt;howToAnimate&gt;\n}\n\nFor details about the object passed, see jQuery.animate().\n\n\n\n**Default value**: `false`\n\nclosedState\nClass assigned to the tab being closed.\n\n**Type**: String\n\n**Default value**: `null`\n\ncollapsible\n\nIf this option is set to false, the content is not collapsed when the panel is active. The option of the collapsible widget used by tabs.\n\n**Type**: Boolean\n\n**Default value**: `false`\n\ncollapsibleElement\nSelector of the element for which the collapsible widget is initialized.\n\n**Type**: String\n\n**Default value**: `[data-role=collapsible]`\n\ncontent\n\nSelector for the content element, searched for using `.find()` on the main collapsible element. The option of the collapsible widget used by tabs.\n\n**Type**: String\n\n**Default value**: `[data-role=content]`\n\ndisabled\n\nArray of the elements' indexes which are disabled when the widget is initialized.\n\n**Type**: Array of numbers.\n\n**Default value**: `[]`\n\ndisabledState\nClass assigned to the tab being currently disabled.\n\n**Type**: String\n\n**Default value**: `null`\n\nheader\n\nSelector for the header element, searched for using `.find()` on the main collapsible element.\nThe option of the collapsible widget used by tabs.\n\n**Type**: String\n\n**Default value**: `[data-role=title]`\n\nicons\n\nThe classes for icons to be used in headers. If no classes are specified, icons are not be created. A new span is created and appended to the header, the classes for this span are automatically changed whenever the content gets expanded/collapsed.\nThe option of the collapsible widget used by tabs.\n\n**Type**: String\n\n**Default value**: { header: null, activeHeader: null }\n\n\nloadingClass\nClass assigned to a tab during content loading for this tab.\n\n**Type**: String\n\n**Default value**: `null`\n\nopenedState\nClass name assigned to a tab which is being currently opened.\n\n**Type**: String\n\n**Default value**: `null`\n\nopenOnFocus\nUsed for setting keyboard navigation. Defines if the tab is expanded when its header is in focus.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\nsaveState\n\nSpecifies if the state is saved in the local storage if the browser supports it. Otherwise will be saved into a cookie.\nThe option of the collapsible widget used by tabs.\n\n**Type**: Boolean\n\n**Default value**: `true`\n\ntrigger\n\nSelector for the trigger element, applied using `.find()` on the main collapsible element. If the trigger is not found, the header becomes a trigger.\nThe option of the collapsible widget used by tabs.\n\n**Type**:\n\n- String\n- {% glossarytooltip 5bfa8a8e-6f3e-4fed-a43e-62339916f02e %}jQuery{% endglossarytooltip %} object\n\n**Default value**: `[data-role=trigger]`\n\n\nMethods\n\nThe tabs widget has the following methods:\n\nactivate()\nenable()\ndeactivate()\ndisable()\n\nactivate()\n\n`activate(index)` displays `content` for the tab with the corresponding `index`.\n\n\nenable()\n`enable(index)` enables the tab with the corresponding `index`.\n\ndeactivate()\n`deactivate(index)` hides `content` for the tab with the corresponding `index`.\n\ndisable()\n`disable(index)` disables the tab with the corresponding `index`.\n\nEvents\nTabs is subscribed to the same events as the collapsible widget:\n\n\nbeforeOpen callback\ndimensionsChanged\n\n\nbeforeOpen callback\nCalled before the content is opened.\n\ndimensionsChanged\nCalled after content is opened or closed.\n",
      "url": "/guides/v2.0/javascript-dev-guide/widgets/widget_tabs.html"
    }
    ,
  
    "guides-v2-0-pattern-library-navigation-wizard-wizard-html": {
      "title": "Admin Design Pattern Library",
      "content": "## Wizard\nWithin the Magento application, it is often necessary to guide a user step-by-step through completing a process. By using a wizard, user can complete a task easier because the user can just follow a preplanned, step-by-step path to accomplish his/her goal. It also increases the chances that the task gets completed successfully.\n\nFor solutions not described in this article or for further information, please contact the Magento UX Design Team.\n\nWhen to Use\n* Use this pattern when the user needs to go through a process to accomplish a task that is complex and contains several steps. \n\nWhen Not to Use\n* The wizard bar should not co-exist with a button bar. Only one can be present per page/modal.\n* Be careful when using this pattern. Wizard is a bad choice when users are experts and/or the task is done often, because Wizard has negative effect on efficiency and user control.\n\nHow to Use\n* Break up a task into logical, titled steps.\n* Keep the number of steps at the minimum.\n* Remove or hide unnecessary interface elements that are not necessary for completing the task.\n* If possible, allow some freedom for the experts.\n* Show a sequence map of all the steps in the Wizard at the top of each page.\n* Show a summary on the last page (if necessary).\n\nStructure\nThe whole structure must be responsive and fluid.\n\n\n\n**1. Wizard Title**\nThis would be the page/modal title\n\n**2. Wizard Progress**\nPlacement is always on the most left. The width is fluid, depending on the screen size. Must be in one line. The width can go as long to reach the buttons. But if there is not enough room, see **Variation 4** at the bottom of this document.\n\n**3. Action Buttons and Links**\nThe additional links and buttons needed must be between the Wizard Progress and Next & Back buttons.\n\n**4. Next & Back buttons**\nThese buttons must be present at all time and in every step of the wizard. If the button is not needed, it can be disabled. Placement is fixed at the most right of the whole container.\n\n**5. Step Labels**\nThese labels are optional. Although long labels are not recommended, it is possible. The labels can flow to the next line but only two lines permitted. Any extra text are not shown but the '...' will be use to indicate that the label has extra text. \n\n**6. Current Step Title**\nThis should always be in the format \"Step #: Step Label\". \n\n\nStyle\nRefer to below for basic styling. The special cases of styling can be found under variations.\n\n\n\nInteraction and Behavior\n\n**Content Behavior**\nUser navigate between steps of the wizard by clicking 'Back' or 'Next' button.\nThe 'Back' or 'Next' buttons should only change/refreshes the content area, not the whole page. \n\n**Fillings Animation**\nNo animation\n\n**Back Buttons behavior**\nIn every first step, back button is disabled. In all other steps, back button becomes enabled.\n\n**Next Buttons behavior**\nIf next button exist in the very last step, it should always be disabled. (Note: refer to variations section of this document, some cases may not have next button in last step.\n\nIf a step required that the user complete the steps before proceeding, next button maybe disabled for that step.\n\n**Visited States behavior**\nIf the user is creating a new flow using wizard, the future steps can be disabled. But if a user is EDITING an existing flow using wizard, all steps in the progress-bar will be accessible. The visited states does NOT behave like a visited link. The system should remember if the flow have been visited before even though the visitation is not from the same browser session.\n\n**Other Navigation** (besides back and next buttons)\n\n\n\n\n\n\n Variations \n\n1. Basic Process (i.e. Deploy tool)\n\nIn the first step, back button is disabled. \n\n\n\n\nIn the last step, next button is disabled.\n\n\n\n\n2. Process with Save Functionality at Any Step\n\nIn the first step, back button is disabled, and next button is enabled. Save button is present so the user who only need to edit specific step, can 'Save' right after they are done editing.\n\n\n\nAny other steps, Save button is present. Both 'Back' and 'Next' buttons are enabled.\n\n\n\n'Next' button becomes disabled. The user will use 'Save' button for saving.\n\n\n\n3. Process with many steps that cannot fit in the given section\n\nIt is not recommended to have too many steps for a wizard. But if a use case arise such that your {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} will have many steps that cannot fit the available space, please follow this truncation rule if not all steps in the navigation can be visible at once. This case may happen based on multiple reasons such as screen size changes, too many buttons, or simply too many steps.\n\n(for specific styling of this variation, refer to the link to .psd files in Assets.)\n\n\n\n\nAssets\n\nPlease reach out to the Magento UX Design team if you need anything else.\n\nDownload Wizard Style - PSD source\n\n\nDownload Variation 1 - PSD source\n\n\nDownload Variation 2 - PSD source\n\n\nDownload Variation 3 - PSD source\n\n\nDownload Variation 4 - PSD source\n\n\n\n",
      "url": "/guides/v2.0/pattern-library/navigation/wizard/wizard.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-extension-coding-working-with-arch-bp-html": {
      "title": "Working with the Architecture",
      "content": "In addition to understanding fundamental programming designs/concepts, you are encouraged to learn how the MVC architecture works in our code and how to work with Magento's generated code and factories.\n\n### Avoid modification of the Magento Core\n  The core code is the default Magento code that comes with the application. You should never edit the core code because code changes occur between version upgrades and any changes you make will get overwritten. Try achieving your desired behavior with plugins, overriding interface preferences, and {% glossarytooltip c57aef7c-97b4-4b2b-a999-8001accef1fe %}event{% endglossarytooltip %} observers.\n\n  If you feel that Magento can be improved with your core code changes, please consider [contributing via Git]({{page.baseurl}}contributor-guide/contributing.html).\n\n### Learn the architecture\n  To create the optimum module, you should get to know the Magento 2 architecture. Start off by familiarizing yourself with the [Admin Pattern Library]({{page.baseurl}}pattern-library/bk-pattern.html), the core [Magento Components]({{page.baseurl}}extension-dev-guide/bk-extension-dev-guide.html), and our [service contracts]({{page.baseurl}}extension-dev-guide/service-contracts/service-contracts.html) and [APIs]({{page.baseurl}}get-started/bk-get-started-api.html).\n\n### Check your extension configurations\n  Make sure your {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %} is configured correctly in each of your extension's configuration files. Invalid or unexpected values will cause your extension to behave incorrectly within Magento.\n\n### Know and leverage the Magento 2 framework\n  There have been some significant changes from Magento 1. Be sure to study the capabilities and standards of the Magento 2 Framework.\n\n  For example:\n\n  - Instead of creating custom validators from scratch, implement the [`\\Magento\\Framework\\Validator\\ValidatorInterface`]({{site.mage2000url}}lib/internal/Magento/Framework/Validator/ValidatorInterface.php){:target=\"_blank\"}.\n  - Instantiating a database connection can be expensive and unneccessary. Magento provides resource models for performing SQL commands. (See [Persistence Layer]({{page.baseurl}}architecture/archi_perspectives/persist_layer.html))\n  - Consider using Magento framework conventions instead of low-level or {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} functionality.\n  - Use the  [`Magento\\Framework\\Data\\Collection`]({{site.mage2000url}}lib/internal/Magento/Framework/Data/Collection.php){:target=\"_blank\"} class to retrieve a collection of filtered objects instead of directly querying the database.\n\n### Use dependency injection\n  Direct class instantiation is not recommended because the class can be rewritten. If the class is created directly, any rewrites will not be applied and it breaks Magento's class rewrite capability. We encourage you to become familiar with how we use [dependency injection]({{page.baseurl}}extension-dev-guide/depend-inj.html) to get an instance of a class.\n\n### Follow Model-View-Control (MVC) pattern\n  Make sure your extension adheres to the MVC Pattern, and that it does not violate any of its principles.\n\n  Some important things to check in your extensions:\n\n  - Make sure your Business Logic, Configuration, and SQL are implemented in the correct places.\n  - Make sure that CSS, JavaScript, HTML, and {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} code are all in the appropriate files (i.e. they should not be inline).\n  - Use appropriate logic in a Block, Helper, Template, Controller, or Model.\n  - Ensure correct {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} design.\n\n### Use the PHP_CodeSniffer tool\n\n[PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer){:target=\"_blank\"} is a set of PHP scripts that checks your code for violations of a particular coding standard. It can be used in conjunction with the [Magento Extension Quality Program Coding Standard](https://github.com/magento/marketplace-eqp){:target=\"_blank\"} to check your code for some of the more common Magento and PHP problems. Using these two tools will ensure that your extension code meets many of [Magento's coding standards]({{page.baseurl}}coding-standards/bk-coding-standards.html). It also has the added benefits of keeping your code clean and maintainable.\n",
      "url": "/guides/v2.0/ext-best-practices/extension-coding/working-with-arch-bp.html"
    }
    ,
  
    "guides-v2-0-ext-best-practices-security-writing-secure-code-html": {
      "title": "Writing secure code",
      "content": "## Overview\n\nUsing {% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} features that are known to be exploitable or non-secure can lead to remote code execution or weak cryptography.\nAs a developer, you should avoid using features that introduce vulnerabilities in your code.\n\n## PHP functions to avoid\n\nThe following is a list of PHP functions that are known to be vulnerable and exploitable.\nAvoid using these functions in your code.\n\n* [`eval`][0]{:target=\"_blank\"} - Using `eval` is considered bad practice because of its ability to [execute arbitrary PHP code][1]{:target=\"_blank\"}.\n* [`serialize`][2]{:target=\"_blank\"}/[`unserialize`][3]{:target=\"_blank\"} - Attackers can create an exploit for these functions by passing a string with a serialized arbitrary object to the `unserialize` function to [run arbitrary code][4]{:target=\"_blank\"}.\n* [`md5`][5]{:target=\"_blank\"} - The algorithm for this function is known to have [cryptographic weaknesses][6]{:target=\"_blank\"}.\n  You should never use this function for hashing passwords or any other sensitive data.\n* [`srand`][7]{:target=\"_blank\"} - Using a predetermined number to seed the random number generator results in a [predictable sequence of numbers][8]{:target=\"_blank\"}.\n* [`mt_srand`][9]{:target=\"_blank\"} - This function is a pseudo-random number generator (PRNG) and is [not cryptographically secure][10]{:target=\"_blank\"}.\n\n## Standard PHP library classes to avoid\n\n* [`ArrayObject`][11]{:target=\"_blank\"} - Using `ArrayObject` class is not recommended because it contains `unserialize` method, which attackers can use to create an exploit.\n\n  If you need to use the `ArrayObject` class, override the `serialize`/`unserialize` methods so that they use secure logic. \n  Convert objects into arrays to serialize them, and reconstruct the objects using arrays during unserialization.\n\n  You can use `json_encode`/`json_decode` PHP functions for a secure way of serializing/unserializing data.\n\n[0]:http://php.net/manual/en/function.eval.php\n[1]:https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet#Code_Injection\n[2]:http://php.net/manual/en/function.serialize.php\n[3]:http://php.net/manual/en/function.unserialize.php\n[4]:https://www.owasp.org/index.php/PHP_Object_Injection\n[5]:http://php.net/manual/en/function.md5.php\n[6]:https://www.owasp.org/index.php/Guide_to_Cryptography#Hashes\n[7]:http://php.net/manual/en/function.srand.php\n[8]:http://programmers.stackexchange.com/questions/76229/predicting-the-output-of-phps-rand\n[9]:http://php.net/manual/en/function.mt-rand.php\n[10]:http://phpsecurity.readthedocs.io/en/latest/Insufficient-Entropy-For-Random-Values.html\n[11]:http://php.net/manual/en/class.arrayobject.php\n",
      "url": "/guides/v2.0/ext-best-practices/security/writing-secure-code.html"
    }
    ,
  
    "guides-v2-0-test-unit-writing-testable-code-html": {
      "title": "Writing Testable Code",
      "content": "This topic does not aim to be a replacement for existing documentation about testing, but rather tries to highlight some thoughts on the subject. Although the truth of anything depends somewhat on the context, this topic attempts to provide information that is applicable in *most* situations.\n\n\n## Tests should be simple\n\nTests should be trivial to write. Simple, small classes with few collaborators are easy to test. If testing a class is difficult, the class probably has grown too large and does too much. Split the class into several classes, each of which does only one thing.\n\n## Manage dependencies\n\nA big part of making code testable is managing its dependencies. Dependencies can take many forms and they can be clearly stated or hidden.  \n\nThe fewer dependencies a class has and the more obvious they are, the easier it is to maintain and test the class. At the same time, the class is less likely to break because of future changes.\n\n### Creating new instances\nWe strongly recommend you do *not*:\n\n*   Use `new` to instantiate new objects, because that removes the flexibility the Magento dependency configuration offers.  \n*   Use the `ObjectManager` directly in production code.  \n\nThere always is a better alternative, usually a [generated]({{page.baseurl}}extension-dev-guide/code-generation.html) `Factory` class, or a [`Locator`](https://thephp.cc/news/2015/09/dependencies-in-disguise){:target=\"_blank\"} class of sorts.  \n\n\n  This rule applies only to production code. When writing integration tests, this is not true. In fact, the object manager is recommended for integration tests.\n\n\n### Collaborator classes\n\nWhenever an external class property, class constant, or a class method is used in a file, this file depends on the class containing the method or constant. Even if the external class is not used as a instantiated object, the current class is still hard-wired to depend on it.  \n\n{% glossarytooltip bf703ab1-ca4b-48f9-b2b7-16a81fd46e02 %}PHP{% endglossarytooltip %} cannot execute the code unless it can load the external class, too. That is why such external classes are referred to as *dependencies*. Try to keep the number dependencies of to a minimum.  \n\nCollaborator instances should be passed into the class using [constructor injection]({{page.baseurl}}extension-dev-guide/depend-inj.html#dep-inj-preview-cons).\n\n### The environment (file system, time, global variables)\n\nWhenever your code requires access to some part of the environment, try to use a collaborator class that can easily be replaced by a test double (also referred to as a *mock*) instead.\n\nFor example, if you...\n\n* ...need file system access?  \n\n  Use [`\\Magento\\Framework\\Filesystem\\Io\\IoInterface`]({{ site.mage2000url }}lib/internal/Magento/Framework/Filesystem/Io/IoInterface.php){:target=\"_blank\"} instead of `fopen()`, `dir()` or other native methods.\n* ...need the current time?  \n\n   Inject a [`\\DateTimeInterface`](http://php.net/manual/en/refs.calendar.php){:target=\"_blank\"} instance (for example `\\DateTimeImmutable`) and use that.\n* ...need the remote IP?  \n\n  Use [`\\Magento\\Framework\\HTTP\\PhpEnvironment\\RemoteAddress`]({{ site.mage2000url }}lib/internal/Magento/Framework/HTTP/PhpEnvironment/RemoteAddress.php){:target=\"_blank\"}.\n* ...need access to `$_SERVER`?  \n\n  Consider using [`\\Magento\\Framework\\HTTP\\PhpEnvironment\\Request::getServerValue()`]({{ site.mage2000url }}lib/internal/Magento/Framework/HTTP/PhpEnvironment/Request.php){:target=\"_blank\"}.\n\nAnything that can be easily replaced by a test double is preferable to using low level functions.\n\n## Interfaces over classes\n\nDependencies on *interfaces* should be preferred over dependencies on *classes* because the former decouples your code from implementation details. This helps to isolate your code from future changes.  \n\nThis guideline is true only if you exclusively use the methods and constants defined in the interface. If your code also uses other public methods specific to the class implementing the interface, your code is no longer independent of the implementation details.  \n\nYou lose any benefits of having an interface if you use methods of a concrete class.  \n\nEven worse, the code is lying, because apparently there is a dependency on the interface only; however, you could not use a different implementation of the same interface. This can lead to considerable maintenance costs down the road. In such cases, using the class name of the concrete implementation is preferable to using the interface name as a dependency.  \n\nTo illustrate, assume there is a theoretical `RequestInterface` with two methods, `getPathInfo()` and `getParam($name)`.\n\nFor example:\n\n{%highlight php startinline=true %}\ninterface RequestInterface\n{\n    public function getPathInfo();\n    public function getParam($name);\n}\n{%endhighlight%}\n\nLet's also assume there is a concrete implementation `HttpRequest` that that also has a public method `getParams()` in addition to the two interface methods.\n\n{%highlight php startinline=true %}\nclass HttpRequest implements RequestInterface\n{\n    public function getPathInfo() {...}\n    public function getParam($name) {...}\n    public function getParams() {...}\n}\n{%endhighlight%}\n\nAny code that depends on `RequestInterface` should avoid using the `getParams()` method, because it is not part of the interface.  \n\n{%highlight php startinline=true %}\nclass MyClass\n{\n    /**\n     * @var RequestInterface\n     */\n    private $request;\n\n    public function __construct(RequestInterface $request)\n    {\n        $this->request = $request;\n    }\n\n    public function doSomething()\n    {\n        foreach ($this->request->getParams() as $paramName => $value) {\n            // ... some more code\n        }\n    }\n}\n{%endhighlight%}\n\nThis completely defeats the purpose of the interface. A better solution might be the following:\n\n{%highlight php startinline=true %}\npublic function doSomething()\n{\n    foreach (['foo', 'bar'] as $paramName) {\n        $value = $this->request->getParam($paramName);\n        // ... some more code\n    }\n}\n{%endhighlight%}\n\nThe second example method `doSomething()` does not call the `getParams()` method. \n\nIf `getParams()` had been called, the class `MyClass` would have instantly depended on the `HttpRequest` implementation and the benefit of having an interface would have been completely lost.  \n\nIf cannot avoid using `getParams()`, you can do any of the following:\n\n*   Add the `getParams()` method to `RequestInterface` \n*   Make `MyClass` dependent on `HttpRequest` directly instead of using `RequestInterface` as a constructor argument\n\nThe benefit *interfaces* offer is that interfaces keep code decoupled from implementation details. This means that future changes won't cause your code to fail unless the interface is changed too.  \n\nAlso, interfaces can very easily be replaced by test doubles (also referred to as *mocks*). Mocking concrete classes can be much more complex.\n\n## Class and method size\n\nTry to keep the number of methods in a class and the number of lines of code per method as few as possible.  \n\nShorter methods do less, which in turn means they are easier to test. The same is true for small classes.\n\nAs a rule of thumb, try to keep methods to five or fewer lines of code.\n\n### Testing private and protected methods\n\nWhen you see the need to write tests for `private` scope methods, it usually is a sign that the class under test is doing too much.  \n\nConsider extracting the private functionality into a separate class and using that class as a collaborator. The extracted class then provides the functionality using a public method and can easily be tested.\n\n## Helpful principles\n\nMany good practices for software development in general and object oriented programming in particular have been formulated as principles over the last decades. Applying these rules of thumb helps to keep code in good shape and also leads to more easily testable code.  \n\nThe following list principles are by no means complete, but they might serve as a starting point when you start to write testable code.\n\n### Tell, don't ask\n\nTry to use a few getters as possible. Instead, use methods that tell the objects directly what to do. Asking for object values is a sign of misplaced responsibilities. [Kent Beck](https://en.wikipedia.org/wiki/Kent_Beck){:target=\"_blank\"} called that \"feature envy\".\n\nConsider moving the code in that needs the value into a class that has the data available as the following example shows:\n\n{%highlight php startinline=true %}\nfunction extractMatchingDocuments(Document $searchDoc, array $documents)\n{\n    return array_filter($documents, function (Document $doc) use ($searchDoc){\n        return $doc->getFieldValue() === $searchDoc->getFieldValue();\n    });\n}\n{%endhighlight%}\n\nThe following example moves the comparison into a `matches()` method on the `Document` class instead.\n\n{%highlight php startinline=true %}\nfunction extractMatchingDocuments(Document $searchDoc, array $documents)\n{\n    return array_filter($documents, function (Document $doc) use ($searchDoc){\n        return $searchDoc->matches($doc);\n    });\n}\n{%endhighlight%}\n\n### The Law of Demeter\n\nThe [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter){:target=\"_blank\"} principle is sometimes stated as \"Talk to friends only\" or \"Don't talk to strangers.\" It states that code can call methods only on objects that it received in one of the following ways:\n\n* Objects received as constructor arguments\n* Objects received as arguments to the current method\n* Objects instantiated in the current method\n\nThe principle explicitly states that no method can be called on objects that are the return value of another method call. Calling method calls on returned objects introduces a hidden dependency on the returned object type.\n\nThe following example violates the Law of Demeter by calling the method `getByName()` on the return value of `getHeaders()`.\n\n{%highlight php startinline=true %}\nfunction isJsonResponse(Response $response)\n{\n    $headers = $response->getHeaders();\n    return $headers->getByName('Content-Type') === 'application/json';\n}\n{%endhighlight%}\n\nThe solution is to add the method `isJsonResponse()` to the response object instead.\n\nMethod chaining (for example, `$foo->getSomething()->setThat($x)->doBar()`) is often a sign of this problem. When testing this type of code, you must often create test doubles that must be set up to return other test doubles and so on (\"Mocks returning mocks...\").\n\n### \"I don't care\"\n\nAn interesting approach to writing more testable code is to try to delegate as much as possible to other classes. Every time any currently not available resource is needed, just think \"I don't care where that comes from\" and add a collaborator class that provides it.  \n\nAt first this might seem like it causes the number of classes to explode, but in fact each one of the classes is very short and simple and usually has very limited responsibilities.  \n\nAlmost as a side effect, those classes are very easy to test.\n\n#### For more information\n\n* Kent Beck's [rules of simple software design](http://martinfowler.com/bliki/BeckDesignRules.html){:target=\"_blank\"}\n* [Clean Code](https://books.google.com/books/about/Clean_Code.html?id=dwSfGQAACAAJ){:target=\"_blank\"} by Robert C. Martin\n* [Refactoring](http://martinfowler.com/books/refactoring.html){:target=\"_blank\"} by Martin Fowler\n* [Growing Object Oriented Software Guided by Tests](http://www.growing-object-oriented-software.com){:target=\"_blank\"} by Steve Freeman and Nat Pryce\n",
      "url": "/guides/v2.0/test/unit/writing_testable_code.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-translations-xlate-html": {
      "title": "Translations overview",
      "content": "Overview of translations\nThe Magento application enables you to localize your store for multiple regions and markets. We improved the localization and customization of Magento instances by making translation dictionaries easier to update and by maintaining a reduced amount of code coupling and duplication.\n\nTerms used\nA *translation dictionary* is a comma-separated value (.csv) file with at least two columns: the original phrase in the `en_US` locale and a translation of that phrase in an another locale. Sample translation from English (`en_US`) to German (`de_DE`):\n\n\t\"Add to Cart\",\"Zum Warenkorb hinzufügen\"\n\t\"Add to Compare\",\"Hinzufügen um zu vergleichen\"\n\t\"Add to Wishlist\",\"Zum Wunschzettel hinzufügen\"\n\t\"Additional Product Info\",\"Zusätzliche Angaben zum Produkt\"\n\t\"Address\",\"Adresse\"\n\t\"Address %1 of %2\",\"Adresse %1 von %2\"\n\nA *language package* is basically a collection of translation dictionaries for a particular language together with meta-information. You can also distribute language packages to other merchants if you wish. More information about language packages.\n\n\n  To create a language package, the .csv file requires additional columns that specify the themes or modules in which the translations were found. For more information, see Generate a translation dictionary.\n\n\n### Benefits\nBenefits include:\n\n*\tTwo types of language packages:\n\n\t*\tModule and theme packages. Included in the `i18n` directory of a module or theme, the Magento application auto-discovers these packages.\n\t*\tAn entire dictionary in one directory. \n\n\t\tThis is intended to be used and distributed as a standalone component (similar to modules and themes).\n\n*\tYou can use the ready-to-use language packages prepared by other users or you can create your own.\n*\tYou can create localizations based on existing, or parent, translations using language inheritance. Inheritance means (among other things) that if you missed or omitted localizing some phrases or terms, parent translations are used.\n*\tYou can customize your translations even further by creating more than one version of a translation for the same language.\n\nDepending on your needs, you can use the existing language packages or translate Magento by yourself.\n\n### Changes in Magento 2\nChanges made:\n\n*\tThe {% glossarytooltip 9c4c7b9b-43f0-4454-8e8c-fb62ad40c35f %}language package{% endglossarytooltip %} (`i18n` directory) can now be moved and saved to any directory of your {% glossarytooltip 55774db9-bf9d-40f3-83db-b10cc5ae3b68 %}extension{% endglossarytooltip %}.\n*\tThe phrases for translations are enabled in the Phrase class.\n\n### More information\nSee one of the following sections for more information:\n\n* Why you might need to add a dictionary for a theme\n*\tManually translate words and phrases\n*\tTranslation dictionaries\n*\tLanguage packages\n\nWhy you might need to add a dictionary for a theme\n\nYou might need to add a dictionary for the default language (en_US) in the following cases:\n\n- if you want to replace certain strings from the parent theme. For example, use \"Compare\" instead of \"Add to Compare\".\n- if you want your {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} to be ready for localization. \n\nFor practical illustration of creating a dictionary for a theme for both cases, see the Create a translation dictionary for a theme topic.\n\nManually translate words and phrases\nTranslating the names, titles and phrases used in Magento involves the following steps:\n\n1.\tGenerate a dictionary of your instance using the translation dictionary tool.\n2.\tTranslate the terms.\n2.\tIf desired, package your translations in a language package.\n\n\n  Only one variant of translation can be used for a word or phrase in a package. Otherwise, Magento returns an error.\n\n\nAnyone can submit translations on the {% glossarytooltip 1a70d3ac-6bd9-475a-8937-5f80ca785c14 %}storefront{% endglossarytooltip %} using the Text Editor. Changes made in the Text Editor are not recorded in an instance's dictionary; instead, they are stored in the database. In the storefront, an inline translation of a phrase overwrites the translation stated in a dictionary. However, inline translations are theme-specific and do not apply if another theme is assigned.\n\nTranslation dictionaries\nMagento translates words and phrases when all of the following conditions are met:\n\n*\tThe Magento code base has the necessary translation dictionaries for a language\n*\tThis language is configured by the store administrator to be used in specified scope (that is, storefront)\n\nThe Magento application automatically assembles translation dictionaries located in modules' `i18n` directory into a dictionary per language. For example, Brazilian Portuguese (`pt_BR`) translation dictionaries might be located in {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} and theme directories similar to the following:\n\n\tapp/code/Magento/Checkout/i18n/pt_BR.csv\n\tapp/design/frontend/Magento/demo/i18n/pt_BR.csv\n\nAssembling the preceding `pt_BR.csv` files across all modules and the current theme results in a Portuguese translation of the entire application area (storefront or the Admin).\n\nThe dictionary generator tool\nMore information about the dictionary generator tool.\n\nLanguage packages\nMagento enables you to create the following types of language packages:\n\n*\tA set of .csv files for modules and themes. These packages files are intended to be deployed in modules. For example:\n\n\t\t__/app\n\t\t |__/code\n\t\t | |__/Magento\n\t\t |   |__/Catalog\n\t\t |   | |__/i18n\n\t\t |   |   |-- pt_BR.csv\n\t\t |   |__/Checkout\n\t\t |   | |__/i18n\n\t\t |   |   |-- pt_BR.csv\n\t\t |   |__/Customer\n\t\t |     |__/i18n\n\t\t |       |-- pt_BR.csv\n\t\t |__/design\n\t\t   |__/frontend\n\t\t     |__/Magento\n\t\t       |__/demo\n\t\t         |__/i18n\n\t\t           |-- pt_BR.csv\n\n\n*\tLanguage packages that contain a entire dictionary in one directory. \n\n\tYou can distribute this language package as a standalone component (similar to modules and themes). Interestingly, it violates Magento's modularity principles on purpose; that is, so that a system integrator can translations variations provided by extensions. \n\nIn addition to the `.csv` file that contains the language dictionary, the language package contains meta-information:\n\n*\t`composer.json` that contains any dependencies for the language package and a mapping to its defined {% glossarytooltip 05099dbb-d491-4e33-a065-16035cb2d4d9 %}locale{% endglossarytooltip %} \n\n\tSample composer.json\n\n*\t`language.xml`, in which you declare a language package.\n\n\tSample language.xml\n\n#### Next step\n\nTo create translation dictionaries and language packages, see Translation dictionaries and packages.\n\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/translations/xlate.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-xml-instructions-html": {
      "title": "Layout instructions",
      "content": "What's in this topic\n\n\nChanging {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} files is one of the two possible ways to customize page layout in Magento (the second way is altering templates). \nTo change the page wireframe, modify the page layout files; all other customizations are performed in the page configuration or generic layout files. \n\nUse {% glossarytooltip bcbc9bf8-3251-4b3c-a802-07417770af3b %}layout instructions{% endglossarytooltip %} to:\n\n\n*  move a page element to another parent element\n*  add content\n*  remove a page element\n\n\nThe basic set of instructions is the same for all types of layout files. This article describes these basic instructions; for details about how they are used in particular layout file type, please refer to the Layout file types article.\n\n\nCommon layout instructions\n\nUse the following layout instructions to customize your layout:\n\n*  &lt;block>\n*  &lt;container>\n*  before and after attributes\n*  &lt;action>\n*  &lt;referenceBlock> and &lt;referenceContainer>\n*  &lt;move>\n* &lt;remove&gt;\n*  &lt;update&gt;\n*  &lt;argument&gt;\n*  &lt;arguments&gt;\n\n&lt;block>\n\nDefines a block.\n\nDetails: A block is a unit of page output that renders some distinctive content – a piece of information, a user interface element – anything visually tangible for the end-user.\nBlocks employ templates to generate {% glossarytooltip a2aff425-07dd-4bd6-9671-29b7edefa871 %}HTML{% endglossarytooltip %}. Examples of blocks include a {% glossarytooltip 50e49338-1e6c-4473-8527-9e401d67ea2b %}category{% endglossarytooltip %} list, a mini cart, product tags, and product listing.\n\n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         class\n         Name of a class that implements rendering of a particular block. An object of this class is responsible for actual rendering of block output.\n         class name\n         yes\n      \n      \n         name\n         Name that can be used to address the block to which this attribute is assigned. The name must be unique per generated page. If not specified, an automatic name will be assigned in the format ANONYMOUS_n\n         0-9, A-Z, a-z, underscore (_), period (.), dash (-). Should start with a letter. Case-sensitive.\n         no\n      \n      \n         before\n         Used to position the block before an element under the same parent. The element name or alias name is specified in the value. Use dash (-) to position the block before all other elements of its level of nesting. See before and after attributes for details.\n         Possible values: element name or dash (-)\n         no\n      \n      \n         after\n         Used to position the block after an element under the same parent. The element name or alias name is specified in the value. Use dash (-) to position the block after all other elements of its level of nesting. See before and after attributes for details.\n         Possible values: element name or dash (-)\n         no\n      \n      \n         template\n         A template that represents the functionality of the block to which this attribute is assigned.\n         template file name\n         no\n      \n      \n         as\n         An alias name that serves as identifier in the scope of the parent element.\n         0-9, A-Z, a-z, underscore (_), period (.), dash (-). Case-sensitive.\n         no\n      \n      \n         cacheable\n         Defines whether a block element is cacheable. This can be used for development purposes and to make needed elements of the page dynamic. \n         true or false\n         no\n      \n   \n\n\nTo pass parameters use the `` instruction. \n\n&lt;container>\nA structure without content that holds other layout elements such as blocks and containers.\nDetails: A container renders child elements during view output generation. It can be empty or it can contain an arbitrary set of &lt;container> and &lt;block> elements.\n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         name\n         A name that can be used to address the container in which this attribute is assigned. The name must be unique per generated page.\n         A-Z, a-z, 0-9, underscore (_), period (.), dash (-). Should start with a letter. Case-sensitive.\n         yes\n      \n      \n         label\n         An arbitrary name to display in the web browser.\n         any\n         no\n      \n      \n         before\n         Used to position the container before an element under the same parent. The element name or alias name is specified in the value. Use dash (-) to position the block before all other elements of its level of nesting. See before and after attributes for details.\n         Possible values: element name or dash (-).\n         no\n      \n      \n         after\n         Used to position the container after an element under the same parent. The element name or alias name is specified in the value. Use dash (-) to position the block after all other elements of its level of nesting. See before and after attributes for details.\n         Possible values: element name or dash (-).\n         no\n      \n      \n         as\n         An alias name that serves as identifier in the scope of the parent element.\n         0-9, A-Z, a-z, underscore (_), period (.), dash (-). Case-sensitive.\n         no\n      \n      \n         output\n         Defines whether to output the root element. If specified, the element will be added to output list. (If not specified, the parent element is responsible for rendering its children.)\n         Any value except the obsolete toHtml. Recommended value is 1.\n         no\n      \n      \n         htmlTag\n         Output parameter. If specified, the output is wrapped into specified HTML tag.\n         Any valid HTML 5 tag.\n         no\n      \n      \n         htmlId\n         Output parameter. If specified, the value is added to the wrapper element. If there is no wrapper element, this attribute has no effect.\n         Any valid HTML 5 &lt;id> value.\n         no\n      \n      \n         htmlClass\n         Output parameter. If specified, the value is added to the wrapper element. If there is no wrapper element, this attribute has no effect.\n         Any valid HTML 5  &lt;class> value.\n         no\n      \n   \n\n\nSample of usage in layout:\n{%highlight xml%}\n...\n\n    \n\n...\n{%endhighlight xml%}\n\nThis would add a new column to the page layout.\n\n\nbefore and after attributes\nTo help you to position elements in a specific order suitable for design, SEO, usability, or other requirements, Magento software provides the before and after layout attributes.\nThese optional attributes can be used in layout {% glossarytooltip 8c0645c5-aa6b-4a52-8266-5659a8b9d079 %}XML{% endglossarytooltip %} files to control the order of elements in their common parent.\n\nThe following tables give a detailed description of the results you can get using the before and after attributes. The first table uses a block a as positioned element.\n\n\n   \n      \n         Attribute\n         Value\n         Description\n      \n      \n         before\n         Dash (-)\n         The block displays before all other elements in its parent node.\n      \n      \n         before\n         [element name]\n         The block displays before the named element.\n      \n      \n         before\n         empty value or [element name] is absent\n         Use the value of after. If that value is empty or absent as well, the element is considered as non-positioned.\n      \n      \n         after\n         Dash (-)\n         The block displays after all other elements in its parent node.\n      \n      \n         after\n         [element name]\n         The block displays after the named element.\n      \n      \n         after\n         empty value or [element name] is absent\n         Use the value of before. If that value is empty or absent as well, the block is considered as non-positioned.\n      \n   \n\nExamples\n\n   \n      \n         Situation\n         Result\n      \n      \n         Both before and after attributes are present\n         after takes precedence.\n      \n      \n         Both before and after attributes are absent or empty\n         The element is considered as non-positioned. All other elements are positioned at their specified locations. The missing element displays at a random position that doesn't violate requirements for the positioned elements.\n      \n      \n         Several elements have before or after set to dash (-)\n         All elements display at the top (or bottom, in case of the after attribute), but the ordering of group of these elements is undefined.\n      \n      \n         The before or after attribute's value refers to an element that is not located in the parent node of the element being defined.\n         The element displays at a random location that doesn't violate requirements for the correctly positioned elements.\n      \n   \n\n\n&lt;action>\n\n\n\n The &lt;action&gt; instruction is deprecated. If the method implementation allows, use the &lt;argument&gt; for &lt;block&gt; or &lt;referenceBlock&gt; to access block public {% glossarytooltip 786086f2-622b-4007-97fe-2c19e5283035 %}API{% endglossarytooltip %}.\n\n\nCalls public methods on the block API.\nDetails: Used to set up the execution of a certain method of the block during block generation; the &lt;action> node must be located in the scope of the &lt;block> node.\n\n\nExample:\n\n{%highlight xml%}\n\n    \n        Text\n    \n    \n        true\n    \n\n{%endhighlight xml%}\n\n\n&lt;action> child nodes are translated into block method arguments. Child nodes names are arbitrary. If there are two or more nodes with the same name under &lt;action>, they are passed as one array.\n\n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         method\n         Name of the public method of the block class this tag is located in that is called during block generation.\n         block method name\n         yes\n      \n   \n\n\nTo pass parameters, use the &lt;argument&gt;&lt;/argument&gt; instruction.\n\n&lt;referenceBlock> and &lt;referenceContainer>\nUpdates in &lt;referenceBlock> and &lt;referenceContainer> are applied to the corresponding &lt;block> or &lt;container>.\nFor example, if you make a reference by &lt;referenceBlock name=\"right\">, you're targeting the block &lt;block name=\"right\">.\n\nTo pass parameters to a block use the &lt;argument>&lt;/argument> instruction.\n\n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         remove\n         Allows to remove or cancel the removal of the element. When a container is removed, its child elements are removed as well.\n         true/false\n         no\n      \n      \n         display\n         Allows you to disable rendering of specific block or container with all its children (both set directly and by reference). The block's/container's and its children' respective PHP objects are still generated and available for manipulation.\n         true/false\n         no\n      \n   \n\n\n\nThe remove attribute is optional and its default value is false.\n\n    This implementation allows you to cancel removal of a block or container in your layout by setting remove attribute value to true\n    \n    Example: \n    \n    &lt;referenceBlock name=\"block.name\" remove=\"true\" /&gt;\n\nThe display attribute is optional and its default value is true.\n\n    You are always able to overwrite this value in your layout.\n    In situation when remove value is true, the display attribute is ignored.\n    \n    Example: \n    \n    &lt;referenceContainer name=\"container.name\" display=\"false\" /&gt;\n  \n\n&lt;move>\nSets the declared block or container element as a child of another element in the specified order.\nExample:\n\n{%highlight xml%}\n\n{%endhighlight xml%}\n\n\n\n   &lt;move> is skipped if the element to be moved is not defined.\n   If the as attribute is not defined, the current value of the element alias is used. If that is not possible, the value of the name attribute is used instead.\n  During layout generation, the &lt;move&gt;\n  instruction is processed before the removal (set using the \n    remove attribute). This means if any elements are moved\n    to the element scheduled for removal, they will be removed as\n    well.\n  \n\n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         element\n         Name of the element to move.\n         element name\n         yes\n      \n      \n         destination\n         Name of the target parent element.\n         element name\n         yes\n      \n      \n         as\n         Alias name for the element in the new location.\n         0-9, A-Z, a-z, underscore (_), period (.), dash (-). Case-sensitive.\n         no\n      \n      \n         after | before\n         Specifies the element's position relative to siblings. Use dash (-) to position the block before or after all other siblings of its level of nesting. If the attribute is omitted, the element is placed after all siblings.\n         element name\n         no\n      \n   \n\n\n&lt;remove&gt;\n\nIs used only to remove the static resources linked in a page &lt;head&gt; section.\nFor removing blocks or containers, use the &lt;remove&gt; attribute for &lt;referenceBlock&gt; and &lt;referenceContainer&gt;.\n\nExample of usage:\n\n{%highlight xml%}\n\n   \n        \n        \n        \n        \n\t\t\t\t\t\t\t\t\n\t\n        \n        \n         \n   \n{%endhighlight xml%}\n\n&lt;update&gt;\n\nIncludes a certain layout file.\n\nUsed as follows:\n\n{%highlight xml%}\n\n{%endhighlight xml%}\n\nThe specified handle is \"included\" and executed recursively.\n\n&lt;argument&gt;\nUsed to pass an argument. Must be always enclosed in&lt;arguments>.\n \n\n   \n      \n         Attribute\n         Description\n         Values\n         Required?\n      \n      \n         name\n         Argument name.\n         unique\n         yes\n      \n      \n         xsi:type\n         Argument type.\n         string|boolean|object|number|null|array\n         yes\n      \n      \n         translate\n         \n         true|false\n         no\n      \n\n   \n\n\nTo pass multiple arguments use the following construction:\n{%highlight xml%}\n\n   \n   \n   ...\n\n{%endhighlight xml%}\n\nTo pass an argument that is an array use the following construction:\n\n{%highlight xml%}\n\n   \n   \n   ...\n\n{%endhighlight xml%}\n\nArguments values set in a layout file can be accessed in templates using the get{ArgumentName}() and has{ArgumentName}() methods. The latter returns a boolean defining whether there's any value set. \n{ArgumentName} is obtained from the name attribute the following way: for getting the value of &lt;argument name=\"some_string\"&gt; the method name is getSomeString().\n\nExample:\nSetting a value of css_class in the app/code/Magento/Theme/view/frontend/layout/default.xml layout file:\n\n{%highlight xml%}\n...\n\n    header links\n\n...\n{%endhighlight xml%}\n\n\nUsing the value of css_class in app/code/Magento/Theme/view/frontend/templates/html/title.phtml:\n\n{%highlight php%}\n...\n$cssClass = $this->hasCssClass() ? ' ' . $this->getCssClass() : '';\n...\n{%endhighlight %}\n\n&lt;arguments&gt;\n\n&lt;arguments> is a required container for &lt;argument>. It does not have its own attributes.\n\nExample:\n\n{%highlight xml%}\n...\n\n    header links\n\n...\n{%endhighlight xml%}\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/xml-instructions.html"
    }
    ,
  
    "guides-v2-0-frontend-dev-guide-layouts-xml-manage-html": {
      "title": "Common layout customization tasks",
      "content": "What's in this topic\n\nThis article describes the following typical {% glossarytooltip 73ab5daa-5857-4039-97df-11269b626134 %}layout{% endglossarytooltip %} customization tasks:\n\n*\tSet the page layout\n*\tInclude static resources (JavaScript, CSS, fonts) in &lt;head&gt;\n*\tRemove static resources (JavaScript, CSS, fonts) in &lt;head&gt;\n*\tCreate a container\n*\tReference a container\n*\tCreate a block\n*\tSet a block's template\n*\tModify block arguments\n*\tReference a block\n*\tUse block object methods to set block properties\n*\tRearrange elements\n*\tRemove elements\n*\tReplace elements\n\n\n\n  To ensure stability and secure your customizations from being deleted during upgrade, do not change out-of-the-box Magento {% glossarytooltip c1e4242b-1f1a-44c3-9d72-1d5b1435e142 %}module{% endglossarytooltip %} and {% glossarytooltip d2093e4a-2b71-48a3-99b7-b32af7158019 %}theme{% endglossarytooltip %} layouts. To customize layout, create extending and overriding layout files in your custom theme.\n\n\nSet the page layout\n\nThe type of page layout to be used for a certain page is defined in the page configuration file, in the `layout` attribute of the root &lt;page&gt; node.\n\nExample:\nChange the layout of Advanced Search page from default \"1-column\" to \"2-column with left bar\". To do this, extend `catalogsearch_advanced_index.xml` in your theme by adding the following layout:\n\napp/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/Magento_CatalogSearch/layout/catalogsearch_advanced_index.xml\n\n{%highlight xml%}\n\n...\n\n{%endhighlight xml%}\n\n\nInclude static resources (JavaScript, CSS, fonts)\n\nJavaScript, {% glossarytooltip 6c5cb4e9-9197-46f2-ba79-6147d9bfe66d %}CSS{% endglossarytooltip %} and other static assets are added in the `` section of a page configuration file. The default look of a Magento store page `` is defined by `app/code/Magento/Theme/view/frontend/layout/default_head_blocks.xml`. The recommended way to add CSS and {% glossarytooltip 312b4baf-15f7-4968-944e-c814d53de218 %}JavaScript{% endglossarytooltip %} is to extend this file in your custom theme, and add the assets there.\nThe following file is a sample of a file you must add:\n\n&lt;theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml\n\n{%highlight xml%}\n\n    \n        \n    \t\n    \n        \n        \n        \n\t\t\n    \t\n\t\n        \n         \n    \n\n{%endhighlight xml%}\n\n\nWhen adding external resources, specifying the src_type=\"url\" argument value is a must.\n\nIf you'd like to include a google webfont, you have to add the rel=\"stylesheet\" type=\"text/css\" to the  tag, otherwise it won't work.\n\n\nYou can use either `` or `` instruction to add a locally stored JavaScript file to your theme.\n\nThe path to assets is specified relatively to one of the following locations:\n\n&lt;theme_dir&gt;/web\n&lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/web\n\n\n\nAdding conditional comments\nConditional comments are meant to give special instructions for Internet Explorer. \nIn the terms of adding assets, you can add CSS files to be included for a specific version of Internet Explorer. \nA sample follows:\n\n{%highlight xml%}\n    \n        \n    \n\n{%endhighlight xml%}\n\nThis adds an IE conditional comment in the generated HTML, like in the following example:\n\n{%highlight html%}\n\n{%endhighlight html%}\n\nIn this example, orange is a custom theme created by the OrangeCo vendor.\n\nRemove static resources (JavaScript, CSS, fonts)\n\nTo remove the static resources, linked in a page ``, make a change similar to the following in a theme extending file:\n\n`app/design/frontend///Magento_Theme/layout/default_head_blocks.xml`\n\n{%highlight xml%}\n\n   \n        \n        \n        \n        \n\t\t\t\t\t\t\t\t\n\t\n        \n        \n         \n   \n{%endhighlight xml%}\n\nNote, that if a static asset is added with a module path (for example `Magento_Catalog::js/sample.js`) in the initial layout, you need to specify the module path as well when removing the asset.\n\nCreate a container\n\nUse the following sample to create (declare) a container:\n\n{%highlight xml%}\n\n{%endhighlight xml%}\n\nReference a container\n\nTo update a container use the `` instruction.\n\nExample: add links to the page header panel.\n\n{%highlight xml%}\n\n    \n        \n            header links\n        \n    \n\n{%endhighlight xml%}\n\nCreate a block\n\nBlocks are created (declared) using the `` instruction.\n\nExample: add a block with a product {% glossarytooltip fd4bed67-7130-4415-8a6f-ad8d8ef8f25e %}SKU{% endglossarytooltip %} information.\n\n{%highlight xml%}\n\n    \n        getSku\n        sku\n        sku\n    \n\n{%endhighlight xml%}\n\n\nReference a block\n\nTo update a block use the `` instruction.\n\nExample: pass the image to the `logo` block.\n\n{%highlight xml%}\n\n    \n        images/logo.png\n    \n\n{%endhighlight xml%}\n\n## Set a block template {#set_template}\n\nThere are two ways to set the template for a block:\n\n- using the `template` attribute\n- using the `` instruction\n\nBoth approaches are demonstrated in the following examples of changing the template of the page title block.\n\n**Example 1:**\n\n{%highlight xml%}\n \n{%endhighlight%}\n\n**Example 2:** \n\n{%highlight xml%}\n \n     \n         %Namespace_Module::new_template.phtml%\n     \n \n{%endhighlight%}\n\nIn both example, the template is specified according to the following:\n\n * `Namespace_Module:` defines the module the template belongs to. For example, `Magento_Catalog`.\n * `new_template.phtml`: the path to the template relatively to the `templates` directory. It might be `/view//templates` or `//templates`.\n\n\n\n  Template values specified as attributes have higher priority during layout generation, than the ones specified using &lt;argument&gt;. It means, that if for a certain block, a template is set as attribute, it will override the value you specify in &lt;argument&gt; for the same block.\n\n\nModify block arguments\n\nTo modify block arguments, use the `` instruction.\n\nExample: change the value of the existing block argument and add a new argument.\n\nInitial block declaration:\n\n{%highlight xml%}\n...\n\n    \n        Block Label\n    \n\n...\n{%endhighlight xml%}\n\nExtending layout:\n\n{%highlight xml%}\n...\n\n    \n        \n        New Block Label\n        \n        Custom Block Label\n    \n \n...\n{%endhighlight xml%}\n\nUse block object methods to set block properties\n\nThere are two ways to access block object methods:\n\n- using the &lt;argument&gt; instruction for `` or ``\n- using the &lt;action&gt; instruction. This way is not recommended, but can be used for calling those methods, which are not refactored yet to be accessed through ``. \n\nExample 1: Set a CSS class and add an attribute for the product page using ``.\n\nExtending layout:\n\n{%highlight xml%}\n\n    \n        product\n        itemprop=\"name\"\n    \n\n{%endhighlight xml%}\n\nExample 2: Set a page title using ``. \n\n\n\n Do not use &lt;action&gt;, if the method implementation allows calling it using &lt;argument&gt; for &lt;block&gt; or &lt;referenceBlock&gt;.\n\n\n\nExtending layout:\n\n{%highlight xml%}\n\t...\n\t\n\t    \n\t        Catalog Advanced Search\n\t    \n\t\n\t...\n{%endhighlight xml%}\n\nRearrange elements\n\nIn layout files you can change the elements order on a page. This can be done using one of the following:\n\n* `` instruction: allows changing elements' order and parent.\n* `before` and `after` attributes of ``: allows changing elements' order within one parent.\n\n\nExample of `` usage:\nput the stock availability and SKU blocks next to the product price on a product page.\n\nIn the Magento Blank theme these elements are located as follows:\n\n\n\nLet's place the stock availability and SKU blocks after product price block on a product page, and move the review block out of the product-info-price container.\nTo do this, add the extending `catalog_product_view.xml` in the `app/design/frontend/OrangeCo/orange/Magento_Catalog/layout/` directory:\n\n{%highlight xml%}\n\n    \n        \n        \n    \n\n\n{%endhighlight xml%}\n\nThis would make the product page look like following:\n\n\n\n\n\n  To learn how to locate the layout file you need to customize, see Locate templates, layouts, and styles.\n\n\nRemove elements\n\nElements are removed using the `remove` attribute for the `` and ``. \n\n**Example**: remove the Compare Products {% glossarytooltip 31751771-8163-434b-88bc-c5f94d859fc3 %}sidebar{% endglossarytooltip %} block from all store pages. \n\nThis block is declared in `app/code/Magento/Catalog/view/frontend/layout/default.xml`:\n\n{%highlight xml%}\n\n    \n...\n        \n            \n        \n...\n    \n\n{%endhighlight xml%}\n\n\nTo remove the block, add the extending `default.xml` in your theme:\n`/Magento_Catalog/layout/default.xml`\n\nIn this file, reference the element having added the `remove` attribute:\n\n{%highlight xml%}\n\n\n    \n...\n        \n...\n    \n\n\n{%endhighlight xml%}\n\n\nReplace elements\n\nTo replace an element, remove it and add a new one.\n\n\n#### Related topics:\n\n*\tLayout instructions\n*\tExtend a layout\n\n",
      "url": "/guides/v2.0/frontend-dev-guide/layouts/xml-manage.html"
    }
    ,
  
    "guides-v2-0-install-gde-prereq-zip-install-html": {
      "title": "(Easy) Install the Magento archive on your server",
      "content": "Intended audience\nThe audience for this topic is anyone who downloaded a compressed Magento software archive (`.zip` or `.tar`). If you'd rather use Composer, go back and choose another starting point.\n\n## Prerequisites\n\n{% include install/prereq.md %}\n\n## Get the Magento software\n\n{% include install/get-software_zip.md %}\n\nTransfer the Magento archive to your server\nTo transfer the Magento software archive to your server:\n\n1.\tInstall and configure a file transfer protocol (FTP) or secure copy protocol (SCP) client to transfer the Magento software from your computer to your server.\n\n\tThere are many ways to configure FTP and SCP. Following are a few packages you can use. Magento does not recommend particular software.\n\n\t*\tWindows: WinSCP or Filezilla\n\t*\tMac OS: CyberDuck or Filezilla\n\n2.\tCreate a connection to your Magento server.\n\n\tFollow the prompts on your screen or consult the documentation provided with your FTP software for more information.\n\n3.\tAfter you log in to your server, browse to locate the {{site.data.var.ce}} or {{site.data.var.ee}} archive on your local system.\n\n\tOn the remote system, browse to locate the web server docroot directory.\n\n\tThe following figure shows an example.\n\n\t\n\n4.\tTransfer the archive from your local system to the web server docroot directory.\n\n\tOn some FTP client software, you do this by dragging and dropping.\n5.\tWait while the transfer completes.\n6.\tLog in to your Magento server, or switch to, the Magento file system owner.\n7.\tChange to the web server docroot or the virtual host directory.\n7.\tCreate a subdirectory for the Magento software.\n\n\tIf you set up a virtual host, the subdirectory name must match the name in your virtual host.\n\n\tFor example,\n\n\t\tmkdir magento2ce\n\t\tmkdir magento2ee\n\n\tYou can also use a generic directory name\n\n\t\tmkdir magento2\n\n7.\tCopy the Magento archive to that directory.\n\n\tFor example,\n\n\t\tcp /var/www/Magento-CE-2.0.0+Samples.tar.bz2 magento2\n\n8.\tContinue with the next section.\n\nExtract the software on your server\nLog in to your Magento server as, or switch to, the Magento file system owner and extract the software package in the web server docroot using one of the following commands:\n\n\n\n \n\tFile format\n\tCommand to extract\n\n \n\t.tar.gz\n\ttar zxf &lt;filename>\n\n \n\t.zip\n\tunzip &lt;filename>\n\n \n\t.tar.bz2\n\ttar jxf &lt;filename>\n\n\n\n\nThe Magento software extracts to the directory you created. After the file has extracted, either delete the Magento archive or move it to another directory.\n\n{% include install/file-system-perms-before.md %}\n\n#### Next step\nInstall the Magento software:\n\n*\tCommand line\n*\tSetup Wizard\n",
      "url": "/guides/v2.0/install-gde/prereq/zip_install.html"
    }
    
  
}
